S'- name: /Adaptivity\n  description: |\n    \n  parameters:\n  - name: cycles_per_step\n    required: No\n    default: !!str 1\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to use when on each timestep during a Transient simulation.\n  - name: initial_marker\n    required: No\n    default: !!str \n    cpp_type: MarkerName\n    group_name: \n    description: |\n      The name of the Marker to use to adapt the mesh during initial refinement.\n  - name: initial_steps\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to do based on the initial condition.\n  - name: marker\n    required: No\n    default: !!str \n    cpp_type: MarkerName\n    group_name: \n    description: |\n      The name of the Marker to use to actually adapt the mesh.\n  - name: max_h_level\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Maximum number of times a single element can be refined. If 0 then infinite.\n  - name: start_time\n    required: No\n    default: !!str -1.79769e+308\n    cpp_type: double\n    group_name: \n    description: |\n      The time that adaptivity will be active after.\n  - name: steps\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to use when doing a Steady simulation.\n  - name: stop_time\n    required: No\n    default: !!str 1.79769e+308\n    cpp_type: double\n    group_name: \n    description: |\n      The time after which adaptivity will no longer be active.\n  subblocks:\n  - name: /Adaptivity/Indicators\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Adaptivity/Indicators/*\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The block id where this object lives.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n    - name: /Adaptivity/Indicators/AnalyticalIndicator\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str ANY_BLOCK_ID \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          block ID or name where the object works\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: function\n        required: Yes\n        default: !!str \n        cpp_type: FunctionName\n        group_name: \n        description: |\n          The analytic solution to compare against\n      - name: implicit\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Determines whether this object is calculated using an implicit or explicit form\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: type\n        required: No\n        default: !!str AnalyticalIndicator\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this Indicator operates on\n      subblocks:\n    - name: /Adaptivity/Indicators/GradientJumpIndicator\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: scale_by_flux_faces\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n      - name: type\n        required: No\n        default: !!str GradientJumpIndicator\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this side indicator applies to\n      subblocks:\n    - name: /Adaptivity/Indicators/LaplacianJumpIndicator\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: scale_by_flux_faces\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n      - name: type\n        required: No\n        default: !!str LaplacianJumpIndicator\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this side indicator applies to\n      subblocks:\n  - name: /Adaptivity/Markers\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Adaptivity/Markers/*\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The block id where this object lives.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n    - name: /Adaptivity/Markers/BoxMarker\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: bottom_left\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The bottom left point (in x,y,z with spaces in-between).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: inside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements inside the box.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: outside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements outside the box.\n      - name: top_right\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The bottom left point (in x,y,z with spaces in-between).\n      - name: type\n        required: No\n        default: !!str BoxMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ComboMarker\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: markers\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<MarkerName, std::allocator<MarkerName> >\n        group_name: \n        description: |\n          The Markers to combine.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: type\n        required: No\n        default: !!str ComboMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ErrorFractionMarker\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: indicator\n        required: Yes\n        default: !!str \n        cpp_type: IndicatorName\n        group_name: \n        description: |\n          The name of the Indicator that this Marker uses.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: refine\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n      - name: type\n        required: No\n        default: !!str ErrorFractionMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ErrorToleranceMarker\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements with error less than this will be coarsened.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: indicator\n        required: Yes\n        default: !!str \n        cpp_type: IndicatorName\n        group_name: \n        description: |\n          The name of the Indicator that this Marker uses.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: refine\n        required: No\n        default: !!str 1.79769e+308\n        cpp_type: double\n        group_name: \n        description: |\n          Elements with error more than this will be refined.\n      - name: type\n        required: No\n        default: !!str ErrorToleranceMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/OrientedBoxMarker\n      description: |\n        Marks inside and outside a box that can have arbitrary orientation and center point\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: center\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::Point\n        group_name: \n        description: |\n          The center (many people spell this \'center\') of the box.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: height\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The height of the box\n      - name: inside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements inside the box.\n      - name: length\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The length of the box\n      - name: length_direction\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The direction along which the length is oriented (must be perpendicular to width_direction).\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: outside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements outside the box.\n      - name: type\n        required: No\n        default: !!str OrientedBoxMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: width\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The width of the box\n      - name: width_direction\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The direction along which the width is oriented.\n      subblocks:\n    - name: /Adaptivity/Markers/UniformMarker\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: mark\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: type\n        required: No\n        default: !!str UniformMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ValueRangeMarker\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: buffer_size\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          A buffer zone value added to both ends of the range where a third_state marker can be returned.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: invert\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n      - name: lower_bound\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The lower bound value for the range.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: third_state\n        required: No\n        default: !!str DONT_MARK\n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          The Marker state to apply to values in the buffer zone (both ends of the range).\n      - name: type\n        required: No\n        default: !!str ValueRangeMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: upper_bound\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The upper bound value for the range.\n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName>\n        group_name: \n        description: |\n          The variable whose values are used in this marker.\n      subblocks:\n    - name: /Adaptivity/Markers/ValueThresholdMarker\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: invert\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          If this is true then values _below_ \'refine\' will be refined and _above_ \'coarsen\' will be coarsened.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: refine\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n      - name: third_state\n        required: No\n        default: !!str DONT_MARK\n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n      - name: type\n        required: No\n        default: !!str ValueThresholdMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName>\n        group_name: \n        description: |\n          The values of this variable will be compared to \'refine\' and \'coarsen\' to see what should be done with the element\n      subblocks:\n- name: /AuxKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /AuxKernels/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /AuxKernels/AccumulateAux\n    description: |\n      \n    parameters:\n    - name: accumulate_from_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable whose values are to be accumulated into the current variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AccumulateAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/AqueousEquilibriumRxnAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The equilibrium constant in dissociation form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficient of reactants\n    - name: type\n      required: No\n      default: !!str AqueousEquilibriumRxnAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        the list of primary spceies participating in this equilibrium species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/BndsCalcAux\n    description: |\n      Calculate location of grain boundaries in a polycrystalline sample\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BndsCalcAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/BoundsAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounded_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be bounded\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: lower\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lower bound for the variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BoundsAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The upper bound for the variable\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ConstantAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Some constant value that can be read from the input file\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ContactPressureAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str NONLINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: nodal_area\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The nodal area\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ContactPressureAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/CoupledDirectionalMeshHeightInterpolation\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable whose values are going to be interpolated.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction to interpolate in.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledDirectionalMeshHeightInterpolation\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/CrossTermGradientFreeEnergy\n    description: |\n      Free energy contribution from the cross terms in ACMultiInetrface\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrossTermGradientFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/CrystalPlasticityRotationOutAux\n    description: |\n      Output updated rotation tensor to a file: Use for stereographic plots\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_frequency\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Frequency of Output\n    - name: rotout_file_name\n      required: No\n      default: !!str rot.out\n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of rotation output file: Default rot.out\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrystalPlasticityRotationOutAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/CylindricalRankTwoAux\n    description: |\n      Takes RankTwoTensor material and outputs component in cylindrical coordinates\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: center_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Location of the center point of the cylindrical coordinates\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CylindricalRankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/DarcyFluxComponent\n    description: |\n      Darcy flux (in m^3.s^-1.m^-2, or m.s^-1)  -(k_ij/mu (nabla_j P - w_j)), where k_ij is the permeability tensor, mu is the fluid viscosity, P is the fluid pressure, and w_j is the fluid weight.  If velocity_scaling is used then -(k_ij/mu (nabla_j P - w_j))/velocity_scaling is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The component of the Darcy flux to return\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fluid_viscosity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Fluid dynamic viscosity (usually measured in Pa.s)\n    - name: fluid_weight\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Fluid weight (gravity*density) as a vector pointing downwards (usually measured in kg.m^-2.s^-2 = Pa/m).  Eg \'0 0 -10000\'\n    - name: porepressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable representing the porepressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DarcyFluxComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: velocity_scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale the result by (1/velocity_scaling).  Usually velocity_scaling = porosity.\n    subblocks:\n  - name: /AuxKernels/DebugResidualAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: debug_variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable that is being debugged.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DebugResidualAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/DomainIntegralQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: j_integral_radius_inner\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: j_integral_radius_outer\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/DomainIntegralTopologicalQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: ring_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ring of elements that defines the integration domain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralTopologicalQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ElasticEnergyAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElasticEnergyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ElementsOnLineAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dist_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for distance between element and line\n    - name: execute_on\n      required: No\n      default: !!str INITIAL\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: line1\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        First point of line along which to pick elements\n    - name: line2\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Second point of line along which to pick elements\n    - name: line_id\n      required: No\n      default: !!str 1\n      cpp_type: int\n      group_name: \n      description: |\n        ID of the line along which to pick elements\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementsOnLineAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/FeatureFloodCountAux\n    description: |\n      Feature detection by connectivity analysis\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubble_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: field_display\n      required: No\n      default: !!str UNIQUE_REGION\n      cpp_type: MooseEnum\n      group_name: \n      options: UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID\n      description: |\n        Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n    - name: map_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FeatureFloodCountAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/FunctionAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use as the value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/GapValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary on the other side of a gap.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /AuxKernels/INSCourant\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSCourant\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /AuxKernels/INSDivergenceAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSDivergenceAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /AuxKernels/KKSGlobalFreeEnergy\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: g_name\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the double well function g(eta)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSGlobalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /AuxKernels/KineticDisPreConcAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: e_act\n      required: No\n      default: !!str 29100\n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy, J/mol\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gas_const\n      required: No\n      default: !!str 8.31434\n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant, in J/mol K\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The equilibrium constant of the dissolution reaction\n    - name: r_area\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        Specific reactive surface area in m^2/L solution\n    - name: ref_kconst\n      required: No\n      default: !!str 6.45654e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Kinetic rate constant in mol/m^2 s\n    - name: ref_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature, K\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficients of reactant species\n    - name: sys_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        System temperature at simulation, K\n    - name: type\n      required: No\n      default: !!str KineticDisPreConcAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The list of reactant species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/KineticDisPreRateAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: e_act\n      required: No\n      default: !!str 29100\n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy, J/mol\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gas_const\n      required: No\n      default: !!str 8.31434\n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant, in J/mol K\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The equilibrium constant of the dissolution reaction\n    - name: r_area\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        Specific reactive surface area in m^2/L solution\n    - name: ref_kconst\n      required: No\n      default: !!str 6.45654e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Kinetic rate constant in mol/m^2 s\n    - name: ref_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature, K\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficients of reactant species\n    - name: sys_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        System temperature at simulation, K\n    - name: type\n      required: No\n      default: !!str KineticDisPreRateAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The list of reactant species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealDenseMatrixAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealDenseMatrixAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealTensorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealTensorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealVectorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The vector component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealVectorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialStdVectorAux\n    description: |\n      Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialStdVectorRealGradientAux\n    description: |\n      Extracts a component of a material\'s std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The gradient component to be extracted for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorRealGradientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialSymmElasticityTensorAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The matrix index (0-20) to output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor_matpro\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The SymmElasticityTensor material property name\n    - name: type\n      required: No\n      default: !!str MaterialSymmElasticityTensorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialTensorAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 1 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction vector\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis used to calculate some material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: qp_select\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The quad point you want evaluated\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n      description: |\n        A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The material tensor name.\n    - name: type\n      required: No\n      default: !!str MaterialTensorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialVectorAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 2.\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: length\n      description: |\n        A scalar quantity to compute: (only option is Length).\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialVectorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: vector\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The material vector name.\n    subblocks:\n  - name: /AuxKernels/NSEnthalpyAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSEnthalpyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NSPressureAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSPressureAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /AuxKernels/NSTemperatureAux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSTemperatureAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /AuxKernels/NSVelocityAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: momentum\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Momentum (conserved form)\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Density (conserved form)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSVelocityAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NearestNodeDistanceAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to find the distance to.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeDistanceAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NearestNodeValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to get the value from.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NewmarkAccelAux\n    description: |\n      \n    parameters:\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacement\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        displacement variable\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkAccelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        velocity variable\n    subblocks:\n  - name: /AuxKernels/NewmarkVelAux\n    description: |\n      \n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        acceleration variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        gamma parameter\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkVelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NormalizationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The normalization factor\n    - name: normalization\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor on the source\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be normalized\n    - name: type\n      required: No\n      default: !!str NormalizationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/OutputEulerAngles\n    description: |\n      Output euler angles from user object to an AuxVariable.\n    parameters:\n    - name: GrainTracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_euler_angle\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 Phi phi2\n      description: |\n        Euler angle to output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str OutputEulerAngles\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/PFCEnergyDensity\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/PFCRFFEnergyDensity\n    description: |\n      \n    parameters:\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion nothing\n      description: |\n        Which approach will be used to handle the natural log\n    - name: num_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        This is the number of terms to use in the taylor series expansion\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: type\n      required: No\n      default: !!str PFCRFFEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ParsedAux\n    description: |\n      Parsed function AuxKernel.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        coupled variables\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        enable just-in-time compilation of function expressions for faster evaluation\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        function expression\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ParsedAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/PenetrationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quantity\n      required: No\n      default: !!str distance\n      cpp_type: MooseEnum\n      group_name: \n      options: distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status\n      description: |\n        The quantity to recover from the available penetration information\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str PenetrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ProcessorIDAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ProcessorIDAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/QuotientAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QuotientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RankFourAux\n    description: |\n      Access a component of a RankFourTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ijkl for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ijkl for the tensor to output (0, 1, 2)\n    - name: index_k\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index k of ijkl for the tensor to output (0, 1, 2)\n    - name: index_l\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index l of ijkl for the tensor to output (0, 1, 2)\n    - name: rank_four_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank four material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankFourAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RankTwoAux\n    description: |\n      Access a component of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RankTwoScalarAux\n    description: |\n      Compute a scalar property of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: scalar_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant\n      description: |\n        Type of scalar output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankTwoScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsDensityAux\n    description: |\n      auxillary variable which is fluid density\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the density.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsDensityAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsDensityPrimeAux\n    description: |\n      auxillary variable which is d(density)/dp\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the density.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsDensityPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsDensityPrimePrimeAux\n    description: |\n      auxillary variable which is d^2(density)/dp^2\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the density.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsDensityPrimePrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsRelPermAux\n    description: |\n      auxillary variable which is the relative permeability\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the relative permeability.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsRelPermAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsRelPermPrimeAux\n    description: |\n      auxillary variable which is d(relative permeability)/dSeff\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the relative permeability.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsRelPermPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsRelPermPrimePrimeAux\n    description: |\n      auxillary variable which is d^2(relative permeability)/dSeff^2\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the relative permeability.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsRelPermPrimePrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsSatAux\n    description: |\n      auxillary variable which is saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: sat_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines saturation.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable that is the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsSatAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsSatPrimeAux\n    description: |\n      auxillary variable which is saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: sat_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines saturation.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable that is the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsSatPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsSeffAux\n    description: |\n      auxillary variable which is effective saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables that represent the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines effective saturation.\n    - name: type\n      required: No\n      default: !!str RichardsSeffAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RichardsSeffPrimeAux\n    description: |\n      auxillary variable which is effective saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables that represent the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines effective saturation.\n    - name: type\n      required: No\n      default: !!str RichardsSeffPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: wrtnum\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        This aux kernel will return d(seff)/dP_wrtnum.  0<=wrtnum<number_of_pressure_vars.\n    subblocks:\n  - name: /AuxKernels/RichardsSeffPrimePrimeAux\n    description: |\n      auxillary variable which is 2nd derivative of effective saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables that represent the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines effective saturation.\n    - name: type\n      required: No\n      default: !!str RichardsSeffPrimePrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: wrtnum1\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum1<number_of_pressure_vars.\n    - name: wrtnum2\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum2<number_of_pressure_vars.\n    subblocks:\n  - name: /AuxKernels/SelfAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SelfAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SolutionAux\n    description: |\n      \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direct\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the meshes must be the same and then the values are simply copied over.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the variable to extract from the file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a)  to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the SolutionUserObject\n    - name: type\n      required: No\n      default: !!str SolutionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SpatialUserObjectAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SpatialUserObjectAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/TensorElasticEnergyAux\n    description: |\n      Compute the local elastic energy\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TensorElasticEnergyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/TestEBSDAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_name\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 phi phi2 grain phase symmetry op\n      description: |\n        The data to be extracted from the EBSD data by this AuxKernel\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader GeneralUserObject\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TestEBSDAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/TotalFreeEnergy\n    description: |\n      Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n         Base name of the free energy function\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TotalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/VariableGradientComponent\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The gradient component to compute\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gradient_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable from which to compute the gradient component\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableGradientComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/VariableTimeIntegrationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A simple coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: order\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableTimeIntegrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: variable_to_integrate\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be integrated\n    subblocks:\n  - name: /AuxKernels/VectorMagnitudeAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorMagnitudeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-component of the vector\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-component of the vector\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-component of the vector\n    subblocks:\n- name: /AuxScalarKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /AuxScalarKernels/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /AuxScalarKernels/ConstantScalarAux\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str ConstantScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value to be set to the scalar variable.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /AuxScalarKernels/FunctionScalarAux\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to set the scalar variable value.\n    - name: type\n      required: No\n      default: !!str FunctionScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /AuxScalarKernels/QuotientScalarAux\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: type\n      required: No\n      default: !!str QuotientScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /AuxVariables\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /AuxVariables/*\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The block id where this variable lives\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL SCALAR\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: initial_condition\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Specifies the initial condition for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: initial_from_file_timestep\n      required: No\n      default: !!str LATEST\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: Initial From File\n      description: |\n        Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n    - name: initial_from_file_var\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: Initial From File\n      description: |\n        Gives the name of a variable for which to read an initial condition from a mesh file\n    subblocks:\n    - name: /AuxVariables/*/InitialCondition\n      description: |\n        \n      parameters:\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n      - name: /AuxVariables/*/InitialCondition/<type>\n        description: |\n          \n        parameters:\n        subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/BoundingBoxIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: inside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable inside the box\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str BoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ClosePackIC\n          description: |\n            Close packed arrangement of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str ClosePackIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ConstantIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str ConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value to be set in IC\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/CrossIC\n          description: |\n            Cross-shaped initial condition\n          parameters:\n          - name: amplitude\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The amplitude\n          - name: average\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The average value\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: buffer\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              A small area between the max value and the interface\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: interface\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              The interface width\n          - name: length\n            required: No\n            default: !!str 0.75\n            cpp_type: double\n            group_name: \n            description: |\n              The length\n          - name: type\n            required: No\n            default: !!str CrossIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: No\n            default: !!str 0.125\n            cpp_type: double\n            group_name: \n            description: |\n              The width\n          - name: x1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/FunctionIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: FunctionName\n            group_name: \n            description: |\n              The initial condition function.\n          - name: type\n            required: No\n            default: !!str FunctionIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC\n          description: |\n            Perturbed hexagonal polycrystal\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: perturbation_percent\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The percent to randomly perturbate centers of grains relative to the size of the grain\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: typ\n            required: No\n            default: !!str 1\n            cpp_type: int\n            group_name: \n            description: |\n              \n          - name: type\n            required: No\n            default: !!str HexPolycrystalIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_offset\n            required: No\n            default: !!str 0.5\n            cpp_type: double\n            group_name: \n            description: |\n              Specifies offset of hexagon grid in x-direction\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC\n          description: |\n            Perturbed square lattice of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Rnd_variation\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: avoid_bounds\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              Don\'t place any bubbles on the simulation cell boundaries\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: circles_per_side\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector containing the number of bubbles along each side\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: pos_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circels\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str LatticeSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC\n          description: |\n            Random distribution of smooth circles with given minimum spacing\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to place\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circels\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str MultiSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PFCFreezingIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: crystal_structure\n            required: No\n            default: !!str \n            cpp_type: MooseEnum\n            group_name: \n            options: FCC BCC\n            description: |\n              The type of crystal structure\n          - name: inside\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Value inside sinusoids\n          - name: lc\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The lattice constant off the crystal structure\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Value outside sinusoids\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str PFCFreezingIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the frozen box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the frozen box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: typ\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Type of random grain structure\n          - name: type\n            required: No\n            default: !!str PolycrystalRandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC\n          description: |\n            Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: type\n            required: No\n            default: !!str PolycrystalReducedIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RampIC\n          description: |\n            Linear ramp along the x-axis with given values at the left and right extreme points.\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str RampIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value_left\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on left (xmin) boundary.\n          - name: value_right\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on right (xmax) boundary.\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RandomIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ReconPhaseVarIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: ebsd_reader\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              The EBSDReader object holding the EBSD data\n          - name: phase\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              EBSD phase number this variable is to represent\n          - name: type\n            required: No\n            default: !!str ReconPhaseVarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ReconVarIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: ebsd_reader\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              The EBSDReader GeneralUserObject\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Specifies the number of order parameters to create\n          - name: phase\n            required: No\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              EBSD phase number to be assigned to this grain\n          - name: type\n            required: No\n            default: !!str ReconVarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC\n          description: |\n            Random noise with different min/max inside/outside of a bounding box\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: mn_invalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable invalue the box\n          - name: mn_outvalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable outvalue the box\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable invalue the box\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable outvalue the box\n          - name: type\n            required: No\n            default: !!str RndBoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC\n          description: |\n            Random noise with different min/max inside/outside of a smooth circle\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RndSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: variation_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the invalue\n          - name: variation_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the outvalue\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ScalarComponentIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str ScalarComponentIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: values\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Initial values to initialize the scalar variable.\n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ScalarConstantIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str ScalarConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SmoothCircleIC\n          description: |\n            Circle with a smooth interface\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC\n          description: |\n            Multiple smooth circles with manually specified radii and center points\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radii\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The radius for each circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each circle center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each circle center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ThumbIC\n          description: |\n            Thumb shaped bicrystal for grain boundary mobility tests\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: height\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: type\n            required: No\n            default: !!str ThumbIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: xcoord\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC\n          description: |\n            Tricrystal with two circles/bubbles\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Index for the current grain order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grain order parameters\n          - name: type\n            required: No\n            default: !!str Tricrystal2CircleGrainsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n- name: /BCs\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /BCs/*\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CahnHilliardAnisoFluxBC\n    description: |\n      Cahn-Hilliard fixed flux boundary condition using a tensorial (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: flux\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The flux set at the boundary\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliardAnisoFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CahnHilliardFluxBC\n    description: |\n      Cahn-Hilliard fixed flux boundary condition using a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: flux\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The flux set at the boundary\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliardFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CavityPressure\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /BCs/CavityPressure/*\n      description: |\n        \n      parameters:\n      - name: boundary\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          The list of boundary IDs from the mesh where the pressure will be applied\n      - name: disp_x\n        required: Yes\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The x displacement\n      - name: disp_y\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The y displacement\n      - name: disp_z\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The z displacement\n      - name: output\n        required: No\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          The name to use for the plenum pressure value.\n      - name: save_in_disp_x\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for x displacement\n      - name: save_in_disp_y\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for y displacement\n      - name: save_in_disp_z\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for z displacement\n      - name: output_initial_moles\n        required: No\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          The name to use when reporting the initial moles of gas.\n      - name: R\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The universal gas constant for the units used.\n      - name: execute_on\n        required: No\n        default: !!str LINEAR\n        cpp_type: MultiMooseEnum\n        group_name: \n        options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n        description: |\n          Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n      - name: initial_pressure\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The initial pressure in the cavity.  If not given, a zero initial pressure will be used.\n      - name: initial_temperature\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Initial temperature (optional)\n      - name: material_input\n        required: No\n        default: !!str \n        cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n        group_name: \n        description: |\n          The name of the postprocessor(s) that holds the amount of material injected into the cavity.\n      - name: startup_time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The amount of time during which the pressure will ramp from zero to its true value.\n      - name: temperature\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          The name of the average temperature postprocessor value.\n      - name: volume\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          The name of the internal volume postprocessor value.\n      subblocks:\n  - name: /BCs/ChemicalOutFlowBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ChemicalOutFlowBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/ConvectiveFluxBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: final\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: rate\n      required: No\n      default: !!str 7500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConvectiveFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/ConvectiveFluxFunction\n    description: |\n      \n    parameters:\n    - name: T_infinity\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing far-field temperature\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Heat transfer coefficient\n    - name: coefficient_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Heat transfer coefficient function\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConvectiveFluxFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CoupledConvectiveFlux\n    description: |\n      \n    parameters:\n    - name: T_infinity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Field holding far-field temperature\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Heat transfer coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledConvectiveFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CoupledNeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DGFunctionDiffusionDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: epsilon\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Epsilon\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sigma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Sigma\n    - name: type\n      required: No\n      default: !!str DGFunctionDiffusionDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value the variable should have on the boundary\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DashpotBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The viscosity coefficient\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The displacement component corresponding the variable this BC acts on.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Displacement in the x direction\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Displacement in the y direction\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Displacement in the z direction\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DashpotBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DiffusionFluxBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DiffusionFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Value of the BC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DisplacementAboutAxis\n    description: |\n      \n    parameters:\n    - name: angle_units\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: degrees radians\n      description: |\n        The units of the angle of rotation. Choices are:degrees radians\n    - name: axis_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of the axis of rotation\n    - name: axis_origin\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of the axis of rotation\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The component for the rotational displacement\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function providing the angle of rotation.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DisplacementAboutAxis\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n    - name: /BCs/DisplacementAboutAxis/*\n      description: |\n        \n      parameters:\n      - name: angle_units\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: degrees radians\n        description: |\n          The units of the angle of rotation. Choices are:degrees radians\n      - name: axis_direction\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          Direction of the axis of rotation\n      - name: axis_origin\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          Origin of the axis of rotation\n      - name: boundary\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          The list of boundary IDs from the mesh where the rotational displacement will be applied\n      - name: constrain_axial_motion\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether to constrain axial motion (can only be false if the axis of rotation is parallel to one of the cartesian axes)\n      - name: disp_x\n        required: Yes\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The x displacement\n      - name: disp_y\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The y displacement\n      - name: disp_z\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The z displacement\n      - name: function\n        required: Yes\n        default: !!str \n        cpp_type: FunctionName\n        group_name: \n        description: |\n          The function providing the angle of rotation.\n      - name: save_in_disp_x\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for x displacement\n      - name: save_in_disp_y\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for y displacement\n      - name: save_in_disp_z\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for z displacement\n      subblocks:\n  - name: /BCs/FunctionDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionNeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionPenaltyDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Forcing function\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Penalty scalar\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionPenaltyDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionPresetBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionPresetBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/GapHeatTransfer\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coord_type\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default XYZ\n      description: |\n        Gap calculation type (default or XYZ).\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gap_distance\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Distance across the gap\n    - name: gap_temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature on the other side of the gap\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_gap\n      required: No\n      default: !!str 1e+06\n      cpp_type: double\n      group_name: \n      description: |\n        A maximum gap size\n    - name: min_gap\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        A minimum gap size\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quadrature\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to do Quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp should NOT be provided (and will be ignored) however paired_boundary IS then required.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GapHeatTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /BCs/HeatConductionBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HeatConductionBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/INSMomentumNoBCBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gravity\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of the gravity vector\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        dynamic viscosity\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        pressure\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSMomentumNoBCBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /BCs/INSTemperatureNoBCBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: k\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        thermal conductivity\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSTemperatureNoBCBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/ImplicitNeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ImplicitNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/InteractionIntegralBenchmarkBC\n    description: |\n      \n    parameters:\n    - name: KI\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Mode I stress intensity factor to apply.\n    - name: KII\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Mode II stress intensity factor to apply.\n    - name: KIII\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Mode III stress intensity factor to apply.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The component of the displacement to apply BC on.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str InteractionIntegralBenchmarkBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /BCs/MatchedValueBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatchedValueBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable whose value we are to match.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/NSEnergyInviscidSpecifiedBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specified_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specified pressure for this boundary\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSEnergyInviscidSpecifiedBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: un\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specified value of u.n for this boundary\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSEnergyInviscidSpecifiedDensityAndVelocityBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specified_density\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specified density for this boundary\n    - name: specified_u\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x-component of the specified velocity for this boundary\n    - name: specified_v\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y-component of the specified velocity for this boundary\n    - name: specified_w\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z-component of the specified velocity for this boundary\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSEnergyInviscidSpecifiedDensityAndVelocityBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSEnergyInviscidSpecifiedNormalFlowBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSEnergyInviscidSpecifiedNormalFlowBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: un\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specified value of u.n for this boundary\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSEnergyInviscidSpecifiedPressureBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specified_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specified pressure for this boundary\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSEnergyInviscidSpecifiedPressureBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSEnergyInviscidUnspecifiedBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSEnergyInviscidUnspecifiedBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSEnergyViscousBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSEnergyViscousBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSEnergyWeakStagnationBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stagnation_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation pressure\n    - name: stagnation_temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation temperature\n    - name: sx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        x-component of specifed flow direction\n    - name: sy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        y-component of specifed flow direction\n    - name: sz\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        z-component of specifed flow direction\n    - name: type\n      required: No\n      default: !!str NSEnergyWeakStagnationBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSImposedVelocityBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: desired_velocity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSImposedVelocityBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/NSImposedVelocityDirectionBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: desired_unit_velocity_component\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSImposedVelocityDirectionBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSInflowThermalBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specified_rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Density of incoming flow\n    - name: specified_temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Temperature of incoming flow\n    - name: specified_velocity_magnitude\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Velocity magnitude of incoming flow\n    - name: type\n      required: No\n      default: !!str NSInflowThermalBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/NSMassSpecifiedNormalFlowBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhoun\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specified value of rho*(u.n) for this boundary\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMassSpecifiedNormalFlowBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMassUnspecifiedNormalFlowBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMassUnspecifiedNormalFlowBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMassWeakStagnationBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stagnation_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation pressure\n    - name: stagnation_temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation temperature\n    - name: sx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        x-component of specifed flow direction\n    - name: sy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        y-component of specifed flow direction\n    - name: sz\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        z-component of specifed flow direction\n    - name: type\n      required: No\n      default: !!str NSMassWeakStagnationBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMomentumConvectiveWeakStagnationBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        (0,1,2) = (x,y,z) for which momentum component this BC is applied to\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stagnation_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation pressure\n    - name: stagnation_temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation temperature\n    - name: sx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        x-component of specifed flow direction\n    - name: sy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        y-component of specifed flow direction\n    - name: sz\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        z-component of specifed flow direction\n    - name: type\n      required: No\n      default: !!str NSMomentumConvectiveWeakStagnationBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMomentumInviscidNoPressureImplicitFlowBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        (0,1,2) = (x,y,z) for which momentum component this BC is applied to\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMomentumInviscidNoPressureImplicitFlowBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMomentumInviscidSpecifiedNormalFlowBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        (0,1,2) = (x,y,z) for which momentum component this BC is applied to\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhou_udotn\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The _component\'th entry of the (rho*u)(u.n) vector for this boundary\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMomentumInviscidSpecifiedNormalFlowBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMomentumInviscidSpecifiedPressureBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        (0,1,2) = (x,y,z) for which momentum component this BC is applied to\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specified_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specified pressure for this boundary\n    - name: type\n      required: No\n      default: !!str NSMomentumInviscidSpecifiedPressureBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMomentumPressureWeakStagnationBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        (0,1,2) = (x,y,z) for which momentum component this BC is applied to\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stagnation_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation pressure\n    - name: stagnation_temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specifed stagnation temperature\n    - name: sx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        x-component of specifed flow direction\n    - name: sy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        y-component of specifed flow direction\n    - name: sz\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        z-component of specifed flow direction\n    - name: type\n      required: No\n      default: !!str NSMomentumPressureWeakStagnationBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSMomentumViscousBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        (0,1,2) = (x,y,z) for which momentum component this BC is applied to\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMomentumViscousBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSPenalizedNormalFlowBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The penalty parameter, some (large) value.\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specified_udotn\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The desired value of u.n.\n    - name: type\n      required: No\n      default: !!str NSPenalizedNormalFlowBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSStagnationPressureBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: desired_stagnation_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSStagnationPressureBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSStagnationTemperatureBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: desired_stagnation_temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSStagnationTemperatureBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /BCs/NSThermalBC\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Time over which temperature ramps up from initial to final\n    - name: final\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Final temperature\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Initial temperature\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSThermalBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/NeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the gradient on the boundary.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/OneDEqualValueConstraintBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component of the Lagrange multiplier\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lambda\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Lagrange multiplier\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str OneDEqualValueConstraintBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: vg\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n    subblocks:\n  - name: /BCs/PenaltyDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Penalty scalar\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PenaltyDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Boundary value of the variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/Periodic\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /BCs/Periodic/*\n      description: |\n        \n      parameters:\n      - name: auto_direction\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n      - name: inv_transform_func\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Functions that specify the inverse transformation\n      - name: primary\n        required: No\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Boundary ID associated with the primary boundary.\n      - name: secondary\n        required: No\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Boundary ID associated with the secondary boundary.\n      - name: transform_func\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Functions that specify the transformation\n      - name: translation\n        required: No\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n      - name: variable\n        required: No\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Variable for the periodic boundary\n      subblocks:\n  - name: /BCs/PostprocessorDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor to set the value to on the boundary.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PostprocessorDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/PostprocessorNeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: No\n      default: !!str 0\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor to use for value of the gradient on the boundary.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PostprocessorNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/PresetBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PresetBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Value of the BC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/PresetVelocity\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the velocity.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PresetVelocity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: velocity\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Value of the velocity.  Used as scale factor if function is given.\n    subblocks:\n  - name: /BCs/Pressure\n    description: |\n      Applies a pressure on a given boundary in a given direction\n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter required for HHT time integration scheme\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The component for the pressure\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The magnitude to use in computing the pressure\n    - name: function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function that describes the pressure\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor that will supply the pressure value\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Pressure\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n    - name: /BCs/Pressure/*\n      description: |\n        \n      parameters:\n      - name: alpha\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          alpha parameter for HHT time integration\n      - name: boundary\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          The list of boundary IDs from the mesh where the pressure will be applied\n      - name: disp_x\n        required: Yes\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The x displacement\n      - name: disp_y\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The y displacement\n      - name: disp_z\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The z displacement\n      - name: factor\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The factor to use in computing the pressure\n      - name: function\n        required: No\n        default: !!str \n        cpp_type: FunctionName\n        group_name: \n        description: |\n          The function that describes the pressure\n      - name: postprocessor\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          The postprocessor that describes the pressure\n      - name: save_in_disp_x\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for x displacement\n      - name: save_in_disp_y\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for y displacement\n      - name: save_in_disp_z\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for z displacement\n      subblocks:\n  - name: /BCs/RichardsExcav\n    description: |\n      Allows the user to set variable values at the face of an excavation.  You must have defined the excavation start time, start position, etc, through the excav_geom_function\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: excav_geom_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function describing the excavation geometry (type RichardsExcavGeom)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: p_excav\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Value of the variable at the surface of the excavation.  Eg atmospheric pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsExcav\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/RichardsHalfGaussianSink\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: centre\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Centre of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Maximum of the flux (measured in kg.m^-2.s^-1).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.  Note, to make this a source rather than a sink, let max<0\n    - name: multiplying_fcn\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        If this function is provided, the flux will be multiplied by this function.  This is useful for spatially or temporally varying sinks\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: sd\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Standard deviation of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsHalfGaussianSink\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/RichardsPiecewiseLinearSink\n    description: |\n      \n    parameters:\n    - name: area_pp\n      required: No\n      default: !!str 1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        An area postprocessor.  If given, the bare_fluxes will be divided by this quantity.  This means the bare fluxes are measured in kg.s^-1.  This is useful for the case when you wish to provide the *total* flux, and let MOOSE proportion it uniformly across the boundary.  In that case you would have use_mobility=false=use_relperm, and only one bare flux should be specified\n    - name: bare_fluxes\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of flux values (measured in kg.m^-2.s^-1 for use_mobility=false, and in Pa.s^-1 if use_mobility=true).  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.  A piecewise-linear fit is performed to the (pressure,bare_fluxes) pairs to obtain the flux at any arbitrary pressure, and the first or last bare_flux values are used if the quad-point pressure falls outside this range.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the fluid density.  Only needed if fully_upwind is used\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: fully_upwind\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use full upwinding\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: multiplying_fcn\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        If this function is provided, the flux will be multiplied by this function.  This is useful for spatially or temporally varying sinks\n    - name: pressures\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of pressure values.  Must be monotonically increasing.\n    - name: relperm_UO\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define relative permeability.  Only needed if fully_upwind is used\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of name of user objects that define effective saturation as a function of pressure list.  Only needed if fully_upwind is used\n    - name: type\n      required: No\n      default: !!str RichardsPiecewiseLinearSink\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_mobility\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If true, then fluxes are multiplied by (density*permeability_nn/viscosity), where the \'_nn\' indicates the component normal to the boundary.  In this case bare_flux is measured in Pa.s^-1.  This can be used in conjunction with use_relperm.\n    - name: use_relperm\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If true, then fluxes are multiplied by relative permeability.  This can be used in conjunction with use_mobility\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/RobinBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RobinBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the gradient on the boundary.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/SinDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: final\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SinDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/SinNeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The duration of the ramp\n    - name: final\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The final value of the gradient on the boundary\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The initial value of the gradient on the boundary\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SinNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/VacuumBC\n    description: |\n      \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        No idea.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VacuumBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/VectorNeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: vector_value\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        vector this BC should act in\n    subblocks:\n  - name: /BCs/WeakGradientBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str WeakGradientBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /Bounds\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Bounds/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Bounds/AccumulateAux\n    description: |\n      \n    parameters:\n    - name: accumulate_from_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable whose values are to be accumulated into the current variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AccumulateAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/AqueousEquilibriumRxnAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The equilibrium constant in dissociation form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficient of reactants\n    - name: type\n      required: No\n      default: !!str AqueousEquilibriumRxnAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        the list of primary spceies participating in this equilibrium species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/BndsCalcAux\n    description: |\n      Calculate location of grain boundaries in a polycrystalline sample\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BndsCalcAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/BoundsAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounded_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be bounded\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: lower\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lower bound for the variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BoundsAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The upper bound for the variable\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ConstantAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Some constant value that can be read from the input file\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ContactPressureAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str NONLINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: nodal_area\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The nodal area\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ContactPressureAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/CoupledDirectionalMeshHeightInterpolation\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable whose values are going to be interpolated.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction to interpolate in.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledDirectionalMeshHeightInterpolation\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/CrossTermGradientFreeEnergy\n    description: |\n      Free energy contribution from the cross terms in ACMultiInetrface\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrossTermGradientFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/CrystalPlasticityRotationOutAux\n    description: |\n      Output updated rotation tensor to a file: Use for stereographic plots\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_frequency\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Frequency of Output\n    - name: rotout_file_name\n      required: No\n      default: !!str rot.out\n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of rotation output file: Default rot.out\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrystalPlasticityRotationOutAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/CylindricalRankTwoAux\n    description: |\n      Takes RankTwoTensor material and outputs component in cylindrical coordinates\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: center_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Location of the center point of the cylindrical coordinates\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CylindricalRankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/DarcyFluxComponent\n    description: |\n      Darcy flux (in m^3.s^-1.m^-2, or m.s^-1)  -(k_ij/mu (nabla_j P - w_j)), where k_ij is the permeability tensor, mu is the fluid viscosity, P is the fluid pressure, and w_j is the fluid weight.  If velocity_scaling is used then -(k_ij/mu (nabla_j P - w_j))/velocity_scaling is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The component of the Darcy flux to return\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fluid_viscosity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Fluid dynamic viscosity (usually measured in Pa.s)\n    - name: fluid_weight\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Fluid weight (gravity*density) as a vector pointing downwards (usually measured in kg.m^-2.s^-2 = Pa/m).  Eg \'0 0 -10000\'\n    - name: porepressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable representing the porepressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DarcyFluxComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: velocity_scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale the result by (1/velocity_scaling).  Usually velocity_scaling = porosity.\n    subblocks:\n  - name: /Bounds/DebugResidualAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: debug_variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable that is being debugged.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DebugResidualAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/DomainIntegralQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: j_integral_radius_inner\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: j_integral_radius_outer\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/DomainIntegralTopologicalQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: ring_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ring of elements that defines the integration domain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralTopologicalQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ElasticEnergyAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElasticEnergyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ElementsOnLineAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dist_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for distance between element and line\n    - name: execute_on\n      required: No\n      default: !!str INITIAL\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: line1\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        First point of line along which to pick elements\n    - name: line2\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Second point of line along which to pick elements\n    - name: line_id\n      required: No\n      default: !!str 1\n      cpp_type: int\n      group_name: \n      description: |\n        ID of the line along which to pick elements\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementsOnLineAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/FeatureFloodCountAux\n    description: |\n      Feature detection by connectivity analysis\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubble_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: field_display\n      required: No\n      default: !!str UNIQUE_REGION\n      cpp_type: MooseEnum\n      group_name: \n      options: UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID\n      description: |\n        Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n    - name: map_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FeatureFloodCountAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/FunctionAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use as the value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/GapValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary on the other side of a gap.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /Bounds/INSCourant\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSCourant\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /Bounds/INSDivergenceAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSDivergenceAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /Bounds/KKSGlobalFreeEnergy\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: g_name\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the double well function g(eta)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSGlobalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /Bounds/KineticDisPreConcAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: e_act\n      required: No\n      default: !!str 29100\n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy, J/mol\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gas_const\n      required: No\n      default: !!str 8.31434\n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant, in J/mol K\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The equilibrium constant of the dissolution reaction\n    - name: r_area\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        Specific reactive surface area in m^2/L solution\n    - name: ref_kconst\n      required: No\n      default: !!str 6.45654e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Kinetic rate constant in mol/m^2 s\n    - name: ref_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature, K\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficients of reactant species\n    - name: sys_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        System temperature at simulation, K\n    - name: type\n      required: No\n      default: !!str KineticDisPreConcAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The list of reactant species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/KineticDisPreRateAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: e_act\n      required: No\n      default: !!str 29100\n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy, J/mol\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gas_const\n      required: No\n      default: !!str 8.31434\n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant, in J/mol K\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The equilibrium constant of the dissolution reaction\n    - name: r_area\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        Specific reactive surface area in m^2/L solution\n    - name: ref_kconst\n      required: No\n      default: !!str 6.45654e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Kinetic rate constant in mol/m^2 s\n    - name: ref_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature, K\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficients of reactant species\n    - name: sys_temp\n      required: No\n      default: !!str 298.15\n      cpp_type: double\n      group_name: \n      description: |\n        System temperature at simulation, K\n    - name: type\n      required: No\n      default: !!str KineticDisPreRateAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The list of reactant species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealDenseMatrixAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealDenseMatrixAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealTensorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealTensorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealVectorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The vector component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealVectorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialStdVectorAux\n    description: |\n      Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialStdVectorRealGradientAux\n    description: |\n      Extracts a component of a material\'s std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The gradient component to be extracted for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorRealGradientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialSymmElasticityTensorAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The matrix index (0-20) to output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor_matpro\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The SymmElasticityTensor material property name\n    - name: type\n      required: No\n      default: !!str MaterialSymmElasticityTensorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialTensorAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 1 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction vector\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis used to calculate some material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: qp_select\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The quad point you want evaluated\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n      description: |\n        A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The material tensor name.\n    - name: type\n      required: No\n      default: !!str MaterialTensorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialVectorAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 2.\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: length\n      description: |\n        A scalar quantity to compute: (only option is Length).\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialVectorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: vector\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The material vector name.\n    subblocks:\n  - name: /Bounds/NSEnthalpyAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSEnthalpyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NSPressureAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSPressureAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Bounds/NSTemperatureAux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats.\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSTemperatureAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Bounds/NSVelocityAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: momentum\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Momentum (conserved form)\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Density (conserved form)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSVelocityAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NearestNodeDistanceAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to find the distance to.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeDistanceAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NearestNodeValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to get the value from.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NewmarkAccelAux\n    description: |\n      \n    parameters:\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacement\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        displacement variable\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkAccelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        velocity variable\n    subblocks:\n  - name: /Bounds/NewmarkVelAux\n    description: |\n      \n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        acceleration variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        gamma parameter\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkVelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NormalizationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The normalization factor\n    - name: normalization\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor on the source\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be normalized\n    - name: type\n      required: No\n      default: !!str NormalizationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/OutputEulerAngles\n    description: |\n      Output euler angles from user object to an AuxVariable.\n    parameters:\n    - name: GrainTracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_euler_angle\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 Phi phi2\n      description: |\n        Euler angle to output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str OutputEulerAngles\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/PFCEnergyDensity\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/PFCRFFEnergyDensity\n    description: |\n      \n    parameters:\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion nothing\n      description: |\n        Which approach will be used to handle the natural log\n    - name: num_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        This is the number of terms to use in the taylor series expansion\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: type\n      required: No\n      default: !!str PFCRFFEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ParsedAux\n    description: |\n      Parsed function AuxKernel.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        coupled variables\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        enable just-in-time compilation of function expressions for faster evaluation\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        function expression\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ParsedAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/PenetrationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quantity\n      required: No\n      default: !!str distance\n      cpp_type: MooseEnum\n      group_name: \n      options: distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status\n      description: |\n        The quantity to recover from the available penetration information\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str PenetrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ProcessorIDAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ProcessorIDAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/QuotientAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QuotientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RankFourAux\n    description: |\n      Access a component of a RankFourTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ijkl for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ijkl for the tensor to output (0, 1, 2)\n    - name: index_k\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index k of ijkl for the tensor to output (0, 1, 2)\n    - name: index_l\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index l of ijkl for the tensor to output (0, 1, 2)\n    - name: rank_four_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank four material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankFourAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RankTwoAux\n    description: |\n      Access a component of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RankTwoScalarAux\n    description: |\n      Compute a scalar property of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: scalar_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant\n      description: |\n        Type of scalar output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankTwoScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsDensityAux\n    description: |\n      auxillary variable which is fluid density\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the density.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsDensityAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsDensityPrimeAux\n    description: |\n      auxillary variable which is d(density)/dp\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the density.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsDensityPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsDensityPrimePrimeAux\n    description: |\n      auxillary variable which is d^2(density)/dp^2\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the density.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsDensityPrimePrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsRelPermAux\n    description: |\n      auxillary variable which is the relative permeability\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the relative permeability.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsRelPermAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsRelPermPrimeAux\n    description: |\n      auxillary variable which is d(relative permeability)/dSeff\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the relative permeability.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsRelPermPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsRelPermPrimePrimeAux\n    description: |\n      auxillary variable which is d^2(relative permeability)/dSeff^2\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines the relative permeability.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable that represents the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsRelPermPrimePrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsSatAux\n    description: |\n      auxillary variable which is saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: sat_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines saturation.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable that is the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsSatAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsSatPrimeAux\n    description: |\n      auxillary variable which is saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: sat_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines saturation.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable that is the effective saturation\n    - name: type\n      required: No\n      default: !!str RichardsSatPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsSeffAux\n    description: |\n      auxillary variable which is effective saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables that represent the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines effective saturation.\n    - name: type\n      required: No\n      default: !!str RichardsSeffAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RichardsSeffPrimeAux\n    description: |\n      auxillary variable which is effective saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables that represent the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines effective saturation.\n    - name: type\n      required: No\n      default: !!str RichardsSeffPrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: wrtnum\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        This aux kernel will return d(seff)/dP_wrtnum.  0<=wrtnum<number_of_pressure_vars.\n    subblocks:\n  - name: /Bounds/RichardsSeffPrimePrimeAux\n    description: |\n      auxillary variable which is 2nd derivative of effective saturation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: pressure_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables that represent the pressure\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of user object that defines effective saturation.\n    - name: type\n      required: No\n      default: !!str RichardsSeffPrimePrimeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: wrtnum1\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum1<number_of_pressure_vars.\n    - name: wrtnum2\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum2<number_of_pressure_vars.\n    subblocks:\n  - name: /Bounds/SelfAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SelfAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SolutionAux\n    description: |\n      \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direct\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the meshes must be the same and then the values are simply copied over.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the variable to extract from the file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a)  to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the SolutionUserObject\n    - name: type\n      required: No\n      default: !!str SolutionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SpatialUserObjectAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SpatialUserObjectAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/TensorElasticEnergyAux\n    description: |\n      Compute the local elastic energy\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TensorElasticEnergyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/TestEBSDAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_name\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 phi phi2 grain phase symmetry op\n      description: |\n        The data to be extracted from the EBSD data by this AuxKernel\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader GeneralUserObject\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TestEBSDAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/TotalFreeEnergy\n    description: |\n      Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n         Base name of the free energy function\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TotalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/VariableGradientComponent\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The gradient component to compute\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gradient_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable from which to compute the gradient component\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableGradientComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/VariableTimeIntegrationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A simple coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: order\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableTimeIntegrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: variable_to_integrate\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be integrated\n    subblocks:\n  - name: /Bounds/VectorMagnitudeAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorMagnitudeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-component of the vector\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-component of the vector\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-component of the vector\n    subblocks:\n- name: /Constraints\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Constraints/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Constraints/CoupledTiedValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order used for projections\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        scaling factor to be applied to constraint equations\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str CoupledTiedValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/EqualValueBoundaryConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: formulation\n      required: No\n      default: !!str penalty\n      cpp_type: MooseEnum\n      group_name: \n      options: penalty kinematic\n      description: |\n        Formulation used to calculate constraint - penalty or kinematic.\n    - name: master\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the master node. If no ID is provided, first node of slave set is chosen.\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The penalty used for the boundary term\n    - name: slave\n      required: No\n      default: !!str NaN\n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: slave_node_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The IDs of the slave node\n    - name: type\n      required: No\n      default: !!str EqualValueBoundaryConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/EqualValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interface\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the interface.\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: slave_variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: type\n      required: No\n      default: !!str EqualValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/GapConductanceConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interface\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the interface.\n    - name: k\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gap conductance\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: slave_variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: type\n      required: No\n      default: !!str GapConductanceConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/GluedContactConstraint\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The master boundary\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: formulation\n      required: No\n      default: !!str default\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact formulation\n    - name: friction_coefficient\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The friction coefficient\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: model\n      required: No\n      default: !!str frictionless\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact model to use\n    - name: nodal_area\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The nodal area\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: penalty\n      required: No\n      default: !!str 1e+08\n      cpp_type: double\n      group_name: \n      description: |\n        The penalty to apply.  This can vary depending on the stiffness of your materials\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The slave boundary\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: tension_release\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  Must be positive.\n    - name: type\n      required: No\n      default: !!str GluedContactConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/LinearNodalConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: formulation\n      required: No\n      default: !!str penalty\n      cpp_type: MooseEnum\n      group_name: \n      options: penalty kinematic\n      description: |\n        Formulation used to calculate constraint - penalty or kinematic.\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The master node IDs.\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The penalty used for the boundary term\n    - name: slave_node_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The list of slave node ids\n    - name: slave_node_set\n      required: No\n      default: !!str NaN\n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: type\n      required: No\n      default: !!str LinearNodalConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    - name: weights\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The weights associated with the master node ids. Must be of the same size as master nodes\n    subblocks:\n  - name: /Constraints/MechanicalContactConstraint\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The master boundary\n    - name: capture_tolerance\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Normal distance from surface within which nodes are captured\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: connected_slave_nodes_jacobian\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include jacobian entries coupling nodes connected to slave nodes.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: formulation\n      required: No\n      default: !!str default\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact formulation\n    - name: friction_coefficient\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The friction coefficient\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_slave_jacobian\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include jacobian entries coupling master and slave nodes.\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: model\n      required: No\n      default: !!str frictionless\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact model to use\n    - name: nodal_area\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The nodal area\n    - name: non_displacement_variables_jacobian\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include jacobian entries coupling with variables that are not displacement variables.\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: normalize_penalty\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to normalize the penalty parameter with the nodal area for penalty contact.\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: penalty\n      required: No\n      default: !!str 1e+08\n      cpp_type: double\n      group_name: \n      description: |\n        The penalty to apply.  This can vary depending on the stiffness of your materials\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The slave boundary\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: tension_release\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  No tension release if negative.\n    - name: type\n      required: No\n      default: !!str MechanicalContactConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/MultiDContactConstraint\n    description: |\n      \n    parameters:\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: jacobian_update\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to update the \'in contact\' list every jacobian evaluation (by default it will happen once per timestep\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: model\n      required: No\n      default: !!str frictionless\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact model to use\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order used for projections\n    - name: penalty\n      required: No\n      default: !!str 1e+08\n      cpp_type: double\n      group_name: \n      description: |\n        The penalty to apply.  This can vary depending on the stiffness of your materials\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str MultiDContactConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/OneDContactConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: jacobian_update\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to update the \'in contact\' list every jacobian evaluation (by default it will happen once per timestep\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order used for projections\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str OneDContactConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/SparsityBasedContactConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order used for projections\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str SparsityBasedContactConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/TiedValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order used for projections\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        scaling factor to be applied to constraint equations\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str TiedValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n- name: /Contact\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Contact/*\n    description: |\n      \n    parameters:\n    - name: capture_tolerance\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Normal distance from surface within which nodes are captured\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str DEFAULT\n      cpp_type: MooseEnum\n      group_name: \n      options: DEFAULT KINEMATIC PENALTY AUGMENTED_LAGRANGE\n      description: |\n        The contact formulation: default, penalty, augmented_lagrange\n    - name: friction_coefficient\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The friction coefficient\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The master surface\n    - name: model\n      required: No\n      default: !!str frictionless\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact model to use\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order: FIRST, SECOND, etc.\n    - name: penalty\n      required: No\n      default: !!str 1e+08\n      cpp_type: double\n      group_name: \n      description: |\n        The penalty to apply.  This can vary depending on the stiffness of your materials\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The slave surface\n    - name: system\n      required: No\n      default: !!str DiracKernel\n      cpp_type: MooseEnum\n      group_name: \n      options: DiracKernel Constraint\n      description: |\n        System to use for constraint enforcement.  Options are: DiracKernel Constraint\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: tension_release\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  No tension release if negative.\n    - name: type\n      required: No\n      default: !!str NodalArea\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n- name: /Controls\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Controls/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Controls/RealFunctionControl\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use for controlling the specified parameter.\n    - name: parameter\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n    - name: type\n      required: No\n      default: !!str RealFunctionControl\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /DGKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /DGKernels/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /DGKernels/DGDiffusion\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: epsilon\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        epsilon\n    - name: sigma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        sigma\n    - name: type\n      required: No\n      default: !!str DGDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /Dampers\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Dampers/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Dampers/ConstantDamper\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: damping\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The percentage (between 0 and 1) of the newton update to take.\n    - name: type\n      required: No\n      default: !!str ConstantDamper\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this damper operates on\n    subblocks:\n  - name: /Dampers/MaxIncrement\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: max_increment\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The maximum newton increment for the variable.\n    - name: type\n      required: No\n      default: !!str MaxIncrement\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this damper operates on\n    subblocks:\n- name: /Debug\n  description: |\n    \n  parameters:\n  - name: show_actions\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print out the actions being executed\n  - name: show_material_props\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print out the material properties supplied for each block, face, neighbor, and/or sideset\n  - name: show_parser\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Shows parser block extraction and debugging information\n  - name: show_top_residuals\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of top residuals to print out (0 = no output)\n  - name: show_var_residual_norms\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print the residual norms of the individual solution variables at each nonlinear iteration\n  - name: show_var_residual\n    required: No\n    default: !!str \n    cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n    group_name: \n    description: |\n      Variables for which residuals will be sent to the output file\n  subblocks:\n- name: /DeprecatedBlock\n  description: |\n    \n  parameters:\n  - name: DEPRECATED\n    required: No\n    default: !!str \n    cpp_type: bool\n    group_name: \n    description: |\n      *** WARNING: This block is deprecated - DO NOT USE ***\n  subblocks:\n- name: /DiracKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /DiracKernels/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /DiracKernels/ConstantPointSource\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x,y,z coordinates of the point\n    - name: type\n      required: No\n      default: !!str ConstantPointSource\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the point source\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /DiracKernels/ContactMaster\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The master boundary\n    - name: capture_tolerance\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Normal distance from surface within which nodes are captured\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str default\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact formulation\n    - name: friction_coefficient\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The friction coefficient\n    - name: model\n      required: No\n      default: !!str frictionless\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact model to use\n    - name: nodal_area\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The nodal area\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: normalize_penalty\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to normalize the penalty parameter with the nodal area for penalty contact.\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: penalty\n      required: No\n      default: !!str 1e+08\n      cpp_type: double\n      group_name: \n      description: |\n        The penalty to apply.  This can vary depending on the stiffness of your materials\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The slave boundary\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: tension_release\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  No tension release if negative.\n    - name: type\n      required: No\n      default: !!str ContactMaster\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /DiracKernels/GapHeatPointSourceMaster\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The master boundary\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The slave boundary\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapHeatPointSourceMaster\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /DiracKernels/RichardsBorehole\n    description: |\n      Approximates a borehole in the mesh with given bottomhole pressure, and radii using a number of point sinks whose positions are read from a file\n    parameters:\n    - name: MyNameIsAndyWilkins\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Used for debugging by Andy\n    - name: SumQuantityUO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        User Object of type=RichardsSumQuantity in which to place the total outflow from the borehole for each time step.\n    - name: borehole_direction\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Borehole direction.  Note this is only used if there is only one point in the point_file.\n    - name: borehole_length\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Borehole length.  Note this is only used if there is only one point in the point_file.\n    - name: bottom_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Pressure at the bottom of the borehole\n    - name: character\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        If zero then borehole does nothing.  If positive the borehole acts as a sink (production well) for porepressure > borehole pressure, and does nothing otherwise.  If negative the borehole acts as a source (injection well) for porepressure < borehole pressure, and does nothing otherwise.  The flow rate to/from the borehole is multiplied by |character|, so usually character = +/- 1, but you can specify other quantities to provide an overall scaling to the flow if you like.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the fluid density.  Only needed if fully_upwind is used\n    - name: fully_upwind\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fully upwind the flux\n    - name: point_file\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The file containing the borehole radii and coordinates of the point sinks that approximate the borehole.  Each line in the file must contain a space-separated radius and coordinate.  Ie r x y z.  The last point in the file is defined as the borehole bottom, where the borehole pressure is bottom_pressure.  If your file contains just one point, you must also specify the borehole_length and borehole_direction.  Note that you will get segementation faults if your points do not lie within your mesh!\n    - name: re_constant\n      required: No\n      default: !!str 0.28\n      cpp_type: double\n      group_name: \n      description: |\n        The dimensionless constant used in evaluating the borehole effective radius.  This depends on the meshing scheme.  Peacemann finite-difference calculations give 0.28, while for rectangular finite elements the result is closer to 0.1594.  (See  Eqn(4.13) of Z Chen, Y Zhang, Well flow models for various numerical methods, Int J Num Analysis and Modeling, 3 (2008) 375-388.)\n    - name: relperm_UO\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define relative permeability.  Only needed if fully_upwind is used\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: seff_UO\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of name of user objects that define effective saturation as a function of pressure list.  Only needed if fully_upwind is used\n    - name: type\n      required: No\n      default: !!str RichardsBorehole\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unit_weight\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        (fluid_density*gravitational_acceleration) as a vector pointing downwards.  Note that the borehole pressure at a given z position is bottom_pressure + unit_weight*(p - p_bottom), where p=(x,y,z) and p_bottom=(x,y,z) of the bottom point of the borehole.  If you don\'t want bottomhole pressure to vary in the borehole just set unit_weight=0.  Typical value is gravity = (0,0,-1E4)\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    - name: well_constant\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Usually this is calculated internally from the element geometry, the local borehole direction and segment length, and the permeability.  However, if this parameter is given as a positive number then this number is used instead of the internal calculation.  This speeds up computation marginally.  re_constant becomes irrelevant\n    subblocks:\n  - name: /DiracKernels/RichardsPolyLineSink\n    description: |\n      Approximates a polyline sink in the mesh by using a number of point sinks whose positions are read from a file\n    parameters:\n    - name: SumQuantityUO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        User Object of type=RichardsSumQuantity in which to place the total outflow from the polylinesink for each time step.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: fluxes\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of flux values (measured in kg.m^-3.s^-1).  A piecewise-linear fit is performed to the (pressure,flux) pairs to obtain the flux at any arbitrary pressure.  If a quad-point pressure is less than the first pressure value, the first flux value is used.  If quad-point pressure exceeds the final pressure value, the final flux value is used.  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.\n    - name: point_file\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        The file containing the coordinates of the point sinks that will approximate the polyline.  Each line in the file must contain a space-separated coordinate.  Note that you will get segementation faults if your points do not lie within your mesh!\n    - name: pressures\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of pressure values.  Must be monotonically increasing.\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: type\n      required: No\n      default: !!str RichardsPolyLineSink\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /DiracKernels/SlaveConstraint\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The slave boundary\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str default\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact formulation\n    - name: friction_coefficient\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The friction coefficient\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The master boundary\n    - name: model\n      required: No\n      default: !!str frictionless\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The contact model to use\n    - name: nodal_area\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The nodal area\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: normalize_penalty\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to normalize the penalty parameter with the nodal area for penalty contact.\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: penalty\n      required: No\n      default: !!str 1e+08\n      cpp_type: double\n      group_name: \n      description: |\n        The penalty to apply.  This can vary depending on the stiffness of your materials\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str SlaveConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /DomainIntegral\n  description: |\n    \n  parameters:\n  - name: 2d\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Treat body as two-dimensional\n  - name: axis_2d\n    required: No\n    default: !!str 2\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Out of plane axis for models treated as two-dimensional (0=x, 1=y, 2=z)\n  - name: block\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: \n    description: |\n      The block ids where InteractionIntegralAuxFields is defined\n  - name: boundary\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      The list of boundary IDs from the mesh where this boundary condition applies\n  - name: convert_J_to_K\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Convert J-integral to stress intensity factor K.\n  - name: crack_direction_method\n    required: Yes\n    default: !!str \n    cpp_type: MooseEnum\n    group_name: \n    options: CrackDirectionVector CrackMouth CurvedCrackFront\n    description: |\n      Method to determine direction of crack propagation.  Choices are: CrackDirectionVector CrackMouth CurvedCrackFront\n  - name: crack_direction_vector\n    required: No\n    default: !!str \n    cpp_type: libMesh::VectorValue<double>\n    group_name: \n    description: |\n      Direction of crack propagation\n  - name: crack_direction_vector_end_1\n    required: No\n    default: !!str \n    cpp_type: libMesh::VectorValue<double>\n    group_name: \n    description: |\n      Direction of crack propagation for the node at end 1 of the crack\n  - name: crack_direction_vector_end_2\n    required: No\n    default: !!str \n    cpp_type: libMesh::VectorValue<double>\n    group_name: \n    description: |\n      Direction of crack propagation for the node at end 2 of the crack\n  - name: crack_end_direction_method\n    required: No\n    default: !!str NoSpecialTreatment\n    cpp_type: MooseEnum\n    group_name: \n    options: NoSpecialTreatment CrackDirectionVector\n    description: |\n      Method to determine direction of crack propagation at ends of crack.  Choices are: NoSpecialTreatment CrackDirectionVector\n  - name: crack_front_points\n    required: No\n    default: !!str \n    cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n    group_name: \n    description: |\n      Set of points to define crack front\n  - name: crack_mouth_boundary\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      Boundaries whose average coordinate defines the crack mouth\n  - name: disp_x\n    required: No\n    default: !!str \n    cpp_type: VariableName\n    group_name: \n    description: |\n      The x displacement\n  - name: disp_y\n    required: No\n    default: !!str \n    cpp_type: VariableName\n    group_name: \n    description: |\n      The y displacement\n  - name: disp_z\n    required: No\n    default: !!str \n    cpp_type: VariableName\n    group_name: \n    description: |\n      The z displacement\n  - name: equivalent_k\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Calculate an equivalent K from KI, KII and KIII, assuming self-similar crack growth.\n  - name: family\n    required: No\n    default: !!str LAGRANGE\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Specifies the family of FE shape functions to use for q AuxVariables\n  - name: integrals\n    required: Yes\n    default: !!str \n    cpp_type: MultiMooseEnum\n    group_name: \n    options: JIntegral InteractionIntegralKI InteractionIntegralKII InteractionIntegralKIII InteractionIntegralT\n    description: |\n      Domain integrals to calculate.  Choices are: JIntegral InteractionIntegralKI InteractionIntegralKII InteractionIntegralKIII InteractionIntegralT\n  - name: intersecting_boundary\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      Boundaries intersected by ends of crack\n  - name: last_ring\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of rings of nodes to generate\n  - name: order\n    required: No\n    default: !!str FIRST\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Specifies the order of the FE shape function to use for q AuxVariables\n  - name: output_variable\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      Variable values to be reported along the crack front\n  - name: poissons_ratio\n    required: No\n    default: !!str \n    cpp_type: double\n    group_name: \n    description: |\n      Poisson\'s ratio\n  - name: position_type\n    required: No\n    default: !!str Distance\n    cpp_type: MooseEnum\n    group_name: \n    options: Angle Distance\n    description: |\n      The method used to calculate position along crack front.  Options are: Angle Distance\n  - name: q_function_rings\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Generate rings of nodes for q-function\n  - name: q_function_type\n    required: No\n    default: !!str Geometry\n    cpp_type: MooseEnum\n    group_name: \n    options: Geometry Topology\n    description: |\n      The method used to define the integration domain. Options are: Geometry Topology\n  - name: radius_inner\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Inner radius for volume integral domain\n  - name: radius_outer\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Outer radius for volume integral domain\n  - name: ring_first\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The first ring of elements for volume integral domain\n  - name: ring_last\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The last ring of elements for volume integral domain\n  - name: symmetry_plane\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n  - name: t_stress\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Calculate T-stress\n  - name: youngs_modulus\n    required: No\n    default: !!str \n    cpp_type: double\n    group_name: \n    description: |\n      Young\'s modulus\n  subblocks:\n- name: /Executioner\n  description: |\n    \n  parameters:\n  - name: type\n    required: Yes\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  subblocks:\n  - name: /Executioner/<type>\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Executioner/<type>/InversePowerMethod\n      description: |\n        \n      parameters:\n      - name: Chebyshev_acceleration_on\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If Chebyshev acceleration is turned on\n      - name: auto_initialization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          True to ask the solver to set initial\n      - name: bx_norm\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |Bx| for the eigenvalue\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Solver\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: eig_check_tol\n        required: No\n        default: !!str 1e-06\n        cpp_type: double\n        group_name: \n        description: |\n          Eigenvalue convergence tolerance\n      - name: k0\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Initial guess of the eigenvalue\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: max_power_iterations\n        required: No\n        default: !!str 300\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The maximum number of power iterations\n      - name: min_power_iterations\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Minimum number of power iterations\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: normal_factor\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: Normalization\n        description: |\n          Normalize x to make |x| equal to this factor\n      - name: normalization\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: Normalization\n        description: |\n          To evaluate |x| for normalization\n      - name: output_before_normalization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: Normalization\n        description: |\n          True to output a step before normalization\n      - name: output_on_final\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to disable all the intemediate exodus outputs\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: pfactor\n        required: No\n        default: !!str 0.01\n        cpp_type: double\n        group_name: \n        description: |\n          Reduce residual norm per power iteration by this factor\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: sol_check_tol\n        required: No\n        default: !!str 1.79769e+308\n        cpp_type: double\n        group_name: \n        description: |\n          Convergence tolerance on |x-x_previous| when provided\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          System time\n      - name: type\n        required: No\n        default: !!str InversePowerMethod\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: xdiff\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |x-x_previous| for power iterations\n      subblocks:\n    - name: /Executioner/<type>/NonlinearEigen\n      description: |\n        \n      parameters:\n      - name: auto_initialization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          True to ask the solver to set initial\n      - name: bx_norm\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |Bx| for the eigenvalue\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Solver\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: free_power_iterations\n        required: No\n        default: !!str 4\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of free power iterations\n      - name: k0\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Initial guess of the eigenvalue\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: normal_factor\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: Normalization\n        description: |\n          Normalize x to make |x| equal to this factor\n      - name: normalization\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: Normalization\n        description: |\n          To evaluate |x| for normalization\n      - name: output_after_power_iterations\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          True to output solution after free power iterations\n      - name: output_before_normalization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: Normalization\n        description: |\n          True to output a step before normalization\n      - name: output_on_final\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to disable all the intemediate exodus outputs\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: pfactor\n        required: No\n        default: !!str 0.01\n        cpp_type: double\n        group_name: \n        description: |\n          The factor of residual to be reduced per free power iteration or per nonlinear step\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: source_abs_tol\n        required: No\n        default: !!str 1e-06\n        cpp_type: double\n        group_name: \n        description: |\n          Absolute tolernance on residual norm\n      - name: source_rel_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \n        description: |\n          Relative tolernance on residual norm after free power iterations\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          System time\n      - name: type\n        required: No\n        default: !!str NonlinearEigen\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Executioner/<type>/Steady\n      description: |\n        \n      parameters:\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Solver\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: type\n        required: No\n        default: !!str Steady\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Executioner/<type>/Transient\n      description: |\n        \n      parameters:\n      - name: abort_on_solve_fail\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          abort if solve not converged rather than cut timestep\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Solver\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dt\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The timestep size between solves\n      - name: dtmax\n        required: No\n        default: !!str 1e+30\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          The maximum timestep size in an adaptive run\n      - name: dtmin\n        required: No\n        default: !!str 2e-14\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          The minimum timestep size in an adaptive run\n      - name: end_time\n        required: No\n        default: !!str 1e+30\n        cpp_type: double\n        group_name: \n        description: |\n          The end time of the simulation\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: n_startup_steps\n        required: No\n        default: !!str 0\n        cpp_type: int\n        group_name: Advanced\n        description: |\n          The number of timesteps during startup\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: Solver\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Solver\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: num_steps\n        required: No\n        default: !!str 4294967295\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of timesteps in a transient run\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: picard_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Picard\n        description: |\n          The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app\'s nonlinear residual.\n      - name: picard_max_its\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: Picard\n        description: |\n          Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n      - name: picard_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Picard\n        description: |\n          The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app\'s nonlinear residual.\n      - name: reset_dt\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Use when restarting a calculation to force a change in dt.\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: scheme\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk\n        description: |\n          Time integration scheme used.\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: ss_check_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n      - name: ss_tmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          Minimum number of timesteps to take before checking for steady state conditions.\n      - name: start_time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          The start time of the simulation\n      - name: time_period_ends\n        required: No\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: Time Periods\n        description: |\n          The end times of time periods\n      - name: time_period_starts\n        required: No\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: Time Periods\n        description: |\n          The start times of time periods\n      - name: time_periods\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: Time Periods\n        description: |\n          The names of periods\n      - name: timestep_tolerance\n        required: No\n        default: !!str 2e-14\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          the tolerance setting for final timestep size and sync times\n      - name: trans_ss_check\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not to check for steady state conditions\n      - name: type\n        required: No\n        default: !!str Transient\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_multiapp_dt\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n      - name: verbose\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Print detailed diagnostics on timestep calculation\n      subblocks:\n  - name: /Executioner/Adaptivity\n    description: |\n      \n    parameters:\n    - name: coarsen_fraction\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of elements or error to coarsen. Should be between 0 and 1.\n    - name: cycles_per_step\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity cycles per step\n    - name: error_estimator\n      required: No\n      default: !!str KellyErrorEstimator\n      cpp_type: MooseEnum\n      group_name: \n      options: KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator\n      description: |\n        The class name of the error estimator you want to use.\n    - name: initial_adaptivity\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity steps to perform using the initial conditions\n    - name: max_h_level\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of times a single element can be refined. If 0 then infinite.\n    - name: print_changed_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether information about the mesh is printed when adaptivity occurs\n    - name: refine_fraction\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of elements or error to refine. Should be between 0 and 1.\n    - name: show_initial_progress\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Show the progress of the initial adaptivity\n    - name: start_time\n      required: No\n      default: !!str -1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time that adaptivity will be active after.\n    - name: steps\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity steps to perform at any one time for steady state\n    - name: stop_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time after which adaptivity will no longer be active.\n    - name: weight_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        List of names of variables that will be associated with weight_values\n    - name: weight_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of values between 0 and 1 to weight the associated weight_names error by\n    subblocks:\n  - name: /Executioner/Predictor\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/Predictor/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Executioner/Predictor/<type>/AdamsPredictor\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: order\n          required: No\n          default: !!str 2\n          cpp_type: int\n          group_name: \n          description: |\n            The maximum reachable order of the Adams-Bashforth Predictor\n        - name: scale\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The scale factor for the predictor (can range from 0 to 1)\n        - name: type\n          required: No\n          default: !!str AdamsPredictor\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/Predictor/<type>/SimplePredictor\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: scale\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The scale factor for the predictor (can range from 0 to 1)\n        - name: type\n          required: No\n          default: !!str SimplePredictor\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n  - name: /Executioner/Quadrature\n    description: |\n      \n    parameters:\n    - name: element_order\n      required: No\n      default: !!str AUTO\n      cpp_type: MooseEnum\n      group_name: \n      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH\n      description: |\n        Order of the quadrature for elements\n    - name: order\n      required: No\n      default: !!str AUTO\n      cpp_type: MooseEnum\n      group_name: \n      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH\n      description: |\n        Order of the quadrature\n    - name: side_order\n      required: No\n      default: !!str AUTO\n      cpp_type: MooseEnum\n      group_name: \n      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH\n      description: |\n        Order of the quadrature for sides\n    - name: type\n      required: No\n      default: !!str GAUSS\n      cpp_type: MooseEnum\n      group_name: \n      options: CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO\n      description: |\n        Type of the quadrature rule\n    subblocks:\n  - name: /Executioner/TimeIntegrator\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/TimeIntegrator/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/BDF2\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str BDF2\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/CrankNicolson\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str CrankNicolson\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ExplicitEuler\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str ExplicitEuler\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ExplicitMidpoint\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str ExplicitMidpoint\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/Heun\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str Heun\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ImplicitEuler\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str ImplicitEuler\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ImplicitMidpoint\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str ImplicitMidpoint\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/LStableDirk2\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str LStableDirk2\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/LStableDirk3\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str LStableDirk3\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/Ralston\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str Ralston\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/SteadyState\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: type\n          required: No\n          default: !!str SteadyState\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n  - name: /Executioner/TimePeriods\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Executioner/TimePeriods/*\n      description: |\n        \n      parameters:\n      - name: active_bcs\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          The list of active boundary conditions during this time period (must not be used with "inactive_bcs")\n      - name: active_kernels\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          The list of active kernels during this time period (must not be used with "inactive_kernels")\n      - name: inactive_bcs\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          The list of inactive boundary conditions during this time period (must not be used with "active_bcs")\n      - name: inactive_kernels\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          The list of inactive kernels during this time period (must not be used with "active_kernels")\n      - name: start\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The start time for this time period\n      subblocks:\n  - name: /Executioner/TimeStepper\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/TimeStepper/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Executioner/TimeStepper/<type>/AB2PredictorCorrector\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Initial time step size\n        - name: e_max\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Maximum acceptable error.\n        - name: e_tol\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Target error tolerance.\n        - name: max_increase\n          required: No\n          default: !!str 1e+09\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio that the time step can increase.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: scaling_parameter\n          required: No\n          default: !!str 0.8\n          cpp_type: double\n          group_name: \n          description: |\n            scaling parameter for dt selection\n        - name: start_adapting\n          required: No\n          default: !!str 2\n          cpp_type: int\n          group_name: \n          description: |\n            when to start taking adaptive time steps\n        - name: steps_between_increase\n          required: No\n          default: !!str 1\n          cpp_type: int\n          group_name: \n          description: |\n            the number of time steps before recalculating dt\n        - name: type\n          required: No\n          default: !!str AB2PredictorCorrector\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/ConstantDT\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Size of the time step\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str ConstantDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/DT2\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \n          description: |\n            The initial time step size.\n        - name: e_max\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Maximum acceptable error.\n        - name: e_tol\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Target error tolerance.\n        - name: max_increase\n          required: No\n          default: !!str 1e+09\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio that the time step can increase.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str DT2\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/FunctionDT\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n        - name: interpolate\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \n          description: |\n            Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n        - name: min_dt\n          required: No\n          default: !!str 0\n          cpp_type: double\n          group_name: \n          description: |\n            The minimal dt to take.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: time_dt\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of dt\n        - name: time_t\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of t\n        - name: type\n          required: No\n          default: !!str FunctionDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/IterationAdaptiveDT\n        description: |\n          Adjust the timestep based on the number of iterations\n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: cutback_factor\n          required: No\n          default: !!str 0.5\n          cpp_type: double\n          group_name: \n          description: |\n            Factor to apply to timestep if difficult convergence (if \'optimal_iterations\' is specified) or if solution failed\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The default timestep size between solves\n        - name: force_step_every_function_point\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Forces the timestepper to take a step that is consistent with points defined in the function\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Factor to apply to timestep if easy convergence (if \'optimal_iterations\' is specified) or if recovering from failed solve\n        - name: iteration_window\n          required: No\n          default: !!str \n          cpp_type: int\n          group_name: \n          description: |\n            Attempt to grow/shrink timestep if the iteration count is below/above \'optimal_iterations plus/minus iteration_window\' (default = optimal_iterations/5).\n        - name: linear_iteration_ratio\n          required: No\n          default: !!str \n          cpp_type: unsigned int\n          group_name: \n          description: |\n            The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n        - name: max_function_change\n          required: No\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The absolute value of the maximum change in timestep_limiting_function over a timestep\n        - name: optimal_iterations\n          required: No\n          default: !!str \n          cpp_type: int\n          group_name: \n          description: |\n            The target number of nonlinear iterations for adaptive timestepping\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: time_dt\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of dt\n        - name: time_t\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of t\n        - name: timestep_limiting_function\n          required: No\n          default: !!str \n          cpp_type: FunctionName\n          group_name: \n          description: |\n            A \'Piecewise\' type function used to control the timestep by limiting the change in the function over a timestep\n        - name: type\n          required: No\n          default: !!str IterationAdaptiveDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/PostprocessorDT\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: No\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Initial value of dt\n        - name: postprocessor\n          required: Yes\n          default: !!str \n          cpp_type: PostprocessorName\n          group_name: \n          description: |\n            The name of the postprocessor that computes the dt\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str PostprocessorDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT\n        description: |\n          \n        parameters:\n        - name: adapt_log\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Output adaptive time step log\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The timestep size between solves\n        - name: initial_direction\n          required: No\n          default: !!str 1\n          cpp_type: int\n          group_name: \n          description: |\n            Direction for the first step.  1 for up... -1 for down. \n        - name: percent_change\n          required: No\n          default: !!str 0.1\n          cpp_type: double\n          group_name: \n          description: |\n            Percentage to change the timestep by.  Should be between 0 and 1\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str SolutionTimeAdaptiveDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n- name: /Functions\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Functions/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Functions/Axisymmetric2D3DSolutionFunction\n    description: |\n      Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n    parameters:\n    - name: 2d_axis_point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis of symmetry for the 2d model\n    - name: 2d_axis_point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis of symmetry for the 2d model\n    - name: 3d_axis_point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis of symmetry for the 3d model\n    - name: 3d_axis_point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis of symmetry for the 3d model\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: axial_dimension_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component of the variable to be computed if it is a vector\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: from_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a) to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The SolutionUserObject to extract data from.\n    - name: type\n      required: No\n      default: !!str Axisymmetric2D3DSolutionFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/CompositeFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: functions\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The functions to be multiplied together.\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str CompositeFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/ConstantFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str ConstantFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The constant value\n    subblocks:\n  - name: /Functions/Grad2ParsedFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction in which to take the derivative.  This must not be a zero-length vector.  This function returned a finite-difference approx to (direction.nabla)^2 function\n    - name: type\n      required: No\n      default: !!str Grad2ParsedFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The user defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/GradParsedFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction in which to take the derivative.  This must not be a zero-length vector\n    - name: type\n      required: No\n      default: !!str GradParsedFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The user defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/ImageFunction\n    description: |\n      Function with values sampled from a given image stack\n    parameters:\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The image component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first component of the image\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dimensions\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        x,y,z dimensions of the image (defaults to mesh dimensions)\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: FileNameNoExtension\n      group_name: \n      description: |\n        Image file base to open, use this option when a stack of images must be read (ignored if \'file\' is given)\n    - name: file_range\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Range of images to analyze, used with \'file_base\' (ignored if \'file\' is given)\n    - name: file_suffix\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Suffix of the file to open, e.g. \'png\'\n    - name: flip_x\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Flip\n      description: |\n        Flip the image along the x-axis\n    - name: flip_y\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Flip\n      description: |\n        Flip the image along the y-axis\n    - name: flip_z\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Flip\n      description: |\n        Flip the image along the z-axis\n    - name: lower_value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: Threshold\n      description: |\n        The value to set for data less than the threshold value\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Origin of the image (defaults to mesh origin)\n    - name: scale\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: Rescale\n      description: |\n        Multiplier to apply to all pixel values; occurs after shifting\n    - name: shift\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: Rescale\n      description: |\n        Value to add to all pixels; occurs prior to scaling\n    - name: threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Threshold\n      description: |\n        The threshold value\n    - name: type\n      required: No\n      default: !!str ImageFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper_value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: Threshold\n      description: |\n        The value to set for data greater than the threshold value\n    subblocks:\n  - name: /Functions/LinearCombinationFunction\n    description: |\n      Returns the linear combination of the functions\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: functions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        This function will return Sum_over_i(w_i * functions_i)\n    - name: type\n      required: No\n      default: !!str LinearCombinationFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        This function will return Sum_over_i(w_i * functions_i)\n    subblocks:\n  - name: /Functions/ParsedFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str ParsedFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The user defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/ParsedGradFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: grad_x\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Partial with respect to x.\n    - name: grad_y\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Partial with respect to y.\n    - name: grad_z\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Partial with respect to z.\n    - name: type\n      required: No\n      default: !!str ParsedGradFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        User defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/ParsedVectorFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str ParsedVectorFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value_x\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        x-component of function.\n    - name: value_y\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        y-component of function.\n    - name: value_z\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        z-component of function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/PiecewiseBilinear\n    description: |\n      \n    parameters:\n    - name: axis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding csv data for use with PiecewiseBilinear\n    - name: radial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the axis, yaxis, or xaxis values\n    - name: type\n      required: No\n      default: !!str PiecewiseBilinear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x abscissa values\n    - name: xaxis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y abscissa values\n    - name: yaxis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Functions/PiecewiseConstant\n    description: |\n      \n    parameters:\n    - name: axis\n      required: No\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding csv data for use with Piecewise\n    - name: direction\n      required: No\n      default: !!str left\n      cpp_type: MooseEnum\n      group_name: \n      options: left right\n      description: |\n        Direction to look to find value: left right\n    - name: format\n      required: No\n      default: !!str rows\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Format of csv data file that is in either in columns or rows\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str PiecewiseConstant\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Functions/PiecewiseLinear\n    description: |\n      \n    parameters:\n    - name: axis\n      required: No\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding csv data for use with Piecewise\n    - name: format\n      required: No\n      default: !!str rows\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Format of csv data file that is in either in columns or rows\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str PiecewiseLinear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Functions/PiecewiseMultilinear\n    description: |\n      PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n    - name: type\n      required: No\n      default: !!str PiecewiseMultilinear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/RichardsExcavGeom\n    description: |\n      This function defines excavation geometry.  It can be used to enforce pressures at the boundary of excavations, and to record fluid fluxes into excavations.\n    parameters:\n    - name: active_length\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        This function is only active at a point if the distance between the point and the coal face <= active_length.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: deactivation_time\n      required: No\n      default: !!str 1e+30\n      cpp_type: double\n      group_name: \n      description: |\n        Time at which this function is totally turned off\n    - name: end_posn\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End position of the excavation.  This is an (x,y,z) point in the middle of the coal face at the very end of the panel.\n    - name: end_time\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Time at the completion of the excavation\n    - name: start_posn\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point of the excavation.  This is an (x,y,z) point in the middle of the coal face at the very beginning of the panel.\n    - name: start_time\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Commencement time of the excavation\n    - name: true_value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Return this value if a point is in the active zone.  This is usually used for controlling permeability-changes\n    - name: type\n      required: No\n      default: !!str RichardsExcavGeom\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/SolutionFunction\n    description: |\n      \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the variable in the file that is to be extracted\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a) to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The SolutionUserObject to extract data from.\n    - name: type\n      required: No\n      default: !!str SolutionFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/SplineFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str SplineFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    - name: yp1\n      required: No\n      default: !!str 1e+30\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the first derivative of the interpolating function at point 1\n    - name: ypn\n      required: No\n      default: !!str 1e+30\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the first derivative of the interpolating function at point n\n    subblocks:\n- name: /GlobalParams\n  description: |\n    \n  parameters:\n  subblocks:\n- name: /ICs\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /ICs/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /ICs/BoundingBoxIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: inside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the variable inside the box\n    - name: outside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the variable outside the box\n    - name: type\n      required: No\n      default: !!str BoundingBoxIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/ClosePackIC\n    description: |\n      Close packed arrangement of smooth circles\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str ClosePackIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/ConstantIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str ConstantIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value to be set in IC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/CrossIC\n    description: |\n      Cross-shaped initial condition\n    parameters:\n    - name: amplitude\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The amplitude\n    - name: average\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The average value\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: buffer\n      required: No\n      default: !!str 0.03125\n      cpp_type: double\n      group_name: \n      description: |\n        A small area between the max value and the interface\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: interface\n      required: No\n      default: !!str 0.03125\n      cpp_type: double\n      group_name: \n      description: |\n        The interface width\n    - name: length\n      required: No\n      default: !!str 0.75\n      cpp_type: double\n      group_name: \n      description: |\n        The length\n    - name: type\n      required: No\n      default: !!str CrossIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: width\n      required: No\n      default: !!str 0.125\n      cpp_type: double\n      group_name: \n      description: |\n        The width\n    - name: x1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/FunctionIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The initial condition function.\n    - name: type\n      required: No\n      default: !!str FunctionIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/HexPolycrystalIC\n    description: |\n      Perturbed hexagonal polycrystal\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cody_test\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use set grain center points for Cody\'s test. Grain num MUST equal 10\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: perturbation_percent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The percent to randomly perturbate centers of grains relative to the size of the grain\n    - name: rand_seed\n      required: No\n      default: !!str 12444\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: typ\n      required: No\n      default: !!str 1\n      cpp_type: int\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str HexPolycrystalIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x_offset\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies offset of hexagon grid in x-direction\n    subblocks:\n  - name: /ICs/LatticeSmoothCircleIC\n    description: |\n      Perturbed square lattice of smooth circles\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: Rnd_variation\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Variation from central lattice position\n    - name: avoid_bounds\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Don\'t place any bubbles on the simulation cell boundaries\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: circles_per_side\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Vector containing the number of bubbles along each side\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: pos_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Variation from central lattice position\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean radius value for the circels\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus fraction of random variation in the bubble radius\n    - name: radius_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random circle radii will follow\n    - name: rand_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        random seed\n    - name: type\n      required: No\n      default: !!str LatticeSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/MultiSmoothCircleIC\n    description: |\n      Random distribution of smooth circles with given minimum spacing\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubspac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing of bubbles, measured from center to center\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: numbub\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of bubbles to place\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean radius value for the circels\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n    - name: radius_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random circle radii will follow\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str MultiSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/PFCFreezingIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crystal_structure\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: FCC BCC\n      description: |\n        The type of crystal structure\n    - name: inside\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Value inside sinusoids\n    - name: lc\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lattice constant off the crystal structure\n    - name: max\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Upper bound of the randomly generated values\n    - name: min\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Lower bound of the randomly generated values\n    - name: outside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Value outside sinusoids\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str PFCFreezingIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the frozen box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the frozen box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/PolycrystalICs\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /ICs/PolycrystalICs/BicrystalBoundingBoxIC\n      description: |\n        \n      parameters:\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, should be 2\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x1\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the lower left-hand corner of the box\n      - name: x2\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the upper right-hand corner of the box\n      - name: y1\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the lower left-hand corner of the box\n      - name: y2\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the upper right-hand corner of the box\n      - name: z1\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the lower left-hand corner of the box\n      - name: z2\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the upper right-hand corner of the box\n      subblocks:\n    - name: /ICs/PolycrystalICs/BicrystalCircleGrainIC\n      description: |\n        \n      parameters:\n      - name: 3D_sphere\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          in 3D, whether the smaller grain is a spheres or columnar grain\n      - name: int_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The interfacial width of the void surface.  Defaults to sharp interface\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, should be 2\n      - name: radius\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Void radius\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the circle grain center\n      - name: y\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the circle grain center\n      - name: z\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the circle grain center\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalHexGrainIC\n      description: |\n        \n      parameters:\n      - name: grain_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, must be a square (4, 9, 16, etc)\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of order parameters\n      - name: perturbation_percent\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The percent to randomly perturbate centers of grains relative to the size of the grain\n      - name: rand_seed\n        required: No\n        default: !!str 12444\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The random seed\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x_offset\n        required: No\n        default: !!str 0.5\n        cpp_type: double\n        group_name: \n        description: |\n          Specifies offset of hexagon grid in x-direction\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalRandomIC\n      description: |\n        \n      parameters:\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: random_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: continuous discrete\n        description: |\n          The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalVoronoiIC\n      description: |\n        \n      parameters:\n      - name: cody_test\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Use set grain center points for Cody\'s test. Grain num MUST equal 10\n      - name: columnar_3D\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          3D microstructure will be columnar in the z-direction?\n      - name: grain_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of grains to create, if it is going to greater than op_num\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: rand_seed\n        required: No\n        default: !!str 12444\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The random seed\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n    - name: /ICs/PolycrystalICs/ReconVarIC\n      description: |\n        \n      parameters:\n      - name: ebsd_reader\n        required: Yes\n        default: !!str \n        cpp_type: UserObjectName\n        group_name: \n        description: |\n          The EBSDReader GeneralUserObject\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Specifies the number of order paraameters to create\n      - name: phase\n        required: No\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          EBSD phase number to be assigned to this grain\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n    - name: /ICs/PolycrystalICs/Tricrystal2CircleGrainsIC\n      description: |\n        \n      parameters:\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n  - name: /ICs/PolycrystalRandomIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: typ\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Type of random grain structure\n    - name: type\n      required: No\n      default: !!str PolycrystalRandomIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/PolycrystalReducedIC\n    description: |\n      Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cody_test\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use set grain center points for Cody\'s test. Grain num MUST equal 10\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: rand_seed\n      required: No\n      default: !!str 12444\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: type\n      required: No\n      default: !!str PolycrystalReducedIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/RampIC\n    description: |\n      Linear ramp along the x-axis with given values at the left and right extreme points.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str RampIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value_left\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value on left (xmin) boundary.\n    - name: value_right\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value on right (xmax) boundary.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/RandomIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: max\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Upper bound of the randomly generated values\n    - name: min\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Lower bound of the randomly generated values\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str RandomIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/ReconPhaseVarIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader object holding the EBSD data\n    - name: phase\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        EBSD phase number this variable is to represent\n    - name: type\n      required: No\n      default: !!str ReconPhaseVarIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/ReconVarIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader GeneralUserObject\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Specifies the number of order parameters to create\n    - name: phase\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        EBSD phase number to be assigned to this grain\n    - name: type\n      required: No\n      default: !!str ReconVarIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/RndBoundingBoxIC\n    description: |\n      Random noise with different min/max inside/outside of a bounding box\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: mn_invalue\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The min value of the variable invalue the box\n    - name: mn_outvalue\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The min value of the variable outvalue the box\n    - name: mx_invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max value of the variable invalue the box\n    - name: mx_outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max value of the variable outvalue the box\n    - name: type\n      required: No\n      default: !!str RndBoundingBoxIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/RndSmoothCircleIC\n    description: |\n      Random noise with different min/max inside/outside of a smooth circle\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str RndSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: variation_invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus this amount on the invalue\n    - name: variation_outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus this amount on the outvalue\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/ScalarComponentIC\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str ScalarComponentIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: values\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Initial values to initialize the scalar variable.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/ScalarConstantIC\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str ScalarConstantIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/SmoothCircleIC\n    description: |\n      Circle with a smooth interface\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str SmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/SpecifiedSmoothCircleIC\n    description: |\n      Multiple smooth circles with manually specified radii and center points\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radii\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The radius for each circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str SpecifiedSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x-coordinate for each circle center\n    - name: y_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y-coordinate for each circle center\n    - name: z_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The z-coordinate for each circle center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/ThumbIC\n    description: |\n      Thumb shaped bicrystal for grain boundary mobility tests\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: height\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: type\n      required: No\n      default: !!str ThumbIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: xcoord\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    subblocks:\n  - name: /ICs/Tricrystal2CircleGrainsIC\n    description: |\n      Tricrystal with two circles/bubbles\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Index for the current grain order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grain order parameters\n    - name: type\n      required: No\n      default: !!str Tricrystal2CircleGrainsIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n- name: /Kernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Kernels/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Kernels/ACGBPoly\n    description: |\n      Grain-Boundary model concentration dependent residual\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Other species concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: en_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of surface energy to GB energy\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGBPoly\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACGrGrElasticDrivingForce\n    description: |\n      Adds elastic energy contribution to the Allen-Cahn equation\n    parameters:\n    - name: D_tensor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The elastic tensor derivative for the specific order parameter\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGrGrElasticDrivingForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACGrGrPoly\n    description: |\n      Grain-Boundary model poly crystaline interface Allen-Cahn Kernel\n    parameters:\n    - name: T\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGrGrPoly\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACInterface\n    description: |\n      Gradient energy Allen-Cahn Kernel\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: No\n      default: !!str kappa_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: variable_L\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        The mobility is a function of any non-linear variable\n    - name: variable_kappa\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Kappa is a function of any non-linear variable (must use ACInterfaceKappa Kernel along with this option)\n    subblocks:\n  - name: /Kernels/ACInterfaceKobayashi1\n    description: |\n      Anisotropic gradient energy Allen-Cahn Kernel Part 1\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eps1_name\n      required: No\n      default: !!str eps1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The derivative of anisotropic parameter with respect to angle\n    - name: eps_name\n      required: No\n      default: !!str eps\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The anisotropic parameter\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACInterfaceKobayashi1\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACInterfaceKobayashi2\n    description: |\n      Anisotropic Gradient energy Allen-Cahn Kernel Part 2\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eps_name\n      required: No\n      default: !!str eps\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The anisotropic parameter\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACInterfaceKobayashi2\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACMultiInterface\n    description: |\n      Gradient energy Allen-Cahn Kernel with cross terms\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        All eta_i order parameters of the multiphase problem\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACMultiInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACParsed\n    description: |\n      Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACParsed\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/AnisoHeatConduction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AnisoHeatConduction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/AnisotropicDiffusion\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor_coeff\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        The Tensor to multiply the Diffusion operator by\n    - name: type\n      required: No\n      default: !!str AnisotropicDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/AxisymmetricRZ\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables for the problem\n    - name: save_in_disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the r displacement residuals.\n    - name: save_in_disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the z displacement residuals.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/BodyForce\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the body force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BodyForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/BodyForceVoid\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        void concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the body force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BodyForceVoid\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHBulkPFCTrad\n    description: |\n      Cahn-Hilliard base Kernel\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHBulkPFCTrad\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHCpldPFCTrad\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable representing the laplacian of c\n    - name: coeff_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHCpldPFCTrad\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHInterface\n    description: |\n      Gradient energy Cahn-Hilliard Kernel with a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHInterfaceAniso\n    description: |\n      Gradient energy Cahn-Hilliard Kernel with a tensor (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHInterfaceAniso\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHMath\n    description: |\n      Simple demonstration Cahn-Hilliard Kernel using an algebraic double-well potential\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHMath\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHPFCRFF\n    description: |\n      \n    parameters:\n    - name: Dmob_name\n      required: No\n      default: !!str DM\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The D mobility used with the kernel\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Constants on Taylor Series\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Constants on Taylor Series\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Constants on Taylor Series\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: has_MJac\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian information for the mobility is defined\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion nothing\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: type\n      required: No\n      default: !!str CHPFCRFF\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of names of the real parts of the L variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHPFCRFFSplitKernel\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used for n in this model\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        Variable name used for the n variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/CHParsed\n    description: |\n      Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHParsed\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHSplitVar\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable representing the laplacian of c\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHSplitVar\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CahnHilliard\n    description: |\n      Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliard\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CahnHilliardAniso\n    description: |\n      Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a tensor (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliardAniso\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoefConduction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoefConduction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoefCoupledTimeDerivative\n    description: |\n      Scaled time derivative Kernel that acts on a coupled variable\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: coef\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoefCoupledTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoefDiffusion\n    description: |\n      Kernel for diffusion with diffusivity = coef + function\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: coef\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Diffusion coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        If provided, the diffusion coefficient will be coef + this function.  This is useful for temporally or spatially varying diffusivities\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoefDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoefTimeDerivative\n    description: |\n      \n    parameters:\n    - name: Coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The coefficient for the time derivative kernel\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoefTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ConservedLangevinNoise\n    description: |\n      Source term for noise from a ConservativeNoise userobject\n    parameters:\n    - name: amplitude\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Amplitude\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: multiplier\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n    - name: noise\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        ConservativeNoise userobject that produces the random numbers\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedLangevinNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Convection\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Convection\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Component of velocity in the x direction\n    - name: y\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Component of velocity in the y direction\n    - name: z\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Component of velocity in the z direction\n    subblocks:\n  - name: /Kernels/CosseratStressDivergenceTensors\n    description: |\n      Stress divergence kernel (used by the TensorMechanics action)\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str CosseratStressDivergenceTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: wc_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The Cosserat rotation about x\n    - name: wc_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The Cosserat rotation about y\n    - name: wc_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The Cosserat rotation about z\n    subblocks:\n  - name: /Kernels/CoupledBEEquilibriumSub\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The equilibrium constaant of this equilibrium species in dissociateion reaction\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_u\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The stochiomentic coef of the primary variable this kernel operats on\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficients of coupled primary species\n    - name: type\n      required: No\n      default: !!str CoupledBEEquilibriumSub\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled primary species constituting the equalibrium species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: weight\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The weight of the equilibrium species\n    subblocks:\n  - name: /Kernels/CoupledBEKinetic\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledBEKinetic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of kinetic species being coupled by concentration\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: weight\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The weight of kinetic species concentration\n    subblocks:\n  - name: /Kernels/CoupledConvectionReactionSub\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium constant of dissociation equilibrium reaction\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_u\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Stochiometric coef of the primary spceices the kernel operates on in the equilibrium reaction\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficients of coupled primary species in equilibrium reaction\n    - name: type\n      required: No\n      default: !!str CoupledConvectionReactionSub\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of coupled primary species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: weight\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Weight of the equilibrium species\n    subblocks:\n  - name: /Kernels/CoupledDiffusionReactionSub\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diffusivity\n      required: No\n      default: !!str diffusivity\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The real material property to use as the diffusivity of this particular species\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: log_k\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium constant of the equilbrium reaction in dissociation form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sto_u\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Stochiometric coef of the primary species this kernel operates on in the equilibrium reaction\n    - name: sto_v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The stochiometric coefficients of coupled primary species\n    - name: type\n      required: No\n      default: !!str CoupledDiffusionReactionSub\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of coupled primary species in this equilibrium species\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: weight\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Weight of equilibrium species concentration in the primary species concentration\n    subblocks:\n  - name: /Kernels/CoupledForce\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The coupled variable which provides the force\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledTimeDerivative\n    description: |\n      Time derivative Kernel that acts on a coupled variable\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/DarcyFlux\n    description: |\n      Darcy flux.  nabla_i (k_ij/mu (nabla_j P - w_j)), where k_ij is the permeability tensor, mu is the fluid viscosity, P is the fluid pressure, and w_j is the fluid weight\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: fluid_viscosity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Fluid dynamic viscosity (usually measured in Pa.s)\n    - name: fluid_weight\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Fluid weight (gravity*density) as a vector pointing downwards (usually measured in kg.m^-2.s^-2 = Pa/m).  Eg \'0 0 -10000\'\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DarcyFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/DesorptionFromMatrix\n    description: |\n      Mass flow rate from the matrix to the porespace.  Add this to TimeDerivative kernel to get complete DE for the fluid in adsorbed in the matrix\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable representing the porepressure of the fluid adsorbed into the matrix\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DesorptionFromMatrix\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/DesorptionToPorespace\n    description: |\n      Mass flow rate to the porespace from the matrix.  Add this to the other kernels for the porepressure variable to form the complete DE\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: conc_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable representing the concentration (kg/m^3) of fluid in the matrix that will be desorped to porespace\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DesorptionToPorespace\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Diffusion\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Diffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/DynamicStressDivergenceTensors\n    description: |\n      Residual due to stress related Rayleigh damping and HHT time integration terms \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for HHT time integration\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str DynamicStressDivergenceTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: zeta\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        zeta parameter for the Rayleigh damping\n    subblocks:\n  - name: /Kernels/DynamicTensorMechanics\n    description: |\n      \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for HHT time integration\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables for the problem\n    - name: save_in_disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the x displacement residuals.\n    - name: save_in_disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the y displacement residuals.\n    - name: save_in_disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the z displacement residuals.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The temperature\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: zeta\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        zeta parameter for the Rayleigh damping\n    subblocks:\n  - name: /Kernels/GaussContForcing\n    description: |\n      \n    parameters:\n    - name: amplitude\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Aplitude of the bell curve\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GaussContForcing\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: x_center\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Center of the hump in the X direction\n    - name: x_spread\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Spread of the curve in the x direction (sigma_x)\n    - name: y_center\n      required: No\n      default: !!str 6\n      cpp_type: double\n      group_name: \n      description: |\n        Center of the hump in the Y direction\n    - name: y_spread\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Spread of the curve in the y direction (sigma_y)\n    - name: z_center\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Center of the hump in the Z direction\n    - name: z_spread\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Spread of the curve in the z direction (sigma_z)\n    subblocks:\n  - name: /Kernels/GradientComponent\n    description: |\n      Set the kernel variable to a specified component of the gradient of a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component of the gradient of the coupled variable v\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GradientComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable to match gradient component of\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Gravity\n    description: |\n      Apply gravity. Value is in units of acceleration.\n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter required for HHT time integration scheme\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the gravitational force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Gravity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Displaced mesh defaults to true\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HHPFCRFF\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_var\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the coupled variable, if one is used in the kernel\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: positive\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If the kernel is positive, this is true, if negative, it is false\n    - name: prop_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property to be used in the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HHPFCRFF\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HHPFCRFFSplitKernel\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used for n in this model\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable name used for the n variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/HeatCondHomogenizationKernel\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        component\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HeatCondHomogenizationKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HeatCondTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HeatCondTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HeatConduction\n    description: |\n      Compute thermal conductivity\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diffusion_coefficient_dT_name\n      required: No\n      default: !!str thermal_conductivity_dT\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Property name of the derivative of the diffusivity with respect to the variable (Default: thermal_conductivity_dT)\n    - name: diffusion_coefficient_name\n      required: No\n      default: !!str thermal_conductivity\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Property name of the diffusivity (Default: thermal_conductivity)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HeatConduction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HeatConductionTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_name\n      required: No\n      default: !!str density\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Property name of the density material property (Default: density)\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: heat_capacity_name\n      required: No\n      default: !!str heat_capacity\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Property name of the heat capacity material property, this is only used when \'use_specific_heat\' is true (Default: heat_capacity)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specific_heat_name\n      required: No\n      default: !!str specific_heat\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Property name of the specific heat material property (Default: specific_heat)\n    - name: type\n      required: No\n      default: !!str HeatConductionTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_heat_capacity\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use a single material property, \'heat_capacity\', as the coefficient of the time derivative.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HeatSource\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the volumetric heat source\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HeatSource\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Value of heat source. Multiplied by function if present.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HomogenizationHeatConduction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diffusion_coefficient_name\n      required: No\n      default: !!str thermal_conductivity\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The diffusion coefficient for the temperature gradient (Default: thermal_conductivity)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HomogenizationHeatConduction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HomogenizationKernel\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: column\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HomogenizationKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/INSChorinCorrector\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        0,1,2 depending on if we are solving the x,y,z component of the Corrector equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        pressure\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSChorinCorrector\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u_star\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v_star\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w_star\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star z-velocity\n    subblocks:\n  - name: /Kernels/INSChorinPredictor\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        0,1,2 depending on if we are solving the x,y,z component of the Predictor equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        dynamic viscosity\n    - name: predictor_type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        One of: OLD, NEW, STAR.  Indicates which velocity to use in the predictor.\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSChorinPredictor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: u_star\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: v_star\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    - name: w_star\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star z-velocity\n    subblocks:\n  - name: /Kernels/INSChorinPressurePoisson\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSChorinPressurePoisson\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u_star\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v_star\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w_star\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        star z-velocity\n    subblocks:\n  - name: /Kernels/INSMass\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSMass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /Kernels/INSMomentum\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gravity\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of the gravity vector\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        dynamic viscosity\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        pressure\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSMomentum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /Kernels/INSMomentumTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSMomentumTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/INSPressurePoisson\n    description: |\n      \n    parameters:\n    - name: a1\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-acceleration\n    - name: a2\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-acceleration\n    - name: a3\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-acceleration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSPressurePoisson\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/INSProjection\n    description: |\n      \n    parameters:\n    - name: a1\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-acceleration\n    - name: a2\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-acceleration\n    - name: a3\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-acceleration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        pressure\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSProjection\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/INSSplitMomentum\n    description: |\n      \n    parameters:\n    - name: a1\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-acceleration\n    - name: a2\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-acceleration\n    - name: a3\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-acceleration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gravity\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of the gravity vector\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        dynamic viscosity\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSSplitMomentum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /Kernels/INSTemperature\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cp\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        specific heat\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: k\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        thermal conductivity\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSTemperature\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-velocity\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-velocity\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-velocity\n    subblocks:\n  - name: /Kernels/INSTemperatureTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cp\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        specific heat\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSTemperatureTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/InertialForce\n    description: |\n      Calculates the residual for the interial force (M*accel) and the contribution of mass dependent Rayleigh damping and HHT time integration scheme [eta*M*((1+alpha)vel-alpha*vel_old)]\n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        acceleration variable\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for mass dependent numerical damping induced by HHT time integration scheme\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter for Newmark Time integration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eta\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        eta parameter for mass dependent Rayleigh damping\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        gamma parameter for Newmark Time integration\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str InertialForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        velocity variable\n    subblocks:\n  - name: /Kernels/JouleHeating\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: potential\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Gradient of the electrical potential\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str JouleHeating\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSACBulkC\n    description: |\n      KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        a-phase concentration\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        b-phase concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSACBulkC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSACBulkF\n    description: |\n      KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: g_name\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the double well function g(eta)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSACBulkF\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /Kernels/KKSCHBulk\n    description: |\n      KKS model kernel for the Bulk Cahn-Hilliard term. This operates on the concentration \'c\' as the non-linear variable\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: args_a\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of additional arguments to Fa\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSCHBulk\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSPhaseChemicalPotential\n    description: |\n      KKS model kernel to enforce the pointwise equality of phase chemical potentials  dFa/dca = dFb/dcb. The non-linear variable of this kernel is ca.\n    parameters:\n    - name: args_a\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of further parameters to Fa (optional, to add in second cross derivatives of Fa)\n    - name: args_b\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of further parameters to Fb (optional, to add in second cross derivatives of Fb)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase b concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function Fa (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function Fb (f_name in the corresponding derivative function material)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSPhaseChemicalPotential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSPhaseConcentration\n    description: |\n      KKS model kernel to enforce the decomposition of concentration into phase concentration  (1-h(eta))*ca + h(eta)*cb - c = 0. The non-linear variable of this kernel is cb.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Real concentration\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase a concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase a/b order parameter\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSPhaseConcentration\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSSplitCHCRes\n    description: |\n      KKS model kernel for the split Bulk Cahn-Hilliard term. This operates on the chemical potential \'c\' as the non-linear variable\n    parameters:\n    - name: args_a\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of additional arguments to Fa\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSSplitCHCRes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Chemical potenial non-linear helper variable for the split solve\n    subblocks:\n  - name: /Kernels/LangevinNoise\n    description: |\n      Source term for non-conserved Langevin noise\n    parameters:\n    - name: amplitude\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Amplitude\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: multiplier\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LangevinNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MaskedBodyForce\n    description: |\n      Kernel that defines a body force modified by a material mask\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the body force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mask\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property defining the mask\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaskedBodyForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MassEigenKernel\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Use for eigenvalue problem (true) or source problem (false)\n    - name: eigen_postprocessor\n      required: No\n      default: !!str 1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor that provides the eigenvalue.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MassEigenKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MassLumpedTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MassLumpedTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MatAnisoDiffusion\n    description: |\n      Diffusion equation Kernel that takes an anisotropic Diffusivity from a material property\n    parameters:\n    - name: D_name\n      required: No\n      default: !!str D\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the diffusivity\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatAnisoDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MatDiffusion\n    description: |\n      Diffusion equation Kernel that takes an isotropic Diffusivity from a material property\n    parameters:\n    - name: D_name\n      required: No\n      default: !!str D\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the diffusivity\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MomentBalancing\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MomentBalancing\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: wc_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The Cosserat rotation about x\n    - name: wc_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The Cosserat rotation about y\n    - name: wc_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The Cosserat rotation about z\n    subblocks:\n  - name: /Kernels/MultiGrainRigidBodyMotion\n    description: |\n      Adds rigid mody motion to grains\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define type of force density under consideration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MultiGrainRigidBodyMotion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/NSEnergyInviscidFlux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enthalpy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSEnergyInviscidFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSEnergyThermalFlux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSEnergyThermalFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSEnergyViscousFlux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSEnergyViscousFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSGravityForce\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The body force vector component.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSGravityForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSGravityPower\n    description: |\n      \n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The body force vector component.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: momentum\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSGravityPower\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/NSMassInviscidFlux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMassInviscidFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSMomentumInviscidFlux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMomentumInviscidFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSMomentumInviscidFluxWithGradP\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: pressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMomentumInviscidFluxWithGradP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSMomentumViscousFlux\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        \n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSMomentumViscousFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSSUPGEnergy\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enthalpy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSSUPGEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSSUPGMass\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enthalpy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSSUPGMass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSSUPGMomentum\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        \n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enthalpy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of specific heats\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        density\n    - name: rhoe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        energy\n    - name: rhou\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-momentum\n    - name: rhov\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-momentum\n    - name: rhow\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-momentum\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str NSSUPGMomentum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/NSTemperatureL2\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: pe\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NSTemperatureL2\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: u\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Kernels/OutOfPlaneStress\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str OutOfPlaneStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PFCRFFKernel\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter in the taylor series expansion\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter in the taylor series expansion\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter in the taylor series expansion\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used for n in this model\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Variable name used for the n variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/PFFracBulkRate\n    description: |\n      Kernel to compute bulk energy contribution to damage order parameter residual equation\n    parameters:\n    - name: G0_var\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with undamaged strain energy driving damage (G0_pos)\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Auxiliary variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dG0_dstrain_var\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with derivative of G0_pos with strain\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: gc_prop_var\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with gc value\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: l\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Interface width\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFracBulkRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: visco\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscosity parameter\n    subblocks:\n  - name: /Kernels/PFFracCoupledInterface\n    description: |\n      Phase-field fracture residual for beta variable: Contribution from gradient of damage order parameter\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter for damage\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFracCoupledInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PFFracIntVar\n    description: |\n      Phase-field fracture residual for beta variable: Contribution from beta\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFracIntVar\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PolycrystalElasticDrivingForce\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of grains to create\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n  - name: /Kernels/PolycrystalKernel\n    description: |\n      \n    parameters:\n    - name: T\n      required: No\n      default: !!str NONE\n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of temperature variable\n    - name: c\n      required: No\n      default: !!str NONE\n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of coupled concentration variable\n    - name: en_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of surface to GB energy\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether kernels are implicit or not\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of grains to create\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n  - name: /Kernels/PoroFullSatTimeDerivative\n    description: |\n      Kernel = biot_coefficient*d(volumetric_strain)/dt + (1/biot_modulus)*d(porepressure)/dt.  This is the time-derivative for poromechanics for a single-phase, fully-saturated fluid with constant bulk modulus\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PoroFullSatTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PoroMechanics\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables for the problem\n    - name: porepressure\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The porepressure variable\n    - name: save_in_disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the x displacement residuals.\n    - name: save_in_disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the y displacement residuals.\n    - name: save_in_disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the z displacement residuals.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The temperature\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/PoroMechanicsCoupling\n    description: |\n      Adds -BiotCoefficient*porepressure*grad_test[component]\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The gradient direction (0 for x, 1 for y and 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: porepressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Porepressure.  This kernel adds -BiotCoefficient*porepressure*grad_test[component]\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PoroMechanicsCoupling\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PrimaryConvection\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: p\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PrimaryConvection\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PrimaryDiffusion\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PrimaryDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PrimaryTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: porosity\n      required: No\n      default: !!str porosity\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The real material property (here is it a porosity) to use\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PrimaryTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/QSource\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QSource\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Reaction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Reaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/RichardsFlux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: linear_shape_fcns\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If you are using second-order Lagrange shape functions you need to set this to false.\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/RichardsFullyUpwindFlux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the fluid density\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define relative permeability\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of name of user objects that define effective saturation as a function of pressure list\n    - name: type\n      required: No\n      default: !!str RichardsFullyUpwindFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/RichardsLumpedMassChange\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the fluid density (or densities for multiphase).  In the multiphase case, for ease of use, the density, Seff and Sat UserObjects are the same format as for RichardsMaterial, but only the one relevant for the specific phase is actually used.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variables.\n    - name: sat_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define saturation as a function of effective saturation\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of name of user objects that define effective saturation as a function of porepressure(s)\n    - name: type\n      required: No\n      default: !!str RichardsLumpedMassChange\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/RichardsMassChange\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsMassChange\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_supg\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for using SUPG in this kernel, false otherwise.  This has no effect if the material does not use SUPG.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/RichardsPPenalty\n    description: |\n      This adds a term to the residual that attempts to enforce variable > lower_var.  The term is a*(lower - variable) for variable<lower, and zero otherwise\n    parameters:\n    - name: a\n      required: No\n      default: !!str 1e-10\n      cpp_type: double\n      group_name: \n      description: |\n        Weight of the penalty.  Penalty = a*(lower - variable) for variable<lower, and zero otherwise.  Care should be taken with this parameter choice.  Determine the typical size of your residual (usually rho*perm*(gradP - rho*g)/visc), then typically you want the penalty to ensure p>lower*(1-1E-6), so for the PPP formulation you typically Penalty = a*1E-6*|p|.  I recommend that Penalty = 1E-3*residual, yielding a = 1E3*residual/|P|. \n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lower_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Your variable will be constrained to be greater than this lower_var variable.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsPPenalty\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SharpInterfaceForcing\n    description: |\n      \n    parameters:\n    - name: amplitude\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The amplitude of the forcing function\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SharpInterfaceForcing\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: x_center\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The parametric x center of the forcing function\n    - name: y_center\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The parametric y center of the forcing function\n    subblocks:\n  - name: /Kernels/SingleGrainRigidBodyMotion\n    description: |\n      Adds rigid mody motion to a single grain\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define type of force density under consideration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: op_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Grain number for the kernel to be applied\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SingleGrainRigidBodyMotion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SolidMechImplicitEuler\n    description: |\n      \n    parameters:\n    - name: artificial_scaling\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Factor to replace rho/dt^2\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SolidMechImplicitEuler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SolidMechTempCoupleX\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: constant_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: type\n      required: No\n      default: !!str SolidMechTempCoupleX\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SolidMechTempCoupleY\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: constant_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: type\n      required: No\n      default: !!str SolidMechTempCoupleY\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SolidMechTempCoupleZ\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: constant_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: type\n      required: No\n      default: !!str SolidMechTempCoupleZ\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SolidMechX\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: constant_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SolidMechX\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Displacement in the y Direction\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Displacement in the z Direction\n    subblocks:\n  - name: /Kernels/SolidMechY\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: constant_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SolidMechY\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Displacement in the x Direction\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Displacement in the z Direction\n    subblocks:\n  - name: /Kernels/SolidMechZ\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: constant_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SolidMechZ\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Displacement in the x Direction\n    - name: y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Displacement in the y Direction\n    subblocks:\n  - name: /Kernels/SoretDiffusion\n    description: |\n      Add Soret effect to Split formulation Cahn-Hilliard Kernel\n    parameters:\n    - name: Q_name\n      required: No\n      default: !!str Qheat\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The material name for the heat of transport\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diff_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The diffusivity used with the kernel\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SoretDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SplitCHMath\n    description: |\n      Simple demonstration split formulation Cahn-Hilliard Kernel using an algebraic double-well potential\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHMath\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        chem poten\n    subblocks:\n  - name: /Kernels/SplitCHParsed\n    description: |\n      Split formulation Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of additional arguments to F\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHParsed\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        chem poten\n    subblocks:\n  - name: /Kernels/SplitCHWRes\n    description: |\n      Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str mobtemp\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHWRes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SplitCHWResAniso\n    description: |\n      Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a tensor (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str mobtemp\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHWResAniso\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/StressDivergence\n    description: |\n      \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter required for HHT time integration\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergence\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: zeta\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Stiffness dependent Rayleigh damping coefficient\n    subblocks:\n  - name: /Kernels/StressDivergencePFFracTensors\n    description: |\n      Stress divergence kernel for phase-field fracture: Additionally computes off diagonal damage dependent Jacobian components\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase field damage variable: Used to indicate calculation of Off Diagonal Jacobian term\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergencePFFracTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/StressDivergenceRSpherical\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for r, 1 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergenceRSpherical\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/StressDivergenceRZ\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for r, 1 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergenceRZ\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/StressDivergenceRZTensors\n    description: |\n      Calculate stress divergence for an axisymmetric problem in cylinderical coordinates.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergenceRZTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/StressDivergenceTensors\n    description: |\n      Stress divergence kernel (used by the TensorMechanics action)\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Depricated: the z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergenceTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/StressDivergenceTruss\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: area\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Cross-sectional area of truss element\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergenceTruss\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SwitchingFunctionConstraintEta\n    description: |\n      Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on a non-conserved order parameter eta_i.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: h_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Switching Function Materials that provides h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lambda\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Lagrange multiplier\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionConstraintEta\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SwitchingFunctionConstraintLagrange\n    description: |\n      Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on the lagrange multiplier variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: epsilon\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Shift factor to avoid a zero pivot\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: h_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionConstraintLagrange\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SwitchingFunctionPenalty\n    description: |\n      Penalty kernel to constrain the sum of all switching functions in a multiphase system.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: h_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: penalty\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Penalty scaling factor\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionPenalty\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/TensorMechanics\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The z displacement\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables for the problem\n    - name: save_in_disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the x displacement residuals.\n    - name: save_in_disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the y displacement residuals.\n    - name: save_in_disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the z displacement residuals.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The temperature\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/ThermoDiffusion\n    description: |\n      Kernel for thermo-diffusion (Soret effect, thermophoresis, etc.)\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: gas_constant\n      required: No\n      default: !!str 8.31446\n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant\n    - name: heat_of_transport\n      required: No\n      default: !!str heat_of_transport\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Property name for the heat of transport.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mass_diffusivity\n      required: No\n      default: !!str mass_diffusivity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Property name for the diffusivity.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled temperature\n    - name: type\n      required: No\n      default: !!str ThermoDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/TimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/UserForcingFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str UserForcingFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n- name: /Materials\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Materials/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Materials/AbaqusCreepMaterial\n    description: |\n      \n    parameters:\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: integration_flag\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The creep integration method: Explicit = 0 and Implicit = 1\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: num_state_vars\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The number of state variables this CREEP routine will use\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: plugin\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        The path to the compiled dynamic library for the plugin you want to use (without -opt.plugin or -dbg.plugin)\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poissons Ratio\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: routine_flag\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The flag determining when the routine is called: Start of increment = 0 and End of Increment = 1\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: solve_definition\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Creep/Swell Explicit/Implicit Integration Definition to use: 1 - 5\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str AbaqusCreepMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s Modulus\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/AbaqusUmatMaterial\n    description: |\n      \n    parameters:\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: mechanical_constants\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Mechanical Material Properties\n    - name: num_state_vars\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of state variables this UMAT is going to use\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: plugin\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        The path to the compiled dynamic library for the plugin you want to use\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_constants\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Thermal Material Properties\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str AbaqusUmatMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/AnisoHeatConductionMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specific_heat\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specific heat value\n    - name: specific_heat_temperature_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Specific heat as a function of temperature.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_conductivity_x\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal conductivity in the x direction\n    - name: thermal_conductivity_x_pp\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The thermal conductivity PP name in the x direction\n    - name: thermal_conductivity_y\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal conductivity in the y direction\n    - name: thermal_conductivity_y_pp\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The thermal conductivity PP name in the y direction\n    - name: thermal_conductivity_z\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal conductivity in the z direction\n    - name: thermal_conductivity_z_pp\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The thermal conductivity PP name in the z direction\n    - name: type\n      required: No\n      default: !!str AnisoHeatConductionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/BarrierFunctionMaterial\n    description: |\n      Helper material to provide g(eta) and its derivative in a polynomial.\\nSIMPLE: eta^2*(1-eta)^2\\nLOW: eta*(1-eta)\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eta\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter variable\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for f(eta), i.e. \'h\' or \'g\'\n    - name: g_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE LOW\n      description: |\n        Polynomial order of the barrier function g(eta)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BarrierFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: well_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n    subblocks:\n  - name: /Materials/CLSHPlasticMaterial\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: c_alpha\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        creep constant\n    - name: c_beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        creep constant\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: hardening_constant\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Hardening slope\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information when a step fails\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str CLSHPlasticMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The point at which plastic strain begins accumulating\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/CLSHPlasticModel\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c_alpha\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        creep constant\n    - name: c_beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        creep constant\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: hardening_constant\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Hardening slope\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str CLSHPlasticModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The point at which plastic strain begins accumulating\n    subblocks:\n  - name: /Materials/CombinedCreepPlasticity\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for combined submodel iteration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of submodel iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output submodel iteration information\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for combined submodel iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: submodels\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        List of submodel ConstitutiveModels\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str CombinedCreepPlasticity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/CompositeElasticityTensor\n    description: |\n      Assemble an elasticity tensor from multiple tensor contributions weighted by material properties\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the prefactor\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component tensors\n    - name: type\n      required: No\n      default: !!str CompositeElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: weights\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component weights\n    subblocks:\n  - name: /Materials/CompositeMobilityTensor\n    description: |\n      Assemble a mobility tensor from multiple tensor contributions weighted by material properties\n    parameters:\n    - name: M_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the mobility tensor property to generate\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the prefactor\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component tensors\n    - name: type\n      required: No\n      default: !!str CompositeMobilityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: weights\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component weights\n    subblocks:\n  - name: /Materials/ComputeAxisymmetricRZFiniteStrain\n    description: |\n      Compute a strain increment and rotation increment for finite strains under axisymmetric assumptions.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetricRZFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeAxisymmetricRZSmallStrain\n    description: |\n      Compute a small strain in an Axisymmetric geometry\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetricRZSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeConcentrationDependentElasticityTensor\n    description: |\n      Compute concentration dependent elasticity tensor.\n    parameters:\n    - name: C0_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for zero concentration phase\n    - name: C1_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for phase having concentration 1.0\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method0\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: fill_method1\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeConcentrationDependentElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeEigenstrain\n    description: |\n      Computes a constant Eigenstrain\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigen_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of values defining the constant base tensor for the Eigenstrain\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the StressFreestrain be in incremental form for finite strain methods?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining the variable dependence\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeElasticityTensor\n    description: |\n      Compute an elasticity tensor.\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeFiniteStrain\n    description: |\n      Compute a strain increment and rotation increment for finite strains.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str ComputeFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeFiniteStrainElasticStress\n    description: |\n      Compute stress using elasticity for finite strains\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeFiniteStrainElasticStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeIncrementalSmallStrain\n    description: |\n      Compute a strain increment and rotation increment for small strains.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str ComputeIncrementalSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeIsotropicElasticityTensor\n    description: |\n      Compute an isotropic elasticity tensor.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first constant for the material.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: type\n      required: No\n      default: !!str ComputeIsotropicElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /Materials/ComputeLinearElasticStress\n    description: |\n      Compute stress using elasticity for small strains\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeLinearElasticStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeMultiPlasticityStress\n    description: |\n      Material for multi-surface finite-strain plasticity\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: deactivation_scheme\n      required: No\n      default: !!str optimized\n      cpp_type: MooseEnum\n      group_name: \n      options: optimized safe dumb optimized_to_safe safe_to_dumb optimized_to_safe_to_dumb optimized_to_dumb\n      description: |\n        Scheme by which constraints are deactivated.  (NOTE: This is irrelevant if there is only one yield surface.)  safe: return to the yield surface and then deactivate constraints with negative plasticity multipliers.  optimized: deactivate a constraint as soon as its plasticity multiplier becomes negative.  dumb: iteratively try all combinations of active constraints until the solution is found.  You may specify fall-back options.  Eg optimized_to_safe: first use \'optimized\', and if that fails, try the return with \'safe\'.\n    - name: debug_fspb\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        Debug parameter for use by developers when creating new plasticity models, not for general use.  2 = debug Jacobian entries, 3 = check the entire Jacobian, and check Ax=b\n    - name: debug_intnl_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug finite differencing parameters for the internal parameters\n    - name: debug_jac_at_intnl\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug Jacobian entries at these internal parameters\n    - name: debug_jac_at_pm\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug Jacobian entries at these plastic multipliers\n    - name: debug_jac_at_stress\n      required: No\n      default: !!str (xx,xy,xz)=(       0,        0,        0) (yx,yy,yz)=(       0,        0,        0) (zx,zy,zz)=(       0,        0,        0) \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        Debug Jacobian entries at this stress.  For use by developers\n    - name: debug_pm_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug finite differencing parameters for the plastic multipliers\n    - name: debug_stress_change\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Debug finite differencing parameter for the stress\n    - name: ep_plastic_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the plastic strain increment constraints have L2 norm less than this.\n    - name: ignore_failures\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        The return-map algorithm will return with the best admissible stresses and internal parameters that it can, even if they don\'t fully correspond to the applied strain increment.  To speed computations, this flag can be set to true, the max_NR_iterations set small, and the min_stepsize large.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: linear_dependent\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        Flow directions are considered linearly dependent if the smallest singular value is less than linear_dependent times the largest singular value\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed\n    - name: max_stepsize_for_dumb\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        If your deactivation_scheme is \'something_to_dumb\', then \'dumb\' will only be used if the stepsize falls below this value.  This parameter is useful because the \'dumb\' scheme is computationally expensive\n    - name: min_stepsize\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        If ordinary Newton-Raphson + line-search fails, then the applied strain increment is subdivided, and the return-map is tried again.  This parameter is the minimum fraction of applied strain increment that may be applied before the algorithm gives up entirely\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: plastic_models\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the plastic models that could be active for this material.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specialIC\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: none rock joint\n      description: |\n        For certain combinations of plastic models, the set of active constraints can be initialized optimally.  \'none\': no special initialization is performed.  For all other choices, the plastic_models must be chosen to have the following types.  \'rock\': \'TensileMulti MohrCoulombMulti\'.  \'joint\': \'WeakPlaneTensile WeakPlaneShear\'.\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tangent_operator\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: elastic linear nonlinear\n      description: |\n        Type of tangent operator to return.  \'elastic\': return the elasticity tensor.  \'linear\': return the consistent tangent operator that is correct for plasticity with yield functions linear in stress.  \'nonlinear\': return the full, general consistent tangent operator.  The calculations assume the hardening potentials are independent of stress and hardening parameters.\n    - name: transverse_direction\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        If this parameter is provided, before the return-map algorithm is called a rotation is performed so that the \'z\' axis in the new frame lies along the transverse_direction in the original frame.  After returning, the inverse rotation is performed.  The transverse_direction will itself rotate with large strains.  This is so that transversely-isotropic plasticity models may be easily defined in the frame where the isotropy holds in the x-y plane.\n    - name: type\n      required: No\n      default: !!str ComputeMultiPlasticityStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputePlaneFiniteStrain\n    description: |\n      Compute a strain increment and rotation increment for finite strains under axisymmetric assumptions.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str ComputePlaneFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputePlaneSmallStrain\n    description: |\n      Compute a small strain under traditional plane strain assumptions where the out of plane strain is zero.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str ComputePlaneSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputePolycrystalElasticityTensor\n    description: |\n      Compute an evolving elasticity tensor coupled to a grain growth phase field model.\n    parameters:\n    - name: Elastic_constants\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector containing elastic constants for fill method\n    - name: GrainTracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of initial grains that will be modeled\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Lengthscale of the problem, in meters\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pressure_scale\n      required: No\n      default: !!str 1e+06\n      cpp_type: double\n      group_name: \n      description: |\n        Pressure scale of the problem, in pa\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stiffness_buffer\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of extra elastic stiffnesses that are created to handle new grains\n    - name: type\n      required: No\n      default: !!str ComputePolycrystalElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /Materials/ComputeSmallStrain\n    description: |\n      Compute a small strain.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str ComputeSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeVariableEigenstrain\n    description: |\n      Computes an Eigenstrain and its derivatives that is a function of multiple variables, where the prefactor is defined in a derivative material\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the prefactor\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigen_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of values defining the constant base tensor for the Eigenstrain\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the StressFreestrain be in incremental form for finite strain methods?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining the variable dependence\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeVariableEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ConstantAnisotropicMobility\n    description: |\n      Provide a constant mobility tensor value\n    parameters:\n    - name: M_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the mobility tensor porperty to generate\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tensor values\n    - name: type\n      required: No\n      default: !!str ConstantAnisotropicMobility\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/CosseratLinearElasticMaterial\n    description: |\n      \n    parameters:\n    - name: B_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Flexural bending rigidity tensor.  Should have 9 entries.\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: T\n      required: No\n      default: !!str 300\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: T0\n      required: No\n      default: !!str 300\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: applied_strain_vector\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Applied strain: e11, e22, e33, e23, e13, e12\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: fill_method_bending\n      required: No\n      default: !!str antisymmetric_isotropic\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method for the \'bending\' tensor.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str CosseratLinearElasticMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: wc_x\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Cosserat rotation around x axis\n    - name: wc_y\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Cosserat rotation around y axis\n    - name: wc_z\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Cosserat rotation around z axis\n    subblocks:\n  - name: /Materials/CrossTermBarrierFunctionMaterial\n    description: |\n      \n    parameters:\n    - name: W_ij\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for g(eta_i)\n    - name: g_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE\n      description: |\n        Polynomial order of the switching function h(eta)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrossTermBarrierFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DarcyMaterial\n    description: |\n      Material that holds the permeability tensor used in Darcy flow\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: mat_permeability\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        The permeability tensor (usually in m^2).\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DarcyMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/Density\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Density\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Density\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DerivativeMultiPhaseMaterial\n    description: |\n      Two phase material that combines n phase materials using a switching function with and n nonconserved order parameters (to be used with SwitchingFunctionConstraint*).\n    parameters:\n    - name: W\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Energy barrier for the phase transformation from A to B\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of the fi free energies - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameters for all phases.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fi_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of free energies for the n phases\n    - name: g\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Barrier Function Material that provides g(eta_i)\n    - name: hi_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DerivativeMultiPhaseMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DerivativeParsedMaterial\n    description: |\n      Parsed Function Material with automatic derivatives.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of F() - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        FParser function expression for the phase free energy\n    - name: material_property_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of material properties used in the parsed function\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: tol_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n    - name: tol_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of tolerance values for the variables in tol_names\n    - name: type\n      required: No\n      default: !!str DerivativeParsedMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DerivativeSumMaterial\n    description: |\n      Meta-material to sum up multiple derivative materials\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of the free energy functions being summed - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: Advanced\n      description: |\n        Constant to be added to the prefactor multiplied sum.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Advanced\n      description: |\n        Prefactor to multiply the sum term with.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sum_materials\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DerivativeSumMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DerivativeTwoPhaseMaterial\n    description: |\n      Two phase material that combines two single phase materials using a switching function.\n    parameters:\n    - name: W\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Energy barrier for the phase transformation from A to B\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of fa and fb - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: eta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Phase A material (at eta=0)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Phase A material (at eta=1)\n    - name: g\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Barrier Function Material that provides g(eta)\n    - name: h\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Switching Function Material that provides h(eta)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DerivativeTwoPhaseMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DiscreteNucleation\n    description: |\n      Free energy contribution for nucleating discrete particles\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: map\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        DiscreteNucleationMap user object\n    - name: op_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables to force to a target concentration value\n    - name: op_values\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of target concentration values\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: penalty\n      required: No\n      default: !!str 20\n      cpp_type: double\n      group_name: \n      description: |\n        Penalty factor for enforcing the target concentrations\n    - name: penalty_mode\n      required: No\n      default: !!str MATCH\n      cpp_type: MooseEnum\n      group_name: \n      options: MATCH MIN MAX\n      description: |\n        Match the target concentration or take it as a minimum or maximum concentration target\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DiscreteNucleation\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/Elastic\n    description: |\n      \n    parameters:\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str Elastic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/ElasticEnergyMaterial\n    description: |\n      Free energy material for the elastic energy contributions.\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of F() - use vector coupling\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str ElasticEnergyMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ElasticModel\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str ElasticModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ElementPropertyReadFileTest\n    description: |\n      Material class to test ElementPropertyReadFile User Object\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: read_prop_user_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: type\n      required: No\n      default: !!str ElementPropertyReadFileTest\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ExternalForceDensityMaterial\n    description: |\n      Providing external applied force density to grains\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order parameters\n    - name: force_x\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function in x direction.\n    - name: force_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function in y direction.\n    - name: force_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function in z direction.\n    - name: k\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        stiffness constant multiplier\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ExternalForceDensityMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/FiniteStrainCPSlipRateRes\n    description: |\n      Crystal Plasticity base class: FCC system with power law flow rule implemented\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: abs_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue absolute tolerance\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: flowprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Parameters used in slip rate equations\n    - name: gen_random_stress_flag\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to generate random stress to perform time cutback on constitutive failure\n    - name: gprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Initial values of slip system resistances\n    - name: gtol\n      required: No\n      default: !!str 100\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive slip system resistance residual tolerance\n    - name: hprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Hardening properties\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: input_random_scaling_var\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n    - name: intvar_read_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: slip_sys_file slip_sys_res_file none\n      description: |\n        Read from options for initial value of internal variables: Default from .i file\n    - name: line_search_maxiter\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Line search bisection method maximum number of iteration\n    - name: line_search_method\n      required: No\n      default: !!str CUT_HALF\n      cpp_type: MooseEnum\n      group_name: \n      options: CUT_HALF BISECTION\n      description: |\n        The method used in line search\n    - name: line_search_tol\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Line search bisection method tolerance\n    - name: maximum_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiter\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for stress update\n    - name: maxitergss\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for slip system resistance update\n    - name: min_line_search_step_size\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum line search step size\n    - name: nss\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        Number of slip systems\n    - name: num_slip_sys_flowrate_props\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of flow rate properties for a slip system\n    - name: num_slip_sys_props\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of slip system specific properties provided in the file containing slip system normals and directions\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: random_scaling_var\n      required: No\n      default: !!str 1e+09\n      cpp_type: double\n      group_name: \n      description: |\n        Random scaling variable: Large value can cause non-positive definiteness\n    - name: random_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Random integer used to generate random stress when constitutive failure occurs\n    - name: read_prop_user_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n    - name: rtol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue relative tolerance\n    - name: save_euler_angle\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Saves the Euler angles as Material Property if true\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: slip_incr_tol\n      required: No\n      default: !!str 0.02\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum allowable slip in an increment\n    - name: slip_sys_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the slip system\n    - name: slip_sys_flow_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of slip rate equation parameters\n    - name: slip_sys_hard_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of hardness evolution parameters\n    - name: slip_sys_res_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the initial values of slip system resistances\n    - name: tan_mod_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: exact none\n      description: |\n        Type of tangent moduli for preconditioner: default elastic\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: type\n      required: No\n      default: !!str FiniteStrainCPSlipRateRes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_line_search\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use line search in constitutive update\n    subblocks:\n  - name: /Materials/FiniteStrainCrystalPlasticity\n    description: |\n      Crystal Plasticity base class: FCC system with power law flow rule implemented\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: abs_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue absolute tolerance\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: flowprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Parameters used in slip rate equations\n    - name: gen_random_stress_flag\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to generate random stress to perform time cutback on constitutive failure\n    - name: gprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Initial values of slip system resistances\n    - name: gtol\n      required: No\n      default: !!str 100\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive slip system resistance residual tolerance\n    - name: hprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Hardening properties\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: input_random_scaling_var\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n    - name: intvar_read_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: slip_sys_file slip_sys_res_file none\n      description: |\n        Read from options for initial value of internal variables: Default from .i file\n    - name: line_search_maxiter\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Line search bisection method maximum number of iteration\n    - name: line_search_method\n      required: No\n      default: !!str CUT_HALF\n      cpp_type: MooseEnum\n      group_name: \n      options: CUT_HALF BISECTION\n      description: |\n        The method used in line search\n    - name: line_search_tol\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Line search bisection method tolerance\n    - name: maximum_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiter\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for stress update\n    - name: maxitergss\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for slip system resistance update\n    - name: min_line_search_step_size\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum line search step size\n    - name: nss\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        Number of slip systems\n    - name: num_slip_sys_flowrate_props\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of flow rate properties for a slip system\n    - name: num_slip_sys_props\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of slip system specific properties provided in the file containing slip system normals and directions\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: random_scaling_var\n      required: No\n      default: !!str 1e+09\n      cpp_type: double\n      group_name: \n      description: |\n        Random scaling variable: Large value can cause non-positive definiteness\n    - name: random_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Random integer used to generate random stress when constitutive failure occurs\n    - name: read_prop_user_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n    - name: rtol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue relative tolerance\n    - name: save_euler_angle\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Saves the Euler angles as Material Property if true\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: slip_incr_tol\n      required: No\n      default: !!str 0.02\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum allowable slip in an increment\n    - name: slip_sys_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the slip system\n    - name: slip_sys_flow_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of slip rate equation parameters\n    - name: slip_sys_hard_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of hardness evolution parameters\n    - name: slip_sys_res_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the initial values of slip system resistances\n    - name: tan_mod_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: exact none\n      description: |\n        Type of tangent moduli for preconditioner: default elastic\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: type\n      required: No\n      default: !!str FiniteStrainCrystalPlasticity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_line_search\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use line search in constitutive update\n    subblocks:\n  - name: /Materials/FiniteStrainElasticMaterial\n    description: |\n      Computes incremental strain and deformation gradient for finite deformation\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: type\n      required: No\n      default: !!str FiniteStrainElasticMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/FiniteStrainHyperElasticViscoPlastic\n    description: |\n      Material class for hyper-elastic visco-platic flow: Can handle multiple flow models defined by flowratemodel type user objects\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: flow_rate_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes flow rate and derivatives\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: internal_var_rate_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes internal variable rates and derivatives\n    - name: internal_var_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that integrates internal variables and computes derivatives\n    - name: max_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiters\n      required: No\n      default: !!str 50\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iteration for flow rate update\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: resid_abs_tol\n      required: No\n      default: !!str 1e-10\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute Tolerance for flow rate residual equation\n    - name: resid_rel_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Relative Tolerance for flow rate residual equation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: strength_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes strength variables and derivatives\n    - name: type\n      required: No\n      default: !!str FiniteStrainHyperElasticViscoPlastic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/FiniteStrainMohrCoulomb\n    description: |\n      Non-associative Mohr-Coulomb plasticity with hardening/softening\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: debug_fspb\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        Debug parameter for use by developers when creating new plasticity models, not for general use.  2 = debug Jacobian entries, 3 = check the entire Jacobian\n    - name: debug_intnl_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug finite differencing parameters for the internal parameters\n    - name: debug_jac_at_intnl\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug Jacobian entries at these internal parameters\n    - name: debug_jac_at_pm\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug Jacobian entries at these plastic multipliers\n    - name: debug_jac_at_stress\n      required: No\n      default: !!str (xx,xy,xz)=(       0,        0,        0) (yx,yy,yz)=(       0,        0,        0) (zx,zy,zz)=(       0,        0,        0) \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        Debug Jacobian entries at this stress.  For use by developers\n    - name: debug_pm_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug finite differencing parameters for the plastic multipliers\n    - name: debug_stress_change\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Debug finite differencing parameter for the stress\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: ep_plastic_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the plastic strain increment constraints have L2 norm less than this.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: internal_constraint_tolerance\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.  A vector of tolerances must be entered for the case with more than one internal parameter\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed\n    - name: max_subdivisions\n      required: No\n      default: !!str 4096\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        If ordinary Newton-Raphson + line-search fails, then the applied strain increment is subdivided, and the return-map is tried again.  This parameter is the maximum number of subdivisions allowed.  The number of subdivisions tried increases exponentially, first 1, then 2, then 4, then 8, etc\n    - name: mc_cohesion\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mohr-Coulomb cohesion\n    - name: mc_cohesion_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Cohesion = mc_cohesion_residual + (mc_cohesion - mc_cohesion_residual)*exp(-mc_cohesion_rate*plasticstrain).  Set to zero for perfect plasticity\n    - name: mc_cohesion_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mohr-Coulomb cohesion at infinite hardening.  If not given, this defaults to mc_cohesion, ie, perfect plasticity\n    - name: mc_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mohr-Coulomb dilation angle in degrees.  For associative flow use dilation_angle = friction_angle.  Should not be less than friction angle.\n    - name: mc_dilation_angle_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        dilation_angle = mc_dilation_angle_residual + (mc_dilation_angle - mc_dilation_angle_residual)*exp(-mc_dilation_angle_rate*plasticstrain).  Set to zero for perfect plasticity\n    - name: mc_dilation_angle_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mohr-Coulomb dilation angle in degrees at infinite hardening.  If not given, this defaults to mc_dilation_angle, ie, perfect plasticity\n    - name: mc_edge_smoother\n      required: No\n      default: !!str 25\n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the edges of the cone are smoothed by the given amount.\n    - name: mc_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mohr-Coulomb friction angle in degrees\n    - name: mc_friction_angle_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        friction_angle = mc_friction_angle_residual + (mc_friction_angle - mc_friction_angle_residual)*exp(-mc_friction_angle_rate*plasticstrain).  Set to zero for perfect plasticity\n    - name: mc_friction_angle_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mohr-Coulomb friction angle in degrees at infinite hardening.  If not given, this defaults to mc_friction_angle, ie, perfect plasticity\n    - name: mc_lode_cutoff\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n    - name: mc_tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the cone vertex at mean = cohesion*cot(friction_angle), will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: type\n      required: No\n      default: !!str FiniteStrainMohrCoulomb\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameters) are deemed admissible.  A vector of tolerances must be entered for the multi-surface case\n    subblocks:\n  - name: /Materials/FiniteStrainPlasticMaterial\n    description: |\n      Associative J2 plasticity with isotropic hardening.\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: eptol\n      required: No\n      default: !!str 1e-07\n      cpp_type: double\n      group_name: \n      description: |\n        Equivalent plastic strain NR tolerance\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: ftol\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        Consistency condition NR tolerance\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rtol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Plastic strain NR tolerance\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: type\n      required: No\n      default: !!str FiniteStrainPlasticMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Input data as pairs of equivalent plastic strain and yield stress: Should start with equivalent plastic strain 0\n    subblocks:\n  - name: /Materials/FiniteStrainRatePlasticMaterial\n    description: |\n      Associative rate dependent J2 plasticity with isotropic hardening: Overstress based on Perzyna model\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: eptol\n      required: No\n      default: !!str 1e-07\n      cpp_type: double\n      group_name: \n      description: |\n        Equivalent plastic strain NR tolerance\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent for rate dependent plasticity (Perzyna)\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: ftol\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        Consistency condition NR tolerance\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: ref_pe_rate\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference plastic strain rate parameter for rate dependent plasticity (Overstress model)\n    - name: rtol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Plastic strain NR tolerance\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: type\n      required: No\n      default: !!str FiniteStrainRatePlasticMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Input data as pairs of equivalent plastic strain and yield stress: Should start with equivalent plastic strain 0\n    subblocks:\n  - name: /Materials/ForceDensityMaterial\n    description: |\n      Calculating the force density acting on a grain\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: ceq\n      required: No\n      default: !!str 0.9816\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium density\n    - name: cgb\n      required: No\n      default: !!str 0.25\n      cpp_type: double\n      group_name: \n      description: |\n        Thresold Concentration for GB\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order parameters\n    - name: k\n      required: No\n      default: !!str 100\n      cpp_type: double\n      group_name: \n      description: |\n        stiffness constant\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ForceDensityMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GBAnisotropy\n    description: |\n      \n    parameters:\n    - name: Anisotropic_GB_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n    - name: T\n      required: No\n      default: !!str 300\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: delta_mob\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        factor determining inclination dependence of GB mobility\n    - name: delta_sigma\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        factor determining inclination dependence of GB energy\n    - name: inclination_anisotropy\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        The GB anisotropy ininclination would be considered if true\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Length scale in m, where default is nm\n    - name: molar_volume_value\n      required: No\n      default: !!str 7.11e-06\n      cpp_type: double\n      group_name: \n      description: |\n        molar volume of material in m^3/mol, by defaults it\'s the value of copper\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Time scale in s, where default is ns\n    - name: type\n      required: No\n      default: !!str GBAnisotropy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: wGB\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Diffuse GB width in nm \n    subblocks:\n  - name: /Materials/GBEvolution\n    description: |\n      \n    parameters:\n    - name: GBMobility\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n    - name: GBenergy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary energy in J/m^2\n    - name: GBmob0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary mobility prefactor in m^4/(J*s)\n    - name: Q\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary migration activation energy in eV\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: f0s\n      required: No\n      default: !!str 0.125\n      cpp_type: double\n      group_name: \n      description: |\n        The GB energy constant \n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Length scale in m, where default is nm\n    - name: molar_volume\n      required: No\n      default: !!str 2.462e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Molar volume in m^3/mol, needed for temperature gradient driving force\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Time scale in s, where default is ns\n    - name: type\n      required: No\n      default: !!str GBEvolution\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: wGB\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Diffuse GB width in nm \n    subblocks:\n  - name: /Materials/GapConductance\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coord_type\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default XYZ\n      description: |\n        Gap calculation type (default or XYZ).\n    - name: emissivity_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The emissivity of the fuel surface\n    - name: emissivity_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The emissivity of the cladding surface\n    - name: gap_conductivity\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The thermal conductivity of the gap material\n    - name: gap_conductivity_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal conductivity of the gap material as a function.  Multiplied by gap_conductivity.\n    - name: gap_conductivity_function_variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable to be used in the gap_conductivity_function in place of time\n    - name: gap_distance\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Distance across the gap\n    - name: gap_temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature on the other side of the gap\n    - name: max_gap\n      required: No\n      default: !!str 1e+06\n      cpp_type: double\n      group_name: \n      description: |\n        A maximum gap (denominator) size\n    - name: min_gap\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        A minimum gap (denominator) size\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: paired_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quadrature\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to do quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp should NOT be provided (and will be ignored); however, paired_boundary and variable are then required.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stefan_boltzmann\n      required: No\n      default: !!str 5.669e-08\n      cpp_type: double\n      group_name: \n      description: |\n        The Stefan-Boltzmann constant\n    - name: type\n      required: No\n      default: !!str GapConductance\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature variable\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /Materials/GenericConstantMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prop_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the properties this material will have\n    - name: prop_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The values associated with the named properties\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GenericConstantMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GenericFunctionMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable_stateful\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable the declaration of old and older values\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prop_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the properties this material will have\n    - name: prop_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The corresponding names of the functions that are going to provide the values for the variables\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GenericFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GrainAdvectionVelocity\n    description: |\n      Calculation the advection velocity of grain due to rigid vody translation and rotation\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define type of force density under consideration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of other coupled order parameters\n    - name: grain_data\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting volume and center of mass of grains\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting force and torque acting on grains\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: translation_constant\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain translation\n    - name: type\n      required: No\n      default: !!str GrainAdvectionVelocity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/HeatConductionMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: specific_heat\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The specific heat value\n    - name: specific_heat_temperature_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Specific heat as a function of temperature.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_conductivity\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal conductivity value\n    - name: thermal_conductivity_temperature_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal conductivity as a function of temperature.\n    - name: type\n      required: No\n      default: !!str HeatConductionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/HfAlBulkMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature\n    - name: type\n      required: No\n      default: !!str HfAlBulkMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/HfAlMaterial\n    description: |\n      \n    parameters:\n    - name: RGB_aux_variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        RGB_aux_variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature\n    - name: type\n      required: No\n      default: !!str HfAlMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/InteractionIntegralAuxFields\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front to calculate auxiliary fields at\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sif_modes\n      required: Yes\n      default: !!str KI \n      cpp_type: std::vector<MooseEnum, std::allocator<MooseEnum> >\n      group_name: \n      options: KI KII KIII T\n      description: |\n        Stress intensity factor to calculate. Choices are: KI KII KIII T\n    - name: type\n      required: No\n      default: !!str InteractionIntegralAuxFields\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /Materials/InterfaceOrientationMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str InterfaceOrientationMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/IsotropicPlasticity\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: hardening_constant\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Hardening slope\n    - name: hardening_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        True stress as a function of plastic strain\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information when a step fails\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str IsotropicPlasticity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The point at which plastic strain begins accumulating\n    subblocks:\n  - name: /Materials/KKSXeVacSolidMaterial\n    description: |\n      KKS Solid phase free energy for Xe,Vac in UO2.  Fm(cmg,cmv)\n    parameters:\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Temperature in [K]\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cmg\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Gas concnetration\n    - name: cmv\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vacancy concnetration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str KKSXeVacSolidMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/LangmuirMaterial\n    description: |\n      Material type that holds info regarding Langmuir desorption from matrix to porespace and viceversa\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: conc_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The concentration of gas variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: langmuir_density\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        This is (Langmuir volume)*(density of gas at standard temp and pressure).  Langmuir volume is measured in (gas volume)/(matrix volume).  (Methane density(101kPa, 20degC) = 0.655kg/m^3.  Methane density(101kPa, 0degC) = 0.715kg/m^3.)  Units [kg/m^3]\n    - name: langmuir_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Langmuir pressure.  Units Pa\n    - name: one_over_adsorption_time_const\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Time constant for Langmuir adsorption (gas moving from porespace to matrix).  Units [s].\n    - name: one_over_desorption_time_const\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Time constant for Langmuir desorption (gas moving from matrix to porespace).  Units [s]\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The gas porepressure variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LangmuirMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/LinearAnisotropicMaterial\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable that zeros out the stiffness\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: material_constant_c11\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Material modulus C11\n    - name: material_constant_c12\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Material modulus C12\n    - name: material_constant_c44\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Material modulus C44\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s Ratio\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: t_ref\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The reference temperature at which this material has zero strain.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature if you want thermal expansion.\n    - name: thermal_expansion\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: type\n      required: No\n      default: !!str LinearAnisotropicMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s Modulus\n    subblocks:\n  - name: /Materials/LinearElasticMaterial\n    description: |\n      \n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: T\n      required: No\n      default: !!str 300\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: T0\n      required: No\n      default: !!str 300\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: applied_strain_vector\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Applied strain: e11, e22, e33, e23, e13, e12\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str LinearElasticMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/LinearElasticityMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: lambda\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: t_ref\n      required: No\n      default: !!str 300\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str LinearElasticityMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/LinearGeneralAnisotropicMaterial\n    description: |\n      \n    parameters:\n    - name: C_matrix\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for matrix\n    - name: all_21\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        True if all 21 independent values are given; else false indicates only 9 values given (C11, C12, C13, C22, C23, C33, C44, C55, C66.\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable that zeros out the stiffness\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature if you want thermal expansion.\n    - name: type\n      required: No\n      default: !!str LinearGeneralAnisotropicMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/LinearIsoElasticPFDamage\n    description: |\n      Phase-field fracture model energy contribution to damage growth-isotropic elasticity and undamaged stress under compressive strain\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter for damage\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: kdamage\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Stiffness of damaged matrix\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str LinearIsoElasticPFDamage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/LinearIsotropicMaterial\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable that zeros out the stiffness\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s Ratio\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: t_ref\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The reference temperature at which this material has zero strain.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature if you want thermal expansion.\n    - name: thermal_expansion\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: type\n      required: No\n      default: !!str LinearIsotropicMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s Modulus\n    subblocks:\n  - name: /Materials/LinearStrainHardening\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: hardening_constant\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Hardening slope\n    - name: hardening_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        True stress as a function of plastic strain\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: max_its\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information when a step fails\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str LinearStrainHardening\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The point at which plastic strain begins accumulating\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/MacroElastic\n    description: |\n      \n    parameters:\n    - name: C1111\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C1111 value\n    - name: C1122\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C1122 value\n    - name: C1133\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C1133 value\n    - name: C1212\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C1212 value\n    - name: C2222\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C2222 value\n    - name: C2233\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C2233 value\n    - name: C2323\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C2323 value\n    - name: C3131\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C3131 value\n    - name: C3333\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor associated with the C3333 value\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str MacroElastic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/MathEBFreeEnergy\n    description: |\n      Material that implements the math free energy using the expression builder and automatric differentiation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str MathEBFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/MathFreeEnergy\n    description: |\n      Material that implements the math free energy and its derivatives: \\nF = 1/4(1 + c)^2*(1 - c)^2\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str MathFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/MollifiedLangmuirMaterial\n    description: |\n      Material type that holds info regarding MollifiedLangmuir desorption from matrix to porespace and viceversa\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: conc_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The concentration of gas variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: langmuir_density\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        This is (Langmuir volume)*(density of gas at standard temp and pressure).  Langmuir volume is measured in (gas volume)/(matrix volume).  (Methane density(101kPa, 20degC) = 0.655kg/m^3.  Methane density(101kPa, 0degC) = 0.715kg/m^3.)  Units [kg/m^3]\n    - name: langmuir_pressure\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Langmuir pressure.  Units Pa\n    - name: mollifier\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The reciprocal of time constants will be one_over_time_const*tanh( |conc_var - equilib_conc|/(mollifier*langmuir_density)).  So for mollifier very small you will get a stepchange between desorption and adsorption, but for mollifier bigger you will be a gradual change\n    - name: one_over_adsorption_time_const\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Time constant for Langmuir adsorption (gas moving from porespace to matrix).  Units [s].\n    - name: one_over_desorption_time_const\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Time constant for Langmuir desorption (gas moving from matrix to porespace).  Units [s]\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pressure_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The gas porepressure variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MollifiedLangmuirMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/MultiBarrierFunctionMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for g(eta_i)\n    - name: g_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE\n      description: |\n        Polynomial order of the switching function h(eta)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MultiBarrierFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: well_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n    subblocks:\n  - name: /Materials/MultiPhaseStressMaterial\n    description: |\n      Compute a global stress form multiple phase stresses\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the computed global stress (optional)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: h\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: phase_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Base names for the Phase strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MultiPhaseStressMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFCRFFMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCRFFMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFCTradMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: order\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        This is the order of the polynomial used for correlation function\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCTradMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFFracBulkRateMaterial\n    description: |\n      Material properties used in phase-field fracture damage evolution kernel\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing energy release rate type parameter distribution\n    - name: gc\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Energy release rate type parameter\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFracBulkRateMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFParamsPolyFreeEnergy\n    description: |\n      Phase field parameters for polynomial free energy for single component systems\n    parameters:\n    - name: D0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Diffusivity prefactor for vacancies in m^2/s\n    - name: Ef\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Formation energy in eV\n    - name: Em\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Migration energy in eV\n    - name: T\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature variable in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: int_width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of void surface in the lengthscale of the problem\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        defines the base length scale of the problem in m\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polynomial_order\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: 4 6 8\n      description: |\n        Order of polynomial free energy\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: surface_energy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Surface energy in J/m2\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        defines the base time scale of the problem\n    - name: type\n      required: No\n      default: !!str PFParamsPolyFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PLC_LSH\n    description: |\n      \n    parameters:\n    - name: absolute_stress_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Convergence tolerance for combined plasticity-creep stress iteration\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: activation_energy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Leading coefficent in power-law equation\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: gas_constant\n      required: No\n      default: !!str 8.3143\n      cpp_type: double\n      group_name: \n      description: |\n        Universal gas constant\n    - name: hardening_constant\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Hardening slope\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: m_exponent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on time in power-law equation\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: n_exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on effective stress in power-law equation\n    - name: output\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The reporting postprocessor to use for the max_iterations value.\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str PLC_LSH\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The point at which plastic strain begins accumulating\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/ParsedMaterial\n    description: |\n      Parsed Function Material.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of F() - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        FParser function expression for the phase free energy\n    - name: material_property_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of material properties used in the parsed function\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tol_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n    - name: tol_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of tolerance values for the variables in tol_names\n    - name: type\n      required: No\n      default: !!str ParsedMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PolynomialFreeEnergy\n    description: |\n      Polynomial free energy for single component systems\n    parameters:\n    - name: W_name\n      required: No\n      default: !!str barr_height\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the material property storing the barrier height\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: c_eq_name\n      required: No\n      default: !!str c_eq\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property storing the equilibrium concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polynomial_order\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: 4 6 8\n      description: |\n        Order of polynomial free energy\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str PolynomialFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PoroFullSatMaterial\n    description: |\n      This Material is designed to calculate and store all the quantities needed for the fluid-flow part of poromechanics, assuming a fully-saturated, single-phase fluid with constant bulk modulus\n    parameters:\n    - name: biot_coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Biot coefficient.  Eg, 0.9\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_porosity\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the porosity equal to porosity0 always\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: fluid_bulk_compliance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fluid bulk compliance (the reciprocal of the fluid bulk modulus)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: porepressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The porepressure\n    - name: porosity0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The porosity of the material when porepressure and volumetric strain are zero.  Eg, 0.1\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: solid_bulk_compliance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The solid bulk compliance (the reciprocal of the solid bulk modulus)\n    - name: type\n      required: No\n      default: !!str PoroFullSatMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PowerLawCreep\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: activation_energy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Leading coefficent in power-law equation\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: gas_constant\n      required: No\n      default: !!str 8.3143\n      cpp_type: double\n      group_name: \n      description: |\n        Universal gas constant\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: m_exponent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on time in power-law equation\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: max_its\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: n_exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on effective stress in power-law equation\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information when a step fails\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: start_time\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Start time (if not zero)\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str PowerLawCreep\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/PowerLawCreepModel\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: activation_energy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Leading coefficent in power-law equation\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: gas_constant\n      required: No\n      default: !!str 8.3143\n      cpp_type: double\n      group_name: \n      description: |\n        Universal gas constant\n    - name: m_exponent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on time in power-law equation\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: n_exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on effective stress in power-law equation\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information when a step fails\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: start_time\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Start time (if not zero)\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str PowerLawCreepModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/RateDepSmearCrackModel\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: exponent\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Power law exponent\n    - name: input_random_scaling_var\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to specify scaling parameter to generate random stress\n    - name: intvar_incr_tol\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        Allowable relative increment size for state variables\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: maxiter\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Constitutive update iteration\n    - name: nstate\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of state variables\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: random_scaling_var\n      required: No\n      default: !!str 1e+09\n      cpp_type: double\n      group_name: \n      description: |\n        Scaling value: Too large a value can cause non-positive definiteness - use 0.1 of young\'s modulus\n    - name: ref_damage_rate\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference damage rate\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: tol\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive update tolerance\n    - name: type\n      required: No\n      default: !!str RateDepSmearCrackModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: zero_tol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for zero\n    subblocks:\n  - name: /Materials/RateDepSmearIsoCrackModel\n    description: |\n      \n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-20\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for sub-newtion iteration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: critical_energy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Critical Energy\n    - name: exponent\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Power law exponent\n    - name: input_random_scaling_var\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to specify scaling parameter to generate random stress\n    - name: intvar_incr_tol\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        Allowable relative increment size for state variables\n    - name: k_fail\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Post failure stiffness\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of sub-newton iterations\n    - name: maxiter\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Constitutive update iteration\n    - name: nstate\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of state variables\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output sub-newton iteration information\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: random_scaling_var\n      required: No\n      default: !!str 1e+09\n      cpp_type: double\n      group_name: \n      description: |\n        Scaling value: Too large a value can cause non-positive definiteness - use 0.1 of young\'s modulus\n    - name: ref_damage_rate\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference damage rate\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for sub-newtion iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: tol\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive update tolerance\n    - name: type\n      required: No\n      default: !!str RateDepSmearIsoCrackModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper_limit_damage\n      required: No\n      default: !!str 5\n      cpp_type: double\n      group_name: \n      description: |\n        Upper limit of damage beyond which constitutive check is not performed\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: zero_tol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for zero\n    subblocks:\n  - name: /Materials/RichardsMaterial\n    description: |\n      \n    parameters:\n    - name: SUPG_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the SUPG\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the fluid density\n    - name: gravity\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Gravitational acceleration (m/s^2) as a vector pointing downwards.  Eg (0,0,-10)\n    - name: linear_shape_fcns\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If you are using second-order Lagrange shape functions you need to set this to false.\n    - name: mat_permeability\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        The permeability tensor (m^2).\n    - name: mat_porosity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The porosity of the material.  Should be between 0 and 1.  Eg, 0.1\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perm_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        A list of auxillary variable describing permeability changes.  There must be 9 of these, corresponding to the xx, xy, xz, yx, yy, yz, zx, zy, zz components respectively.  Permeability = mat_permeability*10^(perm_change).\n    - name: por_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        An auxillary variable describing porosity changes.  Porosity = mat_porosity + por_change.  If this is not provided, zero is used.\n    - name: relperm_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define relative permeability\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: sat_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define saturation as a function of effective saturation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: seff_UO\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of name of user objects that define effective saturation as a function of pressure list\n    - name: type\n      required: No\n      default: !!str RichardsMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: viscosity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of viscosity of fluids (Pa.s).  Typical value for water is=1E-3\n    subblocks:\n  - name: /Materials/SimpleEigenStrainMaterial\n    description: |\n      Compute a concentration dependent isotropic Eigenstrain\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: T\n      required: No\n      default: !!str 300\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: T0\n      required: No\n      default: !!str 300\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: applied_strain_vector\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Applied strain: e11, e22, e33, e23, e13, e12\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: c0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Initial concentration value\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: epsilon0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Initial eigen strain value\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general\n      description: |\n        The fill method\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature variable\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str SimpleEigenStrainMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/SolidModel\n    description: |\n      \n    parameters:\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: compute_JIntegral\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to compute the J Integral.\n    - name: constitutive_model\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        ConstitutiveModel to use (optional)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs.  Must be positive.\n    - name: cracking_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The cracking stress as a function of time and location\n    - name: dep_matl_props\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of material properties this material depends on.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: formulation\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n      description: |\n        Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n    - name: increment_calculation\n      required: No\n      default: !!str RashidApprox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial stress tensor (xx, yy, zz, xy, yz, zx)\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter for the material.\n    - name: large_strain\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: poissons_ratio_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Poisson\'s ratio as a function of temperature.\n    - name: scalar_strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain (scalar variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: store_stress_older\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n    - name: strain_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The zz strain\n    - name: stress_free_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The stress-free temperature.  If not specified, the initial temperature is used.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: thermal_expansion\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: thermal_expansion_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal expansion coefficient as a function of temperature.\n    - name: thermal_expansion_function_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: instantaneous mean\n      description: |\n        Type of thermal expansion function.  Choices are: instantaneous mean\n    - name: thermal_expansion_reference_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for mean thermal expansion function.\n    - name: type\n      required: No\n      default: !!str SolidModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    - name: youngs_modulus_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Young\'s modulus as a function of temperature.\n    subblocks:\n  - name: /Materials/StrainGradDispDerivatives\n    description: |\n      Provide the constant derivatives of strain w.r.t. the displacement gradient components.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of displacement gradient component variables\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str StrainGradDispDerivatives\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/SwitchingFunctionMaterial\n    description: |\n      Helper material to provide h(eta) and its derivative in one of two polynomial forms.\\nSIMPLE: 3*eta^2-2*eta^3\\nHIGH: eta^3*(6*eta^2-15*eta+10)\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eta\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter variable\n    - name: function_name\n      required: No\n      default: !!str h\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for f(eta), i.e. \'h\' or \'g\'\n    - name: h_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE HIGH\n      description: |\n        Polynomial order of the switching function h(eta)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/TrussMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        Variable containing the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        Variable containing the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        Variable containing the z displacement\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: t_ref\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The reference temperature at which this material has zero strain.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature if you want thermal expansion.\n    - name: thermal_expansion\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The thermal expansion coefficient.\n    - name: type\n      required: No\n      default: !!str TrussMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s Modulus\n    - name: youngs_modulus_var\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable containing Young\'s modulus\n    subblocks:\n  - name: /Materials/TwoPhaseStressMaterial\n    description: |\n      Compute a global stress in a two phase model\n    parameters:\n    - name: base_A\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the Phase A strain.\n    - name: base_B\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the Phase B strain.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the computed global stress (optional).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: h\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Switching Function Material that provides h(eta)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TwoPhaseStressMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Mesh\n  description: |\n    \n  parameters:\n  - name: displacements\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n  - name: block_id\n    required: No\n    default: !!str \n    cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n    group_name: Add Names\n    description: |\n      IDs of the block id/name pairs\n  - name: block_name\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: Add Names\n    description: |\n      Names of the block id/name pairs (must correspond with "block_id"\n  - name: boundary_id\n    required: No\n    default: !!str \n    cpp_type: std::vector<short, std::allocator<short> >\n    group_name: Add Names\n    description: |\n      IDs of the boundary id/name pairs\n  - name: boundary_name\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: Add Names\n    description: |\n      Names of the boundary id/name pairs (must correspond with "boundary_id"\n  - name: construct_side_list_from_node_list\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: Advanced\n    description: |\n      If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n  - name: ghosted_boundaries\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: Advanced\n    description: |\n      Boundaries to be ghosted if using Nemesis\n  - name: ghosted_boundaries_inflation\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: Advanced\n    description: |\n      If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to \'0.2 0.1 0.4\'\n  - name: patch_size\n    required: No\n    default: !!str 40\n    cpp_type: unsigned int\n    group_name: Advanced\n    description: |\n      The number of nodes to consider in the NearestNode neighborhood.\n  - name: second_order\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: Advanced\n    description: |\n      Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n  - name: skip_partitioning\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: Advanced\n    description: |\n      If true the mesh won\'t be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n  - name: type\n    required: Yes\n    default: !!str FileMesh\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  - name: uniform_refine\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Specify the level of uniform refinement applied to the initial mesh\n  subblocks:\n  - name: /Mesh/<type>\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Mesh/<type>/EBSDMesh\n      description: |\n        Mesh generated from a specified EBSD data file\n      parameters:\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: filename\n        required: Yes\n        default: !!str \n        cpp_type: FileName\n        group_name: \n        description: |\n          The name of the file containing the EBSD data\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: type\n        required: No\n        default: !!str EBSDMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: uniform_refine\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of coarsening levels available in adaptive mesh refinement.\n      subblocks:\n    - name: /Mesh/<type>/FileMesh\n      description: |\n        \n      parameters:\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: No\n        default: !!str 3\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: file\n        required: Yes\n        default: !!str \n        cpp_type: MeshFileName\n        group_name: \n        description: |\n          The name of the mesh file to read\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: type\n        required: No\n        default: !!str FileMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Mesh/<type>/GeneratedMesh\n      description: |\n        \n      parameters:\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Main\n        options: 1 2 3\n        description: |\n          The dimension of the mesh to be generated\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: nx\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the X direction\n      - name: ny\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the Y direction\n      - name: nz\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the Z direction\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: type\n        required: No\n        default: !!str GeneratedMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: xmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper X Coordinate of the generated mesh\n      - name: xmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower X Coordinate of the generated mesh\n      - name: ymax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Y Coordinate of the generated mesh\n      - name: ymin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Y Coordinate of the generated mesh\n      - name: zmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Z Coordinate of the generated mesh\n      - name: zmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Z Coordinate of the generated mesh\n      subblocks:\n    - name: /Mesh/<type>/ImageMesh\n      description: |\n        Generated mesh with the aspect ratio of a given image stack\n      parameters:\n      - name: cells_per_pixel\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The number of mesh cells per pixel, must be <=1 \n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Main\n        options: 1 2 3\n        description: |\n          The dimension of the mesh to be generated\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: file\n        required: No\n        default: !!str \n        cpp_type: FileName\n        group_name: \n        description: |\n          Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n      - name: file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: \n        description: |\n          Image file base to open, use this option when a stack of images must be read (ignored if \'file\' is given)\n      - name: file_range\n        required: No\n        default: !!str \n        cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n        group_name: \n        description: |\n          Range of images to analyze, used with \'file_base\' (ignored if \'file\' is given)\n      - name: file_suffix\n        required: No\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          Suffix of the file to open, e.g. \'png\'\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: nx\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the X direction\n      - name: ny\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the Y direction\n      - name: nz\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the Z direction\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: scale_to_one\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the image so its max dimension is 1\n      - name: type\n        required: No\n        default: !!str ImageMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: xmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper X Coordinate of the generated mesh\n      - name: xmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower X Coordinate of the generated mesh\n      - name: ymax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Y Coordinate of the generated mesh\n      - name: ymin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Y Coordinate of the generated mesh\n      - name: zmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Z Coordinate of the generated mesh\n      - name: zmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Z Coordinate of the generated mesh\n      subblocks:\n    - name: /Mesh/<type>/TiledMesh\n      description: |\n        \n      parameters:\n      - name: back_boundary\n        required: No\n        default: !!str back_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the back (z) boundary\n      - name: bottom_boundary\n        required: No\n        default: !!str bottom_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the bottom (y) boundary\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: No\n        default: !!str 3\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: file\n        required: Yes\n        default: !!str \n        cpp_type: MeshFileName\n        group_name: \n        description: |\n          The name of the mesh file to read\n      - name: front_boundary\n        required: No\n        default: !!str front_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the front (z) boundary\n      - name: left_boundary\n        required: No\n        default: !!str left_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the left (x) boundary\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: right_boundary\n        required: No\n        default: !!str right_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the right (x) boundary\n      - name: top_boundary\n        required: No\n        default: !!str top_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the top (y) boundary\n      - name: type\n        required: No\n        default: !!str TiledMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: x_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (left to right) in the x-direction\n      - name: x_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the x direction\n      - name: y_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (top to bottom) in the y-direction\n      - name: y_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the y direction\n      - name: z_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (front to back) in the z-direction\n      - name: z_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the z direction\n      subblocks:\n  - name: /Mesh/MortarInterfaces\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Mesh/MortarInterfaces/*\n      description: |\n        \n      parameters:\n      - name: master\n        required: Yes\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Master side ID\n      - name: slave\n        required: Yes\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Slave side ID\n      - name: subdomain\n        required: Yes\n        default: !!str \n        cpp_type: SubdomainName\n        group_name: \n        description: |\n          Subdomain name that is the mortar interface\n      subblocks:\n  - name: /Mesh/Partitioner\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Mesh/Partitioner/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Mesh/Partitioner/<type>/LibmeshPartitioner\n        description: |\n          \n        parameters:\n        - name: centroid_partitioner_direction\n          required: No\n          default: !!str \n          cpp_type: MooseEnum\n          group_name: \n          options: x y z radial\n          description: |\n            Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: partitioner\n          required: Yes\n          default: !!str \n          cpp_type: MooseEnum\n          group_name: \n          options: metis parmetis linear centroid hilbert_sfc morton_sfc\n          description: |\n            Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n        - name: type\n          required: No\n          default: !!str LibmeshPartitioner\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n- name: /MeshModifiers\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /MeshModifiers/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /MeshModifiers/AddAllSideSetsByNormals\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: type\n      required: No\n      default: !!str AddAllSideSetsByNormals\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/AddExtraNodeset\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coord\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: nodes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n    - name: tolerance\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        The tolerance in which two nodes are considered identical\n    - name: type\n      required: No\n      default: !!str AddExtraNodeset\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/AssignElementSubdomainID\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: element_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        New subdomain IDs of all elements\n    - name: subdomain_ids\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        New subdomain IDs of all elements\n    - name: type\n      required: No\n      default: !!str AssignElementSubdomainID\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/BoundingBoxNodeSet\n    description: |\n      \n    parameters:\n    - name: bottom_left\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between) of the box which contains the centroids of the elements whose nodes will be selected.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: location\n      required: No\n      default: !!str INSIDE\n      cpp_type: MooseEnum\n      group_name: \n      options: INSIDE OUTSIDE\n      description: |\n        Control of where the nodeset is to be set\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the nodeset to create\n    - name: top_right\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between) of the box which contains the centroids of the elements whose nodes will be selected.\n    - name: type\n      required: No\n      default: !!str BoundingBoxNodeSet\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/ImageSubdomain\n    description: |\n      \n    parameters:\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The image component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first component of the image\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: dimensions\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        x,y,z dimensions of the image (defaults to mesh dimensions)\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: FileNameNoExtension\n      group_name: \n      description: |\n        Image file base to open, use this option when a stack of images must be read (ignored if \'file\' is given)\n    - name: file_range\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Range of images to analyze, used with \'file_base\' (ignored if \'file\' is given)\n    - name: file_suffix\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Suffix of the file to open, e.g. \'png\'\n    - name: flip_x\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Flip\n      description: |\n        Flip the image along the x-axis\n    - name: flip_y\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Flip\n      description: |\n        Flip the image along the y-axis\n    - name: flip_z\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Flip\n      description: |\n        Flip the image along the z-axis\n    - name: lower_value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: Threshold\n      description: |\n        The value to set for data less than the threshold value\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Origin of the image (defaults to mesh origin)\n    - name: scale\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: Rescale\n      description: |\n        Multiplier to apply to all pixel values; occurs after shifting\n    - name: shift\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: Rescale\n      description: |\n        Value to add to all pixels; occurs prior to scaling\n    - name: threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Threshold\n      description: |\n        The threshold value\n    - name: type\n      required: No\n      default: !!str ImageSubdomain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper_value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: Threshold\n      description: |\n        The value to set for data greater than the threshold value\n    subblocks:\n  - name: /MeshModifiers/MeshExtruder\n    description: |\n      \n    parameters:\n    - name: bottom_sideset\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The boundary that will be applied to the bottom of the extruded mesh\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: existing_subdomains\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        The subdomains that will be remapped for specific layers\n    - name: extrusion_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction and length of the extrusion\n    - name: layers\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The layers where the "existing_subdomain" will be remapped to new ids\n    - name: new_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n    - name: num_layers\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers in the extruded mesh\n    - name: top_sideset\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The boundary that will be to the top of the extruded mesh\n    - name: type\n      required: No\n      default: !!str MeshExtruder\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/OrientedSubdomainBoundingBox\n    description: |\n      \n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Subdomain id to set for inside/outside the bounding box\n    - name: center\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The center (many people spell this \'center\') of the box.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: height\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The height of the box\n    - name: length\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The length of the box\n    - name: length_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction along which the length is oriented (must be perpendicular to width_direction).\n    - name: location\n      required: No\n      default: !!str INSIDE\n      cpp_type: MooseEnum\n      group_name: \n      options: INSIDE OUTSIDE\n      description: |\n        Control of where the subdomain id is to be set\n    - name: type\n      required: No\n      default: !!str OrientedSubdomainBoundingBox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The width of the box\n    - name: width_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction along which the width is oriented.\n    subblocks:\n  - name: /MeshModifiers/RenameBlock\n    description: |\n      RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: new_block_id\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n    - name: new_block_name\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n    - name: old_block_id\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n    - name: old_block_name\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n    - name: type\n      required: No\n      default: !!str RenameBlock\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/SideSetsAroundSubdomain\n    description: |\n      Adds element faces that are on the exterior of the given block to the sidesets specified\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs to create on the supplied subdomain\n    - name: normal\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n    - name: normal_tol\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n    - name: type\n      required: No\n      default: !!str SideSetsAroundSubdomain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SideSetsBetweenSubdomains\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: master_block\n      required: Yes\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        The first block for which to draw a sideset between\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: paired_block\n      required: Yes\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        The second block for which to draw a sideset between\n    - name: type\n      required: No\n      default: !!str SideSetsBetweenSubdomains\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/SideSetsFromNormals\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: normals\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        A list of normals for which to start painting sidesets\n    - name: type\n      required: No\n      default: !!str SideSetsFromNormals\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SideSetsFromPoints\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        A list of points from which to start painting sidesets\n    - name: type\n      required: No\n      default: !!str SideSetsFromPoints\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SubdomainBoundingBox\n    description: |\n      \n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Subdomain id to set for inside/outside the bounding box\n    - name: block_name\n      required: No\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        Subdomain name to set for inside/outside the bounding box (optional)\n    - name: bottom_left\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: location\n      required: No\n      default: !!str INSIDE\n      cpp_type: MooseEnum\n      group_name: \n      options: INSIDE OUTSIDE\n      description: |\n        Control of where the subdomain id is to be set\n    - name: top_right\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between).\n    - name: type\n      required: No\n      default: !!str SubdomainBoundingBox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/Transform\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: transform\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: TRANSLATE ROTATE SCALE\n      description: |\n        The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n    - name: type\n      required: No\n      default: !!str Transform\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vector_value\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n    subblocks:\n- name: /Modules\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Modules/PhaseField\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Modules/PhaseField/DisplacementGradients\n      description: |\n        \n      parameters:\n      - name: displacement_gradients\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Vector of displacement gradient variables\n      - name: displacements\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Vector of displacement variables\n      - name: scaling\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Specifies a scaling factor to apply to the displacement gradient variables\n      subblocks:\n- name: /MultiApps\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /MultiApps/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /MultiApps/AutoPositionsMultiApp\n    description: |\n      \n    parameters:\n    - name: app_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: TigerApp\n      description: |\n        The type of application to build (applications not registered can be loaded with dynamic libraries.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: catch_up\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will allow failed solves to attempt to \'catch up\' using smaller timesteps.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: detect_steady_state\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using \'positions_from_file\' it is also admissable to provide one input_file per file.\n    - name: interpolate_transfers\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n    - name: library_path\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n    - name: max_catch_up_steps\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n    - name: max_failures\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of solve failures tolerated while sub_cycling.\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: output_sub_cycles\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then every sub-cycle will be output.\n    - name: print_sub_cycles\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggle the display of sub-cycles on the screen.\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: steady_state_tol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        The relative difference between the new solution and the old solution that will be considered to be at steady state\n    - name: sub_cycling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each \'master\' timestep\n    - name: tolerate_failure\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this MultiApp won\'t participate in dt decisions and will always be fast-forwarded to the current time.\n    - name: type\n      required: No\n      default: !!str AutoPositionsMultiApp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /MultiApps/FullSolveMultiApp\n    description: |\n      \n    parameters:\n    - name: app_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: TigerApp\n      description: |\n        The type of application to build (applications not registered can be loaded with dynamic libraries.\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using \'positions_from_file\' it is also admissable to provide one input_file per file.\n    - name: library_path\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or \'positions_file\'\n    - name: positions_file\n      required: No\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or \'positions\'\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: type\n      required: No\n      default: !!str FullSolveMultiApp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /MultiApps/TransientMultiApp\n    description: |\n      \n    parameters:\n    - name: app_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: TigerApp\n      description: |\n        The type of application to build (applications not registered can be loaded with dynamic libraries.\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: catch_up\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will allow failed solves to attempt to \'catch up\' using smaller timesteps.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: detect_steady_state\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using \'positions_from_file\' it is also admissable to provide one input_file per file.\n    - name: interpolate_transfers\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n    - name: library_path\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n    - name: max_catch_up_steps\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n    - name: max_failures\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of solve failures tolerated while sub_cycling.\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: output_sub_cycles\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then every sub-cycle will be output.\n    - name: positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or \'positions_file\'\n    - name: positions_file\n      required: No\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or \'positions\'\n    - name: print_sub_cycles\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggle the display of sub-cycles on the screen.\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: steady_state_tol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        The relative difference between the new solution and the old solution that will be considered to be at steady state\n    - name: sub_cycling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each \'master\' timestep\n    - name: tolerate_failure\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this MultiApp won\'t participate in dt decisions and will always be fast-forwarded to the current time.\n    - name: type\n      required: No\n      default: !!str TransientMultiApp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /NodalKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /NodalKernels/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /NodalKernels/ConstantRate\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rate\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The constant rate in \'du/dt = rate\'\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /NodalKernels/TimeDerivativeNodalKernel\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TimeDerivativeNodalKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /NodalKernels/UserForcingFunctionNodalKernel\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str UserForcingFunctionNodalKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /NodalNormals\n  description: |\n    \n  parameters:\n  - name: boundary\n    required: No\n    default: !!str ANY_BOUNDARY_ID \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      The boundary ID or name where the normals will be computed\n  - name: corner_boundary\n    required: No\n    default: !!str \n    cpp_type: BoundaryName\n    group_name: \n    description: |\n      boundary ID or name with nodes at \'corners\'\n  - name: order\n    required: No\n    default: !!str FIRST\n    cpp_type: MooseEnum\n    group_name: \n    options: FIRST SECOND\n    description: |\n      Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n  subblocks:\n- name: /Outputs\n  description: |\n    \n  parameters:\n  - name: append_date\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      When true the date and time are appended to the output filename.\n  - name: append_date_format\n    required: No\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n  - name: checkpoint\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Create checkpoint files using the default options.\n  - name: color\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to false to turn off all coloring in all outputs\n  - name: console\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Console output\n  - name: csv\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n  - name: dofmap\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Create the dof map .json output file\n  - name: execute_on\n    required: No\n    default: !!str INITIAL TIMESTEP_END\n    cpp_type: MultiMooseEnum\n    group_name: \n    options: none initial linear nonlinear timestep_end timestep_begin final failed\n    description: |\n      Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: \'initial timestep_end\')\n  - name: exodus\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Exodus output\n  - name: file_base\n    required: No\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Common file base name to be utilized with all output objects\n  - name: gmv\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for GMV output\n  - name: gnuplot\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the scalar and postprocessor results using the default settings for GNUPlot output\n  - name: hide\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n  - name: interval\n    required: No\n    default: !!str 1\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The interval at which timesteps are output to the solution file\n  - name: nemesis\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Nemesis output\n  - name: output_if_base_contains\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n  - name: print_linear_residuals\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Enable printing of linear residuals to the screen (Console)\n  - name: print_mesh_changed_info\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      When true, each time the mesh is changed the mesh information is printed\n  - name: print_perf_log\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Enable printing of the performance log to the screen (Console)\n  - name: show\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n  - name: solution_history\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print a solution history file (.slh) using the default settings\n  - name: sync_times\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Times at which the output and solution is forced to occur\n  - name: tecplot\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Tecplot output\n  - name: vtk\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for VTKOutput output\n  - name: xda\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for XDA/XDR output (ascii)\n  - name: xdr\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for XDA/XDR output (binary)\n  subblocks:\n  - name: /Outputs/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Outputs/CSV\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: align\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Align the outputted csv data by padding the numbers with trailing whitespace\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_restart\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append existing file on restart\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: delimiter\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Assign the delimiter (default is \',\'\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: execute_vector_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of VectorPostprocessors\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: precision\n      required: No\n      default: !!str 14\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Set the output precision\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str CSV\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Checkpoint\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: binary\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Toggle the output of binary files\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: num_files\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of the restart files to save\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: suffix\n      required: No\n      default: !!str cp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        This will be appended to the file_base to create the directory name for checkpoint files.\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Checkpoint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Console\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: all_variable_norms\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Norms\n      description: |\n        If true, all variable norms will be printed after each solve\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_restart\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append existing file on restart\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_input_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of the input file\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str FAILED INITIAL LINEAR NONLINEAR TIMESTEP_BEGIN TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_system_information_on\n      required: No\n      default: !!str INITIAL\n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control when the output of the simulation information occurs\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: execute_vector_postprocessors_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of VectorPostprocessors\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: fit_mode\n      required: No\n      default: !!str ENVIRONMENT\n      cpp_type: MooseEnum\n      group_name: \n      options: ENVIRONMENT AUTO 80 120 160\n      description: |\n        Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: max_rows\n      required: No\n      default: !!str 15\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: outlier_multiplier\n      required: No\n      default: !!str 0.8 2 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Norms\n      description: |\n        Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n    - name: outlier_variable_norms\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Norms\n      description: |\n        If true, outlier variable norms will be printed after each solve\n    - name: output_file\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the file\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: output_screen\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the screen\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: perf_header\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Print the libMesh performance log header (requires that \'perf_log = true\')\n    - name: perf_log\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        If true, all performance logs will be printed. The individual log settings will override this option.\n    - name: print_mesh_changed_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true, each time the mesh is changed the mesh information is printed\n    - name: scientific_time\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Control the printing of time and dt in scientific notation\n    - name: setup_log\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Toggles the printing of the \'Setup Performance\' log\n    - name: setup_log_early\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: show_multiapp_name\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Indent multiapp output using the multiapp name\n    - name: solve_log\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Toggles the printing of the \'Moose Test Performance\' log\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: system_info\n      required: No\n      default: !!str AUX EXECUTION FRAMEWORK MESH NONLINEAR\n      cpp_type: MultiMooseEnum\n      group_name: Advanced\n      options: framework mesh aux nonlinear execution output\n      description: |\n        List of information types to display (\'framework\', \'mesh\', \'aux\', \'nonlinear\', \'execution\', \'output\')\n    - name: time_precision\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of significant digits that are printed on time related outputs\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Console\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    - name: verbose\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Print detailed diagnostics on timestep calculation\n    subblocks:\n  - name: /Outputs/DOFMap\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_file\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the file\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_screen\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the screen\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: system_name\n      required: No\n      default: !!str nl0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        System to output\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str DOFMap\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Exodus\n    description: |\n      Object for output data in the Exodus II format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of elemental variables\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_input_on\n      required: No\n      default: !!str INITIAL\n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of the input file\n    - name: execute_nodal_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of nodal variables\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_material_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Materials\n      description: |\n        Flag indicating if material properties should be output\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: overwrite\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n    - name: padding\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: scalar_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output scalar variables as nodal\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enabled by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: show_material_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Materials\n      description: |\n        List of materialproperties that should be written to the output\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Exodus\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    - name: use_problem_dimension\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n    subblocks:\n  - name: /Outputs/GMV\n    description: |\n      Object for outputting data in the GMV format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: binary\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Output the file in binary format\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str GMV\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Gnuplot\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_restart\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append existing file on restart\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: execute_vector_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of VectorPostprocessors\n    - name: extension\n      required: No\n      default: !!str png\n      cpp_type: MooseEnum\n      group_name: \n      options: png ps gif\n      description: |\n        GNU plot file extension\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Gnuplot\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/ICEUpdater\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: item_id\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The currently running MOOSE Item Id.\n    - name: noproxy\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, set \'CURLOPT_NOPROXY, "*"\' when calling libcurl APIs.\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str ICEUpdater\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: url\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The URL of the currently running ICE Core instance.\n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/MaterialPropertyDebugOutput\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str MaterialPropertyDebugOutput\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Nemesis\n    description: |\n      Object for output data in the Nemesis format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_input_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of the input file\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: Variables\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Nemesis\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/SolutionHistory\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str SolutionHistory\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Tecplot\n    description: |\n      Object for outputting data in the Tecplot format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: ascii_append\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, append to an existing ASCII file rather than creating a new file each time\n    - name: binary\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Set Tecplot files to output in binary format\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Tecplot\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/TopResidualDebugOutput\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str LINEAR NONLINEAR TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: num_residuals\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of top residuals to print out (0 = no output)\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str TopResidualDebugOutput\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/VTK\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: binary\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Set VTK files to output in binary format\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str VTK\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/VariableResidualNormsDebugOutput\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str NONLINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str VariableResidualNormsDebugOutput\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/XDA\n    description: |\n      Object for outputting data in the XDA/XDR format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str XDA\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/XDR\n    description: |\n      Object for outputting data in the XDA/XDR format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str INITIAL TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str XDR\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n- name: /Postprocessors\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Postprocessors/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Postprocessors/AreaPostprocessor\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AreaPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/AverageElementSize\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageElementSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/AverageNodalVariableValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageNodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/CInterfacePosition\n    description: |\n      \n    parameters:\n    - name: RefVal\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Variable value used to determine interface position\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the direction the position is measured in\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CInterfacePosition\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/CavityPressurePostprocessor\n    description: |\n      \n    parameters:\n    - name: cavity_pressure_uo\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CavityPressureUserObject that computes the initial moles.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: quantity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The quantity to report.\n    - name: type\n      required: No\n      default: !!str CavityPressurePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/CrackFrontData\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front where data is to be reported\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the reported quantity\n    - name: type\n      required: No\n      default: !!str CrackFrontData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of a variable whose value at the crack front is to be reported\n    subblocks:\n  - name: /Postprocessors/DifferencePostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str DifferencePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value1\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        First value\n    - name: value2\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Second value\n    subblocks:\n  - name: /Postprocessors/ElementAverageTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementAverageValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementExtremeValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/ElementH1Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementH1SemiError\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1SemiError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementIntegralMaterialProperty\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mat_prop\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the material property\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralMaterialProperty\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ElementIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Difference\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: other_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compare to\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Difference\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Norm\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementVectorL2Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function_x\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementVectorL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in x direction\n    - name: var_y\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in y direction\n    - name: var_z\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in z direction\n    subblocks:\n  - name: /Postprocessors/ElementW1pError\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementW1pError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementalVariableValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elementid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the element where we monitor\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ElementalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /Postprocessors/EmptyPostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str EmptyPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ExecutionerAttributeReporter\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ExecutionerAttributeReporter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/FauxGrainTracker\n    description: |\n      Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: center_of_mass_tracking\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the grain tracker uses bounding sphere centersor center of mass calculations for tracking grains\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: compute_op_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convex_hull_buffer\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The buffer around the convex hull used to determinewhen features intersect\n    - name: ebsd_reader\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: EBSD Reader for initial condition\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str FauxGrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /Postprocessors/FeatureFloodCount\n    description: |\n      \n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str FeatureFloodCount\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /Postprocessors/FunctionSideIntegral\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        This postprocessor will return the integral of this function over the boundary\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str FunctionSideIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/FunctionValuePostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function which supplies the postprocessor value.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        A point in space to be given to the function Default: (0, 0, 0)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the function\n    - name: type\n      required: No\n      default: !!str FunctionValuePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/GrainTracker\n    description: |\n      \n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: center_of_mass_tracking\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the grain tracker uses bounding sphere centersor center of mass calcuations for tracking grains\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: compute_op_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convex_hull_buffer\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The buffer around the convex hull used to determinewhen features intersect\n    - name: ebsd_reader\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: EBSD Reader for initial condition\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str GrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /Postprocessors/HomogenizedElasticConstants\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: column\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dx_xx\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xx\n    - name: dx_xy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xy\n    - name: dx_yy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yy\n    - name: dx_yz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yz\n    - name: dx_zx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zx\n    - name: dx_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zz\n    - name: dy_xx\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xx\n    - name: dy_xy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xy\n    - name: dy_yy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yy\n    - name: dy_yz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yz\n    - name: dy_zx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zx\n    - name: dy_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zz\n    - name: dz_xx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xx\n    - name: dz_xy\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xy\n    - name: dz_yy\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yy\n    - name: dz_yz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yz\n    - name: dz_zx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zx\n    - name: dz_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zz\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: row\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HomogenizedElasticConstants\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/HomogenizedThermalConductivity\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction this pp acts in (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusion_coefficient_name\n      required: No\n      default: !!str thermal_conductivity\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Property name of the diffusivity (Default: thermal_conductivity)\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in x\n    - name: temp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in y\n    - name: temp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in z\n    - name: type\n      required: No\n      default: !!str HomogenizedThermalConductivity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/INSExplicitTimestepSelector\n    description: |\n      \n    parameters:\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        0 < beta < 1, choose some fraction of the limiting timestep size\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        dynamic viscosity\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSExplicitTimestepSelector\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: vel_mag\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Velocity magnitude\n    subblocks:\n  - name: /Postprocessors/InteractionIntegral\n    description: |\n      \n    parameters:\n    - name: K_factor\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Conversion factor between interaction integral and stress intensity factor K\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: q\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The q function, aux variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: t_stress\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate T-stress\n    - name: type\n      required: No\n      default: !!str InteractionIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/InternalVolume\n    description: |\n      \n    parameters:\n    - name: addition\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        An additional volume to be included in the internal volume calculation\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The component to use in the integration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the internal volume calculation\n    - name: type\n      required: No\n      default: !!str InternalVolume\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/JIntegral\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convert_J_to_K\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Convert J-integral to stress intensity factor K.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio\n    - name: q\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The q function, aux variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: type\n      required: No\n      default: !!str JIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /Postprocessors/Mass\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Mass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/MaterialTensorIntegral\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 1 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction vector\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis used to calculate some material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n      description: |\n        A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The material tensor name.\n    - name: type\n      required: No\n      default: !!str MaterialTensorIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/MixedModeEquivalentK\n    description: |\n      \n    parameters:\n    - name: KIII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KIII postprocessor\n    - name: KII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KII postprocessor\n    - name: KI_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KI postprocessor\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: type\n      required: No\n      default: !!str MixedModeEquivalentK\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NodalExtremeValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalL2Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalL2Norm\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalMaxValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalMaxVarChange\n    description: |\n      This postprocessor returns the value max(abs(variable - variable_old)) for the specified variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxVarChange\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalProxyMaxValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalProxyMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalSum\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalSum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalVariableValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: nodeid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the node where we monitor\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the variable\n    - name: type\n      required: No\n      default: !!str NodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /Postprocessors/NodalVolumeFraction\n    description: |\n      \n    parameters:\n    - name: Avrami_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        filename for Avrami analysis info (ln time and Avrami)\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: equil_fraction\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium volume fraction of 2nd phase for Avrami analysis\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: mesh_volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor from which to get mesh volume\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str NodalVolumeFraction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /Postprocessors/NumDOFs\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumDOFs\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumElems\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumElems\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumLinearIterations\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumLinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumNodes\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNodes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumNonlinearIterations\n    description: |\n      \n    parameters:\n    - name: accumulate_over_step\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When set to true, accumulates to count the total over all Picard iterations for each step\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNonlinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumPicardIterations\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumPicardIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumResidualEvaluations\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumResidualEvaluations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumVars\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: system\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: nonlinear auxiliary\n      description: |\n        The system for which you want to print the number of variables.\n    - name: type\n      required: No\n      default: !!str NumVars\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PFCElementEnergyIntegral\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str 1833\n      cpp_type: double\n      group_name: \n      description: |\n        Temperature of simulation\n    - name: type\n      required: No\n      default: !!str PFCElementEnergyIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/PercentChangePostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor used for exit criterion\n    - name: type\n      required: No\n      default: !!str PercentChangePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PerformanceData\n    description: |\n      \n    parameters:\n    - name: column\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub\n      description: |\n        The column you want the value of.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: event\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the event.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str PerformanceData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PointValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The physical point where the solution will be evaluated.\n    - name: type\n      required: No\n      default: !!str PointValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on.\n    subblocks:\n  - name: /Postprocessors/RealControlParameterReporter\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: parameter\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The input parameter to control.\n    - name: type\n      required: No\n      default: !!str RealControlParameterReporter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/Receiver\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: default\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The default value\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: initialize_old\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Initialize the old postprocessor value with the default value\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str Receiver\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/Residual\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str Residual\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/RichardsExcavFlow\n    description: |\n      Records total flow INTO an excavation (if quantity is positive then flow has occured from rock into excavation void)\n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: excav_geom_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function describing the excavation geometry (type RichardsExcavGeom)\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: type\n      required: No\n      default: !!str RichardsExcavFlow\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/RichardsHalfGaussianSinkFlux\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: centre\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Centre of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: max\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Maximum of the flux (measured in kg.m^-2.s^-1).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.  Note, to make this a source rather than a sink, let max<0\n    - name: multiplying_fcn\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The flux will be multiplied by this spatially-and-temporally varying function.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: sd\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Standard deviation of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n    - name: type\n      required: No\n      default: !!str RichardsHalfGaussianSinkFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/RichardsMass\n    description: |\n      Returns the mass in a region.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsMass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/RichardsPiecewiseLinearSinkFlux\n    description: |\n      Records the fluid flow into a sink (positive values indicate fluid is flowing from porespace into the sink).\n    parameters:\n    - name: bare_fluxes\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of flux values (measured in kg.m^-2.s^-1 for use_mobility=false, and in Pa.s^-1 if use_mobility=true).  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.  A piecewise-linear fit is performed to the (pressure,bare_fluxes) pairs to obtain the flux at any arbitrary pressure, and the first or last bare_flux values are used if the quad-point pressure falls outside this range.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multiplying_fcn\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The flux will be multiplied by this spatially-and-temporally varying function.  This is useful if the boundary is a moving boundary controlled by RichardsExcav.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pressures\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of pressure values.  Must be monotonically increasing.\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: type\n      required: No\n      default: !!str RichardsPiecewiseLinearSinkFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_mobility\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If true, then fluxes are multiplied by (density*permeability_nn/viscosity), where the \'_nn\' indicates the component normal to the boundary.  In this case bare_flux is measured in Pa.s^-1.  This can be used in conjunction with use_relperm.\n    - name: use_relperm\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If true, then fluxes are multiplied by relative permeability.  This can be used in conjunction with use_mobility\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/RichardsPlotQuantity\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str RichardsPlotQuantity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uo\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        user object name that has the total mass value\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/RunTime\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: time_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: alive active\n      description: |\n        Whether to output the total elapsed or just the active time\n    - name: type\n      required: No\n      default: !!str RunTime\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ScalarL2Error\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar variable\n    subblocks:\n  - name: /Postprocessors/ScalarVariable\n    description: |\n      \n    parameters:\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component to output for this variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarVariable\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of the variable\n    subblocks:\n  - name: /Postprocessors/SideAverageValue\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideFluxAverage\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideFluxIntegral\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/ThermalCond\n    description: |\n      \n    parameters:\n    - name: T_hot\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Temperature on \'hot\' boundary in K\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Length between sides of sample in length_scale\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flux\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Heat flux out of \'cold\' boundary in solution units, should always be positive\n    - name: k0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Initial value of the thermal conductivity\n    - name: length_scale\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        lengthscale of the solution, default is 1e-8\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ThermalCond\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/TimestepSize\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TimestepSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/TorqueReaction\n    description: |\n      \n    parameters:\n    - name: axis_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of the axis of rotation\n    - name: axis_origin\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of the axis of rotation\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: react_x\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The x reaction variable\n    - name: react_y\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The y reaction variable\n    - name: react_z\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The z reaction variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TorqueReaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/TotalVariableValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TotalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    subblocks:\n  - name: /Postprocessors/VolumePostprocessor\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VolumePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Preconditioning\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Preconditioning/*\n    description: |\n      \n    parameters:\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Preconditioning/FDP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: implicit_geometric_coupling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: No\n      default: !!str FDP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/PBP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: preconditioner\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        TODO: docstring\n    - name: solve_order\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable\'s block row.  A variable may appear more than once (to create cylces if you like).\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: No\n      default: !!str PBP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/SBP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: No\n      default: !!str SBP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/SMP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_groups\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: No\n      default: !!str SMP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n- name: /Problem\n  description: |\n    \n  parameters:\n  - name: block\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: \n    description: |\n      Block IDs for the coordinate systems\n  - name: coord_type\n    required: No\n    default: !!str XYZ\n    cpp_type: MultiMooseEnum\n    group_name: \n    options: XYZ RZ RSPHERICAL\n    description: |\n      Type of the coordinate system per block param\n  - name: fe_cache\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n  - name: kernel_coverage_check\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to false to disable kernel->subdomain coverage check\n  - name: material_coverage_check\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to false to disable material->subdomain coverage check\n  - name: name\n    required: No\n    default: !!str MOOSE Problem\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      The name the problem\n  - name: restart_file_base\n    required: No\n    default: !!str \n    cpp_type: FileNameNoExtension\n    group_name: \n    description: |\n      File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n  - name: rz_coord_axis\n    required: No\n    default: !!str Y\n    cpp_type: MooseEnum\n    group_name: \n    options: X Y\n    description: |\n      The rotation axis (X | Y) for axisymetric coordinates\n  - name: type\n    required: Yes\n    default: !!str FEProblem\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  - name: use_legacy_uo_aux_computation\n    required: No\n    default: !!str \n    cpp_type: bool\n    group_name: \n    description: |\n      Set to true to have MOOSE recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n  - name: use_legacy_uo_initialization\n    required: No\n    default: !!str \n    cpp_type: bool\n    group_name: \n    description: |\n      Set to true to have MOOSE compute all UserObjects and Postprocessors during the initial setup phase of the problem recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n  - name: library_path\n    required: No\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n  - name: object_names\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      The names of the objects to register (Default: register all).\n  - name: register_objects_from\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      The names of other applications from which objects will be registered from (dynamic registration).\n  subblocks:\n  - name: /Problem/<type>\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Problem/<type>/DisplacedProblem\n      description: |\n        \n      parameters:\n      - name: type\n        required: No\n        default: !!str DisplacedProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Problem/<type>/FEProblem\n      description: |\n        \n      parameters:\n      - name: dimNearNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the near nullspace\n      - name: dimNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the nullspace\n      - name: error_on_jacobian_nonzero_reallocation\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n      - name: solve\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n      - name: type\n        required: No\n        default: !!str FEProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_nonlinear\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n      subblocks:\n    - name: /Problem/<type>/FrictionalContactProblem\n      description: |\n        \n      parameters:\n      - name: acceptable_iterations\n        required: No\n        default: !!str 0\n        cpp_type: int\n        group_name: \n        description: |\n          Iterations after which convergence to acceptable limits is accepted\n      - name: acceptable_multiplier\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Multiplier applied to relative tolerance for acceptable limit\n      - name: contact_reference_residual_variables\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Set of variables that provide reference residuals for relative contact convergence check\n      - name: contact_slip_tolerance_factor\n        required: No\n        default: !!str 10\n        cpp_type: double\n        group_name: \n        description: |\n          Multiplier on convergence criteria to determine when to start slipping\n      - name: diag_stiff_x\n        required: Yes\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable containing the saved x diagonal stiffness\n      - name: diag_stiff_y\n        required: Yes\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable containing the saved y diagonal stiffness\n      - name: diag_stiff_z\n        required: No\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable containing the saved z diagonal stiffness\n      - name: dimNearNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the near nullspace\n      - name: dimNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the nullspace\n      - name: disp_x\n        required: Yes\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          Variable containing the x displacement\n      - name: disp_y\n        required: Yes\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          Variable containing the y displacement\n      - name: disp_z\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          Variable containing the z displacement\n      - name: error_on_jacobian_nonzero_reallocation\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n      - name: friction_coefficient\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: \n        description: |\n          Coefficient of friction for sliding contact for each interaction\n      - name: inc_slip_x\n        required: Yes\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable to store the x incremental slip\n      - name: inc_slip_y\n        required: Yes\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable to store the y incremental slip\n      - name: inc_slip_z\n        required: No\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable to store the z incremental slip\n      - name: master\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<int, std::allocator<int> >\n        group_name: \n        description: |\n          IDs of the master surfaces for which the slip should be calculated\n      - name: maximum_slip_iterations\n        required: No\n        default: !!str 100\n        cpp_type: int\n        group_name: \n        description: |\n          Maximum number of slip iterations per step\n      - name: minimum_slip_iterations\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Minimum number of slip iterations per step\n      - name: reference_residual_variables\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Set of variables that provide reference residuals for relative convergence check\n      - name: residual_x\n        required: Yes\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable containing the saved x residual\n      - name: residual_y\n        required: Yes\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable containing the saved y residual\n      - name: residual_z\n        required: No\n        default: !!str \n        cpp_type: AuxVariableName\n        group_name: \n        description: |\n          Auxiliary variable containing the saved z residual\n      - name: slave\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<int, std::allocator<int> >\n        group_name: \n        description: |\n          IDs of the slave surfaces for which the slip should be calculated\n      - name: slip_factor\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: \n        description: |\n          Fraction of calculated slip to be applied for each interaction\n      - name: slip_too_far_factor\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: \n        description: |\n          Fraction of calculated slip to be applied for each interaction in the slipped-too-far state\n      - name: slip_updates_per_iteration\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of slip updates per contact iteration\n      - name: solution_variables\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Set of solution variables to be checked for relative convergence\n      - name: solve\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n      - name: target_contact_residual\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Frictional contact residual convergence criterion\n      - name: target_relative_contact_residual\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Frictional contact relative residual convergence criterion\n      - name: type\n        required: No\n        default: !!str FrictionalContactProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_nonlinear\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n      subblocks:\n    - name: /Problem/<type>/ReferenceResidualProblem\n      description: |\n        \n      parameters:\n      - name: acceptable_iterations\n        required: No\n        default: !!str 0\n        cpp_type: int\n        group_name: \n        description: |\n          Iterations after which convergence to acceptable limits is accepted\n      - name: acceptable_multiplier\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Multiplier applied to relative tolerance for acceptable limit\n      - name: dimNearNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the near nullspace\n      - name: dimNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the nullspace\n      - name: error_on_jacobian_nonzero_reallocation\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n      - name: reference_residual_variables\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Set of variables that provide reference residuals for relative convergence check\n      - name: solution_variables\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Set of solution variables to be checked for relative convergence\n      - name: solve\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n      - name: type\n        required: No\n        default: !!str ReferenceResidualProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_nonlinear\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n      subblocks:\n    - name: /Problem/<type>/RichardsMultiphaseProblem\n      description: |\n        \n      parameters:\n      - name: bounded_var\n        required: Yes\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          Variable whose value will be constrained to be greater than lower_var\n      - name: dimNearNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the near nullspace\n      - name: dimNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the nullspace\n      - name: error_on_jacobian_nonzero_reallocation\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n      - name: lower_var\n        required: Yes\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          Variable that acts as a lower bound to bounded_var.  It will not be constrained during the solution procedure\n      - name: solve\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n      - name: type\n        required: No\n        default: !!str RichardsMultiphaseProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_nonlinear\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n      subblocks:\n- name: /ReactionNetwork\n  description: |\n    \n  parameters:\n  - name: primary_species\n    required: Yes\n    default: !!str \n    cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n    group_name: \n    description: |\n      The list of primary variables to add\n  subblocks:\n  - name: /ReactionNetwork/AqueousEquilibriumReactions\n    description: |\n      \n    parameters:\n    - name: reactions\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The list of aqueous equilibrium reactions\n    - name: secondary_species\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The list of aqueous equilibrium species to be output as aux variables\n    - name: pressure\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Checks if pressure is a primary variable\n    - name: primary_species\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The list of primary variables to add\n    - name: kin_reactions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The list of solid kinetic reactions\n    subblocks:\n  - name: /ReactionNetwork/SolidKineticReactions\n    description: |\n      \n    parameters:\n    - name: activation_energy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The list of activation energy values for all reactions, (J/mol)\n    - name: gas_constant\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas constant, 8.314 (J/mol/K)\n    - name: kin_reactions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The list of solid kinetic reactions\n    - name: kinetic_rate_constant\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The list of kinetic rate constant for all reactions, (mol/m^2/s)\n    - name: log10_keq\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The list of equilibrium constants for all reactions\n    - name: reference_temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The list of reference temperatures for all reactions, (K)\n    - name: specific_reactive_surface_area\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The list of specific reactive surface area for all minerals, (m^2/L)\n    - name: system_temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The list of system temperatures for all reactions, (K)\n    - name: primary_species\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The list of primary species to add\n    - name: secondary_species\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The list of secondary species to add\n    subblocks:\n- name: /ScalarKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /ScalarKernels/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /ScalarKernels/NodalEqualValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: nodes\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Node ids\n    - name: type\n      required: No\n      default: !!str NodalEqualValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable(s) to put the constraint on\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /ScalarKernels/ODETimeDerivative\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: type\n      required: No\n      default: !!str ODETimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /ScalarKernels/ParsedODEKernel\n    description: |\n      Parsed ODE function kernel.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        additional coupled variables\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        enable just-in-time compilation of function expressions for faster evaluation\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        function expression\n    - name: type\n      required: No\n      default: !!str ParsedODEKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /SolidMechanics\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /SolidMechanics/*\n    description: |\n      \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for HHT time integration\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of ids of the blocks (subdomain) that these kernels will be applied to\n    - name: diag_save_in_disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the r displacement diagonal preconditioner terms.\n    - name: diag_save_in_disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the x displacement diagonal preconditioner terms.\n    - name: diag_save_in_disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the y displacement diagonal preconditioner terms.\n    - name: diag_save_in_disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the z displacement diagonal preconditioner terms.\n    - name: disp_r\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The r displacement\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The z displacement\n    - name: save_in_disp_r\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the r displacement residuals.\n    - name: save_in_disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the x displacement residuals.\n    - name: save_in_disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the y displacement residuals.\n    - name: save_in_disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        Auxiliary variables to save the z displacement residuals.\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str undefined\n      cpp_type: MooseEnum\n      group_name: \n      options: truss undefined\n      description: |\n        The element type: truss undefined\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        \n    - name: zeta\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Stiffness dependent damping parameter for Rayleigh damping\n    subblocks:\n- name: /Splits\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Splits/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str Split\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Classname of the split object\n    subblocks:\n  - name: /Splits/ContactSplit\n    description: |\n      \n    parameters:\n    - name: blocks\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        Mesh blocks Split operates on (omitting this implies "all blocks"\n    - name: contact_displaced\n      required: No\n      default: !!str \n      cpp_type: std::vector<bool, std::allocator<bool> >\n      group_name: \n      description: |\n        List of indicators whether displaced mesh is used to define included contact\n    - name: contact_master\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Master surface list for included contacts\n    - name: contact_slave\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Slave surface list for included contacts\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        PETSc flags for the FieldSplit solver\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        PETSc option names for the FieldSplit solver\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        PETSc option values for the FieldSplit solver\n    - name: schur_ainv\n      required: No\n      default: !!str diag\n      cpp_type: MooseEnum\n      group_name: \n      options: diag lump\n      description: |\n        Type of approximation to inv(A) used when forming S = D - C inv(A) B\n    - name: schur_pre\n      required: No\n      default: !!str S\n      cpp_type: MooseEnum\n      group_name: \n      options: S Sp A11\n      description: |\n        Type of Schur complement preconditioner matrix\n    - name: schur_type\n      required: No\n      default: !!str full\n      cpp_type: MooseEnum\n      group_name: \n      options: full upper lower\n      description: |\n        Type of Schur complement\n    - name: sides\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Sidesets Split operates on (omitting this implies "no sidesets"\n    - name: splitting\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the splits (subsystems) in the decomposition of this split\n    - name: splitting_type\n      required: No\n      default: !!str additive\n      cpp_type: MooseEnum\n      group_name: \n      options: additive multiplicative symmetric_multiplicative schur\n      description: |\n        Split decomposition type\n    - name: type\n      required: No\n      default: !!str ContactSplit\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uncontact_displaced\n      required: No\n      default: !!str \n      cpp_type: std::vector<bool, std::allocator<bool> >\n      group_name: \n      description: |\n        List of indicators whether displaced mesh is used to define excluded contact\n    - name: uncontact_master\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Master surface list for excluded contacts\n    - name: uncontact_slave\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Slave surface list for excluded contacts\n    - name: unsides\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        Variables Split operates on (omitting this implies "all variables"\n    subblocks:\n  - name: /Splits/Split\n    description: |\n      \n    parameters:\n    - name: blocks\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        Mesh blocks Split operates on (omitting this implies "all blocks"\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        PETSc flags for the FieldSplit solver\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        PETSc option names for the FieldSplit solver\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        PETSc option values for the FieldSplit solver\n    - name: schur_ainv\n      required: No\n      default: !!str diag\n      cpp_type: MooseEnum\n      group_name: \n      options: diag lump\n      description: |\n        Type of approximation to inv(A) used when forming S = D - C inv(A) B\n    - name: schur_pre\n      required: No\n      default: !!str S\n      cpp_type: MooseEnum\n      group_name: \n      options: S Sp A11\n      description: |\n        Type of Schur complement preconditioner matrix\n    - name: schur_type\n      required: No\n      default: !!str full\n      cpp_type: MooseEnum\n      group_name: \n      options: full upper lower\n      description: |\n        Type of Schur complement\n    - name: sides\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Sidesets Split operates on (omitting this implies "no sidesets"\n    - name: splitting\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the splits (subsystems) in the decomposition of this split\n    - name: splitting_type\n      required: No\n      default: !!str additive\n      cpp_type: MooseEnum\n      group_name: \n      options: additive multiplicative symmetric_multiplicative schur\n      description: |\n        Split decomposition type\n    - name: type\n      required: No\n      default: !!str Split\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unsides\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        Variables Split operates on (omitting this implies "all variables"\n    subblocks:\n- name: /ThermalContact\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /ThermalContact/*\n    description: |\n      \n    parameters:\n    - name: conductivity_master_name\n      required: No\n      default: !!str thermal_conductivity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the MaterialProperty associated with conductivity ("thermal_conductivity" in the case of heat conduction)\n    - name: conductivity_name\n      required: No\n      default: !!str thermal_conductivity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the MaterialProperty associated with conductivity ("thermal_conductivity" in the case of heat conduction)\n    - name: gap_aux_type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose object that will be used for computing the gap size\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The master surface\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: quadrature\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use quadrature point based gap heat transfer\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The slave surface\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose object that will be used for heat conduction over the gap\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable for thermal contact\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The z displacement\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The Auxiliary Variable to (optionally) save the boundary flux in\n    - name: contact_pressure\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The contact pressure variable\n    - name: gap_conductivity\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The thermal conductivity of the gap material\n    - name: gap_conductivity_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Thermal conductivity of the gap material as a function.  Multiplied by gap_conductivity.\n    - name: gap_conductivity_function_variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable to be used in gap_conductivity_function in place of time\n    subblocks:\n- name: /Transfers\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Transfers/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Transfers/MultiAppCopyTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppCopyTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppInterpolationTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interp_type\n      required: No\n      default: !!str inverse_distance\n      cpp_type: MooseEnum\n      group_name: \n      options: inverse_distance radial_basis\n      description: |\n        The algorithm to use for interpolation.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: num_points\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of nearest points to use for interpolation.\n    - name: power\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The polynomial power to use for calculation of the decay in the interpolation.\n    - name: radius\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppInterpolationTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppMeshFunctionTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: error_on_miss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to error in the case that a target point is not found in the source domain.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppMeshFunctionTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppNearestNodeTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fixed_meshes\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary we are transferring from (if not specified, whole domain is used).\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppNearestNodeTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorInterpolationTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interp_type\n      required: No\n      default: !!str inverse_distance\n      cpp_type: MooseEnum\n      group_name: \n      options: inverse_distance radial_basis\n      description: |\n        The algorithm to use for interpolation.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: num_points\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of nearest points to use for interpolation.\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The Postprocessor to interpolate.\n    - name: power\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The polynomial power to use for calculation of the decay in the interpolation.\n    - name: radius\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorInterpolationTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorToAuxScalarTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the Master to transfer the value from.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: to_aux_scalar\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar Aux variable in the MultiApp to transfer the value to.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorToAuxScalarTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the Master to transfer the value from.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: reduction_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: average sum maximum minimum\n      description: |\n        The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n    - name: to_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppProjectionTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fixed_meshes\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: proj_type\n      required: No\n      default: !!str l2\n      cpp_type: MooseEnum\n      group_name: \n      options: l2\n      description: |\n        The type of the projection.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppProjectionTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppUserObjectTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: type\n      required: No\n      default: !!str MultiAppUserObjectTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp\'s input file!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppVariableValueSamplePostprocessorTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppVariableValueSamplePostprocessorTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppVariableValueSampleTransfer\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str SAME_AS_MULTIAPP\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppVariableValueSampleTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n- name: /UserObjects\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /UserObjects/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /UserObjects/AreaPostprocessor\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AreaPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/AverageElementSize\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageElementSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/AverageNodalVariableValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageNodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/CInterfacePosition\n    description: |\n      \n    parameters:\n    - name: RefVal\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Variable value used to determine interface position\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the direction the position is measured in\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CInterfacePosition\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/CavityPressurePostprocessor\n    description: |\n      \n    parameters:\n    - name: cavity_pressure_uo\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CavityPressureUserObject that computes the initial moles.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: quantity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The quantity to report.\n    - name: type\n      required: No\n      default: !!str CavityPressurePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/CavityPressureUserObject\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The universal gas constant for the units used.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: initial_pressure\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The initial pressure in the cavity.  If not given, a zero initial pressure will be used.\n    - name: initial_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Initial temperature (optional)\n    - name: material_input\n      required: No\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        The name of the postprocessor(s) that holds the amount of material injected into the cavity.\n    - name: startup_time\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The amount of time during which the pressure will ramp from zero to its true value.\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the average temperature postprocessor value.\n    - name: type\n      required: No\n      default: !!str CavityPressureUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the internal volume postprocessor value.\n    subblocks:\n  - name: /UserObjects/ComputeGrainCenterUserObject\n    description: |\n      Userobject for calculating the grain volume and grain center\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        order parameters\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeGrainCenterUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ComputeGrainForceAndTorque\n    description: |\n      Userobject for calculating force and torque acting on a grain\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: force_density\n      required: No\n      default: !!str force_density\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Force density material\n    - name: grain_data\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        center of mass of grains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeGrainForceAndTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedMaskedNormalNoise\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mask\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedMaskedNormalNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedMaskedUniformNoise\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mask\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedMaskedUniformNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedNormalNoise\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedNormalNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedUniformNoise\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedUniformNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConstantGrainForceAndTorque\n    description: |\n      Userobject for calculating force and torque acting on a grain\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: force\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        force acting on grains\n    - name: torque\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        torque acting on grains\n    - name: type\n      required: No\n      default: !!str ConstantGrainForceAndTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/CrackFrontData\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front where data is to be reported\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the reported quantity\n    - name: type\n      required: No\n      default: !!str CrackFrontData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of a variable whose value at the crack front is to be reported\n    subblocks:\n  - name: /UserObjects/CrackFrontDefinition\n    description: |\n      \n    parameters:\n    - name: 2d\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Treat body as two-dimensional\n    - name: axis_2d\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Out of plane axis for models treated as two-dimensional (0=x, 1=y, 2=z)\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_direction_method\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: CrackDirectionVector CrackMouth CurvedCrackFront\n      description: |\n        Method to determine direction of crack propagation.  Choices are: CrackDirectionVector CrackMouth CurvedCrackFront\n    - name: crack_direction_vector\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of crack propagation\n    - name: crack_direction_vector_end_1\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of crack propagation for the node at end 1 of the crack\n    - name: crack_direction_vector_end_2\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of crack propagation for the node at end 2 of the crack\n    - name: crack_end_direction_method\n      required: No\n      default: !!str NoSpecialTreatment\n      cpp_type: MooseEnum\n      group_name: \n      options: NoSpecialTreatment CrackDirectionVector\n      description: |\n        Method to determine direction of crack propagation at ends of crack.  Choices are: NoSpecialTreatment CrackDirectionVector\n    - name: crack_front_points\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        Set of points to define crack front\n    - name: crack_mouth_boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Boundaries whose average coordinate defines the crack mouth\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable containing the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable containing the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable containing the z displacement\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: intersecting_boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Boundaries intersected by ends of crack\n    - name: last_ring\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of rings of nodes to generate\n    - name: q_function_rings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Generate rings of nodes for q-function\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: t_stress\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate T-stress\n    - name: type\n      required: No\n      default: !!str CrackFrontDefinition\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/DifferencePostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str DifferencePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value1\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        First value\n    - name: value2\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Second value\n    subblocks:\n  - name: /UserObjects/DiscreteNucleationInserter\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: hold_time\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Time to keep each nucleus active\n    - name: probability\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Probability density for inserting a discrete nucleus\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: test\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Insert a fixed nucleus at a point in the simulation cell\n    - name: type\n      required: No\n      default: !!str DiscreteNucleationInserter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/DiscreteNucleationMap\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_BEGIN\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: inserter\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        DiscreteNucleationInserter user object\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Nucleus interface width for smooth nuclei\n    - name: periodic\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Use the periodicity settings of this variable to populate the grain map\n    - name: radius\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Radius for the inserted nuclei\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DiscreteNucleationMap\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/EBSDReader\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: custom_columns\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of additional custom data columns to read from the EBSD file\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str EBSDReader\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ElementAverageTimeDerivative\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementAverageValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementExtremeValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/ElementH1Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementH1SemiError\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1SemiError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementIntegralMaterialProperty\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mat_prop\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the material property\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralMaterialProperty\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ElementIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementIntegralVariableUserObject\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariableUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Difference\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: other_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compare to\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Difference\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Norm\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementPropertyReadFile\n    description: |\n      User Object to read property data from an external file and assign to elements: Works only for Rectangular geometry (2D-3D)\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: ngrain\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains\n    - name: nprop\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of tabulated property values\n    - name: prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the property file name\n    - name: rand_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        random seed\n    - name: read_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: element grain none\n      description: |\n        Type of property distribution: element:element by element property variation; grain:voronoi grain structure\n    - name: rve_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: periodic none\n      description: |\n        Periodic or non-periodic grain distribution: Default is non-periodic\n    - name: type\n      required: No\n      default: !!str ElementPropertyReadFile\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ElementVectorL2Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function_x\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementVectorL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in x direction\n    - name: var_y\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in y direction\n    - name: var_z\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in z direction\n    subblocks:\n  - name: /UserObjects/ElementW1pError\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementW1pError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementalVariableValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elementid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the element where we monitor\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ElementalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /UserObjects/EmptyPostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str EmptyPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/EulerAngleFileReader\n    description: |\n      Read Euler angle data from a file and provide it to other objects.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Euler angle data file name\n    - name: type\n      required: No\n      default: !!str EulerAngleFileReader\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ExecutionerAttributeReporter\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ExecutionerAttributeReporter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/FauxGrainTracker\n    description: |\n      Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: center_of_mass_tracking\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the grain tracker uses bounding sphere centersor center of mass calculations for tracking grains\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: compute_op_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convex_hull_buffer\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The buffer around the convex hull used to determinewhen features intersect\n    - name: ebsd_reader\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: EBSD Reader for initial condition\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str FauxGrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /UserObjects/FeatureFloodCount\n    description: |\n      \n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str FeatureFloodCount\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /UserObjects/FunctionSideIntegral\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        This postprocessor will return the integral of this function over the boundary\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str FunctionSideIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/FunctionValuePostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function which supplies the postprocessor value.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        A point in space to be given to the function Default: (0, 0, 0)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the function\n    - name: type\n      required: No\n      default: !!str FunctionValuePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/GrainForceAndTorqueSum\n    description: |\n      Userobject for summing forces and torques acting on a grain\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_forces\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that provides forces and torques applied to grains\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains\n    - name: type\n      required: No\n      default: !!str GrainForceAndTorqueSum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/GrainTracker\n    description: |\n      \n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: center_of_mass_tracking\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the grain tracker uses bounding sphere centersor center of mass calcuations for tracking grains\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: compute_op_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convex_hull_buffer\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The buffer around the convex hull used to determinewhen features intersect\n    - name: ebsd_reader\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: EBSD Reader for initial condition\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str GrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /UserObjects/HEVPEqvPlasticStrain\n    description: |\n      User Object to integrate equivalent plastic strain\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: intvar_rate_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of internal variable property: Same as internal variable rate user object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HEVPEqvPlasticStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/HEVPEqvPlasticStrainRate\n    description: |\n      User Object computing equivalent plastic strain rate\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flow_rate_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of flow rate property: Same as the flow rate user object name specified in input file\n    - name: h_scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scaling parameter\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HEVPEqvPlasticStrainRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/HEVPFlowRatePowerLawJ2\n    description: |\n      User object to evaluate power law flow rate and flow direction based on J2\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of tensor properties to fetch\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flow_rate_exponent\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        Power law exponent in flow rate equation\n    - name: flow_rate_tol\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for flow rate\n    - name: reference_flow_rate\n      required: No\n      default: !!str 0.001\n      cpp_type: double\n      group_name: \n      description: |\n        Reference flow rate for rate dependent flow\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: strength_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of strength property: Same as strength user object specified in input file\n    - name: type\n      required: No\n      default: !!str HEVPFlowRatePowerLawJ2\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/HEVPLinearHardening\n    description: |\n      User Object for linear hardening\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: intvar_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of internal variable property to calculate material resistance: Same as internal variable user object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: slope\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Linear hardening slope\n    - name: type\n      required: No\n      default: !!str HEVPLinearHardening\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield strength\n    subblocks:\n  - name: /UserObjects/HEVPRambergOsgoodHardening\n    description: |\n      User object for Ramberg-Osgood hardening power law hardening\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: hardening_exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The hardening exponent value\n    - name: intvar_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of internal variable property to calculate material resistance: Same as internal variable user object\n    - name: reference_plastic_strain\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference plastic strain value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HEVPRambergOsgoodHardening\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield strength\n    subblocks:\n  - name: /UserObjects/HomogenizedElasticConstants\n    description: |\n      \n    parameters:\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: column\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dx_xx\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xx\n    - name: dx_xy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xy\n    - name: dx_yy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yy\n    - name: dx_yz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yz\n    - name: dx_zx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zx\n    - name: dx_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zz\n    - name: dy_xx\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xx\n    - name: dy_xy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xy\n    - name: dy_yy\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yy\n    - name: dy_yz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yz\n    - name: dy_zx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zx\n    - name: dy_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zz\n    - name: dz_xx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xx\n    - name: dz_xy\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in xy\n    - name: dz_yy\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yy\n    - name: dz_yz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in yz\n    - name: dz_zx\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zx\n    - name: dz_zz\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in zz\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: row\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HomogenizedElasticConstants\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/HomogenizedThermalConductivity\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction this pp acts in (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusion_coefficient_name\n      required: No\n      default: !!str thermal_conductivity\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Property name of the diffusivity (Default: thermal_conductivity)\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in x\n    - name: temp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in y\n    - name: temp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        solution in z\n    - name: type\n      required: No\n      default: !!str HomogenizedThermalConductivity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/INSExplicitTimestepSelector\n    description: |\n      \n    parameters:\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        0 < beta < 1, choose some fraction of the limiting timestep size\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        dynamic viscosity\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rho\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        density\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str INSExplicitTimestepSelector\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: vel_mag\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Velocity magnitude\n    subblocks:\n  - name: /UserObjects/InteractionIntegral\n    description: |\n      \n    parameters:\n    - name: K_factor\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Conversion factor between interaction integral and stress intensity factor K\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The z displacement\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: q\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The q function, aux variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: t_stress\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate T-stress\n    - name: type\n      required: No\n      default: !!str InteractionIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/InternalVolume\n    description: |\n      \n    parameters:\n    - name: addition\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        An additional volume to be included in the internal volume calculation\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The component to use in the integration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the internal volume calculation\n    - name: type\n      required: No\n      default: !!str InternalVolume\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/JIntegral\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convert_J_to_K\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Convert J-integral to stress intensity factor K.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio\n    - name: q\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The q function, aux variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: type\n      required: No\n      default: !!str JIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /UserObjects/LayeredAverage\n    description: |\n      \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LayeredAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/LayeredIntegral\n    description: |\n      \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LayeredIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/LayeredSideAverage\n    description: |\n      \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/LayeredSideFluxAverage\n    description: |\n      \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideFluxAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/LayeredSideIntegral\n    description: |\n      \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/MaskedGrainForceAndTorque\n    description: |\n      Userobject for masking/pinning grains and making forces and torques acting on that grain zero\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting force and torque acting on grains\n    - name: pinned_grains\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Grain numbers for pinned grains\n    - name: type\n      required: No\n      default: !!str MaskedGrainForceAndTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Mass\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Mass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/MaterialTensorIntegral\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 1 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction vector\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis used to calculate some material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n      description: |\n        A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The material tensor name.\n    - name: type\n      required: No\n      default: !!str MaterialTensorIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/MaterialTensorOnLine\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 1 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction vector\n    - name: element_line_id\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Element line ID: if not zero, output stress at integration points\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: filename\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Output file name\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n    - name: line_id\n      required: No\n      default: !!str 1\n      cpp_type: int\n      group_name: \n      description: |\n        ID of the line of elements to output stresses on\n    - name: line_point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point of line along which material data is output\n    - name: line_point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point of line along which material data is output\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis used to calculate some material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n      description: |\n        A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The material tensor name.\n    - name: type\n      required: No\n      default: !!str MaterialTensorOnLine\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/MixedModeEquivalentK\n    description: |\n      \n    parameters:\n    - name: KIII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KIII postprocessor\n    - name: KII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KII postprocessor\n    - name: KI_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KI postprocessor\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: type\n      required: No\n      default: !!str MixedModeEquivalentK\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NearestPointLayeredAverage\n    description: |\n      \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Layered averages will be computed in space closest to these points.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestPointLayeredAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/NodalArea\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str LINEAR\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str NodalArea\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/NodalExtremeValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalL2Error\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalL2Norm\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalMaxValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalMaxVarChange\n    description: |\n      This postprocessor returns the value max(abs(variable - variable_old)) for the specified variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxVarChange\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalNormalsCorner\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: corner_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        Node set ID which contains the nodes that are in \'corners\'.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str NodalNormalsCorner\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalNormalsEvaluator\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalNormalsEvaluator\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalNormalsPreprocessor\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: corner_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        Node set ID which contains the nodes that are in \'corners\'.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalNormalsPreprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalProxyMaxValue\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalProxyMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalSum\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalSum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalVariableValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: nodeid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the node where we monitor\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the variable\n    - name: type\n      required: No\n      default: !!str NodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /UserObjects/NodalVolumeFraction\n    description: |\n      \n    parameters:\n    - name: Avrami_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        filename for Avrami analysis info (ln time and Avrami)\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: compute_boundary_intersecting_volume\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, also compute the (normalized) volume of bubbles which intersect the boundary\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: equil_fraction\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium volume fraction of 2nd phase for Avrami analysis\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str NODAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: mesh_volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor from which to get mesh volume\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str NodalVolumeFraction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether bubbles are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /UserObjects/NumDOFs\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumDOFs\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumElems\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumElems\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumLinearIterations\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumLinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumNodes\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNodes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumNonlinearIterations\n    description: |\n      \n    parameters:\n    - name: accumulate_over_step\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When set to true, accumulates to count the total over all Picard iterations for each step\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNonlinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumPicardIterations\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumPicardIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumResidualEvaluations\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumResidualEvaluations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumVars\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: system\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: nonlinear auxiliary\n      description: |\n        The system for which you want to print the number of variables.\n    - name: type\n      required: No\n      default: !!str NumVars\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PFCElementEnergyIntegral\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str 1833\n      cpp_type: double\n      group_name: \n      description: |\n        Temperature of simulation\n    - name: type\n      required: No\n      default: !!str PFCElementEnergyIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/PercentChangePostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor used for exit criterion\n    - name: type\n      required: No\n      default: !!str PercentChangePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PerformanceData\n    description: |\n      \n    parameters:\n    - name: column\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub\n      description: |\n        The column you want the value of.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: event\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the event.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str PerformanceData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PointValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The physical point where the solution will be evaluated.\n    - name: type\n      required: No\n      default: !!str PointValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on.\n    subblocks:\n  - name: /UserObjects/RealControlParameterReporter\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: parameter\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The input parameter to control.\n    - name: type\n      required: No\n      default: !!str RealControlParameterReporter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Receiver\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: default\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The default value\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: initialize_old\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Initialize the old postprocessor value with the default value\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str Receiver\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Residual\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str Residual\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsDensityConstBulk\n    description: |\n      Fluid density assuming constant bulk modulus.  dens0 * Exp(pressure/bulk)\n    parameters:\n    - name: bulk_mod\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Bulk modulus of fluid.  Eg 2E9\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dens0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference density of fluid.  Eg 1000\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str RichardsDensityConstBulk\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsDensityIdeal\n    description: |\n      Fluid density of ideal gas.  Density = slope*(p - p0)\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: p0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Density = slope*(p - p0)\n    - name: slope\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Density = slope*(p - p0)\n    - name: type\n      required: No\n      default: !!str RichardsDensityIdeal\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsDensityMethane20degC\n    description: |\n      Methane density (kg/m^3) at 20degC.  Pressure is assumed to be measured in Pascals.  NOTE: this expression is only valid to about P=20MPa.  Use van der Waals (RichardsDensityVDW) for higher pressures.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str RichardsDensityMethane20degC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsDensityVDW\n    description: |\n      Density of van der Waals gas.\n    parameters:\n    - name: a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Parameter \'a\' in the van der Waals expression (P + n^2 a/V^2)(V - nb) = nRT.  Example for methane 0.2303 Pa m^6 mol^-2\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Parameter \'b\' in the van der Waals expression (P + n^2 a/V^2)(V - nb) = nRT.  Example for methane 4.31E-5 m^3/mol\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: infinity_ratio\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        For P<0 the density is not physically defined, but numerically it is advantageous to define it:  density(P=-infinity) = -infinity_ratio*molar_mass, and density tends exponentially towards this value as P -> -infinity.  (Units are mol/m^3).\n    - name: molar_mass\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Molar mass of the gas.  Example for methane 16.04246E-3 kg/mol\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: type\n      required: No\n      default: !!str RichardsDensityVDW\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsExcavFlow\n    description: |\n      Records total flow INTO an excavation (if quantity is positive then flow has occured from rock into excavation void)\n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: excav_geom_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function describing the excavation geometry (type RichardsExcavGeom)\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: type\n      required: No\n      default: !!str RichardsExcavFlow\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/RichardsHalfGaussianSinkFlux\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: centre\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Centre of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: max\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Maximum of the flux (measured in kg.m^-2.s^-1).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.  Note, to make this a source rather than a sink, let max<0\n    - name: multiplying_fcn\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The flux will be multiplied by this spatially-and-temporally varying function.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: sd\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Standard deviation of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n    - name: type\n      required: No\n      default: !!str RichardsHalfGaussianSinkFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/RichardsMass\n    description: |\n      Returns the mass in a region.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RichardsMass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/RichardsPiecewiseLinearSinkFlux\n    description: |\n      Records the fluid flow into a sink (positive values indicate fluid is flowing from porespace into the sink).\n    parameters:\n    - name: bare_fluxes\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of flux values (measured in kg.m^-2.s^-1 for use_mobility=false, and in Pa.s^-1 if use_mobility=true).  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.  A piecewise-linear fit is performed to the (pressure,bare_fluxes) pairs to obtain the flux at any arbitrary pressure, and the first or last bare_flux values are used if the quad-point pressure falls outside this range.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multiplying_fcn\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The flux will be multiplied by this spatially-and-temporally varying function.  This is useful if the boundary is a moving boundary controlled by RichardsExcav.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pressures\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tuple of pressure values.  Must be monotonically increasing.\n    - name: richardsVarNames_UO\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject that holds the list of Richards variable names.\n    - name: type\n      required: No\n      default: !!str RichardsPiecewiseLinearSinkFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_mobility\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If true, then fluxes are multiplied by (density*permeability_nn/viscosity), where the \'_nn\' indicates the component normal to the boundary.  In this case bare_flux is measured in Pa.s^-1.  This can be used in conjunction with use_relperm.\n    - name: use_relperm\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If true, then fluxes are multiplied by relative permeability.  This can be used in conjunction with use_mobility\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/RichardsPlotQuantity\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str RichardsPlotQuantity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uo\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        user object name that has the total mass value\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsRelPermBW\n    description: |\n      Broadbridge-White form of relative permeability.  Define s = (seff - Sn)/(Ss - Sn).  Then relperm = Kn + s^2(c-1)(Kn-Ks)/(c-s) if 0<s<1, otherwise relperm = Kn if s<=0, otherwise relperm = Ks if s>=1.\n    parameters:\n    - name: C\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        BW\'s C parameter.  Must be > 1.   Define s = (seff - Sn)/(Ss - Sn).  Then relperm = Kn + s^2(c-1)(Kn-Ks)/(c-s) if 0<s<1, otherwise relperm = Kn if s<=0, otherwise relperm = Ks if s>=1.\n    - name: Kn\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Relative permeability at Seff = Sn.  Must be < Ks\n    - name: Ks\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Relative permeability at Seff = Ss.  Must be > Kn\n    - name: Sn\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Low saturation.  This must be < Ss, and non-negative.  This is BW\'s initial effective saturation, below which effective saturation never goes in their simulations/models.  If Kn=0 then Sn is the immobile saturation.\n    - name: Ss\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        High saturation.  This must be > Sn and <= 1.  Effective saturation where porepressure = 0.  Effective saturation never exceeds this value in BW\'s simulations/models.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str RichardsRelPermBW\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsRelPermMonomial\n    description: |\n      Monomial form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^n if s<simm, otherwise relperm=1\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: n\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent.  Must be >= 0.   Define s = (seff - simm)/(1 - simm).  Then relperm = s^n\n    - name: simm\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Immobile saturation.  Must be between 0 and 1.   Define s = (seff - simm)/(1 - simm).  Then relperm = s^n\n    - name: type\n      required: No\n      default: !!str RichardsRelPermMonomial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: zero_to_the_zero\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        If n=0, this is the value of relative permeability for s<=simm\n    subblocks:\n  - name: /UserObjects/RichardsRelPermPower\n    description: |\n      Power form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = (n+1)s^n - ns^(n+1) if s<simm, otherwise relperm=1\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: n\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent.  Must be >= 2.   Define s = (seff - simm)/(1 - simm).  Then relperm = (n+1)s^n - ns^(n+1)\n    - name: simm\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Immobile saturation.  Must be between 0 and 1.   Define s = (seff - simm)/(1 - simm).  Then relperm = (n+1)s^n - ns^(n+1)\n    - name: type\n      required: No\n      default: !!str RichardsRelPermPower\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsRelPermPowerGas\n    description: |\n      Power form of relative permeability that might be useful for gases.  Define s = (seff - simm)/(1 - simm).  Then relperm = 1 - (n+1)(1-s)^n + n(1-s)^(n+1) if s<simm, otherwise relperm=1\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: n\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent.  Must be >= 2.   Define s = (seff - simm)/(1 - simm).  Then relperm = 1 - (n+1)(1-s)^n + n(1-s)^(n+1)\n    - name: simm\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Immobile saturation.  Must be between 0 and 1.   Define s = (seff - simm)/(1 - simm).  Then relperm = 1 - (n+1)(1-s)^n + n(1-s)^(n+1)\n    - name: type\n      required: No\n      default: !!str RichardsRelPermPowerGas\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsRelPermVG\n    description: |\n      VG form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2, if s>0, and relperm=0 otherwise\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set >0.5.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n    - name: simm\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Immobile saturation.  Must be between 0 and 1.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n    - name: type\n      required: No\n      default: !!str RichardsRelPermVG\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsRelPermVG1\n    description: |\n      VG1 form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2, if s>0, and relperm=0 otherwise\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set >0.5.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n    - name: scut\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        cutoff in effective saturation.\n    - name: simm\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Immobile saturation.  Must be between 0 and 1.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n    - name: type\n      required: No\n      default: !!str RichardsRelPermVG1\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSUPGnone\n    description: |\n      User object for no SUPG\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str RichardsSUPGnone\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSUPGstandard\n    description: |\n      Standard SUPG relationships for Richards flow based on Appendix A of      TJR Hughes, M Mallet and A Mizukami ``A new finite element formulation for computational fluid dynamics:: II. Behond SUPG\'\' Computer Methods in Applied Mechanics and Engineering 54 (1986) 341--355\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: p_SUPG\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        SUPG pressure.  This parameter controls the strength of the upwinding.  This parameter must be positive.  If you need to track advancing fronts in a problem, then set to less than your expected range of pressures in your unsaturated zone.  Otherwise, set larger, and then minimal upwinding will occur and convergence will typically be good.  If you need no SUPG, it is more efficient not to use this UserObject.\n    - name: type\n      required: No\n      default: !!str RichardsSUPGstandard\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSat\n    description: |\n      User object yielding saturation for a phase as a function of effective saturation of that phase\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: s_res\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Residual fluid saturation for the phase.  0 <= s_res < 1.\n    - name: sum_s_res\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Sum of s_res over all phases.  s_res <= sum_s_res < 1.  It is up to you to ensure the sum is done correctly.\n    - name: type\n      required: No\n      default: !!str RichardsSat\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff1BWsmall\n    description: |\n      Broadbridge-white form of effective saturation for negligable Kn.  Then porepressure = -las*( (1-th)/th - (1/c)Ln((C-th)/((C-1)th))), for th = (Seff - Sn)/(Ss - Sn).  A Lambert-W function must be evaluated to express Seff in terms of porepressure, which can be expensive\n    parameters:\n    - name: C\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        BW\'s C parameter.  Must be > 1.  Typical value would be 1.05.\n    - name: Sn\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Low saturation.  This must be < Ss, and non-negative.  This is BW\'s initial effective saturation, below which effective saturation never goes in their simulations/models.  If Kn=0 then Sn is the immobile saturation.  This form of effective saturation is only correct for Kn small.\n    - name: Ss\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        High saturation.  This must be > Sn and <= 1.  Effective saturation where porepressure = 0.  Effective saturation never exceeds this value in BW\'s simulations/models.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: las\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        BW\'s lambda_s parameter multiplied by (fluiddensity*gravity).  Must be > 0.  Typical value would be 1E5\n    - name: type\n      required: No\n      default: !!str RichardsSeff1BWsmall\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff1RSC\n    description: |\n      Rogers-Stallybrass-Clements version of effective saturation for the water phase, valid for residual saturations = 0, and viscosityOil = 2*viscosityWater.  seff_water = 1/Sqrt(1 + Exp((Pc - shift)/scale)), where scale = 0.25*scale_ratio*oil_viscosity.  Note that this effective saturation is mostly useful for 2-phase, not single-phase.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: oil_viscosity\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscosity of oil (gas) phase.  It is assumed this is double the water-phase viscosity.  (Note that this effective saturation is mostly useful for 2-phase, not single-phase.)\n    - name: scale_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        This is porosity/permeability/beta^2, where beta may be chosen by the user.  It has dimensions [time]\n    - name: shift\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        effective saturation is a function of (Pc - shift)\n    - name: type\n      required: No\n      default: !!str RichardsSeff1RSC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff1VG\n    description: |\n      van-Genuchten effective saturation as a function of pressure suitable for use in single-phase simulations..  seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n    parameters:\n    - name: al\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n    - name: type\n      required: No\n      default: !!str RichardsSeff1VG\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff1VGcut\n    description: |\n      cut van-Genuchten effective saturation as a function of capillary pressure.  Single-phase  seff = (1 + (-al*p)^(1/(1-m)))^(-m) for p>p_cut, otherwise user a a linear relationship that is chosen so the value and derivative match van-Genuchten at p=p_cut.\n    parameters:\n    - name: al\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n    - name: p_cut\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        cutoff in pressure.  Must be negative.  If p>p_cut then use van-Genuchten function.  Otherwise use a linear relationship which is chosen so the value and derivative match van-Genuchten at p=p_cut\n    - name: type\n      required: No\n      default: !!str RichardsSeff1VGcut\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff2gasRSC\n    description: |\n      Rogers-Stallybrass-Clements version of effective saturation for the oil (gas) phase, valid for residual saturations = 0, and viscosityOil = 2*viscosityWater.  seff_gas = 1 - 1/Sqrt(1 + Exp((Pc - shift)/scale)), where scale = 0.25*scale_ratio*oil_viscosity\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: oil_viscosity\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscosity of oil (gas) phase.  It is assumed this is double the water-phase viscosity\n    - name: scale_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        This is porosity/permeability/beta^2, where beta may be chosen by the user (RSC define beta<0, but MOOSE only uses beta^2, so its sign is irrelevant).  It has dimensions [time]\n    - name: shift\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        effective saturation is a function of (Pc - shift)\n    - name: type\n      required: No\n      default: !!str RichardsSeff2gasRSC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff2gasVG\n    description: |\n      van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the gas phase in two-phase simulations.  With Pc=Pgas-Pwater,   seff = 1 - (1 + (al*pc)^(1/(1-m)))^(-m)\n    parameters:\n    - name: al\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n    - name: type\n      required: No\n      default: !!str RichardsSeff2gasVG\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff2gasVGshifted\n    description: |\n      Shifted van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the gas phase in two-phase simulations.     seff = (1 + (-al*(P0-p1-shift))^(1/(1-m)))^(-m), then scaled so it runs between 0 and 1.\n    parameters:\n    - name: al\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten alpha parameter.  Must be positive.   seff = (1 + (-al*(P0-P1-shift))^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   seff = (1 + (-al*(P0-P1-shift)^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n    - name: shift\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Shift in capillary-pressure porepressure values.  Standard van-Genuchten Seff = Seff(Pwater-Pgas) is shifted to the right, and then scaled to 0<=Seff<=1.  This means that dS/dP>0 at S=1 which is useful to provide nonsingular Jacobians for small dt.\n    - name: type\n      required: No\n      default: !!str RichardsSeff2gasVGshifted\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff2waterRSC\n    description: |\n      Rogers-Stallybrass-Clements version of effective saturation for the water phase, valid for residual saturations = 0, and viscosityOil = 2*viscosityWater.  seff_water = 1/Sqrt(1 + Exp(Pc - shift)/scale)), where scale = 0.25*scale_ratio*oil_viscosity\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: oil_viscosity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscosity of oil (gas) phase.  It is assumed this is double the water-phase viscosity\n    - name: scale_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        This is porosity/permeability/beta^2, where beta may be chosen by the user (RSC define beta<0, but MOOSE only uses beta^2, so its sign is irrelevant).  It has dimensions [time]\n    - name: shift\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        effective saturation is a function of (Pc - shift)\n    - name: type\n      required: No\n      default: !!str RichardsSeff2waterRSC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff2waterVG\n    description: |\n      van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the water phase in two-phase simulations.  With Pc=Pgas-Pwater,   seff = (1 + (al*pc)^(1/(1-m)))^(-m)\n    parameters:\n    - name: al\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n    - name: type\n      required: No\n      default: !!str RichardsSeff2waterVG\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSeff2waterVGshifted\n    description: |\n      Shifted van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the water phase in two-phase simulations.     seff = (1 + (-al*(P0-p1-shift))^(1/(1-m)))^(-m), then scaled so it runs between 0 and 1.\n    parameters:\n    - name: al\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten alpha parameter.  Must be positive.   seff = (1 + (-al*(P0-P1-shift))^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   seff = (1 + (-al*(P0-P1-shift)^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n    - name: shift\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Shift in capillary-pressure porepressure values.  Standard van-Genuchten Seff = Seff(Pwater-Pgas) is shifted to the right, and then scaled to 0<=Seff<=1.  This means that dS/dP>0 at S=1 which is useful to provide nonsingular Jacobians for small dt.\n    - name: type\n      required: No\n      default: !!str RichardsSeff2waterVGshifted\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsSumQuantity\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str RichardsSumQuantity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RichardsVarNames\n    description: |\n      Holds information on the porepressure variable names\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: richards_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables that represent the porepressures or (porepressure, saturations).  In single-phase models you will just have one (eg \'pressure\'), in two-phase models you will have two (eg \'p_water p_gas\', or \'p_water s_water\', etc.  These names must also be used in your kernels and material.\n    - name: type\n      required: No\n      default: !!str RichardsVarNames\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_types\n      required: No\n      default: !!str pppp\n      cpp_type: MooseEnum\n      group_name: \n      options: pppp\n      description: |\n        Variable types for the problem.  Eg, \'pppp\' means all the variables are pressure variables\n    subblocks:\n  - name: /UserObjects/RigidBodyModes3D\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-displacement\n    - name: disp_y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-displacement\n    - name: disp_z\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-displacement\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: modes\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Names of the RigidBody3D modes computed here. Select from: trans_x, trans_y, trans_z, rot_x, rot_y, rot_z\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: subspace_indices\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Indices of FEProblem subspace vectors containing rigid body modes\n    - name: subspace_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        FEProblem subspace containing rigid body mode vectors\n    - name: type\n      required: No\n      default: !!str RigidBodyModes3D\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RigidBodyModesRZ\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disp_r\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        r-displacement\n    - name: disp_z\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-displacement\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: subspace_indices\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Indices of FEProblem subspace vectors containg rigid body modes\n    - name: subspace_name\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        FEProblem subspace containing RZ rigid body modes\n    - name: type\n      required: No\n      default: !!str RigidBodyModesRZ\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RunTime\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: time_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: alive active\n      description: |\n        Whether to output the total elapsed or just the active time\n    - name: type\n      required: No\n      default: !!str RunTime\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ScalarL2Error\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar variable\n    subblocks:\n  - name: /UserObjects/ScalarVariable\n    description: |\n      \n    parameters:\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component to output for this variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarVariable\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of the variable\n    subblocks:\n  - name: /UserObjects/SideAverageValue\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideFluxAverage\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideFluxIntegral\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SolutionRasterizer\n    description: |\n      Process an XYZ file of atomic coordinates and filter atoms via threshold or map variable values.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: es\n      required: No\n      default: !!str <not supplied>\n      cpp_type: FileName\n      group_name: \n      description: |\n        The name of the file holding the equation system info in xda format (xda only).\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mesh\n      required: Yes\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \n      description: |\n        The name of the mesh file (must be xda or exodusII file).\n    - name: raster_mode\n      required: No\n      default: !!str MAP\n      cpp_type: MooseEnum\n      group_name: \n      options: MAP FILTER\n      description: |\n        Rasterization mode (MAP|FILTER).\n    - name: rotation0_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n    - name: rotation0_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: rotation1_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n    - name: rotation1_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: scale\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale factor for points in the simulation\n    - name: scale_multiplier\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale multiplying factor for points in the simulation\n    - name: system\n      required: No\n      default: !!str nl0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the system to pull values out of (xda only).\n    - name: system_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The name of the nodal and elemental variables from the file you want to use for values\n    - name: threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Accept atoms with a variable value above this threshold in FILTER mode.\n    - name: timestep\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n    - name: transformation_order\n      required: No\n      default: !!str SCALE TRANSLATION\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: rotation0 translation scale rotation1 scale_multiplier\n      description: |\n        The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = \'rotation0 scale_multiplier translation scale rotation1\' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n    - name: translation\n      required: No\n      default: !!str 0 0 0 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Translation factors for x,y,z coordinates of the simulation\n    - name: type\n      required: No\n      default: !!str SolutionRasterizer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Variable from the mesh file to use for mapping to or filtering of the atoms.\n    - name: xyz_input\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        XYZ input file.\n    - name: xyz_output\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        XYZ output file.\n    subblocks:\n  - name: /UserObjects/SolutionUserObject\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: es\n      required: No\n      default: !!str <not supplied>\n      cpp_type: FileName\n      group_name: \n      description: |\n        The name of the file holding the equation system info in xda format (xda only).\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mesh\n      required: Yes\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \n      description: |\n        The name of the mesh file (must be xda or exodusII file).\n    - name: rotation0_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n    - name: rotation0_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: rotation1_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n    - name: rotation1_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: scale\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale factor for points in the simulation\n    - name: scale_multiplier\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale multiplying factor for points in the simulation\n    - name: system\n      required: No\n      default: !!str nl0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the system to pull values out of (xda only).\n    - name: system_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The name of the nodal and elemental variables from the file you want to use for values\n    - name: timestep\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n    - name: transformation_order\n      required: No\n      default: !!str SCALE TRANSLATION\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: rotation0 translation scale rotation1 scale_multiplier\n      description: |\n        The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = \'rotation0 scale_multiplier translation scale rotation1\' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n    - name: translation\n      required: No\n      default: !!str 0 0 0 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Translation factors for x,y,z coordinates of the simulation\n    - name: type\n      required: No\n      default: !!str SolutionUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningConstant\n    description: |\n      No hardening - the parameter is independent of the internal parameter(s)\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convert_to_radians\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, the value you entered will be multiplied by Pi/180 before passing to the Plasticity algorithms\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningConstant\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal parameter.  This is perfect plasticity - there is no hardening.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningCubic\n    description: |\n      Hardening is Cubic\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the internal_parameter when hardening begins\n    - name: internal_limit\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the internal_parameter when hardening ends.  This hardening forms a cubic between (internal_0, value_0) and (internal_limit, value_residual) that is smooth at internal_0 and internal_limit\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningCubic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal_parameter <= internal_0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter >= internal_limit.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningCutExponential\n    description: |\n      Hardening is Cut-exponential\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The cutoff of internal parameter\n    - name: rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Let p = internal_parameter.  Then value = value_0 for p<internal_0, and otherwise, value = value_residual + (value_0 - value_residual)*exp(-rate*(p - internal_0)\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningCutExponential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal_parameter <= internal_0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningExponential\n    description: |\n      Hardening is Exponential\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Let p = internal_parameter.  Then value = value_residual + (value_0 - value_residual)*exp(-rate*intnal_parameter)\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningExponential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter at internal_parameter = 0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningGaussian\n    description: |\n      Hardening is Gaussian\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the internal_parameter when hardening begins\n    - name: rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Let p = internal_parameter.  Then value = value_0 for p<internal_0, and value = value_residual + (value_0 - value_residual)*exp(-0.5*rate*(p - internal_0)^2)\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningGaussian\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal_parameter <= internal_0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticJ2\n    description: |\n      J2 plasticity, associative, with hardening\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticJ2\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    - name: yield_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticMeanCap\n    description: |\n      Class that limits the mean stress.  Yield function = a*mean_stress - strength.  mean_stress = (stress_xx + stress_yy + stress_zz)/3\n    parameters:\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*mean_stress - strength\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Yield function = a*mean_stress - strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticMeanCap\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticMohrCoulomb\n    description: |\n      Non-associative Mohr-Coulomb plasticity with hardening/softening\n    parameters:\n    - name: cap_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the \'cap\' will be totally inactive).  Typical value is 1/tensile_strength\n    - name: cap_start\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians).  Physically the friction angle should be between 0 and 90deg.\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: mc_edge_smoother\n      required: No\n      default: !!str 25\n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the edges of the cone are smoothed by the given amount.\n    - name: mc_lode_cutoff\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n    - name: mc_tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the cone vertex at mean = cohesion*cot(friction_angle), will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: tip_scheme\n      required: No\n      default: !!str hyperbolic\n      cpp_type: MooseEnum\n      group_name: \n      options: hyperbolic cap\n      description: |\n        Scheme by which the pyramid\'s tip will be smoothed.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticMohrCoulomb\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticMohrCoulombMulti\n    description: |\n      Non-associative Mohr-Coulomb plasticity with hardening/softening\n    parameters:\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians)\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians)\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: shift\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  Default = f_tol.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticMohrCoulombMulti\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticSimpleTester\n    description: |\n      Class that can be used for testing multi-surface plasticity models.  Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    parameters:\n    - name: a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: c\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: d\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: e\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: f\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: strength\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticSimpleTester\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticTensile\n    description: |\n      Associative tensile plasticity with hardening/softening, and tensile_strength = 1\n    parameters:\n    - name: cap_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the \'cap\' will be totally inactive).  Typical value is 1/tensile_strength\n    - name: cap_start\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: tensile_edge_smoother\n      required: No\n      default: !!str 25\n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the edges of the cone are smoothed by the given amount.\n    - name: tensile_lode_cutoff\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n    - name: tensile_tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        For the \'hyperbolic\' tip_scheme, the pyramid vertex will be smoothed by the given amount.  For the \'cap\' tip_scheme, additional smoothing will occur.  Typical value is 0.1*tensile_strength\n    - name: tip_scheme\n      required: No\n      default: !!str hyperbolic\n      cpp_type: MooseEnum\n      group_name: \n      options: hyperbolic cap\n      description: |\n        Scheme by which the pyramid\'s tip will be smoothed.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticTensile\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticTensileMulti\n    description: |\n      Associative tensile plasticity with hardening/softening\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: shift\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  Default = f_tol.\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticTensileMulti\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticWeakPlaneShear\n    description: |\n      Non-associative finite-strain weak-plane shear perfect plasticity.  Here cohesion = 1, tan(phi) = 1 = tan(psi)\n    parameters:\n    - name: cap_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the \'cap\' will be totally inactive).  Typical value is 1/cohesion\n    - name: cap_start\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, smoothing is performed in the stress_zz > cap_start region\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        For the \'hyperbolic\' tip_scheme, the cone vertex at shear-stress = 0 will be smoothed by the given amount.  For the \'cap\' tip_scheme, additional smoothing will occur.  Typical value is 0.1*cohesion\n    - name: tan_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n    - name: tan_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n    - name: tip_scheme\n      required: No\n      default: !!str hyperbolic\n      cpp_type: MooseEnum\n      group_name: \n      options: hyperbolic cap\n      description: |\n        Scheme by which the cone\'s tip will be smoothed.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticWeakPlaneShear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticWeakPlaneTensile\n    description: |\n      Associative weak-plane tensile plasticity with hardening/softening\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticWeakPlaneTensile\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticWeakPlaneTensileN\n    description: |\n      Associative weak-plane tensile plasticity with hardening/softening, with specified, fixed normal vector.  (WeakPlaneTensile combined with specifying N in the Material might be preferable to you.)\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: normal_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The normal vector to the weak plane\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticWeakPlaneTensileN\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/Terminator\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: expression\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n    - name: type\n      required: No\n      default: !!str Terminator\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ThermalCond\n    description: |\n      \n    parameters:\n    - name: T_hot\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Temperature on \'hot\' boundary in K\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Length between sides of sample in length_scale\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flux\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Heat flux out of \'cold\' boundary in solution units, should always be positive\n    - name: k0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Initial value of the thermal conductivity\n    - name: length_scale\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        lengthscale of the solution, default is 1e-8\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ThermalCond\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/TimestepSize\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TimestepSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TorqueReaction\n    description: |\n      \n    parameters:\n    - name: axis_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of the axis of rotation\n    - name: axis_origin\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of the axis of rotation\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: react_x\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The x reaction variable\n    - name: react_y\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The y reaction variable\n    - name: react_z\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The z reaction variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TorqueReaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TotalVariableValue\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TotalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    subblocks:\n  - name: /UserObjects/VolumePostprocessor\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VolumePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Variables\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Variables/*\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The block id where this variable lives\n    - name: eigen\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        True to make this variable an eigen variable\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: initial_condition\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Specifies the initial condition for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: Advanced\n      description: |\n        Specifies a scaling factor to apply to this variable\n    - name: initial_from_file_timestep\n      required: No\n      default: !!str LATEST\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: Initial From File\n      description: |\n        Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n    - name: initial_from_file_var\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: Initial From File\n      description: |\n        Gives the name of a variable for which to read an initial condition from a mesh file\n    subblocks:\n    - name: /Variables/*/InitialCondition\n      description: |\n        \n      parameters:\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n      - name: /Variables/*/InitialCondition/<type>\n        description: |\n          \n        parameters:\n        subblocks:\n        - name: /Variables/*/InitialCondition/<type>/BoundingBoxIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: inside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable inside the box\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str BoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ClosePackIC\n          description: |\n            Close packed arrangement of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str ClosePackIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ConstantIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str ConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value to be set in IC\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/CrossIC\n          description: |\n            Cross-shaped initial condition\n          parameters:\n          - name: amplitude\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The amplitude\n          - name: average\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The average value\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: buffer\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              A small area between the max value and the interface\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: interface\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              The interface width\n          - name: length\n            required: No\n            default: !!str 0.75\n            cpp_type: double\n            group_name: \n            description: |\n              The length\n          - name: type\n            required: No\n            default: !!str CrossIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: No\n            default: !!str 0.125\n            cpp_type: double\n            group_name: \n            description: |\n              The width\n          - name: x1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/FunctionIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: FunctionName\n            group_name: \n            description: |\n              The initial condition function.\n          - name: type\n            required: No\n            default: !!str FunctionIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/HexPolycrystalIC\n          description: |\n            Perturbed hexagonal polycrystal\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: perturbation_percent\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The percent to randomly perturbate centers of grains relative to the size of the grain\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: typ\n            required: No\n            default: !!str 1\n            cpp_type: int\n            group_name: \n            description: |\n              \n          - name: type\n            required: No\n            default: !!str HexPolycrystalIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_offset\n            required: No\n            default: !!str 0.5\n            cpp_type: double\n            group_name: \n            description: |\n              Specifies offset of hexagon grid in x-direction\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC\n          description: |\n            Perturbed square lattice of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Rnd_variation\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: avoid_bounds\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              Don\'t place any bubbles on the simulation cell boundaries\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: circles_per_side\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector containing the number of bubbles along each side\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: pos_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circels\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str LatticeSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/MultiSmoothCircleIC\n          description: |\n            Random distribution of smooth circles with given minimum spacing\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to place\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circels\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str MultiSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PFCFreezingIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: crystal_structure\n            required: No\n            default: !!str \n            cpp_type: MooseEnum\n            group_name: \n            options: FCC BCC\n            description: |\n              The type of crystal structure\n          - name: inside\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Value inside sinusoids\n          - name: lc\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The lattice constant off the crystal structure\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Value outside sinusoids\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str PFCFreezingIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the frozen box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the frozen box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PolycrystalRandomIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: typ\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Type of random grain structure\n          - name: type\n            required: No\n            default: !!str PolycrystalRandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PolycrystalReducedIC\n          description: |\n            Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: type\n            required: No\n            default: !!str PolycrystalReducedIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RampIC\n          description: |\n            Linear ramp along the x-axis with given values at the left and right extreme points.\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str RampIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value_left\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on left (xmin) boundary.\n          - name: value_right\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on right (xmax) boundary.\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RandomIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ReconPhaseVarIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: ebsd_reader\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              The EBSDReader object holding the EBSD data\n          - name: phase\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              EBSD phase number this variable is to represent\n          - name: type\n            required: No\n            default: !!str ReconPhaseVarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ReconVarIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: ebsd_reader\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              The EBSDReader GeneralUserObject\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Specifies the number of order parameters to create\n          - name: phase\n            required: No\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              EBSD phase number to be assigned to this grain\n          - name: type\n            required: No\n            default: !!str ReconVarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RndBoundingBoxIC\n          description: |\n            Random noise with different min/max inside/outside of a bounding box\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: mn_invalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable invalue the box\n          - name: mn_outvalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable outvalue the box\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable invalue the box\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable outvalue the box\n          - name: type\n            required: No\n            default: !!str RndBoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RndSmoothCircleIC\n          description: |\n            Random noise with different min/max inside/outside of a smooth circle\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RndSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: variation_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the invalue\n          - name: variation_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the outvalue\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ScalarComponentIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str ScalarComponentIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: values\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Initial values to initialize the scalar variable.\n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ScalarConstantIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: type\n            required: No\n            default: !!str ScalarConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SmoothCircleIC\n          description: |\n            Circle with a smooth interface\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC\n          description: |\n            Multiple smooth circles with manually specified radii and center points\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radii\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The radius for each circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each circle center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each circle center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ThumbIC\n          description: |\n            Thumb shaped bicrystal for grain boundary mobility tests\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: height\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: type\n            required: No\n            default: !!str ThumbIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: xcoord\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC\n          description: |\n            Tricrystal with two circles/bubbles\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Index for the current grain order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grain order parameters\n          - name: type\n            required: No\n            default: !!str Tricrystal2CircleGrainsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n  - name: /Variables/CHPFCRFFSplitVariables\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for the L variables\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        Name of atomic density variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for the L variables\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to the L variables\n    - name: sub_filenames\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        This is the filename of the sub.i file\n    subblocks:\n  - name: /Variables/HHPFCRFFSplitVariables\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for the L variables\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for the L variables\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to the L variables\n    subblocks:\n  - name: /Variables/PFCRFFVariables\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for the L variables\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for the L variables\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to the L variables\n    subblocks:\n  - name: /Variables/PolycrystalVariables\n    description: |\n      \n    parameters:\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of order parameters to create\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Specifies the order of the FE shape function to use for this variable\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to this variable\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n- name: /VectorPostprocessors\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /VectorPostprocessors/*\n    description: |\n      \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /VectorPostprocessors/ConstantVectorPostprocessor\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ConstantVectorPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The vector value this object will have.\n    subblocks:\n  - name: /VectorPostprocessors/CrackDataSampler\n    description: |\n      Outputs the values of a set of domain integral postprocessors as a vector, along with their positions along the crack front.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: position_type\n      required: No\n      default: !!str Distance\n      cpp_type: MooseEnum\n      group_name: \n      options: Angle Distance\n      description: |\n        The method used to calculate position along crack front.  Options are: Angle Distance\n    - name: postprocessors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        The postprocessors whose values are to be reported\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str CrackDataSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/ElementsAlongLine\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str ElementsAlongLine\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/GrainCentersPostprocessor\n    description: |\n      Outputs the values from GrainCentersPostprocessor\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_data\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Specify user object that gives center of mass and volume of grains\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str GrainCentersPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/GrainForcesPostprocessor\n    description: |\n      Outputs the values from GrainForcesPostprocessor\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Specify userobject that gives center of mass and volume of grains\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str GrainForcesPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/IntersectionPointsAlongLine\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str IntersectionPointsAlongLine\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LeastSquaresFit\n    description: |\n      Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_samples\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of samples to be output\n    - name: order\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The order of the polynomial fit\n    - name: output\n      required: No\n      default: !!str Coefficients\n      cpp_type: MooseEnum\n      group_name: \n      options: Coefficients Samples\n      description: |\n        The quantity to output.  Options are: Coefficients Samples\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: sample_x_max\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The maximum x value of the of samples to be output\n    - name: sample_x_min\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The minimum x value of the of samples to be output\n    - name: type\n      required: No\n      default: !!str LeastSquaresFit\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: vectorpostprocessor\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The vectorpostprocessor on whose values we perform a least squares fit\n    - name: x_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the independent variable\n    - name: y_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the dependent variable\n    subblocks:\n  - name: /VectorPostprocessors/LineMaterialRealSampler\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Name of the material property to be output along a line\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineMaterialRealSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LineMaterialSymmTensorSampler\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 1 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction vector\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis used to calculate some material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Name of the material property to be output along a line\n    - name: quantity\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n      description: |\n        A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineMaterialSymmTensorSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LineValueSampler\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: end_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The ending of the line\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_points\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of points to sample along the line\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/NodalValueSampler\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str NodalValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/PointValueSampler\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The points where you want to evaluate the variables\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str PointValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/SideValueSampler\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str SideValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/VectorOfPostprocessors\n    description: |\n      Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: execute_on\n      required: No\n      default: !!str TIMESTEP_END\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: postprocessors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        The postprocessors whose values are to be reported\n    - name: type\n      required: No\n      default: !!str VectorOfPostprocessors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n'
p0
.