(lp0
(dp1
S'description'
p2
S''
p3
sS'subblocks'
p4
(lp5
(dp6
S'description'
p7
g3
sS'subblocks'
p8
(lp9
(dp10
S'description'
p11
g3
sS'subblocks'
p12
NsS'parameters'
p13
(lp14
(dp15
S'description'
p16
S'The block id where this object lives.\n'
p17
sS'cpp_type'
p18
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19
sS'default'
p20
g3
sS'name'
p21
S'block'
p22
sS'required'
p23
I00
sS'group_name'
p24
Nsa(dp25
S'description'
p26
S'A string representing the Moose Object that will be built by this Action\n'
p27
sS'cpp_type'
p28
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29
sS'default'
p30
g3
sS'name'
p31
S'type'
p32
sS'required'
p33
I01
sS'group_name'
p34
NsasS'name'
p35
S'/Adaptivity/Indicators/*'
p36
sa(dp37
S'description'
p38
g3
sS'subblocks'
p39
NsS'parameters'
p40
(lp41
(dp42
S'description'
p43
S'block ID or name where the object works\n'
p44
sS'cpp_type'
p45
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46
sS'default'
p47
S'ANY_BLOCK_ID'
p48
sS'name'
p49
S'block'
p50
sS'required'
p51
I00
sS'group_name'
p52
Nsa(dp53
S'description'
p54
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55
sS'cpp_type'
p56
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57
sS'default'
p58
g3
sS'name'
p59
S'control_tags'
p60
sS'required'
p61
I00
sS'group_name'
p62
Nsa(dp63
S'description'
p64
S'The analytic solution to compare against\n'
p65
sS'cpp_type'
p66
S'FunctionName'
p67
sS'default'
p68
g3
sS'name'
p69
S'function'
p70
sS'required'
p71
I01
sS'group_name'
p72
Nsa(dp73
S'description'
p74
S'Determines whether this object is calculated using an implicit or explicit form\n'
p75
sS'cpp_type'
p76
S'bool'
p77
sS'default'
p78
S'1'
p79
sS'name'
p80
S'implicit'
p81
sS'required'
p82
I00
sS'group_name'
p83
S'Advanced'
p84
sa(dp85
S'description'
p86
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p87
sS'cpp_type'
p88
S'std::vector<OutputName, std::allocator<OutputName> >'
p89
sS'default'
p90
g3
sS'name'
p91
S'outputs'
p92
sS'required'
p93
I00
sS'group_name'
p94
Nsa(dp95
S'description'
p96
g3
sS'cpp_type'
p97
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98
sS'default'
p99
S'AnalyticalIndicator'
p100
sS'name'
p101
S'type'
p102
sS'required'
p103
I00
sS'group_name'
p104
Nsa(dp105
S'description'
p106
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107
sS'cpp_type'
p108
S'bool'
p109
sS'default'
p110
S'0'
p111
sS'name'
p112
S'use_displaced_mesh'
p113
sS'required'
p114
I00
sS'group_name'
p115
S'Advanced'
p116
sa(dp117
S'description'
p118
S'The name of the variable that this Indicator operates on\n'
p119
sS'cpp_type'
p120
S'VariableName'
p121
sS'default'
p122
g3
sS'name'
p123
S'variable'
p124
sS'required'
p125
I01
sS'group_name'
p126
NsasS'name'
p127
S'/Adaptivity/Indicators/AnalyticalIndicator'
p128
sa(dp129
S'description'
p130
g3
sS'subblocks'
p131
NsS'parameters'
p132
(lp133
(dp134
S'description'
p135
S'The list of block ids (SubdomainID) that this object will be applied\n'
p136
sS'cpp_type'
p137
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p138
sS'default'
p139
g3
sS'name'
p140
S'block'
p141
sS'required'
p142
I00
sS'group_name'
p143
Nsa(dp144
S'description'
p145
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p146
sS'cpp_type'
p147
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p148
sS'default'
p149
g3
sS'name'
p150
S'control_tags'
p151
sS'required'
p152
I00
sS'group_name'
p153
Nsa(dp154
S'description'
p155
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p156
sS'cpp_type'
p157
S'std::vector<OutputName, std::allocator<OutputName> >'
p158
sS'default'
p159
g3
sS'name'
p160
S'outputs'
p161
sS'required'
p162
I00
sS'group_name'
p163
Nsa(dp164
S'description'
p165
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p166
sS'cpp_type'
p167
S'bool'
p168
sS'default'
p169
S'0'
p170
sS'name'
p171
S'scale_by_flux_faces'
p172
sS'required'
p173
I00
sS'group_name'
p174
Nsa(dp175
S'description'
p176
g3
sS'cpp_type'
p177
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p178
sS'default'
p179
S'GradientJumpIndicator'
p180
sS'name'
p181
S'type'
p182
sS'required'
p183
I00
sS'group_name'
p184
Nsa(dp185
S'description'
p186
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p187
sS'cpp_type'
p188
S'bool'
p189
sS'default'
p190
S'0'
p191
sS'name'
p192
S'use_displaced_mesh'
p193
sS'required'
p194
I00
sS'group_name'
p195
S'Advanced'
p196
sa(dp197
S'description'
p198
S'The name of the variable that this side indicator applies to\n'
p199
sS'cpp_type'
p200
S'VariableName'
p201
sS'default'
p202
g3
sS'name'
p203
S'variable'
p204
sS'required'
p205
I01
sS'group_name'
p206
NsasS'name'
p207
S'/Adaptivity/Indicators/GradientJumpIndicator'
p208
sa(dp209
S'description'
p210
g3
sS'subblocks'
p211
NsS'parameters'
p212
(lp213
(dp214
S'description'
p215
S'The list of block ids (SubdomainID) that this object will be applied\n'
p216
sS'cpp_type'
p217
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p218
sS'default'
p219
g3
sS'name'
p220
S'block'
p221
sS'required'
p222
I00
sS'group_name'
p223
Nsa(dp224
S'description'
p225
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p226
sS'cpp_type'
p227
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p228
sS'default'
p229
g3
sS'name'
p230
S'control_tags'
p231
sS'required'
p232
I00
sS'group_name'
p233
Nsa(dp234
S'description'
p235
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p236
sS'cpp_type'
p237
S'std::vector<OutputName, std::allocator<OutputName> >'
p238
sS'default'
p239
g3
sS'name'
p240
S'outputs'
p241
sS'required'
p242
I00
sS'group_name'
p243
Nsa(dp244
S'description'
p245
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p246
sS'cpp_type'
p247
S'bool'
p248
sS'default'
p249
S'0'
p250
sS'name'
p251
S'scale_by_flux_faces'
p252
sS'required'
p253
I00
sS'group_name'
p254
Nsa(dp255
S'description'
p256
g3
sS'cpp_type'
p257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p258
sS'default'
p259
S'LaplacianJumpIndicator'
p260
sS'name'
p261
S'type'
p262
sS'required'
p263
I00
sS'group_name'
p264
Nsa(dp265
S'description'
p266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p267
sS'cpp_type'
p268
S'bool'
p269
sS'default'
p270
S'0'
p271
sS'name'
p272
S'use_displaced_mesh'
p273
sS'required'
p274
I00
sS'group_name'
p275
S'Advanced'
p276
sa(dp277
S'description'
p278
S'The name of the variable that this side indicator applies to\n'
p279
sS'cpp_type'
p280
S'VariableName'
p281
sS'default'
p282
g3
sS'name'
p283
S'variable'
p284
sS'required'
p285
I01
sS'group_name'
p286
NsasS'name'
p287
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p288
sasS'parameters'
p289
NsS'name'
p290
S'/Adaptivity/Indicators'
p291
sa(dp292
S'description'
p293
g3
sS'subblocks'
p294
(lp295
(dp296
S'description'
p297
g3
sS'subblocks'
p298
NsS'parameters'
p299
(lp300
(dp301
S'description'
p302
S'The block id where this object lives.\n'
p303
sS'cpp_type'
p304
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p305
sS'default'
p306
g3
sS'name'
p307
S'block'
p308
sS'required'
p309
I00
sS'group_name'
p310
Nsa(dp311
S'description'
p312
S'A string representing the Moose Object that will be built by this Action\n'
p313
sS'cpp_type'
p314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p315
sS'default'
p316
g3
sS'name'
p317
S'type'
p318
sS'required'
p319
I01
sS'group_name'
p320
NsasS'name'
p321
S'/Adaptivity/Markers/*'
p322
sa(dp323
S'description'
p324
g3
sS'subblocks'
p325
NsS'parameters'
p326
(lp327
(dp328
S'description'
p329
S'The list of block ids (SubdomainID) that this object will be applied\n'
p330
sS'cpp_type'
p331
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p332
sS'default'
p333
g3
sS'name'
p334
S'block'
p335
sS'required'
p336
I00
sS'group_name'
p337
Nsa(dp338
S'description'
p339
S'The bottom left point (in x,y,z with spaces in-between).\n'
p340
sS'cpp_type'
p341
S'libMesh::VectorValue<double>'
p342
sS'default'
p343
g3
sS'name'
p344
S'bottom_left'
p345
sS'required'
p346
I01
sS'group_name'
p347
Nsa(dp348
S'description'
p349
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p350
sS'cpp_type'
p351
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p352
sS'default'
p353
g3
sS'name'
p354
S'control_tags'
p355
sS'required'
p356
I00
sS'group_name'
p357
Nsa(dp358
S'name'
p359
S'inside'
p360
sS'cpp_type'
p361
S'MooseEnum'
p362
sS'default'
p363
g3
sS'description'
p364
S'How to mark elements inside the box.\n'
p365
sS'required'
p366
I01
sS'options'
p367
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p368
sS'group_name'
p369
Nsa(dp370
S'description'
p371
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p372
sS'cpp_type'
p373
S'std::vector<OutputName, std::allocator<OutputName> >'
p374
sS'default'
p375
g3
sS'name'
p376
S'outputs'
p377
sS'required'
p378
I00
sS'group_name'
p379
Nsa(dp380
S'name'
p381
S'outside'
p382
sS'cpp_type'
p383
S'MooseEnum'
p384
sS'default'
p385
g3
sS'description'
p386
S'How to mark elements outside the box.\n'
p387
sS'required'
p388
I01
sS'options'
p389
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p390
sS'group_name'
p391
Nsa(dp392
S'description'
p393
S'The bottom left point (in x,y,z with spaces in-between).\n'
p394
sS'cpp_type'
p395
S'libMesh::VectorValue<double>'
p396
sS'default'
p397
g3
sS'name'
p398
S'top_right'
p399
sS'required'
p400
I01
sS'group_name'
p401
Nsa(dp402
S'description'
p403
g3
sS'cpp_type'
p404
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p405
sS'default'
p406
S'BoxMarker'
p407
sS'name'
p408
S'type'
p409
sS'required'
p410
I00
sS'group_name'
p411
Nsa(dp412
S'description'
p413
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p414
sS'cpp_type'
p415
S'bool'
p416
sS'default'
p417
S'0'
p418
sS'name'
p419
S'use_displaced_mesh'
p420
sS'required'
p421
I00
sS'group_name'
p422
S'Advanced'
p423
sasS'name'
p424
S'/Adaptivity/Markers/BoxMarker'
p425
sa(dp426
S'description'
p427
g3
sS'subblocks'
p428
NsS'parameters'
p429
(lp430
(dp431
S'description'
p432
S'The list of block ids (SubdomainID) that this object will be applied\n'
p433
sS'cpp_type'
p434
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p435
sS'default'
p436
g3
sS'name'
p437
S'block'
p438
sS'required'
p439
I00
sS'group_name'
p440
Nsa(dp441
S'description'
p442
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p443
sS'cpp_type'
p444
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p445
sS'default'
p446
g3
sS'name'
p447
S'control_tags'
p448
sS'required'
p449
I00
sS'group_name'
p450
Nsa(dp451
S'description'
p452
S'The Markers to combine.\n'
p453
sS'cpp_type'
p454
S'std::vector<MarkerName, std::allocator<MarkerName> >'
p455
sS'default'
p456
g3
sS'name'
p457
S'markers'
p458
sS'required'
p459
I01
sS'group_name'
p460
Nsa(dp461
S'description'
p462
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p463
sS'cpp_type'
p464
S'std::vector<OutputName, std::allocator<OutputName> >'
p465
sS'default'
p466
g3
sS'name'
p467
S'outputs'
p468
sS'required'
p469
I00
sS'group_name'
p470
Nsa(dp471
S'description'
p472
g3
sS'cpp_type'
p473
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p474
sS'default'
p475
S'ComboMarker'
p476
sS'name'
p477
S'type'
p478
sS'required'
p479
I00
sS'group_name'
p480
Nsa(dp481
S'description'
p482
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p483
sS'cpp_type'
p484
S'bool'
p485
sS'default'
p486
S'0'
p487
sS'name'
p488
S'use_displaced_mesh'
p489
sS'required'
p490
I00
sS'group_name'
p491
S'Advanced'
p492
sasS'name'
p493
S'/Adaptivity/Markers/ComboMarker'
p494
sa(dp495
S'description'
p496
g3
sS'subblocks'
p497
NsS'parameters'
p498
(lp499
(dp500
S'description'
p501
S'The list of block ids (SubdomainID) that this object will be applied\n'
p502
sS'cpp_type'
p503
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p504
sS'default'
p505
g3
sS'name'
p506
S'block'
p507
sS'required'
p508
I00
sS'group_name'
p509
Nsa(dp510
S'description'
p511
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p512
sS'cpp_type'
p513
S'double'
p514
sS'default'
p515
S'0'
p516
sS'name'
p517
S'coarsen'
p518
sS'required'
p519
I00
sS'group_name'
p520
Nsa(dp521
S'description'
p522
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p523
sS'cpp_type'
p524
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p525
sS'default'
p526
g3
sS'name'
p527
S'control_tags'
p528
sS'required'
p529
I00
sS'group_name'
p530
Nsa(dp531
S'description'
p532
S'The name of the Indicator that this Marker uses.\n'
p533
sS'cpp_type'
p534
S'IndicatorName'
p535
sS'default'
p536
g3
sS'name'
p537
S'indicator'
p538
sS'required'
p539
I01
sS'group_name'
p540
Nsa(dp541
S'description'
p542
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p543
sS'cpp_type'
p544
S'std::vector<OutputName, std::allocator<OutputName> >'
p545
sS'default'
p546
g3
sS'name'
p547
S'outputs'
p548
sS'required'
p549
I00
sS'group_name'
p550
Nsa(dp551
S'description'
p552
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p553
sS'cpp_type'
p554
S'double'
p555
sS'default'
p556
S'0'
p557
sS'name'
p558
S'refine'
p559
sS'required'
p560
I00
sS'group_name'
p561
Nsa(dp562
S'description'
p563
g3
sS'cpp_type'
p564
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p565
sS'default'
p566
S'ErrorFractionMarker'
p567
sS'name'
p568
S'type'
p569
sS'required'
p570
I00
sS'group_name'
p571
Nsa(dp572
S'description'
p573
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p574
sS'cpp_type'
p575
S'bool'
p576
sS'default'
p577
S'0'
p578
sS'name'
p579
S'use_displaced_mesh'
p580
sS'required'
p581
I00
sS'group_name'
p582
S'Advanced'
p583
sasS'name'
p584
S'/Adaptivity/Markers/ErrorFractionMarker'
p585
sa(dp586
S'description'
p587
g3
sS'subblocks'
p588
NsS'parameters'
p589
(lp590
(dp591
S'description'
p592
S'The list of block ids (SubdomainID) that this object will be applied\n'
p593
sS'cpp_type'
p594
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p595
sS'default'
p596
g3
sS'name'
p597
S'block'
p598
sS'required'
p599
I00
sS'group_name'
p600
Nsa(dp601
S'description'
p602
S'Elements with error less than this will be coarsened.\n'
p603
sS'cpp_type'
p604
S'double'
p605
sS'default'
p606
S'0'
p607
sS'name'
p608
S'coarsen'
p609
sS'required'
p610
I00
sS'group_name'
p611
Nsa(dp612
S'description'
p613
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p614
sS'cpp_type'
p615
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p616
sS'default'
p617
g3
sS'name'
p618
S'control_tags'
p619
sS'required'
p620
I00
sS'group_name'
p621
Nsa(dp622
S'description'
p623
S'The name of the Indicator that this Marker uses.\n'
p624
sS'cpp_type'
p625
S'IndicatorName'
p626
sS'default'
p627
g3
sS'name'
p628
S'indicator'
p629
sS'required'
p630
I01
sS'group_name'
p631
Nsa(dp632
S'description'
p633
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p634
sS'cpp_type'
p635
S'std::vector<OutputName, std::allocator<OutputName> >'
p636
sS'default'
p637
g3
sS'name'
p638
S'outputs'
p639
sS'required'
p640
I00
sS'group_name'
p641
Nsa(dp642
S'description'
p643
S'Elements with error more than this will be refined.\n'
p644
sS'cpp_type'
p645
S'double'
p646
sS'default'
p647
S'1.79769e+308'
p648
sS'name'
p649
S'refine'
p650
sS'required'
p651
I00
sS'group_name'
p652
Nsa(dp653
S'description'
p654
g3
sS'cpp_type'
p655
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p656
sS'default'
p657
S'ErrorToleranceMarker'
p658
sS'name'
p659
S'type'
p660
sS'required'
p661
I00
sS'group_name'
p662
Nsa(dp663
S'description'
p664
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p665
sS'cpp_type'
p666
S'bool'
p667
sS'default'
p668
S'0'
p669
sS'name'
p670
S'use_displaced_mesh'
p671
sS'required'
p672
I00
sS'group_name'
p673
S'Advanced'
p674
sasS'name'
p675
S'/Adaptivity/Markers/ErrorToleranceMarker'
p676
sa(dp677
S'description'
p678
S'Marks inside and outside a box that can have arbitrary orientation and center point\n'
p679
sS'subblocks'
p680
NsS'parameters'
p681
(lp682
(dp683
S'description'
p684
S'The list of block ids (SubdomainID) that this object will be applied\n'
p685
sS'cpp_type'
p686
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p687
sS'default'
p688
g3
sS'name'
p689
S'block'
p690
sS'required'
p691
I00
sS'group_name'
p692
Nsa(dp693
S'description'
p694
S"The center (many people spell this 'center') of the box.\n"
p695
sS'cpp_type'
p696
S'libMesh::Point'
p697
sS'default'
p698
g3
sS'name'
p699
S'center'
p700
sS'required'
p701
I01
sS'group_name'
p702
Nsa(dp703
S'description'
p704
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p705
sS'cpp_type'
p706
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p707
sS'default'
p708
g3
sS'name'
p709
S'control_tags'
p710
sS'required'
p711
I00
sS'group_name'
p712
Nsa(dp713
S'description'
p714
S'The height of the box\n'
p715
sS'cpp_type'
p716
S'double'
p717
sS'default'
p718
g3
sS'name'
p719
S'height'
p720
sS'required'
p721
I01
sS'group_name'
p722
Nsa(dp723
S'name'
p724
S'inside'
p725
sS'cpp_type'
p726
S'MooseEnum'
p727
sS'default'
p728
g3
sS'description'
p729
S'How to mark elements inside the box.\n'
p730
sS'required'
p731
I01
sS'options'
p732
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p733
sS'group_name'
p734
Nsa(dp735
S'description'
p736
S'The length of the box\n'
p737
sS'cpp_type'
p738
S'double'
p739
sS'default'
p740
g3
sS'name'
p741
S'length'
p742
sS'required'
p743
I01
sS'group_name'
p744
Nsa(dp745
S'description'
p746
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p747
sS'cpp_type'
p748
S'libMesh::VectorValue<double>'
p749
sS'default'
p750
g3
sS'name'
p751
S'length_direction'
p752
sS'required'
p753
I01
sS'group_name'
p754
Nsa(dp755
S'description'
p756
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p757
sS'cpp_type'
p758
S'std::vector<OutputName, std::allocator<OutputName> >'
p759
sS'default'
p760
g3
sS'name'
p761
S'outputs'
p762
sS'required'
p763
I00
sS'group_name'
p764
Nsa(dp765
S'name'
p766
S'outside'
p767
sS'cpp_type'
p768
S'MooseEnum'
p769
sS'default'
p770
g3
sS'description'
p771
S'How to mark elements outside the box.\n'
p772
sS'required'
p773
I01
sS'options'
p774
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p775
sS'group_name'
p776
Nsa(dp777
S'description'
p778
g3
sS'cpp_type'
p779
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p780
sS'default'
p781
S'OrientedBoxMarker'
p782
sS'name'
p783
S'type'
p784
sS'required'
p785
I00
sS'group_name'
p786
Nsa(dp787
S'description'
p788
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p789
sS'cpp_type'
p790
S'bool'
p791
sS'default'
p792
S'0'
p793
sS'name'
p794
S'use_displaced_mesh'
p795
sS'required'
p796
I00
sS'group_name'
p797
S'Advanced'
p798
sa(dp799
S'description'
p800
S'The width of the box\n'
p801
sS'cpp_type'
p802
S'double'
p803
sS'default'
p804
g3
sS'name'
p805
S'width'
p806
sS'required'
p807
I01
sS'group_name'
p808
Nsa(dp809
S'description'
p810
S'The direction along which the width is oriented.\n'
p811
sS'cpp_type'
p812
S'libMesh::VectorValue<double>'
p813
sS'default'
p814
g3
sS'name'
p815
S'width_direction'
p816
sS'required'
p817
I01
sS'group_name'
p818
NsasS'name'
p819
S'/Adaptivity/Markers/OrientedBoxMarker'
p820
sa(dp821
S'description'
p822
g3
sS'subblocks'
p823
NsS'parameters'
p824
(lp825
(dp826
S'description'
p827
S'The list of block ids (SubdomainID) that this object will be applied\n'
p828
sS'cpp_type'
p829
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p830
sS'default'
p831
g3
sS'name'
p832
S'block'
p833
sS'required'
p834
I00
sS'group_name'
p835
Nsa(dp836
S'description'
p837
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p838
sS'cpp_type'
p839
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p840
sS'default'
p841
g3
sS'name'
p842
S'control_tags'
p843
sS'required'
p844
I00
sS'group_name'
p845
Nsa(dp846
S'name'
p847
S'mark'
p848
sS'cpp_type'
p849
S'MooseEnum'
p850
sS'default'
p851
g3
sS'description'
p852
S'How to mark elements.\n'
p853
sS'required'
p854
I01
sS'options'
p855
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p856
sS'group_name'
p857
Nsa(dp858
S'description'
p859
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p860
sS'cpp_type'
p861
S'std::vector<OutputName, std::allocator<OutputName> >'
p862
sS'default'
p863
g3
sS'name'
p864
S'outputs'
p865
sS'required'
p866
I00
sS'group_name'
p867
Nsa(dp868
S'description'
p869
g3
sS'cpp_type'
p870
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p871
sS'default'
p872
S'UniformMarker'
p873
sS'name'
p874
S'type'
p875
sS'required'
p876
I00
sS'group_name'
p877
Nsa(dp878
S'description'
p879
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p880
sS'cpp_type'
p881
S'bool'
p882
sS'default'
p883
S'0'
p884
sS'name'
p885
S'use_displaced_mesh'
p886
sS'required'
p887
I00
sS'group_name'
p888
S'Advanced'
p889
sasS'name'
p890
S'/Adaptivity/Markers/UniformMarker'
p891
sa(dp892
S'description'
p893
g3
sS'subblocks'
p894
NsS'parameters'
p895
(lp896
(dp897
S'description'
p898
S'The list of block ids (SubdomainID) that this object will be applied\n'
p899
sS'cpp_type'
p900
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p901
sS'default'
p902
g3
sS'name'
p903
S'block'
p904
sS'required'
p905
I00
sS'group_name'
p906
Nsa(dp907
S'description'
p908
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p909
sS'cpp_type'
p910
S'double'
p911
sS'default'
p912
S'0'
p913
sS'name'
p914
S'buffer_size'
p915
sS'required'
p916
I00
sS'group_name'
p917
Nsa(dp918
S'description'
p919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p920
sS'cpp_type'
p921
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p922
sS'default'
p923
g3
sS'name'
p924
S'control_tags'
p925
sS'required'
p926
I00
sS'group_name'
p927
Nsa(dp928
S'description'
p929
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p930
sS'cpp_type'
p931
S'bool'
p932
sS'default'
p933
S'0'
p934
sS'name'
p935
S'invert'
p936
sS'required'
p937
I00
sS'group_name'
p938
Nsa(dp939
S'description'
p940
S'The lower bound value for the range.\n'
p941
sS'cpp_type'
p942
S'double'
p943
sS'default'
p944
g3
sS'name'
p945
S'lower_bound'
p946
sS'required'
p947
I01
sS'group_name'
p948
Nsa(dp949
S'description'
p950
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p951
sS'cpp_type'
p952
S'std::vector<OutputName, std::allocator<OutputName> >'
p953
sS'default'
p954
g3
sS'name'
p955
S'outputs'
p956
sS'required'
p957
I00
sS'group_name'
p958
Nsa(dp959
S'name'
p960
S'third_state'
p961
sS'cpp_type'
p962
S'MooseEnum'
p963
sS'default'
p964
S'DONT_MARK'
p965
sS'description'
p966
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p967
sS'required'
p968
I00
sS'options'
p969
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p970
sS'group_name'
p971
Nsa(dp972
S'description'
p973
g3
sS'cpp_type'
p974
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p975
sS'default'
p976
S'ValueRangeMarker'
p977
sS'name'
p978
S'type'
p979
sS'required'
p980
I00
sS'group_name'
p981
Nsa(dp982
S'description'
p983
S'The upper bound value for the range.\n'
p984
sS'cpp_type'
p985
S'double'
p986
sS'default'
p987
g3
sS'name'
p988
S'upper_bound'
p989
sS'required'
p990
I01
sS'group_name'
p991
Nsa(dp992
S'description'
p993
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p994
sS'cpp_type'
p995
S'bool'
p996
sS'default'
p997
S'0'
p998
sS'name'
p999
S'use_displaced_mesh'
p1000
sS'required'
p1001
I00
sS'group_name'
p1002
S'Advanced'
p1003
sa(dp1004
S'description'
p1005
S'The variable whose values are used in this marker.\n'
p1006
sS'cpp_type'
p1007
S'std::vector<VariableName>'
p1008
sS'default'
p1009
g3
sS'name'
p1010
S'variable'
p1011
sS'required'
p1012
I01
sS'group_name'
p1013
NsasS'name'
p1014
S'/Adaptivity/Markers/ValueRangeMarker'
p1015
sa(dp1016
S'description'
p1017
g3
sS'subblocks'
p1018
NsS'parameters'
p1019
(lp1020
(dp1021
S'description'
p1022
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1023
sS'cpp_type'
p1024
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1025
sS'default'
p1026
g3
sS'name'
p1027
S'block'
p1028
sS'required'
p1029
I00
sS'group_name'
p1030
Nsa(dp1031
S'description'
p1032
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p1033
sS'cpp_type'
p1034
S'double'
p1035
sS'default'
p1036
g3
sS'name'
p1037
S'coarsen'
p1038
sS'required'
p1039
I00
sS'group_name'
p1040
Nsa(dp1041
S'description'
p1042
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1043
sS'cpp_type'
p1044
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1045
sS'default'
p1046
g3
sS'name'
p1047
S'control_tags'
p1048
sS'required'
p1049
I00
sS'group_name'
p1050
Nsa(dp1051
S'description'
p1052
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p1053
sS'cpp_type'
p1054
S'bool'
p1055
sS'default'
p1056
S'0'
p1057
sS'name'
p1058
S'invert'
p1059
sS'required'
p1060
I00
sS'group_name'
p1061
Nsa(dp1062
S'description'
p1063
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1064
sS'cpp_type'
p1065
S'std::vector<OutputName, std::allocator<OutputName> >'
p1066
sS'default'
p1067
g3
sS'name'
p1068
S'outputs'
p1069
sS'required'
p1070
I00
sS'group_name'
p1071
Nsa(dp1072
S'description'
p1073
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p1074
sS'cpp_type'
p1075
S'double'
p1076
sS'default'
p1077
g3
sS'name'
p1078
S'refine'
p1079
sS'required'
p1080
I00
sS'group_name'
p1081
Nsa(dp1082
S'name'
p1083
S'third_state'
p1084
sS'cpp_type'
p1085
S'MooseEnum'
p1086
sS'default'
p1087
S'DONT_MARK'
p1088
sS'description'
p1089
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p1090
sS'required'
p1091
I00
sS'options'
p1092
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1093
sS'group_name'
p1094
Nsa(dp1095
S'description'
p1096
g3
sS'cpp_type'
p1097
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1098
sS'default'
p1099
S'ValueThresholdMarker'
p1100
sS'name'
p1101
S'type'
p1102
sS'required'
p1103
I00
sS'group_name'
p1104
Nsa(dp1105
S'description'
p1106
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1107
sS'cpp_type'
p1108
S'bool'
p1109
sS'default'
p1110
S'0'
p1111
sS'name'
p1112
S'use_displaced_mesh'
p1113
sS'required'
p1114
I00
sS'group_name'
p1115
S'Advanced'
p1116
sa(dp1117
S'description'
p1118
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p1119
sS'cpp_type'
p1120
S'std::vector<VariableName>'
p1121
sS'default'
p1122
g3
sS'name'
p1123
S'variable'
p1124
sS'required'
p1125
I01
sS'group_name'
p1126
NsasS'name'
p1127
S'/Adaptivity/Markers/ValueThresholdMarker'
p1128
sasS'parameters'
p1129
NsS'name'
p1130
S'/Adaptivity/Markers'
p1131
sasS'parameters'
p1132
(lp1133
(dp1134
S'description'
p1135
S'The number of adaptive steps to use when on each timestep during a Transient simulation.\n'
p1136
sS'cpp_type'
p1137
S'unsigned int'
p1138
sS'default'
p1139
S'1'
p1140
sS'name'
p1141
S'cycles_per_step'
p1142
sS'required'
p1143
I00
sS'group_name'
p1144
Nsa(dp1145
S'description'
p1146
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p1147
sS'cpp_type'
p1148
S'MarkerName'
p1149
sS'default'
p1150
g3
sS'name'
p1151
S'initial_marker'
p1152
sS'required'
p1153
I00
sS'group_name'
p1154
Nsa(dp1155
S'description'
p1156
S'The number of adaptive steps to do based on the initial condition.\n'
p1157
sS'cpp_type'
p1158
S'unsigned int'
p1159
sS'default'
p1160
S'0'
p1161
sS'name'
p1162
S'initial_steps'
p1163
sS'required'
p1164
I00
sS'group_name'
p1165
Nsa(dp1166
S'description'
p1167
S'The name of the Marker to use to actually adapt the mesh.\n'
p1168
sS'cpp_type'
p1169
S'MarkerName'
p1170
sS'default'
p1171
g3
sS'name'
p1172
S'marker'
p1173
sS'required'
p1174
I00
sS'group_name'
p1175
Nsa(dp1176
S'description'
p1177
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1178
sS'cpp_type'
p1179
S'unsigned int'
p1180
sS'default'
p1181
S'0'
p1182
sS'name'
p1183
S'max_h_level'
p1184
sS'required'
p1185
I00
sS'group_name'
p1186
Nsa(dp1187
S'description'
p1188
S'The time that adaptivity will be active after.\n'
p1189
sS'cpp_type'
p1190
S'double'
p1191
sS'default'
p1192
S'-1.79769e+308'
p1193
sS'name'
p1194
S'start_time'
p1195
sS'required'
p1196
I00
sS'group_name'
p1197
Nsa(dp1198
S'description'
p1199
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1200
sS'cpp_type'
p1201
S'unsigned int'
p1202
sS'default'
p1203
S'0'
p1204
sS'name'
p1205
S'steps'
p1206
sS'required'
p1207
I00
sS'group_name'
p1208
Nsa(dp1209
S'description'
p1210
S'The time after which adaptivity will no longer be active.\n'
p1211
sS'cpp_type'
p1212
S'double'
p1213
sS'default'
p1214
S'1.79769e+308'
p1215
sS'name'
p1216
S'stop_time'
p1217
sS'required'
p1218
I00
sS'group_name'
p1219
NsasS'name'
p1220
S'/Adaptivity'
p1221
sa(dp1222
S'description'
p1223
g3
sS'subblocks'
p1224
(lp1225
(dp1226
S'description'
p1227
g3
sS'subblocks'
p1228
NsS'parameters'
p1229
(lp1230
(dp1231
S'description'
p1232
S'A string representing the Moose Object that will be built by this Action\n'
p1233
sS'cpp_type'
p1234
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1235
sS'default'
p1236
g3
sS'name'
p1237
S'type'
p1238
sS'required'
p1239
I01
sS'group_name'
p1240
NsasS'name'
p1241
S'/AuxKernels/*'
p1242
sa(dp1243
S'description'
p1244
g3
sS'subblocks'
p1245
NsS'parameters'
p1246
(lp1247
(dp1248
S'description'
p1249
S'Variable whose values are to be accumulated into the current variable\n'
p1250
sS'cpp_type'
p1251
S'std::vector<VariableName>'
p1252
sS'default'
p1253
g3
sS'name'
p1254
S'accumulate_from_variable'
p1255
sS'required'
p1256
I01
sS'group_name'
p1257
Nsa(dp1258
S'description'
p1259
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1260
sS'cpp_type'
p1261
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1262
sS'default'
p1263
g3
sS'name'
p1264
S'block'
p1265
sS'required'
p1266
I00
sS'group_name'
p1267
Nsa(dp1268
S'description'
p1269
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1270
sS'cpp_type'
p1271
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1272
sS'default'
p1273
g3
sS'name'
p1274
S'boundary'
p1275
sS'required'
p1276
I00
sS'group_name'
p1277
Nsa(dp1278
S'description'
p1279
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1280
sS'cpp_type'
p1281
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1282
sS'default'
p1283
g3
sS'name'
p1284
S'control_tags'
p1285
sS'required'
p1286
I00
sS'group_name'
p1287
Nsa(dp1288
S'name'
p1289
S'execute_on'
p1290
sS'cpp_type'
p1291
S'MultiMooseEnum'
p1292
sS'default'
p1293
S'LINEAR'
p1294
sS'description'
p1295
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1296
sS'required'
p1297
I00
sS'options'
p1298
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1299
sS'group_name'
p1300
Nsa(dp1301
S'description'
p1302
S'The seed for the master random number generator\n'
p1303
sS'cpp_type'
p1304
S'unsigned int'
p1305
sS'default'
p1306
S'0'
p1307
sS'name'
p1308
S'seed'
p1309
sS'required'
p1310
I00
sS'group_name'
p1311
S'Advanced'
p1312
sa(dp1313
S'description'
p1314
g3
sS'cpp_type'
p1315
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1316
sS'default'
p1317
S'AccumulateAux'
p1318
sS'name'
p1319
S'type'
p1320
sS'required'
p1321
I00
sS'group_name'
p1322
Nsa(dp1323
S'description'
p1324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1325
sS'cpp_type'
p1326
S'bool'
p1327
sS'default'
p1328
S'0'
p1329
sS'name'
p1330
S'use_displaced_mesh'
p1331
sS'required'
p1332
I00
sS'group_name'
p1333
S'Advanced'
p1334
sa(dp1335
S'description'
p1336
S'The name of the variable that this object applies to\n'
p1337
sS'cpp_type'
p1338
S'AuxVariableName'
p1339
sS'default'
p1340
g3
sS'name'
p1341
S'variable'
p1342
sS'required'
p1343
I01
sS'group_name'
p1344
NsasS'name'
p1345
S'/AuxKernels/AccumulateAux'
p1346
sa(dp1347
S'description'
p1348
g3
sS'subblocks'
p1349
NsS'parameters'
p1350
(lp1351
(dp1352
S'description'
p1353
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1354
sS'cpp_type'
p1355
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1356
sS'default'
p1357
g3
sS'name'
p1358
S'block'
p1359
sS'required'
p1360
I00
sS'group_name'
p1361
Nsa(dp1362
S'description'
p1363
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1364
sS'cpp_type'
p1365
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1366
sS'default'
p1367
g3
sS'name'
p1368
S'boundary'
p1369
sS'required'
p1370
I00
sS'group_name'
p1371
Nsa(dp1372
S'description'
p1373
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1374
sS'cpp_type'
p1375
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1376
sS'default'
p1377
g3
sS'name'
p1378
S'control_tags'
p1379
sS'required'
p1380
I00
sS'group_name'
p1381
Nsa(dp1382
S'name'
p1383
S'execute_on'
p1384
sS'cpp_type'
p1385
S'MultiMooseEnum'
p1386
sS'default'
p1387
S'LINEAR'
p1388
sS'description'
p1389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1390
sS'required'
p1391
I00
sS'options'
p1392
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1393
sS'group_name'
p1394
Nsa(dp1395
S'description'
p1396
S'The equilibrium constant in dissociation form\n'
p1397
sS'cpp_type'
p1398
S'double'
p1399
sS'default'
p1400
S'0'
p1401
sS'name'
p1402
S'log_k'
p1403
sS'required'
p1404
I00
sS'group_name'
p1405
Nsa(dp1406
S'description'
p1407
S'The seed for the master random number generator\n'
p1408
sS'cpp_type'
p1409
S'unsigned int'
p1410
sS'default'
p1411
S'0'
p1412
sS'name'
p1413
S'seed'
p1414
sS'required'
p1415
I00
sS'group_name'
p1416
S'Advanced'
p1417
sa(dp1418
S'description'
p1419
S'The stochiometric coefficient of reactants\n'
p1420
sS'cpp_type'
p1421
S'std::vector<double, std::allocator<double> >'
p1422
sS'default'
p1423
g3
sS'name'
p1424
S'sto_v'
p1425
sS'required'
p1426
I01
sS'group_name'
p1427
Nsa(dp1428
S'description'
p1429
g3
sS'cpp_type'
p1430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1431
sS'default'
p1432
S'AqueousEquilibriumRxnAux'
p1433
sS'name'
p1434
S'type'
p1435
sS'required'
p1436
I00
sS'group_name'
p1437
Nsa(dp1438
S'description'
p1439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1440
sS'cpp_type'
p1441
S'bool'
p1442
sS'default'
p1443
S'0'
p1444
sS'name'
p1445
S'use_displaced_mesh'
p1446
sS'required'
p1447
I00
sS'group_name'
p1448
S'Advanced'
p1449
sa(dp1450
S'description'
p1451
S'the list of primary spceies participating in this equilibrium species\n'
p1452
sS'cpp_type'
p1453
S'std::vector<VariableName>'
p1454
sS'default'
p1455
g3
sS'name'
p1456
S'v'
p1457
sS'required'
p1458
I00
sS'group_name'
p1459
Nsa(dp1460
S'description'
p1461
S'The name of the variable that this object applies to\n'
p1462
sS'cpp_type'
p1463
S'AuxVariableName'
p1464
sS'default'
p1465
g3
sS'name'
p1466
S'variable'
p1467
sS'required'
p1468
I01
sS'group_name'
p1469
NsasS'name'
p1470
S'/AuxKernels/AqueousEquilibriumRxnAux'
p1471
sa(dp1472
S'description'
p1473
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p1474
sS'subblocks'
p1475
NsS'parameters'
p1476
(lp1477
(dp1478
S'description'
p1479
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1480
sS'cpp_type'
p1481
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1482
sS'default'
p1483
g3
sS'name'
p1484
S'block'
p1485
sS'required'
p1486
I00
sS'group_name'
p1487
Nsa(dp1488
S'description'
p1489
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1490
sS'cpp_type'
p1491
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1492
sS'default'
p1493
g3
sS'name'
p1494
S'boundary'
p1495
sS'required'
p1496
I00
sS'group_name'
p1497
Nsa(dp1498
S'description'
p1499
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1500
sS'cpp_type'
p1501
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1502
sS'default'
p1503
g3
sS'name'
p1504
S'control_tags'
p1505
sS'required'
p1506
I00
sS'group_name'
p1507
Nsa(dp1508
S'name'
p1509
S'execute_on'
p1510
sS'cpp_type'
p1511
S'MultiMooseEnum'
p1512
sS'default'
p1513
S'LINEAR'
p1514
sS'description'
p1515
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1516
sS'required'
p1517
I00
sS'options'
p1518
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1519
sS'group_name'
p1520
Nsa(dp1521
S'description'
p1522
S'Array of coupled variables (num_name)\n'
p1523
sS'cpp_type'
p1524
S'unsigned int'
p1525
sS'default'
p1526
g3
sS'name'
p1527
S'op_num'
p1528
sS'required'
p1529
I00
sS'group_name'
p1530
Nsa(dp1531
S'description'
p1532
S'The seed for the master random number generator\n'
p1533
sS'cpp_type'
p1534
S'unsigned int'
p1535
sS'default'
p1536
S'0'
p1537
sS'name'
p1538
S'seed'
p1539
sS'required'
p1540
I00
sS'group_name'
p1541
S'Advanced'
p1542
sa(dp1543
S'description'
p1544
g3
sS'cpp_type'
p1545
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1546
sS'default'
p1547
S'BndsCalcAux'
p1548
sS'name'
p1549
S'type'
p1550
sS'required'
p1551
I00
sS'group_name'
p1552
Nsa(dp1553
S'description'
p1554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1555
sS'cpp_type'
p1556
S'bool'
p1557
sS'default'
p1558
S'0'
p1559
sS'name'
p1560
S'use_displaced_mesh'
p1561
sS'required'
p1562
I00
sS'group_name'
p1563
S'Advanced'
p1564
sa(dp1565
S'description'
p1566
S'Array of coupled variables\n'
p1567
sS'cpp_type'
p1568
S'std::vector<VariableName>'
p1569
sS'default'
p1570
g3
sS'name'
p1571
S'v'
p1572
sS'required'
p1573
I01
sS'group_name'
p1574
Nsa(dp1575
S'description'
p1576
S'Array of coupled variables (base_name)\n'
p1577
sS'cpp_type'
p1578
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1579
sS'default'
p1580
g3
sS'name'
p1581
S'var_name_base'
p1582
sS'required'
p1583
I00
sS'group_name'
p1584
Nsa(dp1585
S'description'
p1586
S'The name of the variable that this object applies to\n'
p1587
sS'cpp_type'
p1588
S'AuxVariableName'
p1589
sS'default'
p1590
g3
sS'name'
p1591
S'variable'
p1592
sS'required'
p1593
I01
sS'group_name'
p1594
NsasS'name'
p1595
S'/AuxKernels/BndsCalcAux'
p1596
sa(dp1597
S'description'
p1598
g3
sS'subblocks'
p1599
NsS'parameters'
p1600
(lp1601
(dp1602
S'description'
p1603
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1604
sS'cpp_type'
p1605
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1606
sS'default'
p1607
g3
sS'name'
p1608
S'block'
p1609
sS'required'
p1610
I00
sS'group_name'
p1611
Nsa(dp1612
S'description'
p1613
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1614
sS'cpp_type'
p1615
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1616
sS'default'
p1617
g3
sS'name'
p1618
S'boundary'
p1619
sS'required'
p1620
I00
sS'group_name'
p1621
Nsa(dp1622
S'description'
p1623
S'The variable to be bounded\n'
p1624
sS'cpp_type'
p1625
S'std::vector<VariableName>'
p1626
sS'default'
p1627
g3
sS'name'
p1628
S'bounded_variable'
p1629
sS'required'
p1630
I01
sS'group_name'
p1631
Nsa(dp1632
S'description'
p1633
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1634
sS'cpp_type'
p1635
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1636
sS'default'
p1637
g3
sS'name'
p1638
S'control_tags'
p1639
sS'required'
p1640
I00
sS'group_name'
p1641
Nsa(dp1642
S'name'
p1643
S'execute_on'
p1644
sS'cpp_type'
p1645
S'MultiMooseEnum'
p1646
sS'default'
p1647
S'LINEAR'
p1648
sS'description'
p1649
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1650
sS'required'
p1651
I00
sS'options'
p1652
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1653
sS'group_name'
p1654
Nsa(dp1655
S'description'
p1656
S'The lower bound for the variable\n'
p1657
sS'cpp_type'
p1658
S'double'
p1659
sS'default'
p1660
g3
sS'name'
p1661
S'lower'
p1662
sS'required'
p1663
I00
sS'group_name'
p1664
Nsa(dp1665
S'description'
p1666
S'The seed for the master random number generator\n'
p1667
sS'cpp_type'
p1668
S'unsigned int'
p1669
sS'default'
p1670
S'0'
p1671
sS'name'
p1672
S'seed'
p1673
sS'required'
p1674
I00
sS'group_name'
p1675
S'Advanced'
p1676
sa(dp1677
S'description'
p1678
g3
sS'cpp_type'
p1679
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1680
sS'default'
p1681
S'BoundsAux'
p1682
sS'name'
p1683
S'type'
p1684
sS'required'
p1685
I00
sS'group_name'
p1686
Nsa(dp1687
S'description'
p1688
S'The upper bound for the variable\n'
p1689
sS'cpp_type'
p1690
S'double'
p1691
sS'default'
p1692
g3
sS'name'
p1693
S'upper'
p1694
sS'required'
p1695
I00
sS'group_name'
p1696
Nsa(dp1697
S'description'
p1698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1699
sS'cpp_type'
p1700
S'bool'
p1701
sS'default'
p1702
S'0'
p1703
sS'name'
p1704
S'use_displaced_mesh'
p1705
sS'required'
p1706
I00
sS'group_name'
p1707
S'Advanced'
p1708
sa(dp1709
S'description'
p1710
S'The name of the variable that this object applies to\n'
p1711
sS'cpp_type'
p1712
S'AuxVariableName'
p1713
sS'default'
p1714
g3
sS'name'
p1715
S'variable'
p1716
sS'required'
p1717
I01
sS'group_name'
p1718
NsasS'name'
p1719
S'/AuxKernels/BoundsAux'
p1720
sa(dp1721
S'description'
p1722
g3
sS'subblocks'
p1723
NsS'parameters'
p1724
(lp1725
(dp1726
S'description'
p1727
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1728
sS'cpp_type'
p1729
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1730
sS'default'
p1731
g3
sS'name'
p1732
S'block'
p1733
sS'required'
p1734
I00
sS'group_name'
p1735
Nsa(dp1736
S'description'
p1737
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1738
sS'cpp_type'
p1739
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1740
sS'default'
p1741
g3
sS'name'
p1742
S'boundary'
p1743
sS'required'
p1744
I00
sS'group_name'
p1745
Nsa(dp1746
S'description'
p1747
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1748
sS'cpp_type'
p1749
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1750
sS'default'
p1751
g3
sS'name'
p1752
S'control_tags'
p1753
sS'required'
p1754
I00
sS'group_name'
p1755
Nsa(dp1756
S'name'
p1757
S'execute_on'
p1758
sS'cpp_type'
p1759
S'MultiMooseEnum'
p1760
sS'default'
p1761
S'LINEAR'
p1762
sS'description'
p1763
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1764
sS'required'
p1765
I00
sS'options'
p1766
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1767
sS'group_name'
p1768
Nsa(dp1769
S'description'
p1770
S'The seed for the master random number generator\n'
p1771
sS'cpp_type'
p1772
S'unsigned int'
p1773
sS'default'
p1774
S'0'
p1775
sS'name'
p1776
S'seed'
p1777
sS'required'
p1778
I00
sS'group_name'
p1779
S'Advanced'
p1780
sa(dp1781
S'description'
p1782
g3
sS'cpp_type'
p1783
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1784
sS'default'
p1785
S'ConstantAux'
p1786
sS'name'
p1787
S'type'
p1788
sS'required'
p1789
I00
sS'group_name'
p1790
Nsa(dp1791
S'description'
p1792
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1793
sS'cpp_type'
p1794
S'bool'
p1795
sS'default'
p1796
S'0'
p1797
sS'name'
p1798
S'use_displaced_mesh'
p1799
sS'required'
p1800
I00
sS'group_name'
p1801
S'Advanced'
p1802
sa(dp1803
S'description'
p1804
S'Some constant value that can be read from the input file\n'
p1805
sS'cpp_type'
p1806
S'double'
p1807
sS'default'
p1808
S'0'
p1809
sS'name'
p1810
S'value'
p1811
sS'required'
p1812
I00
sS'group_name'
p1813
Nsa(dp1814
S'description'
p1815
S'The name of the variable that this object applies to\n'
p1816
sS'cpp_type'
p1817
S'AuxVariableName'
p1818
sS'default'
p1819
g3
sS'name'
p1820
S'variable'
p1821
sS'required'
p1822
I01
sS'group_name'
p1823
NsasS'name'
p1824
S'/AuxKernels/ConstantAux'
p1825
sa(dp1826
S'description'
p1827
g3
sS'subblocks'
p1828
NsS'parameters'
p1829
(lp1830
(dp1831
S'description'
p1832
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1833
sS'cpp_type'
p1834
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1835
sS'default'
p1836
g3
sS'name'
p1837
S'block'
p1838
sS'required'
p1839
I00
sS'group_name'
p1840
Nsa(dp1841
S'description'
p1842
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1843
sS'cpp_type'
p1844
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1845
sS'default'
p1846
g3
sS'name'
p1847
S'boundary'
p1848
sS'required'
p1849
I00
sS'group_name'
p1850
Nsa(dp1851
S'description'
p1852
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1853
sS'cpp_type'
p1854
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1855
sS'default'
p1856
g3
sS'name'
p1857
S'control_tags'
p1858
sS'required'
p1859
I00
sS'group_name'
p1860
Nsa(dp1861
S'name'
p1862
S'execute_on'
p1863
sS'cpp_type'
p1864
S'MultiMooseEnum'
p1865
sS'default'
p1866
S'NONLINEAR'
p1867
sS'description'
p1868
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1869
sS'required'
p1870
I00
sS'options'
p1871
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1872
sS'group_name'
p1873
Nsa(dp1874
S'description'
p1875
S'The nodal area\n'
p1876
sS'cpp_type'
p1877
S'std::vector<VariableName>'
p1878
sS'default'
p1879
g3
sS'name'
p1880
S'nodal_area'
p1881
sS'required'
p1882
I01
sS'group_name'
p1883
Nsa(dp1884
S'description'
p1885
S'The boundary to be penetrated\n'
p1886
sS'cpp_type'
p1887
S'BoundaryName'
p1888
sS'default'
p1889
g3
sS'name'
p1890
S'paired_boundary'
p1891
sS'required'
p1892
I01
sS'group_name'
p1893
Nsa(dp1894
S'description'
p1895
S'The seed for the master random number generator\n'
p1896
sS'cpp_type'
p1897
S'unsigned int'
p1898
sS'default'
p1899
S'0'
p1900
sS'name'
p1901
S'seed'
p1902
sS'required'
p1903
I00
sS'group_name'
p1904
S'Advanced'
p1905
sa(dp1906
S'description'
p1907
g3
sS'cpp_type'
p1908
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p1909
sS'default'
p1910
S'ContactPressureAux'
p1911
sS'name'
p1912
S'type'
p1913
sS'required'
p1914
I00
sS'group_name'
p1915
Nsa(dp1916
S'description'
p1917
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1918
sS'cpp_type'
p1919
S'bool'
p1920
sS'default'
p1921
S'0'
p1922
sS'name'
p1923
S'use_displaced_mesh'
p1924
sS'required'
p1925
I00
sS'group_name'
p1926
S'Advanced'
p1927
sa(dp1928
S'description'
p1929
S'The name of the variable that this object applies to\n'
p1930
sS'cpp_type'
p1931
S'AuxVariableName'
p1932
sS'default'
p1933
g3
sS'name'
p1934
S'variable'
p1935
sS'required'
p1936
I01
sS'group_name'
p1937
NsasS'name'
p1938
S'/AuxKernels/ContactPressureAux'
p1939
sa(dp1940
S'description'
p1941
g3
sS'subblocks'
p1942
NsS'parameters'
p1943
(lp1944
(dp1945
S'description'
p1946
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1947
sS'cpp_type'
p1948
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1949
sS'default'
p1950
g3
sS'name'
p1951
S'block'
p1952
sS'required'
p1953
I00
sS'group_name'
p1954
Nsa(dp1955
S'description'
p1956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1957
sS'cpp_type'
p1958
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1959
sS'default'
p1960
g3
sS'name'
p1961
S'boundary'
p1962
sS'required'
p1963
I00
sS'group_name'
p1964
Nsa(dp1965
S'description'
p1966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1967
sS'cpp_type'
p1968
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p1969
sS'default'
p1970
g3
sS'name'
p1971
S'control_tags'
p1972
sS'required'
p1973
I00
sS'group_name'
p1974
Nsa(dp1975
S'description'
p1976
S'The variable whose values are going to be interpolated.\n'
p1977
sS'cpp_type'
p1978
S'std::vector<VariableName>'
p1979
sS'default'
p1980
g3
sS'name'
p1981
S'coupled_var'
p1982
sS'required'
p1983
I01
sS'group_name'
p1984
Nsa(dp1985
S'name'
p1986
S'direction'
p1987
sS'cpp_type'
p1988
S'MooseEnum'
p1989
sS'default'
p1990
g3
sS'description'
p1991
S'The direction to interpolate in.\n'
p1992
sS'required'
p1993
I01
sS'options'
p1994
S'x y z'
p1995
sS'group_name'
p1996
Nsa(dp1997
S'name'
p1998
S'execute_on'
p1999
sS'cpp_type'
p2000
S'MultiMooseEnum'
p2001
sS'default'
p2002
S'LINEAR'
p2003
sS'description'
p2004
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2005
sS'required'
p2006
I00
sS'options'
p2007
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2008
sS'group_name'
p2009
Nsa(dp2010
S'description'
p2011
S'The seed for the master random number generator\n'
p2012
sS'cpp_type'
p2013
S'unsigned int'
p2014
sS'default'
p2015
S'0'
p2016
sS'name'
p2017
S'seed'
p2018
sS'required'
p2019
I00
sS'group_name'
p2020
S'Advanced'
p2021
sa(dp2022
S'description'
p2023
g3
sS'cpp_type'
p2024
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2025
sS'default'
p2026
S'CoupledDirectionalMeshHeightInterpolation'
p2027
sS'name'
p2028
S'type'
p2029
sS'required'
p2030
I00
sS'group_name'
p2031
Nsa(dp2032
S'description'
p2033
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2034
sS'cpp_type'
p2035
S'bool'
p2036
sS'default'
p2037
S'0'
p2038
sS'name'
p2039
S'use_displaced_mesh'
p2040
sS'required'
p2041
I00
sS'group_name'
p2042
S'Advanced'
p2043
sa(dp2044
S'description'
p2045
S'The name of the variable that this object applies to\n'
p2046
sS'cpp_type'
p2047
S'AuxVariableName'
p2048
sS'default'
p2049
g3
sS'name'
p2050
S'variable'
p2051
sS'required'
p2052
I01
sS'group_name'
p2053
NsasS'name'
p2054
S'/AuxKernels/CoupledDirectionalMeshHeightInterpolation'
p2055
sa(dp2056
S'description'
p2057
S'Free energy contribution from the cross terms in ACMultiInetrface\n'
p2058
sS'subblocks'
p2059
NsS'parameters'
p2060
(lp2061
(dp2062
S'description'
p2063
S'Coupled variable holding additional free energy contributions to be summed up\n'
p2064
sS'cpp_type'
p2065
S'std::vector<VariableName>'
p2066
sS'default'
p2067
S'0'
p2068
sS'name'
p2069
S'additional_free_energy'
p2070
sS'required'
p2071
I00
sS'group_name'
p2072
Nsa(dp2073
S'description'
p2074
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2075
sS'cpp_type'
p2076
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2077
sS'default'
p2078
g3
sS'name'
p2079
S'block'
p2080
sS'required'
p2081
I00
sS'group_name'
p2082
Nsa(dp2083
S'description'
p2084
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2085
sS'cpp_type'
p2086
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2087
sS'default'
p2088
g3
sS'name'
p2089
S'boundary'
p2090
sS'required'
p2091
I00
sS'group_name'
p2092
Nsa(dp2093
S'description'
p2094
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2095
sS'cpp_type'
p2096
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2097
sS'default'
p2098
g3
sS'name'
p2099
S'control_tags'
p2100
sS'required'
p2101
I00
sS'group_name'
p2102
Nsa(dp2103
S'name'
p2104
S'execute_on'
p2105
sS'cpp_type'
p2106
S'MultiMooseEnum'
p2107
sS'default'
p2108
S'LINEAR'
p2109
sS'description'
p2110
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2111
sS'required'
p2112
I00
sS'options'
p2113
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2114
sS'group_name'
p2115
Nsa(dp2116
S'description'
p2117
S'Variable names that contribute to interfacial energy\n'
p2118
sS'cpp_type'
p2119
S'std::vector<VariableName>'
p2120
sS'default'
p2121
g3
sS'name'
p2122
S'interfacial_vars'
p2123
sS'required'
p2124
I00
sS'group_name'
p2125
Nsa(dp2126
S'description'
p2127
S'Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n'
p2128
sS'cpp_type'
p2129
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2130
sS'default'
p2131
g3
sS'name'
p2132
S'kappa_names'
p2133
sS'required'
p2134
I01
sS'group_name'
p2135
Nsa(dp2136
S'description'
p2137
S'The seed for the master random number generator\n'
p2138
sS'cpp_type'
p2139
S'unsigned int'
p2140
sS'default'
p2141
S'0'
p2142
sS'name'
p2143
S'seed'
p2144
sS'required'
p2145
I00
sS'group_name'
p2146
S'Advanced'
p2147
sa(dp2148
S'description'
p2149
g3
sS'cpp_type'
p2150
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2151
sS'default'
p2152
S'CrossTermGradientFreeEnergy'
p2153
sS'name'
p2154
S'type'
p2155
sS'required'
p2156
I00
sS'group_name'
p2157
Nsa(dp2158
S'description'
p2159
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2160
sS'cpp_type'
p2161
S'bool'
p2162
sS'default'
p2163
S'0'
p2164
sS'name'
p2165
S'use_displaced_mesh'
p2166
sS'required'
p2167
I00
sS'group_name'
p2168
S'Advanced'
p2169
sa(dp2170
S'description'
p2171
S'The name of the variable that this object applies to\n'
p2172
sS'cpp_type'
p2173
S'AuxVariableName'
p2174
sS'default'
p2175
g3
sS'name'
p2176
S'variable'
p2177
sS'required'
p2178
I01
sS'group_name'
p2179
NsasS'name'
p2180
S'/AuxKernels/CrossTermGradientFreeEnergy'
p2181
sa(dp2182
S'description'
p2183
S'Output updated rotation tensor to a file: Use for stereographic plots\n'
p2184
sS'subblocks'
p2185
NsS'parameters'
p2186
(lp2187
(dp2188
S'description'
p2189
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2190
sS'cpp_type'
p2191
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2192
sS'default'
p2193
g3
sS'name'
p2194
S'block'
p2195
sS'required'
p2196
I00
sS'group_name'
p2197
Nsa(dp2198
S'description'
p2199
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2200
sS'cpp_type'
p2201
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2202
sS'default'
p2203
g3
sS'name'
p2204
S'boundary'
p2205
sS'required'
p2206
I00
sS'group_name'
p2207
Nsa(dp2208
S'description'
p2209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2210
sS'cpp_type'
p2211
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2212
sS'default'
p2213
g3
sS'name'
p2214
S'control_tags'
p2215
sS'required'
p2216
I00
sS'group_name'
p2217
Nsa(dp2218
S'name'
p2219
S'execute_on'
p2220
sS'cpp_type'
p2221
S'MultiMooseEnum'
p2222
sS'default'
p2223
S'LINEAR'
p2224
sS'description'
p2225
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2226
sS'required'
p2227
I00
sS'options'
p2228
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2229
sS'group_name'
p2230
Nsa(dp2231
S'description'
p2232
S'Frequency of Output\n'
p2233
sS'cpp_type'
p2234
S'unsigned int'
p2235
sS'default'
p2236
S'1'
p2237
sS'name'
p2238
S'output_frequency'
p2239
sS'required'
p2240
I00
sS'group_name'
p2241
Nsa(dp2242
S'description'
p2243
S'Name of rotation output file: Default rot.out\n'
p2244
sS'cpp_type'
p2245
S'FileName'
p2246
sS'default'
p2247
S'rot.out'
p2248
sS'name'
p2249
S'rotout_file_name'
p2250
sS'required'
p2251
I00
sS'group_name'
p2252
Nsa(dp2253
S'description'
p2254
S'The seed for the master random number generator\n'
p2255
sS'cpp_type'
p2256
S'unsigned int'
p2257
sS'default'
p2258
S'0'
p2259
sS'name'
p2260
S'seed'
p2261
sS'required'
p2262
I00
sS'group_name'
p2263
S'Advanced'
p2264
sa(dp2265
S'description'
p2266
g3
sS'cpp_type'
p2267
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2268
sS'default'
p2269
S'CrystalPlasticityRotationOutAux'
p2270
sS'name'
p2271
S'type'
p2272
sS'required'
p2273
I00
sS'group_name'
p2274
Nsa(dp2275
S'description'
p2276
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2277
sS'cpp_type'
p2278
S'bool'
p2279
sS'default'
p2280
S'0'
p2281
sS'name'
p2282
S'use_displaced_mesh'
p2283
sS'required'
p2284
I00
sS'group_name'
p2285
S'Advanced'
p2286
sa(dp2287
S'description'
p2288
S'The name of the variable that this object applies to\n'
p2289
sS'cpp_type'
p2290
S'AuxVariableName'
p2291
sS'default'
p2292
g3
sS'name'
p2293
S'variable'
p2294
sS'required'
p2295
I01
sS'group_name'
p2296
NsasS'name'
p2297
S'/AuxKernels/CrystalPlasticityRotationOutAux'
p2298
sa(dp2299
S'description'
p2300
S'Takes RankTwoTensor material and outputs component in cylindrical coordinates\n'
p2301
sS'subblocks'
p2302
NsS'parameters'
p2303
(lp2304
(dp2305
S'description'
p2306
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2307
sS'cpp_type'
p2308
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2309
sS'default'
p2310
g3
sS'name'
p2311
S'block'
p2312
sS'required'
p2313
I00
sS'group_name'
p2314
Nsa(dp2315
S'description'
p2316
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2317
sS'cpp_type'
p2318
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2319
sS'default'
p2320
g3
sS'name'
p2321
S'boundary'
p2322
sS'required'
p2323
I00
sS'group_name'
p2324
Nsa(dp2325
S'description'
p2326
S'Location of the center point of the cylindrical coordinates\n'
p2327
sS'cpp_type'
p2328
S'libMesh::Point'
p2329
sS'default'
p2330
g3
sS'name'
p2331
S'center_point'
p2332
sS'required'
p2333
I01
sS'group_name'
p2334
Nsa(dp2335
S'description'
p2336
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2337
sS'cpp_type'
p2338
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2339
sS'default'
p2340
g3
sS'name'
p2341
S'control_tags'
p2342
sS'required'
p2343
I00
sS'group_name'
p2344
Nsa(dp2345
S'name'
p2346
S'execute_on'
p2347
sS'cpp_type'
p2348
S'MultiMooseEnum'
p2349
sS'default'
p2350
S'LINEAR'
p2351
sS'description'
p2352
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2353
sS'required'
p2354
I00
sS'options'
p2355
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2356
sS'group_name'
p2357
Nsa(dp2358
S'description'
p2359
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p2360
sS'cpp_type'
p2361
S'unsigned int'
p2362
sS'default'
p2363
g3
sS'name'
p2364
S'index_i'
p2365
sS'required'
p2366
I01
sS'group_name'
p2367
Nsa(dp2368
S'description'
p2369
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p2370
sS'cpp_type'
p2371
S'unsigned int'
p2372
sS'default'
p2373
g3
sS'name'
p2374
S'index_j'
p2375
sS'required'
p2376
I01
sS'group_name'
p2377
Nsa(dp2378
S'description'
p2379
S'The rank two material tensor name\n'
p2380
sS'cpp_type'
p2381
S'MaterialPropertyName'
p2382
sS'default'
p2383
g3
sS'name'
p2384
S'rank_two_tensor'
p2385
sS'required'
p2386
I01
sS'group_name'
p2387
Nsa(dp2388
S'description'
p2389
S'The seed for the master random number generator\n'
p2390
sS'cpp_type'
p2391
S'unsigned int'
p2392
sS'default'
p2393
S'0'
p2394
sS'name'
p2395
S'seed'
p2396
sS'required'
p2397
I00
sS'group_name'
p2398
S'Advanced'
p2399
sa(dp2400
S'description'
p2401
g3
sS'cpp_type'
p2402
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2403
sS'default'
p2404
S'CylindricalRankTwoAux'
p2405
sS'name'
p2406
S'type'
p2407
sS'required'
p2408
I00
sS'group_name'
p2409
Nsa(dp2410
S'description'
p2411
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2412
sS'cpp_type'
p2413
S'bool'
p2414
sS'default'
p2415
S'0'
p2416
sS'name'
p2417
S'use_displaced_mesh'
p2418
sS'required'
p2419
I00
sS'group_name'
p2420
S'Advanced'
p2421
sa(dp2422
S'description'
p2423
S'The name of the variable that this object applies to\n'
p2424
sS'cpp_type'
p2425
S'AuxVariableName'
p2426
sS'default'
p2427
g3
sS'name'
p2428
S'variable'
p2429
sS'required'
p2430
I01
sS'group_name'
p2431
NsasS'name'
p2432
S'/AuxKernels/CylindricalRankTwoAux'
p2433
sa(dp2434
S'description'
p2435
S'Darcy flux (in m^3.s^-1.m^-2, or m.s^-1)  -(k_ij/mu (nabla_j P - w_j)), where k_ij is the permeability tensor, mu is the fluid viscosity, P is the fluid pressure, and w_j is the fluid weight.  If velocity_scaling is used then -(k_ij/mu (nabla_j P - w_j))/velocity_scaling is returned\n'
p2436
sS'subblocks'
p2437
NsS'parameters'
p2438
(lp2439
(dp2440
S'description'
p2441
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2442
sS'cpp_type'
p2443
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2444
sS'default'
p2445
g3
sS'name'
p2446
S'block'
p2447
sS'required'
p2448
I00
sS'group_name'
p2449
Nsa(dp2450
S'description'
p2451
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2452
sS'cpp_type'
p2453
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2454
sS'default'
p2455
g3
sS'name'
p2456
S'boundary'
p2457
sS'required'
p2458
I00
sS'group_name'
p2459
Nsa(dp2460
S'name'
p2461
S'component'
p2462
sS'cpp_type'
p2463
S'MooseEnum'
p2464
sS'default'
p2465
g3
sS'description'
p2466
S'The component of the Darcy flux to return\n'
p2467
sS'required'
p2468
I00
sS'options'
p2469
S'x y z'
p2470
sS'group_name'
p2471
Nsa(dp2472
S'description'
p2473
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2474
sS'cpp_type'
p2475
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2476
sS'default'
p2477
g3
sS'name'
p2478
S'control_tags'
p2479
sS'required'
p2480
I00
sS'group_name'
p2481
Nsa(dp2482
S'name'
p2483
S'execute_on'
p2484
sS'cpp_type'
p2485
S'MultiMooseEnum'
p2486
sS'default'
p2487
S'LINEAR'
p2488
sS'description'
p2489
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2490
sS'required'
p2491
I00
sS'options'
p2492
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2493
sS'group_name'
p2494
Nsa(dp2495
S'description'
p2496
S'Fluid dynamic viscosity (usually measured in Pa.s)\n'
p2497
sS'cpp_type'
p2498
S'double'
p2499
sS'default'
p2500
g3
sS'name'
p2501
S'fluid_viscosity'
p2502
sS'required'
p2503
I01
sS'group_name'
p2504
Nsa(dp2505
S'description'
p2506
S"Fluid weight (gravity*density) as a vector pointing downwards (usually measured in kg.m^-2.s^-2 = Pa/m).  Eg '0 0 -10000'\n"
p2507
sS'cpp_type'
p2508
S'libMesh::VectorValue<double>'
p2509
sS'default'
p2510
g3
sS'name'
p2511
S'fluid_weight'
p2512
sS'required'
p2513
I01
sS'group_name'
p2514
Nsa(dp2515
S'description'
p2516
S'The variable representing the porepressure\n'
p2517
sS'cpp_type'
p2518
S'std::vector<VariableName>'
p2519
sS'default'
p2520
g3
sS'name'
p2521
S'porepressure'
p2522
sS'required'
p2523
I01
sS'group_name'
p2524
Nsa(dp2525
S'description'
p2526
S'The seed for the master random number generator\n'
p2527
sS'cpp_type'
p2528
S'unsigned int'
p2529
sS'default'
p2530
S'0'
p2531
sS'name'
p2532
S'seed'
p2533
sS'required'
p2534
I00
sS'group_name'
p2535
S'Advanced'
p2536
sa(dp2537
S'description'
p2538
g3
sS'cpp_type'
p2539
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2540
sS'default'
p2541
S'DarcyFluxComponent'
p2542
sS'name'
p2543
S'type'
p2544
sS'required'
p2545
I00
sS'group_name'
p2546
Nsa(dp2547
S'description'
p2548
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2549
sS'cpp_type'
p2550
S'bool'
p2551
sS'default'
p2552
S'0'
p2553
sS'name'
p2554
S'use_displaced_mesh'
p2555
sS'required'
p2556
I00
sS'group_name'
p2557
S'Advanced'
p2558
sa(dp2559
S'description'
p2560
S'The name of the variable that this object applies to\n'
p2561
sS'cpp_type'
p2562
S'AuxVariableName'
p2563
sS'default'
p2564
g3
sS'name'
p2565
S'variable'
p2566
sS'required'
p2567
I01
sS'group_name'
p2568
Nsa(dp2569
S'description'
p2570
S'Scale the result by (1/velocity_scaling).  Usually velocity_scaling = porosity.\n'
p2571
sS'cpp_type'
p2572
S'double'
p2573
sS'default'
p2574
S'1'
p2575
sS'name'
p2576
S'velocity_scaling'
p2577
sS'required'
p2578
I00
sS'group_name'
p2579
NsasS'name'
p2580
S'/AuxKernels/DarcyFluxComponent'
p2581
sa(dp2582
S'description'
p2583
g3
sS'subblocks'
p2584
NsS'parameters'
p2585
(lp2586
(dp2587
S'description'
p2588
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2589
sS'cpp_type'
p2590
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2591
sS'default'
p2592
g3
sS'name'
p2593
S'block'
p2594
sS'required'
p2595
I00
sS'group_name'
p2596
Nsa(dp2597
S'description'
p2598
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2599
sS'cpp_type'
p2600
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2601
sS'default'
p2602
g3
sS'name'
p2603
S'boundary'
p2604
sS'required'
p2605
I00
sS'group_name'
p2606
Nsa(dp2607
S'description'
p2608
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2609
sS'cpp_type'
p2610
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2611
sS'default'
p2612
g3
sS'name'
p2613
S'control_tags'
p2614
sS'required'
p2615
I00
sS'group_name'
p2616
Nsa(dp2617
S'description'
p2618
S'The variable that is being debugged.\n'
p2619
sS'cpp_type'
p2620
S'NonlinearVariableName'
p2621
sS'default'
p2622
g3
sS'name'
p2623
S'debug_variable'
p2624
sS'required'
p2625
I01
sS'group_name'
p2626
Nsa(dp2627
S'name'
p2628
S'execute_on'
p2629
sS'cpp_type'
p2630
S'MultiMooseEnum'
p2631
sS'default'
p2632
S'LINEAR'
p2633
sS'description'
p2634
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2635
sS'required'
p2636
I00
sS'options'
p2637
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2638
sS'group_name'
p2639
Nsa(dp2640
S'description'
p2641
S'The seed for the master random number generator\n'
p2642
sS'cpp_type'
p2643
S'unsigned int'
p2644
sS'default'
p2645
S'0'
p2646
sS'name'
p2647
S'seed'
p2648
sS'required'
p2649
I00
sS'group_name'
p2650
S'Advanced'
p2651
sa(dp2652
S'description'
p2653
g3
sS'cpp_type'
p2654
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2655
sS'default'
p2656
S'DebugResidualAux'
p2657
sS'name'
p2658
S'type'
p2659
sS'required'
p2660
I00
sS'group_name'
p2661
Nsa(dp2662
S'description'
p2663
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2664
sS'cpp_type'
p2665
S'bool'
p2666
sS'default'
p2667
S'0'
p2668
sS'name'
p2669
S'use_displaced_mesh'
p2670
sS'required'
p2671
I00
sS'group_name'
p2672
S'Advanced'
p2673
sa(dp2674
S'description'
p2675
S'The name of the variable that this object applies to\n'
p2676
sS'cpp_type'
p2677
S'AuxVariableName'
p2678
sS'default'
p2679
g3
sS'name'
p2680
S'variable'
p2681
sS'required'
p2682
I01
sS'group_name'
p2683
NsasS'name'
p2684
S'/AuxKernels/DebugResidualAux'
p2685
sa(dp2686
S'description'
p2687
g3
sS'subblocks'
p2688
NsS'parameters'
p2689
(lp2690
(dp2691
S'description'
p2692
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2693
sS'cpp_type'
p2694
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2695
sS'default'
p2696
g3
sS'name'
p2697
S'block'
p2698
sS'required'
p2699
I00
sS'group_name'
p2700
Nsa(dp2701
S'description'
p2702
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2703
sS'cpp_type'
p2704
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2705
sS'default'
p2706
g3
sS'name'
p2707
S'boundary'
p2708
sS'required'
p2709
I00
sS'group_name'
p2710
Nsa(dp2711
S'description'
p2712
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2713
sS'cpp_type'
p2714
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2715
sS'default'
p2716
g3
sS'name'
p2717
S'control_tags'
p2718
sS'required'
p2719
I00
sS'group_name'
p2720
Nsa(dp2721
S'description'
p2722
S'The CrackFrontDefinition user object name\n'
p2723
sS'cpp_type'
p2724
S'UserObjectName'
p2725
sS'default'
p2726
g3
sS'name'
p2727
S'crack_front_definition'
p2728
sS'required'
p2729
I01
sS'group_name'
p2730
Nsa(dp2731
S'description'
p2732
S'The index of the point on the crack front corresponding to this q function\n'
p2733
sS'cpp_type'
p2734
S'unsigned int'
p2735
sS'default'
p2736
g3
sS'name'
p2737
S'crack_front_point_index'
p2738
sS'required'
p2739
I00
sS'group_name'
p2740
Nsa(dp2741
S'name'
p2742
S'execute_on'
p2743
sS'cpp_type'
p2744
S'MultiMooseEnum'
p2745
sS'default'
p2746
S'LINEAR'
p2747
sS'description'
p2748
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2749
sS'required'
p2750
I00
sS'options'
p2751
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2752
sS'group_name'
p2753
Nsa(dp2754
S'description'
p2755
S'Radius for J-Integral calculation\n'
p2756
sS'cpp_type'
p2757
S'double'
p2758
sS'default'
p2759
g3
sS'name'
p2760
S'j_integral_radius_inner'
p2761
sS'required'
p2762
I01
sS'group_name'
p2763
Nsa(dp2764
S'description'
p2765
S'Radius for J-Integral calculation\n'
p2766
sS'cpp_type'
p2767
S'double'
p2768
sS'default'
p2769
g3
sS'name'
p2770
S'j_integral_radius_outer'
p2771
sS'required'
p2772
I01
sS'group_name'
p2773
Nsa(dp2774
S'description'
p2775
S'The seed for the master random number generator\n'
p2776
sS'cpp_type'
p2777
S'unsigned int'
p2778
sS'default'
p2779
S'0'
p2780
sS'name'
p2781
S'seed'
p2782
sS'required'
p2783
I00
sS'group_name'
p2784
S'Advanced'
p2785
sa(dp2786
S'description'
p2787
g3
sS'cpp_type'
p2788
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2789
sS'default'
p2790
S'DomainIntegralQFunction'
p2791
sS'name'
p2792
S'type'
p2793
sS'required'
p2794
I00
sS'group_name'
p2795
Nsa(dp2796
S'description'
p2797
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2798
sS'cpp_type'
p2799
S'bool'
p2800
sS'default'
p2801
S'0'
p2802
sS'name'
p2803
S'use_displaced_mesh'
p2804
sS'required'
p2805
I00
sS'group_name'
p2806
S'Advanced'
p2807
sa(dp2808
S'description'
p2809
S'The name of the variable that this object applies to\n'
p2810
sS'cpp_type'
p2811
S'AuxVariableName'
p2812
sS'default'
p2813
g3
sS'name'
p2814
S'variable'
p2815
sS'required'
p2816
I01
sS'group_name'
p2817
NsasS'name'
p2818
S'/AuxKernels/DomainIntegralQFunction'
p2819
sa(dp2820
S'description'
p2821
g3
sS'subblocks'
p2822
NsS'parameters'
p2823
(lp2824
(dp2825
S'description'
p2826
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2827
sS'cpp_type'
p2828
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2829
sS'default'
p2830
g3
sS'name'
p2831
S'block'
p2832
sS'required'
p2833
I00
sS'group_name'
p2834
Nsa(dp2835
S'description'
p2836
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2837
sS'cpp_type'
p2838
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2839
sS'default'
p2840
g3
sS'name'
p2841
S'boundary'
p2842
sS'required'
p2843
I00
sS'group_name'
p2844
Nsa(dp2845
S'description'
p2846
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2847
sS'cpp_type'
p2848
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2849
sS'default'
p2850
g3
sS'name'
p2851
S'control_tags'
p2852
sS'required'
p2853
I00
sS'group_name'
p2854
Nsa(dp2855
S'description'
p2856
S'The CrackFrontDefinition user object name\n'
p2857
sS'cpp_type'
p2858
S'UserObjectName'
p2859
sS'default'
p2860
g3
sS'name'
p2861
S'crack_front_definition'
p2862
sS'required'
p2863
I01
sS'group_name'
p2864
Nsa(dp2865
S'description'
p2866
S'The index of the point on the crack front corresponding to this q function\n'
p2867
sS'cpp_type'
p2868
S'unsigned int'
p2869
sS'default'
p2870
g3
sS'name'
p2871
S'crack_front_point_index'
p2872
sS'required'
p2873
I00
sS'group_name'
p2874
Nsa(dp2875
S'name'
p2876
S'execute_on'
p2877
sS'cpp_type'
p2878
S'MultiMooseEnum'
p2879
sS'default'
p2880
S'LINEAR'
p2881
sS'description'
p2882
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2883
sS'required'
p2884
I00
sS'options'
p2885
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2886
sS'group_name'
p2887
Nsa(dp2888
S'description'
p2889
S'The ring of elements that defines the integration domain\n'
p2890
sS'cpp_type'
p2891
S'unsigned int'
p2892
sS'default'
p2893
g3
sS'name'
p2894
S'ring_index'
p2895
sS'required'
p2896
I01
sS'group_name'
p2897
Nsa(dp2898
S'description'
p2899
S'The seed for the master random number generator\n'
p2900
sS'cpp_type'
p2901
S'unsigned int'
p2902
sS'default'
p2903
S'0'
p2904
sS'name'
p2905
S'seed'
p2906
sS'required'
p2907
I00
sS'group_name'
p2908
S'Advanced'
p2909
sa(dp2910
S'description'
p2911
g3
sS'cpp_type'
p2912
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p2913
sS'default'
p2914
S'DomainIntegralTopologicalQFunction'
p2915
sS'name'
p2916
S'type'
p2917
sS'required'
p2918
I00
sS'group_name'
p2919
Nsa(dp2920
S'description'
p2921
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2922
sS'cpp_type'
p2923
S'bool'
p2924
sS'default'
p2925
S'0'
p2926
sS'name'
p2927
S'use_displaced_mesh'
p2928
sS'required'
p2929
I00
sS'group_name'
p2930
S'Advanced'
p2931
sa(dp2932
S'description'
p2933
S'The name of the variable that this object applies to\n'
p2934
sS'cpp_type'
p2935
S'AuxVariableName'
p2936
sS'default'
p2937
g3
sS'name'
p2938
S'variable'
p2939
sS'required'
p2940
I01
sS'group_name'
p2941
NsasS'name'
p2942
S'/AuxKernels/DomainIntegralTopologicalQFunction'
p2943
sa(dp2944
S'description'
p2945
g3
sS'subblocks'
p2946
NsS'parameters'
p2947
(lp2948
(dp2949
S'description'
p2950
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2951
sS'cpp_type'
p2952
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2953
sS'default'
p2954
g3
sS'name'
p2955
S'block'
p2956
sS'required'
p2957
I00
sS'group_name'
p2958
Nsa(dp2959
S'description'
p2960
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2961
sS'cpp_type'
p2962
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2963
sS'default'
p2964
g3
sS'name'
p2965
S'boundary'
p2966
sS'required'
p2967
I00
sS'group_name'
p2968
Nsa(dp2969
S'description'
p2970
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2971
sS'cpp_type'
p2972
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p2973
sS'default'
p2974
g3
sS'name'
p2975
S'control_tags'
p2976
sS'required'
p2977
I00
sS'group_name'
p2978
Nsa(dp2979
S'name'
p2980
S'execute_on'
p2981
sS'cpp_type'
p2982
S'MultiMooseEnum'
p2983
sS'default'
p2984
S'LINEAR'
p2985
sS'description'
p2986
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2987
sS'required'
p2988
I00
sS'options'
p2989
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2990
sS'group_name'
p2991
Nsa(dp2992
S'description'
p2993
S'The seed for the master random number generator\n'
p2994
sS'cpp_type'
p2995
S'unsigned int'
p2996
sS'default'
p2997
S'0'
p2998
sS'name'
p2999
S'seed'
p3000
sS'required'
p3001
I00
sS'group_name'
p3002
S'Advanced'
p3003
sa(dp3004
S'description'
p3005
g3
sS'cpp_type'
p3006
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3007
sS'default'
p3008
S'ElasticEnergyAux'
p3009
sS'name'
p3010
S'type'
p3011
sS'required'
p3012
I00
sS'group_name'
p3013
Nsa(dp3014
S'description'
p3015
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3016
sS'cpp_type'
p3017
S'bool'
p3018
sS'default'
p3019
S'0'
p3020
sS'name'
p3021
S'use_displaced_mesh'
p3022
sS'required'
p3023
I00
sS'group_name'
p3024
S'Advanced'
p3025
sa(dp3026
S'description'
p3027
S'The name of the variable that this object applies to\n'
p3028
sS'cpp_type'
p3029
S'AuxVariableName'
p3030
sS'default'
p3031
g3
sS'name'
p3032
S'variable'
p3033
sS'required'
p3034
I01
sS'group_name'
p3035
NsasS'name'
p3036
S'/AuxKernels/ElasticEnergyAux'
p3037
sa(dp3038
S'description'
p3039
g3
sS'subblocks'
p3040
NsS'parameters'
p3041
(lp3042
(dp3043
S'description'
p3044
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3045
sS'cpp_type'
p3046
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3047
sS'default'
p3048
g3
sS'name'
p3049
S'block'
p3050
sS'required'
p3051
I00
sS'group_name'
p3052
Nsa(dp3053
S'description'
p3054
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3055
sS'cpp_type'
p3056
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3057
sS'default'
p3058
g3
sS'name'
p3059
S'boundary'
p3060
sS'required'
p3061
I00
sS'group_name'
p3062
Nsa(dp3063
S'description'
p3064
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3065
sS'cpp_type'
p3066
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3067
sS'default'
p3068
g3
sS'name'
p3069
S'control_tags'
p3070
sS'required'
p3071
I00
sS'group_name'
p3072
Nsa(dp3073
S'description'
p3074
S'Tolerance for distance between element and line\n'
p3075
sS'cpp_type'
p3076
S'double'
p3077
sS'default'
p3078
g3
sS'name'
p3079
S'dist_tol'
p3080
sS'required'
p3081
I01
sS'group_name'
p3082
Nsa(dp3083
S'name'
p3084
S'execute_on'
p3085
sS'cpp_type'
p3086
S'MultiMooseEnum'
p3087
sS'default'
p3088
S'INITIAL'
p3089
sS'description'
p3090
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3091
sS'required'
p3092
I00
sS'options'
p3093
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3094
sS'group_name'
p3095
Nsa(dp3096
S'description'
p3097
S'First point of line along which to pick elements\n'
p3098
sS'cpp_type'
p3099
S'libMesh::VectorValue<double>'
p3100
sS'default'
p3101
g3
sS'name'
p3102
S'line1'
p3103
sS'required'
p3104
I01
sS'group_name'
p3105
Nsa(dp3106
S'description'
p3107
S'Second point of line along which to pick elements\n'
p3108
sS'cpp_type'
p3109
S'libMesh::VectorValue<double>'
p3110
sS'default'
p3111
g3
sS'name'
p3112
S'line2'
p3113
sS'required'
p3114
I01
sS'group_name'
p3115
Nsa(dp3116
S'description'
p3117
S'ID of the line along which to pick elements\n'
p3118
sS'cpp_type'
p3119
S'int'
p3120
sS'default'
p3121
S'1'
p3122
sS'name'
p3123
S'line_id'
p3124
sS'required'
p3125
I00
sS'group_name'
p3126
Nsa(dp3127
S'description'
p3128
S'The seed for the master random number generator\n'
p3129
sS'cpp_type'
p3130
S'unsigned int'
p3131
sS'default'
p3132
S'0'
p3133
sS'name'
p3134
S'seed'
p3135
sS'required'
p3136
I00
sS'group_name'
p3137
S'Advanced'
p3138
sa(dp3139
S'description'
p3140
g3
sS'cpp_type'
p3141
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3142
sS'default'
p3143
S'ElementsOnLineAux'
p3144
sS'name'
p3145
S'type'
p3146
sS'required'
p3147
I00
sS'group_name'
p3148
Nsa(dp3149
S'description'
p3150
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3151
sS'cpp_type'
p3152
S'bool'
p3153
sS'default'
p3154
S'0'
p3155
sS'name'
p3156
S'use_displaced_mesh'
p3157
sS'required'
p3158
I00
sS'group_name'
p3159
S'Advanced'
p3160
sa(dp3161
S'description'
p3162
S'The name of the variable that this object applies to\n'
p3163
sS'cpp_type'
p3164
S'AuxVariableName'
p3165
sS'default'
p3166
g3
sS'name'
p3167
S'variable'
p3168
sS'required'
p3169
I01
sS'group_name'
p3170
NsasS'name'
p3171
S'/AuxKernels/ElementsOnLineAux'
p3172
sa(dp3173
S'description'
p3174
S'Feature detection by connectivity analysis\n'
p3175
sS'subblocks'
p3176
NsS'parameters'
p3177
(lp3178
(dp3179
S'description'
p3180
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3181
sS'cpp_type'
p3182
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3183
sS'default'
p3184
g3
sS'name'
p3185
S'block'
p3186
sS'required'
p3187
I00
sS'group_name'
p3188
Nsa(dp3189
S'description'
p3190
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3191
sS'cpp_type'
p3192
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3193
sS'default'
p3194
g3
sS'name'
p3195
S'boundary'
p3196
sS'required'
p3197
I00
sS'group_name'
p3198
Nsa(dp3199
S'description'
p3200
S'The FeatureFloodCount UserObject to get values from.\n'
p3201
sS'cpp_type'
p3202
S'UserObjectName'
p3203
sS'default'
p3204
g3
sS'name'
p3205
S'bubble_object'
p3206
sS'required'
p3207
I01
sS'group_name'
p3208
Nsa(dp3209
S'description'
p3210
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3211
sS'cpp_type'
p3212
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3213
sS'default'
p3214
g3
sS'name'
p3215
S'control_tags'
p3216
sS'required'
p3217
I00
sS'group_name'
p3218
Nsa(dp3219
S'name'
p3220
S'execute_on'
p3221
sS'cpp_type'
p3222
S'MultiMooseEnum'
p3223
sS'default'
p3224
S'LINEAR'
p3225
sS'description'
p3226
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3227
sS'required'
p3228
I00
sS'options'
p3229
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3230
sS'group_name'
p3231
Nsa(dp3232
S'name'
p3233
S'field_display'
p3234
sS'cpp_type'
p3235
S'MooseEnum'
p3236
sS'default'
p3237
S'UNIQUE_REGION'
p3238
sS'description'
p3239
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p3240
sS'required'
p3241
I00
sS'options'
p3242
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p3243
sS'group_name'
p3244
Nsa(dp3245
S'description'
p3246
S'The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n'
p3247
sS'cpp_type'
p3248
S'unsigned int'
p3249
sS'default'
p3250
S'0'
p3251
sS'name'
p3252
S'map_index'
p3253
sS'required'
p3254
I00
sS'group_name'
p3255
Nsa(dp3256
S'description'
p3257
S'The seed for the master random number generator\n'
p3258
sS'cpp_type'
p3259
S'unsigned int'
p3260
sS'default'
p3261
S'0'
p3262
sS'name'
p3263
S'seed'
p3264
sS'required'
p3265
I00
sS'group_name'
p3266
S'Advanced'
p3267
sa(dp3268
S'description'
p3269
g3
sS'cpp_type'
p3270
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3271
sS'default'
p3272
S'FeatureFloodCountAux'
p3273
sS'name'
p3274
S'type'
p3275
sS'required'
p3276
I00
sS'group_name'
p3277
Nsa(dp3278
S'description'
p3279
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3280
sS'cpp_type'
p3281
S'bool'
p3282
sS'default'
p3283
S'0'
p3284
sS'name'
p3285
S'use_displaced_mesh'
p3286
sS'required'
p3287
I00
sS'group_name'
p3288
S'Advanced'
p3289
sa(dp3290
S'description'
p3291
S'The name of the variable that this object applies to\n'
p3292
sS'cpp_type'
p3293
S'AuxVariableName'
p3294
sS'default'
p3295
g3
sS'name'
p3296
S'variable'
p3297
sS'required'
p3298
I01
sS'group_name'
p3299
NsasS'name'
p3300
S'/AuxKernels/FeatureFloodCountAux'
p3301
sa(dp3302
S'description'
p3303
g3
sS'subblocks'
p3304
NsS'parameters'
p3305
(lp3306
(dp3307
S'description'
p3308
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3309
sS'cpp_type'
p3310
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3311
sS'default'
p3312
g3
sS'name'
p3313
S'block'
p3314
sS'required'
p3315
I00
sS'group_name'
p3316
Nsa(dp3317
S'description'
p3318
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3319
sS'cpp_type'
p3320
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3321
sS'default'
p3322
g3
sS'name'
p3323
S'boundary'
p3324
sS'required'
p3325
I00
sS'group_name'
p3326
Nsa(dp3327
S'description'
p3328
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3329
sS'cpp_type'
p3330
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3331
sS'default'
p3332
g3
sS'name'
p3333
S'control_tags'
p3334
sS'required'
p3335
I00
sS'group_name'
p3336
Nsa(dp3337
S'name'
p3338
S'execute_on'
p3339
sS'cpp_type'
p3340
S'MultiMooseEnum'
p3341
sS'default'
p3342
S'LINEAR'
p3343
sS'description'
p3344
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3345
sS'required'
p3346
I00
sS'options'
p3347
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3348
sS'group_name'
p3349
Nsa(dp3350
S'description'
p3351
S'The function to use as the value\n'
p3352
sS'cpp_type'
p3353
S'FunctionName'
p3354
sS'default'
p3355
g3
sS'name'
p3356
S'function'
p3357
sS'required'
p3358
I01
sS'group_name'
p3359
Nsa(dp3360
S'description'
p3361
S'The seed for the master random number generator\n'
p3362
sS'cpp_type'
p3363
S'unsigned int'
p3364
sS'default'
p3365
S'0'
p3366
sS'name'
p3367
S'seed'
p3368
sS'required'
p3369
I00
sS'group_name'
p3370
S'Advanced'
p3371
sa(dp3372
S'description'
p3373
g3
sS'cpp_type'
p3374
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3375
sS'default'
p3376
S'FunctionAux'
p3377
sS'name'
p3378
S'type'
p3379
sS'required'
p3380
I00
sS'group_name'
p3381
Nsa(dp3382
S'description'
p3383
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3384
sS'cpp_type'
p3385
S'bool'
p3386
sS'default'
p3387
S'0'
p3388
sS'name'
p3389
S'use_displaced_mesh'
p3390
sS'required'
p3391
I00
sS'group_name'
p3392
S'Advanced'
p3393
sa(dp3394
S'description'
p3395
S'The name of the variable that this object applies to\n'
p3396
sS'cpp_type'
p3397
S'AuxVariableName'
p3398
sS'default'
p3399
g3
sS'name'
p3400
S'variable'
p3401
sS'required'
p3402
I01
sS'group_name'
p3403
NsasS'name'
p3404
S'/AuxKernels/FunctionAux'
p3405
sa(dp3406
S'description'
p3407
g3
sS'subblocks'
p3408
NsS'parameters'
p3409
(lp3410
(dp3411
S'description'
p3412
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3413
sS'cpp_type'
p3414
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3415
sS'default'
p3416
g3
sS'name'
p3417
S'block'
p3418
sS'required'
p3419
I00
sS'group_name'
p3420
Nsa(dp3421
S'description'
p3422
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3423
sS'cpp_type'
p3424
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3425
sS'default'
p3426
g3
sS'name'
p3427
S'boundary'
p3428
sS'required'
p3429
I00
sS'group_name'
p3430
Nsa(dp3431
S'description'
p3432
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3433
sS'cpp_type'
p3434
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3435
sS'default'
p3436
g3
sS'name'
p3437
S'control_tags'
p3438
sS'required'
p3439
I00
sS'group_name'
p3440
Nsa(dp3441
S'name'
p3442
S'execute_on'
p3443
sS'cpp_type'
p3444
S'MultiMooseEnum'
p3445
sS'default'
p3446
S'LINEAR'
p3447
sS'description'
p3448
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3449
sS'required'
p3450
I00
sS'options'
p3451
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3452
sS'group_name'
p3453
Nsa(dp3454
S'description'
p3455
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p3456
sS'cpp_type'
p3457
S'double'
p3458
sS'default'
p3459
g3
sS'name'
p3460
S'normal_smoothing_distance'
p3461
sS'required'
p3462
I00
sS'group_name'
p3463
Nsa(dp3464
S'description'
p3465
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p3466
sS'cpp_type'
p3467
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3468
sS'default'
p3469
g3
sS'name'
p3470
S'normal_smoothing_method'
p3471
sS'required'
p3472
I00
sS'group_name'
p3473
Nsa(dp3474
S'name'
p3475
S'order'
p3476
sS'cpp_type'
p3477
S'MooseEnum'
p3478
sS'default'
p3479
S'FIRST'
p3480
sS'description'
p3481
S'The finite element order\n'
p3482
sS'required'
p3483
I00
sS'options'
p3484
S'FIRST SECOND THIRD FOURTH'
p3485
sS'group_name'
p3486
Nsa(dp3487
S'description'
p3488
S'The boundary on the other side of a gap.\n'
p3489
sS'cpp_type'
p3490
S'BoundaryName'
p3491
sS'default'
p3492
g3
sS'name'
p3493
S'paired_boundary'
p3494
sS'required'
p3495
I01
sS'group_name'
p3496
Nsa(dp3497
S'description'
p3498
S'The variable to get the value of.\n'
p3499
sS'cpp_type'
p3500
S'VariableName'
p3501
sS'default'
p3502
g3
sS'name'
p3503
S'paired_variable'
p3504
sS'required'
p3505
I01
sS'group_name'
p3506
Nsa(dp3507
S'description'
p3508
S'The seed for the master random number generator\n'
p3509
sS'cpp_type'
p3510
S'unsigned int'
p3511
sS'default'
p3512
S'0'
p3513
sS'name'
p3514
S'seed'
p3515
sS'required'
p3516
I00
sS'group_name'
p3517
S'Advanced'
p3518
sa(dp3519
S'description'
p3520
S'Tangential distance to extend edges of contact surfaces\n'
p3521
sS'cpp_type'
p3522
S'double'
p3523
sS'default'
p3524
g3
sS'name'
p3525
S'tangential_tolerance'
p3526
sS'required'
p3527
I00
sS'group_name'
p3528
Nsa(dp3529
S'description'
p3530
g3
sS'cpp_type'
p3531
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3532
sS'default'
p3533
S'GapValueAux'
p3534
sS'name'
p3535
S'type'
p3536
sS'required'
p3537
I00
sS'group_name'
p3538
Nsa(dp3539
S'description'
p3540
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3541
sS'cpp_type'
p3542
S'bool'
p3543
sS'default'
p3544
S'1'
p3545
sS'name'
p3546
S'use_displaced_mesh'
p3547
sS'required'
p3548
I00
sS'group_name'
p3549
S'Advanced'
p3550
sa(dp3551
S'description'
p3552
S'The name of the variable that this object applies to\n'
p3553
sS'cpp_type'
p3554
S'AuxVariableName'
p3555
sS'default'
p3556
g3
sS'name'
p3557
S'variable'
p3558
sS'required'
p3559
I01
sS'group_name'
p3560
Nsa(dp3561
S'description'
p3562
S'Whether to output warning messages concerning nodes not being found\n'
p3563
sS'cpp_type'
p3564
S'bool'
p3565
sS'default'
p3566
S'0'
p3567
sS'name'
p3568
S'warnings'
p3569
sS'required'
p3570
I00
sS'group_name'
p3571
NsasS'name'
p3572
S'/AuxKernels/GapValueAux'
p3573
sa(dp3574
S'description'
p3575
g3
sS'subblocks'
p3576
NsS'parameters'
p3577
(lp3578
(dp3579
S'description'
p3580
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3581
sS'cpp_type'
p3582
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3583
sS'default'
p3584
g3
sS'name'
p3585
S'block'
p3586
sS'required'
p3587
I00
sS'group_name'
p3588
Nsa(dp3589
S'description'
p3590
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3591
sS'cpp_type'
p3592
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3593
sS'default'
p3594
g3
sS'name'
p3595
S'boundary'
p3596
sS'required'
p3597
I00
sS'group_name'
p3598
Nsa(dp3599
S'description'
p3600
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3601
sS'cpp_type'
p3602
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3603
sS'default'
p3604
g3
sS'name'
p3605
S'control_tags'
p3606
sS'required'
p3607
I00
sS'group_name'
p3608
Nsa(dp3609
S'name'
p3610
S'execute_on'
p3611
sS'cpp_type'
p3612
S'MultiMooseEnum'
p3613
sS'default'
p3614
S'LINEAR'
p3615
sS'description'
p3616
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3617
sS'required'
p3618
I00
sS'options'
p3619
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3620
sS'group_name'
p3621
Nsa(dp3622
S'description'
p3623
S'The seed for the master random number generator\n'
p3624
sS'cpp_type'
p3625
S'unsigned int'
p3626
sS'default'
p3627
S'0'
p3628
sS'name'
p3629
S'seed'
p3630
sS'required'
p3631
I00
sS'group_name'
p3632
S'Advanced'
p3633
sa(dp3634
S'description'
p3635
g3
sS'cpp_type'
p3636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3637
sS'default'
p3638
S'INSCourant'
p3639
sS'name'
p3640
S'type'
p3641
sS'required'
p3642
I00
sS'group_name'
p3643
Nsa(dp3644
S'description'
p3645
S'x-velocity\n'
p3646
sS'cpp_type'
p3647
S'std::vector<VariableName>'
p3648
sS'default'
p3649
g3
sS'name'
p3650
S'u'
p3651
sS'required'
p3652
I01
sS'group_name'
p3653
Nsa(dp3654
S'description'
p3655
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3656
sS'cpp_type'
p3657
S'bool'
p3658
sS'default'
p3659
S'0'
p3660
sS'name'
p3661
S'use_displaced_mesh'
p3662
sS'required'
p3663
I00
sS'group_name'
p3664
S'Advanced'
p3665
sa(dp3666
S'description'
p3667
S'y-velocity\n'
p3668
sS'cpp_type'
p3669
S'std::vector<VariableName>'
p3670
sS'default'
p3671
g3
sS'name'
p3672
S'v'
p3673
sS'required'
p3674
I00
sS'group_name'
p3675
Nsa(dp3676
S'description'
p3677
S'The name of the variable that this object applies to\n'
p3678
sS'cpp_type'
p3679
S'AuxVariableName'
p3680
sS'default'
p3681
g3
sS'name'
p3682
S'variable'
p3683
sS'required'
p3684
I01
sS'group_name'
p3685
Nsa(dp3686
S'description'
p3687
S'z-velocity\n'
p3688
sS'cpp_type'
p3689
S'std::vector<VariableName>'
p3690
sS'default'
p3691
g3
sS'name'
p3692
S'w'
p3693
sS'required'
p3694
I00
sS'group_name'
p3695
NsasS'name'
p3696
S'/AuxKernels/INSCourant'
p3697
sa(dp3698
S'description'
p3699
g3
sS'subblocks'
p3700
NsS'parameters'
p3701
(lp3702
(dp3703
S'description'
p3704
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3705
sS'cpp_type'
p3706
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3707
sS'default'
p3708
g3
sS'name'
p3709
S'block'
p3710
sS'required'
p3711
I00
sS'group_name'
p3712
Nsa(dp3713
S'description'
p3714
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3715
sS'cpp_type'
p3716
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3717
sS'default'
p3718
g3
sS'name'
p3719
S'boundary'
p3720
sS'required'
p3721
I00
sS'group_name'
p3722
Nsa(dp3723
S'description'
p3724
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3725
sS'cpp_type'
p3726
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3727
sS'default'
p3728
g3
sS'name'
p3729
S'control_tags'
p3730
sS'required'
p3731
I00
sS'group_name'
p3732
Nsa(dp3733
S'name'
p3734
S'execute_on'
p3735
sS'cpp_type'
p3736
S'MultiMooseEnum'
p3737
sS'default'
p3738
S'LINEAR'
p3739
sS'description'
p3740
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3741
sS'required'
p3742
I00
sS'options'
p3743
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3744
sS'group_name'
p3745
Nsa(dp3746
S'description'
p3747
S'The seed for the master random number generator\n'
p3748
sS'cpp_type'
p3749
S'unsigned int'
p3750
sS'default'
p3751
S'0'
p3752
sS'name'
p3753
S'seed'
p3754
sS'required'
p3755
I00
sS'group_name'
p3756
S'Advanced'
p3757
sa(dp3758
S'description'
p3759
g3
sS'cpp_type'
p3760
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3761
sS'default'
p3762
S'INSDivergenceAux'
p3763
sS'name'
p3764
S'type'
p3765
sS'required'
p3766
I00
sS'group_name'
p3767
Nsa(dp3768
S'description'
p3769
S'x-velocity\n'
p3770
sS'cpp_type'
p3771
S'std::vector<VariableName>'
p3772
sS'default'
p3773
g3
sS'name'
p3774
S'u'
p3775
sS'required'
p3776
I01
sS'group_name'
p3777
Nsa(dp3778
S'description'
p3779
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3780
sS'cpp_type'
p3781
S'bool'
p3782
sS'default'
p3783
S'0'
p3784
sS'name'
p3785
S'use_displaced_mesh'
p3786
sS'required'
p3787
I00
sS'group_name'
p3788
S'Advanced'
p3789
sa(dp3790
S'description'
p3791
S'y-velocity\n'
p3792
sS'cpp_type'
p3793
S'std::vector<VariableName>'
p3794
sS'default'
p3795
g3
sS'name'
p3796
S'v'
p3797
sS'required'
p3798
I00
sS'group_name'
p3799
Nsa(dp3800
S'description'
p3801
S'The name of the variable that this object applies to\n'
p3802
sS'cpp_type'
p3803
S'AuxVariableName'
p3804
sS'default'
p3805
g3
sS'name'
p3806
S'variable'
p3807
sS'required'
p3808
I01
sS'group_name'
p3809
Nsa(dp3810
S'description'
p3811
S'z-velocity\n'
p3812
sS'cpp_type'
p3813
S'std::vector<VariableName>'
p3814
sS'default'
p3815
g3
sS'name'
p3816
S'w'
p3817
sS'required'
p3818
I00
sS'group_name'
p3819
NsasS'name'
p3820
S'/AuxKernels/INSDivergenceAux'
p3821
sa(dp3822
S'description'
p3823
g3
sS'subblocks'
p3824
NsS'parameters'
p3825
(lp3826
(dp3827
S'description'
p3828
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3829
sS'cpp_type'
p3830
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3831
sS'default'
p3832
g3
sS'name'
p3833
S'block'
p3834
sS'required'
p3835
I00
sS'group_name'
p3836
Nsa(dp3837
S'description'
p3838
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3839
sS'cpp_type'
p3840
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3841
sS'default'
p3842
g3
sS'name'
p3843
S'boundary'
p3844
sS'required'
p3845
I00
sS'group_name'
p3846
Nsa(dp3847
S'description'
p3848
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3849
sS'cpp_type'
p3850
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3851
sS'default'
p3852
g3
sS'name'
p3853
S'control_tags'
p3854
sS'required'
p3855
I00
sS'group_name'
p3856
Nsa(dp3857
S'name'
p3858
S'execute_on'
p3859
sS'cpp_type'
p3860
S'MultiMooseEnum'
p3861
sS'default'
p3862
S'LINEAR'
p3863
sS'description'
p3864
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3865
sS'required'
p3866
I00
sS'options'
p3867
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3868
sS'group_name'
p3869
Nsa(dp3870
S'description'
p3871
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p3872
sS'cpp_type'
p3873
S'MaterialPropertyName'
p3874
sS'default'
p3875
g3
sS'name'
p3876
S'fa_name'
p3877
sS'required'
p3878
I01
sS'group_name'
p3879
Nsa(dp3880
S'description'
p3881
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p3882
sS'cpp_type'
p3883
S'MaterialPropertyName'
p3884
sS'default'
p3885
g3
sS'name'
p3886
S'fb_name'
p3887
sS'required'
p3888
I01
sS'group_name'
p3889
Nsa(dp3890
S'description'
p3891
S'Base name for the double well function g(eta)\n'
p3892
sS'cpp_type'
p3893
S'MaterialPropertyName'
p3894
sS'default'
p3895
S'g'
p3896
sS'name'
p3897
S'g_name'
p3898
sS'required'
p3899
I00
sS'group_name'
p3900
Nsa(dp3901
S'description'
p3902
S'Base name for the switching function h(eta)\n'
p3903
sS'cpp_type'
p3904
S'MaterialPropertyName'
p3905
sS'default'
p3906
S'h'
p3907
sS'name'
p3908
S'h_name'
p3909
sS'required'
p3910
I00
sS'group_name'
p3911
Nsa(dp3912
S'description'
p3913
S'The seed for the master random number generator\n'
p3914
sS'cpp_type'
p3915
S'unsigned int'
p3916
sS'default'
p3917
S'0'
p3918
sS'name'
p3919
S'seed'
p3920
sS'required'
p3921
I00
sS'group_name'
p3922
S'Advanced'
p3923
sa(dp3924
S'description'
p3925
g3
sS'cpp_type'
p3926
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p3927
sS'default'
p3928
S'KKSGlobalFreeEnergy'
p3929
sS'name'
p3930
S'type'
p3931
sS'required'
p3932
I00
sS'group_name'
p3933
Nsa(dp3934
S'description'
p3935
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3936
sS'cpp_type'
p3937
S'bool'
p3938
sS'default'
p3939
S'0'
p3940
sS'name'
p3941
S'use_displaced_mesh'
p3942
sS'required'
p3943
I00
sS'group_name'
p3944
S'Advanced'
p3945
sa(dp3946
S'description'
p3947
S'The name of the variable that this object applies to\n'
p3948
sS'cpp_type'
p3949
S'AuxVariableName'
p3950
sS'default'
p3951
g3
sS'name'
p3952
S'variable'
p3953
sS'required'
p3954
I01
sS'group_name'
p3955
Nsa(dp3956
S'description'
p3957
S'Double well height parameter\n'
p3958
sS'cpp_type'
p3959
S'double'
p3960
sS'default'
p3961
g3
sS'name'
p3962
S'w'
p3963
sS'required'
p3964
I01
sS'group_name'
p3965
NsasS'name'
p3966
S'/AuxKernels/KKSGlobalFreeEnergy'
p3967
sa(dp3968
S'description'
p3969
g3
sS'subblocks'
p3970
NsS'parameters'
p3971
(lp3972
(dp3973
S'description'
p3974
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3975
sS'cpp_type'
p3976
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3977
sS'default'
p3978
g3
sS'name'
p3979
S'block'
p3980
sS'required'
p3981
I00
sS'group_name'
p3982
Nsa(dp3983
S'description'
p3984
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3985
sS'cpp_type'
p3986
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3987
sS'default'
p3988
g3
sS'name'
p3989
S'boundary'
p3990
sS'required'
p3991
I00
sS'group_name'
p3992
Nsa(dp3993
S'description'
p3994
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3995
sS'cpp_type'
p3996
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p3997
sS'default'
p3998
g3
sS'name'
p3999
S'control_tags'
p4000
sS'required'
p4001
I00
sS'group_name'
p4002
Nsa(dp4003
S'description'
p4004
S'Activation energy, J/mol\n'
p4005
sS'cpp_type'
p4006
S'double'
p4007
sS'default'
p4008
S'29100'
p4009
sS'name'
p4010
S'e_act'
p4011
sS'required'
p4012
I00
sS'group_name'
p4013
Nsa(dp4014
S'name'
p4015
S'execute_on'
p4016
sS'cpp_type'
p4017
S'MultiMooseEnum'
p4018
sS'default'
p4019
S'LINEAR'
p4020
sS'description'
p4021
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4022
sS'required'
p4023
I00
sS'options'
p4024
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4025
sS'group_name'
p4026
Nsa(dp4027
S'description'
p4028
S'Gas constant, in J/mol K\n'
p4029
sS'cpp_type'
p4030
S'double'
p4031
sS'default'
p4032
S'8.31434'
p4033
sS'name'
p4034
S'gas_const'
p4035
sS'required'
p4036
I00
sS'group_name'
p4037
Nsa(dp4038
S'description'
p4039
S'The equilibrium constant of the dissolution reaction\n'
p4040
sS'cpp_type'
p4041
S'double'
p4042
sS'default'
p4043
S'0'
p4044
sS'name'
p4045
S'log_k'
p4046
sS'required'
p4047
I00
sS'group_name'
p4048
Nsa(dp4049
S'description'
p4050
S'Specific reactive surface area in m^2/L solution\n'
p4051
sS'cpp_type'
p4052
S'double'
p4053
sS'default'
p4054
S'0.1'
p4055
sS'name'
p4056
S'r_area'
p4057
sS'required'
p4058
I00
sS'group_name'
p4059
Nsa(dp4060
S'description'
p4061
S'Kinetic rate constant in mol/m^2 s\n'
p4062
sS'cpp_type'
p4063
S'double'
p4064
sS'default'
p4065
S'6.45654e-08'
p4066
sS'name'
p4067
S'ref_kconst'
p4068
sS'required'
p4069
I00
sS'group_name'
p4070
Nsa(dp4071
S'description'
p4072
S'Reference temperature, K\n'
p4073
sS'cpp_type'
p4074
S'double'
p4075
sS'default'
p4076
S'298.15'
p4077
sS'name'
p4078
S'ref_temp'
p4079
sS'required'
p4080
I00
sS'group_name'
p4081
Nsa(dp4082
S'description'
p4083
S'The seed for the master random number generator\n'
p4084
sS'cpp_type'
p4085
S'unsigned int'
p4086
sS'default'
p4087
S'0'
p4088
sS'name'
p4089
S'seed'
p4090
sS'required'
p4091
I00
sS'group_name'
p4092
S'Advanced'
p4093
sa(dp4094
S'description'
p4095
S'The stochiometric coefficients of reactant species\n'
p4096
sS'cpp_type'
p4097
S'std::vector<double, std::allocator<double> >'
p4098
sS'default'
p4099
g3
sS'name'
p4100
S'sto_v'
p4101
sS'required'
p4102
I01
sS'group_name'
p4103
Nsa(dp4104
S'description'
p4105
S'System temperature at simulation, K\n'
p4106
sS'cpp_type'
p4107
S'double'
p4108
sS'default'
p4109
S'298.15'
p4110
sS'name'
p4111
S'sys_temp'
p4112
sS'required'
p4113
I00
sS'group_name'
p4114
Nsa(dp4115
S'description'
p4116
g3
sS'cpp_type'
p4117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4118
sS'default'
p4119
S'KineticDisPreConcAux'
p4120
sS'name'
p4121
S'type'
p4122
sS'required'
p4123
I00
sS'group_name'
p4124
Nsa(dp4125
S'description'
p4126
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4127
sS'cpp_type'
p4128
S'bool'
p4129
sS'default'
p4130
S'0'
p4131
sS'name'
p4132
S'use_displaced_mesh'
p4133
sS'required'
p4134
I00
sS'group_name'
p4135
S'Advanced'
p4136
sa(dp4137
S'description'
p4138
S'The list of reactant species\n'
p4139
sS'cpp_type'
p4140
S'std::vector<VariableName>'
p4141
sS'default'
p4142
g3
sS'name'
p4143
S'v'
p4144
sS'required'
p4145
I00
sS'group_name'
p4146
Nsa(dp4147
S'description'
p4148
S'The name of the variable that this object applies to\n'
p4149
sS'cpp_type'
p4150
S'AuxVariableName'
p4151
sS'default'
p4152
g3
sS'name'
p4153
S'variable'
p4154
sS'required'
p4155
I01
sS'group_name'
p4156
NsasS'name'
p4157
S'/AuxKernels/KineticDisPreConcAux'
p4158
sa(dp4159
S'description'
p4160
g3
sS'subblocks'
p4161
NsS'parameters'
p4162
(lp4163
(dp4164
S'description'
p4165
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4166
sS'cpp_type'
p4167
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4168
sS'default'
p4169
g3
sS'name'
p4170
S'block'
p4171
sS'required'
p4172
I00
sS'group_name'
p4173
Nsa(dp4174
S'description'
p4175
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4176
sS'cpp_type'
p4177
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4178
sS'default'
p4179
g3
sS'name'
p4180
S'boundary'
p4181
sS'required'
p4182
I00
sS'group_name'
p4183
Nsa(dp4184
S'description'
p4185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4186
sS'cpp_type'
p4187
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4188
sS'default'
p4189
g3
sS'name'
p4190
S'control_tags'
p4191
sS'required'
p4192
I00
sS'group_name'
p4193
Nsa(dp4194
S'description'
p4195
S'Activation energy, J/mol\n'
p4196
sS'cpp_type'
p4197
S'double'
p4198
sS'default'
p4199
S'29100'
p4200
sS'name'
p4201
S'e_act'
p4202
sS'required'
p4203
I00
sS'group_name'
p4204
Nsa(dp4205
S'name'
p4206
S'execute_on'
p4207
sS'cpp_type'
p4208
S'MultiMooseEnum'
p4209
sS'default'
p4210
S'LINEAR'
p4211
sS'description'
p4212
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4213
sS'required'
p4214
I00
sS'options'
p4215
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4216
sS'group_name'
p4217
Nsa(dp4218
S'description'
p4219
S'Gas constant, in J/mol K\n'
p4220
sS'cpp_type'
p4221
S'double'
p4222
sS'default'
p4223
S'8.31434'
p4224
sS'name'
p4225
S'gas_const'
p4226
sS'required'
p4227
I00
sS'group_name'
p4228
Nsa(dp4229
S'description'
p4230
S'The equilibrium constant of the dissolution reaction\n'
p4231
sS'cpp_type'
p4232
S'double'
p4233
sS'default'
p4234
S'0'
p4235
sS'name'
p4236
S'log_k'
p4237
sS'required'
p4238
I00
sS'group_name'
p4239
Nsa(dp4240
S'description'
p4241
S'Specific reactive surface area in m^2/L solution\n'
p4242
sS'cpp_type'
p4243
S'double'
p4244
sS'default'
p4245
S'0.1'
p4246
sS'name'
p4247
S'r_area'
p4248
sS'required'
p4249
I00
sS'group_name'
p4250
Nsa(dp4251
S'description'
p4252
S'Kinetic rate constant in mol/m^2 s\n'
p4253
sS'cpp_type'
p4254
S'double'
p4255
sS'default'
p4256
S'6.45654e-08'
p4257
sS'name'
p4258
S'ref_kconst'
p4259
sS'required'
p4260
I00
sS'group_name'
p4261
Nsa(dp4262
S'description'
p4263
S'Reference temperature, K\n'
p4264
sS'cpp_type'
p4265
S'double'
p4266
sS'default'
p4267
S'298.15'
p4268
sS'name'
p4269
S'ref_temp'
p4270
sS'required'
p4271
I00
sS'group_name'
p4272
Nsa(dp4273
S'description'
p4274
S'The seed for the master random number generator\n'
p4275
sS'cpp_type'
p4276
S'unsigned int'
p4277
sS'default'
p4278
S'0'
p4279
sS'name'
p4280
S'seed'
p4281
sS'required'
p4282
I00
sS'group_name'
p4283
S'Advanced'
p4284
sa(dp4285
S'description'
p4286
S'The stochiometric coefficients of reactant species\n'
p4287
sS'cpp_type'
p4288
S'std::vector<double, std::allocator<double> >'
p4289
sS'default'
p4290
g3
sS'name'
p4291
S'sto_v'
p4292
sS'required'
p4293
I01
sS'group_name'
p4294
Nsa(dp4295
S'description'
p4296
S'System temperature at simulation, K\n'
p4297
sS'cpp_type'
p4298
S'double'
p4299
sS'default'
p4300
S'298.15'
p4301
sS'name'
p4302
S'sys_temp'
p4303
sS'required'
p4304
I00
sS'group_name'
p4305
Nsa(dp4306
S'description'
p4307
g3
sS'cpp_type'
p4308
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4309
sS'default'
p4310
S'KineticDisPreRateAux'
p4311
sS'name'
p4312
S'type'
p4313
sS'required'
p4314
I00
sS'group_name'
p4315
Nsa(dp4316
S'description'
p4317
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4318
sS'cpp_type'
p4319
S'bool'
p4320
sS'default'
p4321
S'0'
p4322
sS'name'
p4323
S'use_displaced_mesh'
p4324
sS'required'
p4325
I00
sS'group_name'
p4326
S'Advanced'
p4327
sa(dp4328
S'description'
p4329
S'The list of reactant species\n'
p4330
sS'cpp_type'
p4331
S'std::vector<VariableName>'
p4332
sS'default'
p4333
g3
sS'name'
p4334
S'v'
p4335
sS'required'
p4336
I00
sS'group_name'
p4337
Nsa(dp4338
S'description'
p4339
S'The name of the variable that this object applies to\n'
p4340
sS'cpp_type'
p4341
S'AuxVariableName'
p4342
sS'default'
p4343
g3
sS'name'
p4344
S'variable'
p4345
sS'required'
p4346
I01
sS'group_name'
p4347
NsasS'name'
p4348
S'/AuxKernels/KineticDisPreRateAux'
p4349
sa(dp4350
S'description'
p4351
g3
sS'subblocks'
p4352
NsS'parameters'
p4353
(lp4354
(dp4355
S'description'
p4356
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4357
sS'cpp_type'
p4358
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4359
sS'default'
p4360
g3
sS'name'
p4361
S'block'
p4362
sS'required'
p4363
I00
sS'group_name'
p4364
Nsa(dp4365
S'description'
p4366
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4367
sS'cpp_type'
p4368
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4369
sS'default'
p4370
g3
sS'name'
p4371
S'boundary'
p4372
sS'required'
p4373
I00
sS'group_name'
p4374
Nsa(dp4375
S'description'
p4376
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4377
sS'cpp_type'
p4378
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4379
sS'default'
p4380
g3
sS'name'
p4381
S'control_tags'
p4382
sS'required'
p4383
I00
sS'group_name'
p4384
Nsa(dp4385
S'name'
p4386
S'execute_on'
p4387
sS'cpp_type'
p4388
S'MultiMooseEnum'
p4389
sS'default'
p4390
S'LINEAR'
p4391
sS'description'
p4392
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4393
sS'required'
p4394
I00
sS'options'
p4395
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4396
sS'group_name'
p4397
Nsa(dp4398
S'description'
p4399
S'The factor by which to multiply your material property for visualization\n'
p4400
sS'cpp_type'
p4401
S'double'
p4402
sS'default'
p4403
S'1'
p4404
sS'name'
p4405
S'factor'
p4406
sS'required'
p4407
I00
sS'group_name'
p4408
Nsa(dp4409
S'description'
p4410
S'The offset to add to your material property for visualization\n'
p4411
sS'cpp_type'
p4412
S'double'
p4413
sS'default'
p4414
S'0'
p4415
sS'name'
p4416
S'offset'
p4417
sS'required'
p4418
I00
sS'group_name'
p4419
Nsa(dp4420
S'description'
p4421
S'The scalar material property name\n'
p4422
sS'cpp_type'
p4423
S'MaterialPropertyName'
p4424
sS'default'
p4425
g3
sS'name'
p4426
S'property'
p4427
sS'required'
p4428
I01
sS'group_name'
p4429
Nsa(dp4430
S'description'
p4431
S'The seed for the master random number generator\n'
p4432
sS'cpp_type'
p4433
S'unsigned int'
p4434
sS'default'
p4435
S'0'
p4436
sS'name'
p4437
S'seed'
p4438
sS'required'
p4439
I00
sS'group_name'
p4440
S'Advanced'
p4441
sa(dp4442
S'description'
p4443
g3
sS'cpp_type'
p4444
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4445
sS'default'
p4446
S'MaterialRealAux'
p4447
sS'name'
p4448
S'type'
p4449
sS'required'
p4450
I00
sS'group_name'
p4451
Nsa(dp4452
S'description'
p4453
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4454
sS'cpp_type'
p4455
S'bool'
p4456
sS'default'
p4457
S'0'
p4458
sS'name'
p4459
S'use_displaced_mesh'
p4460
sS'required'
p4461
I00
sS'group_name'
p4462
S'Advanced'
p4463
sa(dp4464
S'description'
p4465
S'The name of the variable that this object applies to\n'
p4466
sS'cpp_type'
p4467
S'AuxVariableName'
p4468
sS'default'
p4469
g3
sS'name'
p4470
S'variable'
p4471
sS'required'
p4472
I01
sS'group_name'
p4473
NsasS'name'
p4474
S'/AuxKernels/MaterialRealAux'
p4475
sa(dp4476
S'description'
p4477
g3
sS'subblocks'
p4478
NsS'parameters'
p4479
(lp4480
(dp4481
S'description'
p4482
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4483
sS'cpp_type'
p4484
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4485
sS'default'
p4486
g3
sS'name'
p4487
S'block'
p4488
sS'required'
p4489
I00
sS'group_name'
p4490
Nsa(dp4491
S'description'
p4492
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4493
sS'cpp_type'
p4494
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4495
sS'default'
p4496
g3
sS'name'
p4497
S'boundary'
p4498
sS'required'
p4499
I00
sS'group_name'
p4500
Nsa(dp4501
S'description'
p4502
S'The column component to consider for this kernel\n'
p4503
sS'cpp_type'
p4504
S'unsigned int'
p4505
sS'default'
p4506
S'0'
p4507
sS'name'
p4508
S'column'
p4509
sS'required'
p4510
I00
sS'group_name'
p4511
Nsa(dp4512
S'description'
p4513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4514
sS'cpp_type'
p4515
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4516
sS'default'
p4517
g3
sS'name'
p4518
S'control_tags'
p4519
sS'required'
p4520
I00
sS'group_name'
p4521
Nsa(dp4522
S'name'
p4523
S'execute_on'
p4524
sS'cpp_type'
p4525
S'MultiMooseEnum'
p4526
sS'default'
p4527
S'LINEAR'
p4528
sS'description'
p4529
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4530
sS'required'
p4531
I00
sS'options'
p4532
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4533
sS'group_name'
p4534
Nsa(dp4535
S'description'
p4536
S'The factor by which to multiply your material property for visualization\n'
p4537
sS'cpp_type'
p4538
S'double'
p4539
sS'default'
p4540
S'1'
p4541
sS'name'
p4542
S'factor'
p4543
sS'required'
p4544
I00
sS'group_name'
p4545
Nsa(dp4546
S'description'
p4547
S'The offset to add to your material property for visualization\n'
p4548
sS'cpp_type'
p4549
S'double'
p4550
sS'default'
p4551
S'0'
p4552
sS'name'
p4553
S'offset'
p4554
sS'required'
p4555
I00
sS'group_name'
p4556
Nsa(dp4557
S'description'
p4558
S'The scalar material property name\n'
p4559
sS'cpp_type'
p4560
S'MaterialPropertyName'
p4561
sS'default'
p4562
g3
sS'name'
p4563
S'property'
p4564
sS'required'
p4565
I01
sS'group_name'
p4566
Nsa(dp4567
S'description'
p4568
S'The row component to consider for this kernel\n'
p4569
sS'cpp_type'
p4570
S'unsigned int'
p4571
sS'default'
p4572
S'0'
p4573
sS'name'
p4574
S'row'
p4575
sS'required'
p4576
I00
sS'group_name'
p4577
Nsa(dp4578
S'description'
p4579
S'The seed for the master random number generator\n'
p4580
sS'cpp_type'
p4581
S'unsigned int'
p4582
sS'default'
p4583
S'0'
p4584
sS'name'
p4585
S'seed'
p4586
sS'required'
p4587
I00
sS'group_name'
p4588
S'Advanced'
p4589
sa(dp4590
S'description'
p4591
g3
sS'cpp_type'
p4592
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4593
sS'default'
p4594
S'MaterialRealDenseMatrixAux'
p4595
sS'name'
p4596
S'type'
p4597
sS'required'
p4598
I00
sS'group_name'
p4599
Nsa(dp4600
S'description'
p4601
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4602
sS'cpp_type'
p4603
S'bool'
p4604
sS'default'
p4605
S'0'
p4606
sS'name'
p4607
S'use_displaced_mesh'
p4608
sS'required'
p4609
I00
sS'group_name'
p4610
S'Advanced'
p4611
sa(dp4612
S'description'
p4613
S'The name of the variable that this object applies to\n'
p4614
sS'cpp_type'
p4615
S'AuxVariableName'
p4616
sS'default'
p4617
g3
sS'name'
p4618
S'variable'
p4619
sS'required'
p4620
I01
sS'group_name'
p4621
NsasS'name'
p4622
S'/AuxKernels/MaterialRealDenseMatrixAux'
p4623
sa(dp4624
S'description'
p4625
g3
sS'subblocks'
p4626
NsS'parameters'
p4627
(lp4628
(dp4629
S'description'
p4630
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4631
sS'cpp_type'
p4632
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4633
sS'default'
p4634
g3
sS'name'
p4635
S'block'
p4636
sS'required'
p4637
I00
sS'group_name'
p4638
Nsa(dp4639
S'description'
p4640
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4641
sS'cpp_type'
p4642
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4643
sS'default'
p4644
g3
sS'name'
p4645
S'boundary'
p4646
sS'required'
p4647
I00
sS'group_name'
p4648
Nsa(dp4649
S'description'
p4650
S'The column component to consider for this kernel\n'
p4651
sS'cpp_type'
p4652
S'unsigned int'
p4653
sS'default'
p4654
S'0'
p4655
sS'name'
p4656
S'column'
p4657
sS'required'
p4658
I00
sS'group_name'
p4659
Nsa(dp4660
S'description'
p4661
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4662
sS'cpp_type'
p4663
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4664
sS'default'
p4665
g3
sS'name'
p4666
S'control_tags'
p4667
sS'required'
p4668
I00
sS'group_name'
p4669
Nsa(dp4670
S'name'
p4671
S'execute_on'
p4672
sS'cpp_type'
p4673
S'MultiMooseEnum'
p4674
sS'default'
p4675
S'LINEAR'
p4676
sS'description'
p4677
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4678
sS'required'
p4679
I00
sS'options'
p4680
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4681
sS'group_name'
p4682
Nsa(dp4683
S'description'
p4684
S'The factor by which to multiply your material property for visualization\n'
p4685
sS'cpp_type'
p4686
S'double'
p4687
sS'default'
p4688
S'1'
p4689
sS'name'
p4690
S'factor'
p4691
sS'required'
p4692
I00
sS'group_name'
p4693
Nsa(dp4694
S'description'
p4695
S'The offset to add to your material property for visualization\n'
p4696
sS'cpp_type'
p4697
S'double'
p4698
sS'default'
p4699
S'0'
p4700
sS'name'
p4701
S'offset'
p4702
sS'required'
p4703
I00
sS'group_name'
p4704
Nsa(dp4705
S'description'
p4706
S'The scalar material property name\n'
p4707
sS'cpp_type'
p4708
S'MaterialPropertyName'
p4709
sS'default'
p4710
g3
sS'name'
p4711
S'property'
p4712
sS'required'
p4713
I01
sS'group_name'
p4714
Nsa(dp4715
S'description'
p4716
S'The row component to consider for this kernel\n'
p4717
sS'cpp_type'
p4718
S'unsigned int'
p4719
sS'default'
p4720
S'0'
p4721
sS'name'
p4722
S'row'
p4723
sS'required'
p4724
I00
sS'group_name'
p4725
Nsa(dp4726
S'description'
p4727
S'The seed for the master random number generator\n'
p4728
sS'cpp_type'
p4729
S'unsigned int'
p4730
sS'default'
p4731
S'0'
p4732
sS'name'
p4733
S'seed'
p4734
sS'required'
p4735
I00
sS'group_name'
p4736
S'Advanced'
p4737
sa(dp4738
S'description'
p4739
g3
sS'cpp_type'
p4740
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4741
sS'default'
p4742
S'MaterialRealTensorValueAux'
p4743
sS'name'
p4744
S'type'
p4745
sS'required'
p4746
I00
sS'group_name'
p4747
Nsa(dp4748
S'description'
p4749
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4750
sS'cpp_type'
p4751
S'bool'
p4752
sS'default'
p4753
S'0'
p4754
sS'name'
p4755
S'use_displaced_mesh'
p4756
sS'required'
p4757
I00
sS'group_name'
p4758
S'Advanced'
p4759
sa(dp4760
S'description'
p4761
S'The name of the variable that this object applies to\n'
p4762
sS'cpp_type'
p4763
S'AuxVariableName'
p4764
sS'default'
p4765
g3
sS'name'
p4766
S'variable'
p4767
sS'required'
p4768
I01
sS'group_name'
p4769
NsasS'name'
p4770
S'/AuxKernels/MaterialRealTensorValueAux'
p4771
sa(dp4772
S'description'
p4773
g3
sS'subblocks'
p4774
NsS'parameters'
p4775
(lp4776
(dp4777
S'description'
p4778
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4779
sS'cpp_type'
p4780
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4781
sS'default'
p4782
g3
sS'name'
p4783
S'block'
p4784
sS'required'
p4785
I00
sS'group_name'
p4786
Nsa(dp4787
S'description'
p4788
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4789
sS'cpp_type'
p4790
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4791
sS'default'
p4792
g3
sS'name'
p4793
S'boundary'
p4794
sS'required'
p4795
I00
sS'group_name'
p4796
Nsa(dp4797
S'description'
p4798
S'The vector component to consider for this kernel\n'
p4799
sS'cpp_type'
p4800
S'unsigned int'
p4801
sS'default'
p4802
S'0'
p4803
sS'name'
p4804
S'component'
p4805
sS'required'
p4806
I00
sS'group_name'
p4807
Nsa(dp4808
S'description'
p4809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4810
sS'cpp_type'
p4811
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4812
sS'default'
p4813
g3
sS'name'
p4814
S'control_tags'
p4815
sS'required'
p4816
I00
sS'group_name'
p4817
Nsa(dp4818
S'name'
p4819
S'execute_on'
p4820
sS'cpp_type'
p4821
S'MultiMooseEnum'
p4822
sS'default'
p4823
S'LINEAR'
p4824
sS'description'
p4825
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4826
sS'required'
p4827
I00
sS'options'
p4828
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4829
sS'group_name'
p4830
Nsa(dp4831
S'description'
p4832
S'The factor by which to multiply your material property for visualization\n'
p4833
sS'cpp_type'
p4834
S'double'
p4835
sS'default'
p4836
S'1'
p4837
sS'name'
p4838
S'factor'
p4839
sS'required'
p4840
I00
sS'group_name'
p4841
Nsa(dp4842
S'description'
p4843
S'The offset to add to your material property for visualization\n'
p4844
sS'cpp_type'
p4845
S'double'
p4846
sS'default'
p4847
S'0'
p4848
sS'name'
p4849
S'offset'
p4850
sS'required'
p4851
I00
sS'group_name'
p4852
Nsa(dp4853
S'description'
p4854
S'The scalar material property name\n'
p4855
sS'cpp_type'
p4856
S'MaterialPropertyName'
p4857
sS'default'
p4858
g3
sS'name'
p4859
S'property'
p4860
sS'required'
p4861
I01
sS'group_name'
p4862
Nsa(dp4863
S'description'
p4864
S'The seed for the master random number generator\n'
p4865
sS'cpp_type'
p4866
S'unsigned int'
p4867
sS'default'
p4868
S'0'
p4869
sS'name'
p4870
S'seed'
p4871
sS'required'
p4872
I00
sS'group_name'
p4873
S'Advanced'
p4874
sa(dp4875
S'description'
p4876
g3
sS'cpp_type'
p4877
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p4878
sS'default'
p4879
S'MaterialRealVectorValueAux'
p4880
sS'name'
p4881
S'type'
p4882
sS'required'
p4883
I00
sS'group_name'
p4884
Nsa(dp4885
S'description'
p4886
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4887
sS'cpp_type'
p4888
S'bool'
p4889
sS'default'
p4890
S'0'
p4891
sS'name'
p4892
S'use_displaced_mesh'
p4893
sS'required'
p4894
I00
sS'group_name'
p4895
S'Advanced'
p4896
sa(dp4897
S'description'
p4898
S'The name of the variable that this object applies to\n'
p4899
sS'cpp_type'
p4900
S'AuxVariableName'
p4901
sS'default'
p4902
g3
sS'name'
p4903
S'variable'
p4904
sS'required'
p4905
I01
sS'group_name'
p4906
NsasS'name'
p4907
S'/AuxKernels/MaterialRealVectorValueAux'
p4908
sa(dp4909
S'description'
p4910
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p4911
sS'subblocks'
p4912
NsS'parameters'
p4913
(lp4914
(dp4915
S'description'
p4916
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4917
sS'cpp_type'
p4918
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4919
sS'default'
p4920
g3
sS'name'
p4921
S'block'
p4922
sS'required'
p4923
I00
sS'group_name'
p4924
Nsa(dp4925
S'description'
p4926
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4927
sS'cpp_type'
p4928
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4929
sS'default'
p4930
g3
sS'name'
p4931
S'boundary'
p4932
sS'required'
p4933
I00
sS'group_name'
p4934
Nsa(dp4935
S'description'
p4936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4937
sS'cpp_type'
p4938
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p4939
sS'default'
p4940
g3
sS'name'
p4941
S'control_tags'
p4942
sS'required'
p4943
I00
sS'group_name'
p4944
Nsa(dp4945
S'name'
p4946
S'execute_on'
p4947
sS'cpp_type'
p4948
S'MultiMooseEnum'
p4949
sS'default'
p4950
S'LINEAR'
p4951
sS'description'
p4952
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4953
sS'required'
p4954
I00
sS'options'
p4955
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4956
sS'group_name'
p4957
Nsa(dp4958
S'description'
p4959
S'The factor by which to multiply your material property for visualization\n'
p4960
sS'cpp_type'
p4961
S'double'
p4962
sS'default'
p4963
S'1'
p4964
sS'name'
p4965
S'factor'
p4966
sS'required'
p4967
I00
sS'group_name'
p4968
Nsa(dp4969
S'description'
p4970
S'The index to consider for this kernel\n'
p4971
sS'cpp_type'
p4972
S'unsigned int'
p4973
sS'default'
p4974
S'0'
p4975
sS'name'
p4976
S'index'
p4977
sS'required'
p4978
I00
sS'group_name'
p4979
Nsa(dp4980
S'description'
p4981
S'The offset to add to your material property for visualization\n'
p4982
sS'cpp_type'
p4983
S'double'
p4984
sS'default'
p4985
S'0'
p4986
sS'name'
p4987
S'offset'
p4988
sS'required'
p4989
I00
sS'group_name'
p4990
Nsa(dp4991
S'description'
p4992
S'The scalar material property name\n'
p4993
sS'cpp_type'
p4994
S'MaterialPropertyName'
p4995
sS'default'
p4996
g3
sS'name'
p4997
S'property'
p4998
sS'required'
p4999
I01
sS'group_name'
p5000
Nsa(dp5001
S'description'
p5002
S'The seed for the master random number generator\n'
p5003
sS'cpp_type'
p5004
S'unsigned int'
p5005
sS'default'
p5006
S'0'
p5007
sS'name'
p5008
S'seed'
p5009
sS'required'
p5010
I00
sS'group_name'
p5011
S'Advanced'
p5012
sa(dp5013
S'description'
p5014
g3
sS'cpp_type'
p5015
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5016
sS'default'
p5017
S'MaterialStdVectorAux'
p5018
sS'name'
p5019
S'type'
p5020
sS'required'
p5021
I00
sS'group_name'
p5022
Nsa(dp5023
S'description'
p5024
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5025
sS'cpp_type'
p5026
S'bool'
p5027
sS'default'
p5028
S'0'
p5029
sS'name'
p5030
S'use_displaced_mesh'
p5031
sS'required'
p5032
I00
sS'group_name'
p5033
S'Advanced'
p5034
sa(dp5035
S'description'
p5036
S'The name of the variable that this object applies to\n'
p5037
sS'cpp_type'
p5038
S'AuxVariableName'
p5039
sS'default'
p5040
g3
sS'name'
p5041
S'variable'
p5042
sS'required'
p5043
I01
sS'group_name'
p5044
NsasS'name'
p5045
S'/AuxKernels/MaterialStdVectorAux'
p5046
sa(dp5047
S'description'
p5048
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p5049
sS'subblocks'
p5050
NsS'parameters'
p5051
(lp5052
(dp5053
S'description'
p5054
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5055
sS'cpp_type'
p5056
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5057
sS'default'
p5058
g3
sS'name'
p5059
S'block'
p5060
sS'required'
p5061
I00
sS'group_name'
p5062
Nsa(dp5063
S'description'
p5064
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5065
sS'cpp_type'
p5066
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5067
sS'default'
p5068
g3
sS'name'
p5069
S'boundary'
p5070
sS'required'
p5071
I00
sS'group_name'
p5072
Nsa(dp5073
S'description'
p5074
S'The gradient component to be extracted for this kernel\n'
p5075
sS'cpp_type'
p5076
S'unsigned int'
p5077
sS'default'
p5078
S'0'
p5079
sS'name'
p5080
S'component'
p5081
sS'required'
p5082
I00
sS'group_name'
p5083
Nsa(dp5084
S'description'
p5085
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5086
sS'cpp_type'
p5087
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5088
sS'default'
p5089
g3
sS'name'
p5090
S'control_tags'
p5091
sS'required'
p5092
I00
sS'group_name'
p5093
Nsa(dp5094
S'name'
p5095
S'execute_on'
p5096
sS'cpp_type'
p5097
S'MultiMooseEnum'
p5098
sS'default'
p5099
S'LINEAR'
p5100
sS'description'
p5101
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5102
sS'required'
p5103
I00
sS'options'
p5104
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p5105
sS'group_name'
p5106
Nsa(dp5107
S'description'
p5108
S'The factor by which to multiply your material property for visualization\n'
p5109
sS'cpp_type'
p5110
S'double'
p5111
sS'default'
p5112
S'1'
p5113
sS'name'
p5114
S'factor'
p5115
sS'required'
p5116
I00
sS'group_name'
p5117
Nsa(dp5118
S'description'
p5119
S'The index to consider for this kernel\n'
p5120
sS'cpp_type'
p5121
S'unsigned int'
p5122
sS'default'
p5123
S'0'
p5124
sS'name'
p5125
S'index'
p5126
sS'required'
p5127
I00
sS'group_name'
p5128
Nsa(dp5129
S'description'
p5130
S'The offset to add to your material property for visualization\n'
p5131
sS'cpp_type'
p5132
S'double'
p5133
sS'default'
p5134
S'0'
p5135
sS'name'
p5136
S'offset'
p5137
sS'required'
p5138
I00
sS'group_name'
p5139
Nsa(dp5140
S'description'
p5141
S'The scalar material property name\n'
p5142
sS'cpp_type'
p5143
S'MaterialPropertyName'
p5144
sS'default'
p5145
g3
sS'name'
p5146
S'property'
p5147
sS'required'
p5148
I01
sS'group_name'
p5149
Nsa(dp5150
S'description'
p5151
S'The seed for the master random number generator\n'
p5152
sS'cpp_type'
p5153
S'unsigned int'
p5154
sS'default'
p5155
S'0'
p5156
sS'name'
p5157
S'seed'
p5158
sS'required'
p5159
I00
sS'group_name'
p5160
S'Advanced'
p5161
sa(dp5162
S'description'
p5163
g3
sS'cpp_type'
p5164
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5165
sS'default'
p5166
S'MaterialStdVectorRealGradientAux'
p5167
sS'name'
p5168
S'type'
p5169
sS'required'
p5170
I00
sS'group_name'
p5171
Nsa(dp5172
S'description'
p5173
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5174
sS'cpp_type'
p5175
S'bool'
p5176
sS'default'
p5177
S'0'
p5178
sS'name'
p5179
S'use_displaced_mesh'
p5180
sS'required'
p5181
I00
sS'group_name'
p5182
S'Advanced'
p5183
sa(dp5184
S'description'
p5185
S'The name of the variable that this object applies to\n'
p5186
sS'cpp_type'
p5187
S'AuxVariableName'
p5188
sS'default'
p5189
g3
sS'name'
p5190
S'variable'
p5191
sS'required'
p5192
I01
sS'group_name'
p5193
NsasS'name'
p5194
S'/AuxKernels/MaterialStdVectorRealGradientAux'
p5195
sa(dp5196
S'description'
p5197
g3
sS'subblocks'
p5198
NsS'parameters'
p5199
(lp5200
(dp5201
S'description'
p5202
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5203
sS'cpp_type'
p5204
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5205
sS'default'
p5206
g3
sS'name'
p5207
S'block'
p5208
sS'required'
p5209
I00
sS'group_name'
p5210
Nsa(dp5211
S'description'
p5212
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5213
sS'cpp_type'
p5214
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5215
sS'default'
p5216
g3
sS'name'
p5217
S'boundary'
p5218
sS'required'
p5219
I00
sS'group_name'
p5220
Nsa(dp5221
S'description'
p5222
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5223
sS'cpp_type'
p5224
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5225
sS'default'
p5226
g3
sS'name'
p5227
S'control_tags'
p5228
sS'required'
p5229
I00
sS'group_name'
p5230
Nsa(dp5231
S'name'
p5232
S'execute_on'
p5233
sS'cpp_type'
p5234
S'MultiMooseEnum'
p5235
sS'default'
p5236
S'LINEAR'
p5237
sS'description'
p5238
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5239
sS'required'
p5240
I00
sS'options'
p5241
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p5242
sS'group_name'
p5243
Nsa(dp5244
S'description'
p5245
S'The matrix index (0-20) to output\n'
p5246
sS'cpp_type'
p5247
S'int'
p5248
sS'default'
p5249
g3
sS'name'
p5250
S'index'
p5251
sS'required'
p5252
I01
sS'group_name'
p5253
Nsa(dp5254
S'description'
p5255
S'The seed for the master random number generator\n'
p5256
sS'cpp_type'
p5257
S'unsigned int'
p5258
sS'default'
p5259
S'0'
p5260
sS'name'
p5261
S'seed'
p5262
sS'required'
p5263
I00
sS'group_name'
p5264
S'Advanced'
p5265
sa(dp5266
S'description'
p5267
S'The SymmElasticityTensor material property name\n'
p5268
sS'cpp_type'
p5269
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5270
sS'default'
p5271
g3
sS'name'
p5272
S'tensor_matpro'
p5273
sS'required'
p5274
I01
sS'group_name'
p5275
Nsa(dp5276
S'description'
p5277
g3
sS'cpp_type'
p5278
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5279
sS'default'
p5280
S'MaterialSymmElasticityTensorAux'
p5281
sS'name'
p5282
S'type'
p5283
sS'required'
p5284
I00
sS'group_name'
p5285
Nsa(dp5286
S'description'
p5287
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5288
sS'cpp_type'
p5289
S'bool'
p5290
sS'default'
p5291
S'0'
p5292
sS'name'
p5293
S'use_displaced_mesh'
p5294
sS'required'
p5295
I00
sS'group_name'
p5296
S'Advanced'
p5297
sa(dp5298
S'description'
p5299
S'The name of the variable that this object applies to\n'
p5300
sS'cpp_type'
p5301
S'AuxVariableName'
p5302
sS'default'
p5303
g3
sS'name'
p5304
S'variable'
p5305
sS'required'
p5306
I01
sS'group_name'
p5307
NsasS'name'
p5308
S'/AuxKernels/MaterialSymmElasticityTensorAux'
p5309
sa(dp5310
S'description'
p5311
g3
sS'subblocks'
p5312
NsS'parameters'
p5313
(lp5314
(dp5315
S'description'
p5316
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5317
sS'cpp_type'
p5318
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5319
sS'default'
p5320
g3
sS'name'
p5321
S'block'
p5322
sS'required'
p5323
I00
sS'group_name'
p5324
Nsa(dp5325
S'description'
p5326
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5327
sS'cpp_type'
p5328
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5329
sS'default'
p5330
g3
sS'name'
p5331
S'boundary'
p5332
sS'required'
p5333
I00
sS'group_name'
p5334
Nsa(dp5335
S'description'
p5336
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5337
sS'cpp_type'
p5338
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5339
sS'default'
p5340
g3
sS'name'
p5341
S'control_tags'
p5342
sS'required'
p5343
I00
sS'group_name'
p5344
Nsa(dp5345
S'description'
p5346
S'Direction vector\n'
p5347
sS'cpp_type'
p5348
S'libMesh::VectorValue<double>'
p5349
sS'default'
p5350
S'1 0 0'
p5351
sS'name'
p5352
S'direction'
p5353
sS'required'
p5354
I00
sS'group_name'
p5355
Nsa(dp5356
S'name'
p5357
S'execute_on'
p5358
sS'cpp_type'
p5359
S'MultiMooseEnum'
p5360
sS'default'
p5361
S'LINEAR'
p5362
sS'description'
p5363
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5364
sS'required'
p5365
I00
sS'options'
p5366
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p5367
sS'group_name'
p5368
Nsa(dp5369
S'description'
p5370
S'The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n'
p5371
sS'cpp_type'
p5372
S'int'
p5373
sS'default'
p5374
S'-1'
p5375
sS'name'
p5376
S'index'
p5377
sS'required'
p5378
I00
sS'group_name'
p5379
Nsa(dp5380
S'description'
p5381
S'Start point for axis used to calculate some material tensor quantities\n'
p5382
sS'cpp_type'
p5383
S'libMesh::VectorValue<double>'
p5384
sS'default'
p5385
S'0 0 0'
p5386
sS'name'
p5387
S'point1'
p5388
sS'required'
p5389
I00
sS'group_name'
p5390
Nsa(dp5391
S'description'
p5392
S'End point for axis used to calculate some material tensor quantities\n'
p5393
sS'cpp_type'
p5394
S'libMesh::VectorValue<double>'
p5395
sS'default'
p5396
S'0 1 0'
p5397
sS'name'
p5398
S'point2'
p5399
sS'required'
p5400
I00
sS'group_name'
p5401
Nsa(dp5402
S'description'
p5403
S'The quad point you want evaluated\n'
p5404
sS'cpp_type'
p5405
S'unsigned int'
p5406
sS'default'
p5407
g3
sS'name'
p5408
S'qp_select'
p5409
sS'required'
p5410
I00
sS'group_name'
p5411
Nsa(dp5412
S'name'
p5413
S'quantity'
p5414
sS'cpp_type'
p5415
S'MooseEnum'
p5416
sS'default'
p5417
g3
sS'description'
p5418
S'A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n'
p5419
sS'required'
p5420
I00
sS'options'
p5421
S'VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain'
p5422
sS'group_name'
p5423
Nsa(dp5424
S'description'
p5425
S'The seed for the master random number generator\n'
p5426
sS'cpp_type'
p5427
S'unsigned int'
p5428
sS'default'
p5429
S'0'
p5430
sS'name'
p5431
S'seed'
p5432
sS'required'
p5433
I00
sS'group_name'
p5434
S'Advanced'
p5435
sa(dp5436
S'description'
p5437
S'The material tensor name.\n'
p5438
sS'cpp_type'
p5439
S'MaterialPropertyName'
p5440
sS'default'
p5441
g3
sS'name'
p5442
S'tensor'
p5443
sS'required'
p5444
I01
sS'group_name'
p5445
Nsa(dp5446
S'description'
p5447
g3
sS'cpp_type'
p5448
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5449
sS'default'
p5450
S'MaterialTensorAux'
p5451
sS'name'
p5452
S'type'
p5453
sS'required'
p5454
I00
sS'group_name'
p5455
Nsa(dp5456
S'description'
p5457
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5458
sS'cpp_type'
p5459
S'bool'
p5460
sS'default'
p5461
S'0'
p5462
sS'name'
p5463
S'use_displaced_mesh'
p5464
sS'required'
p5465
I00
sS'group_name'
p5466
S'Advanced'
p5467
sa(dp5468
S'description'
p5469
S'The name of the variable that this object applies to\n'
p5470
sS'cpp_type'
p5471
S'AuxVariableName'
p5472
sS'default'
p5473
g3
sS'name'
p5474
S'variable'
p5475
sS'required'
p5476
I01
sS'group_name'
p5477
NsasS'name'
p5478
S'/AuxKernels/MaterialTensorAux'
p5479
sa(dp5480
S'description'
p5481
g3
sS'subblocks'
p5482
NsS'parameters'
p5483
(lp5484
(dp5485
S'description'
p5486
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5487
sS'cpp_type'
p5488
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5489
sS'default'
p5490
g3
sS'name'
p5491
S'block'
p5492
sS'required'
p5493
I00
sS'group_name'
p5494
Nsa(dp5495
S'description'
p5496
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5497
sS'cpp_type'
p5498
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5499
sS'default'
p5500
g3
sS'name'
p5501
S'boundary'
p5502
sS'required'
p5503
I00
sS'group_name'
p5504
Nsa(dp5505
S'description'
p5506
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5507
sS'cpp_type'
p5508
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5509
sS'default'
p5510
g3
sS'name'
p5511
S'control_tags'
p5512
sS'required'
p5513
I00
sS'group_name'
p5514
Nsa(dp5515
S'name'
p5516
S'execute_on'
p5517
sS'cpp_type'
p5518
S'MultiMooseEnum'
p5519
sS'default'
p5520
S'LINEAR'
p5521
sS'description'
p5522
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5523
sS'required'
p5524
I00
sS'options'
p5525
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p5526
sS'group_name'
p5527
Nsa(dp5528
S'description'
p5529
S'The index into the tensor, from 0 to 2.\n'
p5530
sS'cpp_type'
p5531
S'int'
p5532
sS'default'
p5533
S'-1'
p5534
sS'name'
p5535
S'index'
p5536
sS'required'
p5537
I00
sS'group_name'
p5538
Nsa(dp5539
S'name'
p5540
S'quantity'
p5541
sS'cpp_type'
p5542
S'MooseEnum'
p5543
sS'default'
p5544
g3
sS'description'
p5545
S'A scalar quantity to compute: (only option is Length).\n'
p5546
sS'required'
p5547
I00
sS'options'
p5548
S'length'
p5549
sS'group_name'
p5550
Nsa(dp5551
S'description'
p5552
S'The seed for the master random number generator\n'
p5553
sS'cpp_type'
p5554
S'unsigned int'
p5555
sS'default'
p5556
S'0'
p5557
sS'name'
p5558
S'seed'
p5559
sS'required'
p5560
I00
sS'group_name'
p5561
S'Advanced'
p5562
sa(dp5563
S'description'
p5564
g3
sS'cpp_type'
p5565
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5566
sS'default'
p5567
S'MaterialVectorAux'
p5568
sS'name'
p5569
S'type'
p5570
sS'required'
p5571
I00
sS'group_name'
p5572
Nsa(dp5573
S'description'
p5574
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5575
sS'cpp_type'
p5576
S'bool'
p5577
sS'default'
p5578
S'0'
p5579
sS'name'
p5580
S'use_displaced_mesh'
p5581
sS'required'
p5582
I00
sS'group_name'
p5583
S'Advanced'
p5584
sa(dp5585
S'description'
p5586
S'The name of the variable that this object applies to\n'
p5587
sS'cpp_type'
p5588
S'AuxVariableName'
p5589
sS'default'
p5590
g3
sS'name'
p5591
S'variable'
p5592
sS'required'
p5593
I01
sS'group_name'
p5594
Nsa(dp5595
S'description'
p5596
S'The material vector name.\n'
p5597
sS'cpp_type'
p5598
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5599
sS'default'
p5600
g3
sS'name'
p5601
S'vector'
p5602
sS'required'
p5603
I01
sS'group_name'
p5604
NsasS'name'
p5605
S'/AuxKernels/MaterialVectorAux'
p5606
sa(dp5607
S'description'
p5608
g3
sS'subblocks'
p5609
NsS'parameters'
p5610
(lp5611
(dp5612
S'description'
p5613
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5614
sS'cpp_type'
p5615
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5616
sS'default'
p5617
g3
sS'name'
p5618
S'block'
p5619
sS'required'
p5620
I00
sS'group_name'
p5621
Nsa(dp5622
S'description'
p5623
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5624
sS'cpp_type'
p5625
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5626
sS'default'
p5627
g3
sS'name'
p5628
S'boundary'
p5629
sS'required'
p5630
I00
sS'group_name'
p5631
Nsa(dp5632
S'description'
p5633
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5634
sS'cpp_type'
p5635
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5636
sS'default'
p5637
g3
sS'name'
p5638
S'control_tags'
p5639
sS'required'
p5640
I00
sS'group_name'
p5641
Nsa(dp5642
S'name'
p5643
S'execute_on'
p5644
sS'cpp_type'
p5645
S'MultiMooseEnum'
p5646
sS'default'
p5647
S'LINEAR'
p5648
sS'description'
p5649
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5650
sS'required'
p5651
I00
sS'options'
p5652
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p5653
sS'group_name'
p5654
Nsa(dp5655
S'description'
p5656
S'Ratio of specific heats\n'
p5657
sS'cpp_type'
p5658
S'double'
p5659
sS'default'
p5660
g3
sS'name'
p5661
S'gamma'
p5662
sS'required'
p5663
I01
sS'group_name'
p5664
Nsa(dp5665
S'description'
p5666
g3
sS'cpp_type'
p5667
S'std::vector<VariableName>'
p5668
sS'default'
p5669
g3
sS'name'
p5670
S'pressure'
p5671
sS'required'
p5672
I01
sS'group_name'
p5673
Nsa(dp5674
S'description'
p5675
g3
sS'cpp_type'
p5676
S'std::vector<VariableName>'
p5677
sS'default'
p5678
g3
sS'name'
p5679
S'rho'
p5680
sS'required'
p5681
I01
sS'group_name'
p5682
Nsa(dp5683
S'description'
p5684
g3
sS'cpp_type'
p5685
S'std::vector<VariableName>'
p5686
sS'default'
p5687
g3
sS'name'
p5688
S'rhoe'
p5689
sS'required'
p5690
I01
sS'group_name'
p5691
Nsa(dp5692
S'description'
p5693
S'The seed for the master random number generator\n'
p5694
sS'cpp_type'
p5695
S'unsigned int'
p5696
sS'default'
p5697
S'0'
p5698
sS'name'
p5699
S'seed'
p5700
sS'required'
p5701
I00
sS'group_name'
p5702
S'Advanced'
p5703
sa(dp5704
S'description'
p5705
g3
sS'cpp_type'
p5706
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5707
sS'default'
p5708
S'NSEnthalpyAux'
p5709
sS'name'
p5710
S'type'
p5711
sS'required'
p5712
I00
sS'group_name'
p5713
Nsa(dp5714
S'description'
p5715
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5716
sS'cpp_type'
p5717
S'bool'
p5718
sS'default'
p5719
S'0'
p5720
sS'name'
p5721
S'use_displaced_mesh'
p5722
sS'required'
p5723
I00
sS'group_name'
p5724
S'Advanced'
p5725
sa(dp5726
S'description'
p5727
S'The name of the variable that this object applies to\n'
p5728
sS'cpp_type'
p5729
S'AuxVariableName'
p5730
sS'default'
p5731
g3
sS'name'
p5732
S'variable'
p5733
sS'required'
p5734
I01
sS'group_name'
p5735
NsasS'name'
p5736
S'/AuxKernels/NSEnthalpyAux'
p5737
sa(dp5738
S'description'
p5739
g3
sS'subblocks'
p5740
NsS'parameters'
p5741
(lp5742
(dp5743
S'description'
p5744
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5745
sS'cpp_type'
p5746
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5747
sS'default'
p5748
g3
sS'name'
p5749
S'block'
p5750
sS'required'
p5751
I00
sS'group_name'
p5752
Nsa(dp5753
S'description'
p5754
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5755
sS'cpp_type'
p5756
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5757
sS'default'
p5758
g3
sS'name'
p5759
S'boundary'
p5760
sS'required'
p5761
I00
sS'group_name'
p5762
Nsa(dp5763
S'description'
p5764
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5765
sS'cpp_type'
p5766
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5767
sS'default'
p5768
g3
sS'name'
p5769
S'control_tags'
p5770
sS'required'
p5771
I00
sS'group_name'
p5772
Nsa(dp5773
S'name'
p5774
S'execute_on'
p5775
sS'cpp_type'
p5776
S'MultiMooseEnum'
p5777
sS'default'
p5778
S'LINEAR'
p5779
sS'description'
p5780
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5781
sS'required'
p5782
I00
sS'options'
p5783
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p5784
sS'group_name'
p5785
Nsa(dp5786
S'description'
p5787
S'Ratio of specific heats\n'
p5788
sS'cpp_type'
p5789
S'double'
p5790
sS'default'
p5791
g3
sS'name'
p5792
S'gamma'
p5793
sS'required'
p5794
I01
sS'group_name'
p5795
Nsa(dp5796
S'description'
p5797
g3
sS'cpp_type'
p5798
S'std::vector<VariableName>'
p5799
sS'default'
p5800
g3
sS'name'
p5801
S'rho'
p5802
sS'required'
p5803
I01
sS'group_name'
p5804
Nsa(dp5805
S'description'
p5806
g3
sS'cpp_type'
p5807
S'std::vector<VariableName>'
p5808
sS'default'
p5809
g3
sS'name'
p5810
S'rhoe'
p5811
sS'required'
p5812
I01
sS'group_name'
p5813
Nsa(dp5814
S'description'
p5815
S'The seed for the master random number generator\n'
p5816
sS'cpp_type'
p5817
S'unsigned int'
p5818
sS'default'
p5819
S'0'
p5820
sS'name'
p5821
S'seed'
p5822
sS'required'
p5823
I00
sS'group_name'
p5824
S'Advanced'
p5825
sa(dp5826
S'description'
p5827
g3
sS'cpp_type'
p5828
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5829
sS'default'
p5830
S'NSPressureAux'
p5831
sS'name'
p5832
S'type'
p5833
sS'required'
p5834
I00
sS'group_name'
p5835
Nsa(dp5836
S'description'
p5837
g3
sS'cpp_type'
p5838
S'std::vector<VariableName>'
p5839
sS'default'
p5840
g3
sS'name'
p5841
S'u'
p5842
sS'required'
p5843
I01
sS'group_name'
p5844
Nsa(dp5845
S'description'
p5846
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5847
sS'cpp_type'
p5848
S'bool'
p5849
sS'default'
p5850
S'0'
p5851
sS'name'
p5852
S'use_displaced_mesh'
p5853
sS'required'
p5854
I00
sS'group_name'
p5855
S'Advanced'
p5856
sa(dp5857
S'description'
p5858
g3
sS'cpp_type'
p5859
S'std::vector<VariableName>'
p5860
sS'default'
p5861
g3
sS'name'
p5862
S'v'
p5863
sS'required'
p5864
I01
sS'group_name'
p5865
Nsa(dp5866
S'description'
p5867
S'The name of the variable that this object applies to\n'
p5868
sS'cpp_type'
p5869
S'AuxVariableName'
p5870
sS'default'
p5871
g3
sS'name'
p5872
S'variable'
p5873
sS'required'
p5874
I01
sS'group_name'
p5875
Nsa(dp5876
S'description'
p5877
g3
sS'cpp_type'
p5878
S'std::vector<VariableName>'
p5879
sS'default'
p5880
g3
sS'name'
p5881
S'w'
p5882
sS'required'
p5883
I00
sS'group_name'
p5884
NsasS'name'
p5885
S'/AuxKernels/NSPressureAux'
p5886
sa(dp5887
S'description'
p5888
g3
sS'subblocks'
p5889
NsS'parameters'
p5890
(lp5891
(dp5892
S'description'
p5893
S'Gas constant.\n'
p5894
sS'cpp_type'
p5895
S'double'
p5896
sS'default'
p5897
g3
sS'name'
p5898
S'R'
p5899
sS'required'
p5900
I01
sS'group_name'
p5901
Nsa(dp5902
S'description'
p5903
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5904
sS'cpp_type'
p5905
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5906
sS'default'
p5907
g3
sS'name'
p5908
S'block'
p5909
sS'required'
p5910
I00
sS'group_name'
p5911
Nsa(dp5912
S'description'
p5913
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5914
sS'cpp_type'
p5915
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5916
sS'default'
p5917
g3
sS'name'
p5918
S'boundary'
p5919
sS'required'
p5920
I00
sS'group_name'
p5921
Nsa(dp5922
S'description'
p5923
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5924
sS'cpp_type'
p5925
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p5926
sS'default'
p5927
g3
sS'name'
p5928
S'control_tags'
p5929
sS'required'
p5930
I00
sS'group_name'
p5931
Nsa(dp5932
S'name'
p5933
S'execute_on'
p5934
sS'cpp_type'
p5935
S'MultiMooseEnum'
p5936
sS'default'
p5937
S'LINEAR'
p5938
sS'description'
p5939
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5940
sS'required'
p5941
I00
sS'options'
p5942
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p5943
sS'group_name'
p5944
Nsa(dp5945
S'description'
p5946
S'Ratio of specific heats.\n'
p5947
sS'cpp_type'
p5948
S'double'
p5949
sS'default'
p5950
g3
sS'name'
p5951
S'gamma'
p5952
sS'required'
p5953
I01
sS'group_name'
p5954
Nsa(dp5955
S'description'
p5956
g3
sS'cpp_type'
p5957
S'std::vector<VariableName>'
p5958
sS'default'
p5959
g3
sS'name'
p5960
S'rho'
p5961
sS'required'
p5962
I01
sS'group_name'
p5963
Nsa(dp5964
S'description'
p5965
g3
sS'cpp_type'
p5966
S'std::vector<VariableName>'
p5967
sS'default'
p5968
g3
sS'name'
p5969
S'rhoe'
p5970
sS'required'
p5971
I01
sS'group_name'
p5972
Nsa(dp5973
S'description'
p5974
S'The seed for the master random number generator\n'
p5975
sS'cpp_type'
p5976
S'unsigned int'
p5977
sS'default'
p5978
S'0'
p5979
sS'name'
p5980
S'seed'
p5981
sS'required'
p5982
I00
sS'group_name'
p5983
S'Advanced'
p5984
sa(dp5985
S'description'
p5986
g3
sS'cpp_type'
p5987
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p5988
sS'default'
p5989
S'NSTemperatureAux'
p5990
sS'name'
p5991
S'type'
p5992
sS'required'
p5993
I00
sS'group_name'
p5994
Nsa(dp5995
S'description'
p5996
g3
sS'cpp_type'
p5997
S'std::vector<VariableName>'
p5998
sS'default'
p5999
g3
sS'name'
p6000
S'u'
p6001
sS'required'
p6002
I01
sS'group_name'
p6003
Nsa(dp6004
S'description'
p6005
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6006
sS'cpp_type'
p6007
S'bool'
p6008
sS'default'
p6009
S'0'
p6010
sS'name'
p6011
S'use_displaced_mesh'
p6012
sS'required'
p6013
I00
sS'group_name'
p6014
S'Advanced'
p6015
sa(dp6016
S'description'
p6017
g3
sS'cpp_type'
p6018
S'std::vector<VariableName>'
p6019
sS'default'
p6020
g3
sS'name'
p6021
S'v'
p6022
sS'required'
p6023
I01
sS'group_name'
p6024
Nsa(dp6025
S'description'
p6026
S'The name of the variable that this object applies to\n'
p6027
sS'cpp_type'
p6028
S'AuxVariableName'
p6029
sS'default'
p6030
g3
sS'name'
p6031
S'variable'
p6032
sS'required'
p6033
I01
sS'group_name'
p6034
Nsa(dp6035
S'description'
p6036
g3
sS'cpp_type'
p6037
S'std::vector<VariableName>'
p6038
sS'default'
p6039
g3
sS'name'
p6040
S'w'
p6041
sS'required'
p6042
I00
sS'group_name'
p6043
NsasS'name'
p6044
S'/AuxKernels/NSTemperatureAux'
p6045
sa(dp6046
S'description'
p6047
g3
sS'subblocks'
p6048
NsS'parameters'
p6049
(lp6050
(dp6051
S'description'
p6052
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6053
sS'cpp_type'
p6054
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6055
sS'default'
p6056
g3
sS'name'
p6057
S'block'
p6058
sS'required'
p6059
I00
sS'group_name'
p6060
Nsa(dp6061
S'description'
p6062
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6063
sS'cpp_type'
p6064
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6065
sS'default'
p6066
g3
sS'name'
p6067
S'boundary'
p6068
sS'required'
p6069
I00
sS'group_name'
p6070
Nsa(dp6071
S'description'
p6072
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6073
sS'cpp_type'
p6074
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6075
sS'default'
p6076
g3
sS'name'
p6077
S'control_tags'
p6078
sS'required'
p6079
I00
sS'group_name'
p6080
Nsa(dp6081
S'name'
p6082
S'execute_on'
p6083
sS'cpp_type'
p6084
S'MultiMooseEnum'
p6085
sS'default'
p6086
S'LINEAR'
p6087
sS'description'
p6088
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6089
sS'required'
p6090
I00
sS'options'
p6091
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6092
sS'group_name'
p6093
Nsa(dp6094
S'description'
p6095
S'Momentum (conserved form)\n'
p6096
sS'cpp_type'
p6097
S'std::vector<VariableName>'
p6098
sS'default'
p6099
g3
sS'name'
p6100
S'momentum'
p6101
sS'required'
p6102
I01
sS'group_name'
p6103
Nsa(dp6104
S'description'
p6105
S'Density (conserved form)\n'
p6106
sS'cpp_type'
p6107
S'std::vector<VariableName>'
p6108
sS'default'
p6109
g3
sS'name'
p6110
S'rho'
p6111
sS'required'
p6112
I01
sS'group_name'
p6113
Nsa(dp6114
S'description'
p6115
S'The seed for the master random number generator\n'
p6116
sS'cpp_type'
p6117
S'unsigned int'
p6118
sS'default'
p6119
S'0'
p6120
sS'name'
p6121
S'seed'
p6122
sS'required'
p6123
I00
sS'group_name'
p6124
S'Advanced'
p6125
sa(dp6126
S'description'
p6127
g3
sS'cpp_type'
p6128
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6129
sS'default'
p6130
S'NSVelocityAux'
p6131
sS'name'
p6132
S'type'
p6133
sS'required'
p6134
I00
sS'group_name'
p6135
Nsa(dp6136
S'description'
p6137
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6138
sS'cpp_type'
p6139
S'bool'
p6140
sS'default'
p6141
S'0'
p6142
sS'name'
p6143
S'use_displaced_mesh'
p6144
sS'required'
p6145
I00
sS'group_name'
p6146
S'Advanced'
p6147
sa(dp6148
S'description'
p6149
S'The name of the variable that this object applies to\n'
p6150
sS'cpp_type'
p6151
S'AuxVariableName'
p6152
sS'default'
p6153
g3
sS'name'
p6154
S'variable'
p6155
sS'required'
p6156
I01
sS'group_name'
p6157
NsasS'name'
p6158
S'/AuxKernels/NSVelocityAux'
p6159
sa(dp6160
S'description'
p6161
g3
sS'subblocks'
p6162
NsS'parameters'
p6163
(lp6164
(dp6165
S'description'
p6166
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6167
sS'cpp_type'
p6168
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6169
sS'default'
p6170
g3
sS'name'
p6171
S'block'
p6172
sS'required'
p6173
I00
sS'group_name'
p6174
Nsa(dp6175
S'description'
p6176
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6177
sS'cpp_type'
p6178
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6179
sS'default'
p6180
g3
sS'name'
p6181
S'boundary'
p6182
sS'required'
p6183
I00
sS'group_name'
p6184
Nsa(dp6185
S'description'
p6186
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6187
sS'cpp_type'
p6188
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6189
sS'default'
p6190
g3
sS'name'
p6191
S'control_tags'
p6192
sS'required'
p6193
I00
sS'group_name'
p6194
Nsa(dp6195
S'name'
p6196
S'execute_on'
p6197
sS'cpp_type'
p6198
S'MultiMooseEnum'
p6199
sS'default'
p6200
S'LINEAR'
p6201
sS'description'
p6202
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6203
sS'required'
p6204
I00
sS'options'
p6205
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6206
sS'group_name'
p6207
Nsa(dp6208
S'description'
p6209
S'The boundary to find the distance to.\n'
p6210
sS'cpp_type'
p6211
S'BoundaryName'
p6212
sS'default'
p6213
g3
sS'name'
p6214
S'paired_boundary'
p6215
sS'required'
p6216
I01
sS'group_name'
p6217
Nsa(dp6218
S'description'
p6219
S'The seed for the master random number generator\n'
p6220
sS'cpp_type'
p6221
S'unsigned int'
p6222
sS'default'
p6223
S'0'
p6224
sS'name'
p6225
S'seed'
p6226
sS'required'
p6227
I00
sS'group_name'
p6228
S'Advanced'
p6229
sa(dp6230
S'description'
p6231
g3
sS'cpp_type'
p6232
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6233
sS'default'
p6234
S'NearestNodeDistanceAux'
p6235
sS'name'
p6236
S'type'
p6237
sS'required'
p6238
I00
sS'group_name'
p6239
Nsa(dp6240
S'description'
p6241
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6242
sS'cpp_type'
p6243
S'bool'
p6244
sS'default'
p6245
S'1'
p6246
sS'name'
p6247
S'use_displaced_mesh'
p6248
sS'required'
p6249
I00
sS'group_name'
p6250
S'Advanced'
p6251
sa(dp6252
S'description'
p6253
S'The name of the variable that this object applies to\n'
p6254
sS'cpp_type'
p6255
S'AuxVariableName'
p6256
sS'default'
p6257
g3
sS'name'
p6258
S'variable'
p6259
sS'required'
p6260
I01
sS'group_name'
p6261
NsasS'name'
p6262
S'/AuxKernels/NearestNodeDistanceAux'
p6263
sa(dp6264
S'description'
p6265
g3
sS'subblocks'
p6266
NsS'parameters'
p6267
(lp6268
(dp6269
S'description'
p6270
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6271
sS'cpp_type'
p6272
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6273
sS'default'
p6274
g3
sS'name'
p6275
S'block'
p6276
sS'required'
p6277
I00
sS'group_name'
p6278
Nsa(dp6279
S'description'
p6280
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6281
sS'cpp_type'
p6282
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6283
sS'default'
p6284
g3
sS'name'
p6285
S'boundary'
p6286
sS'required'
p6287
I00
sS'group_name'
p6288
Nsa(dp6289
S'description'
p6290
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6291
sS'cpp_type'
p6292
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6293
sS'default'
p6294
g3
sS'name'
p6295
S'control_tags'
p6296
sS'required'
p6297
I00
sS'group_name'
p6298
Nsa(dp6299
S'name'
p6300
S'execute_on'
p6301
sS'cpp_type'
p6302
S'MultiMooseEnum'
p6303
sS'default'
p6304
S'LINEAR'
p6305
sS'description'
p6306
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6307
sS'required'
p6308
I00
sS'options'
p6309
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6310
sS'group_name'
p6311
Nsa(dp6312
S'description'
p6313
S'The boundary to get the value from.\n'
p6314
sS'cpp_type'
p6315
S'BoundaryName'
p6316
sS'default'
p6317
g3
sS'name'
p6318
S'paired_boundary'
p6319
sS'required'
p6320
I01
sS'group_name'
p6321
Nsa(dp6322
S'description'
p6323
S'The variable to get the value of.\n'
p6324
sS'cpp_type'
p6325
S'std::vector<VariableName>'
p6326
sS'default'
p6327
g3
sS'name'
p6328
S'paired_variable'
p6329
sS'required'
p6330
I01
sS'group_name'
p6331
Nsa(dp6332
S'description'
p6333
S'The seed for the master random number generator\n'
p6334
sS'cpp_type'
p6335
S'unsigned int'
p6336
sS'default'
p6337
S'0'
p6338
sS'name'
p6339
S'seed'
p6340
sS'required'
p6341
I00
sS'group_name'
p6342
S'Advanced'
p6343
sa(dp6344
S'description'
p6345
g3
sS'cpp_type'
p6346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6347
sS'default'
p6348
S'NearestNodeValueAux'
p6349
sS'name'
p6350
S'type'
p6351
sS'required'
p6352
I00
sS'group_name'
p6353
Nsa(dp6354
S'description'
p6355
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6356
sS'cpp_type'
p6357
S'bool'
p6358
sS'default'
p6359
S'1'
p6360
sS'name'
p6361
S'use_displaced_mesh'
p6362
sS'required'
p6363
I00
sS'group_name'
p6364
S'Advanced'
p6365
sa(dp6366
S'description'
p6367
S'The name of the variable that this object applies to\n'
p6368
sS'cpp_type'
p6369
S'AuxVariableName'
p6370
sS'default'
p6371
g3
sS'name'
p6372
S'variable'
p6373
sS'required'
p6374
I01
sS'group_name'
p6375
NsasS'name'
p6376
S'/AuxKernels/NearestNodeValueAux'
p6377
sa(dp6378
S'description'
p6379
g3
sS'subblocks'
p6380
NsS'parameters'
p6381
(lp6382
(dp6383
S'description'
p6384
S'beta parameter\n'
p6385
sS'cpp_type'
p6386
S'double'
p6387
sS'default'
p6388
g3
sS'name'
p6389
S'beta'
p6390
sS'required'
p6391
I01
sS'group_name'
p6392
Nsa(dp6393
S'description'
p6394
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6395
sS'cpp_type'
p6396
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6397
sS'default'
p6398
g3
sS'name'
p6399
S'block'
p6400
sS'required'
p6401
I00
sS'group_name'
p6402
Nsa(dp6403
S'description'
p6404
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6405
sS'cpp_type'
p6406
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6407
sS'default'
p6408
g3
sS'name'
p6409
S'boundary'
p6410
sS'required'
p6411
I00
sS'group_name'
p6412
Nsa(dp6413
S'description'
p6414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6415
sS'cpp_type'
p6416
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6417
sS'default'
p6418
g3
sS'name'
p6419
S'control_tags'
p6420
sS'required'
p6421
I00
sS'group_name'
p6422
Nsa(dp6423
S'description'
p6424
S'displacement variable\n'
p6425
sS'cpp_type'
p6426
S'std::vector<VariableName>'
p6427
sS'default'
p6428
g3
sS'name'
p6429
S'displacement'
p6430
sS'required'
p6431
I01
sS'group_name'
p6432
Nsa(dp6433
S'name'
p6434
S'execute_on'
p6435
sS'cpp_type'
p6436
S'MultiMooseEnum'
p6437
sS'default'
p6438
S'LINEAR'
p6439
sS'description'
p6440
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6441
sS'required'
p6442
I00
sS'options'
p6443
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6444
sS'group_name'
p6445
Nsa(dp6446
S'description'
p6447
S'The seed for the master random number generator\n'
p6448
sS'cpp_type'
p6449
S'unsigned int'
p6450
sS'default'
p6451
S'0'
p6452
sS'name'
p6453
S'seed'
p6454
sS'required'
p6455
I00
sS'group_name'
p6456
S'Advanced'
p6457
sa(dp6458
S'description'
p6459
g3
sS'cpp_type'
p6460
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6461
sS'default'
p6462
S'NewmarkAccelAux'
p6463
sS'name'
p6464
S'type'
p6465
sS'required'
p6466
I00
sS'group_name'
p6467
Nsa(dp6468
S'description'
p6469
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6470
sS'cpp_type'
p6471
S'bool'
p6472
sS'default'
p6473
S'0'
p6474
sS'name'
p6475
S'use_displaced_mesh'
p6476
sS'required'
p6477
I00
sS'group_name'
p6478
S'Advanced'
p6479
sa(dp6480
S'description'
p6481
S'The name of the variable that this object applies to\n'
p6482
sS'cpp_type'
p6483
S'AuxVariableName'
p6484
sS'default'
p6485
g3
sS'name'
p6486
S'variable'
p6487
sS'required'
p6488
I01
sS'group_name'
p6489
Nsa(dp6490
S'description'
p6491
S'velocity variable\n'
p6492
sS'cpp_type'
p6493
S'std::vector<VariableName>'
p6494
sS'default'
p6495
g3
sS'name'
p6496
S'velocity'
p6497
sS'required'
p6498
I01
sS'group_name'
p6499
NsasS'name'
p6500
S'/AuxKernels/NewmarkAccelAux'
p6501
sa(dp6502
S'description'
p6503
g3
sS'subblocks'
p6504
NsS'parameters'
p6505
(lp6506
(dp6507
S'description'
p6508
S'acceleration variable\n'
p6509
sS'cpp_type'
p6510
S'std::vector<VariableName>'
p6511
sS'default'
p6512
g3
sS'name'
p6513
S'acceleration'
p6514
sS'required'
p6515
I01
sS'group_name'
p6516
Nsa(dp6517
S'description'
p6518
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6519
sS'cpp_type'
p6520
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6521
sS'default'
p6522
g3
sS'name'
p6523
S'block'
p6524
sS'required'
p6525
I00
sS'group_name'
p6526
Nsa(dp6527
S'description'
p6528
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6529
sS'cpp_type'
p6530
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6531
sS'default'
p6532
g3
sS'name'
p6533
S'boundary'
p6534
sS'required'
p6535
I00
sS'group_name'
p6536
Nsa(dp6537
S'description'
p6538
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6539
sS'cpp_type'
p6540
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6541
sS'default'
p6542
g3
sS'name'
p6543
S'control_tags'
p6544
sS'required'
p6545
I00
sS'group_name'
p6546
Nsa(dp6547
S'name'
p6548
S'execute_on'
p6549
sS'cpp_type'
p6550
S'MultiMooseEnum'
p6551
sS'default'
p6552
S'LINEAR'
p6553
sS'description'
p6554
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6555
sS'required'
p6556
I00
sS'options'
p6557
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6558
sS'group_name'
p6559
Nsa(dp6560
S'description'
p6561
S'gamma parameter\n'
p6562
sS'cpp_type'
p6563
S'double'
p6564
sS'default'
p6565
g3
sS'name'
p6566
S'gamma'
p6567
sS'required'
p6568
I01
sS'group_name'
p6569
Nsa(dp6570
S'description'
p6571
S'The seed for the master random number generator\n'
p6572
sS'cpp_type'
p6573
S'unsigned int'
p6574
sS'default'
p6575
S'0'
p6576
sS'name'
p6577
S'seed'
p6578
sS'required'
p6579
I00
sS'group_name'
p6580
S'Advanced'
p6581
sa(dp6582
S'description'
p6583
g3
sS'cpp_type'
p6584
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6585
sS'default'
p6586
S'NewmarkVelAux'
p6587
sS'name'
p6588
S'type'
p6589
sS'required'
p6590
I00
sS'group_name'
p6591
Nsa(dp6592
S'description'
p6593
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6594
sS'cpp_type'
p6595
S'bool'
p6596
sS'default'
p6597
S'0'
p6598
sS'name'
p6599
S'use_displaced_mesh'
p6600
sS'required'
p6601
I00
sS'group_name'
p6602
S'Advanced'
p6603
sa(dp6604
S'description'
p6605
S'The name of the variable that this object applies to\n'
p6606
sS'cpp_type'
p6607
S'AuxVariableName'
p6608
sS'default'
p6609
g3
sS'name'
p6610
S'variable'
p6611
sS'required'
p6612
I01
sS'group_name'
p6613
NsasS'name'
p6614
S'/AuxKernels/NewmarkVelAux'
p6615
sa(dp6616
S'description'
p6617
g3
sS'subblocks'
p6618
NsS'parameters'
p6619
(lp6620
(dp6621
S'description'
p6622
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6623
sS'cpp_type'
p6624
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6625
sS'default'
p6626
g3
sS'name'
p6627
S'block'
p6628
sS'required'
p6629
I00
sS'group_name'
p6630
Nsa(dp6631
S'description'
p6632
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6633
sS'cpp_type'
p6634
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6635
sS'default'
p6636
g3
sS'name'
p6637
S'boundary'
p6638
sS'required'
p6639
I00
sS'group_name'
p6640
Nsa(dp6641
S'description'
p6642
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6643
sS'cpp_type'
p6644
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6645
sS'default'
p6646
g3
sS'name'
p6647
S'control_tags'
p6648
sS'required'
p6649
I00
sS'group_name'
p6650
Nsa(dp6651
S'name'
p6652
S'execute_on'
p6653
sS'cpp_type'
p6654
S'MultiMooseEnum'
p6655
sS'default'
p6656
S'LINEAR'
p6657
sS'description'
p6658
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6659
sS'required'
p6660
I00
sS'options'
p6661
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6662
sS'group_name'
p6663
Nsa(dp6664
S'description'
p6665
S'The normalization factor\n'
p6666
sS'cpp_type'
p6667
S'double'
p6668
sS'default'
p6669
S'1'
p6670
sS'name'
p6671
S'normal_factor'
p6672
sS'required'
p6673
I00
sS'group_name'
p6674
Nsa(dp6675
S'description'
p6676
S'The postprocessor on the source\n'
p6677
sS'cpp_type'
p6678
S'PostprocessorName'
p6679
sS'default'
p6680
g3
sS'name'
p6681
S'normalization'
p6682
sS'required'
p6683
I01
sS'group_name'
p6684
Nsa(dp6685
S'description'
p6686
S'The seed for the master random number generator\n'
p6687
sS'cpp_type'
p6688
S'unsigned int'
p6689
sS'default'
p6690
S'0'
p6691
sS'name'
p6692
S'seed'
p6693
sS'required'
p6694
I00
sS'group_name'
p6695
S'Advanced'
p6696
sa(dp6697
S'description'
p6698
S'The variable to be normalized\n'
p6699
sS'cpp_type'
p6700
S'std::vector<VariableName>'
p6701
sS'default'
p6702
g3
sS'name'
p6703
S'source_variable'
p6704
sS'required'
p6705
I01
sS'group_name'
p6706
Nsa(dp6707
S'description'
p6708
g3
sS'cpp_type'
p6709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6710
sS'default'
p6711
S'NormalizationAux'
p6712
sS'name'
p6713
S'type'
p6714
sS'required'
p6715
I00
sS'group_name'
p6716
Nsa(dp6717
S'description'
p6718
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6719
sS'cpp_type'
p6720
S'bool'
p6721
sS'default'
p6722
S'0'
p6723
sS'name'
p6724
S'use_displaced_mesh'
p6725
sS'required'
p6726
I00
sS'group_name'
p6727
S'Advanced'
p6728
sa(dp6729
S'description'
p6730
S'The name of the variable that this object applies to\n'
p6731
sS'cpp_type'
p6732
S'AuxVariableName'
p6733
sS'default'
p6734
g3
sS'name'
p6735
S'variable'
p6736
sS'required'
p6737
I01
sS'group_name'
p6738
NsasS'name'
p6739
S'/AuxKernels/NormalizationAux'
p6740
sa(dp6741
S'description'
p6742
S'Output euler angles from user object to an AuxVariable.\n'
p6743
sS'subblocks'
p6744
NsS'parameters'
p6745
(lp6746
(dp6747
S'description'
p6748
S'The GrainTracker UserObject to get values from.\n'
p6749
sS'cpp_type'
p6750
S'UserObjectName'
p6751
sS'default'
p6752
g3
sS'name'
p6753
S'GrainTracker_object'
p6754
sS'required'
p6755
I01
sS'group_name'
p6756
Nsa(dp6757
S'description'
p6758
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6759
sS'cpp_type'
p6760
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6761
sS'default'
p6762
g3
sS'name'
p6763
S'block'
p6764
sS'required'
p6765
I00
sS'group_name'
p6766
Nsa(dp6767
S'description'
p6768
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6769
sS'cpp_type'
p6770
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6771
sS'default'
p6772
g3
sS'name'
p6773
S'boundary'
p6774
sS'required'
p6775
I00
sS'group_name'
p6776
Nsa(dp6777
S'description'
p6778
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6779
sS'cpp_type'
p6780
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6781
sS'default'
p6782
g3
sS'name'
p6783
S'control_tags'
p6784
sS'required'
p6785
I00
sS'group_name'
p6786
Nsa(dp6787
S'description'
p6788
S'Name of Euler angle provider user object\n'
p6789
sS'cpp_type'
p6790
S'UserObjectName'
p6791
sS'default'
p6792
g3
sS'name'
p6793
S'euler_angle_provider'
p6794
sS'required'
p6795
I01
sS'group_name'
p6796
Nsa(dp6797
S'name'
p6798
S'execute_on'
p6799
sS'cpp_type'
p6800
S'MultiMooseEnum'
p6801
sS'default'
p6802
S'LINEAR'
p6803
sS'description'
p6804
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6805
sS'required'
p6806
I00
sS'options'
p6807
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6808
sS'group_name'
p6809
Nsa(dp6810
S'name'
p6811
S'output_euler_angle'
p6812
sS'cpp_type'
p6813
S'MooseEnum'
p6814
sS'default'
p6815
g3
sS'description'
p6816
S'Euler angle to output\n'
p6817
sS'required'
p6818
I01
sS'options'
p6819
S'phi1 Phi phi2'
p6820
sS'group_name'
p6821
Nsa(dp6822
S'description'
p6823
S'The seed for the master random number generator\n'
p6824
sS'cpp_type'
p6825
S'unsigned int'
p6826
sS'default'
p6827
S'0'
p6828
sS'name'
p6829
S'seed'
p6830
sS'required'
p6831
I00
sS'group_name'
p6832
S'Advanced'
p6833
sa(dp6834
S'description'
p6835
g3
sS'cpp_type'
p6836
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6837
sS'default'
p6838
S'OutputEulerAngles'
p6839
sS'name'
p6840
S'type'
p6841
sS'required'
p6842
I00
sS'group_name'
p6843
Nsa(dp6844
S'description'
p6845
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6846
sS'cpp_type'
p6847
S'bool'
p6848
sS'default'
p6849
S'0'
p6850
sS'name'
p6851
S'use_displaced_mesh'
p6852
sS'required'
p6853
I00
sS'group_name'
p6854
S'Advanced'
p6855
sa(dp6856
S'description'
p6857
S'The name of the variable that this object applies to\n'
p6858
sS'cpp_type'
p6859
S'AuxVariableName'
p6860
sS'default'
p6861
g3
sS'name'
p6862
S'variable'
p6863
sS'required'
p6864
I01
sS'group_name'
p6865
NsasS'name'
p6866
S'/AuxKernels/OutputEulerAngles'
p6867
sa(dp6868
S'description'
p6869
g3
sS'subblocks'
p6870
NsS'parameters'
p6871
(lp6872
(dp6873
S'description'
p6874
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6875
sS'cpp_type'
p6876
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6877
sS'default'
p6878
g3
sS'name'
p6879
S'block'
p6880
sS'required'
p6881
I00
sS'group_name'
p6882
Nsa(dp6883
S'description'
p6884
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6885
sS'cpp_type'
p6886
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6887
sS'default'
p6888
g3
sS'name'
p6889
S'boundary'
p6890
sS'required'
p6891
I00
sS'group_name'
p6892
Nsa(dp6893
S'description'
p6894
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6895
sS'cpp_type'
p6896
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p6897
sS'default'
p6898
g3
sS'name'
p6899
S'control_tags'
p6900
sS'required'
p6901
I00
sS'group_name'
p6902
Nsa(dp6903
S'name'
p6904
S'execute_on'
p6905
sS'cpp_type'
p6906
S'MultiMooseEnum'
p6907
sS'default'
p6908
S'LINEAR'
p6909
sS'description'
p6910
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p6911
sS'required'
p6912
I00
sS'options'
p6913
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p6914
sS'group_name'
p6915
Nsa(dp6916
S'description'
p6917
S'The seed for the master random number generator\n'
p6918
sS'cpp_type'
p6919
S'unsigned int'
p6920
sS'default'
p6921
S'0'
p6922
sS'name'
p6923
S'seed'
p6924
sS'required'
p6925
I00
sS'group_name'
p6926
S'Advanced'
p6927
sa(dp6928
S'description'
p6929
g3
sS'cpp_type'
p6930
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p6931
sS'default'
p6932
S'PFCEnergyDensity'
p6933
sS'name'
p6934
S'type'
p6935
sS'required'
p6936
I00
sS'group_name'
p6937
Nsa(dp6938
S'description'
p6939
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6940
sS'cpp_type'
p6941
S'bool'
p6942
sS'default'
p6943
S'0'
p6944
sS'name'
p6945
S'use_displaced_mesh'
p6946
sS'required'
p6947
I00
sS'group_name'
p6948
S'Advanced'
p6949
sa(dp6950
S'description'
p6951
S'Array of coupled variables\n'
p6952
sS'cpp_type'
p6953
S'std::vector<VariableName>'
p6954
sS'default'
p6955
g3
sS'name'
p6956
S'v'
p6957
sS'required'
p6958
I01
sS'group_name'
p6959
Nsa(dp6960
S'description'
p6961
S'The name of the variable that this object applies to\n'
p6962
sS'cpp_type'
p6963
S'AuxVariableName'
p6964
sS'default'
p6965
g3
sS'name'
p6966
S'variable'
p6967
sS'required'
p6968
I01
sS'group_name'
p6969
NsasS'name'
p6970
S'/AuxKernels/PFCEnergyDensity'
p6971
sa(dp6972
S'description'
p6973
g3
sS'subblocks'
p6974
NsS'parameters'
p6975
(lp6976
(dp6977
S'description'
p6978
S'Modified Coefficent in Taylor Series Expanstion\n'
p6979
sS'cpp_type'
p6980
S'double'
p6981
sS'default'
p6982
S'1'
p6983
sS'name'
p6984
S'a'
p6985
sS'required'
p6986
I00
sS'group_name'
p6987
Nsa(dp6988
S'description'
p6989
S'Modified Coefficent in Taylor Series Expanstion\n'
p6990
sS'cpp_type'
p6991
S'double'
p6992
sS'default'
p6993
S'1'
p6994
sS'name'
p6995
S'b'
p6996
sS'required'
p6997
I00
sS'group_name'
p6998
Nsa(dp6999
S'description'
p7000
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7001
sS'cpp_type'
p7002
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7003
sS'default'
p7004
g3
sS'name'
p7005
S'block'
p7006
sS'required'
p7007
I00
sS'group_name'
p7008
Nsa(dp7009
S'description'
p7010
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7011
sS'cpp_type'
p7012
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7013
sS'default'
p7014
g3
sS'name'
p7015
S'boundary'
p7016
sS'required'
p7017
I00
sS'group_name'
p7018
Nsa(dp7019
S'description'
p7020
S'Modified Coefficent in Taylor Series Expanstion\n'
p7021
sS'cpp_type'
p7022
S'double'
p7023
sS'default'
p7024
S'1'
p7025
sS'name'
p7026
S'c'
p7027
sS'required'
p7028
I00
sS'group_name'
p7029
Nsa(dp7030
S'description'
p7031
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7032
sS'cpp_type'
p7033
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7034
sS'default'
p7035
g3
sS'name'
p7036
S'control_tags'
p7037
sS'required'
p7038
I00
sS'group_name'
p7039
Nsa(dp7040
S'name'
p7041
S'execute_on'
p7042
sS'cpp_type'
p7043
S'MultiMooseEnum'
p7044
sS'default'
p7045
S'LINEAR'
p7046
sS'description'
p7047
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7048
sS'required'
p7049
I00
sS'options'
p7050
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7051
sS'group_name'
p7052
Nsa(dp7053
S'name'
p7054
S'log_approach'
p7055
sS'cpp_type'
p7056
S'MooseEnum'
p7057
sS'default'
p7058
g3
sS'description'
p7059
S'Which approach will be used to handle the natural log\n'
p7060
sS'required'
p7061
I01
sS'options'
p7062
S'tolerance cancelation expansion nothing'
p7063
sS'group_name'
p7064
Nsa(dp7065
S'description'
p7066
S'This is the number of terms to use in the taylor series expansion\n'
p7067
sS'cpp_type'
p7068
S'unsigned int'
p7069
sS'default'
p7070
S'4'
p7071
sS'name'
p7072
S'num_exp_terms'
p7073
sS'required'
p7074
I00
sS'group_name'
p7075
Nsa(dp7076
S'description'
p7077
S'The seed for the master random number generator\n'
p7078
sS'cpp_type'
p7079
S'unsigned int'
p7080
sS'default'
p7081
S'0'
p7082
sS'name'
p7083
S'seed'
p7084
sS'required'
p7085
I00
sS'group_name'
p7086
S'Advanced'
p7087
sa(dp7088
S'description'
p7089
S'Tolerance used when the tolerance approach is chosen\n'
p7090
sS'cpp_type'
p7091
S'double'
p7092
sS'default'
p7093
S'1e-09'
p7094
sS'name'
p7095
S'tol'
p7096
sS'required'
p7097
I00
sS'group_name'
p7098
Nsa(dp7099
S'description'
p7100
g3
sS'cpp_type'
p7101
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7102
sS'default'
p7103
S'PFCRFFEnergyDensity'
p7104
sS'name'
p7105
S'type'
p7106
sS'required'
p7107
I00
sS'group_name'
p7108
Nsa(dp7109
S'description'
p7110
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7111
sS'cpp_type'
p7112
S'bool'
p7113
sS'default'
p7114
S'0'
p7115
sS'name'
p7116
S'use_displaced_mesh'
p7117
sS'required'
p7118
I00
sS'group_name'
p7119
S'Advanced'
p7120
sa(dp7121
S'description'
p7122
S'Array of coupled variables\n'
p7123
sS'cpp_type'
p7124
S'std::vector<VariableName>'
p7125
sS'default'
p7126
g3
sS'name'
p7127
S'v'
p7128
sS'required'
p7129
I01
sS'group_name'
p7130
Nsa(dp7131
S'description'
p7132
S'The name of the variable that this object applies to\n'
p7133
sS'cpp_type'
p7134
S'AuxVariableName'
p7135
sS'default'
p7136
g3
sS'name'
p7137
S'variable'
p7138
sS'required'
p7139
I01
sS'group_name'
p7140
NsasS'name'
p7141
S'/AuxKernels/PFCRFFEnergyDensity'
p7142
sa(dp7143
S'description'
p7144
S'Parsed function AuxKernel.\n'
p7145
sS'subblocks'
p7146
NsS'parameters'
p7147
(lp7148
(dp7149
S'description'
p7150
S'coupled variables\n'
p7151
sS'cpp_type'
p7152
S'std::vector<VariableName>'
p7153
sS'default'
p7154
g3
sS'name'
p7155
S'args'
p7156
sS'required'
p7157
I00
sS'group_name'
p7158
Nsa(dp7159
S'description'
p7160
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7161
sS'cpp_type'
p7162
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7163
sS'default'
p7164
g3
sS'name'
p7165
S'block'
p7166
sS'required'
p7167
I00
sS'group_name'
p7168
Nsa(dp7169
S'description'
p7170
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7171
sS'cpp_type'
p7172
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7173
sS'default'
p7174
g3
sS'name'
p7175
S'boundary'
p7176
sS'required'
p7177
I00
sS'group_name'
p7178
Nsa(dp7179
S'description'
p7180
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p7181
sS'cpp_type'
p7182
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7183
sS'default'
p7184
g3
sS'name'
p7185
S'constant_expressions'
p7186
sS'required'
p7187
I00
sS'group_name'
p7188
Nsa(dp7189
S'description'
p7190
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p7191
sS'cpp_type'
p7192
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7193
sS'default'
p7194
g3
sS'name'
p7195
S'constant_names'
p7196
sS'required'
p7197
I00
sS'group_name'
p7198
Nsa(dp7199
S'description'
p7200
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7201
sS'cpp_type'
p7202
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7203
sS'default'
p7204
g3
sS'name'
p7205
S'control_tags'
p7206
sS'required'
p7207
I00
sS'group_name'
p7208
Nsa(dp7209
S'description'
p7210
S'Disable the function parser algebraic optimizer\n'
p7211
sS'cpp_type'
p7212
S'bool'
p7213
sS'default'
p7214
S'0'
p7215
sS'name'
p7216
S'disable_fpoptimizer'
p7217
sS'required'
p7218
I00
sS'group_name'
p7219
Nsa(dp7220
S'description'
p7221
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p7222
sS'cpp_type'
p7223
S'bool'
p7224
sS'default'
p7225
S'1'
p7226
sS'name'
p7227
S'enable_jit'
p7228
sS'required'
p7229
I00
sS'group_name'
p7230
Nsa(dp7231
S'name'
p7232
S'execute_on'
p7233
sS'cpp_type'
p7234
S'MultiMooseEnum'
p7235
sS'default'
p7236
S'LINEAR'
p7237
sS'description'
p7238
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7239
sS'required'
p7240
I00
sS'options'
p7241
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7242
sS'group_name'
p7243
Nsa(dp7244
S'description'
p7245
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p7246
sS'cpp_type'
p7247
S'bool'
p7248
sS'default'
p7249
S'0'
p7250
sS'name'
p7251
S'fail_on_evalerror'
p7252
sS'required'
p7253
I00
sS'group_name'
p7254
Nsa(dp7255
S'description'
p7256
S'function expression\n'
p7257
sS'cpp_type'
p7258
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7259
sS'default'
p7260
g3
sS'name'
p7261
S'function'
p7262
sS'required'
p7263
I01
sS'group_name'
p7264
Nsa(dp7265
S'description'
p7266
S'The seed for the master random number generator\n'
p7267
sS'cpp_type'
p7268
S'unsigned int'
p7269
sS'default'
p7270
S'0'
p7271
sS'name'
p7272
S'seed'
p7273
sS'required'
p7274
I00
sS'group_name'
p7275
S'Advanced'
p7276
sa(dp7277
S'description'
p7278
g3
sS'cpp_type'
p7279
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7280
sS'default'
p7281
S'ParsedAux'
p7282
sS'name'
p7283
S'type'
p7284
sS'required'
p7285
I00
sS'group_name'
p7286
Nsa(dp7287
S'description'
p7288
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7289
sS'cpp_type'
p7290
S'bool'
p7291
sS'default'
p7292
S'0'
p7293
sS'name'
p7294
S'use_displaced_mesh'
p7295
sS'required'
p7296
I00
sS'group_name'
p7297
S'Advanced'
p7298
sa(dp7299
S'description'
p7300
S'The name of the variable that this object applies to\n'
p7301
sS'cpp_type'
p7302
S'AuxVariableName'
p7303
sS'default'
p7304
g3
sS'name'
p7305
S'variable'
p7306
sS'required'
p7307
I01
sS'group_name'
p7308
NsasS'name'
p7309
S'/AuxKernels/ParsedAux'
p7310
sa(dp7311
S'description'
p7312
g3
sS'subblocks'
p7313
NsS'parameters'
p7314
(lp7315
(dp7316
S'description'
p7317
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7318
sS'cpp_type'
p7319
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7320
sS'default'
p7321
g3
sS'name'
p7322
S'block'
p7323
sS'required'
p7324
I00
sS'group_name'
p7325
Nsa(dp7326
S'description'
p7327
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7328
sS'cpp_type'
p7329
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7330
sS'default'
p7331
g3
sS'name'
p7332
S'boundary'
p7333
sS'required'
p7334
I00
sS'group_name'
p7335
Nsa(dp7336
S'description'
p7337
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7338
sS'cpp_type'
p7339
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7340
sS'default'
p7341
g3
sS'name'
p7342
S'control_tags'
p7343
sS'required'
p7344
I00
sS'group_name'
p7345
Nsa(dp7346
S'name'
p7347
S'execute_on'
p7348
sS'cpp_type'
p7349
S'MultiMooseEnum'
p7350
sS'default'
p7351
S'LINEAR'
p7352
sS'description'
p7353
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7354
sS'required'
p7355
I00
sS'options'
p7356
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7357
sS'group_name'
p7358
Nsa(dp7359
S'description'
p7360
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p7361
sS'cpp_type'
p7362
S'double'
p7363
sS'default'
p7364
g3
sS'name'
p7365
S'normal_smoothing_distance'
p7366
sS'required'
p7367
I00
sS'group_name'
p7368
Nsa(dp7369
S'description'
p7370
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p7371
sS'cpp_type'
p7372
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7373
sS'default'
p7374
g3
sS'name'
p7375
S'normal_smoothing_method'
p7376
sS'required'
p7377
I00
sS'group_name'
p7378
Nsa(dp7379
S'name'
p7380
S'order'
p7381
sS'cpp_type'
p7382
S'MooseEnum'
p7383
sS'default'
p7384
S'FIRST'
p7385
sS'description'
p7386
S'The finite element order\n'
p7387
sS'required'
p7388
I00
sS'options'
p7389
S'FIRST SECOND THIRD FOURTH'
p7390
sS'group_name'
p7391
Nsa(dp7392
S'description'
p7393
S'The boundary to be penetrated\n'
p7394
sS'cpp_type'
p7395
S'BoundaryName'
p7396
sS'default'
p7397
g3
sS'name'
p7398
S'paired_boundary'
p7399
sS'required'
p7400
I01
sS'group_name'
p7401
Nsa(dp7402
S'name'
p7403
S'quantity'
p7404
sS'cpp_type'
p7405
S'MooseEnum'
p7406
sS'default'
p7407
S'distance'
p7408
sS'description'
p7409
S'The quantity to recover from the available penetration information\n'
p7410
sS'required'
p7411
I00
sS'options'
p7412
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p7413
sS'group_name'
p7414
Nsa(dp7415
S'description'
p7416
S'The seed for the master random number generator\n'
p7417
sS'cpp_type'
p7418
S'unsigned int'
p7419
sS'default'
p7420
S'0'
p7421
sS'name'
p7422
S'seed'
p7423
sS'required'
p7424
I00
sS'group_name'
p7425
S'Advanced'
p7426
sa(dp7427
S'description'
p7428
S'Tangential distance to extend edges of contact surfaces\n'
p7429
sS'cpp_type'
p7430
S'double'
p7431
sS'default'
p7432
g3
sS'name'
p7433
S'tangential_tolerance'
p7434
sS'required'
p7435
I00
sS'group_name'
p7436
Nsa(dp7437
S'description'
p7438
g3
sS'cpp_type'
p7439
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7440
sS'default'
p7441
S'PenetrationAux'
p7442
sS'name'
p7443
S'type'
p7444
sS'required'
p7445
I00
sS'group_name'
p7446
Nsa(dp7447
S'description'
p7448
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7449
sS'cpp_type'
p7450
S'bool'
p7451
sS'default'
p7452
S'1'
p7453
sS'name'
p7454
S'use_displaced_mesh'
p7455
sS'required'
p7456
I00
sS'group_name'
p7457
S'Advanced'
p7458
sa(dp7459
S'description'
p7460
S'The name of the variable that this object applies to\n'
p7461
sS'cpp_type'
p7462
S'AuxVariableName'
p7463
sS'default'
p7464
g3
sS'name'
p7465
S'variable'
p7466
sS'required'
p7467
I01
sS'group_name'
p7468
NsasS'name'
p7469
S'/AuxKernels/PenetrationAux'
p7470
sa(dp7471
S'description'
p7472
g3
sS'subblocks'
p7473
NsS'parameters'
p7474
(lp7475
(dp7476
S'description'
p7477
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7478
sS'cpp_type'
p7479
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7480
sS'default'
p7481
g3
sS'name'
p7482
S'block'
p7483
sS'required'
p7484
I00
sS'group_name'
p7485
Nsa(dp7486
S'description'
p7487
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7488
sS'cpp_type'
p7489
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7490
sS'default'
p7491
g3
sS'name'
p7492
S'boundary'
p7493
sS'required'
p7494
I00
sS'group_name'
p7495
Nsa(dp7496
S'description'
p7497
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7498
sS'cpp_type'
p7499
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7500
sS'default'
p7501
g3
sS'name'
p7502
S'control_tags'
p7503
sS'required'
p7504
I00
sS'group_name'
p7505
Nsa(dp7506
S'name'
p7507
S'execute_on'
p7508
sS'cpp_type'
p7509
S'MultiMooseEnum'
p7510
sS'default'
p7511
S'LINEAR'
p7512
sS'description'
p7513
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7514
sS'required'
p7515
I00
sS'options'
p7516
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7517
sS'group_name'
p7518
Nsa(dp7519
S'description'
p7520
S'The seed for the master random number generator\n'
p7521
sS'cpp_type'
p7522
S'unsigned int'
p7523
sS'default'
p7524
S'0'
p7525
sS'name'
p7526
S'seed'
p7527
sS'required'
p7528
I00
sS'group_name'
p7529
S'Advanced'
p7530
sa(dp7531
S'description'
p7532
g3
sS'cpp_type'
p7533
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7534
sS'default'
p7535
S'ProcessorIDAux'
p7536
sS'name'
p7537
S'type'
p7538
sS'required'
p7539
I00
sS'group_name'
p7540
Nsa(dp7541
S'description'
p7542
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7543
sS'cpp_type'
p7544
S'bool'
p7545
sS'default'
p7546
S'0'
p7547
sS'name'
p7548
S'use_displaced_mesh'
p7549
sS'required'
p7550
I00
sS'group_name'
p7551
S'Advanced'
p7552
sa(dp7553
S'description'
p7554
S'The name of the variable that this object applies to\n'
p7555
sS'cpp_type'
p7556
S'AuxVariableName'
p7557
sS'default'
p7558
g3
sS'name'
p7559
S'variable'
p7560
sS'required'
p7561
I01
sS'group_name'
p7562
NsasS'name'
p7563
S'/AuxKernels/ProcessorIDAux'
p7564
sa(dp7565
S'description'
p7566
g3
sS'subblocks'
p7567
NsS'parameters'
p7568
(lp7569
(dp7570
S'description'
p7571
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7572
sS'cpp_type'
p7573
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7574
sS'default'
p7575
g3
sS'name'
p7576
S'block'
p7577
sS'required'
p7578
I00
sS'group_name'
p7579
Nsa(dp7580
S'description'
p7581
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7582
sS'cpp_type'
p7583
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7584
sS'default'
p7585
g3
sS'name'
p7586
S'boundary'
p7587
sS'required'
p7588
I00
sS'group_name'
p7589
Nsa(dp7590
S'description'
p7591
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7592
sS'cpp_type'
p7593
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7594
sS'default'
p7595
g3
sS'name'
p7596
S'control_tags'
p7597
sS'required'
p7598
I00
sS'group_name'
p7599
Nsa(dp7600
S'description'
p7601
S'The downstairs of the quotient variable\n'
p7602
sS'cpp_type'
p7603
S'std::vector<VariableName>'
p7604
sS'default'
p7605
g3
sS'name'
p7606
S'denominator'
p7607
sS'required'
p7608
I00
sS'group_name'
p7609
Nsa(dp7610
S'name'
p7611
S'execute_on'
p7612
sS'cpp_type'
p7613
S'MultiMooseEnum'
p7614
sS'default'
p7615
S'LINEAR'
p7616
sS'description'
p7617
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7618
sS'required'
p7619
I00
sS'options'
p7620
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7621
sS'group_name'
p7622
Nsa(dp7623
S'description'
p7624
S'The upstairs of the quotient variable\n'
p7625
sS'cpp_type'
p7626
S'std::vector<VariableName>'
p7627
sS'default'
p7628
g3
sS'name'
p7629
S'numerator'
p7630
sS'required'
p7631
I00
sS'group_name'
p7632
Nsa(dp7633
S'description'
p7634
S'The seed for the master random number generator\n'
p7635
sS'cpp_type'
p7636
S'unsigned int'
p7637
sS'default'
p7638
S'0'
p7639
sS'name'
p7640
S'seed'
p7641
sS'required'
p7642
I00
sS'group_name'
p7643
S'Advanced'
p7644
sa(dp7645
S'description'
p7646
g3
sS'cpp_type'
p7647
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7648
sS'default'
p7649
S'QuotientAux'
p7650
sS'name'
p7651
S'type'
p7652
sS'required'
p7653
I00
sS'group_name'
p7654
Nsa(dp7655
S'description'
p7656
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7657
sS'cpp_type'
p7658
S'bool'
p7659
sS'default'
p7660
S'0'
p7661
sS'name'
p7662
S'use_displaced_mesh'
p7663
sS'required'
p7664
I00
sS'group_name'
p7665
S'Advanced'
p7666
sa(dp7667
S'description'
p7668
S'The name of the variable that this object applies to\n'
p7669
sS'cpp_type'
p7670
S'AuxVariableName'
p7671
sS'default'
p7672
g3
sS'name'
p7673
S'variable'
p7674
sS'required'
p7675
I01
sS'group_name'
p7676
NsasS'name'
p7677
S'/AuxKernels/QuotientAux'
p7678
sa(dp7679
S'description'
p7680
S'Access a component of a RankFourTensor\n'
p7681
sS'subblocks'
p7682
NsS'parameters'
p7683
(lp7684
(dp7685
S'description'
p7686
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7687
sS'cpp_type'
p7688
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7689
sS'default'
p7690
g3
sS'name'
p7691
S'block'
p7692
sS'required'
p7693
I00
sS'group_name'
p7694
Nsa(dp7695
S'description'
p7696
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7697
sS'cpp_type'
p7698
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7699
sS'default'
p7700
g3
sS'name'
p7701
S'boundary'
p7702
sS'required'
p7703
I00
sS'group_name'
p7704
Nsa(dp7705
S'description'
p7706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7707
sS'cpp_type'
p7708
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7709
sS'default'
p7710
g3
sS'name'
p7711
S'control_tags'
p7712
sS'required'
p7713
I00
sS'group_name'
p7714
Nsa(dp7715
S'name'
p7716
S'execute_on'
p7717
sS'cpp_type'
p7718
S'MultiMooseEnum'
p7719
sS'default'
p7720
S'LINEAR'
p7721
sS'description'
p7722
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7723
sS'required'
p7724
I00
sS'options'
p7725
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7726
sS'group_name'
p7727
Nsa(dp7728
S'description'
p7729
S'The index i of ijkl for the tensor to output (0, 1, 2)\n'
p7730
sS'cpp_type'
p7731
S'unsigned int'
p7732
sS'default'
p7733
g3
sS'name'
p7734
S'index_i'
p7735
sS'required'
p7736
I01
sS'group_name'
p7737
Nsa(dp7738
S'description'
p7739
S'The index j of ijkl for the tensor to output (0, 1, 2)\n'
p7740
sS'cpp_type'
p7741
S'unsigned int'
p7742
sS'default'
p7743
g3
sS'name'
p7744
S'index_j'
p7745
sS'required'
p7746
I01
sS'group_name'
p7747
Nsa(dp7748
S'description'
p7749
S'The index k of ijkl for the tensor to output (0, 1, 2)\n'
p7750
sS'cpp_type'
p7751
S'unsigned int'
p7752
sS'default'
p7753
g3
sS'name'
p7754
S'index_k'
p7755
sS'required'
p7756
I01
sS'group_name'
p7757
Nsa(dp7758
S'description'
p7759
S'The index l of ijkl for the tensor to output (0, 1, 2)\n'
p7760
sS'cpp_type'
p7761
S'unsigned int'
p7762
sS'default'
p7763
g3
sS'name'
p7764
S'index_l'
p7765
sS'required'
p7766
I01
sS'group_name'
p7767
Nsa(dp7768
S'description'
p7769
S'The rank four material tensor name\n'
p7770
sS'cpp_type'
p7771
S'MaterialPropertyName'
p7772
sS'default'
p7773
g3
sS'name'
p7774
S'rank_four_tensor'
p7775
sS'required'
p7776
I01
sS'group_name'
p7777
Nsa(dp7778
S'description'
p7779
S'The seed for the master random number generator\n'
p7780
sS'cpp_type'
p7781
S'unsigned int'
p7782
sS'default'
p7783
S'0'
p7784
sS'name'
p7785
S'seed'
p7786
sS'required'
p7787
I00
sS'group_name'
p7788
S'Advanced'
p7789
sa(dp7790
S'description'
p7791
g3
sS'cpp_type'
p7792
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7793
sS'default'
p7794
S'RankFourAux'
p7795
sS'name'
p7796
S'type'
p7797
sS'required'
p7798
I00
sS'group_name'
p7799
Nsa(dp7800
S'description'
p7801
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7802
sS'cpp_type'
p7803
S'bool'
p7804
sS'default'
p7805
S'0'
p7806
sS'name'
p7807
S'use_displaced_mesh'
p7808
sS'required'
p7809
I00
sS'group_name'
p7810
S'Advanced'
p7811
sa(dp7812
S'description'
p7813
S'The name of the variable that this object applies to\n'
p7814
sS'cpp_type'
p7815
S'AuxVariableName'
p7816
sS'default'
p7817
g3
sS'name'
p7818
S'variable'
p7819
sS'required'
p7820
I01
sS'group_name'
p7821
NsasS'name'
p7822
S'/AuxKernels/RankFourAux'
p7823
sa(dp7824
S'description'
p7825
S'Access a component of a RankTwoTensor\n'
p7826
sS'subblocks'
p7827
NsS'parameters'
p7828
(lp7829
(dp7830
S'description'
p7831
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7832
sS'cpp_type'
p7833
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7834
sS'default'
p7835
g3
sS'name'
p7836
S'block'
p7837
sS'required'
p7838
I00
sS'group_name'
p7839
Nsa(dp7840
S'description'
p7841
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7842
sS'cpp_type'
p7843
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7844
sS'default'
p7845
g3
sS'name'
p7846
S'boundary'
p7847
sS'required'
p7848
I00
sS'group_name'
p7849
Nsa(dp7850
S'description'
p7851
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7852
sS'cpp_type'
p7853
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7854
sS'default'
p7855
g3
sS'name'
p7856
S'control_tags'
p7857
sS'required'
p7858
I00
sS'group_name'
p7859
Nsa(dp7860
S'name'
p7861
S'execute_on'
p7862
sS'cpp_type'
p7863
S'MultiMooseEnum'
p7864
sS'default'
p7865
S'LINEAR'
p7866
sS'description'
p7867
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7868
sS'required'
p7869
I00
sS'options'
p7870
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7871
sS'group_name'
p7872
Nsa(dp7873
S'description'
p7874
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p7875
sS'cpp_type'
p7876
S'unsigned int'
p7877
sS'default'
p7878
g3
sS'name'
p7879
S'index_i'
p7880
sS'required'
p7881
I01
sS'group_name'
p7882
Nsa(dp7883
S'description'
p7884
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p7885
sS'cpp_type'
p7886
S'unsigned int'
p7887
sS'default'
p7888
g3
sS'name'
p7889
S'index_j'
p7890
sS'required'
p7891
I01
sS'group_name'
p7892
Nsa(dp7893
S'description'
p7894
S'The rank two material tensor name\n'
p7895
sS'cpp_type'
p7896
S'MaterialPropertyName'
p7897
sS'default'
p7898
g3
sS'name'
p7899
S'rank_two_tensor'
p7900
sS'required'
p7901
I01
sS'group_name'
p7902
Nsa(dp7903
S'description'
p7904
S'The seed for the master random number generator\n'
p7905
sS'cpp_type'
p7906
S'unsigned int'
p7907
sS'default'
p7908
S'0'
p7909
sS'name'
p7910
S'seed'
p7911
sS'required'
p7912
I00
sS'group_name'
p7913
S'Advanced'
p7914
sa(dp7915
S'description'
p7916
g3
sS'cpp_type'
p7917
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p7918
sS'default'
p7919
S'RankTwoAux'
p7920
sS'name'
p7921
S'type'
p7922
sS'required'
p7923
I00
sS'group_name'
p7924
Nsa(dp7925
S'description'
p7926
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7927
sS'cpp_type'
p7928
S'bool'
p7929
sS'default'
p7930
S'0'
p7931
sS'name'
p7932
S'use_displaced_mesh'
p7933
sS'required'
p7934
I00
sS'group_name'
p7935
S'Advanced'
p7936
sa(dp7937
S'description'
p7938
S'The name of the variable that this object applies to\n'
p7939
sS'cpp_type'
p7940
S'AuxVariableName'
p7941
sS'default'
p7942
g3
sS'name'
p7943
S'variable'
p7944
sS'required'
p7945
I01
sS'group_name'
p7946
NsasS'name'
p7947
S'/AuxKernels/RankTwoAux'
p7948
sa(dp7949
S'description'
p7950
S'Compute a scalar property of a RankTwoTensor\n'
p7951
sS'subblocks'
p7952
NsS'parameters'
p7953
(lp7954
(dp7955
S'description'
p7956
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7957
sS'cpp_type'
p7958
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7959
sS'default'
p7960
g3
sS'name'
p7961
S'block'
p7962
sS'required'
p7963
I00
sS'group_name'
p7964
Nsa(dp7965
S'description'
p7966
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7967
sS'cpp_type'
p7968
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7969
sS'default'
p7970
g3
sS'name'
p7971
S'boundary'
p7972
sS'required'
p7973
I00
sS'group_name'
p7974
Nsa(dp7975
S'description'
p7976
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7977
sS'cpp_type'
p7978
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p7979
sS'default'
p7980
g3
sS'name'
p7981
S'control_tags'
p7982
sS'required'
p7983
I00
sS'group_name'
p7984
Nsa(dp7985
S'name'
p7986
S'execute_on'
p7987
sS'cpp_type'
p7988
S'MultiMooseEnum'
p7989
sS'default'
p7990
S'LINEAR'
p7991
sS'description'
p7992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p7993
sS'required'
p7994
I00
sS'options'
p7995
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p7996
sS'group_name'
p7997
Nsa(dp7998
S'description'
p7999
S'The rank two material tensor name\n'
p8000
sS'cpp_type'
p8001
S'MaterialPropertyName'
p8002
sS'default'
p8003
g3
sS'name'
p8004
S'rank_two_tensor'
p8005
sS'required'
p8006
I01
sS'group_name'
p8007
Nsa(dp8008
S'name'
p8009
S'scalar_type'
p8010
sS'cpp_type'
p8011
S'MooseEnum'
p8012
sS'default'
p8013
g3
sS'description'
p8014
S'Type of scalar output\n'
p8015
sS'required'
p8016
I00
sS'options'
p8017
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant'
p8018
sS'group_name'
p8019
Nsa(dp8020
S'description'
p8021
S'The seed for the master random number generator\n'
p8022
sS'cpp_type'
p8023
S'unsigned int'
p8024
sS'default'
p8025
S'0'
p8026
sS'name'
p8027
S'seed'
p8028
sS'required'
p8029
I00
sS'group_name'
p8030
S'Advanced'
p8031
sa(dp8032
S'description'
p8033
g3
sS'cpp_type'
p8034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8035
sS'default'
p8036
S'RankTwoScalarAux'
p8037
sS'name'
p8038
S'type'
p8039
sS'required'
p8040
I00
sS'group_name'
p8041
Nsa(dp8042
S'description'
p8043
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8044
sS'cpp_type'
p8045
S'bool'
p8046
sS'default'
p8047
S'0'
p8048
sS'name'
p8049
S'use_displaced_mesh'
p8050
sS'required'
p8051
I00
sS'group_name'
p8052
S'Advanced'
p8053
sa(dp8054
S'description'
p8055
S'The name of the variable that this object applies to\n'
p8056
sS'cpp_type'
p8057
S'AuxVariableName'
p8058
sS'default'
p8059
g3
sS'name'
p8060
S'variable'
p8061
sS'required'
p8062
I01
sS'group_name'
p8063
NsasS'name'
p8064
S'/AuxKernels/RankTwoScalarAux'
p8065
sa(dp8066
S'description'
p8067
S'auxillary variable which is fluid density\n'
p8068
sS'subblocks'
p8069
NsS'parameters'
p8070
(lp8071
(dp8072
S'description'
p8073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8074
sS'cpp_type'
p8075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8076
sS'default'
p8077
g3
sS'name'
p8078
S'block'
p8079
sS'required'
p8080
I00
sS'group_name'
p8081
Nsa(dp8082
S'description'
p8083
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8084
sS'cpp_type'
p8085
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8086
sS'default'
p8087
g3
sS'name'
p8088
S'boundary'
p8089
sS'required'
p8090
I00
sS'group_name'
p8091
Nsa(dp8092
S'description'
p8093
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8094
sS'cpp_type'
p8095
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8096
sS'default'
p8097
g3
sS'name'
p8098
S'control_tags'
p8099
sS'required'
p8100
I00
sS'group_name'
p8101
Nsa(dp8102
S'description'
p8103
S'Name of user object that defines the density.\n'
p8104
sS'cpp_type'
p8105
S'UserObjectName'
p8106
sS'default'
p8107
g3
sS'name'
p8108
S'density_UO'
p8109
sS'required'
p8110
I01
sS'group_name'
p8111
Nsa(dp8112
S'name'
p8113
S'execute_on'
p8114
sS'cpp_type'
p8115
S'MultiMooseEnum'
p8116
sS'default'
p8117
S'LINEAR'
p8118
sS'description'
p8119
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8120
sS'required'
p8121
I00
sS'options'
p8122
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8123
sS'group_name'
p8124
Nsa(dp8125
S'description'
p8126
S'The variable that represents the pressure\n'
p8127
sS'cpp_type'
p8128
S'std::vector<VariableName>'
p8129
sS'default'
p8130
g3
sS'name'
p8131
S'pressure_var'
p8132
sS'required'
p8133
I01
sS'group_name'
p8134
Nsa(dp8135
S'description'
p8136
S'The seed for the master random number generator\n'
p8137
sS'cpp_type'
p8138
S'unsigned int'
p8139
sS'default'
p8140
S'0'
p8141
sS'name'
p8142
S'seed'
p8143
sS'required'
p8144
I00
sS'group_name'
p8145
S'Advanced'
p8146
sa(dp8147
S'description'
p8148
g3
sS'cpp_type'
p8149
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8150
sS'default'
p8151
S'RichardsDensityAux'
p8152
sS'name'
p8153
S'type'
p8154
sS'required'
p8155
I00
sS'group_name'
p8156
Nsa(dp8157
S'description'
p8158
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8159
sS'cpp_type'
p8160
S'bool'
p8161
sS'default'
p8162
S'0'
p8163
sS'name'
p8164
S'use_displaced_mesh'
p8165
sS'required'
p8166
I00
sS'group_name'
p8167
S'Advanced'
p8168
sa(dp8169
S'description'
p8170
S'The name of the variable that this object applies to\n'
p8171
sS'cpp_type'
p8172
S'AuxVariableName'
p8173
sS'default'
p8174
g3
sS'name'
p8175
S'variable'
p8176
sS'required'
p8177
I01
sS'group_name'
p8178
NsasS'name'
p8179
S'/AuxKernels/RichardsDensityAux'
p8180
sa(dp8181
S'description'
p8182
S'auxillary variable which is d(density)/dp\n'
p8183
sS'subblocks'
p8184
NsS'parameters'
p8185
(lp8186
(dp8187
S'description'
p8188
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8189
sS'cpp_type'
p8190
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8191
sS'default'
p8192
g3
sS'name'
p8193
S'block'
p8194
sS'required'
p8195
I00
sS'group_name'
p8196
Nsa(dp8197
S'description'
p8198
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8199
sS'cpp_type'
p8200
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8201
sS'default'
p8202
g3
sS'name'
p8203
S'boundary'
p8204
sS'required'
p8205
I00
sS'group_name'
p8206
Nsa(dp8207
S'description'
p8208
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8209
sS'cpp_type'
p8210
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8211
sS'default'
p8212
g3
sS'name'
p8213
S'control_tags'
p8214
sS'required'
p8215
I00
sS'group_name'
p8216
Nsa(dp8217
S'description'
p8218
S'Name of user object that defines the density.\n'
p8219
sS'cpp_type'
p8220
S'UserObjectName'
p8221
sS'default'
p8222
g3
sS'name'
p8223
S'density_UO'
p8224
sS'required'
p8225
I01
sS'group_name'
p8226
Nsa(dp8227
S'name'
p8228
S'execute_on'
p8229
sS'cpp_type'
p8230
S'MultiMooseEnum'
p8231
sS'default'
p8232
S'LINEAR'
p8233
sS'description'
p8234
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8235
sS'required'
p8236
I00
sS'options'
p8237
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8238
sS'group_name'
p8239
Nsa(dp8240
S'description'
p8241
S'The variable that represents the pressure\n'
p8242
sS'cpp_type'
p8243
S'std::vector<VariableName>'
p8244
sS'default'
p8245
g3
sS'name'
p8246
S'pressure_var'
p8247
sS'required'
p8248
I01
sS'group_name'
p8249
Nsa(dp8250
S'description'
p8251
S'The seed for the master random number generator\n'
p8252
sS'cpp_type'
p8253
S'unsigned int'
p8254
sS'default'
p8255
S'0'
p8256
sS'name'
p8257
S'seed'
p8258
sS'required'
p8259
I00
sS'group_name'
p8260
S'Advanced'
p8261
sa(dp8262
S'description'
p8263
g3
sS'cpp_type'
p8264
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8265
sS'default'
p8266
S'RichardsDensityPrimeAux'
p8267
sS'name'
p8268
S'type'
p8269
sS'required'
p8270
I00
sS'group_name'
p8271
Nsa(dp8272
S'description'
p8273
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8274
sS'cpp_type'
p8275
S'bool'
p8276
sS'default'
p8277
S'0'
p8278
sS'name'
p8279
S'use_displaced_mesh'
p8280
sS'required'
p8281
I00
sS'group_name'
p8282
S'Advanced'
p8283
sa(dp8284
S'description'
p8285
S'The name of the variable that this object applies to\n'
p8286
sS'cpp_type'
p8287
S'AuxVariableName'
p8288
sS'default'
p8289
g3
sS'name'
p8290
S'variable'
p8291
sS'required'
p8292
I01
sS'group_name'
p8293
NsasS'name'
p8294
S'/AuxKernels/RichardsDensityPrimeAux'
p8295
sa(dp8296
S'description'
p8297
S'auxillary variable which is d^2(density)/dp^2\n'
p8298
sS'subblocks'
p8299
NsS'parameters'
p8300
(lp8301
(dp8302
S'description'
p8303
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8304
sS'cpp_type'
p8305
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8306
sS'default'
p8307
g3
sS'name'
p8308
S'block'
p8309
sS'required'
p8310
I00
sS'group_name'
p8311
Nsa(dp8312
S'description'
p8313
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8314
sS'cpp_type'
p8315
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8316
sS'default'
p8317
g3
sS'name'
p8318
S'boundary'
p8319
sS'required'
p8320
I00
sS'group_name'
p8321
Nsa(dp8322
S'description'
p8323
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8324
sS'cpp_type'
p8325
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8326
sS'default'
p8327
g3
sS'name'
p8328
S'control_tags'
p8329
sS'required'
p8330
I00
sS'group_name'
p8331
Nsa(dp8332
S'description'
p8333
S'Name of user object that defines the density.\n'
p8334
sS'cpp_type'
p8335
S'UserObjectName'
p8336
sS'default'
p8337
g3
sS'name'
p8338
S'density_UO'
p8339
sS'required'
p8340
I01
sS'group_name'
p8341
Nsa(dp8342
S'name'
p8343
S'execute_on'
p8344
sS'cpp_type'
p8345
S'MultiMooseEnum'
p8346
sS'default'
p8347
S'LINEAR'
p8348
sS'description'
p8349
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8350
sS'required'
p8351
I00
sS'options'
p8352
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8353
sS'group_name'
p8354
Nsa(dp8355
S'description'
p8356
S'The variable that represents the pressure\n'
p8357
sS'cpp_type'
p8358
S'std::vector<VariableName>'
p8359
sS'default'
p8360
g3
sS'name'
p8361
S'pressure_var'
p8362
sS'required'
p8363
I01
sS'group_name'
p8364
Nsa(dp8365
S'description'
p8366
S'The seed for the master random number generator\n'
p8367
sS'cpp_type'
p8368
S'unsigned int'
p8369
sS'default'
p8370
S'0'
p8371
sS'name'
p8372
S'seed'
p8373
sS'required'
p8374
I00
sS'group_name'
p8375
S'Advanced'
p8376
sa(dp8377
S'description'
p8378
g3
sS'cpp_type'
p8379
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8380
sS'default'
p8381
S'RichardsDensityPrimePrimeAux'
p8382
sS'name'
p8383
S'type'
p8384
sS'required'
p8385
I00
sS'group_name'
p8386
Nsa(dp8387
S'description'
p8388
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8389
sS'cpp_type'
p8390
S'bool'
p8391
sS'default'
p8392
S'0'
p8393
sS'name'
p8394
S'use_displaced_mesh'
p8395
sS'required'
p8396
I00
sS'group_name'
p8397
S'Advanced'
p8398
sa(dp8399
S'description'
p8400
S'The name of the variable that this object applies to\n'
p8401
sS'cpp_type'
p8402
S'AuxVariableName'
p8403
sS'default'
p8404
g3
sS'name'
p8405
S'variable'
p8406
sS'required'
p8407
I01
sS'group_name'
p8408
NsasS'name'
p8409
S'/AuxKernels/RichardsDensityPrimePrimeAux'
p8410
sa(dp8411
S'description'
p8412
S'auxillary variable which is the relative permeability\n'
p8413
sS'subblocks'
p8414
NsS'parameters'
p8415
(lp8416
(dp8417
S'description'
p8418
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8419
sS'cpp_type'
p8420
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8421
sS'default'
p8422
g3
sS'name'
p8423
S'block'
p8424
sS'required'
p8425
I00
sS'group_name'
p8426
Nsa(dp8427
S'description'
p8428
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8429
sS'cpp_type'
p8430
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8431
sS'default'
p8432
g3
sS'name'
p8433
S'boundary'
p8434
sS'required'
p8435
I00
sS'group_name'
p8436
Nsa(dp8437
S'description'
p8438
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8439
sS'cpp_type'
p8440
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8441
sS'default'
p8442
g3
sS'name'
p8443
S'control_tags'
p8444
sS'required'
p8445
I00
sS'group_name'
p8446
Nsa(dp8447
S'name'
p8448
S'execute_on'
p8449
sS'cpp_type'
p8450
S'MultiMooseEnum'
p8451
sS'default'
p8452
S'LINEAR'
p8453
sS'description'
p8454
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8455
sS'required'
p8456
I00
sS'options'
p8457
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8458
sS'group_name'
p8459
Nsa(dp8460
S'description'
p8461
S'Name of user object that defines the relative permeability.\n'
p8462
sS'cpp_type'
p8463
S'UserObjectName'
p8464
sS'default'
p8465
g3
sS'name'
p8466
S'relperm_UO'
p8467
sS'required'
p8468
I01
sS'group_name'
p8469
Nsa(dp8470
S'description'
p8471
S'The seed for the master random number generator\n'
p8472
sS'cpp_type'
p8473
S'unsigned int'
p8474
sS'default'
p8475
S'0'
p8476
sS'name'
p8477
S'seed'
p8478
sS'required'
p8479
I00
sS'group_name'
p8480
S'Advanced'
p8481
sa(dp8482
S'description'
p8483
S'The variable that represents the effective saturation\n'
p8484
sS'cpp_type'
p8485
S'std::vector<VariableName>'
p8486
sS'default'
p8487
g3
sS'name'
p8488
S'seff_var'
p8489
sS'required'
p8490
I01
sS'group_name'
p8491
Nsa(dp8492
S'description'
p8493
g3
sS'cpp_type'
p8494
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8495
sS'default'
p8496
S'RichardsRelPermAux'
p8497
sS'name'
p8498
S'type'
p8499
sS'required'
p8500
I00
sS'group_name'
p8501
Nsa(dp8502
S'description'
p8503
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8504
sS'cpp_type'
p8505
S'bool'
p8506
sS'default'
p8507
S'0'
p8508
sS'name'
p8509
S'use_displaced_mesh'
p8510
sS'required'
p8511
I00
sS'group_name'
p8512
S'Advanced'
p8513
sa(dp8514
S'description'
p8515
S'The name of the variable that this object applies to\n'
p8516
sS'cpp_type'
p8517
S'AuxVariableName'
p8518
sS'default'
p8519
g3
sS'name'
p8520
S'variable'
p8521
sS'required'
p8522
I01
sS'group_name'
p8523
NsasS'name'
p8524
S'/AuxKernels/RichardsRelPermAux'
p8525
sa(dp8526
S'description'
p8527
S'auxillary variable which is d(relative permeability)/dSeff\n'
p8528
sS'subblocks'
p8529
NsS'parameters'
p8530
(lp8531
(dp8532
S'description'
p8533
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8534
sS'cpp_type'
p8535
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8536
sS'default'
p8537
g3
sS'name'
p8538
S'block'
p8539
sS'required'
p8540
I00
sS'group_name'
p8541
Nsa(dp8542
S'description'
p8543
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8544
sS'cpp_type'
p8545
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8546
sS'default'
p8547
g3
sS'name'
p8548
S'boundary'
p8549
sS'required'
p8550
I00
sS'group_name'
p8551
Nsa(dp8552
S'description'
p8553
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8554
sS'cpp_type'
p8555
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8556
sS'default'
p8557
g3
sS'name'
p8558
S'control_tags'
p8559
sS'required'
p8560
I00
sS'group_name'
p8561
Nsa(dp8562
S'name'
p8563
S'execute_on'
p8564
sS'cpp_type'
p8565
S'MultiMooseEnum'
p8566
sS'default'
p8567
S'LINEAR'
p8568
sS'description'
p8569
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8570
sS'required'
p8571
I00
sS'options'
p8572
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8573
sS'group_name'
p8574
Nsa(dp8575
S'description'
p8576
S'Name of user object that defines the relative permeability.\n'
p8577
sS'cpp_type'
p8578
S'UserObjectName'
p8579
sS'default'
p8580
g3
sS'name'
p8581
S'relperm_UO'
p8582
sS'required'
p8583
I01
sS'group_name'
p8584
Nsa(dp8585
S'description'
p8586
S'The seed for the master random number generator\n'
p8587
sS'cpp_type'
p8588
S'unsigned int'
p8589
sS'default'
p8590
S'0'
p8591
sS'name'
p8592
S'seed'
p8593
sS'required'
p8594
I00
sS'group_name'
p8595
S'Advanced'
p8596
sa(dp8597
S'description'
p8598
S'The variable that represents the effective saturation\n'
p8599
sS'cpp_type'
p8600
S'std::vector<VariableName>'
p8601
sS'default'
p8602
g3
sS'name'
p8603
S'seff_var'
p8604
sS'required'
p8605
I01
sS'group_name'
p8606
Nsa(dp8607
S'description'
p8608
g3
sS'cpp_type'
p8609
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8610
sS'default'
p8611
S'RichardsRelPermPrimeAux'
p8612
sS'name'
p8613
S'type'
p8614
sS'required'
p8615
I00
sS'group_name'
p8616
Nsa(dp8617
S'description'
p8618
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8619
sS'cpp_type'
p8620
S'bool'
p8621
sS'default'
p8622
S'0'
p8623
sS'name'
p8624
S'use_displaced_mesh'
p8625
sS'required'
p8626
I00
sS'group_name'
p8627
S'Advanced'
p8628
sa(dp8629
S'description'
p8630
S'The name of the variable that this object applies to\n'
p8631
sS'cpp_type'
p8632
S'AuxVariableName'
p8633
sS'default'
p8634
g3
sS'name'
p8635
S'variable'
p8636
sS'required'
p8637
I01
sS'group_name'
p8638
NsasS'name'
p8639
S'/AuxKernels/RichardsRelPermPrimeAux'
p8640
sa(dp8641
S'description'
p8642
S'auxillary variable which is d^2(relative permeability)/dSeff^2\n'
p8643
sS'subblocks'
p8644
NsS'parameters'
p8645
(lp8646
(dp8647
S'description'
p8648
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8649
sS'cpp_type'
p8650
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8651
sS'default'
p8652
g3
sS'name'
p8653
S'block'
p8654
sS'required'
p8655
I00
sS'group_name'
p8656
Nsa(dp8657
S'description'
p8658
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8659
sS'cpp_type'
p8660
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8661
sS'default'
p8662
g3
sS'name'
p8663
S'boundary'
p8664
sS'required'
p8665
I00
sS'group_name'
p8666
Nsa(dp8667
S'description'
p8668
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8669
sS'cpp_type'
p8670
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8671
sS'default'
p8672
g3
sS'name'
p8673
S'control_tags'
p8674
sS'required'
p8675
I00
sS'group_name'
p8676
Nsa(dp8677
S'name'
p8678
S'execute_on'
p8679
sS'cpp_type'
p8680
S'MultiMooseEnum'
p8681
sS'default'
p8682
S'LINEAR'
p8683
sS'description'
p8684
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8685
sS'required'
p8686
I00
sS'options'
p8687
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8688
sS'group_name'
p8689
Nsa(dp8690
S'description'
p8691
S'Name of user object that defines the relative permeability.\n'
p8692
sS'cpp_type'
p8693
S'UserObjectName'
p8694
sS'default'
p8695
g3
sS'name'
p8696
S'relperm_UO'
p8697
sS'required'
p8698
I01
sS'group_name'
p8699
Nsa(dp8700
S'description'
p8701
S'The seed for the master random number generator\n'
p8702
sS'cpp_type'
p8703
S'unsigned int'
p8704
sS'default'
p8705
S'0'
p8706
sS'name'
p8707
S'seed'
p8708
sS'required'
p8709
I00
sS'group_name'
p8710
S'Advanced'
p8711
sa(dp8712
S'description'
p8713
S'The variable that represents the effective saturation\n'
p8714
sS'cpp_type'
p8715
S'std::vector<VariableName>'
p8716
sS'default'
p8717
g3
sS'name'
p8718
S'seff_var'
p8719
sS'required'
p8720
I01
sS'group_name'
p8721
Nsa(dp8722
S'description'
p8723
g3
sS'cpp_type'
p8724
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8725
sS'default'
p8726
S'RichardsRelPermPrimePrimeAux'
p8727
sS'name'
p8728
S'type'
p8729
sS'required'
p8730
I00
sS'group_name'
p8731
Nsa(dp8732
S'description'
p8733
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8734
sS'cpp_type'
p8735
S'bool'
p8736
sS'default'
p8737
S'0'
p8738
sS'name'
p8739
S'use_displaced_mesh'
p8740
sS'required'
p8741
I00
sS'group_name'
p8742
S'Advanced'
p8743
sa(dp8744
S'description'
p8745
S'The name of the variable that this object applies to\n'
p8746
sS'cpp_type'
p8747
S'AuxVariableName'
p8748
sS'default'
p8749
g3
sS'name'
p8750
S'variable'
p8751
sS'required'
p8752
I01
sS'group_name'
p8753
NsasS'name'
p8754
S'/AuxKernels/RichardsRelPermPrimePrimeAux'
p8755
sa(dp8756
S'description'
p8757
S'auxillary variable which is saturation\n'
p8758
sS'subblocks'
p8759
NsS'parameters'
p8760
(lp8761
(dp8762
S'description'
p8763
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8764
sS'cpp_type'
p8765
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8766
sS'default'
p8767
g3
sS'name'
p8768
S'block'
p8769
sS'required'
p8770
I00
sS'group_name'
p8771
Nsa(dp8772
S'description'
p8773
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8774
sS'cpp_type'
p8775
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8776
sS'default'
p8777
g3
sS'name'
p8778
S'boundary'
p8779
sS'required'
p8780
I00
sS'group_name'
p8781
Nsa(dp8782
S'description'
p8783
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8784
sS'cpp_type'
p8785
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8786
sS'default'
p8787
g3
sS'name'
p8788
S'control_tags'
p8789
sS'required'
p8790
I00
sS'group_name'
p8791
Nsa(dp8792
S'name'
p8793
S'execute_on'
p8794
sS'cpp_type'
p8795
S'MultiMooseEnum'
p8796
sS'default'
p8797
S'LINEAR'
p8798
sS'description'
p8799
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8800
sS'required'
p8801
I00
sS'options'
p8802
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8803
sS'group_name'
p8804
Nsa(dp8805
S'description'
p8806
S'Name of user object that defines saturation.\n'
p8807
sS'cpp_type'
p8808
S'UserObjectName'
p8809
sS'default'
p8810
g3
sS'name'
p8811
S'sat_UO'
p8812
sS'required'
p8813
I01
sS'group_name'
p8814
Nsa(dp8815
S'description'
p8816
S'The seed for the master random number generator\n'
p8817
sS'cpp_type'
p8818
S'unsigned int'
p8819
sS'default'
p8820
S'0'
p8821
sS'name'
p8822
S'seed'
p8823
sS'required'
p8824
I00
sS'group_name'
p8825
S'Advanced'
p8826
sa(dp8827
S'description'
p8828
S'Variable that is the effective saturation\n'
p8829
sS'cpp_type'
p8830
S'std::vector<VariableName>'
p8831
sS'default'
p8832
g3
sS'name'
p8833
S'seff_var'
p8834
sS'required'
p8835
I01
sS'group_name'
p8836
Nsa(dp8837
S'description'
p8838
g3
sS'cpp_type'
p8839
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8840
sS'default'
p8841
S'RichardsSatAux'
p8842
sS'name'
p8843
S'type'
p8844
sS'required'
p8845
I00
sS'group_name'
p8846
Nsa(dp8847
S'description'
p8848
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8849
sS'cpp_type'
p8850
S'bool'
p8851
sS'default'
p8852
S'0'
p8853
sS'name'
p8854
S'use_displaced_mesh'
p8855
sS'required'
p8856
I00
sS'group_name'
p8857
S'Advanced'
p8858
sa(dp8859
S'description'
p8860
S'The name of the variable that this object applies to\n'
p8861
sS'cpp_type'
p8862
S'AuxVariableName'
p8863
sS'default'
p8864
g3
sS'name'
p8865
S'variable'
p8866
sS'required'
p8867
I01
sS'group_name'
p8868
NsasS'name'
p8869
S'/AuxKernels/RichardsSatAux'
p8870
sa(dp8871
S'description'
p8872
S'auxillary variable which is saturation\n'
p8873
sS'subblocks'
p8874
NsS'parameters'
p8875
(lp8876
(dp8877
S'description'
p8878
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8879
sS'cpp_type'
p8880
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8881
sS'default'
p8882
g3
sS'name'
p8883
S'block'
p8884
sS'required'
p8885
I00
sS'group_name'
p8886
Nsa(dp8887
S'description'
p8888
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8889
sS'cpp_type'
p8890
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8891
sS'default'
p8892
g3
sS'name'
p8893
S'boundary'
p8894
sS'required'
p8895
I00
sS'group_name'
p8896
Nsa(dp8897
S'description'
p8898
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8899
sS'cpp_type'
p8900
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p8901
sS'default'
p8902
g3
sS'name'
p8903
S'control_tags'
p8904
sS'required'
p8905
I00
sS'group_name'
p8906
Nsa(dp8907
S'name'
p8908
S'execute_on'
p8909
sS'cpp_type'
p8910
S'MultiMooseEnum'
p8911
sS'default'
p8912
S'LINEAR'
p8913
sS'description'
p8914
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8915
sS'required'
p8916
I00
sS'options'
p8917
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8918
sS'group_name'
p8919
Nsa(dp8920
S'description'
p8921
S'Name of user object that defines saturation.\n'
p8922
sS'cpp_type'
p8923
S'UserObjectName'
p8924
sS'default'
p8925
g3
sS'name'
p8926
S'sat_UO'
p8927
sS'required'
p8928
I01
sS'group_name'
p8929
Nsa(dp8930
S'description'
p8931
S'The seed for the master random number generator\n'
p8932
sS'cpp_type'
p8933
S'unsigned int'
p8934
sS'default'
p8935
S'0'
p8936
sS'name'
p8937
S'seed'
p8938
sS'required'
p8939
I00
sS'group_name'
p8940
S'Advanced'
p8941
sa(dp8942
S'description'
p8943
S'Variable that is the effective saturation\n'
p8944
sS'cpp_type'
p8945
S'std::vector<VariableName>'
p8946
sS'default'
p8947
g3
sS'name'
p8948
S'seff_var'
p8949
sS'required'
p8950
I01
sS'group_name'
p8951
Nsa(dp8952
S'description'
p8953
g3
sS'cpp_type'
p8954
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p8955
sS'default'
p8956
S'RichardsSatPrimeAux'
p8957
sS'name'
p8958
S'type'
p8959
sS'required'
p8960
I00
sS'group_name'
p8961
Nsa(dp8962
S'description'
p8963
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8964
sS'cpp_type'
p8965
S'bool'
p8966
sS'default'
p8967
S'0'
p8968
sS'name'
p8969
S'use_displaced_mesh'
p8970
sS'required'
p8971
I00
sS'group_name'
p8972
S'Advanced'
p8973
sa(dp8974
S'description'
p8975
S'The name of the variable that this object applies to\n'
p8976
sS'cpp_type'
p8977
S'AuxVariableName'
p8978
sS'default'
p8979
g3
sS'name'
p8980
S'variable'
p8981
sS'required'
p8982
I01
sS'group_name'
p8983
NsasS'name'
p8984
S'/AuxKernels/RichardsSatPrimeAux'
p8985
sa(dp8986
S'description'
p8987
S'auxillary variable which is effective saturation\n'
p8988
sS'subblocks'
p8989
NsS'parameters'
p8990
(lp8991
(dp8992
S'description'
p8993
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8994
sS'cpp_type'
p8995
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8996
sS'default'
p8997
g3
sS'name'
p8998
S'block'
p8999
sS'required'
p9000
I00
sS'group_name'
p9001
Nsa(dp9002
S'description'
p9003
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9004
sS'cpp_type'
p9005
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9006
sS'default'
p9007
g3
sS'name'
p9008
S'boundary'
p9009
sS'required'
p9010
I00
sS'group_name'
p9011
Nsa(dp9012
S'description'
p9013
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9014
sS'cpp_type'
p9015
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9016
sS'default'
p9017
g3
sS'name'
p9018
S'control_tags'
p9019
sS'required'
p9020
I00
sS'group_name'
p9021
Nsa(dp9022
S'name'
p9023
S'execute_on'
p9024
sS'cpp_type'
p9025
S'MultiMooseEnum'
p9026
sS'default'
p9027
S'LINEAR'
p9028
sS'description'
p9029
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9030
sS'required'
p9031
I00
sS'options'
p9032
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9033
sS'group_name'
p9034
Nsa(dp9035
S'description'
p9036
S'List of variables that represent the pressure\n'
p9037
sS'cpp_type'
p9038
S'std::vector<VariableName>'
p9039
sS'default'
p9040
g3
sS'name'
p9041
S'pressure_vars'
p9042
sS'required'
p9043
I01
sS'group_name'
p9044
Nsa(dp9045
S'description'
p9046
S'The seed for the master random number generator\n'
p9047
sS'cpp_type'
p9048
S'unsigned int'
p9049
sS'default'
p9050
S'0'
p9051
sS'name'
p9052
S'seed'
p9053
sS'required'
p9054
I00
sS'group_name'
p9055
S'Advanced'
p9056
sa(dp9057
S'description'
p9058
S'Name of user object that defines effective saturation.\n'
p9059
sS'cpp_type'
p9060
S'UserObjectName'
p9061
sS'default'
p9062
g3
sS'name'
p9063
S'seff_UO'
p9064
sS'required'
p9065
I01
sS'group_name'
p9066
Nsa(dp9067
S'description'
p9068
g3
sS'cpp_type'
p9069
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9070
sS'default'
p9071
S'RichardsSeffAux'
p9072
sS'name'
p9073
S'type'
p9074
sS'required'
p9075
I00
sS'group_name'
p9076
Nsa(dp9077
S'description'
p9078
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9079
sS'cpp_type'
p9080
S'bool'
p9081
sS'default'
p9082
S'0'
p9083
sS'name'
p9084
S'use_displaced_mesh'
p9085
sS'required'
p9086
I00
sS'group_name'
p9087
S'Advanced'
p9088
sa(dp9089
S'description'
p9090
S'The name of the variable that this object applies to\n'
p9091
sS'cpp_type'
p9092
S'AuxVariableName'
p9093
sS'default'
p9094
g3
sS'name'
p9095
S'variable'
p9096
sS'required'
p9097
I01
sS'group_name'
p9098
NsasS'name'
p9099
S'/AuxKernels/RichardsSeffAux'
p9100
sa(dp9101
S'description'
p9102
S'auxillary variable which is effective saturation\n'
p9103
sS'subblocks'
p9104
NsS'parameters'
p9105
(lp9106
(dp9107
S'description'
p9108
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9109
sS'cpp_type'
p9110
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9111
sS'default'
p9112
g3
sS'name'
p9113
S'block'
p9114
sS'required'
p9115
I00
sS'group_name'
p9116
Nsa(dp9117
S'description'
p9118
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9119
sS'cpp_type'
p9120
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9121
sS'default'
p9122
g3
sS'name'
p9123
S'boundary'
p9124
sS'required'
p9125
I00
sS'group_name'
p9126
Nsa(dp9127
S'description'
p9128
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9129
sS'cpp_type'
p9130
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9131
sS'default'
p9132
g3
sS'name'
p9133
S'control_tags'
p9134
sS'required'
p9135
I00
sS'group_name'
p9136
Nsa(dp9137
S'name'
p9138
S'execute_on'
p9139
sS'cpp_type'
p9140
S'MultiMooseEnum'
p9141
sS'default'
p9142
S'LINEAR'
p9143
sS'description'
p9144
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9145
sS'required'
p9146
I00
sS'options'
p9147
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9148
sS'group_name'
p9149
Nsa(dp9150
S'description'
p9151
S'List of variables that represent the pressure\n'
p9152
sS'cpp_type'
p9153
S'std::vector<VariableName>'
p9154
sS'default'
p9155
g3
sS'name'
p9156
S'pressure_vars'
p9157
sS'required'
p9158
I01
sS'group_name'
p9159
Nsa(dp9160
S'description'
p9161
S'The seed for the master random number generator\n'
p9162
sS'cpp_type'
p9163
S'unsigned int'
p9164
sS'default'
p9165
S'0'
p9166
sS'name'
p9167
S'seed'
p9168
sS'required'
p9169
I00
sS'group_name'
p9170
S'Advanced'
p9171
sa(dp9172
S'description'
p9173
S'Name of user object that defines effective saturation.\n'
p9174
sS'cpp_type'
p9175
S'UserObjectName'
p9176
sS'default'
p9177
g3
sS'name'
p9178
S'seff_UO'
p9179
sS'required'
p9180
I01
sS'group_name'
p9181
Nsa(dp9182
S'description'
p9183
g3
sS'cpp_type'
p9184
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9185
sS'default'
p9186
S'RichardsSeffPrimeAux'
p9187
sS'name'
p9188
S'type'
p9189
sS'required'
p9190
I00
sS'group_name'
p9191
Nsa(dp9192
S'description'
p9193
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9194
sS'cpp_type'
p9195
S'bool'
p9196
sS'default'
p9197
S'0'
p9198
sS'name'
p9199
S'use_displaced_mesh'
p9200
sS'required'
p9201
I00
sS'group_name'
p9202
S'Advanced'
p9203
sa(dp9204
S'description'
p9205
S'The name of the variable that this object applies to\n'
p9206
sS'cpp_type'
p9207
S'AuxVariableName'
p9208
sS'default'
p9209
g3
sS'name'
p9210
S'variable'
p9211
sS'required'
p9212
I01
sS'group_name'
p9213
Nsa(dp9214
S'description'
p9215
S'This aux kernel will return d(seff)/dP_wrtnum.  0<=wrtnum<number_of_pressure_vars.\n'
p9216
sS'cpp_type'
p9217
S'int'
p9218
sS'default'
p9219
g3
sS'name'
p9220
S'wrtnum'
p9221
sS'required'
p9222
I01
sS'group_name'
p9223
NsasS'name'
p9224
S'/AuxKernels/RichardsSeffPrimeAux'
p9225
sa(dp9226
S'description'
p9227
S'auxillary variable which is 2nd derivative of effective saturation\n'
p9228
sS'subblocks'
p9229
NsS'parameters'
p9230
(lp9231
(dp9232
S'description'
p9233
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9234
sS'cpp_type'
p9235
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9236
sS'default'
p9237
g3
sS'name'
p9238
S'block'
p9239
sS'required'
p9240
I00
sS'group_name'
p9241
Nsa(dp9242
S'description'
p9243
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9244
sS'cpp_type'
p9245
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9246
sS'default'
p9247
g3
sS'name'
p9248
S'boundary'
p9249
sS'required'
p9250
I00
sS'group_name'
p9251
Nsa(dp9252
S'description'
p9253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9254
sS'cpp_type'
p9255
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9256
sS'default'
p9257
g3
sS'name'
p9258
S'control_tags'
p9259
sS'required'
p9260
I00
sS'group_name'
p9261
Nsa(dp9262
S'name'
p9263
S'execute_on'
p9264
sS'cpp_type'
p9265
S'MultiMooseEnum'
p9266
sS'default'
p9267
S'LINEAR'
p9268
sS'description'
p9269
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9270
sS'required'
p9271
I00
sS'options'
p9272
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9273
sS'group_name'
p9274
Nsa(dp9275
S'description'
p9276
S'List of variables that represent the pressure\n'
p9277
sS'cpp_type'
p9278
S'std::vector<VariableName>'
p9279
sS'default'
p9280
g3
sS'name'
p9281
S'pressure_vars'
p9282
sS'required'
p9283
I01
sS'group_name'
p9284
Nsa(dp9285
S'description'
p9286
S'The seed for the master random number generator\n'
p9287
sS'cpp_type'
p9288
S'unsigned int'
p9289
sS'default'
p9290
S'0'
p9291
sS'name'
p9292
S'seed'
p9293
sS'required'
p9294
I00
sS'group_name'
p9295
S'Advanced'
p9296
sa(dp9297
S'description'
p9298
S'Name of user object that defines effective saturation.\n'
p9299
sS'cpp_type'
p9300
S'UserObjectName'
p9301
sS'default'
p9302
g3
sS'name'
p9303
S'seff_UO'
p9304
sS'required'
p9305
I01
sS'group_name'
p9306
Nsa(dp9307
S'description'
p9308
g3
sS'cpp_type'
p9309
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9310
sS'default'
p9311
S'RichardsSeffPrimePrimeAux'
p9312
sS'name'
p9313
S'type'
p9314
sS'required'
p9315
I00
sS'group_name'
p9316
Nsa(dp9317
S'description'
p9318
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9319
sS'cpp_type'
p9320
S'bool'
p9321
sS'default'
p9322
S'0'
p9323
sS'name'
p9324
S'use_displaced_mesh'
p9325
sS'required'
p9326
I00
sS'group_name'
p9327
S'Advanced'
p9328
sa(dp9329
S'description'
p9330
S'The name of the variable that this object applies to\n'
p9331
sS'cpp_type'
p9332
S'AuxVariableName'
p9333
sS'default'
p9334
g3
sS'name'
p9335
S'variable'
p9336
sS'required'
p9337
I01
sS'group_name'
p9338
Nsa(dp9339
S'description'
p9340
S'This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum1<number_of_pressure_vars.\n'
p9341
sS'cpp_type'
p9342
S'int'
p9343
sS'default'
p9344
g3
sS'name'
p9345
S'wrtnum1'
p9346
sS'required'
p9347
I01
sS'group_name'
p9348
Nsa(dp9349
S'description'
p9350
S'This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum2<number_of_pressure_vars.\n'
p9351
sS'cpp_type'
p9352
S'int'
p9353
sS'default'
p9354
g3
sS'name'
p9355
S'wrtnum2'
p9356
sS'required'
p9357
I01
sS'group_name'
p9358
NsasS'name'
p9359
S'/AuxKernels/RichardsSeffPrimePrimeAux'
p9360
sa(dp9361
S'description'
p9362
g3
sS'subblocks'
p9363
NsS'parameters'
p9364
(lp9365
(dp9366
S'description'
p9367
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9368
sS'cpp_type'
p9369
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9370
sS'default'
p9371
g3
sS'name'
p9372
S'block'
p9373
sS'required'
p9374
I00
sS'group_name'
p9375
Nsa(dp9376
S'description'
p9377
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9378
sS'cpp_type'
p9379
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9380
sS'default'
p9381
g3
sS'name'
p9382
S'boundary'
p9383
sS'required'
p9384
I00
sS'group_name'
p9385
Nsa(dp9386
S'description'
p9387
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9388
sS'cpp_type'
p9389
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9390
sS'default'
p9391
g3
sS'name'
p9392
S'control_tags'
p9393
sS'required'
p9394
I00
sS'group_name'
p9395
Nsa(dp9396
S'name'
p9397
S'execute_on'
p9398
sS'cpp_type'
p9399
S'MultiMooseEnum'
p9400
sS'default'
p9401
S'LINEAR'
p9402
sS'description'
p9403
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9404
sS'required'
p9405
I00
sS'options'
p9406
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9407
sS'group_name'
p9408
Nsa(dp9409
S'description'
p9410
S'The seed for the master random number generator\n'
p9411
sS'cpp_type'
p9412
S'unsigned int'
p9413
sS'default'
p9414
S'0'
p9415
sS'name'
p9416
S'seed'
p9417
sS'required'
p9418
I00
sS'group_name'
p9419
S'Advanced'
p9420
sa(dp9421
S'description'
p9422
g3
sS'cpp_type'
p9423
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9424
sS'default'
p9425
S'SelfAux'
p9426
sS'name'
p9427
S'type'
p9428
sS'required'
p9429
I00
sS'group_name'
p9430
Nsa(dp9431
S'description'
p9432
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9433
sS'cpp_type'
p9434
S'bool'
p9435
sS'default'
p9436
S'0'
p9437
sS'name'
p9438
S'use_displaced_mesh'
p9439
sS'required'
p9440
I00
sS'group_name'
p9441
S'Advanced'
p9442
sa(dp9443
S'description'
p9444
S'The name of the variable that this object applies to\n'
p9445
sS'cpp_type'
p9446
S'AuxVariableName'
p9447
sS'default'
p9448
g3
sS'name'
p9449
S'variable'
p9450
sS'required'
p9451
I01
sS'group_name'
p9452
NsasS'name'
p9453
S'/AuxKernels/SelfAux'
p9454
sa(dp9455
S'description'
p9456
g3
sS'subblocks'
p9457
NsS'parameters'
p9458
(lp9459
(dp9460
S'description'
p9461
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p9462
sS'cpp_type'
p9463
S'double'
p9464
sS'default'
p9465
S'0'
p9466
sS'name'
p9467
S'add_factor'
p9468
sS'required'
p9469
I00
sS'group_name'
p9470
Nsa(dp9471
S'description'
p9472
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9473
sS'cpp_type'
p9474
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9475
sS'default'
p9476
g3
sS'name'
p9477
S'block'
p9478
sS'required'
p9479
I00
sS'group_name'
p9480
Nsa(dp9481
S'description'
p9482
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9483
sS'cpp_type'
p9484
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9485
sS'default'
p9486
g3
sS'name'
p9487
S'boundary'
p9488
sS'required'
p9489
I00
sS'group_name'
p9490
Nsa(dp9491
S'description'
p9492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9493
sS'cpp_type'
p9494
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9495
sS'default'
p9496
g3
sS'name'
p9497
S'control_tags'
p9498
sS'required'
p9499
I00
sS'group_name'
p9500
Nsa(dp9501
S'description'
p9502
S'If true the meshes must be the same and then the values are simply copied over.\n'
p9503
sS'cpp_type'
p9504
S'bool'
p9505
sS'default'
p9506
S'0'
p9507
sS'name'
p9508
S'direct'
p9509
sS'required'
p9510
I00
sS'group_name'
p9511
Nsa(dp9512
S'name'
p9513
S'execute_on'
p9514
sS'cpp_type'
p9515
S'MultiMooseEnum'
p9516
sS'default'
p9517
S'LINEAR'
p9518
sS'description'
p9519
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9520
sS'required'
p9521
I00
sS'options'
p9522
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9523
sS'group_name'
p9524
Nsa(dp9525
S'description'
p9526
S'The name of the variable to extract from the file\n'
p9527
sS'cpp_type'
p9528
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9529
sS'default'
p9530
g3
sS'name'
p9531
S'from_variable'
p9532
sS'required'
p9533
I00
sS'group_name'
p9534
Nsa(dp9535
S'description'
p9536
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p9537
sS'cpp_type'
p9538
S'double'
p9539
sS'default'
p9540
S'1'
p9541
sS'name'
p9542
S'scale_factor'
p9543
sS'required'
p9544
I00
sS'group_name'
p9545
Nsa(dp9546
S'description'
p9547
S'The seed for the master random number generator\n'
p9548
sS'cpp_type'
p9549
S'unsigned int'
p9550
sS'default'
p9551
S'0'
p9552
sS'name'
p9553
S'seed'
p9554
sS'required'
p9555
I00
sS'group_name'
p9556
S'Advanced'
p9557
sa(dp9558
S'description'
p9559
S'The name of the SolutionUserObject\n'
p9560
sS'cpp_type'
p9561
S'UserObjectName'
p9562
sS'default'
p9563
g3
sS'name'
p9564
S'solution'
p9565
sS'required'
p9566
I01
sS'group_name'
p9567
Nsa(dp9568
S'description'
p9569
g3
sS'cpp_type'
p9570
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9571
sS'default'
p9572
S'SolutionAux'
p9573
sS'name'
p9574
S'type'
p9575
sS'required'
p9576
I00
sS'group_name'
p9577
Nsa(dp9578
S'description'
p9579
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9580
sS'cpp_type'
p9581
S'bool'
p9582
sS'default'
p9583
S'0'
p9584
sS'name'
p9585
S'use_displaced_mesh'
p9586
sS'required'
p9587
I00
sS'group_name'
p9588
S'Advanced'
p9589
sa(dp9590
S'description'
p9591
S'The name of the variable that this object applies to\n'
p9592
sS'cpp_type'
p9593
S'AuxVariableName'
p9594
sS'default'
p9595
g3
sS'name'
p9596
S'variable'
p9597
sS'required'
p9598
I01
sS'group_name'
p9599
NsasS'name'
p9600
S'/AuxKernels/SolutionAux'
p9601
sa(dp9602
S'description'
p9603
g3
sS'subblocks'
p9604
NsS'parameters'
p9605
(lp9606
(dp9607
S'description'
p9608
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9609
sS'cpp_type'
p9610
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9611
sS'default'
p9612
g3
sS'name'
p9613
S'block'
p9614
sS'required'
p9615
I00
sS'group_name'
p9616
Nsa(dp9617
S'description'
p9618
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9619
sS'cpp_type'
p9620
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9621
sS'default'
p9622
g3
sS'name'
p9623
S'boundary'
p9624
sS'required'
p9625
I00
sS'group_name'
p9626
Nsa(dp9627
S'description'
p9628
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9629
sS'cpp_type'
p9630
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9631
sS'default'
p9632
g3
sS'name'
p9633
S'control_tags'
p9634
sS'required'
p9635
I00
sS'group_name'
p9636
Nsa(dp9637
S'name'
p9638
S'execute_on'
p9639
sS'cpp_type'
p9640
S'MultiMooseEnum'
p9641
sS'default'
p9642
S'LINEAR'
p9643
sS'description'
p9644
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9645
sS'required'
p9646
I00
sS'options'
p9647
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9648
sS'group_name'
p9649
Nsa(dp9650
S'description'
p9651
S'The seed for the master random number generator\n'
p9652
sS'cpp_type'
p9653
S'unsigned int'
p9654
sS'default'
p9655
S'0'
p9656
sS'name'
p9657
S'seed'
p9658
sS'required'
p9659
I00
sS'group_name'
p9660
S'Advanced'
p9661
sa(dp9662
S'description'
p9663
g3
sS'cpp_type'
p9664
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9665
sS'default'
p9666
S'SpatialUserObjectAux'
p9667
sS'name'
p9668
S'type'
p9669
sS'required'
p9670
I00
sS'group_name'
p9671
Nsa(dp9672
S'description'
p9673
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9674
sS'cpp_type'
p9675
S'bool'
p9676
sS'default'
p9677
S'0'
p9678
sS'name'
p9679
S'use_displaced_mesh'
p9680
sS'required'
p9681
I00
sS'group_name'
p9682
S'Advanced'
p9683
sa(dp9684
S'description'
p9685
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p9686
sS'cpp_type'
p9687
S'UserObjectName'
p9688
sS'default'
p9689
g3
sS'name'
p9690
S'user_object'
p9691
sS'required'
p9692
I01
sS'group_name'
p9693
Nsa(dp9694
S'description'
p9695
S'The name of the variable that this object applies to\n'
p9696
sS'cpp_type'
p9697
S'AuxVariableName'
p9698
sS'default'
p9699
g3
sS'name'
p9700
S'variable'
p9701
sS'required'
p9702
I01
sS'group_name'
p9703
NsasS'name'
p9704
S'/AuxKernels/SpatialUserObjectAux'
p9705
sa(dp9706
S'description'
p9707
S'Compute the local elastic energy\n'
p9708
sS'subblocks'
p9709
NsS'parameters'
p9710
(lp9711
(dp9712
S'description'
p9713
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9714
sS'cpp_type'
p9715
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9716
sS'default'
p9717
g3
sS'name'
p9718
S'block'
p9719
sS'required'
p9720
I00
sS'group_name'
p9721
Nsa(dp9722
S'description'
p9723
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9724
sS'cpp_type'
p9725
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9726
sS'default'
p9727
g3
sS'name'
p9728
S'boundary'
p9729
sS'required'
p9730
I00
sS'group_name'
p9731
Nsa(dp9732
S'description'
p9733
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9734
sS'cpp_type'
p9735
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9736
sS'default'
p9737
g3
sS'name'
p9738
S'control_tags'
p9739
sS'required'
p9740
I00
sS'group_name'
p9741
Nsa(dp9742
S'name'
p9743
S'execute_on'
p9744
sS'cpp_type'
p9745
S'MultiMooseEnum'
p9746
sS'default'
p9747
S'LINEAR'
p9748
sS'description'
p9749
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9750
sS'required'
p9751
I00
sS'options'
p9752
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9753
sS'group_name'
p9754
Nsa(dp9755
S'description'
p9756
S'The seed for the master random number generator\n'
p9757
sS'cpp_type'
p9758
S'unsigned int'
p9759
sS'default'
p9760
S'0'
p9761
sS'name'
p9762
S'seed'
p9763
sS'required'
p9764
I00
sS'group_name'
p9765
S'Advanced'
p9766
sa(dp9767
S'description'
p9768
g3
sS'cpp_type'
p9769
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9770
sS'default'
p9771
S'TensorElasticEnergyAux'
p9772
sS'name'
p9773
S'type'
p9774
sS'required'
p9775
I00
sS'group_name'
p9776
Nsa(dp9777
S'description'
p9778
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9779
sS'cpp_type'
p9780
S'bool'
p9781
sS'default'
p9782
S'0'
p9783
sS'name'
p9784
S'use_displaced_mesh'
p9785
sS'required'
p9786
I00
sS'group_name'
p9787
S'Advanced'
p9788
sa(dp9789
S'description'
p9790
S'The name of the variable that this object applies to\n'
p9791
sS'cpp_type'
p9792
S'AuxVariableName'
p9793
sS'default'
p9794
g3
sS'name'
p9795
S'variable'
p9796
sS'required'
p9797
I01
sS'group_name'
p9798
NsasS'name'
p9799
S'/AuxKernels/TensorElasticEnergyAux'
p9800
sa(dp9801
S'description'
p9802
g3
sS'subblocks'
p9803
NsS'parameters'
p9804
(lp9805
(dp9806
S'description'
p9807
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9808
sS'cpp_type'
p9809
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9810
sS'default'
p9811
g3
sS'name'
p9812
S'block'
p9813
sS'required'
p9814
I00
sS'group_name'
p9815
Nsa(dp9816
S'description'
p9817
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9818
sS'cpp_type'
p9819
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9820
sS'default'
p9821
g3
sS'name'
p9822
S'boundary'
p9823
sS'required'
p9824
I00
sS'group_name'
p9825
Nsa(dp9826
S'description'
p9827
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9828
sS'cpp_type'
p9829
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9830
sS'default'
p9831
g3
sS'name'
p9832
S'control_tags'
p9833
sS'required'
p9834
I00
sS'group_name'
p9835
Nsa(dp9836
S'name'
p9837
S'data_name'
p9838
sS'cpp_type'
p9839
S'MooseEnum'
p9840
sS'default'
p9841
g3
sS'description'
p9842
S'The data to be extracted from the EBSD data by this AuxKernel\n'
p9843
sS'required'
p9844
I01
sS'options'
p9845
S'phi1 phi phi2 grain phase symmetry op'
p9846
sS'group_name'
p9847
Nsa(dp9848
S'description'
p9849
S'The EBSDReader GeneralUserObject\n'
p9850
sS'cpp_type'
p9851
S'UserObjectName'
p9852
sS'default'
p9853
g3
sS'name'
p9854
S'ebsd_reader'
p9855
sS'required'
p9856
I01
sS'group_name'
p9857
Nsa(dp9858
S'name'
p9859
S'execute_on'
p9860
sS'cpp_type'
p9861
S'MultiMooseEnum'
p9862
sS'default'
p9863
S'LINEAR'
p9864
sS'description'
p9865
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9866
sS'required'
p9867
I00
sS'options'
p9868
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9869
sS'group_name'
p9870
Nsa(dp9871
S'description'
p9872
S'The seed for the master random number generator\n'
p9873
sS'cpp_type'
p9874
S'unsigned int'
p9875
sS'default'
p9876
S'0'
p9877
sS'name'
p9878
S'seed'
p9879
sS'required'
p9880
I00
sS'group_name'
p9881
S'Advanced'
p9882
sa(dp9883
S'description'
p9884
g3
sS'cpp_type'
p9885
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p9886
sS'default'
p9887
S'TestEBSDAux'
p9888
sS'name'
p9889
S'type'
p9890
sS'required'
p9891
I00
sS'group_name'
p9892
Nsa(dp9893
S'description'
p9894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9895
sS'cpp_type'
p9896
S'bool'
p9897
sS'default'
p9898
S'0'
p9899
sS'name'
p9900
S'use_displaced_mesh'
p9901
sS'required'
p9902
I00
sS'group_name'
p9903
S'Advanced'
p9904
sa(dp9905
S'description'
p9906
S'The name of the variable that this object applies to\n'
p9907
sS'cpp_type'
p9908
S'AuxVariableName'
p9909
sS'default'
p9910
g3
sS'name'
p9911
S'variable'
p9912
sS'required'
p9913
I01
sS'group_name'
p9914
NsasS'name'
p9915
S'/AuxKernels/TestEBSDAux'
p9916
sa(dp9917
S'description'
p9918
S'Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n'
p9919
sS'subblocks'
p9920
NsS'parameters'
p9921
(lp9922
(dp9923
S'description'
p9924
S'Coupled variable holding additional free energy contributions to be summed up\n'
p9925
sS'cpp_type'
p9926
S'std::vector<VariableName>'
p9927
sS'default'
p9928
S'0'
p9929
sS'name'
p9930
S'additional_free_energy'
p9931
sS'required'
p9932
I00
sS'group_name'
p9933
Nsa(dp9934
S'description'
p9935
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9936
sS'cpp_type'
p9937
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9938
sS'default'
p9939
g3
sS'name'
p9940
S'block'
p9941
sS'required'
p9942
I00
sS'group_name'
p9943
Nsa(dp9944
S'description'
p9945
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9946
sS'cpp_type'
p9947
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9948
sS'default'
p9949
g3
sS'name'
p9950
S'boundary'
p9951
sS'required'
p9952
I00
sS'group_name'
p9953
Nsa(dp9954
S'description'
p9955
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9956
sS'cpp_type'
p9957
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p9958
sS'default'
p9959
g3
sS'name'
p9960
S'control_tags'
p9961
sS'required'
p9962
I00
sS'group_name'
p9963
Nsa(dp9964
S'name'
p9965
S'execute_on'
p9966
sS'cpp_type'
p9967
S'MultiMooseEnum'
p9968
sS'default'
p9969
S'LINEAR'
p9970
sS'description'
p9971
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9972
sS'required'
p9973
I00
sS'options'
p9974
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9975
sS'group_name'
p9976
Nsa(dp9977
S'description'
p9978
S'Base name of the free energy function\n'
p9979
sS'cpp_type'
p9980
S'MaterialPropertyName'
p9981
sS'default'
p9982
S'F'
p9983
sS'name'
p9984
S'f_name'
p9985
sS'required'
p9986
I00
sS'group_name'
p9987
Nsa(dp9988
S'description'
p9989
S'Variable names that contribute to interfacial energy\n'
p9990
sS'cpp_type'
p9991
S'std::vector<VariableName>'
p9992
sS'default'
p9993
g3
sS'name'
p9994
S'interfacial_vars'
p9995
sS'required'
p9996
I00
sS'group_name'
p9997
Nsa(dp9998
S'description'
p9999
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p10000
sS'cpp_type'
p10001
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10002
sS'default'
p10003
g3
sS'name'
p10004
S'kappa_names'
p10005
sS'required'
p10006
I00
sS'group_name'
p10007
Nsa(dp10008
S'description'
p10009
S'The seed for the master random number generator\n'
p10010
sS'cpp_type'
p10011
S'unsigned int'
p10012
sS'default'
p10013
S'0'
p10014
sS'name'
p10015
S'seed'
p10016
sS'required'
p10017
I00
sS'group_name'
p10018
S'Advanced'
p10019
sa(dp10020
S'description'
p10021
g3
sS'cpp_type'
p10022
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10023
sS'default'
p10024
S'TotalFreeEnergy'
p10025
sS'name'
p10026
S'type'
p10027
sS'required'
p10028
I00
sS'group_name'
p10029
Nsa(dp10030
S'description'
p10031
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10032
sS'cpp_type'
p10033
S'bool'
p10034
sS'default'
p10035
S'0'
p10036
sS'name'
p10037
S'use_displaced_mesh'
p10038
sS'required'
p10039
I00
sS'group_name'
p10040
S'Advanced'
p10041
sa(dp10042
S'description'
p10043
S'The name of the variable that this object applies to\n'
p10044
sS'cpp_type'
p10045
S'AuxVariableName'
p10046
sS'default'
p10047
g3
sS'name'
p10048
S'variable'
p10049
sS'required'
p10050
I01
sS'group_name'
p10051
NsasS'name'
p10052
S'/AuxKernels/TotalFreeEnergy'
p10053
sa(dp10054
S'description'
p10055
g3
sS'subblocks'
p10056
NsS'parameters'
p10057
(lp10058
(dp10059
S'description'
p10060
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10061
sS'cpp_type'
p10062
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10063
sS'default'
p10064
g3
sS'name'
p10065
S'block'
p10066
sS'required'
p10067
I00
sS'group_name'
p10068
Nsa(dp10069
S'description'
p10070
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10071
sS'cpp_type'
p10072
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10073
sS'default'
p10074
g3
sS'name'
p10075
S'boundary'
p10076
sS'required'
p10077
I00
sS'group_name'
p10078
Nsa(dp10079
S'name'
p10080
S'component'
p10081
sS'cpp_type'
p10082
S'MooseEnum'
p10083
sS'default'
p10084
g3
sS'description'
p10085
S'The gradient component to compute\n'
p10086
sS'required'
p10087
I00
sS'options'
p10088
S'x y z'
p10089
sS'group_name'
p10090
Nsa(dp10091
S'description'
p10092
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10093
sS'cpp_type'
p10094
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10095
sS'default'
p10096
g3
sS'name'
p10097
S'control_tags'
p10098
sS'required'
p10099
I00
sS'group_name'
p10100
Nsa(dp10101
S'name'
p10102
S'execute_on'
p10103
sS'cpp_type'
p10104
S'MultiMooseEnum'
p10105
sS'default'
p10106
S'LINEAR'
p10107
sS'description'
p10108
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10109
sS'required'
p10110
I00
sS'options'
p10111
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10112
sS'group_name'
p10113
Nsa(dp10114
S'description'
p10115
S'The variable from which to compute the gradient component\n'
p10116
sS'cpp_type'
p10117
S'std::vector<VariableName>'
p10118
sS'default'
p10119
g3
sS'name'
p10120
S'gradient_variable'
p10121
sS'required'
p10122
I01
sS'group_name'
p10123
Nsa(dp10124
S'description'
p10125
S'The seed for the master random number generator\n'
p10126
sS'cpp_type'
p10127
S'unsigned int'
p10128
sS'default'
p10129
S'0'
p10130
sS'name'
p10131
S'seed'
p10132
sS'required'
p10133
I00
sS'group_name'
p10134
S'Advanced'
p10135
sa(dp10136
S'description'
p10137
g3
sS'cpp_type'
p10138
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10139
sS'default'
p10140
S'VariableGradientComponent'
p10141
sS'name'
p10142
S'type'
p10143
sS'required'
p10144
I00
sS'group_name'
p10145
Nsa(dp10146
S'description'
p10147
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10148
sS'cpp_type'
p10149
S'bool'
p10150
sS'default'
p10151
S'0'
p10152
sS'name'
p10153
S'use_displaced_mesh'
p10154
sS'required'
p10155
I00
sS'group_name'
p10156
S'Advanced'
p10157
sa(dp10158
S'description'
p10159
S'The name of the variable that this object applies to\n'
p10160
sS'cpp_type'
p10161
S'AuxVariableName'
p10162
sS'default'
p10163
g3
sS'name'
p10164
S'variable'
p10165
sS'required'
p10166
I01
sS'group_name'
p10167
NsasS'name'
p10168
S'/AuxKernels/VariableGradientComponent'
p10169
sa(dp10170
S'description'
p10171
g3
sS'subblocks'
p10172
NsS'parameters'
p10173
(lp10174
(dp10175
S'description'
p10176
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10177
sS'cpp_type'
p10178
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10179
sS'default'
p10180
g3
sS'name'
p10181
S'block'
p10182
sS'required'
p10183
I00
sS'group_name'
p10184
Nsa(dp10185
S'description'
p10186
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10187
sS'cpp_type'
p10188
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10189
sS'default'
p10190
g3
sS'name'
p10191
S'boundary'
p10192
sS'required'
p10193
I00
sS'group_name'
p10194
Nsa(dp10195
S'description'
p10196
S'A simple coefficient\n'
p10197
sS'cpp_type'
p10198
S'double'
p10199
sS'default'
p10200
S'1'
p10201
sS'name'
p10202
S'coefficient'
p10203
sS'required'
p10204
I00
sS'group_name'
p10205
Nsa(dp10206
S'description'
p10207
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10208
sS'cpp_type'
p10209
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10210
sS'default'
p10211
g3
sS'name'
p10212
S'control_tags'
p10213
sS'required'
p10214
I00
sS'group_name'
p10215
Nsa(dp10216
S'name'
p10217
S'execute_on'
p10218
sS'cpp_type'
p10219
S'MultiMooseEnum'
p10220
sS'default'
p10221
S'LINEAR'
p10222
sS'description'
p10223
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10224
sS'required'
p10225
I00
sS'options'
p10226
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10227
sS'group_name'
p10228
Nsa(dp10229
S'description'
p10230
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p10231
sS'cpp_type'
p10232
S'unsigned int'
p10233
sS'default'
p10234
S'2'
p10235
sS'name'
p10236
S'order'
p10237
sS'required'
p10238
I00
sS'group_name'
p10239
Nsa(dp10240
S'description'
p10241
S'The seed for the master random number generator\n'
p10242
sS'cpp_type'
p10243
S'unsigned int'
p10244
sS'default'
p10245
S'0'
p10246
sS'name'
p10247
S'seed'
p10248
sS'required'
p10249
I00
sS'group_name'
p10250
S'Advanced'
p10251
sa(dp10252
S'description'
p10253
g3
sS'cpp_type'
p10254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10255
sS'default'
p10256
S'VariableTimeIntegrationAux'
p10257
sS'name'
p10258
S'type'
p10259
sS'required'
p10260
I00
sS'group_name'
p10261
Nsa(dp10262
S'description'
p10263
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10264
sS'cpp_type'
p10265
S'bool'
p10266
sS'default'
p10267
S'0'
p10268
sS'name'
p10269
S'use_displaced_mesh'
p10270
sS'required'
p10271
I00
sS'group_name'
p10272
S'Advanced'
p10273
sa(dp10274
S'description'
p10275
S'The name of the variable that this object applies to\n'
p10276
sS'cpp_type'
p10277
S'AuxVariableName'
p10278
sS'default'
p10279
g3
sS'name'
p10280
S'variable'
p10281
sS'required'
p10282
I01
sS'group_name'
p10283
Nsa(dp10284
S'description'
p10285
S'The variable to be integrated\n'
p10286
sS'cpp_type'
p10287
S'std::vector<VariableName>'
p10288
sS'default'
p10289
g3
sS'name'
p10290
S'variable_to_integrate'
p10291
sS'required'
p10292
I01
sS'group_name'
p10293
NsasS'name'
p10294
S'/AuxKernels/VariableTimeIntegrationAux'
p10295
sa(dp10296
S'description'
p10297
g3
sS'subblocks'
p10298
NsS'parameters'
p10299
(lp10300
(dp10301
S'description'
p10302
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10303
sS'cpp_type'
p10304
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10305
sS'default'
p10306
g3
sS'name'
p10307
S'block'
p10308
sS'required'
p10309
I00
sS'group_name'
p10310
Nsa(dp10311
S'description'
p10312
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10313
sS'cpp_type'
p10314
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10315
sS'default'
p10316
g3
sS'name'
p10317
S'boundary'
p10318
sS'required'
p10319
I00
sS'group_name'
p10320
Nsa(dp10321
S'description'
p10322
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10323
sS'cpp_type'
p10324
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10325
sS'default'
p10326
g3
sS'name'
p10327
S'control_tags'
p10328
sS'required'
p10329
I00
sS'group_name'
p10330
Nsa(dp10331
S'name'
p10332
S'execute_on'
p10333
sS'cpp_type'
p10334
S'MultiMooseEnum'
p10335
sS'default'
p10336
S'LINEAR'
p10337
sS'description'
p10338
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10339
sS'required'
p10340
I00
sS'options'
p10341
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10342
sS'group_name'
p10343
Nsa(dp10344
S'description'
p10345
S'The seed for the master random number generator\n'
p10346
sS'cpp_type'
p10347
S'unsigned int'
p10348
sS'default'
p10349
S'0'
p10350
sS'name'
p10351
S'seed'
p10352
sS'required'
p10353
I00
sS'group_name'
p10354
S'Advanced'
p10355
sa(dp10356
S'description'
p10357
g3
sS'cpp_type'
p10358
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10359
sS'default'
p10360
S'VectorMagnitudeAux'
p10361
sS'name'
p10362
S'type'
p10363
sS'required'
p10364
I00
sS'group_name'
p10365
Nsa(dp10366
S'description'
p10367
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10368
sS'cpp_type'
p10369
S'bool'
p10370
sS'default'
p10371
S'0'
p10372
sS'name'
p10373
S'use_displaced_mesh'
p10374
sS'required'
p10375
I00
sS'group_name'
p10376
S'Advanced'
p10377
sa(dp10378
S'description'
p10379
S'The name of the variable that this object applies to\n'
p10380
sS'cpp_type'
p10381
S'AuxVariableName'
p10382
sS'default'
p10383
g3
sS'name'
p10384
S'variable'
p10385
sS'required'
p10386
I01
sS'group_name'
p10387
Nsa(dp10388
S'description'
p10389
S'x-component of the vector\n'
p10390
sS'cpp_type'
p10391
S'std::vector<VariableName>'
p10392
sS'default'
p10393
g3
sS'name'
p10394
S'x'
p10395
sS'required'
p10396
I01
sS'group_name'
p10397
Nsa(dp10398
S'description'
p10399
S'y-component of the vector\n'
p10400
sS'cpp_type'
p10401
S'std::vector<VariableName>'
p10402
sS'default'
p10403
g3
sS'name'
p10404
S'y'
p10405
sS'required'
p10406
I00
sS'group_name'
p10407
Nsa(dp10408
S'description'
p10409
S'z-component of the vector\n'
p10410
sS'cpp_type'
p10411
S'std::vector<VariableName>'
p10412
sS'default'
p10413
g3
sS'name'
p10414
S'z'
p10415
sS'required'
p10416
I00
sS'group_name'
p10417
NsasS'name'
p10418
S'/AuxKernels/VectorMagnitudeAux'
p10419
sasS'parameters'
p10420
NsS'name'
p10421
S'/AuxKernels'
p10422
sa(dp10423
S'description'
p10424
g3
sS'subblocks'
p10425
(lp10426
(dp10427
S'description'
p10428
g3
sS'subblocks'
p10429
NsS'parameters'
p10430
(lp10431
(dp10432
S'description'
p10433
S'A string representing the Moose Object that will be built by this Action\n'
p10434
sS'cpp_type'
p10435
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10436
sS'default'
p10437
g3
sS'name'
p10438
S'type'
p10439
sS'required'
p10440
I01
sS'group_name'
p10441
NsasS'name'
p10442
S'/AuxScalarKernels/*'
p10443
sa(dp10444
S'description'
p10445
g3
sS'subblocks'
p10446
NsS'parameters'
p10447
(lp10448
(dp10449
S'description'
p10450
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10451
sS'cpp_type'
p10452
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10453
sS'default'
p10454
g3
sS'name'
p10455
S'control_tags'
p10456
sS'required'
p10457
I00
sS'group_name'
p10458
Nsa(dp10459
S'name'
p10460
S'execute_on'
p10461
sS'cpp_type'
p10462
S'MultiMooseEnum'
p10463
sS'default'
p10464
S'LINEAR'
p10465
sS'description'
p10466
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10467
sS'required'
p10468
I00
sS'options'
p10469
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10470
sS'group_name'
p10471
Nsa(dp10472
S'description'
p10473
g3
sS'cpp_type'
p10474
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10475
sS'default'
p10476
S'ConstantScalarAux'
p10477
sS'name'
p10478
S'type'
p10479
sS'required'
p10480
I00
sS'group_name'
p10481
Nsa(dp10482
S'description'
p10483
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10484
sS'cpp_type'
p10485
S'bool'
p10486
sS'default'
p10487
S'0'
p10488
sS'name'
p10489
S'use_displaced_mesh'
p10490
sS'required'
p10491
I00
sS'group_name'
p10492
S'Advanced'
p10493
sa(dp10494
S'description'
p10495
S'The value to be set to the scalar variable.\n'
p10496
sS'cpp_type'
p10497
S'double'
p10498
sS'default'
p10499
g3
sS'name'
p10500
S'value'
p10501
sS'required'
p10502
I01
sS'group_name'
p10503
Nsa(dp10504
S'description'
p10505
S'The name of the variable that this kernel operates on\n'
p10506
sS'cpp_type'
p10507
S'AuxVariableName'
p10508
sS'default'
p10509
g3
sS'name'
p10510
S'variable'
p10511
sS'required'
p10512
I01
sS'group_name'
p10513
NsasS'name'
p10514
S'/AuxScalarKernels/ConstantScalarAux'
p10515
sa(dp10516
S'description'
p10517
g3
sS'subblocks'
p10518
NsS'parameters'
p10519
(lp10520
(dp10521
S'description'
p10522
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10523
sS'cpp_type'
p10524
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10525
sS'default'
p10526
g3
sS'name'
p10527
S'control_tags'
p10528
sS'required'
p10529
I00
sS'group_name'
p10530
Nsa(dp10531
S'name'
p10532
S'execute_on'
p10533
sS'cpp_type'
p10534
S'MultiMooseEnum'
p10535
sS'default'
p10536
S'LINEAR'
p10537
sS'description'
p10538
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10539
sS'required'
p10540
I00
sS'options'
p10541
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10542
sS'group_name'
p10543
Nsa(dp10544
S'description'
p10545
S'The function to set the scalar variable value.\n'
p10546
sS'cpp_type'
p10547
S'FunctionName'
p10548
sS'default'
p10549
g3
sS'name'
p10550
S'function'
p10551
sS'required'
p10552
I01
sS'group_name'
p10553
Nsa(dp10554
S'description'
p10555
g3
sS'cpp_type'
p10556
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10557
sS'default'
p10558
S'FunctionScalarAux'
p10559
sS'name'
p10560
S'type'
p10561
sS'required'
p10562
I00
sS'group_name'
p10563
Nsa(dp10564
S'description'
p10565
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10566
sS'cpp_type'
p10567
S'bool'
p10568
sS'default'
p10569
S'0'
p10570
sS'name'
p10571
S'use_displaced_mesh'
p10572
sS'required'
p10573
I00
sS'group_name'
p10574
S'Advanced'
p10575
sa(dp10576
S'description'
p10577
S'The name of the variable that this kernel operates on\n'
p10578
sS'cpp_type'
p10579
S'AuxVariableName'
p10580
sS'default'
p10581
g3
sS'name'
p10582
S'variable'
p10583
sS'required'
p10584
I01
sS'group_name'
p10585
NsasS'name'
p10586
S'/AuxScalarKernels/FunctionScalarAux'
p10587
sa(dp10588
S'description'
p10589
g3
sS'subblocks'
p10590
NsS'parameters'
p10591
(lp10592
(dp10593
S'description'
p10594
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10595
sS'cpp_type'
p10596
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10597
sS'default'
p10598
g3
sS'name'
p10599
S'control_tags'
p10600
sS'required'
p10601
I00
sS'group_name'
p10602
Nsa(dp10603
S'description'
p10604
S'The downstairs of the quotient variable\n'
p10605
sS'cpp_type'
p10606
S'std::vector<VariableName>'
p10607
sS'default'
p10608
g3
sS'name'
p10609
S'denominator'
p10610
sS'required'
p10611
I00
sS'group_name'
p10612
Nsa(dp10613
S'name'
p10614
S'execute_on'
p10615
sS'cpp_type'
p10616
S'MultiMooseEnum'
p10617
sS'default'
p10618
S'LINEAR'
p10619
sS'description'
p10620
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10621
sS'required'
p10622
I00
sS'options'
p10623
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10624
sS'group_name'
p10625
Nsa(dp10626
S'description'
p10627
S'The upstairs of the quotient variable\n'
p10628
sS'cpp_type'
p10629
S'std::vector<VariableName>'
p10630
sS'default'
p10631
g3
sS'name'
p10632
S'numerator'
p10633
sS'required'
p10634
I00
sS'group_name'
p10635
Nsa(dp10636
S'description'
p10637
g3
sS'cpp_type'
p10638
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10639
sS'default'
p10640
S'QuotientScalarAux'
p10641
sS'name'
p10642
S'type'
p10643
sS'required'
p10644
I00
sS'group_name'
p10645
Nsa(dp10646
S'description'
p10647
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10648
sS'cpp_type'
p10649
S'bool'
p10650
sS'default'
p10651
S'0'
p10652
sS'name'
p10653
S'use_displaced_mesh'
p10654
sS'required'
p10655
I00
sS'group_name'
p10656
S'Advanced'
p10657
sa(dp10658
S'description'
p10659
S'The name of the variable that this kernel operates on\n'
p10660
sS'cpp_type'
p10661
S'AuxVariableName'
p10662
sS'default'
p10663
g3
sS'name'
p10664
S'variable'
p10665
sS'required'
p10666
I01
sS'group_name'
p10667
NsasS'name'
p10668
S'/AuxScalarKernels/QuotientScalarAux'
p10669
sasS'parameters'
p10670
NsS'name'
p10671
S'/AuxScalarKernels'
p10672
sa(dp10673
S'description'
p10674
g3
sS'subblocks'
p10675
(lp10676
(dp10677
S'description'
p10678
g3
sS'subblocks'
p10679
(lp10680
(dp10681
S'description'
p10682
g3
sS'subblocks'
p10683
(lp10684
(dp10685
S'description'
p10686
g3
sS'subblocks'
p10687
(lp10688
(dp10689
S'description'
p10690
g3
sS'subblocks'
p10691
NsS'parameters'
p10692
(lp10693
(dp10694
S'description'
p10695
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10696
sS'cpp_type'
p10697
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10698
sS'default'
p10699
g3
sS'name'
p10700
S'block'
p10701
sS'required'
p10702
I00
sS'group_name'
p10703
Nsa(dp10704
S'description'
p10705
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10706
sS'cpp_type'
p10707
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10708
sS'default'
p10709
g3
sS'name'
p10710
S'boundary'
p10711
sS'required'
p10712
I00
sS'group_name'
p10713
Nsa(dp10714
S'description'
p10715
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10716
sS'cpp_type'
p10717
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10718
sS'default'
p10719
g3
sS'name'
p10720
S'control_tags'
p10721
sS'required'
p10722
I00
sS'group_name'
p10723
Nsa(dp10724
S'description'
p10725
S'The value of the variable inside the box\n'
p10726
sS'cpp_type'
p10727
S'double'
p10728
sS'default'
p10729
S'0'
p10730
sS'name'
p10731
S'inside'
p10732
sS'required'
p10733
I00
sS'group_name'
p10734
Nsa(dp10735
S'description'
p10736
S'The value of the variable outside the box\n'
p10737
sS'cpp_type'
p10738
S'double'
p10739
sS'default'
p10740
S'0'
p10741
sS'name'
p10742
S'outside'
p10743
sS'required'
p10744
I00
sS'group_name'
p10745
Nsa(dp10746
S'description'
p10747
g3
sS'cpp_type'
p10748
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10749
sS'default'
p10750
S'BoundingBoxIC'
p10751
sS'name'
p10752
S'type'
p10753
sS'required'
p10754
I00
sS'group_name'
p10755
Nsa(dp10756
S'description'
p10757
S'The variable this initial condition is supposed to provide values for.\n'
p10758
sS'cpp_type'
p10759
S'VariableName'
p10760
sS'default'
p10761
g3
sS'name'
p10762
S'variable'
p10763
sS'required'
p10764
I01
sS'group_name'
p10765
Nsa(dp10766
S'description'
p10767
S'The x coordinate of the lower left-hand corner of the box\n'
p10768
sS'cpp_type'
p10769
S'double'
p10770
sS'default'
p10771
g3
sS'name'
p10772
S'x1'
p10773
sS'required'
p10774
I01
sS'group_name'
p10775
Nsa(dp10776
S'description'
p10777
S'The x coordinate of the upper right-hand corner of the box\n'
p10778
sS'cpp_type'
p10779
S'double'
p10780
sS'default'
p10781
g3
sS'name'
p10782
S'x2'
p10783
sS'required'
p10784
I01
sS'group_name'
p10785
Nsa(dp10786
S'description'
p10787
S'The y coordinate of the lower left-hand corner of the box\n'
p10788
sS'cpp_type'
p10789
S'double'
p10790
sS'default'
p10791
g3
sS'name'
p10792
S'y1'
p10793
sS'required'
p10794
I01
sS'group_name'
p10795
Nsa(dp10796
S'description'
p10797
S'The y coordinate of the upper right-hand corner of the box\n'
p10798
sS'cpp_type'
p10799
S'double'
p10800
sS'default'
p10801
g3
sS'name'
p10802
S'y2'
p10803
sS'required'
p10804
I01
sS'group_name'
p10805
Nsa(dp10806
S'description'
p10807
S'The z coordinate of the lower left-hand corner of the box\n'
p10808
sS'cpp_type'
p10809
S'double'
p10810
sS'default'
p10811
S'0'
p10812
sS'name'
p10813
S'z1'
p10814
sS'required'
p10815
I00
sS'group_name'
p10816
Nsa(dp10817
S'description'
p10818
S'The z coordinate of the upper right-hand corner of the box\n'
p10819
sS'cpp_type'
p10820
S'double'
p10821
sS'default'
p10822
S'0'
p10823
sS'name'
p10824
S'z2'
p10825
sS'required'
p10826
I00
sS'group_name'
p10827
NsasS'name'
p10828
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p10829
sa(dp10830
S'description'
p10831
S'Close packed arrangement of smooth circles\n'
p10832
sS'subblocks'
p10833
NsS'parameters'
p10834
(lp10835
(dp10836
S'description'
p10837
S'in 3D, whether the objects are spheres or columns\n'
p10838
sS'cpp_type'
p10839
S'bool'
p10840
sS'default'
p10841
S'1'
p10842
sS'name'
p10843
S'3D_spheres'
p10844
sS'required'
p10845
I00
sS'group_name'
p10846
Nsa(dp10847
S'description'
p10848
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10849
sS'cpp_type'
p10850
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10851
sS'default'
p10852
g3
sS'name'
p10853
S'block'
p10854
sS'required'
p10855
I00
sS'group_name'
p10856
Nsa(dp10857
S'description'
p10858
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10859
sS'cpp_type'
p10860
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10861
sS'default'
p10862
g3
sS'name'
p10863
S'boundary'
p10864
sS'required'
p10865
I00
sS'group_name'
p10866
Nsa(dp10867
S'description'
p10868
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10869
sS'cpp_type'
p10870
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10871
sS'default'
p10872
g3
sS'name'
p10873
S'control_tags'
p10874
sS'required'
p10875
I00
sS'group_name'
p10876
Nsa(dp10877
S'description'
p10878
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p10879
sS'cpp_type'
p10880
S'double'
p10881
sS'default'
p10882
S'0'
p10883
sS'name'
p10884
S'int_width'
p10885
sS'required'
p10886
I00
sS'group_name'
p10887
Nsa(dp10888
S'description'
p10889
S'The variable value inside the circle\n'
p10890
sS'cpp_type'
p10891
S'double'
p10892
sS'default'
p10893
g3
sS'name'
p10894
S'invalue'
p10895
sS'required'
p10896
I01
sS'group_name'
p10897
Nsa(dp10898
S'description'
p10899
S'The variable value outside the circle\n'
p10900
sS'cpp_type'
p10901
S'double'
p10902
sS'default'
p10903
g3
sS'name'
p10904
S'outvalue'
p10905
sS'required'
p10906
I01
sS'group_name'
p10907
Nsa(dp10908
S'description'
p10909
S'The radius of a circle\n'
p10910
sS'cpp_type'
p10911
S'double'
p10912
sS'default'
p10913
g3
sS'name'
p10914
S'radius'
p10915
sS'required'
p10916
I01
sS'group_name'
p10917
Nsa(dp10918
S'description'
p10919
S'Seed value for the random number generator\n'
p10920
sS'cpp_type'
p10921
S'unsigned int'
p10922
sS'default'
p10923
S'12345'
p10924
sS'name'
p10925
S'rand_seed'
p10926
sS'required'
p10927
I00
sS'group_name'
p10928
Nsa(dp10929
S'description'
p10930
g3
sS'cpp_type'
p10931
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p10932
sS'default'
p10933
S'ClosePackIC'
p10934
sS'name'
p10935
S'type'
p10936
sS'required'
p10937
I00
sS'group_name'
p10938
Nsa(dp10939
S'description'
p10940
S'The variable this initial condition is supposed to provide values for.\n'
p10941
sS'cpp_type'
p10942
S'VariableName'
p10943
sS'default'
p10944
g3
sS'name'
p10945
S'variable'
p10946
sS'required'
p10947
I01
sS'group_name'
p10948
Nsa(dp10949
S'description'
p10950
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p10951
sS'cpp_type'
p10952
S'bool'
p10953
sS'default'
p10954
S'0'
p10955
sS'name'
p10956
S'zero_gradient'
p10957
sS'required'
p10958
I00
sS'group_name'
p10959
NsasS'name'
p10960
S'/AuxVariables/*/InitialCondition/<type>/ClosePackIC'
p10961
sa(dp10962
S'description'
p10963
g3
sS'subblocks'
p10964
NsS'parameters'
p10965
(lp10966
(dp10967
S'description'
p10968
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10969
sS'cpp_type'
p10970
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10971
sS'default'
p10972
g3
sS'name'
p10973
S'block'
p10974
sS'required'
p10975
I00
sS'group_name'
p10976
Nsa(dp10977
S'description'
p10978
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10979
sS'cpp_type'
p10980
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10981
sS'default'
p10982
g3
sS'name'
p10983
S'boundary'
p10984
sS'required'
p10985
I00
sS'group_name'
p10986
Nsa(dp10987
S'description'
p10988
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10989
sS'cpp_type'
p10990
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p10991
sS'default'
p10992
g3
sS'name'
p10993
S'control_tags'
p10994
sS'required'
p10995
I00
sS'group_name'
p10996
Nsa(dp10997
S'description'
p10998
g3
sS'cpp_type'
p10999
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11000
sS'default'
p11001
S'ConstantIC'
p11002
sS'name'
p11003
S'type'
p11004
sS'required'
p11005
I00
sS'group_name'
p11006
Nsa(dp11007
S'description'
p11008
S'The value to be set in IC\n'
p11009
sS'cpp_type'
p11010
S'double'
p11011
sS'default'
p11012
g3
sS'name'
p11013
S'value'
p11014
sS'required'
p11015
I01
sS'group_name'
p11016
Nsa(dp11017
S'description'
p11018
S'The variable this initial condition is supposed to provide values for.\n'
p11019
sS'cpp_type'
p11020
S'VariableName'
p11021
sS'default'
p11022
g3
sS'name'
p11023
S'variable'
p11024
sS'required'
p11025
I01
sS'group_name'
p11026
NsasS'name'
p11027
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p11028
sa(dp11029
S'description'
p11030
S'Cross-shaped initial condition\n'
p11031
sS'subblocks'
p11032
NsS'parameters'
p11033
(lp11034
(dp11035
S'description'
p11036
S'The amplitude\n'
p11037
sS'cpp_type'
p11038
S'double'
p11039
sS'default'
p11040
S'1'
p11041
sS'name'
p11042
S'amplitude'
p11043
sS'required'
p11044
I00
sS'group_name'
p11045
Nsa(dp11046
S'description'
p11047
S'The average value\n'
p11048
sS'cpp_type'
p11049
S'double'
p11050
sS'default'
p11051
S'0'
p11052
sS'name'
p11053
S'average'
p11054
sS'required'
p11055
I00
sS'group_name'
p11056
Nsa(dp11057
S'description'
p11058
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11059
sS'cpp_type'
p11060
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11061
sS'default'
p11062
g3
sS'name'
p11063
S'block'
p11064
sS'required'
p11065
I00
sS'group_name'
p11066
Nsa(dp11067
S'description'
p11068
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11069
sS'cpp_type'
p11070
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11071
sS'default'
p11072
g3
sS'name'
p11073
S'boundary'
p11074
sS'required'
p11075
I00
sS'group_name'
p11076
Nsa(dp11077
S'description'
p11078
S'A small area between the max value and the interface\n'
p11079
sS'cpp_type'
p11080
S'double'
p11081
sS'default'
p11082
S'0.03125'
p11083
sS'name'
p11084
S'buffer'
p11085
sS'required'
p11086
I00
sS'group_name'
p11087
Nsa(dp11088
S'description'
p11089
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11090
sS'cpp_type'
p11091
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11092
sS'default'
p11093
g3
sS'name'
p11094
S'control_tags'
p11095
sS'required'
p11096
I00
sS'group_name'
p11097
Nsa(dp11098
S'description'
p11099
S'The interface width\n'
p11100
sS'cpp_type'
p11101
S'double'
p11102
sS'default'
p11103
S'0.03125'
p11104
sS'name'
p11105
S'interface'
p11106
sS'required'
p11107
I00
sS'group_name'
p11108
Nsa(dp11109
S'description'
p11110
S'The length\n'
p11111
sS'cpp_type'
p11112
S'double'
p11113
sS'default'
p11114
S'0.75'
p11115
sS'name'
p11116
S'length'
p11117
sS'required'
p11118
I00
sS'group_name'
p11119
Nsa(dp11120
S'description'
p11121
g3
sS'cpp_type'
p11122
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11123
sS'default'
p11124
S'CrossIC'
p11125
sS'name'
p11126
S'type'
p11127
sS'required'
p11128
I00
sS'group_name'
p11129
Nsa(dp11130
S'description'
p11131
S'The variable this initial condition is supposed to provide values for.\n'
p11132
sS'cpp_type'
p11133
S'VariableName'
p11134
sS'default'
p11135
g3
sS'name'
p11136
S'variable'
p11137
sS'required'
p11138
I01
sS'group_name'
p11139
Nsa(dp11140
S'description'
p11141
S'The width\n'
p11142
sS'cpp_type'
p11143
S'double'
p11144
sS'default'
p11145
S'0.125'
p11146
sS'name'
p11147
S'width'
p11148
sS'required'
p11149
I00
sS'group_name'
p11150
Nsa(dp11151
S'description'
p11152
S'The x coordinate of the lower left-hand corner of the box\n'
p11153
sS'cpp_type'
p11154
S'double'
p11155
sS'default'
p11156
S'0'
p11157
sS'name'
p11158
S'x1'
p11159
sS'required'
p11160
I00
sS'group_name'
p11161
Nsa(dp11162
S'description'
p11163
S'The x coordinate of the upper right-hand corner of the box\n'
p11164
sS'cpp_type'
p11165
S'double'
p11166
sS'default'
p11167
S'1'
p11168
sS'name'
p11169
S'x2'
p11170
sS'required'
p11171
I00
sS'group_name'
p11172
Nsa(dp11173
S'description'
p11174
S'The y coordinate of the lower left-hand corner of the box\n'
p11175
sS'cpp_type'
p11176
S'double'
p11177
sS'default'
p11178
S'0'
p11179
sS'name'
p11180
S'y1'
p11181
sS'required'
p11182
I00
sS'group_name'
p11183
Nsa(dp11184
S'description'
p11185
S'The y coordinate of the upper right-hand corner of the box\n'
p11186
sS'cpp_type'
p11187
S'double'
p11188
sS'default'
p11189
S'1'
p11190
sS'name'
p11191
S'y2'
p11192
sS'required'
p11193
I00
sS'group_name'
p11194
NsasS'name'
p11195
S'/AuxVariables/*/InitialCondition/<type>/CrossIC'
p11196
sa(dp11197
S'description'
p11198
g3
sS'subblocks'
p11199
NsS'parameters'
p11200
(lp11201
(dp11202
S'description'
p11203
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11204
sS'cpp_type'
p11205
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11206
sS'default'
p11207
g3
sS'name'
p11208
S'block'
p11209
sS'required'
p11210
I00
sS'group_name'
p11211
Nsa(dp11212
S'description'
p11213
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11214
sS'cpp_type'
p11215
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11216
sS'default'
p11217
g3
sS'name'
p11218
S'boundary'
p11219
sS'required'
p11220
I00
sS'group_name'
p11221
Nsa(dp11222
S'description'
p11223
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11224
sS'cpp_type'
p11225
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11226
sS'default'
p11227
g3
sS'name'
p11228
S'control_tags'
p11229
sS'required'
p11230
I00
sS'group_name'
p11231
Nsa(dp11232
S'description'
p11233
S'The initial condition function.\n'
p11234
sS'cpp_type'
p11235
S'FunctionName'
p11236
sS'default'
p11237
g3
sS'name'
p11238
S'function'
p11239
sS'required'
p11240
I01
sS'group_name'
p11241
Nsa(dp11242
S'description'
p11243
g3
sS'cpp_type'
p11244
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11245
sS'default'
p11246
S'FunctionIC'
p11247
sS'name'
p11248
S'type'
p11249
sS'required'
p11250
I00
sS'group_name'
p11251
Nsa(dp11252
S'description'
p11253
S'The variable this initial condition is supposed to provide values for.\n'
p11254
sS'cpp_type'
p11255
S'VariableName'
p11256
sS'default'
p11257
g3
sS'name'
p11258
S'variable'
p11259
sS'required'
p11260
I01
sS'group_name'
p11261
NsasS'name'
p11262
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p11263
sa(dp11264
S'description'
p11265
S'Perturbed hexagonal polycrystal\n'
p11266
sS'subblocks'
p11267
NsS'parameters'
p11268
(lp11269
(dp11270
S'description'
p11271
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11272
sS'cpp_type'
p11273
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11274
sS'default'
p11275
g3
sS'name'
p11276
S'block'
p11277
sS'required'
p11278
I00
sS'group_name'
p11279
Nsa(dp11280
S'description'
p11281
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11282
sS'cpp_type'
p11283
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11284
sS'default'
p11285
g3
sS'name'
p11286
S'boundary'
p11287
sS'required'
p11288
I00
sS'group_name'
p11289
Nsa(dp11290
S'description'
p11291
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p11292
sS'cpp_type'
p11293
S'bool'
p11294
sS'default'
p11295
S'0'
p11296
sS'name'
p11297
S'cody_test'
p11298
sS'required'
p11299
I00
sS'group_name'
p11300
Nsa(dp11301
S'description'
p11302
S'3D microstructure will be columnar in the z-direction?\n'
p11303
sS'cpp_type'
p11304
S'bool'
p11305
sS'default'
p11306
S'0'
p11307
sS'name'
p11308
S'columnar_3D'
p11309
sS'required'
p11310
I00
sS'group_name'
p11311
Nsa(dp11312
S'description'
p11313
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11314
sS'cpp_type'
p11315
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11316
sS'default'
p11317
g3
sS'name'
p11318
S'control_tags'
p11319
sS'required'
p11320
I00
sS'group_name'
p11321
Nsa(dp11322
S'description'
p11323
S'Number of grains being represented by the order parameters\n'
p11324
sS'cpp_type'
p11325
S'unsigned int'
p11326
sS'default'
p11327
g3
sS'name'
p11328
S'grain_num'
p11329
sS'required'
p11330
I01
sS'group_name'
p11331
Nsa(dp11332
S'description'
p11333
S'The index for the current order parameter\n'
p11334
sS'cpp_type'
p11335
S'unsigned int'
p11336
sS'default'
p11337
g3
sS'name'
p11338
S'op_index'
p11339
sS'required'
p11340
I01
sS'group_name'
p11341
Nsa(dp11342
S'description'
p11343
S'Number of order parameters\n'
p11344
sS'cpp_type'
p11345
S'unsigned int'
p11346
sS'default'
p11347
g3
sS'name'
p11348
S'op_num'
p11349
sS'required'
p11350
I01
sS'group_name'
p11351
Nsa(dp11352
S'description'
p11353
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p11354
sS'cpp_type'
p11355
S'double'
p11356
sS'default'
p11357
S'0'
p11358
sS'name'
p11359
S'perturbation_percent'
p11360
sS'required'
p11361
I00
sS'group_name'
p11362
Nsa(dp11363
S'description'
p11364
S'The random seed\n'
p11365
sS'cpp_type'
p11366
S'unsigned int'
p11367
sS'default'
p11368
S'12444'
p11369
sS'name'
p11370
S'rand_seed'
p11371
sS'required'
p11372
I00
sS'group_name'
p11373
Nsa(dp11374
S'description'
p11375
g3
sS'cpp_type'
p11376
S'int'
p11377
sS'default'
p11378
S'1'
p11379
sS'name'
p11380
S'typ'
p11381
sS'required'
p11382
I00
sS'group_name'
p11383
Nsa(dp11384
S'description'
p11385
g3
sS'cpp_type'
p11386
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11387
sS'default'
p11388
S'HexPolycrystalIC'
p11389
sS'name'
p11390
S'type'
p11391
sS'required'
p11392
I00
sS'group_name'
p11393
Nsa(dp11394
S'description'
p11395
S'The variable this initial condition is supposed to provide values for.\n'
p11396
sS'cpp_type'
p11397
S'VariableName'
p11398
sS'default'
p11399
g3
sS'name'
p11400
S'variable'
p11401
sS'required'
p11402
I01
sS'group_name'
p11403
Nsa(dp11404
S'description'
p11405
S'Specifies offset of hexagon grid in x-direction\n'
p11406
sS'cpp_type'
p11407
S'double'
p11408
sS'default'
p11409
S'0.5'
p11410
sS'name'
p11411
S'x_offset'
p11412
sS'required'
p11413
I00
sS'group_name'
p11414
NsasS'name'
p11415
S'/AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC'
p11416
sa(dp11417
S'description'
p11418
S'Perturbed square lattice of smooth circles\n'
p11419
sS'subblocks'
p11420
NsS'parameters'
p11421
(lp11422
(dp11423
S'description'
p11424
S'in 3D, whether the objects are spheres or columns\n'
p11425
sS'cpp_type'
p11426
S'bool'
p11427
sS'default'
p11428
S'1'
p11429
sS'name'
p11430
S'3D_spheres'
p11431
sS'required'
p11432
I00
sS'group_name'
p11433
Nsa(dp11434
S'description'
p11435
S'Variation from central lattice position\n'
p11436
sS'cpp_type'
p11437
S'double'
p11438
sS'default'
p11439
g3
sS'name'
p11440
S'Rnd_variation'
p11441
sS'required'
p11442
I00
sS'group_name'
p11443
Nsa(dp11444
S'description'
p11445
S"Don't place any bubbles on the simulation cell boundaries\n"
p11446
sS'cpp_type'
p11447
S'bool'
p11448
sS'default'
p11449
S'1'
p11450
sS'name'
p11451
S'avoid_bounds'
p11452
sS'required'
p11453
I00
sS'group_name'
p11454
Nsa(dp11455
S'description'
p11456
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11457
sS'cpp_type'
p11458
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11459
sS'default'
p11460
g3
sS'name'
p11461
S'block'
p11462
sS'required'
p11463
I00
sS'group_name'
p11464
Nsa(dp11465
S'description'
p11466
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11467
sS'cpp_type'
p11468
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11469
sS'default'
p11470
g3
sS'name'
p11471
S'boundary'
p11472
sS'required'
p11473
I00
sS'group_name'
p11474
Nsa(dp11475
S'description'
p11476
S'Vector containing the number of bubbles along each side\n'
p11477
sS'cpp_type'
p11478
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p11479
sS'default'
p11480
g3
sS'name'
p11481
S'circles_per_side'
p11482
sS'required'
p11483
I01
sS'group_name'
p11484
Nsa(dp11485
S'description'
p11486
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11487
sS'cpp_type'
p11488
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11489
sS'default'
p11490
g3
sS'name'
p11491
S'control_tags'
p11492
sS'required'
p11493
I00
sS'group_name'
p11494
Nsa(dp11495
S'description'
p11496
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11497
sS'cpp_type'
p11498
S'double'
p11499
sS'default'
p11500
S'0'
p11501
sS'name'
p11502
S'int_width'
p11503
sS'required'
p11504
I00
sS'group_name'
p11505
Nsa(dp11506
S'description'
p11507
S'The variable value inside the circle\n'
p11508
sS'cpp_type'
p11509
S'double'
p11510
sS'default'
p11511
g3
sS'name'
p11512
S'invalue'
p11513
sS'required'
p11514
I01
sS'group_name'
p11515
Nsa(dp11516
S'description'
p11517
S'The variable value outside the circle\n'
p11518
sS'cpp_type'
p11519
S'double'
p11520
sS'default'
p11521
g3
sS'name'
p11522
S'outvalue'
p11523
sS'required'
p11524
I01
sS'group_name'
p11525
Nsa(dp11526
S'description'
p11527
S'Variation from central lattice position\n'
p11528
sS'cpp_type'
p11529
S'double'
p11530
sS'default'
p11531
S'0'
p11532
sS'name'
p11533
S'pos_variation'
p11534
sS'required'
p11535
I00
sS'group_name'
p11536
Nsa(dp11537
S'description'
p11538
S'Mean radius value for the circels\n'
p11539
sS'cpp_type'
p11540
S'double'
p11541
sS'default'
p11542
g3
sS'name'
p11543
S'radius'
p11544
sS'required'
p11545
I01
sS'group_name'
p11546
Nsa(dp11547
S'description'
p11548
S'Plus or minus fraction of random variation in the bubble radius\n'
p11549
sS'cpp_type'
p11550
S'double'
p11551
sS'default'
p11552
S'0'
p11553
sS'name'
p11554
S'radius_variation'
p11555
sS'required'
p11556
I00
sS'group_name'
p11557
Nsa(dp11558
S'name'
p11559
S'radius_variation_type'
p11560
sS'cpp_type'
p11561
S'MooseEnum'
p11562
sS'default'
p11563
S'none'
p11564
sS'description'
p11565
S'Type of distribution that random circle radii will follow\n'
p11566
sS'required'
p11567
I00
sS'options'
p11568
S'uniform normal none'
p11569
sS'group_name'
p11570
Nsa(dp11571
S'description'
p11572
S'random seed\n'
p11573
sS'cpp_type'
p11574
S'unsigned int'
p11575
sS'default'
p11576
S'2000'
p11577
sS'name'
p11578
S'rand_seed'
p11579
sS'required'
p11580
I00
sS'group_name'
p11581
Nsa(dp11582
S'description'
p11583
g3
sS'cpp_type'
p11584
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11585
sS'default'
p11586
S'LatticeSmoothCircleIC'
p11587
sS'name'
p11588
S'type'
p11589
sS'required'
p11590
I00
sS'group_name'
p11591
Nsa(dp11592
S'description'
p11593
S'The variable this initial condition is supposed to provide values for.\n'
p11594
sS'cpp_type'
p11595
S'VariableName'
p11596
sS'default'
p11597
g3
sS'name'
p11598
S'variable'
p11599
sS'required'
p11600
I01
sS'group_name'
p11601
Nsa(dp11602
S'description'
p11603
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p11604
sS'cpp_type'
p11605
S'bool'
p11606
sS'default'
p11607
S'0'
p11608
sS'name'
p11609
S'zero_gradient'
p11610
sS'required'
p11611
I00
sS'group_name'
p11612
NsasS'name'
p11613
S'/AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p11614
sa(dp11615
S'description'
p11616
S'Random distribution of smooth circles with given minimum spacing\n'
p11617
sS'subblocks'
p11618
NsS'parameters'
p11619
(lp11620
(dp11621
S'description'
p11622
S'in 3D, whether the objects are spheres or columns\n'
p11623
sS'cpp_type'
p11624
S'bool'
p11625
sS'default'
p11626
S'1'
p11627
sS'name'
p11628
S'3D_spheres'
p11629
sS'required'
p11630
I00
sS'group_name'
p11631
Nsa(dp11632
S'description'
p11633
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11634
sS'cpp_type'
p11635
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11636
sS'default'
p11637
g3
sS'name'
p11638
S'block'
p11639
sS'required'
p11640
I00
sS'group_name'
p11641
Nsa(dp11642
S'description'
p11643
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11644
sS'cpp_type'
p11645
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11646
sS'default'
p11647
g3
sS'name'
p11648
S'boundary'
p11649
sS'required'
p11650
I00
sS'group_name'
p11651
Nsa(dp11652
S'description'
p11653
S'minimum spacing of bubbles, measured from center to center\n'
p11654
sS'cpp_type'
p11655
S'double'
p11656
sS'default'
p11657
g3
sS'name'
p11658
S'bubspac'
p11659
sS'required'
p11660
I01
sS'group_name'
p11661
Nsa(dp11662
S'description'
p11663
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11664
sS'cpp_type'
p11665
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11666
sS'default'
p11667
g3
sS'name'
p11668
S'control_tags'
p11669
sS'required'
p11670
I00
sS'group_name'
p11671
Nsa(dp11672
S'description'
p11673
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p11674
sS'cpp_type'
p11675
S'double'
p11676
sS'default'
p11677
S'0'
p11678
sS'name'
p11679
S'int_width'
p11680
sS'required'
p11681
I00
sS'group_name'
p11682
Nsa(dp11683
S'description'
p11684
S'The variable value inside the circle\n'
p11685
sS'cpp_type'
p11686
S'double'
p11687
sS'default'
p11688
g3
sS'name'
p11689
S'invalue'
p11690
sS'required'
p11691
I01
sS'group_name'
p11692
Nsa(dp11693
S'description'
p11694
S'The number of bubbles to place\n'
p11695
sS'cpp_type'
p11696
S'unsigned int'
p11697
sS'default'
p11698
g3
sS'name'
p11699
S'numbub'
p11700
sS'required'
p11701
I01
sS'group_name'
p11702
Nsa(dp11703
S'description'
p11704
S'The number of tries\n'
p11705
sS'cpp_type'
p11706
S'unsigned int'
p11707
sS'default'
p11708
S'1000'
p11709
sS'name'
p11710
S'numtries'
p11711
sS'required'
p11712
I00
sS'group_name'
p11713
Nsa(dp11714
S'description'
p11715
S'The variable value outside the circle\n'
p11716
sS'cpp_type'
p11717
S'double'
p11718
sS'default'
p11719
g3
sS'name'
p11720
S'outvalue'
p11721
sS'required'
p11722
I01
sS'group_name'
p11723
Nsa(dp11724
S'description'
p11725
S'Mean radius value for the circels\n'
p11726
sS'cpp_type'
p11727
S'double'
p11728
sS'default'
p11729
g3
sS'name'
p11730
S'radius'
p11731
sS'required'
p11732
I01
sS'group_name'
p11733
Nsa(dp11734
S'description'
p11735
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p11736
sS'cpp_type'
p11737
S'double'
p11738
sS'default'
p11739
S'0'
p11740
sS'name'
p11741
S'radius_variation'
p11742
sS'required'
p11743
I00
sS'group_name'
p11744
Nsa(dp11745
S'name'
p11746
S'radius_variation_type'
p11747
sS'cpp_type'
p11748
S'MooseEnum'
p11749
sS'default'
p11750
S'none'
p11751
sS'description'
p11752
S'Type of distribution that random circle radii will follow\n'
p11753
sS'required'
p11754
I00
sS'options'
p11755
S'uniform normal none'
p11756
sS'group_name'
p11757
Nsa(dp11758
S'description'
p11759
S'Seed value for the random number generator\n'
p11760
sS'cpp_type'
p11761
S'unsigned int'
p11762
sS'default'
p11763
S'12345'
p11764
sS'name'
p11765
S'rand_seed'
p11766
sS'required'
p11767
I00
sS'group_name'
p11768
Nsa(dp11769
S'description'
p11770
g3
sS'cpp_type'
p11771
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11772
sS'default'
p11773
S'MultiSmoothCircleIC'
p11774
sS'name'
p11775
S'type'
p11776
sS'required'
p11777
I00
sS'group_name'
p11778
Nsa(dp11779
S'description'
p11780
S'The variable this initial condition is supposed to provide values for.\n'
p11781
sS'cpp_type'
p11782
S'VariableName'
p11783
sS'default'
p11784
g3
sS'name'
p11785
S'variable'
p11786
sS'required'
p11787
I01
sS'group_name'
p11788
Nsa(dp11789
S'description'
p11790
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p11791
sS'cpp_type'
p11792
S'bool'
p11793
sS'default'
p11794
S'0'
p11795
sS'name'
p11796
S'zero_gradient'
p11797
sS'required'
p11798
I00
sS'group_name'
p11799
NsasS'name'
p11800
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p11801
sa(dp11802
S'description'
p11803
g3
sS'subblocks'
p11804
NsS'parameters'
p11805
(lp11806
(dp11807
S'description'
p11808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11809
sS'cpp_type'
p11810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11811
sS'default'
p11812
g3
sS'name'
p11813
S'block'
p11814
sS'required'
p11815
I00
sS'group_name'
p11816
Nsa(dp11817
S'description'
p11818
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11819
sS'cpp_type'
p11820
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11821
sS'default'
p11822
g3
sS'name'
p11823
S'boundary'
p11824
sS'required'
p11825
I00
sS'group_name'
p11826
Nsa(dp11827
S'description'
p11828
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11829
sS'cpp_type'
p11830
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p11831
sS'default'
p11832
g3
sS'name'
p11833
S'control_tags'
p11834
sS'required'
p11835
I00
sS'group_name'
p11836
Nsa(dp11837
S'name'
p11838
S'crystal_structure'
p11839
sS'cpp_type'
p11840
S'MooseEnum'
p11841
sS'default'
p11842
g3
sS'description'
p11843
S'The type of crystal structure\n'
p11844
sS'required'
p11845
I00
sS'options'
p11846
S'FCC BCC'
p11847
sS'group_name'
p11848
Nsa(dp11849
S'description'
p11850
S'Value inside sinusoids\n'
p11851
sS'cpp_type'
p11852
S'double'
p11853
sS'default'
p11854
S'1'
p11855
sS'name'
p11856
S'inside'
p11857
sS'required'
p11858
I00
sS'group_name'
p11859
Nsa(dp11860
S'description'
p11861
S'The lattice constant off the crystal structure\n'
p11862
sS'cpp_type'
p11863
S'double'
p11864
sS'default'
p11865
g3
sS'name'
p11866
S'lc'
p11867
sS'required'
p11868
I01
sS'group_name'
p11869
Nsa(dp11870
S'description'
p11871
S'Upper bound of the randomly generated values\n'
p11872
sS'cpp_type'
p11873
S'double'
p11874
sS'default'
p11875
S'1'
p11876
sS'name'
p11877
S'max'
p11878
sS'required'
p11879
I00
sS'group_name'
p11880
Nsa(dp11881
S'description'
p11882
S'Lower bound of the randomly generated values\n'
p11883
sS'cpp_type'
p11884
S'double'
p11885
sS'default'
p11886
S'0'
p11887
sS'name'
p11888
S'min'
p11889
sS'required'
p11890
I00
sS'group_name'
p11891
Nsa(dp11892
S'description'
p11893
S'Value outside sinusoids\n'
p11894
sS'cpp_type'
p11895
S'double'
p11896
sS'default'
p11897
S'0'
p11898
sS'name'
p11899
S'outside'
p11900
sS'required'
p11901
I00
sS'group_name'
p11902
Nsa(dp11903
S'description'
p11904
S'Seed value for the random number generator\n'
p11905
sS'cpp_type'
p11906
S'unsigned int'
p11907
sS'default'
p11908
S'0'
p11909
sS'name'
p11910
S'seed'
p11911
sS'required'
p11912
I00
sS'group_name'
p11913
Nsa(dp11914
S'description'
p11915
g3
sS'cpp_type'
p11916
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p11917
sS'default'
p11918
S'PFCFreezingIC'
p11919
sS'name'
p11920
S'type'
p11921
sS'required'
p11922
I00
sS'group_name'
p11923
Nsa(dp11924
S'description'
p11925
S'The variable this initial condition is supposed to provide values for.\n'
p11926
sS'cpp_type'
p11927
S'VariableName'
p11928
sS'default'
p11929
g3
sS'name'
p11930
S'variable'
p11931
sS'required'
p11932
I01
sS'group_name'
p11933
Nsa(dp11934
S'description'
p11935
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p11936
sS'cpp_type'
p11937
S'double'
p11938
sS'default'
p11939
g3
sS'name'
p11940
S'x1'
p11941
sS'required'
p11942
I01
sS'group_name'
p11943
Nsa(dp11944
S'description'
p11945
S'The x coordinate of the upper right-hand corner of the box\n'
p11946
sS'cpp_type'
p11947
S'double'
p11948
sS'default'
p11949
g3
sS'name'
p11950
S'x2'
p11951
sS'required'
p11952
I01
sS'group_name'
p11953
Nsa(dp11954
S'description'
p11955
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p11956
sS'cpp_type'
p11957
S'double'
p11958
sS'default'
p11959
g3
sS'name'
p11960
S'y1'
p11961
sS'required'
p11962
I01
sS'group_name'
p11963
Nsa(dp11964
S'description'
p11965
S'The y coordinate of the upper right-hand corner of the box\n'
p11966
sS'cpp_type'
p11967
S'double'
p11968
sS'default'
p11969
g3
sS'name'
p11970
S'y2'
p11971
sS'required'
p11972
I01
sS'group_name'
p11973
Nsa(dp11974
S'description'
p11975
S'The z coordinate of the lower left-hand corner of the box\n'
p11976
sS'cpp_type'
p11977
S'double'
p11978
sS'default'
p11979
S'0'
p11980
sS'name'
p11981
S'z1'
p11982
sS'required'
p11983
I00
sS'group_name'
p11984
Nsa(dp11985
S'description'
p11986
S'The z coordinate of the upper right-hand corner of the box\n'
p11987
sS'cpp_type'
p11988
S'double'
p11989
sS'default'
p11990
S'0'
p11991
sS'name'
p11992
S'z2'
p11993
sS'required'
p11994
I00
sS'group_name'
p11995
NsasS'name'
p11996
S'/AuxVariables/*/InitialCondition/<type>/PFCFreezingIC'
p11997
sa(dp11998
S'description'
p11999
g3
sS'subblocks'
p12000
NsS'parameters'
p12001
(lp12002
(dp12003
S'description'
p12004
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12005
sS'cpp_type'
p12006
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12007
sS'default'
p12008
g3
sS'name'
p12009
S'block'
p12010
sS'required'
p12011
I00
sS'group_name'
p12012
Nsa(dp12013
S'description'
p12014
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12015
sS'cpp_type'
p12016
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12017
sS'default'
p12018
g3
sS'name'
p12019
S'boundary'
p12020
sS'required'
p12021
I00
sS'group_name'
p12022
Nsa(dp12023
S'description'
p12024
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12025
sS'cpp_type'
p12026
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12027
sS'default'
p12028
g3
sS'name'
p12029
S'control_tags'
p12030
sS'required'
p12031
I00
sS'group_name'
p12032
Nsa(dp12033
S'description'
p12034
S'The index for the current order parameter\n'
p12035
sS'cpp_type'
p12036
S'unsigned int'
p12037
sS'default'
p12038
g3
sS'name'
p12039
S'op_index'
p12040
sS'required'
p12041
I01
sS'group_name'
p12042
Nsa(dp12043
S'description'
p12044
S'Number of order parameters\n'
p12045
sS'cpp_type'
p12046
S'unsigned int'
p12047
sS'default'
p12048
g3
sS'name'
p12049
S'op_num'
p12050
sS'required'
p12051
I01
sS'group_name'
p12052
Nsa(dp12053
S'description'
p12054
S'Type of random grain structure\n'
p12055
sS'cpp_type'
p12056
S'unsigned int'
p12057
sS'default'
p12058
g3
sS'name'
p12059
S'typ'
p12060
sS'required'
p12061
I01
sS'group_name'
p12062
Nsa(dp12063
S'description'
p12064
g3
sS'cpp_type'
p12065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12066
sS'default'
p12067
S'PolycrystalRandomIC'
p12068
sS'name'
p12069
S'type'
p12070
sS'required'
p12071
I00
sS'group_name'
p12072
Nsa(dp12073
S'description'
p12074
S'The variable this initial condition is supposed to provide values for.\n'
p12075
sS'cpp_type'
p12076
S'VariableName'
p12077
sS'default'
p12078
g3
sS'name'
p12079
S'variable'
p12080
sS'required'
p12081
I01
sS'group_name'
p12082
NsasS'name'
p12083
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC'
p12084
sa(dp12085
S'description'
p12086
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p12087
sS'subblocks'
p12088
NsS'parameters'
p12089
(lp12090
(dp12091
S'description'
p12092
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12093
sS'cpp_type'
p12094
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12095
sS'default'
p12096
g3
sS'name'
p12097
S'block'
p12098
sS'required'
p12099
I00
sS'group_name'
p12100
Nsa(dp12101
S'description'
p12102
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12103
sS'cpp_type'
p12104
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12105
sS'default'
p12106
g3
sS'name'
p12107
S'boundary'
p12108
sS'required'
p12109
I00
sS'group_name'
p12110
Nsa(dp12111
S'description'
p12112
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p12113
sS'cpp_type'
p12114
S'bool'
p12115
sS'default'
p12116
S'0'
p12117
sS'name'
p12118
S'cody_test'
p12119
sS'required'
p12120
I00
sS'group_name'
p12121
Nsa(dp12122
S'description'
p12123
S'3D microstructure will be columnar in the z-direction?\n'
p12124
sS'cpp_type'
p12125
S'bool'
p12126
sS'default'
p12127
S'0'
p12128
sS'name'
p12129
S'columnar_3D'
p12130
sS'required'
p12131
I00
sS'group_name'
p12132
Nsa(dp12133
S'description'
p12134
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12135
sS'cpp_type'
p12136
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12137
sS'default'
p12138
g3
sS'name'
p12139
S'control_tags'
p12140
sS'required'
p12141
I00
sS'group_name'
p12142
Nsa(dp12143
S'description'
p12144
S'Number of grains being represented by the order parameters\n'
p12145
sS'cpp_type'
p12146
S'unsigned int'
p12147
sS'default'
p12148
g3
sS'name'
p12149
S'grain_num'
p12150
sS'required'
p12151
I01
sS'group_name'
p12152
Nsa(dp12153
S'description'
p12154
S'The index for the current order parameter\n'
p12155
sS'cpp_type'
p12156
S'unsigned int'
p12157
sS'default'
p12158
g3
sS'name'
p12159
S'op_index'
p12160
sS'required'
p12161
I01
sS'group_name'
p12162
Nsa(dp12163
S'description'
p12164
S'Number of order parameters\n'
p12165
sS'cpp_type'
p12166
S'unsigned int'
p12167
sS'default'
p12168
g3
sS'name'
p12169
S'op_num'
p12170
sS'required'
p12171
I01
sS'group_name'
p12172
Nsa(dp12173
S'description'
p12174
S'The random seed\n'
p12175
sS'cpp_type'
p12176
S'unsigned int'
p12177
sS'default'
p12178
S'12444'
p12179
sS'name'
p12180
S'rand_seed'
p12181
sS'required'
p12182
I00
sS'group_name'
p12183
Nsa(dp12184
S'description'
p12185
g3
sS'cpp_type'
p12186
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12187
sS'default'
p12188
S'PolycrystalReducedIC'
p12189
sS'name'
p12190
S'type'
p12191
sS'required'
p12192
I00
sS'group_name'
p12193
Nsa(dp12194
S'description'
p12195
S'The variable this initial condition is supposed to provide values for.\n'
p12196
sS'cpp_type'
p12197
S'VariableName'
p12198
sS'default'
p12199
g3
sS'name'
p12200
S'variable'
p12201
sS'required'
p12202
I01
sS'group_name'
p12203
NsasS'name'
p12204
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC'
p12205
sa(dp12206
S'description'
p12207
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p12208
sS'subblocks'
p12209
NsS'parameters'
p12210
(lp12211
(dp12212
S'description'
p12213
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12214
sS'cpp_type'
p12215
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12216
sS'default'
p12217
g3
sS'name'
p12218
S'block'
p12219
sS'required'
p12220
I00
sS'group_name'
p12221
Nsa(dp12222
S'description'
p12223
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12224
sS'cpp_type'
p12225
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12226
sS'default'
p12227
g3
sS'name'
p12228
S'boundary'
p12229
sS'required'
p12230
I00
sS'group_name'
p12231
Nsa(dp12232
S'description'
p12233
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12234
sS'cpp_type'
p12235
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12236
sS'default'
p12237
g3
sS'name'
p12238
S'control_tags'
p12239
sS'required'
p12240
I00
sS'group_name'
p12241
Nsa(dp12242
S'description'
p12243
g3
sS'cpp_type'
p12244
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12245
sS'default'
p12246
S'RampIC'
p12247
sS'name'
p12248
S'type'
p12249
sS'required'
p12250
I00
sS'group_name'
p12251
Nsa(dp12252
S'description'
p12253
S'The value on left (xmin) boundary.\n'
p12254
sS'cpp_type'
p12255
S'double'
p12256
sS'default'
p12257
g3
sS'name'
p12258
S'value_left'
p12259
sS'required'
p12260
I01
sS'group_name'
p12261
Nsa(dp12262
S'description'
p12263
S'The value on right (xmax) boundary.\n'
p12264
sS'cpp_type'
p12265
S'double'
p12266
sS'default'
p12267
g3
sS'name'
p12268
S'value_right'
p12269
sS'required'
p12270
I01
sS'group_name'
p12271
Nsa(dp12272
S'description'
p12273
S'The variable this initial condition is supposed to provide values for.\n'
p12274
sS'cpp_type'
p12275
S'VariableName'
p12276
sS'default'
p12277
g3
sS'name'
p12278
S'variable'
p12279
sS'required'
p12280
I01
sS'group_name'
p12281
NsasS'name'
p12282
S'/AuxVariables/*/InitialCondition/<type>/RampIC'
p12283
sa(dp12284
S'description'
p12285
g3
sS'subblocks'
p12286
NsS'parameters'
p12287
(lp12288
(dp12289
S'description'
p12290
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12291
sS'cpp_type'
p12292
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12293
sS'default'
p12294
g3
sS'name'
p12295
S'block'
p12296
sS'required'
p12297
I00
sS'group_name'
p12298
Nsa(dp12299
S'description'
p12300
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12301
sS'cpp_type'
p12302
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12303
sS'default'
p12304
g3
sS'name'
p12305
S'boundary'
p12306
sS'required'
p12307
I00
sS'group_name'
p12308
Nsa(dp12309
S'description'
p12310
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12311
sS'cpp_type'
p12312
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12313
sS'default'
p12314
g3
sS'name'
p12315
S'control_tags'
p12316
sS'required'
p12317
I00
sS'group_name'
p12318
Nsa(dp12319
S'description'
p12320
S'Upper bound of the randomly generated values\n'
p12321
sS'cpp_type'
p12322
S'double'
p12323
sS'default'
p12324
S'1'
p12325
sS'name'
p12326
S'max'
p12327
sS'required'
p12328
I00
sS'group_name'
p12329
Nsa(dp12330
S'description'
p12331
S'Lower bound of the randomly generated values\n'
p12332
sS'cpp_type'
p12333
S'double'
p12334
sS'default'
p12335
S'0'
p12336
sS'name'
p12337
S'min'
p12338
sS'required'
p12339
I00
sS'group_name'
p12340
Nsa(dp12341
S'description'
p12342
S'Seed value for the random number generator\n'
p12343
sS'cpp_type'
p12344
S'unsigned int'
p12345
sS'default'
p12346
S'0'
p12347
sS'name'
p12348
S'seed'
p12349
sS'required'
p12350
I00
sS'group_name'
p12351
Nsa(dp12352
S'description'
p12353
g3
sS'cpp_type'
p12354
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12355
sS'default'
p12356
S'RandomIC'
p12357
sS'name'
p12358
S'type'
p12359
sS'required'
p12360
I00
sS'group_name'
p12361
Nsa(dp12362
S'description'
p12363
S'The variable this initial condition is supposed to provide values for.\n'
p12364
sS'cpp_type'
p12365
S'VariableName'
p12366
sS'default'
p12367
g3
sS'name'
p12368
S'variable'
p12369
sS'required'
p12370
I01
sS'group_name'
p12371
NsasS'name'
p12372
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p12373
sa(dp12374
S'description'
p12375
g3
sS'subblocks'
p12376
NsS'parameters'
p12377
(lp12378
(dp12379
S'description'
p12380
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12381
sS'cpp_type'
p12382
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12383
sS'default'
p12384
g3
sS'name'
p12385
S'block'
p12386
sS'required'
p12387
I00
sS'group_name'
p12388
Nsa(dp12389
S'description'
p12390
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12391
sS'cpp_type'
p12392
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12393
sS'default'
p12394
g3
sS'name'
p12395
S'boundary'
p12396
sS'required'
p12397
I00
sS'group_name'
p12398
Nsa(dp12399
S'description'
p12400
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12401
sS'cpp_type'
p12402
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12403
sS'default'
p12404
g3
sS'name'
p12405
S'control_tags'
p12406
sS'required'
p12407
I00
sS'group_name'
p12408
Nsa(dp12409
S'description'
p12410
S'The EBSDReader object holding the EBSD data\n'
p12411
sS'cpp_type'
p12412
S'UserObjectName'
p12413
sS'default'
p12414
g3
sS'name'
p12415
S'ebsd_reader'
p12416
sS'required'
p12417
I01
sS'group_name'
p12418
Nsa(dp12419
S'description'
p12420
S'EBSD phase number this variable is to represent\n'
p12421
sS'cpp_type'
p12422
S'unsigned int'
p12423
sS'default'
p12424
g3
sS'name'
p12425
S'phase'
p12426
sS'required'
p12427
I01
sS'group_name'
p12428
Nsa(dp12429
S'description'
p12430
g3
sS'cpp_type'
p12431
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12432
sS'default'
p12433
S'ReconPhaseVarIC'
p12434
sS'name'
p12435
S'type'
p12436
sS'required'
p12437
I00
sS'group_name'
p12438
Nsa(dp12439
S'description'
p12440
S'The variable this initial condition is supposed to provide values for.\n'
p12441
sS'cpp_type'
p12442
S'VariableName'
p12443
sS'default'
p12444
g3
sS'name'
p12445
S'variable'
p12446
sS'required'
p12447
I01
sS'group_name'
p12448
NsasS'name'
p12449
S'/AuxVariables/*/InitialCondition/<type>/ReconPhaseVarIC'
p12450
sa(dp12451
S'description'
p12452
g3
sS'subblocks'
p12453
NsS'parameters'
p12454
(lp12455
(dp12456
S'description'
p12457
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12458
sS'cpp_type'
p12459
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12460
sS'default'
p12461
g3
sS'name'
p12462
S'block'
p12463
sS'required'
p12464
I00
sS'group_name'
p12465
Nsa(dp12466
S'description'
p12467
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12468
sS'cpp_type'
p12469
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12470
sS'default'
p12471
g3
sS'name'
p12472
S'boundary'
p12473
sS'required'
p12474
I00
sS'group_name'
p12475
Nsa(dp12476
S'description'
p12477
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12478
sS'cpp_type'
p12479
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12480
sS'default'
p12481
g3
sS'name'
p12482
S'control_tags'
p12483
sS'required'
p12484
I00
sS'group_name'
p12485
Nsa(dp12486
S'description'
p12487
S'The EBSDReader GeneralUserObject\n'
p12488
sS'cpp_type'
p12489
S'UserObjectName'
p12490
sS'default'
p12491
g3
sS'name'
p12492
S'ebsd_reader'
p12493
sS'required'
p12494
I01
sS'group_name'
p12495
Nsa(dp12496
S'description'
p12497
S'The index for the current order parameter\n'
p12498
sS'cpp_type'
p12499
S'unsigned int'
p12500
sS'default'
p12501
g3
sS'name'
p12502
S'op_index'
p12503
sS'required'
p12504
I01
sS'group_name'
p12505
Nsa(dp12506
S'description'
p12507
S'Specifies the number of order parameters to create\n'
p12508
sS'cpp_type'
p12509
S'unsigned int'
p12510
sS'default'
p12511
g3
sS'name'
p12512
S'op_num'
p12513
sS'required'
p12514
I01
sS'group_name'
p12515
Nsa(dp12516
S'description'
p12517
S'EBSD phase number to be assigned to this grain\n'
p12518
sS'cpp_type'
p12519
S'unsigned int'
p12520
sS'default'
p12521
g3
sS'name'
p12522
S'phase'
p12523
sS'required'
p12524
I00
sS'group_name'
p12525
Nsa(dp12526
S'description'
p12527
g3
sS'cpp_type'
p12528
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12529
sS'default'
p12530
S'ReconVarIC'
p12531
sS'name'
p12532
S'type'
p12533
sS'required'
p12534
I00
sS'group_name'
p12535
Nsa(dp12536
S'description'
p12537
S'The variable this initial condition is supposed to provide values for.\n'
p12538
sS'cpp_type'
p12539
S'VariableName'
p12540
sS'default'
p12541
g3
sS'name'
p12542
S'variable'
p12543
sS'required'
p12544
I01
sS'group_name'
p12545
NsasS'name'
p12546
S'/AuxVariables/*/InitialCondition/<type>/ReconVarIC'
p12547
sa(dp12548
S'description'
p12549
S'Random noise with different min/max inside/outside of a bounding box\n'
p12550
sS'subblocks'
p12551
NsS'parameters'
p12552
(lp12553
(dp12554
S'description'
p12555
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12556
sS'cpp_type'
p12557
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12558
sS'default'
p12559
g3
sS'name'
p12560
S'block'
p12561
sS'required'
p12562
I00
sS'group_name'
p12563
Nsa(dp12564
S'description'
p12565
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12566
sS'cpp_type'
p12567
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12568
sS'default'
p12569
g3
sS'name'
p12570
S'boundary'
p12571
sS'required'
p12572
I00
sS'group_name'
p12573
Nsa(dp12574
S'description'
p12575
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12576
sS'cpp_type'
p12577
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12578
sS'default'
p12579
g3
sS'name'
p12580
S'control_tags'
p12581
sS'required'
p12582
I00
sS'group_name'
p12583
Nsa(dp12584
S'description'
p12585
S'The min value of the variable invalue the box\n'
p12586
sS'cpp_type'
p12587
S'double'
p12588
sS'default'
p12589
S'0'
p12590
sS'name'
p12591
S'mn_invalue'
p12592
sS'required'
p12593
I00
sS'group_name'
p12594
Nsa(dp12595
S'description'
p12596
S'The min value of the variable outvalue the box\n'
p12597
sS'cpp_type'
p12598
S'double'
p12599
sS'default'
p12600
S'0'
p12601
sS'name'
p12602
S'mn_outvalue'
p12603
sS'required'
p12604
I00
sS'group_name'
p12605
Nsa(dp12606
S'description'
p12607
S'The max value of the variable invalue the box\n'
p12608
sS'cpp_type'
p12609
S'double'
p12610
sS'default'
p12611
g3
sS'name'
p12612
S'mx_invalue'
p12613
sS'required'
p12614
I01
sS'group_name'
p12615
Nsa(dp12616
S'description'
p12617
S'The max value of the variable outvalue the box\n'
p12618
sS'cpp_type'
p12619
S'double'
p12620
sS'default'
p12621
g3
sS'name'
p12622
S'mx_outvalue'
p12623
sS'required'
p12624
I01
sS'group_name'
p12625
Nsa(dp12626
S'description'
p12627
g3
sS'cpp_type'
p12628
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12629
sS'default'
p12630
S'RndBoundingBoxIC'
p12631
sS'name'
p12632
S'type'
p12633
sS'required'
p12634
I00
sS'group_name'
p12635
Nsa(dp12636
S'description'
p12637
S'The variable this initial condition is supposed to provide values for.\n'
p12638
sS'cpp_type'
p12639
S'VariableName'
p12640
sS'default'
p12641
g3
sS'name'
p12642
S'variable'
p12643
sS'required'
p12644
I01
sS'group_name'
p12645
Nsa(dp12646
S'description'
p12647
S'The x coordinate of the lower left-hand corner of the box\n'
p12648
sS'cpp_type'
p12649
S'double'
p12650
sS'default'
p12651
g3
sS'name'
p12652
S'x1'
p12653
sS'required'
p12654
I01
sS'group_name'
p12655
Nsa(dp12656
S'description'
p12657
S'The x coordinate of the upper right-hand corner of the box\n'
p12658
sS'cpp_type'
p12659
S'double'
p12660
sS'default'
p12661
g3
sS'name'
p12662
S'x2'
p12663
sS'required'
p12664
I01
sS'group_name'
p12665
Nsa(dp12666
S'description'
p12667
S'The y coordinate of the lower left-hand corner of the box\n'
p12668
sS'cpp_type'
p12669
S'double'
p12670
sS'default'
p12671
g3
sS'name'
p12672
S'y1'
p12673
sS'required'
p12674
I01
sS'group_name'
p12675
Nsa(dp12676
S'description'
p12677
S'The y coordinate of the upper right-hand corner of the box\n'
p12678
sS'cpp_type'
p12679
S'double'
p12680
sS'default'
p12681
g3
sS'name'
p12682
S'y2'
p12683
sS'required'
p12684
I01
sS'group_name'
p12685
Nsa(dp12686
S'description'
p12687
S'The z coordinate of the lower left-hand corner of the box\n'
p12688
sS'cpp_type'
p12689
S'double'
p12690
sS'default'
p12691
S'0'
p12692
sS'name'
p12693
S'z1'
p12694
sS'required'
p12695
I00
sS'group_name'
p12696
Nsa(dp12697
S'description'
p12698
S'The z coordinate of the upper right-hand corner of the box\n'
p12699
sS'cpp_type'
p12700
S'double'
p12701
sS'default'
p12702
S'0'
p12703
sS'name'
p12704
S'z2'
p12705
sS'required'
p12706
I00
sS'group_name'
p12707
NsasS'name'
p12708
S'/AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC'
p12709
sa(dp12710
S'description'
p12711
S'Random noise with different min/max inside/outside of a smooth circle\n'
p12712
sS'subblocks'
p12713
NsS'parameters'
p12714
(lp12715
(dp12716
S'description'
p12717
S'in 3D, whether the objects are spheres or columns\n'
p12718
sS'cpp_type'
p12719
S'bool'
p12720
sS'default'
p12721
S'1'
p12722
sS'name'
p12723
S'3D_spheres'
p12724
sS'required'
p12725
I00
sS'group_name'
p12726
Nsa(dp12727
S'description'
p12728
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12729
sS'cpp_type'
p12730
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p12731
sS'default'
p12732
g3
sS'name'
p12733
S'block'
p12734
sS'required'
p12735
I00
sS'group_name'
p12736
Nsa(dp12737
S'description'
p12738
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12739
sS'cpp_type'
p12740
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p12741
sS'default'
p12742
g3
sS'name'
p12743
S'boundary'
p12744
sS'required'
p12745
I00
sS'group_name'
p12746
Nsa(dp12747
S'description'
p12748
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12749
sS'cpp_type'
p12750
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12751
sS'default'
p12752
g3
sS'name'
p12753
S'control_tags'
p12754
sS'required'
p12755
I00
sS'group_name'
p12756
Nsa(dp12757
S'description'
p12758
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p12759
sS'cpp_type'
p12760
S'double'
p12761
sS'default'
p12762
S'0'
p12763
sS'name'
p12764
S'int_width'
p12765
sS'required'
p12766
I00
sS'group_name'
p12767
Nsa(dp12768
S'description'
p12769
S'The variable value inside the circle\n'
p12770
sS'cpp_type'
p12771
S'double'
p12772
sS'default'
p12773
g3
sS'name'
p12774
S'invalue'
p12775
sS'required'
p12776
I01
sS'group_name'
p12777
Nsa(dp12778
S'description'
p12779
S'The variable value outside the circle\n'
p12780
sS'cpp_type'
p12781
S'double'
p12782
sS'default'
p12783
g3
sS'name'
p12784
S'outvalue'
p12785
sS'required'
p12786
I01
sS'group_name'
p12787
Nsa(dp12788
S'description'
p12789
S'The radius of a circle\n'
p12790
sS'cpp_type'
p12791
S'double'
p12792
sS'default'
p12793
g3
sS'name'
p12794
S'radius'
p12795
sS'required'
p12796
I01
sS'group_name'
p12797
Nsa(dp12798
S'description'
p12799
S'Seed value for the random number generator\n'
p12800
sS'cpp_type'
p12801
S'unsigned int'
p12802
sS'default'
p12803
S'12345'
p12804
sS'name'
p12805
S'rand_seed'
p12806
sS'required'
p12807
I00
sS'group_name'
p12808
Nsa(dp12809
S'description'
p12810
g3
sS'cpp_type'
p12811
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12812
sS'default'
p12813
S'RndSmoothCircleIC'
p12814
sS'name'
p12815
S'type'
p12816
sS'required'
p12817
I00
sS'group_name'
p12818
Nsa(dp12819
S'description'
p12820
S'The variable this initial condition is supposed to provide values for.\n'
p12821
sS'cpp_type'
p12822
S'VariableName'
p12823
sS'default'
p12824
g3
sS'name'
p12825
S'variable'
p12826
sS'required'
p12827
I01
sS'group_name'
p12828
Nsa(dp12829
S'description'
p12830
S'Plus or minus this amount on the invalue\n'
p12831
sS'cpp_type'
p12832
S'double'
p12833
sS'default'
p12834
g3
sS'name'
p12835
S'variation_invalue'
p12836
sS'required'
p12837
I01
sS'group_name'
p12838
Nsa(dp12839
S'description'
p12840
S'Plus or minus this amount on the outvalue\n'
p12841
sS'cpp_type'
p12842
S'double'
p12843
sS'default'
p12844
g3
sS'name'
p12845
S'variation_outvalue'
p12846
sS'required'
p12847
I01
sS'group_name'
p12848
Nsa(dp12849
S'description'
p12850
S'The x coordinate of the circle center\n'
p12851
sS'cpp_type'
p12852
S'double'
p12853
sS'default'
p12854
g3
sS'name'
p12855
S'x1'
p12856
sS'required'
p12857
I01
sS'group_name'
p12858
Nsa(dp12859
S'description'
p12860
S'The y coordinate of the circle center\n'
p12861
sS'cpp_type'
p12862
S'double'
p12863
sS'default'
p12864
g3
sS'name'
p12865
S'y1'
p12866
sS'required'
p12867
I01
sS'group_name'
p12868
Nsa(dp12869
S'description'
p12870
S'The z coordinate of the circle center\n'
p12871
sS'cpp_type'
p12872
S'double'
p12873
sS'default'
p12874
S'0'
p12875
sS'name'
p12876
S'z1'
p12877
sS'required'
p12878
I00
sS'group_name'
p12879
Nsa(dp12880
S'description'
p12881
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p12882
sS'cpp_type'
p12883
S'bool'
p12884
sS'default'
p12885
S'0'
p12886
sS'name'
p12887
S'zero_gradient'
p12888
sS'required'
p12889
I00
sS'group_name'
p12890
NsasS'name'
p12891
S'/AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC'
p12892
sa(dp12893
S'description'
p12894
g3
sS'subblocks'
p12895
NsS'parameters'
p12896
(lp12897
(dp12898
S'description'
p12899
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12900
sS'cpp_type'
p12901
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12902
sS'default'
p12903
g3
sS'name'
p12904
S'control_tags'
p12905
sS'required'
p12906
I00
sS'group_name'
p12907
Nsa(dp12908
S'description'
p12909
g3
sS'cpp_type'
p12910
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12911
sS'default'
p12912
S'ScalarComponentIC'
p12913
sS'name'
p12914
S'type'
p12915
sS'required'
p12916
I00
sS'group_name'
p12917
Nsa(dp12918
S'description'
p12919
S'Initial values to initialize the scalar variable.\n'
p12920
sS'cpp_type'
p12921
S'std::vector<double, std::allocator<double> >'
p12922
sS'default'
p12923
g3
sS'name'
p12924
S'values'
p12925
sS'required'
p12926
I01
sS'group_name'
p12927
Nsa(dp12928
S'description'
p12929
S'The variable this initial condition is supposed to provide values for.\n'
p12930
sS'cpp_type'
p12931
S'VariableName'
p12932
sS'default'
p12933
g3
sS'name'
p12934
S'variable'
p12935
sS'required'
p12936
I00
sS'group_name'
p12937
NsasS'name'
p12938
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p12939
sa(dp12940
S'description'
p12941
g3
sS'subblocks'
p12942
NsS'parameters'
p12943
(lp12944
(dp12945
S'description'
p12946
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12947
sS'cpp_type'
p12948
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p12949
sS'default'
p12950
g3
sS'name'
p12951
S'control_tags'
p12952
sS'required'
p12953
I00
sS'group_name'
p12954
Nsa(dp12955
S'description'
p12956
g3
sS'cpp_type'
p12957
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p12958
sS'default'
p12959
S'ScalarConstantIC'
p12960
sS'name'
p12961
S'type'
p12962
sS'required'
p12963
I00
sS'group_name'
p12964
Nsa(dp12965
S'description'
p12966
g3
sS'cpp_type'
p12967
S'double'
p12968
sS'default'
p12969
S'0'
p12970
sS'name'
p12971
S'value'
p12972
sS'required'
p12973
I00
sS'group_name'
p12974
Nsa(dp12975
S'description'
p12976
S'The variable this initial condition is supposed to provide values for.\n'
p12977
sS'cpp_type'
p12978
S'VariableName'
p12979
sS'default'
p12980
g3
sS'name'
p12981
S'variable'
p12982
sS'required'
p12983
I00
sS'group_name'
p12984
NsasS'name'
p12985
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p12986
sa(dp12987
S'description'
p12988
S'Circle with a smooth interface\n'
p12989
sS'subblocks'
p12990
NsS'parameters'
p12991
(lp12992
(dp12993
S'description'
p12994
S'in 3D, whether the objects are spheres or columns\n'
p12995
sS'cpp_type'
p12996
S'bool'
p12997
sS'default'
p12998
S'1'
p12999
sS'name'
p13000
S'3D_spheres'
p13001
sS'required'
p13002
I00
sS'group_name'
p13003
Nsa(dp13004
S'description'
p13005
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13006
sS'cpp_type'
p13007
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13008
sS'default'
p13009
g3
sS'name'
p13010
S'block'
p13011
sS'required'
p13012
I00
sS'group_name'
p13013
Nsa(dp13014
S'description'
p13015
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13016
sS'cpp_type'
p13017
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13018
sS'default'
p13019
g3
sS'name'
p13020
S'boundary'
p13021
sS'required'
p13022
I00
sS'group_name'
p13023
Nsa(dp13024
S'description'
p13025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13026
sS'cpp_type'
p13027
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13028
sS'default'
p13029
g3
sS'name'
p13030
S'control_tags'
p13031
sS'required'
p13032
I00
sS'group_name'
p13033
Nsa(dp13034
S'description'
p13035
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13036
sS'cpp_type'
p13037
S'double'
p13038
sS'default'
p13039
S'0'
p13040
sS'name'
p13041
S'int_width'
p13042
sS'required'
p13043
I00
sS'group_name'
p13044
Nsa(dp13045
S'description'
p13046
S'The variable value inside the circle\n'
p13047
sS'cpp_type'
p13048
S'double'
p13049
sS'default'
p13050
g3
sS'name'
p13051
S'invalue'
p13052
sS'required'
p13053
I01
sS'group_name'
p13054
Nsa(dp13055
S'description'
p13056
S'The variable value outside the circle\n'
p13057
sS'cpp_type'
p13058
S'double'
p13059
sS'default'
p13060
g3
sS'name'
p13061
S'outvalue'
p13062
sS'required'
p13063
I01
sS'group_name'
p13064
Nsa(dp13065
S'description'
p13066
S'The radius of a circle\n'
p13067
sS'cpp_type'
p13068
S'double'
p13069
sS'default'
p13070
g3
sS'name'
p13071
S'radius'
p13072
sS'required'
p13073
I01
sS'group_name'
p13074
Nsa(dp13075
S'description'
p13076
S'Seed value for the random number generator\n'
p13077
sS'cpp_type'
p13078
S'unsigned int'
p13079
sS'default'
p13080
S'12345'
p13081
sS'name'
p13082
S'rand_seed'
p13083
sS'required'
p13084
I00
sS'group_name'
p13085
Nsa(dp13086
S'description'
p13087
g3
sS'cpp_type'
p13088
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13089
sS'default'
p13090
S'SmoothCircleIC'
p13091
sS'name'
p13092
S'type'
p13093
sS'required'
p13094
I00
sS'group_name'
p13095
Nsa(dp13096
S'description'
p13097
S'The variable this initial condition is supposed to provide values for.\n'
p13098
sS'cpp_type'
p13099
S'VariableName'
p13100
sS'default'
p13101
g3
sS'name'
p13102
S'variable'
p13103
sS'required'
p13104
I01
sS'group_name'
p13105
Nsa(dp13106
S'description'
p13107
S'The x coordinate of the circle center\n'
p13108
sS'cpp_type'
p13109
S'double'
p13110
sS'default'
p13111
g3
sS'name'
p13112
S'x1'
p13113
sS'required'
p13114
I01
sS'group_name'
p13115
Nsa(dp13116
S'description'
p13117
S'The y coordinate of the circle center\n'
p13118
sS'cpp_type'
p13119
S'double'
p13120
sS'default'
p13121
g3
sS'name'
p13122
S'y1'
p13123
sS'required'
p13124
I01
sS'group_name'
p13125
Nsa(dp13126
S'description'
p13127
S'The z coordinate of the circle center\n'
p13128
sS'cpp_type'
p13129
S'double'
p13130
sS'default'
p13131
S'0'
p13132
sS'name'
p13133
S'z1'
p13134
sS'required'
p13135
I00
sS'group_name'
p13136
Nsa(dp13137
S'description'
p13138
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p13139
sS'cpp_type'
p13140
S'bool'
p13141
sS'default'
p13142
S'0'
p13143
sS'name'
p13144
S'zero_gradient'
p13145
sS'required'
p13146
I00
sS'group_name'
p13147
NsasS'name'
p13148
S'/AuxVariables/*/InitialCondition/<type>/SmoothCircleIC'
p13149
sa(dp13150
S'description'
p13151
S'Multiple smooth circles with manually specified radii and center points\n'
p13152
sS'subblocks'
p13153
NsS'parameters'
p13154
(lp13155
(dp13156
S'description'
p13157
S'in 3D, whether the objects are spheres or columns\n'
p13158
sS'cpp_type'
p13159
S'bool'
p13160
sS'default'
p13161
S'1'
p13162
sS'name'
p13163
S'3D_spheres'
p13164
sS'required'
p13165
I00
sS'group_name'
p13166
Nsa(dp13167
S'description'
p13168
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13169
sS'cpp_type'
p13170
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13171
sS'default'
p13172
g3
sS'name'
p13173
S'block'
p13174
sS'required'
p13175
I00
sS'group_name'
p13176
Nsa(dp13177
S'description'
p13178
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13179
sS'cpp_type'
p13180
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13181
sS'default'
p13182
g3
sS'name'
p13183
S'boundary'
p13184
sS'required'
p13185
I00
sS'group_name'
p13186
Nsa(dp13187
S'description'
p13188
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13189
sS'cpp_type'
p13190
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13191
sS'default'
p13192
g3
sS'name'
p13193
S'control_tags'
p13194
sS'required'
p13195
I00
sS'group_name'
p13196
Nsa(dp13197
S'description'
p13198
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p13199
sS'cpp_type'
p13200
S'double'
p13201
sS'default'
p13202
S'0'
p13203
sS'name'
p13204
S'int_width'
p13205
sS'required'
p13206
I00
sS'group_name'
p13207
Nsa(dp13208
S'description'
p13209
S'The variable value inside the circle\n'
p13210
sS'cpp_type'
p13211
S'double'
p13212
sS'default'
p13213
g3
sS'name'
p13214
S'invalue'
p13215
sS'required'
p13216
I01
sS'group_name'
p13217
Nsa(dp13218
S'description'
p13219
S'The variable value outside the circle\n'
p13220
sS'cpp_type'
p13221
S'double'
p13222
sS'default'
p13223
g3
sS'name'
p13224
S'outvalue'
p13225
sS'required'
p13226
I01
sS'group_name'
p13227
Nsa(dp13228
S'description'
p13229
S'The radius for each circle\n'
p13230
sS'cpp_type'
p13231
S'std::vector<double, std::allocator<double> >'
p13232
sS'default'
p13233
g3
sS'name'
p13234
S'radii'
p13235
sS'required'
p13236
I01
sS'group_name'
p13237
Nsa(dp13238
S'description'
p13239
S'Seed value for the random number generator\n'
p13240
sS'cpp_type'
p13241
S'unsigned int'
p13242
sS'default'
p13243
S'12345'
p13244
sS'name'
p13245
S'rand_seed'
p13246
sS'required'
p13247
I00
sS'group_name'
p13248
Nsa(dp13249
S'description'
p13250
g3
sS'cpp_type'
p13251
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13252
sS'default'
p13253
S'SpecifiedSmoothCircleIC'
p13254
sS'name'
p13255
S'type'
p13256
sS'required'
p13257
I00
sS'group_name'
p13258
Nsa(dp13259
S'description'
p13260
S'The variable this initial condition is supposed to provide values for.\n'
p13261
sS'cpp_type'
p13262
S'VariableName'
p13263
sS'default'
p13264
g3
sS'name'
p13265
S'variable'
p13266
sS'required'
p13267
I01
sS'group_name'
p13268
Nsa(dp13269
S'description'
p13270
S'The x-coordinate for each circle center\n'
p13271
sS'cpp_type'
p13272
S'std::vector<double, std::allocator<double> >'
p13273
sS'default'
p13274
g3
sS'name'
p13275
S'x_positions'
p13276
sS'required'
p13277
I01
sS'group_name'
p13278
Nsa(dp13279
S'description'
p13280
S'The y-coordinate for each circle center\n'
p13281
sS'cpp_type'
p13282
S'std::vector<double, std::allocator<double> >'
p13283
sS'default'
p13284
g3
sS'name'
p13285
S'y_positions'
p13286
sS'required'
p13287
I01
sS'group_name'
p13288
Nsa(dp13289
S'description'
p13290
S'The z-coordinate for each circle center\n'
p13291
sS'cpp_type'
p13292
S'std::vector<double, std::allocator<double> >'
p13293
sS'default'
p13294
g3
sS'name'
p13295
S'z_positions'
p13296
sS'required'
p13297
I01
sS'group_name'
p13298
Nsa(dp13299
S'description'
p13300
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p13301
sS'cpp_type'
p13302
S'bool'
p13303
sS'default'
p13304
S'0'
p13305
sS'name'
p13306
S'zero_gradient'
p13307
sS'required'
p13308
I00
sS'group_name'
p13309
NsasS'name'
p13310
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p13311
sa(dp13312
S'description'
p13313
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p13314
sS'subblocks'
p13315
NsS'parameters'
p13316
(lp13317
(dp13318
S'description'
p13319
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13320
sS'cpp_type'
p13321
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13322
sS'default'
p13323
g3
sS'name'
p13324
S'block'
p13325
sS'required'
p13326
I00
sS'group_name'
p13327
Nsa(dp13328
S'description'
p13329
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13330
sS'cpp_type'
p13331
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13332
sS'default'
p13333
g3
sS'name'
p13334
S'boundary'
p13335
sS'required'
p13336
I00
sS'group_name'
p13337
Nsa(dp13338
S'description'
p13339
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13340
sS'cpp_type'
p13341
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13342
sS'default'
p13343
g3
sS'name'
p13344
S'control_tags'
p13345
sS'required'
p13346
I00
sS'group_name'
p13347
Nsa(dp13348
S'description'
p13349
S'The z coordinate of the circle center\n'
p13350
sS'cpp_type'
p13351
S'double'
p13352
sS'default'
p13353
g3
sS'name'
p13354
S'height'
p13355
sS'required'
p13356
I01
sS'group_name'
p13357
Nsa(dp13358
S'description'
p13359
S'The variable value inside the circle\n'
p13360
sS'cpp_type'
p13361
S'double'
p13362
sS'default'
p13363
g3
sS'name'
p13364
S'invalue'
p13365
sS'required'
p13366
I01
sS'group_name'
p13367
Nsa(dp13368
S'description'
p13369
S'The variable value outside the circle\n'
p13370
sS'cpp_type'
p13371
S'double'
p13372
sS'default'
p13373
g3
sS'name'
p13374
S'outvalue'
p13375
sS'required'
p13376
I01
sS'group_name'
p13377
Nsa(dp13378
S'description'
p13379
g3
sS'cpp_type'
p13380
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13381
sS'default'
p13382
S'ThumbIC'
p13383
sS'name'
p13384
S'type'
p13385
sS'required'
p13386
I00
sS'group_name'
p13387
Nsa(dp13388
S'description'
p13389
S'The variable this initial condition is supposed to provide values for.\n'
p13390
sS'cpp_type'
p13391
S'VariableName'
p13392
sS'default'
p13393
g3
sS'name'
p13394
S'variable'
p13395
sS'required'
p13396
I01
sS'group_name'
p13397
Nsa(dp13398
S'description'
p13399
S'The y coordinate of the circle center\n'
p13400
sS'cpp_type'
p13401
S'double'
p13402
sS'default'
p13403
g3
sS'name'
p13404
S'width'
p13405
sS'required'
p13406
I01
sS'group_name'
p13407
Nsa(dp13408
S'description'
p13409
S'The x coordinate of the circle center\n'
p13410
sS'cpp_type'
p13411
S'double'
p13412
sS'default'
p13413
g3
sS'name'
p13414
S'xcoord'
p13415
sS'required'
p13416
I01
sS'group_name'
p13417
NsasS'name'
p13418
S'/AuxVariables/*/InitialCondition/<type>/ThumbIC'
p13419
sa(dp13420
S'description'
p13421
S'Tricrystal with two circles/bubbles\n'
p13422
sS'subblocks'
p13423
NsS'parameters'
p13424
(lp13425
(dp13426
S'description'
p13427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13428
sS'cpp_type'
p13429
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13430
sS'default'
p13431
g3
sS'name'
p13432
S'block'
p13433
sS'required'
p13434
I00
sS'group_name'
p13435
Nsa(dp13436
S'description'
p13437
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13438
sS'cpp_type'
p13439
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13440
sS'default'
p13441
g3
sS'name'
p13442
S'boundary'
p13443
sS'required'
p13444
I00
sS'group_name'
p13445
Nsa(dp13446
S'description'
p13447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13448
sS'cpp_type'
p13449
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13450
sS'default'
p13451
g3
sS'name'
p13452
S'control_tags'
p13453
sS'required'
p13454
I00
sS'group_name'
p13455
Nsa(dp13456
S'description'
p13457
S'Index for the current grain order parameter\n'
p13458
sS'cpp_type'
p13459
S'unsigned int'
p13460
sS'default'
p13461
g3
sS'name'
p13462
S'op_index'
p13463
sS'required'
p13464
I01
sS'group_name'
p13465
Nsa(dp13466
S'description'
p13467
S'Number of grain order parameters\n'
p13468
sS'cpp_type'
p13469
S'unsigned int'
p13470
sS'default'
p13471
g3
sS'name'
p13472
S'op_num'
p13473
sS'required'
p13474
I01
sS'group_name'
p13475
Nsa(dp13476
S'description'
p13477
g3
sS'cpp_type'
p13478
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13479
sS'default'
p13480
S'Tricrystal2CircleGrainsIC'
p13481
sS'name'
p13482
S'type'
p13483
sS'required'
p13484
I00
sS'group_name'
p13485
Nsa(dp13486
S'description'
p13487
S'The variable this initial condition is supposed to provide values for.\n'
p13488
sS'cpp_type'
p13489
S'VariableName'
p13490
sS'default'
p13491
g3
sS'name'
p13492
S'variable'
p13493
sS'required'
p13494
I01
sS'group_name'
p13495
NsasS'name'
p13496
S'/AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p13497
sasS'parameters'
p13498
NsS'name'
p13499
S'/AuxVariables/*/InitialCondition/<type>'
p13500
sasS'parameters'
p13501
(lp13502
(dp13503
S'description'
p13504
S'A string representing the Moose Object that will be built by this Action\n'
p13505
sS'cpp_type'
p13506
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13507
sS'default'
p13508
g3
sS'name'
p13509
S'type'
p13510
sS'required'
p13511
I01
sS'group_name'
p13512
NsasS'name'
p13513
S'/AuxVariables/*/InitialCondition'
p13514
sasS'parameters'
p13515
(lp13516
(dp13517
S'description'
p13518
S'The block id where this variable lives\n'
p13519
sS'cpp_type'
p13520
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p13521
sS'default'
p13522
g3
sS'name'
p13523
S'block'
p13524
sS'required'
p13525
I00
sS'group_name'
p13526
Nsa(dp13527
S'name'
p13528
S'family'
p13529
sS'cpp_type'
p13530
S'MooseEnum'
p13531
sS'default'
p13532
S'LAGRANGE'
p13533
sS'description'
p13534
S'Specifies the family of FE shape functions to use for this variable\n'
p13535
sS'required'
p13536
I00
sS'options'
p13537
S'LAGRANGE MONOMIAL SCALAR'
p13538
sS'group_name'
p13539
Nsa(dp13540
S'description'
p13541
S'Specifies the initial condition for this variable\n'
p13542
sS'cpp_type'
p13543
S'double'
p13544
sS'default'
p13545
g3
sS'name'
p13546
S'initial_condition'
p13547
sS'required'
p13548
I00
sS'group_name'
p13549
Nsa(dp13550
S'name'
p13551
S'order'
p13552
sS'cpp_type'
p13553
S'MooseEnum'
p13554
sS'default'
p13555
S'FIRST'
p13556
sS'description'
p13557
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p13558
sS'required'
p13559
I00
sS'options'
p13560
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p13561
sS'group_name'
p13562
Nsa(dp13563
S'description'
p13564
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p13565
sS'cpp_type'
p13566
S'std::vector<OutputName, std::allocator<OutputName> >'
p13567
sS'default'
p13568
g3
sS'name'
p13569
S'outputs'
p13570
sS'required'
p13571
I00
sS'group_name'
p13572
Nsa(dp13573
S'description'
p13574
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p13575
sS'cpp_type'
p13576
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13577
sS'default'
p13578
S'LATEST'
p13579
sS'name'
p13580
S'initial_from_file_timestep'
p13581
sS'required'
p13582
I00
sS'group_name'
p13583
S'Initial From File'
p13584
sa(dp13585
S'description'
p13586
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p13587
sS'cpp_type'
p13588
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13589
sS'default'
p13590
g3
sS'name'
p13591
S'initial_from_file_var'
p13592
sS'required'
p13593
I00
sS'group_name'
p13594
S'Initial From File'
p13595
sasS'name'
p13596
S'/AuxVariables/*'
p13597
sasS'parameters'
p13598
NsS'name'
p13599
S'/AuxVariables'
p13600
sa(dp13601
S'description'
p13602
g3
sS'subblocks'
p13603
(lp13604
(dp13605
S'description'
p13606
g3
sS'subblocks'
p13607
NsS'parameters'
p13608
(lp13609
(dp13610
S'description'
p13611
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13612
sS'cpp_type'
p13613
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13614
sS'default'
p13615
g3
sS'name'
p13616
S'boundary'
p13617
sS'required'
p13618
I01
sS'group_name'
p13619
Nsa(dp13620
S'description'
p13621
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13622
sS'cpp_type'
p13623
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13624
sS'default'
p13625
g3
sS'name'
p13626
S'control_tags'
p13627
sS'required'
p13628
I00
sS'group_name'
p13629
Nsa(dp13630
S'description'
p13631
S'Determines whether this object is calculated using an implicit or explicit form\n'
p13632
sS'cpp_type'
p13633
S'bool'
p13634
sS'default'
p13635
S'1'
p13636
sS'name'
p13637
S'implicit'
p13638
sS'required'
p13639
I00
sS'group_name'
p13640
S'Advanced'
p13641
sa(dp13642
S'description'
p13643
S'A string representing the Moose Object that will be built by this Action\n'
p13644
sS'cpp_type'
p13645
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13646
sS'default'
p13647
g3
sS'name'
p13648
S'type'
p13649
sS'required'
p13650
I01
sS'group_name'
p13651
Nsa(dp13652
S'description'
p13653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13654
sS'cpp_type'
p13655
S'bool'
p13656
sS'default'
p13657
S'0'
p13658
sS'name'
p13659
S'use_displaced_mesh'
p13660
sS'required'
p13661
I00
sS'group_name'
p13662
S'Advanced'
p13663
sa(dp13664
S'description'
p13665
S'The name of the variable that this boundary condition applies to\n'
p13666
sS'cpp_type'
p13667
S'NonlinearVariableName'
p13668
sS'default'
p13669
g3
sS'name'
p13670
S'variable'
p13671
sS'required'
p13672
I01
sS'group_name'
p13673
NsasS'name'
p13674
S'/BCs/*'
p13675
sa(dp13676
S'description'
p13677
S'Cahn-Hilliard fixed flux boundary condition using a tensorial (anisotropic) mobility\n'
p13678
sS'subblocks'
p13679
NsS'parameters'
p13680
(lp13681
(dp13682
S'description'
p13683
S'Vector of arguments of the mobility\n'
p13684
sS'cpp_type'
p13685
S'std::vector<VariableName>'
p13686
sS'default'
p13687
g3
sS'name'
p13688
S'args'
p13689
sS'required'
p13690
I00
sS'group_name'
p13691
Nsa(dp13692
S'description'
p13693
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13694
sS'cpp_type'
p13695
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13696
sS'default'
p13697
g3
sS'name'
p13698
S'boundary'
p13699
sS'required'
p13700
I01
sS'group_name'
p13701
Nsa(dp13702
S'description'
p13703
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13704
sS'cpp_type'
p13705
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13706
sS'default'
p13707
g3
sS'name'
p13708
S'control_tags'
p13709
sS'required'
p13710
I00
sS'group_name'
p13711
Nsa(dp13712
S'description'
p13713
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p13714
sS'cpp_type'
p13715
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p13716
sS'default'
p13717
g3
sS'name'
p13718
S'diag_save_in'
p13719
sS'required'
p13720
I00
sS'group_name'
p13721
S'Advanced'
p13722
sa(dp13723
S'description'
p13724
S'The flux set at the boundary\n'
p13725
sS'cpp_type'
p13726
S'libMesh::VectorValue<double>'
p13727
sS'default'
p13728
g3
sS'name'
p13729
S'flux'
p13730
sS'required'
p13731
I00
sS'group_name'
p13732
Nsa(dp13733
S'description'
p13734
S'Determines whether this object is calculated using an implicit or explicit form\n'
p13735
sS'cpp_type'
p13736
S'bool'
p13737
sS'default'
p13738
S'1'
p13739
sS'name'
p13740
S'implicit'
p13741
sS'required'
p13742
I00
sS'group_name'
p13743
S'Advanced'
p13744
sa(dp13745
S'description'
p13746
S'The mobility used with the kernel\n'
p13747
sS'cpp_type'
p13748
S'MaterialPropertyName'
p13749
sS'default'
p13750
S'M'
p13751
sS'name'
p13752
S'mob_name'
p13753
sS'required'
p13754
I00
sS'group_name'
p13755
Nsa(dp13756
S'description'
p13757
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p13758
sS'cpp_type'
p13759
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p13760
sS'default'
p13761
g3
sS'name'
p13762
S'save_in'
p13763
sS'required'
p13764
I00
sS'group_name'
p13765
S'Advanced'
p13766
sa(dp13767
S'description'
p13768
S'The seed for the master random number generator\n'
p13769
sS'cpp_type'
p13770
S'unsigned int'
p13771
sS'default'
p13772
S'0'
p13773
sS'name'
p13774
S'seed'
p13775
sS'required'
p13776
I00
sS'group_name'
p13777
S'Advanced'
p13778
sa(dp13779
S'description'
p13780
g3
sS'cpp_type'
p13781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13782
sS'default'
p13783
S'CahnHilliardAnisoFluxBC'
p13784
sS'name'
p13785
S'type'
p13786
sS'required'
p13787
I00
sS'group_name'
p13788
Nsa(dp13789
S'description'
p13790
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13791
sS'cpp_type'
p13792
S'bool'
p13793
sS'default'
p13794
S'0'
p13795
sS'name'
p13796
S'use_displaced_mesh'
p13797
sS'required'
p13798
I00
sS'group_name'
p13799
S'Advanced'
p13800
sa(dp13801
S'description'
p13802
S'The name of the variable that this boundary condition applies to\n'
p13803
sS'cpp_type'
p13804
S'NonlinearVariableName'
p13805
sS'default'
p13806
g3
sS'name'
p13807
S'variable'
p13808
sS'required'
p13809
I01
sS'group_name'
p13810
NsasS'name'
p13811
S'/BCs/CahnHilliardAnisoFluxBC'
p13812
sa(dp13813
S'description'
p13814
S'Cahn-Hilliard fixed flux boundary condition using a scalar (isotropic) mobility\n'
p13815
sS'subblocks'
p13816
NsS'parameters'
p13817
(lp13818
(dp13819
S'description'
p13820
S'Vector of arguments of the mobility\n'
p13821
sS'cpp_type'
p13822
S'std::vector<VariableName>'
p13823
sS'default'
p13824
g3
sS'name'
p13825
S'args'
p13826
sS'required'
p13827
I00
sS'group_name'
p13828
Nsa(dp13829
S'description'
p13830
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13831
sS'cpp_type'
p13832
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13833
sS'default'
p13834
g3
sS'name'
p13835
S'boundary'
p13836
sS'required'
p13837
I01
sS'group_name'
p13838
Nsa(dp13839
S'description'
p13840
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13841
sS'cpp_type'
p13842
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p13843
sS'default'
p13844
g3
sS'name'
p13845
S'control_tags'
p13846
sS'required'
p13847
I00
sS'group_name'
p13848
Nsa(dp13849
S'description'
p13850
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p13851
sS'cpp_type'
p13852
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p13853
sS'default'
p13854
g3
sS'name'
p13855
S'diag_save_in'
p13856
sS'required'
p13857
I00
sS'group_name'
p13858
S'Advanced'
p13859
sa(dp13860
S'description'
p13861
S'The flux set at the boundary\n'
p13862
sS'cpp_type'
p13863
S'libMesh::VectorValue<double>'
p13864
sS'default'
p13865
g3
sS'name'
p13866
S'flux'
p13867
sS'required'
p13868
I00
sS'group_name'
p13869
Nsa(dp13870
S'description'
p13871
S'Determines whether this object is calculated using an implicit or explicit form\n'
p13872
sS'cpp_type'
p13873
S'bool'
p13874
sS'default'
p13875
S'1'
p13876
sS'name'
p13877
S'implicit'
p13878
sS'required'
p13879
I00
sS'group_name'
p13880
S'Advanced'
p13881
sa(dp13882
S'description'
p13883
S'The mobility used with the kernel\n'
p13884
sS'cpp_type'
p13885
S'MaterialPropertyName'
p13886
sS'default'
p13887
S'M'
p13888
sS'name'
p13889
S'mob_name'
p13890
sS'required'
p13891
I00
sS'group_name'
p13892
Nsa(dp13893
S'description'
p13894
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p13895
sS'cpp_type'
p13896
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p13897
sS'default'
p13898
g3
sS'name'
p13899
S'save_in'
p13900
sS'required'
p13901
I00
sS'group_name'
p13902
S'Advanced'
p13903
sa(dp13904
S'description'
p13905
S'The seed for the master random number generator\n'
p13906
sS'cpp_type'
p13907
S'unsigned int'
p13908
sS'default'
p13909
S'0'
p13910
sS'name'
p13911
S'seed'
p13912
sS'required'
p13913
I00
sS'group_name'
p13914
S'Advanced'
p13915
sa(dp13916
S'description'
p13917
g3
sS'cpp_type'
p13918
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p13919
sS'default'
p13920
S'CahnHilliardFluxBC'
p13921
sS'name'
p13922
S'type'
p13923
sS'required'
p13924
I00
sS'group_name'
p13925
Nsa(dp13926
S'description'
p13927
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13928
sS'cpp_type'
p13929
S'bool'
p13930
sS'default'
p13931
S'0'
p13932
sS'name'
p13933
S'use_displaced_mesh'
p13934
sS'required'
p13935
I00
sS'group_name'
p13936
S'Advanced'
p13937
sa(dp13938
S'description'
p13939
S'The name of the variable that this boundary condition applies to\n'
p13940
sS'cpp_type'
p13941
S'NonlinearVariableName'
p13942
sS'default'
p13943
g3
sS'name'
p13944
S'variable'
p13945
sS'required'
p13946
I01
sS'group_name'
p13947
NsasS'name'
p13948
S'/BCs/CahnHilliardFluxBC'
p13949
sa(dp13950
S'description'
p13951
g3
sS'subblocks'
p13952
(lp13953
(dp13954
S'description'
p13955
g3
sS'subblocks'
p13956
NsS'parameters'
p13957
(lp13958
(dp13959
S'description'
p13960
S'The list of boundary IDs from the mesh where the pressure will be applied\n'
p13961
sS'cpp_type'
p13962
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p13963
sS'default'
p13964
g3
sS'name'
p13965
S'boundary'
p13966
sS'required'
p13967
I01
sS'group_name'
p13968
Nsa(dp13969
S'description'
p13970
S'The x displacement\n'
p13971
sS'cpp_type'
p13972
S'NonlinearVariableName'
p13973
sS'default'
p13974
g3
sS'name'
p13975
S'disp_x'
p13976
sS'required'
p13977
I01
sS'group_name'
p13978
Nsa(dp13979
S'description'
p13980
S'The y displacement\n'
p13981
sS'cpp_type'
p13982
S'NonlinearVariableName'
p13983
sS'default'
p13984
g3
sS'name'
p13985
S'disp_y'
p13986
sS'required'
p13987
I00
sS'group_name'
p13988
Nsa(dp13989
S'description'
p13990
S'The z displacement\n'
p13991
sS'cpp_type'
p13992
S'NonlinearVariableName'
p13993
sS'default'
p13994
g3
sS'name'
p13995
S'disp_z'
p13996
sS'required'
p13997
I00
sS'group_name'
p13998
Nsa(dp13999
S'description'
p14000
S'The name to use for the plenum pressure value.\n'
p14001
sS'cpp_type'
p14002
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14003
sS'default'
p14004
g3
sS'name'
p14005
S'output'
p14006
sS'required'
p14007
I00
sS'group_name'
p14008
Nsa(dp14009
S'description'
p14010
S'The save_in variables for x displacement\n'
p14011
sS'cpp_type'
p14012
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14013
sS'default'
p14014
g3
sS'name'
p14015
S'save_in_disp_x'
p14016
sS'required'
p14017
I00
sS'group_name'
p14018
Nsa(dp14019
S'description'
p14020
S'The save_in variables for y displacement\n'
p14021
sS'cpp_type'
p14022
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14023
sS'default'
p14024
g3
sS'name'
p14025
S'save_in_disp_y'
p14026
sS'required'
p14027
I00
sS'group_name'
p14028
Nsa(dp14029
S'description'
p14030
S'The save_in variables for z displacement\n'
p14031
sS'cpp_type'
p14032
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14033
sS'default'
p14034
g3
sS'name'
p14035
S'save_in_disp_z'
p14036
sS'required'
p14037
I00
sS'group_name'
p14038
Nsa(dp14039
S'description'
p14040
S'The name to use when reporting the initial moles of gas.\n'
p14041
sS'cpp_type'
p14042
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14043
sS'default'
p14044
g3
sS'name'
p14045
S'output_initial_moles'
p14046
sS'required'
p14047
I00
sS'group_name'
p14048
Nsa(dp14049
S'description'
p14050
S'The universal gas constant for the units used.\n'
p14051
sS'cpp_type'
p14052
S'double'
p14053
sS'default'
p14054
g3
sS'name'
p14055
S'R'
p14056
sS'required'
p14057
I01
sS'group_name'
p14058
Nsa(dp14059
S'name'
p14060
S'execute_on'
p14061
sS'cpp_type'
p14062
S'MultiMooseEnum'
p14063
sS'default'
p14064
S'LINEAR'
p14065
sS'description'
p14066
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p14067
sS'required'
p14068
I00
sS'options'
p14069
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p14070
sS'group_name'
p14071
Nsa(dp14072
S'description'
p14073
S'The initial pressure in the cavity.  If not given, a zero initial pressure will be used.\n'
p14074
sS'cpp_type'
p14075
S'double'
p14076
sS'default'
p14077
S'0'
p14078
sS'name'
p14079
S'initial_pressure'
p14080
sS'required'
p14081
I00
sS'group_name'
p14082
Nsa(dp14083
S'description'
p14084
S'Initial temperature (optional)\n'
p14085
sS'cpp_type'
p14086
S'double'
p14087
sS'default'
p14088
g3
sS'name'
p14089
S'initial_temperature'
p14090
sS'required'
p14091
I00
sS'group_name'
p14092
Nsa(dp14093
S'description'
p14094
S'The name of the postprocessor(s) that holds the amount of material injected into the cavity.\n'
p14095
sS'cpp_type'
p14096
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p14097
sS'default'
p14098
g3
sS'name'
p14099
S'material_input'
p14100
sS'required'
p14101
I00
sS'group_name'
p14102
Nsa(dp14103
S'description'
p14104
S'The amount of time during which the pressure will ramp from zero to its true value.\n'
p14105
sS'cpp_type'
p14106
S'double'
p14107
sS'default'
p14108
S'0'
p14109
sS'name'
p14110
S'startup_time'
p14111
sS'required'
p14112
I00
sS'group_name'
p14113
Nsa(dp14114
S'description'
p14115
S'The name of the average temperature postprocessor value.\n'
p14116
sS'cpp_type'
p14117
S'PostprocessorName'
p14118
sS'default'
p14119
g3
sS'name'
p14120
S'temperature'
p14121
sS'required'
p14122
I01
sS'group_name'
p14123
Nsa(dp14124
S'description'
p14125
S'The name of the internal volume postprocessor value.\n'
p14126
sS'cpp_type'
p14127
S'PostprocessorName'
p14128
sS'default'
p14129
g3
sS'name'
p14130
S'volume'
p14131
sS'required'
p14132
I01
sS'group_name'
p14133
NsasS'name'
p14134
S'/BCs/CavityPressure/*'
p14135
sasS'parameters'
p14136
NsS'name'
p14137
S'/BCs/CavityPressure'
p14138
sa(dp14139
S'description'
p14140
g3
sS'subblocks'
p14141
NsS'parameters'
p14142
(lp14143
(dp14144
S'description'
p14145
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14146
sS'cpp_type'
p14147
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14148
sS'default'
p14149
g3
sS'name'
p14150
S'boundary'
p14151
sS'required'
p14152
I01
sS'group_name'
p14153
Nsa(dp14154
S'description'
p14155
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14156
sS'cpp_type'
p14157
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14158
sS'default'
p14159
g3
sS'name'
p14160
S'control_tags'
p14161
sS'required'
p14162
I00
sS'group_name'
p14163
Nsa(dp14164
S'description'
p14165
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14166
sS'cpp_type'
p14167
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14168
sS'default'
p14169
g3
sS'name'
p14170
S'diag_save_in'
p14171
sS'required'
p14172
I00
sS'group_name'
p14173
S'Advanced'
p14174
sa(dp14175
S'description'
p14176
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14177
sS'cpp_type'
p14178
S'bool'
p14179
sS'default'
p14180
S'1'
p14181
sS'name'
p14182
S'implicit'
p14183
sS'required'
p14184
I00
sS'group_name'
p14185
S'Advanced'
p14186
sa(dp14187
S'description'
p14188
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14189
sS'cpp_type'
p14190
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14191
sS'default'
p14192
g3
sS'name'
p14193
S'save_in'
p14194
sS'required'
p14195
I00
sS'group_name'
p14196
S'Advanced'
p14197
sa(dp14198
S'description'
p14199
S'The seed for the master random number generator\n'
p14200
sS'cpp_type'
p14201
S'unsigned int'
p14202
sS'default'
p14203
S'0'
p14204
sS'name'
p14205
S'seed'
p14206
sS'required'
p14207
I00
sS'group_name'
p14208
S'Advanced'
p14209
sa(dp14210
S'description'
p14211
g3
sS'cpp_type'
p14212
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14213
sS'default'
p14214
S'ChemicalOutFlowBC'
p14215
sS'name'
p14216
S'type'
p14217
sS'required'
p14218
I00
sS'group_name'
p14219
Nsa(dp14220
S'description'
p14221
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14222
sS'cpp_type'
p14223
S'bool'
p14224
sS'default'
p14225
S'0'
p14226
sS'name'
p14227
S'use_displaced_mesh'
p14228
sS'required'
p14229
I00
sS'group_name'
p14230
S'Advanced'
p14231
sa(dp14232
S'description'
p14233
S'The name of the variable that this boundary condition applies to\n'
p14234
sS'cpp_type'
p14235
S'NonlinearVariableName'
p14236
sS'default'
p14237
g3
sS'name'
p14238
S'variable'
p14239
sS'required'
p14240
I01
sS'group_name'
p14241
NsasS'name'
p14242
S'/BCs/ChemicalOutFlowBC'
p14243
sa(dp14244
S'description'
p14245
g3
sS'subblocks'
p14246
NsS'parameters'
p14247
(lp14248
(dp14249
S'description'
p14250
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14251
sS'cpp_type'
p14252
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14253
sS'default'
p14254
g3
sS'name'
p14255
S'boundary'
p14256
sS'required'
p14257
I01
sS'group_name'
p14258
Nsa(dp14259
S'description'
p14260
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14261
sS'cpp_type'
p14262
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14263
sS'default'
p14264
g3
sS'name'
p14265
S'control_tags'
p14266
sS'required'
p14267
I00
sS'group_name'
p14268
Nsa(dp14269
S'description'
p14270
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14271
sS'cpp_type'
p14272
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14273
sS'default'
p14274
g3
sS'name'
p14275
S'diag_save_in'
p14276
sS'required'
p14277
I00
sS'group_name'
p14278
S'Advanced'
p14279
sa(dp14280
S'description'
p14281
g3
sS'cpp_type'
p14282
S'double'
p14283
sS'default'
p14284
S'0'
p14285
sS'name'
p14286
S'duration'
p14287
sS'required'
p14288
I00
sS'group_name'
p14289
Nsa(dp14290
S'description'
p14291
g3
sS'cpp_type'
p14292
S'double'
p14293
sS'default'
p14294
S'500'
p14295
sS'name'
p14296
S'final'
p14297
sS'required'
p14298
I00
sS'group_name'
p14299
Nsa(dp14300
S'description'
p14301
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14302
sS'cpp_type'
p14303
S'bool'
p14304
sS'default'
p14305
S'1'
p14306
sS'name'
p14307
S'implicit'
p14308
sS'required'
p14309
I00
sS'group_name'
p14310
S'Advanced'
p14311
sa(dp14312
S'description'
p14313
g3
sS'cpp_type'
p14314
S'double'
p14315
sS'default'
p14316
S'500'
p14317
sS'name'
p14318
S'initial'
p14319
sS'required'
p14320
I00
sS'group_name'
p14321
Nsa(dp14322
S'description'
p14323
g3
sS'cpp_type'
p14324
S'double'
p14325
sS'default'
p14326
S'7500'
p14327
sS'name'
p14328
S'rate'
p14329
sS'required'
p14330
I00
sS'group_name'
p14331
Nsa(dp14332
S'description'
p14333
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14334
sS'cpp_type'
p14335
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14336
sS'default'
p14337
g3
sS'name'
p14338
S'save_in'
p14339
sS'required'
p14340
I00
sS'group_name'
p14341
S'Advanced'
p14342
sa(dp14343
S'description'
p14344
S'The seed for the master random number generator\n'
p14345
sS'cpp_type'
p14346
S'unsigned int'
p14347
sS'default'
p14348
S'0'
p14349
sS'name'
p14350
S'seed'
p14351
sS'required'
p14352
I00
sS'group_name'
p14353
S'Advanced'
p14354
sa(dp14355
S'description'
p14356
g3
sS'cpp_type'
p14357
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14358
sS'default'
p14359
S'ConvectiveFluxBC'
p14360
sS'name'
p14361
S'type'
p14362
sS'required'
p14363
I00
sS'group_name'
p14364
Nsa(dp14365
S'description'
p14366
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14367
sS'cpp_type'
p14368
S'bool'
p14369
sS'default'
p14370
S'0'
p14371
sS'name'
p14372
S'use_displaced_mesh'
p14373
sS'required'
p14374
I00
sS'group_name'
p14375
S'Advanced'
p14376
sa(dp14377
S'description'
p14378
S'The name of the variable that this boundary condition applies to\n'
p14379
sS'cpp_type'
p14380
S'NonlinearVariableName'
p14381
sS'default'
p14382
g3
sS'name'
p14383
S'variable'
p14384
sS'required'
p14385
I01
sS'group_name'
p14386
NsasS'name'
p14387
S'/BCs/ConvectiveFluxBC'
p14388
sa(dp14389
S'description'
p14390
g3
sS'subblocks'
p14391
NsS'parameters'
p14392
(lp14393
(dp14394
S'description'
p14395
S'Function describing far-field temperature\n'
p14396
sS'cpp_type'
p14397
S'FunctionName'
p14398
sS'default'
p14399
g3
sS'name'
p14400
S'T_infinity'
p14401
sS'required'
p14402
I01
sS'group_name'
p14403
Nsa(dp14404
S'description'
p14405
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14406
sS'cpp_type'
p14407
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14408
sS'default'
p14409
g3
sS'name'
p14410
S'boundary'
p14411
sS'required'
p14412
I01
sS'group_name'
p14413
Nsa(dp14414
S'description'
p14415
S'Heat transfer coefficient\n'
p14416
sS'cpp_type'
p14417
S'double'
p14418
sS'default'
p14419
g3
sS'name'
p14420
S'coefficient'
p14421
sS'required'
p14422
I01
sS'group_name'
p14423
Nsa(dp14424
S'description'
p14425
S'Heat transfer coefficient function\n'
p14426
sS'cpp_type'
p14427
S'FunctionName'
p14428
sS'default'
p14429
g3
sS'name'
p14430
S'coefficient_function'
p14431
sS'required'
p14432
I00
sS'group_name'
p14433
Nsa(dp14434
S'description'
p14435
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14436
sS'cpp_type'
p14437
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14438
sS'default'
p14439
g3
sS'name'
p14440
S'control_tags'
p14441
sS'required'
p14442
I00
sS'group_name'
p14443
Nsa(dp14444
S'description'
p14445
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14446
sS'cpp_type'
p14447
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14448
sS'default'
p14449
g3
sS'name'
p14450
S'diag_save_in'
p14451
sS'required'
p14452
I00
sS'group_name'
p14453
S'Advanced'
p14454
sa(dp14455
S'description'
p14456
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14457
sS'cpp_type'
p14458
S'bool'
p14459
sS'default'
p14460
S'1'
p14461
sS'name'
p14462
S'implicit'
p14463
sS'required'
p14464
I00
sS'group_name'
p14465
S'Advanced'
p14466
sa(dp14467
S'description'
p14468
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14469
sS'cpp_type'
p14470
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14471
sS'default'
p14472
g3
sS'name'
p14473
S'save_in'
p14474
sS'required'
p14475
I00
sS'group_name'
p14476
S'Advanced'
p14477
sa(dp14478
S'description'
p14479
S'The seed for the master random number generator\n'
p14480
sS'cpp_type'
p14481
S'unsigned int'
p14482
sS'default'
p14483
S'0'
p14484
sS'name'
p14485
S'seed'
p14486
sS'required'
p14487
I00
sS'group_name'
p14488
S'Advanced'
p14489
sa(dp14490
S'description'
p14491
g3
sS'cpp_type'
p14492
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14493
sS'default'
p14494
S'ConvectiveFluxFunction'
p14495
sS'name'
p14496
S'type'
p14497
sS'required'
p14498
I00
sS'group_name'
p14499
Nsa(dp14500
S'description'
p14501
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14502
sS'cpp_type'
p14503
S'bool'
p14504
sS'default'
p14505
S'0'
p14506
sS'name'
p14507
S'use_displaced_mesh'
p14508
sS'required'
p14509
I00
sS'group_name'
p14510
S'Advanced'
p14511
sa(dp14512
S'description'
p14513
S'The name of the variable that this boundary condition applies to\n'
p14514
sS'cpp_type'
p14515
S'NonlinearVariableName'
p14516
sS'default'
p14517
g3
sS'name'
p14518
S'variable'
p14519
sS'required'
p14520
I01
sS'group_name'
p14521
NsasS'name'
p14522
S'/BCs/ConvectiveFluxFunction'
p14523
sa(dp14524
S'description'
p14525
g3
sS'subblocks'
p14526
NsS'parameters'
p14527
(lp14528
(dp14529
S'description'
p14530
S'Field holding far-field temperature\n'
p14531
sS'cpp_type'
p14532
S'std::vector<VariableName>'
p14533
sS'default'
p14534
g3
sS'name'
p14535
S'T_infinity'
p14536
sS'required'
p14537
I01
sS'group_name'
p14538
Nsa(dp14539
S'description'
p14540
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14541
sS'cpp_type'
p14542
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14543
sS'default'
p14544
g3
sS'name'
p14545
S'boundary'
p14546
sS'required'
p14547
I01
sS'group_name'
p14548
Nsa(dp14549
S'description'
p14550
S'Heat transfer coefficient\n'
p14551
sS'cpp_type'
p14552
S'double'
p14553
sS'default'
p14554
g3
sS'name'
p14555
S'coefficient'
p14556
sS'required'
p14557
I01
sS'group_name'
p14558
Nsa(dp14559
S'description'
p14560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14561
sS'cpp_type'
p14562
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14563
sS'default'
p14564
g3
sS'name'
p14565
S'control_tags'
p14566
sS'required'
p14567
I00
sS'group_name'
p14568
Nsa(dp14569
S'description'
p14570
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14571
sS'cpp_type'
p14572
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14573
sS'default'
p14574
g3
sS'name'
p14575
S'diag_save_in'
p14576
sS'required'
p14577
I00
sS'group_name'
p14578
S'Advanced'
p14579
sa(dp14580
S'description'
p14581
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14582
sS'cpp_type'
p14583
S'bool'
p14584
sS'default'
p14585
S'1'
p14586
sS'name'
p14587
S'implicit'
p14588
sS'required'
p14589
I00
sS'group_name'
p14590
S'Advanced'
p14591
sa(dp14592
S'description'
p14593
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14594
sS'cpp_type'
p14595
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14596
sS'default'
p14597
g3
sS'name'
p14598
S'save_in'
p14599
sS'required'
p14600
I00
sS'group_name'
p14601
S'Advanced'
p14602
sa(dp14603
S'description'
p14604
S'The seed for the master random number generator\n'
p14605
sS'cpp_type'
p14606
S'unsigned int'
p14607
sS'default'
p14608
S'0'
p14609
sS'name'
p14610
S'seed'
p14611
sS'required'
p14612
I00
sS'group_name'
p14613
S'Advanced'
p14614
sa(dp14615
S'description'
p14616
g3
sS'cpp_type'
p14617
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14618
sS'default'
p14619
S'CoupledConvectiveFlux'
p14620
sS'name'
p14621
S'type'
p14622
sS'required'
p14623
I00
sS'group_name'
p14624
Nsa(dp14625
S'description'
p14626
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14627
sS'cpp_type'
p14628
S'bool'
p14629
sS'default'
p14630
S'0'
p14631
sS'name'
p14632
S'use_displaced_mesh'
p14633
sS'required'
p14634
I00
sS'group_name'
p14635
S'Advanced'
p14636
sa(dp14637
S'description'
p14638
S'The name of the variable that this boundary condition applies to\n'
p14639
sS'cpp_type'
p14640
S'NonlinearVariableName'
p14641
sS'default'
p14642
g3
sS'name'
p14643
S'variable'
p14644
sS'required'
p14645
I01
sS'group_name'
p14646
NsasS'name'
p14647
S'/BCs/CoupledConvectiveFlux'
p14648
sa(dp14649
S'description'
p14650
g3
sS'subblocks'
p14651
NsS'parameters'
p14652
(lp14653
(dp14654
S'description'
p14655
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14656
sS'cpp_type'
p14657
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14658
sS'default'
p14659
g3
sS'name'
p14660
S'boundary'
p14661
sS'required'
p14662
I01
sS'group_name'
p14663
Nsa(dp14664
S'description'
p14665
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14666
sS'cpp_type'
p14667
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14668
sS'default'
p14669
g3
sS'name'
p14670
S'control_tags'
p14671
sS'required'
p14672
I00
sS'group_name'
p14673
Nsa(dp14674
S'description'
p14675
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14676
sS'cpp_type'
p14677
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14678
sS'default'
p14679
g3
sS'name'
p14680
S'diag_save_in'
p14681
sS'required'
p14682
I00
sS'group_name'
p14683
S'Advanced'
p14684
sa(dp14685
S'description'
p14686
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14687
sS'cpp_type'
p14688
S'bool'
p14689
sS'default'
p14690
S'1'
p14691
sS'name'
p14692
S'implicit'
p14693
sS'required'
p14694
I00
sS'group_name'
p14695
S'Advanced'
p14696
sa(dp14697
S'description'
p14698
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14699
sS'cpp_type'
p14700
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14701
sS'default'
p14702
g3
sS'name'
p14703
S'save_in'
p14704
sS'required'
p14705
I00
sS'group_name'
p14706
S'Advanced'
p14707
sa(dp14708
S'description'
p14709
S'The seed for the master random number generator\n'
p14710
sS'cpp_type'
p14711
S'unsigned int'
p14712
sS'default'
p14713
S'0'
p14714
sS'name'
p14715
S'seed'
p14716
sS'required'
p14717
I00
sS'group_name'
p14718
S'Advanced'
p14719
sa(dp14720
S'description'
p14721
g3
sS'cpp_type'
p14722
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14723
sS'default'
p14724
S'CoupledNeumannBC'
p14725
sS'name'
p14726
S'type'
p14727
sS'required'
p14728
I00
sS'group_name'
p14729
Nsa(dp14730
S'description'
p14731
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14732
sS'cpp_type'
p14733
S'bool'
p14734
sS'default'
p14735
S'0'
p14736
sS'name'
p14737
S'use_displaced_mesh'
p14738
sS'required'
p14739
I00
sS'group_name'
p14740
S'Advanced'
p14741
sa(dp14742
S'description'
p14743
S'The name of the variable that this boundary condition applies to\n'
p14744
sS'cpp_type'
p14745
S'NonlinearVariableName'
p14746
sS'default'
p14747
g3
sS'name'
p14748
S'variable'
p14749
sS'required'
p14750
I01
sS'group_name'
p14751
NsasS'name'
p14752
S'/BCs/CoupledNeumannBC'
p14753
sa(dp14754
S'description'
p14755
g3
sS'subblocks'
p14756
NsS'parameters'
p14757
(lp14758
(dp14759
S'description'
p14760
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14761
sS'cpp_type'
p14762
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14763
sS'default'
p14764
g3
sS'name'
p14765
S'boundary'
p14766
sS'required'
p14767
I01
sS'group_name'
p14768
Nsa(dp14769
S'description'
p14770
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14771
sS'cpp_type'
p14772
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14773
sS'default'
p14774
g3
sS'name'
p14775
S'control_tags'
p14776
sS'required'
p14777
I00
sS'group_name'
p14778
Nsa(dp14779
S'description'
p14780
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14781
sS'cpp_type'
p14782
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14783
sS'default'
p14784
g3
sS'name'
p14785
S'diag_save_in'
p14786
sS'required'
p14787
I00
sS'group_name'
p14788
S'Advanced'
p14789
sa(dp14790
S'description'
p14791
S'Epsilon\n'
p14792
sS'cpp_type'
p14793
S'double'
p14794
sS'default'
p14795
g3
sS'name'
p14796
S'epsilon'
p14797
sS'required'
p14798
I01
sS'group_name'
p14799
Nsa(dp14800
S'description'
p14801
S'The forcing function.\n'
p14802
sS'cpp_type'
p14803
S'FunctionName'
p14804
sS'default'
p14805
g3
sS'name'
p14806
S'function'
p14807
sS'required'
p14808
I01
sS'group_name'
p14809
Nsa(dp14810
S'description'
p14811
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14812
sS'cpp_type'
p14813
S'bool'
p14814
sS'default'
p14815
S'1'
p14816
sS'name'
p14817
S'implicit'
p14818
sS'required'
p14819
I00
sS'group_name'
p14820
S'Advanced'
p14821
sa(dp14822
S'description'
p14823
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14824
sS'cpp_type'
p14825
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14826
sS'default'
p14827
g3
sS'name'
p14828
S'save_in'
p14829
sS'required'
p14830
I00
sS'group_name'
p14831
S'Advanced'
p14832
sa(dp14833
S'description'
p14834
S'The seed for the master random number generator\n'
p14835
sS'cpp_type'
p14836
S'unsigned int'
p14837
sS'default'
p14838
S'0'
p14839
sS'name'
p14840
S'seed'
p14841
sS'required'
p14842
I00
sS'group_name'
p14843
S'Advanced'
p14844
sa(dp14845
S'description'
p14846
S'Sigma\n'
p14847
sS'cpp_type'
p14848
S'double'
p14849
sS'default'
p14850
g3
sS'name'
p14851
S'sigma'
p14852
sS'required'
p14853
I01
sS'group_name'
p14854
Nsa(dp14855
S'description'
p14856
g3
sS'cpp_type'
p14857
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p14858
sS'default'
p14859
S'DGFunctionDiffusionDirichletBC'
p14860
sS'name'
p14861
S'type'
p14862
sS'required'
p14863
I00
sS'group_name'
p14864
Nsa(dp14865
S'description'
p14866
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14867
sS'cpp_type'
p14868
S'bool'
p14869
sS'default'
p14870
S'0'
p14871
sS'name'
p14872
S'use_displaced_mesh'
p14873
sS'required'
p14874
I00
sS'group_name'
p14875
S'Advanced'
p14876
sa(dp14877
S'description'
p14878
S'The value the variable should have on the boundary\n'
p14879
sS'cpp_type'
p14880
S'double'
p14881
sS'default'
p14882
S'0'
p14883
sS'name'
p14884
S'value'
p14885
sS'required'
p14886
I00
sS'group_name'
p14887
Nsa(dp14888
S'description'
p14889
S'The name of the variable that this boundary condition applies to\n'
p14890
sS'cpp_type'
p14891
S'NonlinearVariableName'
p14892
sS'default'
p14893
g3
sS'name'
p14894
S'variable'
p14895
sS'required'
p14896
I01
sS'group_name'
p14897
NsasS'name'
p14898
S'/BCs/DGFunctionDiffusionDirichletBC'
p14899
sa(dp14900
S'description'
p14901
g3
sS'subblocks'
p14902
NsS'parameters'
p14903
(lp14904
(dp14905
S'description'
p14906
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14907
sS'cpp_type'
p14908
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14909
sS'default'
p14910
g3
sS'name'
p14911
S'boundary'
p14912
sS'required'
p14913
I01
sS'group_name'
p14914
Nsa(dp14915
S'description'
p14916
S'The viscosity coefficient\n'
p14917
sS'cpp_type'
p14918
S'double'
p14919
sS'default'
p14920
S'1'
p14921
sS'name'
p14922
S'coefficient'
p14923
sS'required'
p14924
I00
sS'group_name'
p14925
Nsa(dp14926
S'description'
p14927
S'The displacement component corresponding the variable this BC acts on.\n'
p14928
sS'cpp_type'
p14929
S'unsigned int'
p14930
sS'default'
p14931
g3
sS'name'
p14932
S'component'
p14933
sS'required'
p14934
I01
sS'group_name'
p14935
Nsa(dp14936
S'description'
p14937
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14938
sS'cpp_type'
p14939
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p14940
sS'default'
p14941
g3
sS'name'
p14942
S'control_tags'
p14943
sS'required'
p14944
I00
sS'group_name'
p14945
Nsa(dp14946
S'description'
p14947
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p14948
sS'cpp_type'
p14949
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p14950
sS'default'
p14951
g3
sS'name'
p14952
S'diag_save_in'
p14953
sS'required'
p14954
I00
sS'group_name'
p14955
S'Advanced'
p14956
sa(dp14957
S'description'
p14958
S'Displacement in the x direction\n'
p14959
sS'cpp_type'
p14960
S'std::vector<VariableName>'
p14961
sS'default'
p14962
g3
sS'name'
p14963
S'disp_x'
p14964
sS'required'
p14965
I01
sS'group_name'
p14966
Nsa(dp14967
S'description'
p14968
S'Displacement in the y direction\n'
p14969
sS'cpp_type'
p14970
S'std::vector<VariableName>'
p14971
sS'default'
p14972
g3
sS'name'
p14973
S'disp_y'
p14974
sS'required'
p14975
I00
sS'group_name'
p14976
Nsa(dp14977
S'description'
p14978
S'Displacement in the z direction\n'
p14979
sS'cpp_type'
p14980
S'std::vector<VariableName>'
p14981
sS'default'
p14982
g3
sS'name'
p14983
S'disp_z'
p14984
sS'required'
p14985
I00
sS'group_name'
p14986
Nsa(dp14987
S'description'
p14988
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14989
sS'cpp_type'
p14990
S'bool'
p14991
sS'default'
p14992
S'1'
p14993
sS'name'
p14994
S'implicit'
p14995
sS'required'
p14996
I00
sS'group_name'
p14997
S'Advanced'
p14998
sa(dp14999
S'description'
p15000
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15001
sS'cpp_type'
p15002
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15003
sS'default'
p15004
g3
sS'name'
p15005
S'save_in'
p15006
sS'required'
p15007
I00
sS'group_name'
p15008
S'Advanced'
p15009
sa(dp15010
S'description'
p15011
S'The seed for the master random number generator\n'
p15012
sS'cpp_type'
p15013
S'unsigned int'
p15014
sS'default'
p15015
S'0'
p15016
sS'name'
p15017
S'seed'
p15018
sS'required'
p15019
I00
sS'group_name'
p15020
S'Advanced'
p15021
sa(dp15022
S'description'
p15023
g3
sS'cpp_type'
p15024
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15025
sS'default'
p15026
S'DashpotBC'
p15027
sS'name'
p15028
S'type'
p15029
sS'required'
p15030
I00
sS'group_name'
p15031
Nsa(dp15032
S'description'
p15033
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15034
sS'cpp_type'
p15035
S'bool'
p15036
sS'default'
p15037
S'0'
p15038
sS'name'
p15039
S'use_displaced_mesh'
p15040
sS'required'
p15041
I00
sS'group_name'
p15042
S'Advanced'
p15043
sa(dp15044
S'description'
p15045
S'The name of the variable that this boundary condition applies to\n'
p15046
sS'cpp_type'
p15047
S'NonlinearVariableName'
p15048
sS'default'
p15049
g3
sS'name'
p15050
S'variable'
p15051
sS'required'
p15052
I01
sS'group_name'
p15053
NsasS'name'
p15054
S'/BCs/DashpotBC'
p15055
sa(dp15056
S'description'
p15057
g3
sS'subblocks'
p15058
NsS'parameters'
p15059
(lp15060
(dp15061
S'description'
p15062
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15063
sS'cpp_type'
p15064
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15065
sS'default'
p15066
g3
sS'name'
p15067
S'boundary'
p15068
sS'required'
p15069
I01
sS'group_name'
p15070
Nsa(dp15071
S'description'
p15072
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15073
sS'cpp_type'
p15074
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15075
sS'default'
p15076
g3
sS'name'
p15077
S'control_tags'
p15078
sS'required'
p15079
I00
sS'group_name'
p15080
Nsa(dp15081
S'description'
p15082
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15083
sS'cpp_type'
p15084
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15085
sS'default'
p15086
g3
sS'name'
p15087
S'diag_save_in'
p15088
sS'required'
p15089
I00
sS'group_name'
p15090
S'Advanced'
p15091
sa(dp15092
S'description'
p15093
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15094
sS'cpp_type'
p15095
S'bool'
p15096
sS'default'
p15097
S'1'
p15098
sS'name'
p15099
S'implicit'
p15100
sS'required'
p15101
I00
sS'group_name'
p15102
S'Advanced'
p15103
sa(dp15104
S'description'
p15105
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15106
sS'cpp_type'
p15107
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15108
sS'default'
p15109
g3
sS'name'
p15110
S'save_in'
p15111
sS'required'
p15112
I00
sS'group_name'
p15113
S'Advanced'
p15114
sa(dp15115
S'description'
p15116
S'The seed for the master random number generator\n'
p15117
sS'cpp_type'
p15118
S'unsigned int'
p15119
sS'default'
p15120
S'0'
p15121
sS'name'
p15122
S'seed'
p15123
sS'required'
p15124
I00
sS'group_name'
p15125
S'Advanced'
p15126
sa(dp15127
S'description'
p15128
g3
sS'cpp_type'
p15129
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15130
sS'default'
p15131
S'DiffusionFluxBC'
p15132
sS'name'
p15133
S'type'
p15134
sS'required'
p15135
I00
sS'group_name'
p15136
Nsa(dp15137
S'description'
p15138
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15139
sS'cpp_type'
p15140
S'bool'
p15141
sS'default'
p15142
S'0'
p15143
sS'name'
p15144
S'use_displaced_mesh'
p15145
sS'required'
p15146
I00
sS'group_name'
p15147
S'Advanced'
p15148
sa(dp15149
S'description'
p15150
S'The name of the variable that this boundary condition applies to\n'
p15151
sS'cpp_type'
p15152
S'NonlinearVariableName'
p15153
sS'default'
p15154
g3
sS'name'
p15155
S'variable'
p15156
sS'required'
p15157
I01
sS'group_name'
p15158
NsasS'name'
p15159
S'/BCs/DiffusionFluxBC'
p15160
sa(dp15161
S'description'
p15162
g3
sS'subblocks'
p15163
NsS'parameters'
p15164
(lp15165
(dp15166
S'description'
p15167
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15168
sS'cpp_type'
p15169
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15170
sS'default'
p15171
g3
sS'name'
p15172
S'boundary'
p15173
sS'required'
p15174
I01
sS'group_name'
p15175
Nsa(dp15176
S'description'
p15177
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15178
sS'cpp_type'
p15179
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15180
sS'default'
p15181
g3
sS'name'
p15182
S'control_tags'
p15183
sS'required'
p15184
I00
sS'group_name'
p15185
Nsa(dp15186
S'description'
p15187
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15188
sS'cpp_type'
p15189
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15190
sS'default'
p15191
g3
sS'name'
p15192
S'diag_save_in'
p15193
sS'required'
p15194
I00
sS'group_name'
p15195
Nsa(dp15196
S'description'
p15197
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15198
sS'cpp_type'
p15199
S'bool'
p15200
sS'default'
p15201
S'1'
p15202
sS'name'
p15203
S'implicit'
p15204
sS'required'
p15205
I00
sS'group_name'
p15206
S'Advanced'
p15207
sa(dp15208
S'description'
p15209
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15210
sS'cpp_type'
p15211
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15212
sS'default'
p15213
g3
sS'name'
p15214
S'save_in'
p15215
sS'required'
p15216
I00
sS'group_name'
p15217
Nsa(dp15218
S'description'
p15219
S'The seed for the master random number generator\n'
p15220
sS'cpp_type'
p15221
S'unsigned int'
p15222
sS'default'
p15223
S'0'
p15224
sS'name'
p15225
S'seed'
p15226
sS'required'
p15227
I00
sS'group_name'
p15228
S'Advanced'
p15229
sa(dp15230
S'description'
p15231
g3
sS'cpp_type'
p15232
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15233
sS'default'
p15234
S'DirichletBC'
p15235
sS'name'
p15236
S'type'
p15237
sS'required'
p15238
I00
sS'group_name'
p15239
Nsa(dp15240
S'description'
p15241
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15242
sS'cpp_type'
p15243
S'bool'
p15244
sS'default'
p15245
S'0'
p15246
sS'name'
p15247
S'use_displaced_mesh'
p15248
sS'required'
p15249
I00
sS'group_name'
p15250
S'Advanced'
p15251
sa(dp15252
S'description'
p15253
S'Value of the BC\n'
p15254
sS'cpp_type'
p15255
S'double'
p15256
sS'default'
p15257
g3
sS'name'
p15258
S'value'
p15259
sS'required'
p15260
I01
sS'group_name'
p15261
Nsa(dp15262
S'description'
p15263
S'The name of the variable that this boundary condition applies to\n'
p15264
sS'cpp_type'
p15265
S'NonlinearVariableName'
p15266
sS'default'
p15267
g3
sS'name'
p15268
S'variable'
p15269
sS'required'
p15270
I01
sS'group_name'
p15271
NsasS'name'
p15272
S'/BCs/DirichletBC'
p15273
sa(dp15274
S'description'
p15275
g3
sS'subblocks'
p15276
(lp15277
(dp15278
S'description'
p15279
g3
sS'subblocks'
p15280
NsS'parameters'
p15281
(lp15282
(dp15283
S'name'
p15284
S'angle_units'
p15285
sS'cpp_type'
p15286
S'MooseEnum'
p15287
sS'default'
p15288
g3
sS'description'
p15289
S'The units of the angle of rotation. Choices are:degrees radians\n'
p15290
sS'required'
p15291
I01
sS'options'
p15292
S'degrees radians'
p15293
sS'group_name'
p15294
Nsa(dp15295
S'description'
p15296
S'Direction of the axis of rotation\n'
p15297
sS'cpp_type'
p15298
S'libMesh::VectorValue<double>'
p15299
sS'default'
p15300
g3
sS'name'
p15301
S'axis_direction'
p15302
sS'required'
p15303
I01
sS'group_name'
p15304
Nsa(dp15305
S'description'
p15306
S'Origin of the axis of rotation\n'
p15307
sS'cpp_type'
p15308
S'libMesh::VectorValue<double>'
p15309
sS'default'
p15310
g3
sS'name'
p15311
S'axis_origin'
p15312
sS'required'
p15313
I01
sS'group_name'
p15314
Nsa(dp15315
S'description'
p15316
S'The list of boundary IDs from the mesh where the rotational displacement will be applied\n'
p15317
sS'cpp_type'
p15318
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15319
sS'default'
p15320
g3
sS'name'
p15321
S'boundary'
p15322
sS'required'
p15323
I01
sS'group_name'
p15324
Nsa(dp15325
S'description'
p15326
S'Whether to constrain axial motion (can only be false if the axis of rotation is parallel to one of the cartesian axes)\n'
p15327
sS'cpp_type'
p15328
S'bool'
p15329
sS'default'
p15330
S'1'
p15331
sS'name'
p15332
S'constrain_axial_motion'
p15333
sS'required'
p15334
I00
sS'group_name'
p15335
Nsa(dp15336
S'description'
p15337
S'The x displacement\n'
p15338
sS'cpp_type'
p15339
S'NonlinearVariableName'
p15340
sS'default'
p15341
g3
sS'name'
p15342
S'disp_x'
p15343
sS'required'
p15344
I01
sS'group_name'
p15345
Nsa(dp15346
S'description'
p15347
S'The y displacement\n'
p15348
sS'cpp_type'
p15349
S'NonlinearVariableName'
p15350
sS'default'
p15351
g3
sS'name'
p15352
S'disp_y'
p15353
sS'required'
p15354
I00
sS'group_name'
p15355
Nsa(dp15356
S'description'
p15357
S'The z displacement\n'
p15358
sS'cpp_type'
p15359
S'NonlinearVariableName'
p15360
sS'default'
p15361
g3
sS'name'
p15362
S'disp_z'
p15363
sS'required'
p15364
I00
sS'group_name'
p15365
Nsa(dp15366
S'description'
p15367
S'The function providing the angle of rotation.\n'
p15368
sS'cpp_type'
p15369
S'FunctionName'
p15370
sS'default'
p15371
g3
sS'name'
p15372
S'function'
p15373
sS'required'
p15374
I01
sS'group_name'
p15375
Nsa(dp15376
S'description'
p15377
S'The save_in variables for x displacement\n'
p15378
sS'cpp_type'
p15379
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15380
sS'default'
p15381
g3
sS'name'
p15382
S'save_in_disp_x'
p15383
sS'required'
p15384
I00
sS'group_name'
p15385
Nsa(dp15386
S'description'
p15387
S'The save_in variables for y displacement\n'
p15388
sS'cpp_type'
p15389
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15390
sS'default'
p15391
g3
sS'name'
p15392
S'save_in_disp_y'
p15393
sS'required'
p15394
I00
sS'group_name'
p15395
Nsa(dp15396
S'description'
p15397
S'The save_in variables for z displacement\n'
p15398
sS'cpp_type'
p15399
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15400
sS'default'
p15401
g3
sS'name'
p15402
S'save_in_disp_z'
p15403
sS'required'
p15404
I00
sS'group_name'
p15405
NsasS'name'
p15406
S'/BCs/DisplacementAboutAxis/*'
p15407
sasS'parameters'
p15408
(lp15409
(dp15410
S'name'
p15411
S'angle_units'
p15412
sS'cpp_type'
p15413
S'MooseEnum'
p15414
sS'default'
p15415
g3
sS'description'
p15416
S'The units of the angle of rotation. Choices are:degrees radians\n'
p15417
sS'required'
p15418
I01
sS'options'
p15419
S'degrees radians'
p15420
sS'group_name'
p15421
Nsa(dp15422
S'description'
p15423
S'Direction of the axis of rotation\n'
p15424
sS'cpp_type'
p15425
S'libMesh::VectorValue<double>'
p15426
sS'default'
p15427
g3
sS'name'
p15428
S'axis_direction'
p15429
sS'required'
p15430
I01
sS'group_name'
p15431
Nsa(dp15432
S'description'
p15433
S'Origin of the axis of rotation\n'
p15434
sS'cpp_type'
p15435
S'libMesh::VectorValue<double>'
p15436
sS'default'
p15437
g3
sS'name'
p15438
S'axis_origin'
p15439
sS'required'
p15440
I01
sS'group_name'
p15441
Nsa(dp15442
S'description'
p15443
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15444
sS'cpp_type'
p15445
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15446
sS'default'
p15447
g3
sS'name'
p15448
S'boundary'
p15449
sS'required'
p15450
I01
sS'group_name'
p15451
Nsa(dp15452
S'description'
p15453
S'The component for the rotational displacement\n'
p15454
sS'cpp_type'
p15455
S'int'
p15456
sS'default'
p15457
g3
sS'name'
p15458
S'component'
p15459
sS'required'
p15460
I01
sS'group_name'
p15461
Nsa(dp15462
S'description'
p15463
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15464
sS'cpp_type'
p15465
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15466
sS'default'
p15467
g3
sS'name'
p15468
S'control_tags'
p15469
sS'required'
p15470
I00
sS'group_name'
p15471
Nsa(dp15472
S'description'
p15473
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15474
sS'cpp_type'
p15475
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15476
sS'default'
p15477
g3
sS'name'
p15478
S'diag_save_in'
p15479
sS'required'
p15480
I00
sS'group_name'
p15481
Nsa(dp15482
S'description'
p15483
S'The function providing the angle of rotation.\n'
p15484
sS'cpp_type'
p15485
S'FunctionName'
p15486
sS'default'
p15487
g3
sS'name'
p15488
S'function'
p15489
sS'required'
p15490
I01
sS'group_name'
p15491
Nsa(dp15492
S'description'
p15493
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15494
sS'cpp_type'
p15495
S'bool'
p15496
sS'default'
p15497
S'1'
p15498
sS'name'
p15499
S'implicit'
p15500
sS'required'
p15501
I00
sS'group_name'
p15502
S'Advanced'
p15503
sa(dp15504
S'description'
p15505
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15506
sS'cpp_type'
p15507
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15508
sS'default'
p15509
g3
sS'name'
p15510
S'save_in'
p15511
sS'required'
p15512
I00
sS'group_name'
p15513
Nsa(dp15514
S'description'
p15515
S'The seed for the master random number generator\n'
p15516
sS'cpp_type'
p15517
S'unsigned int'
p15518
sS'default'
p15519
S'0'
p15520
sS'name'
p15521
S'seed'
p15522
sS'required'
p15523
I00
sS'group_name'
p15524
S'Advanced'
p15525
sa(dp15526
S'description'
p15527
g3
sS'cpp_type'
p15528
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15529
sS'default'
p15530
S'DisplacementAboutAxis'
p15531
sS'name'
p15532
S'type'
p15533
sS'required'
p15534
I00
sS'group_name'
p15535
Nsa(dp15536
S'description'
p15537
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15538
sS'cpp_type'
p15539
S'bool'
p15540
sS'default'
p15541
S'1'
p15542
sS'name'
p15543
S'use_displaced_mesh'
p15544
sS'required'
p15545
I00
sS'group_name'
p15546
S'Advanced'
p15547
sa(dp15548
S'description'
p15549
S'The name of the variable that this boundary condition applies to\n'
p15550
sS'cpp_type'
p15551
S'NonlinearVariableName'
p15552
sS'default'
p15553
g3
sS'name'
p15554
S'variable'
p15555
sS'required'
p15556
I01
sS'group_name'
p15557
NsasS'name'
p15558
S'/BCs/DisplacementAboutAxis'
p15559
sa(dp15560
S'description'
p15561
g3
sS'subblocks'
p15562
NsS'parameters'
p15563
(lp15564
(dp15565
S'description'
p15566
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15567
sS'cpp_type'
p15568
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15569
sS'default'
p15570
g3
sS'name'
p15571
S'boundary'
p15572
sS'required'
p15573
I01
sS'group_name'
p15574
Nsa(dp15575
S'description'
p15576
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15577
sS'cpp_type'
p15578
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15579
sS'default'
p15580
g3
sS'name'
p15581
S'control_tags'
p15582
sS'required'
p15583
I00
sS'group_name'
p15584
Nsa(dp15585
S'description'
p15586
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15587
sS'cpp_type'
p15588
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15589
sS'default'
p15590
g3
sS'name'
p15591
S'diag_save_in'
p15592
sS'required'
p15593
I00
sS'group_name'
p15594
Nsa(dp15595
S'description'
p15596
S'The forcing function.\n'
p15597
sS'cpp_type'
p15598
S'FunctionName'
p15599
sS'default'
p15600
g3
sS'name'
p15601
S'function'
p15602
sS'required'
p15603
I01
sS'group_name'
p15604
Nsa(dp15605
S'description'
p15606
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15607
sS'cpp_type'
p15608
S'bool'
p15609
sS'default'
p15610
S'1'
p15611
sS'name'
p15612
S'implicit'
p15613
sS'required'
p15614
I00
sS'group_name'
p15615
S'Advanced'
p15616
sa(dp15617
S'description'
p15618
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15619
sS'cpp_type'
p15620
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15621
sS'default'
p15622
g3
sS'name'
p15623
S'save_in'
p15624
sS'required'
p15625
I00
sS'group_name'
p15626
Nsa(dp15627
S'description'
p15628
S'The seed for the master random number generator\n'
p15629
sS'cpp_type'
p15630
S'unsigned int'
p15631
sS'default'
p15632
S'0'
p15633
sS'name'
p15634
S'seed'
p15635
sS'required'
p15636
I00
sS'group_name'
p15637
S'Advanced'
p15638
sa(dp15639
S'description'
p15640
g3
sS'cpp_type'
p15641
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15642
sS'default'
p15643
S'FunctionDirichletBC'
p15644
sS'name'
p15645
S'type'
p15646
sS'required'
p15647
I00
sS'group_name'
p15648
Nsa(dp15649
S'description'
p15650
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15651
sS'cpp_type'
p15652
S'bool'
p15653
sS'default'
p15654
S'0'
p15655
sS'name'
p15656
S'use_displaced_mesh'
p15657
sS'required'
p15658
I00
sS'group_name'
p15659
S'Advanced'
p15660
sa(dp15661
S'description'
p15662
S'The name of the variable that this boundary condition applies to\n'
p15663
sS'cpp_type'
p15664
S'NonlinearVariableName'
p15665
sS'default'
p15666
g3
sS'name'
p15667
S'variable'
p15668
sS'required'
p15669
I01
sS'group_name'
p15670
NsasS'name'
p15671
S'/BCs/FunctionDirichletBC'
p15672
sa(dp15673
S'description'
p15674
g3
sS'subblocks'
p15675
NsS'parameters'
p15676
(lp15677
(dp15678
S'description'
p15679
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15680
sS'cpp_type'
p15681
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15682
sS'default'
p15683
g3
sS'name'
p15684
S'boundary'
p15685
sS'required'
p15686
I01
sS'group_name'
p15687
Nsa(dp15688
S'description'
p15689
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15690
sS'cpp_type'
p15691
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15692
sS'default'
p15693
g3
sS'name'
p15694
S'control_tags'
p15695
sS'required'
p15696
I00
sS'group_name'
p15697
Nsa(dp15698
S'description'
p15699
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15700
sS'cpp_type'
p15701
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15702
sS'default'
p15703
g3
sS'name'
p15704
S'diag_save_in'
p15705
sS'required'
p15706
I00
sS'group_name'
p15707
S'Advanced'
p15708
sa(dp15709
S'description'
p15710
S'The function.\n'
p15711
sS'cpp_type'
p15712
S'FunctionName'
p15713
sS'default'
p15714
g3
sS'name'
p15715
S'function'
p15716
sS'required'
p15717
I01
sS'group_name'
p15718
Nsa(dp15719
S'description'
p15720
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15721
sS'cpp_type'
p15722
S'bool'
p15723
sS'default'
p15724
S'1'
p15725
sS'name'
p15726
S'implicit'
p15727
sS'required'
p15728
I00
sS'group_name'
p15729
S'Advanced'
p15730
sa(dp15731
S'description'
p15732
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15733
sS'cpp_type'
p15734
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15735
sS'default'
p15736
g3
sS'name'
p15737
S'save_in'
p15738
sS'required'
p15739
I00
sS'group_name'
p15740
S'Advanced'
p15741
sa(dp15742
S'description'
p15743
S'The seed for the master random number generator\n'
p15744
sS'cpp_type'
p15745
S'unsigned int'
p15746
sS'default'
p15747
S'0'
p15748
sS'name'
p15749
S'seed'
p15750
sS'required'
p15751
I00
sS'group_name'
p15752
S'Advanced'
p15753
sa(dp15754
S'description'
p15755
g3
sS'cpp_type'
p15756
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15757
sS'default'
p15758
S'FunctionNeumannBC'
p15759
sS'name'
p15760
S'type'
p15761
sS'required'
p15762
I00
sS'group_name'
p15763
Nsa(dp15764
S'description'
p15765
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15766
sS'cpp_type'
p15767
S'bool'
p15768
sS'default'
p15769
S'0'
p15770
sS'name'
p15771
S'use_displaced_mesh'
p15772
sS'required'
p15773
I00
sS'group_name'
p15774
S'Advanced'
p15775
sa(dp15776
S'description'
p15777
S'The name of the variable that this boundary condition applies to\n'
p15778
sS'cpp_type'
p15779
S'NonlinearVariableName'
p15780
sS'default'
p15781
g3
sS'name'
p15782
S'variable'
p15783
sS'required'
p15784
I01
sS'group_name'
p15785
NsasS'name'
p15786
S'/BCs/FunctionNeumannBC'
p15787
sa(dp15788
S'description'
p15789
g3
sS'subblocks'
p15790
NsS'parameters'
p15791
(lp15792
(dp15793
S'description'
p15794
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15795
sS'cpp_type'
p15796
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15797
sS'default'
p15798
g3
sS'name'
p15799
S'boundary'
p15800
sS'required'
p15801
I01
sS'group_name'
p15802
Nsa(dp15803
S'description'
p15804
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15805
sS'cpp_type'
p15806
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15807
sS'default'
p15808
g3
sS'name'
p15809
S'control_tags'
p15810
sS'required'
p15811
I00
sS'group_name'
p15812
Nsa(dp15813
S'description'
p15814
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15815
sS'cpp_type'
p15816
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15817
sS'default'
p15818
g3
sS'name'
p15819
S'diag_save_in'
p15820
sS'required'
p15821
I00
sS'group_name'
p15822
S'Advanced'
p15823
sa(dp15824
S'description'
p15825
S'Forcing function\n'
p15826
sS'cpp_type'
p15827
S'FunctionName'
p15828
sS'default'
p15829
g3
sS'name'
p15830
S'function'
p15831
sS'required'
p15832
I01
sS'group_name'
p15833
Nsa(dp15834
S'description'
p15835
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15836
sS'cpp_type'
p15837
S'bool'
p15838
sS'default'
p15839
S'1'
p15840
sS'name'
p15841
S'implicit'
p15842
sS'required'
p15843
I00
sS'group_name'
p15844
S'Advanced'
p15845
sa(dp15846
S'description'
p15847
S'Penalty scalar\n'
p15848
sS'cpp_type'
p15849
S'double'
p15850
sS'default'
p15851
g3
sS'name'
p15852
S'penalty'
p15853
sS'required'
p15854
I01
sS'group_name'
p15855
Nsa(dp15856
S'description'
p15857
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15858
sS'cpp_type'
p15859
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15860
sS'default'
p15861
g3
sS'name'
p15862
S'save_in'
p15863
sS'required'
p15864
I00
sS'group_name'
p15865
S'Advanced'
p15866
sa(dp15867
S'description'
p15868
S'The seed for the master random number generator\n'
p15869
sS'cpp_type'
p15870
S'unsigned int'
p15871
sS'default'
p15872
S'0'
p15873
sS'name'
p15874
S'seed'
p15875
sS'required'
p15876
I00
sS'group_name'
p15877
S'Advanced'
p15878
sa(dp15879
S'description'
p15880
g3
sS'cpp_type'
p15881
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15882
sS'default'
p15883
S'FunctionPenaltyDirichletBC'
p15884
sS'name'
p15885
S'type'
p15886
sS'required'
p15887
I00
sS'group_name'
p15888
Nsa(dp15889
S'description'
p15890
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15891
sS'cpp_type'
p15892
S'bool'
p15893
sS'default'
p15894
S'0'
p15895
sS'name'
p15896
S'use_displaced_mesh'
p15897
sS'required'
p15898
I00
sS'group_name'
p15899
S'Advanced'
p15900
sa(dp15901
S'description'
p15902
S'The name of the variable that this boundary condition applies to\n'
p15903
sS'cpp_type'
p15904
S'NonlinearVariableName'
p15905
sS'default'
p15906
g3
sS'name'
p15907
S'variable'
p15908
sS'required'
p15909
I01
sS'group_name'
p15910
NsasS'name'
p15911
S'/BCs/FunctionPenaltyDirichletBC'
p15912
sa(dp15913
S'description'
p15914
g3
sS'subblocks'
p15915
NsS'parameters'
p15916
(lp15917
(dp15918
S'description'
p15919
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15920
sS'cpp_type'
p15921
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15922
sS'default'
p15923
g3
sS'name'
p15924
S'boundary'
p15925
sS'required'
p15926
I01
sS'group_name'
p15927
Nsa(dp15928
S'description'
p15929
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15930
sS'cpp_type'
p15931
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p15932
sS'default'
p15933
g3
sS'name'
p15934
S'control_tags'
p15935
sS'required'
p15936
I00
sS'group_name'
p15937
Nsa(dp15938
S'description'
p15939
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15940
sS'cpp_type'
p15941
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15942
sS'default'
p15943
g3
sS'name'
p15944
S'diag_save_in'
p15945
sS'required'
p15946
I00
sS'group_name'
p15947
Nsa(dp15948
S'description'
p15949
S'The forcing function.\n'
p15950
sS'cpp_type'
p15951
S'FunctionName'
p15952
sS'default'
p15953
g3
sS'name'
p15954
S'function'
p15955
sS'required'
p15956
I01
sS'group_name'
p15957
Nsa(dp15958
S'description'
p15959
S'Determines whether this object is calculated using an implicit or explicit form\n'
p15960
sS'cpp_type'
p15961
S'bool'
p15962
sS'default'
p15963
S'1'
p15964
sS'name'
p15965
S'implicit'
p15966
sS'required'
p15967
I00
sS'group_name'
p15968
S'Advanced'
p15969
sa(dp15970
S'description'
p15971
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p15972
sS'cpp_type'
p15973
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p15974
sS'default'
p15975
g3
sS'name'
p15976
S'save_in'
p15977
sS'required'
p15978
I00
sS'group_name'
p15979
Nsa(dp15980
S'description'
p15981
S'The seed for the master random number generator\n'
p15982
sS'cpp_type'
p15983
S'unsigned int'
p15984
sS'default'
p15985
S'0'
p15986
sS'name'
p15987
S'seed'
p15988
sS'required'
p15989
I00
sS'group_name'
p15990
S'Advanced'
p15991
sa(dp15992
S'description'
p15993
g3
sS'cpp_type'
p15994
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p15995
sS'default'
p15996
S'FunctionPresetBC'
p15997
sS'name'
p15998
S'type'
p15999
sS'required'
p16000
I00
sS'group_name'
p16001
Nsa(dp16002
S'description'
p16003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16004
sS'cpp_type'
p16005
S'bool'
p16006
sS'default'
p16007
S'0'
p16008
sS'name'
p16009
S'use_displaced_mesh'
p16010
sS'required'
p16011
I00
sS'group_name'
p16012
S'Advanced'
p16013
sa(dp16014
S'description'
p16015
S'The name of the variable that this boundary condition applies to\n'
p16016
sS'cpp_type'
p16017
S'NonlinearVariableName'
p16018
sS'default'
p16019
g3
sS'name'
p16020
S'variable'
p16021
sS'required'
p16022
I01
sS'group_name'
p16023
NsasS'name'
p16024
S'/BCs/FunctionPresetBC'
p16025
sa(dp16026
S'description'
p16027
g3
sS'subblocks'
p16028
NsS'parameters'
p16029
(lp16030
(dp16031
S'description'
p16032
S'Name appended to material properties to make them unique\n'
p16033
sS'cpp_type'
p16034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16035
sS'default'
p16036
g3
sS'name'
p16037
S'appended_property_name'
p16038
sS'required'
p16039
I00
sS'group_name'
p16040
Nsa(dp16041
S'description'
p16042
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16043
sS'cpp_type'
p16044
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16045
sS'default'
p16046
g3
sS'name'
p16047
S'boundary'
p16048
sS'required'
p16049
I01
sS'group_name'
p16050
Nsa(dp16051
S'description'
p16052
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16053
sS'cpp_type'
p16054
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16055
sS'default'
p16056
g3
sS'name'
p16057
S'control_tags'
p16058
sS'required'
p16059
I00
sS'group_name'
p16060
Nsa(dp16061
S'name'
p16062
S'coord_type'
p16063
sS'cpp_type'
p16064
S'MooseEnum'
p16065
sS'default'
p16066
S'default'
p16067
sS'description'
p16068
S'Gap calculation type (default or XYZ).\n'
p16069
sS'required'
p16070
I00
sS'options'
p16071
S'default XYZ'
p16072
sS'group_name'
p16073
Nsa(dp16074
S'description'
p16075
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16076
sS'cpp_type'
p16077
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16078
sS'default'
p16079
g3
sS'name'
p16080
S'diag_save_in'
p16081
sS'required'
p16082
I00
sS'group_name'
p16083
S'Advanced'
p16084
sa(dp16085
S'description'
p16086
S'Distance across the gap\n'
p16087
sS'cpp_type'
p16088
S'std::vector<VariableName>'
p16089
sS'default'
p16090
g3
sS'name'
p16091
S'gap_distance'
p16092
sS'required'
p16093
I00
sS'group_name'
p16094
Nsa(dp16095
S'description'
p16096
S'Temperature on the other side of the gap\n'
p16097
sS'cpp_type'
p16098
S'std::vector<VariableName>'
p16099
sS'default'
p16100
g3
sS'name'
p16101
S'gap_temp'
p16102
sS'required'
p16103
I00
sS'group_name'
p16104
Nsa(dp16105
S'description'
p16106
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16107
sS'cpp_type'
p16108
S'bool'
p16109
sS'default'
p16110
S'1'
p16111
sS'name'
p16112
S'implicit'
p16113
sS'required'
p16114
I00
sS'group_name'
p16115
S'Advanced'
p16116
sa(dp16117
S'description'
p16118
S'A maximum gap size\n'
p16119
sS'cpp_type'
p16120
S'double'
p16121
sS'default'
p16122
S'1e+06'
p16123
sS'name'
p16124
S'max_gap'
p16125
sS'required'
p16126
I00
sS'group_name'
p16127
Nsa(dp16128
S'description'
p16129
S'A minimum gap size\n'
p16130
sS'cpp_type'
p16131
S'double'
p16132
sS'default'
p16133
S'1e-06'
p16134
sS'name'
p16135
S'min_gap'
p16136
sS'required'
p16137
I00
sS'group_name'
p16138
Nsa(dp16139
S'name'
p16140
S'order'
p16141
sS'cpp_type'
p16142
S'MooseEnum'
p16143
sS'default'
p16144
S'FIRST'
p16145
sS'description'
p16146
S'The finite element order\n'
p16147
sS'required'
p16148
I00
sS'options'
p16149
S'FIRST SECOND THIRD FOURTH'
p16150
sS'group_name'
p16151
Nsa(dp16152
S'description'
p16153
S'The boundary to be penetrated\n'
p16154
sS'cpp_type'
p16155
S'BoundaryName'
p16156
sS'default'
p16157
g3
sS'name'
p16158
S'paired_boundary'
p16159
sS'required'
p16160
I00
sS'group_name'
p16161
Nsa(dp16162
S'description'
p16163
S'Whether or not to do Quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp should NOT be provided (and will be ignored) however paired_boundary IS then required.\n'
p16164
sS'cpp_type'
p16165
S'bool'
p16166
sS'default'
p16167
S'0'
p16168
sS'name'
p16169
S'quadrature'
p16170
sS'required'
p16171
I00
sS'group_name'
p16172
Nsa(dp16173
S'description'
p16174
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16175
sS'cpp_type'
p16176
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16177
sS'default'
p16178
g3
sS'name'
p16179
S'save_in'
p16180
sS'required'
p16181
I00
sS'group_name'
p16182
S'Advanced'
p16183
sa(dp16184
S'description'
p16185
S'The seed for the master random number generator\n'
p16186
sS'cpp_type'
p16187
S'unsigned int'
p16188
sS'default'
p16189
S'0'
p16190
sS'name'
p16191
S'seed'
p16192
sS'required'
p16193
I00
sS'group_name'
p16194
S'Advanced'
p16195
sa(dp16196
S'description'
p16197
g3
sS'cpp_type'
p16198
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16199
sS'default'
p16200
S'GapHeatTransfer'
p16201
sS'name'
p16202
S'type'
p16203
sS'required'
p16204
I00
sS'group_name'
p16205
Nsa(dp16206
S'description'
p16207
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16208
sS'cpp_type'
p16209
S'bool'
p16210
sS'default'
p16211
S'0'
p16212
sS'name'
p16213
S'use_displaced_mesh'
p16214
sS'required'
p16215
I00
sS'group_name'
p16216
S'Advanced'
p16217
sa(dp16218
S'description'
p16219
S'The name of the variable that this boundary condition applies to\n'
p16220
sS'cpp_type'
p16221
S'NonlinearVariableName'
p16222
sS'default'
p16223
g3
sS'name'
p16224
S'variable'
p16225
sS'required'
p16226
I01
sS'group_name'
p16227
Nsa(dp16228
S'description'
p16229
S'Whether to output warning messages concerning nodes not being found\n'
p16230
sS'cpp_type'
p16231
S'bool'
p16232
sS'default'
p16233
S'0'
p16234
sS'name'
p16235
S'warnings'
p16236
sS'required'
p16237
I00
sS'group_name'
p16238
NsasS'name'
p16239
S'/BCs/GapHeatTransfer'
p16240
sa(dp16241
S'description'
p16242
g3
sS'subblocks'
p16243
NsS'parameters'
p16244
(lp16245
(dp16246
S'description'
p16247
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16248
sS'cpp_type'
p16249
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16250
sS'default'
p16251
g3
sS'name'
p16252
S'boundary'
p16253
sS'required'
p16254
I01
sS'group_name'
p16255
Nsa(dp16256
S'description'
p16257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16258
sS'cpp_type'
p16259
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16260
sS'default'
p16261
g3
sS'name'
p16262
S'control_tags'
p16263
sS'required'
p16264
I00
sS'group_name'
p16265
Nsa(dp16266
S'description'
p16267
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16268
sS'cpp_type'
p16269
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16270
sS'default'
p16271
g3
sS'name'
p16272
S'diag_save_in'
p16273
sS'required'
p16274
I00
sS'group_name'
p16275
S'Advanced'
p16276
sa(dp16277
S'description'
p16278
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16279
sS'cpp_type'
p16280
S'bool'
p16281
sS'default'
p16282
S'1'
p16283
sS'name'
p16284
S'implicit'
p16285
sS'required'
p16286
I00
sS'group_name'
p16287
S'Advanced'
p16288
sa(dp16289
S'description'
p16290
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16291
sS'cpp_type'
p16292
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16293
sS'default'
p16294
g3
sS'name'
p16295
S'save_in'
p16296
sS'required'
p16297
I00
sS'group_name'
p16298
S'Advanced'
p16299
sa(dp16300
S'description'
p16301
S'The seed for the master random number generator\n'
p16302
sS'cpp_type'
p16303
S'unsigned int'
p16304
sS'default'
p16305
S'0'
p16306
sS'name'
p16307
S'seed'
p16308
sS'required'
p16309
I00
sS'group_name'
p16310
S'Advanced'
p16311
sa(dp16312
S'description'
p16313
g3
sS'cpp_type'
p16314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16315
sS'default'
p16316
S'HeatConductionBC'
p16317
sS'name'
p16318
S'type'
p16319
sS'required'
p16320
I00
sS'group_name'
p16321
Nsa(dp16322
S'description'
p16323
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16324
sS'cpp_type'
p16325
S'bool'
p16326
sS'default'
p16327
S'0'
p16328
sS'name'
p16329
S'use_displaced_mesh'
p16330
sS'required'
p16331
I00
sS'group_name'
p16332
S'Advanced'
p16333
sa(dp16334
S'description'
p16335
S'The name of the variable that this boundary condition applies to\n'
p16336
sS'cpp_type'
p16337
S'NonlinearVariableName'
p16338
sS'default'
p16339
g3
sS'name'
p16340
S'variable'
p16341
sS'required'
p16342
I01
sS'group_name'
p16343
NsasS'name'
p16344
S'/BCs/HeatConductionBC'
p16345
sa(dp16346
S'description'
p16347
g3
sS'subblocks'
p16348
NsS'parameters'
p16349
(lp16350
(dp16351
S'description'
p16352
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16353
sS'cpp_type'
p16354
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16355
sS'default'
p16356
g3
sS'name'
p16357
S'boundary'
p16358
sS'required'
p16359
I01
sS'group_name'
p16360
Nsa(dp16361
S'description'
p16362
S'0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n'
p16363
sS'cpp_type'
p16364
S'unsigned int'
p16365
sS'default'
p16366
g3
sS'name'
p16367
S'component'
p16368
sS'required'
p16369
I01
sS'group_name'
p16370
Nsa(dp16371
S'description'
p16372
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16373
sS'cpp_type'
p16374
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16375
sS'default'
p16376
g3
sS'name'
p16377
S'control_tags'
p16378
sS'required'
p16379
I00
sS'group_name'
p16380
Nsa(dp16381
S'description'
p16382
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16383
sS'cpp_type'
p16384
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16385
sS'default'
p16386
g3
sS'name'
p16387
S'diag_save_in'
p16388
sS'required'
p16389
I00
sS'group_name'
p16390
S'Advanced'
p16391
sa(dp16392
S'description'
p16393
S'Direction of the gravity vector\n'
p16394
sS'cpp_type'
p16395
S'libMesh::VectorValue<double>'
p16396
sS'default'
p16397
g3
sS'name'
p16398
S'gravity'
p16399
sS'required'
p16400
I01
sS'group_name'
p16401
Nsa(dp16402
S'description'
p16403
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16404
sS'cpp_type'
p16405
S'bool'
p16406
sS'default'
p16407
S'1'
p16408
sS'name'
p16409
S'implicit'
p16410
sS'required'
p16411
I00
sS'group_name'
p16412
S'Advanced'
p16413
sa(dp16414
S'description'
p16415
S'dynamic viscosity\n'
p16416
sS'cpp_type'
p16417
S'double'
p16418
sS'default'
p16419
g3
sS'name'
p16420
S'mu'
p16421
sS'required'
p16422
I01
sS'group_name'
p16423
Nsa(dp16424
S'description'
p16425
S'pressure\n'
p16426
sS'cpp_type'
p16427
S'std::vector<VariableName>'
p16428
sS'default'
p16429
g3
sS'name'
p16430
S'p'
p16431
sS'required'
p16432
I01
sS'group_name'
p16433
Nsa(dp16434
S'description'
p16435
S'density\n'
p16436
sS'cpp_type'
p16437
S'double'
p16438
sS'default'
p16439
g3
sS'name'
p16440
S'rho'
p16441
sS'required'
p16442
I01
sS'group_name'
p16443
Nsa(dp16444
S'description'
p16445
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16446
sS'cpp_type'
p16447
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16448
sS'default'
p16449
g3
sS'name'
p16450
S'save_in'
p16451
sS'required'
p16452
I00
sS'group_name'
p16453
S'Advanced'
p16454
sa(dp16455
S'description'
p16456
S'The seed for the master random number generator\n'
p16457
sS'cpp_type'
p16458
S'unsigned int'
p16459
sS'default'
p16460
S'0'
p16461
sS'name'
p16462
S'seed'
p16463
sS'required'
p16464
I00
sS'group_name'
p16465
S'Advanced'
p16466
sa(dp16467
S'description'
p16468
g3
sS'cpp_type'
p16469
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16470
sS'default'
p16471
S'INSMomentumNoBCBC'
p16472
sS'name'
p16473
S'type'
p16474
sS'required'
p16475
I00
sS'group_name'
p16476
Nsa(dp16477
S'description'
p16478
S'x-velocity\n'
p16479
sS'cpp_type'
p16480
S'std::vector<VariableName>'
p16481
sS'default'
p16482
g3
sS'name'
p16483
S'u'
p16484
sS'required'
p16485
I01
sS'group_name'
p16486
Nsa(dp16487
S'description'
p16488
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16489
sS'cpp_type'
p16490
S'bool'
p16491
sS'default'
p16492
S'0'
p16493
sS'name'
p16494
S'use_displaced_mesh'
p16495
sS'required'
p16496
I00
sS'group_name'
p16497
S'Advanced'
p16498
sa(dp16499
S'description'
p16500
S'y-velocity\n'
p16501
sS'cpp_type'
p16502
S'std::vector<VariableName>'
p16503
sS'default'
p16504
g3
sS'name'
p16505
S'v'
p16506
sS'required'
p16507
I00
sS'group_name'
p16508
Nsa(dp16509
S'description'
p16510
S'The name of the variable that this boundary condition applies to\n'
p16511
sS'cpp_type'
p16512
S'NonlinearVariableName'
p16513
sS'default'
p16514
g3
sS'name'
p16515
S'variable'
p16516
sS'required'
p16517
I01
sS'group_name'
p16518
Nsa(dp16519
S'description'
p16520
S'z-velocity\n'
p16521
sS'cpp_type'
p16522
S'std::vector<VariableName>'
p16523
sS'default'
p16524
g3
sS'name'
p16525
S'w'
p16526
sS'required'
p16527
I00
sS'group_name'
p16528
NsasS'name'
p16529
S'/BCs/INSMomentumNoBCBC'
p16530
sa(dp16531
S'description'
p16532
g3
sS'subblocks'
p16533
NsS'parameters'
p16534
(lp16535
(dp16536
S'description'
p16537
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16538
sS'cpp_type'
p16539
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16540
sS'default'
p16541
g3
sS'name'
p16542
S'boundary'
p16543
sS'required'
p16544
I01
sS'group_name'
p16545
Nsa(dp16546
S'description'
p16547
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16548
sS'cpp_type'
p16549
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16550
sS'default'
p16551
g3
sS'name'
p16552
S'control_tags'
p16553
sS'required'
p16554
I00
sS'group_name'
p16555
Nsa(dp16556
S'description'
p16557
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16558
sS'cpp_type'
p16559
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16560
sS'default'
p16561
g3
sS'name'
p16562
S'diag_save_in'
p16563
sS'required'
p16564
I00
sS'group_name'
p16565
S'Advanced'
p16566
sa(dp16567
S'description'
p16568
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16569
sS'cpp_type'
p16570
S'bool'
p16571
sS'default'
p16572
S'1'
p16573
sS'name'
p16574
S'implicit'
p16575
sS'required'
p16576
I00
sS'group_name'
p16577
S'Advanced'
p16578
sa(dp16579
S'description'
p16580
S'thermal conductivity\n'
p16581
sS'cpp_type'
p16582
S'double'
p16583
sS'default'
p16584
g3
sS'name'
p16585
S'k'
p16586
sS'required'
p16587
I01
sS'group_name'
p16588
Nsa(dp16589
S'description'
p16590
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16591
sS'cpp_type'
p16592
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16593
sS'default'
p16594
g3
sS'name'
p16595
S'save_in'
p16596
sS'required'
p16597
I00
sS'group_name'
p16598
S'Advanced'
p16599
sa(dp16600
S'description'
p16601
S'The seed for the master random number generator\n'
p16602
sS'cpp_type'
p16603
S'unsigned int'
p16604
sS'default'
p16605
S'0'
p16606
sS'name'
p16607
S'seed'
p16608
sS'required'
p16609
I00
sS'group_name'
p16610
S'Advanced'
p16611
sa(dp16612
S'description'
p16613
g3
sS'cpp_type'
p16614
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16615
sS'default'
p16616
S'INSTemperatureNoBCBC'
p16617
sS'name'
p16618
S'type'
p16619
sS'required'
p16620
I00
sS'group_name'
p16621
Nsa(dp16622
S'description'
p16623
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16624
sS'cpp_type'
p16625
S'bool'
p16626
sS'default'
p16627
S'0'
p16628
sS'name'
p16629
S'use_displaced_mesh'
p16630
sS'required'
p16631
I00
sS'group_name'
p16632
S'Advanced'
p16633
sa(dp16634
S'description'
p16635
S'The name of the variable that this boundary condition applies to\n'
p16636
sS'cpp_type'
p16637
S'NonlinearVariableName'
p16638
sS'default'
p16639
g3
sS'name'
p16640
S'variable'
p16641
sS'required'
p16642
I01
sS'group_name'
p16643
NsasS'name'
p16644
S'/BCs/INSTemperatureNoBCBC'
p16645
sa(dp16646
S'description'
p16647
g3
sS'subblocks'
p16648
NsS'parameters'
p16649
(lp16650
(dp16651
S'description'
p16652
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16653
sS'cpp_type'
p16654
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16655
sS'default'
p16656
g3
sS'name'
p16657
S'boundary'
p16658
sS'required'
p16659
I01
sS'group_name'
p16660
Nsa(dp16661
S'description'
p16662
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16663
sS'cpp_type'
p16664
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16665
sS'default'
p16666
g3
sS'name'
p16667
S'control_tags'
p16668
sS'required'
p16669
I00
sS'group_name'
p16670
Nsa(dp16671
S'description'
p16672
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16673
sS'cpp_type'
p16674
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16675
sS'default'
p16676
g3
sS'name'
p16677
S'diag_save_in'
p16678
sS'required'
p16679
I00
sS'group_name'
p16680
S'Advanced'
p16681
sa(dp16682
S'description'
p16683
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16684
sS'cpp_type'
p16685
S'bool'
p16686
sS'default'
p16687
S'1'
p16688
sS'name'
p16689
S'implicit'
p16690
sS'required'
p16691
I00
sS'group_name'
p16692
S'Advanced'
p16693
sa(dp16694
S'description'
p16695
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16696
sS'cpp_type'
p16697
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16698
sS'default'
p16699
g3
sS'name'
p16700
S'save_in'
p16701
sS'required'
p16702
I00
sS'group_name'
p16703
S'Advanced'
p16704
sa(dp16705
S'description'
p16706
S'The seed for the master random number generator\n'
p16707
sS'cpp_type'
p16708
S'unsigned int'
p16709
sS'default'
p16710
S'0'
p16711
sS'name'
p16712
S'seed'
p16713
sS'required'
p16714
I00
sS'group_name'
p16715
S'Advanced'
p16716
sa(dp16717
S'description'
p16718
g3
sS'cpp_type'
p16719
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16720
sS'default'
p16721
S'ImplicitNeumannBC'
p16722
sS'name'
p16723
S'type'
p16724
sS'required'
p16725
I00
sS'group_name'
p16726
Nsa(dp16727
S'description'
p16728
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16729
sS'cpp_type'
p16730
S'bool'
p16731
sS'default'
p16732
S'0'
p16733
sS'name'
p16734
S'use_displaced_mesh'
p16735
sS'required'
p16736
I00
sS'group_name'
p16737
S'Advanced'
p16738
sa(dp16739
S'description'
p16740
S'The name of the variable that this boundary condition applies to\n'
p16741
sS'cpp_type'
p16742
S'NonlinearVariableName'
p16743
sS'default'
p16744
g3
sS'name'
p16745
S'variable'
p16746
sS'required'
p16747
I01
sS'group_name'
p16748
NsasS'name'
p16749
S'/BCs/ImplicitNeumannBC'
p16750
sa(dp16751
S'description'
p16752
g3
sS'subblocks'
p16753
NsS'parameters'
p16754
(lp16755
(dp16756
S'description'
p16757
S'Mode I stress intensity factor to apply.\n'
p16758
sS'cpp_type'
p16759
S'double'
p16760
sS'default'
p16761
S'1'
p16762
sS'name'
p16763
S'KI'
p16764
sS'required'
p16765
I00
sS'group_name'
p16766
Nsa(dp16767
S'description'
p16768
S'Mode II stress intensity factor to apply.\n'
p16769
sS'cpp_type'
p16770
S'double'
p16771
sS'default'
p16772
S'1'
p16773
sS'name'
p16774
S'KII'
p16775
sS'required'
p16776
I00
sS'group_name'
p16777
Nsa(dp16778
S'description'
p16779
S'Mode III stress intensity factor to apply.\n'
p16780
sS'cpp_type'
p16781
S'double'
p16782
sS'default'
p16783
S'1'
p16784
sS'name'
p16785
S'KIII'
p16786
sS'required'
p16787
I00
sS'group_name'
p16788
Nsa(dp16789
S'description'
p16790
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16791
sS'cpp_type'
p16792
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16793
sS'default'
p16794
g3
sS'name'
p16795
S'boundary'
p16796
sS'required'
p16797
I01
sS'group_name'
p16798
Nsa(dp16799
S'name'
p16800
S'component'
p16801
sS'cpp_type'
p16802
S'MooseEnum'
p16803
sS'default'
p16804
g3
sS'description'
p16805
S'The component of the displacement to apply BC on.\n'
p16806
sS'required'
p16807
I01
sS'options'
p16808
S'x y z'
p16809
sS'group_name'
p16810
Nsa(dp16811
S'description'
p16812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16813
sS'cpp_type'
p16814
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16815
sS'default'
p16816
g3
sS'name'
p16817
S'control_tags'
p16818
sS'required'
p16819
I00
sS'group_name'
p16820
Nsa(dp16821
S'description'
p16822
S'The CrackFrontDefinition user object name\n'
p16823
sS'cpp_type'
p16824
S'UserObjectName'
p16825
sS'default'
p16826
g3
sS'name'
p16827
S'crack_front_definition'
p16828
sS'required'
p16829
I01
sS'group_name'
p16830
Nsa(dp16831
S'description'
p16832
S'The index of the point on the crack front.\n'
p16833
sS'cpp_type'
p16834
S'unsigned int'
p16835
sS'default'
p16836
S'0'
p16837
sS'name'
p16838
S'crack_front_point_index'
p16839
sS'required'
p16840
I00
sS'group_name'
p16841
Nsa(dp16842
S'description'
p16843
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16844
sS'cpp_type'
p16845
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16846
sS'default'
p16847
g3
sS'name'
p16848
S'diag_save_in'
p16849
sS'required'
p16850
I00
sS'group_name'
p16851
Nsa(dp16852
S'description'
p16853
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16854
sS'cpp_type'
p16855
S'bool'
p16856
sS'default'
p16857
S'1'
p16858
sS'name'
p16859
S'implicit'
p16860
sS'required'
p16861
I00
sS'group_name'
p16862
S'Advanced'
p16863
sa(dp16864
S'description'
p16865
S"Poisson's ratio for the material.\n"
p16866
sS'cpp_type'
p16867
S'double'
p16868
sS'default'
p16869
g3
sS'name'
p16870
S'poissons_ratio'
p16871
sS'required'
p16872
I00
sS'group_name'
p16873
Nsa(dp16874
S'description'
p16875
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16876
sS'cpp_type'
p16877
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16878
sS'default'
p16879
g3
sS'name'
p16880
S'save_in'
p16881
sS'required'
p16882
I00
sS'group_name'
p16883
Nsa(dp16884
S'description'
p16885
S'The seed for the master random number generator\n'
p16886
sS'cpp_type'
p16887
S'unsigned int'
p16888
sS'default'
p16889
S'0'
p16890
sS'name'
p16891
S'seed'
p16892
sS'required'
p16893
I00
sS'group_name'
p16894
S'Advanced'
p16895
sa(dp16896
S'description'
p16897
g3
sS'cpp_type'
p16898
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p16899
sS'default'
p16900
S'InteractionIntegralBenchmarkBC'
p16901
sS'name'
p16902
S'type'
p16903
sS'required'
p16904
I00
sS'group_name'
p16905
Nsa(dp16906
S'description'
p16907
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16908
sS'cpp_type'
p16909
S'bool'
p16910
sS'default'
p16911
S'0'
p16912
sS'name'
p16913
S'use_displaced_mesh'
p16914
sS'required'
p16915
I00
sS'group_name'
p16916
S'Advanced'
p16917
sa(dp16918
S'description'
p16919
S'The name of the variable that this boundary condition applies to\n'
p16920
sS'cpp_type'
p16921
S'NonlinearVariableName'
p16922
sS'default'
p16923
g3
sS'name'
p16924
S'variable'
p16925
sS'required'
p16926
I01
sS'group_name'
p16927
Nsa(dp16928
S'description'
p16929
S"Young's modulus of the material.\n"
p16930
sS'cpp_type'
p16931
S'double'
p16932
sS'default'
p16933
g3
sS'name'
p16934
S'youngs_modulus'
p16935
sS'required'
p16936
I00
sS'group_name'
p16937
NsasS'name'
p16938
S'/BCs/InteractionIntegralBenchmarkBC'
p16939
sa(dp16940
S'description'
p16941
g3
sS'subblocks'
p16942
NsS'parameters'
p16943
(lp16944
(dp16945
S'description'
p16946
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16947
sS'cpp_type'
p16948
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16949
sS'default'
p16950
g3
sS'name'
p16951
S'boundary'
p16952
sS'required'
p16953
I01
sS'group_name'
p16954
Nsa(dp16955
S'description'
p16956
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16957
sS'cpp_type'
p16958
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p16959
sS'default'
p16960
g3
sS'name'
p16961
S'control_tags'
p16962
sS'required'
p16963
I00
sS'group_name'
p16964
Nsa(dp16965
S'description'
p16966
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16967
sS'cpp_type'
p16968
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16969
sS'default'
p16970
g3
sS'name'
p16971
S'diag_save_in'
p16972
sS'required'
p16973
I00
sS'group_name'
p16974
Nsa(dp16975
S'description'
p16976
S'Determines whether this object is calculated using an implicit or explicit form\n'
p16977
sS'cpp_type'
p16978
S'bool'
p16979
sS'default'
p16980
S'1'
p16981
sS'name'
p16982
S'implicit'
p16983
sS'required'
p16984
I00
sS'group_name'
p16985
S'Advanced'
p16986
sa(dp16987
S'description'
p16988
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16989
sS'cpp_type'
p16990
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16991
sS'default'
p16992
g3
sS'name'
p16993
S'save_in'
p16994
sS'required'
p16995
I00
sS'group_name'
p16996
Nsa(dp16997
S'description'
p16998
S'The seed for the master random number generator\n'
p16999
sS'cpp_type'
p17000
S'unsigned int'
p17001
sS'default'
p17002
S'0'
p17003
sS'name'
p17004
S'seed'
p17005
sS'required'
p17006
I00
sS'group_name'
p17007
S'Advanced'
p17008
sa(dp17009
S'description'
p17010
g3
sS'cpp_type'
p17011
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17012
sS'default'
p17013
S'MatchedValueBC'
p17014
sS'name'
p17015
S'type'
p17016
sS'required'
p17017
I00
sS'group_name'
p17018
Nsa(dp17019
S'description'
p17020
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17021
sS'cpp_type'
p17022
S'bool'
p17023
sS'default'
p17024
S'0'
p17025
sS'name'
p17026
S'use_displaced_mesh'
p17027
sS'required'
p17028
I00
sS'group_name'
p17029
S'Advanced'
p17030
sa(dp17031
S'description'
p17032
S'The variable whose value we are to match.\n'
p17033
sS'cpp_type'
p17034
S'std::vector<VariableName>'
p17035
sS'default'
p17036
g3
sS'name'
p17037
S'v'
p17038
sS'required'
p17039
I01
sS'group_name'
p17040
Nsa(dp17041
S'description'
p17042
S'The name of the variable that this boundary condition applies to\n'
p17043
sS'cpp_type'
p17044
S'NonlinearVariableName'
p17045
sS'default'
p17046
g3
sS'name'
p17047
S'variable'
p17048
sS'required'
p17049
I01
sS'group_name'
p17050
NsasS'name'
p17051
S'/BCs/MatchedValueBC'
p17052
sa(dp17053
S'description'
p17054
g3
sS'subblocks'
p17055
NsS'parameters'
p17056
(lp17057
(dp17058
S'description'
p17059
S'Gas constant.\n'
p17060
sS'cpp_type'
p17061
S'double'
p17062
sS'default'
p17063
g3
sS'name'
p17064
S'R'
p17065
sS'required'
p17066
I01
sS'group_name'
p17067
Nsa(dp17068
S'description'
p17069
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17070
sS'cpp_type'
p17071
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17072
sS'default'
p17073
g3
sS'name'
p17074
S'boundary'
p17075
sS'required'
p17076
I01
sS'group_name'
p17077
Nsa(dp17078
S'description'
p17079
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17080
sS'cpp_type'
p17081
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17082
sS'default'
p17083
g3
sS'name'
p17084
S'control_tags'
p17085
sS'required'
p17086
I00
sS'group_name'
p17087
Nsa(dp17088
S'description'
p17089
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17090
sS'cpp_type'
p17091
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17092
sS'default'
p17093
g3
sS'name'
p17094
S'diag_save_in'
p17095
sS'required'
p17096
I00
sS'group_name'
p17097
S'Advanced'
p17098
sa(dp17099
S'description'
p17100
S'Ratio of specific heats.\n'
p17101
sS'cpp_type'
p17102
S'double'
p17103
sS'default'
p17104
g3
sS'name'
p17105
S'gamma'
p17106
sS'required'
p17107
I01
sS'group_name'
p17108
Nsa(dp17109
S'description'
p17110
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17111
sS'cpp_type'
p17112
S'bool'
p17113
sS'default'
p17114
S'1'
p17115
sS'name'
p17116
S'implicit'
p17117
sS'required'
p17118
I00
sS'group_name'
p17119
S'Advanced'
p17120
sa(dp17121
S'description'
p17122
S'density\n'
p17123
sS'cpp_type'
p17124
S'std::vector<VariableName>'
p17125
sS'default'
p17126
g3
sS'name'
p17127
S'rho'
p17128
sS'required'
p17129
I01
sS'group_name'
p17130
Nsa(dp17131
S'description'
p17132
S'energy\n'
p17133
sS'cpp_type'
p17134
S'std::vector<VariableName>'
p17135
sS'default'
p17136
g3
sS'name'
p17137
S'rhoe'
p17138
sS'required'
p17139
I01
sS'group_name'
p17140
Nsa(dp17141
S'description'
p17142
S'x-momentum\n'
p17143
sS'cpp_type'
p17144
S'std::vector<VariableName>'
p17145
sS'default'
p17146
g3
sS'name'
p17147
S'rhou'
p17148
sS'required'
p17149
I01
sS'group_name'
p17150
Nsa(dp17151
S'description'
p17152
S'y-momentum\n'
p17153
sS'cpp_type'
p17154
S'std::vector<VariableName>'
p17155
sS'default'
p17156
g3
sS'name'
p17157
S'rhov'
p17158
sS'required'
p17159
I01
sS'group_name'
p17160
Nsa(dp17161
S'description'
p17162
S'z-momentum\n'
p17163
sS'cpp_type'
p17164
S'std::vector<VariableName>'
p17165
sS'default'
p17166
g3
sS'name'
p17167
S'rhow'
p17168
sS'required'
p17169
I00
sS'group_name'
p17170
Nsa(dp17171
S'description'
p17172
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17173
sS'cpp_type'
p17174
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17175
sS'default'
p17176
g3
sS'name'
p17177
S'save_in'
p17178
sS'required'
p17179
I00
sS'group_name'
p17180
S'Advanced'
p17181
sa(dp17182
S'description'
p17183
S'The seed for the master random number generator\n'
p17184
sS'cpp_type'
p17185
S'unsigned int'
p17186
sS'default'
p17187
S'0'
p17188
sS'name'
p17189
S'seed'
p17190
sS'required'
p17191
I00
sS'group_name'
p17192
S'Advanced'
p17193
sa(dp17194
S'description'
p17195
S'The specified pressure for this boundary\n'
p17196
sS'cpp_type'
p17197
S'double'
p17198
sS'default'
p17199
g3
sS'name'
p17200
S'specified_pressure'
p17201
sS'required'
p17202
I01
sS'group_name'
p17203
Nsa(dp17204
S'description'
p17205
g3
sS'cpp_type'
p17206
S'std::vector<VariableName>'
p17207
sS'default'
p17208
g3
sS'name'
p17209
S'temperature'
p17210
sS'required'
p17211
I01
sS'group_name'
p17212
Nsa(dp17213
S'description'
p17214
g3
sS'cpp_type'
p17215
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17216
sS'default'
p17217
S'NSEnergyInviscidSpecifiedBC'
p17218
sS'name'
p17219
S'type'
p17220
sS'required'
p17221
I00
sS'group_name'
p17222
Nsa(dp17223
S'description'
p17224
g3
sS'cpp_type'
p17225
S'std::vector<VariableName>'
p17226
sS'default'
p17227
g3
sS'name'
p17228
S'u'
p17229
sS'required'
p17230
I01
sS'group_name'
p17231
Nsa(dp17232
S'description'
p17233
S'The specified value of u.n for this boundary\n'
p17234
sS'cpp_type'
p17235
S'double'
p17236
sS'default'
p17237
g3
sS'name'
p17238
S'un'
p17239
sS'required'
p17240
I01
sS'group_name'
p17241
Nsa(dp17242
S'description'
p17243
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17244
sS'cpp_type'
p17245
S'bool'
p17246
sS'default'
p17247
S'0'
p17248
sS'name'
p17249
S'use_displaced_mesh'
p17250
sS'required'
p17251
I00
sS'group_name'
p17252
S'Advanced'
p17253
sa(dp17254
S'description'
p17255
g3
sS'cpp_type'
p17256
S'std::vector<VariableName>'
p17257
sS'default'
p17258
g3
sS'name'
p17259
S'v'
p17260
sS'required'
p17261
I01
sS'group_name'
p17262
Nsa(dp17263
S'description'
p17264
S'The name of the variable that this boundary condition applies to\n'
p17265
sS'cpp_type'
p17266
S'NonlinearVariableName'
p17267
sS'default'
p17268
g3
sS'name'
p17269
S'variable'
p17270
sS'required'
p17271
I01
sS'group_name'
p17272
Nsa(dp17273
S'description'
p17274
g3
sS'cpp_type'
p17275
S'std::vector<VariableName>'
p17276
sS'default'
p17277
g3
sS'name'
p17278
S'w'
p17279
sS'required'
p17280
I00
sS'group_name'
p17281
NsasS'name'
p17282
S'/BCs/NSEnergyInviscidSpecifiedBC'
p17283
sa(dp17284
S'description'
p17285
g3
sS'subblocks'
p17286
NsS'parameters'
p17287
(lp17288
(dp17289
S'description'
p17290
S'Gas constant.\n'
p17291
sS'cpp_type'
p17292
S'double'
p17293
sS'default'
p17294
g3
sS'name'
p17295
S'R'
p17296
sS'required'
p17297
I01
sS'group_name'
p17298
Nsa(dp17299
S'description'
p17300
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17301
sS'cpp_type'
p17302
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17303
sS'default'
p17304
g3
sS'name'
p17305
S'boundary'
p17306
sS'required'
p17307
I01
sS'group_name'
p17308
Nsa(dp17309
S'description'
p17310
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17311
sS'cpp_type'
p17312
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17313
sS'default'
p17314
g3
sS'name'
p17315
S'control_tags'
p17316
sS'required'
p17317
I00
sS'group_name'
p17318
Nsa(dp17319
S'description'
p17320
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17321
sS'cpp_type'
p17322
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17323
sS'default'
p17324
g3
sS'name'
p17325
S'diag_save_in'
p17326
sS'required'
p17327
I00
sS'group_name'
p17328
S'Advanced'
p17329
sa(dp17330
S'description'
p17331
S'Ratio of specific heats.\n'
p17332
sS'cpp_type'
p17333
S'double'
p17334
sS'default'
p17335
g3
sS'name'
p17336
S'gamma'
p17337
sS'required'
p17338
I01
sS'group_name'
p17339
Nsa(dp17340
S'description'
p17341
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17342
sS'cpp_type'
p17343
S'bool'
p17344
sS'default'
p17345
S'1'
p17346
sS'name'
p17347
S'implicit'
p17348
sS'required'
p17349
I00
sS'group_name'
p17350
S'Advanced'
p17351
sa(dp17352
S'description'
p17353
g3
sS'cpp_type'
p17354
S'std::vector<VariableName>'
p17355
sS'default'
p17356
g3
sS'name'
p17357
S'pressure'
p17358
sS'required'
p17359
I01
sS'group_name'
p17360
Nsa(dp17361
S'description'
p17362
S'density\n'
p17363
sS'cpp_type'
p17364
S'std::vector<VariableName>'
p17365
sS'default'
p17366
g3
sS'name'
p17367
S'rho'
p17368
sS'required'
p17369
I01
sS'group_name'
p17370
Nsa(dp17371
S'description'
p17372
S'energy\n'
p17373
sS'cpp_type'
p17374
S'std::vector<VariableName>'
p17375
sS'default'
p17376
g3
sS'name'
p17377
S'rhoe'
p17378
sS'required'
p17379
I01
sS'group_name'
p17380
Nsa(dp17381
S'description'
p17382
S'x-momentum\n'
p17383
sS'cpp_type'
p17384
S'std::vector<VariableName>'
p17385
sS'default'
p17386
g3
sS'name'
p17387
S'rhou'
p17388
sS'required'
p17389
I01
sS'group_name'
p17390
Nsa(dp17391
S'description'
p17392
S'y-momentum\n'
p17393
sS'cpp_type'
p17394
S'std::vector<VariableName>'
p17395
sS'default'
p17396
g3
sS'name'
p17397
S'rhov'
p17398
sS'required'
p17399
I01
sS'group_name'
p17400
Nsa(dp17401
S'description'
p17402
S'z-momentum\n'
p17403
sS'cpp_type'
p17404
S'std::vector<VariableName>'
p17405
sS'default'
p17406
g3
sS'name'
p17407
S'rhow'
p17408
sS'required'
p17409
I00
sS'group_name'
p17410
Nsa(dp17411
S'description'
p17412
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17413
sS'cpp_type'
p17414
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17415
sS'default'
p17416
g3
sS'name'
p17417
S'save_in'
p17418
sS'required'
p17419
I00
sS'group_name'
p17420
S'Advanced'
p17421
sa(dp17422
S'description'
p17423
S'The seed for the master random number generator\n'
p17424
sS'cpp_type'
p17425
S'unsigned int'
p17426
sS'default'
p17427
S'0'
p17428
sS'name'
p17429
S'seed'
p17430
sS'required'
p17431
I00
sS'group_name'
p17432
S'Advanced'
p17433
sa(dp17434
S'description'
p17435
S'The specified density for this boundary\n'
p17436
sS'cpp_type'
p17437
S'double'
p17438
sS'default'
p17439
g3
sS'name'
p17440
S'specified_density'
p17441
sS'required'
p17442
I01
sS'group_name'
p17443
Nsa(dp17444
S'description'
p17445
S'The x-component of the specified velocity for this boundary\n'
p17446
sS'cpp_type'
p17447
S'double'
p17448
sS'default'
p17449
g3
sS'name'
p17450
S'specified_u'
p17451
sS'required'
p17452
I01
sS'group_name'
p17453
Nsa(dp17454
S'description'
p17455
S'The y-component of the specified velocity for this boundary\n'
p17456
sS'cpp_type'
p17457
S'double'
p17458
sS'default'
p17459
g3
sS'name'
p17460
S'specified_v'
p17461
sS'required'
p17462
I01
sS'group_name'
p17463
Nsa(dp17464
S'description'
p17465
S'The z-component of the specified velocity for this boundary\n'
p17466
sS'cpp_type'
p17467
S'double'
p17468
sS'default'
p17469
S'0'
p17470
sS'name'
p17471
S'specified_w'
p17472
sS'required'
p17473
I00
sS'group_name'
p17474
Nsa(dp17475
S'description'
p17476
g3
sS'cpp_type'
p17477
S'std::vector<VariableName>'
p17478
sS'default'
p17479
g3
sS'name'
p17480
S'temperature'
p17481
sS'required'
p17482
I01
sS'group_name'
p17483
Nsa(dp17484
S'description'
p17485
g3
sS'cpp_type'
p17486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17487
sS'default'
p17488
S'NSEnergyInviscidSpecifiedDensityAndVelocityBC'
p17489
sS'name'
p17490
S'type'
p17491
sS'required'
p17492
I00
sS'group_name'
p17493
Nsa(dp17494
S'description'
p17495
g3
sS'cpp_type'
p17496
S'std::vector<VariableName>'
p17497
sS'default'
p17498
g3
sS'name'
p17499
S'u'
p17500
sS'required'
p17501
I01
sS'group_name'
p17502
Nsa(dp17503
S'description'
p17504
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17505
sS'cpp_type'
p17506
S'bool'
p17507
sS'default'
p17508
S'0'
p17509
sS'name'
p17510
S'use_displaced_mesh'
p17511
sS'required'
p17512
I00
sS'group_name'
p17513
S'Advanced'
p17514
sa(dp17515
S'description'
p17516
g3
sS'cpp_type'
p17517
S'std::vector<VariableName>'
p17518
sS'default'
p17519
g3
sS'name'
p17520
S'v'
p17521
sS'required'
p17522
I01
sS'group_name'
p17523
Nsa(dp17524
S'description'
p17525
S'The name of the variable that this boundary condition applies to\n'
p17526
sS'cpp_type'
p17527
S'NonlinearVariableName'
p17528
sS'default'
p17529
g3
sS'name'
p17530
S'variable'
p17531
sS'required'
p17532
I01
sS'group_name'
p17533
Nsa(dp17534
S'description'
p17535
g3
sS'cpp_type'
p17536
S'std::vector<VariableName>'
p17537
sS'default'
p17538
g3
sS'name'
p17539
S'w'
p17540
sS'required'
p17541
I00
sS'group_name'
p17542
NsasS'name'
p17543
S'/BCs/NSEnergyInviscidSpecifiedDensityAndVelocityBC'
p17544
sa(dp17545
S'description'
p17546
g3
sS'subblocks'
p17547
NsS'parameters'
p17548
(lp17549
(dp17550
S'description'
p17551
S'Gas constant.\n'
p17552
sS'cpp_type'
p17553
S'double'
p17554
sS'default'
p17555
g3
sS'name'
p17556
S'R'
p17557
sS'required'
p17558
I01
sS'group_name'
p17559
Nsa(dp17560
S'description'
p17561
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17562
sS'cpp_type'
p17563
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17564
sS'default'
p17565
g3
sS'name'
p17566
S'boundary'
p17567
sS'required'
p17568
I01
sS'group_name'
p17569
Nsa(dp17570
S'description'
p17571
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17572
sS'cpp_type'
p17573
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17574
sS'default'
p17575
g3
sS'name'
p17576
S'control_tags'
p17577
sS'required'
p17578
I00
sS'group_name'
p17579
Nsa(dp17580
S'description'
p17581
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17582
sS'cpp_type'
p17583
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17584
sS'default'
p17585
g3
sS'name'
p17586
S'diag_save_in'
p17587
sS'required'
p17588
I00
sS'group_name'
p17589
S'Advanced'
p17590
sa(dp17591
S'description'
p17592
S'Ratio of specific heats.\n'
p17593
sS'cpp_type'
p17594
S'double'
p17595
sS'default'
p17596
g3
sS'name'
p17597
S'gamma'
p17598
sS'required'
p17599
I01
sS'group_name'
p17600
Nsa(dp17601
S'description'
p17602
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17603
sS'cpp_type'
p17604
S'bool'
p17605
sS'default'
p17606
S'1'
p17607
sS'name'
p17608
S'implicit'
p17609
sS'required'
p17610
I00
sS'group_name'
p17611
S'Advanced'
p17612
sa(dp17613
S'description'
p17614
g3
sS'cpp_type'
p17615
S'std::vector<VariableName>'
p17616
sS'default'
p17617
g3
sS'name'
p17618
S'pressure'
p17619
sS'required'
p17620
I01
sS'group_name'
p17621
Nsa(dp17622
S'description'
p17623
S'density\n'
p17624
sS'cpp_type'
p17625
S'std::vector<VariableName>'
p17626
sS'default'
p17627
g3
sS'name'
p17628
S'rho'
p17629
sS'required'
p17630
I01
sS'group_name'
p17631
Nsa(dp17632
S'description'
p17633
S'energy\n'
p17634
sS'cpp_type'
p17635
S'std::vector<VariableName>'
p17636
sS'default'
p17637
g3
sS'name'
p17638
S'rhoe'
p17639
sS'required'
p17640
I01
sS'group_name'
p17641
Nsa(dp17642
S'description'
p17643
S'x-momentum\n'
p17644
sS'cpp_type'
p17645
S'std::vector<VariableName>'
p17646
sS'default'
p17647
g3
sS'name'
p17648
S'rhou'
p17649
sS'required'
p17650
I01
sS'group_name'
p17651
Nsa(dp17652
S'description'
p17653
S'y-momentum\n'
p17654
sS'cpp_type'
p17655
S'std::vector<VariableName>'
p17656
sS'default'
p17657
g3
sS'name'
p17658
S'rhov'
p17659
sS'required'
p17660
I01
sS'group_name'
p17661
Nsa(dp17662
S'description'
p17663
S'z-momentum\n'
p17664
sS'cpp_type'
p17665
S'std::vector<VariableName>'
p17666
sS'default'
p17667
g3
sS'name'
p17668
S'rhow'
p17669
sS'required'
p17670
I00
sS'group_name'
p17671
Nsa(dp17672
S'description'
p17673
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17674
sS'cpp_type'
p17675
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17676
sS'default'
p17677
g3
sS'name'
p17678
S'save_in'
p17679
sS'required'
p17680
I00
sS'group_name'
p17681
S'Advanced'
p17682
sa(dp17683
S'description'
p17684
S'The seed for the master random number generator\n'
p17685
sS'cpp_type'
p17686
S'unsigned int'
p17687
sS'default'
p17688
S'0'
p17689
sS'name'
p17690
S'seed'
p17691
sS'required'
p17692
I00
sS'group_name'
p17693
S'Advanced'
p17694
sa(dp17695
S'description'
p17696
g3
sS'cpp_type'
p17697
S'std::vector<VariableName>'
p17698
sS'default'
p17699
g3
sS'name'
p17700
S'temperature'
p17701
sS'required'
p17702
I01
sS'group_name'
p17703
Nsa(dp17704
S'description'
p17705
g3
sS'cpp_type'
p17706
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17707
sS'default'
p17708
S'NSEnergyInviscidSpecifiedNormalFlowBC'
p17709
sS'name'
p17710
S'type'
p17711
sS'required'
p17712
I00
sS'group_name'
p17713
Nsa(dp17714
S'description'
p17715
g3
sS'cpp_type'
p17716
S'std::vector<VariableName>'
p17717
sS'default'
p17718
g3
sS'name'
p17719
S'u'
p17720
sS'required'
p17721
I01
sS'group_name'
p17722
Nsa(dp17723
S'description'
p17724
S'The specified value of u.n for this boundary\n'
p17725
sS'cpp_type'
p17726
S'double'
p17727
sS'default'
p17728
g3
sS'name'
p17729
S'un'
p17730
sS'required'
p17731
I01
sS'group_name'
p17732
Nsa(dp17733
S'description'
p17734
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17735
sS'cpp_type'
p17736
S'bool'
p17737
sS'default'
p17738
S'0'
p17739
sS'name'
p17740
S'use_displaced_mesh'
p17741
sS'required'
p17742
I00
sS'group_name'
p17743
S'Advanced'
p17744
sa(dp17745
S'description'
p17746
g3
sS'cpp_type'
p17747
S'std::vector<VariableName>'
p17748
sS'default'
p17749
g3
sS'name'
p17750
S'v'
p17751
sS'required'
p17752
I01
sS'group_name'
p17753
Nsa(dp17754
S'description'
p17755
S'The name of the variable that this boundary condition applies to\n'
p17756
sS'cpp_type'
p17757
S'NonlinearVariableName'
p17758
sS'default'
p17759
g3
sS'name'
p17760
S'variable'
p17761
sS'required'
p17762
I01
sS'group_name'
p17763
Nsa(dp17764
S'description'
p17765
g3
sS'cpp_type'
p17766
S'std::vector<VariableName>'
p17767
sS'default'
p17768
g3
sS'name'
p17769
S'w'
p17770
sS'required'
p17771
I00
sS'group_name'
p17772
NsasS'name'
p17773
S'/BCs/NSEnergyInviscidSpecifiedNormalFlowBC'
p17774
sa(dp17775
S'description'
p17776
g3
sS'subblocks'
p17777
NsS'parameters'
p17778
(lp17779
(dp17780
S'description'
p17781
S'Gas constant.\n'
p17782
sS'cpp_type'
p17783
S'double'
p17784
sS'default'
p17785
g3
sS'name'
p17786
S'R'
p17787
sS'required'
p17788
I01
sS'group_name'
p17789
Nsa(dp17790
S'description'
p17791
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17792
sS'cpp_type'
p17793
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17794
sS'default'
p17795
g3
sS'name'
p17796
S'boundary'
p17797
sS'required'
p17798
I01
sS'group_name'
p17799
Nsa(dp17800
S'description'
p17801
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17802
sS'cpp_type'
p17803
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p17804
sS'default'
p17805
g3
sS'name'
p17806
S'control_tags'
p17807
sS'required'
p17808
I00
sS'group_name'
p17809
Nsa(dp17810
S'description'
p17811
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17812
sS'cpp_type'
p17813
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17814
sS'default'
p17815
g3
sS'name'
p17816
S'diag_save_in'
p17817
sS'required'
p17818
I00
sS'group_name'
p17819
S'Advanced'
p17820
sa(dp17821
S'description'
p17822
S'Ratio of specific heats.\n'
p17823
sS'cpp_type'
p17824
S'double'
p17825
sS'default'
p17826
g3
sS'name'
p17827
S'gamma'
p17828
sS'required'
p17829
I01
sS'group_name'
p17830
Nsa(dp17831
S'description'
p17832
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17833
sS'cpp_type'
p17834
S'bool'
p17835
sS'default'
p17836
S'1'
p17837
sS'name'
p17838
S'implicit'
p17839
sS'required'
p17840
I00
sS'group_name'
p17841
S'Advanced'
p17842
sa(dp17843
S'description'
p17844
S'density\n'
p17845
sS'cpp_type'
p17846
S'std::vector<VariableName>'
p17847
sS'default'
p17848
g3
sS'name'
p17849
S'rho'
p17850
sS'required'
p17851
I01
sS'group_name'
p17852
Nsa(dp17853
S'description'
p17854
S'energy\n'
p17855
sS'cpp_type'
p17856
S'std::vector<VariableName>'
p17857
sS'default'
p17858
g3
sS'name'
p17859
S'rhoe'
p17860
sS'required'
p17861
I01
sS'group_name'
p17862
Nsa(dp17863
S'description'
p17864
S'x-momentum\n'
p17865
sS'cpp_type'
p17866
S'std::vector<VariableName>'
p17867
sS'default'
p17868
g3
sS'name'
p17869
S'rhou'
p17870
sS'required'
p17871
I01
sS'group_name'
p17872
Nsa(dp17873
S'description'
p17874
S'y-momentum\n'
p17875
sS'cpp_type'
p17876
S'std::vector<VariableName>'
p17877
sS'default'
p17878
g3
sS'name'
p17879
S'rhov'
p17880
sS'required'
p17881
I01
sS'group_name'
p17882
Nsa(dp17883
S'description'
p17884
S'z-momentum\n'
p17885
sS'cpp_type'
p17886
S'std::vector<VariableName>'
p17887
sS'default'
p17888
g3
sS'name'
p17889
S'rhow'
p17890
sS'required'
p17891
I00
sS'group_name'
p17892
Nsa(dp17893
S'description'
p17894
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17895
sS'cpp_type'
p17896
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17897
sS'default'
p17898
g3
sS'name'
p17899
S'save_in'
p17900
sS'required'
p17901
I00
sS'group_name'
p17902
S'Advanced'
p17903
sa(dp17904
S'description'
p17905
S'The seed for the master random number generator\n'
p17906
sS'cpp_type'
p17907
S'unsigned int'
p17908
sS'default'
p17909
S'0'
p17910
sS'name'
p17911
S'seed'
p17912
sS'required'
p17913
I00
sS'group_name'
p17914
S'Advanced'
p17915
sa(dp17916
S'description'
p17917
S'The specified pressure for this boundary\n'
p17918
sS'cpp_type'
p17919
S'double'
p17920
sS'default'
p17921
g3
sS'name'
p17922
S'specified_pressure'
p17923
sS'required'
p17924
I01
sS'group_name'
p17925
Nsa(dp17926
S'description'
p17927
g3
sS'cpp_type'
p17928
S'std::vector<VariableName>'
p17929
sS'default'
p17930
g3
sS'name'
p17931
S'temperature'
p17932
sS'required'
p17933
I01
sS'group_name'
p17934
Nsa(dp17935
S'description'
p17936
g3
sS'cpp_type'
p17937
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p17938
sS'default'
p17939
S'NSEnergyInviscidSpecifiedPressureBC'
p17940
sS'name'
p17941
S'type'
p17942
sS'required'
p17943
I00
sS'group_name'
p17944
Nsa(dp17945
S'description'
p17946
g3
sS'cpp_type'
p17947
S'std::vector<VariableName>'
p17948
sS'default'
p17949
g3
sS'name'
p17950
S'u'
p17951
sS'required'
p17952
I01
sS'group_name'
p17953
Nsa(dp17954
S'description'
p17955
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17956
sS'cpp_type'
p17957
S'bool'
p17958
sS'default'
p17959
S'0'
p17960
sS'name'
p17961
S'use_displaced_mesh'
p17962
sS'required'
p17963
I00
sS'group_name'
p17964
S'Advanced'
p17965
sa(dp17966
S'description'
p17967
g3
sS'cpp_type'
p17968
S'std::vector<VariableName>'
p17969
sS'default'
p17970
g3
sS'name'
p17971
S'v'
p17972
sS'required'
p17973
I01
sS'group_name'
p17974
Nsa(dp17975
S'description'
p17976
S'The name of the variable that this boundary condition applies to\n'
p17977
sS'cpp_type'
p17978
S'NonlinearVariableName'
p17979
sS'default'
p17980
g3
sS'name'
p17981
S'variable'
p17982
sS'required'
p17983
I01
sS'group_name'
p17984
Nsa(dp17985
S'description'
p17986
g3
sS'cpp_type'
p17987
S'std::vector<VariableName>'
p17988
sS'default'
p17989
g3
sS'name'
p17990
S'w'
p17991
sS'required'
p17992
I00
sS'group_name'
p17993
NsasS'name'
p17994
S'/BCs/NSEnergyInviscidSpecifiedPressureBC'
p17995
sa(dp17996
S'description'
p17997
g3
sS'subblocks'
p17998
NsS'parameters'
p17999
(lp18000
(dp18001
S'description'
p18002
S'Gas constant.\n'
p18003
sS'cpp_type'
p18004
S'double'
p18005
sS'default'
p18006
g3
sS'name'
p18007
S'R'
p18008
sS'required'
p18009
I01
sS'group_name'
p18010
Nsa(dp18011
S'description'
p18012
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18013
sS'cpp_type'
p18014
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18015
sS'default'
p18016
g3
sS'name'
p18017
S'boundary'
p18018
sS'required'
p18019
I01
sS'group_name'
p18020
Nsa(dp18021
S'description'
p18022
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18023
sS'cpp_type'
p18024
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18025
sS'default'
p18026
g3
sS'name'
p18027
S'control_tags'
p18028
sS'required'
p18029
I00
sS'group_name'
p18030
Nsa(dp18031
S'description'
p18032
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18033
sS'cpp_type'
p18034
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18035
sS'default'
p18036
g3
sS'name'
p18037
S'diag_save_in'
p18038
sS'required'
p18039
I00
sS'group_name'
p18040
S'Advanced'
p18041
sa(dp18042
S'description'
p18043
S'Ratio of specific heats.\n'
p18044
sS'cpp_type'
p18045
S'double'
p18046
sS'default'
p18047
g3
sS'name'
p18048
S'gamma'
p18049
sS'required'
p18050
I01
sS'group_name'
p18051
Nsa(dp18052
S'description'
p18053
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18054
sS'cpp_type'
p18055
S'bool'
p18056
sS'default'
p18057
S'1'
p18058
sS'name'
p18059
S'implicit'
p18060
sS'required'
p18061
I00
sS'group_name'
p18062
S'Advanced'
p18063
sa(dp18064
S'description'
p18065
g3
sS'cpp_type'
p18066
S'std::vector<VariableName>'
p18067
sS'default'
p18068
g3
sS'name'
p18069
S'pressure'
p18070
sS'required'
p18071
I01
sS'group_name'
p18072
Nsa(dp18073
S'description'
p18074
S'density\n'
p18075
sS'cpp_type'
p18076
S'std::vector<VariableName>'
p18077
sS'default'
p18078
g3
sS'name'
p18079
S'rho'
p18080
sS'required'
p18081
I01
sS'group_name'
p18082
Nsa(dp18083
S'description'
p18084
S'energy\n'
p18085
sS'cpp_type'
p18086
S'std::vector<VariableName>'
p18087
sS'default'
p18088
g3
sS'name'
p18089
S'rhoe'
p18090
sS'required'
p18091
I01
sS'group_name'
p18092
Nsa(dp18093
S'description'
p18094
S'x-momentum\n'
p18095
sS'cpp_type'
p18096
S'std::vector<VariableName>'
p18097
sS'default'
p18098
g3
sS'name'
p18099
S'rhou'
p18100
sS'required'
p18101
I01
sS'group_name'
p18102
Nsa(dp18103
S'description'
p18104
S'y-momentum\n'
p18105
sS'cpp_type'
p18106
S'std::vector<VariableName>'
p18107
sS'default'
p18108
g3
sS'name'
p18109
S'rhov'
p18110
sS'required'
p18111
I01
sS'group_name'
p18112
Nsa(dp18113
S'description'
p18114
S'z-momentum\n'
p18115
sS'cpp_type'
p18116
S'std::vector<VariableName>'
p18117
sS'default'
p18118
g3
sS'name'
p18119
S'rhow'
p18120
sS'required'
p18121
I00
sS'group_name'
p18122
Nsa(dp18123
S'description'
p18124
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18125
sS'cpp_type'
p18126
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18127
sS'default'
p18128
g3
sS'name'
p18129
S'save_in'
p18130
sS'required'
p18131
I00
sS'group_name'
p18132
S'Advanced'
p18133
sa(dp18134
S'description'
p18135
S'The seed for the master random number generator\n'
p18136
sS'cpp_type'
p18137
S'unsigned int'
p18138
sS'default'
p18139
S'0'
p18140
sS'name'
p18141
S'seed'
p18142
sS'required'
p18143
I00
sS'group_name'
p18144
S'Advanced'
p18145
sa(dp18146
S'description'
p18147
g3
sS'cpp_type'
p18148
S'std::vector<VariableName>'
p18149
sS'default'
p18150
g3
sS'name'
p18151
S'temperature'
p18152
sS'required'
p18153
I01
sS'group_name'
p18154
Nsa(dp18155
S'description'
p18156
g3
sS'cpp_type'
p18157
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18158
sS'default'
p18159
S'NSEnergyInviscidUnspecifiedBC'
p18160
sS'name'
p18161
S'type'
p18162
sS'required'
p18163
I00
sS'group_name'
p18164
Nsa(dp18165
S'description'
p18166
g3
sS'cpp_type'
p18167
S'std::vector<VariableName>'
p18168
sS'default'
p18169
g3
sS'name'
p18170
S'u'
p18171
sS'required'
p18172
I01
sS'group_name'
p18173
Nsa(dp18174
S'description'
p18175
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18176
sS'cpp_type'
p18177
S'bool'
p18178
sS'default'
p18179
S'0'
p18180
sS'name'
p18181
S'use_displaced_mesh'
p18182
sS'required'
p18183
I00
sS'group_name'
p18184
S'Advanced'
p18185
sa(dp18186
S'description'
p18187
g3
sS'cpp_type'
p18188
S'std::vector<VariableName>'
p18189
sS'default'
p18190
g3
sS'name'
p18191
S'v'
p18192
sS'required'
p18193
I01
sS'group_name'
p18194
Nsa(dp18195
S'description'
p18196
S'The name of the variable that this boundary condition applies to\n'
p18197
sS'cpp_type'
p18198
S'NonlinearVariableName'
p18199
sS'default'
p18200
g3
sS'name'
p18201
S'variable'
p18202
sS'required'
p18203
I01
sS'group_name'
p18204
Nsa(dp18205
S'description'
p18206
g3
sS'cpp_type'
p18207
S'std::vector<VariableName>'
p18208
sS'default'
p18209
g3
sS'name'
p18210
S'w'
p18211
sS'required'
p18212
I00
sS'group_name'
p18213
NsasS'name'
p18214
S'/BCs/NSEnergyInviscidUnspecifiedBC'
p18215
sa(dp18216
S'description'
p18217
g3
sS'subblocks'
p18218
NsS'parameters'
p18219
(lp18220
(dp18221
S'description'
p18222
S'Gas constant.\n'
p18223
sS'cpp_type'
p18224
S'double'
p18225
sS'default'
p18226
g3
sS'name'
p18227
S'R'
p18228
sS'required'
p18229
I01
sS'group_name'
p18230
Nsa(dp18231
S'description'
p18232
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18233
sS'cpp_type'
p18234
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18235
sS'default'
p18236
g3
sS'name'
p18237
S'boundary'
p18238
sS'required'
p18239
I01
sS'group_name'
p18240
Nsa(dp18241
S'description'
p18242
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18243
sS'cpp_type'
p18244
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18245
sS'default'
p18246
g3
sS'name'
p18247
S'control_tags'
p18248
sS'required'
p18249
I00
sS'group_name'
p18250
Nsa(dp18251
S'description'
p18252
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18253
sS'cpp_type'
p18254
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18255
sS'default'
p18256
g3
sS'name'
p18257
S'diag_save_in'
p18258
sS'required'
p18259
I00
sS'group_name'
p18260
S'Advanced'
p18261
sa(dp18262
S'description'
p18263
S'Ratio of specific heats.\n'
p18264
sS'cpp_type'
p18265
S'double'
p18266
sS'default'
p18267
g3
sS'name'
p18268
S'gamma'
p18269
sS'required'
p18270
I01
sS'group_name'
p18271
Nsa(dp18272
S'description'
p18273
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18274
sS'cpp_type'
p18275
S'bool'
p18276
sS'default'
p18277
S'1'
p18278
sS'name'
p18279
S'implicit'
p18280
sS'required'
p18281
I00
sS'group_name'
p18282
S'Advanced'
p18283
sa(dp18284
S'description'
p18285
S'density\n'
p18286
sS'cpp_type'
p18287
S'std::vector<VariableName>'
p18288
sS'default'
p18289
g3
sS'name'
p18290
S'rho'
p18291
sS'required'
p18292
I01
sS'group_name'
p18293
Nsa(dp18294
S'description'
p18295
S'energy\n'
p18296
sS'cpp_type'
p18297
S'std::vector<VariableName>'
p18298
sS'default'
p18299
g3
sS'name'
p18300
S'rhoe'
p18301
sS'required'
p18302
I01
sS'group_name'
p18303
Nsa(dp18304
S'description'
p18305
S'x-momentum\n'
p18306
sS'cpp_type'
p18307
S'std::vector<VariableName>'
p18308
sS'default'
p18309
g3
sS'name'
p18310
S'rhou'
p18311
sS'required'
p18312
I01
sS'group_name'
p18313
Nsa(dp18314
S'description'
p18315
S'y-momentum\n'
p18316
sS'cpp_type'
p18317
S'std::vector<VariableName>'
p18318
sS'default'
p18319
g3
sS'name'
p18320
S'rhov'
p18321
sS'required'
p18322
I01
sS'group_name'
p18323
Nsa(dp18324
S'description'
p18325
S'z-momentum\n'
p18326
sS'cpp_type'
p18327
S'std::vector<VariableName>'
p18328
sS'default'
p18329
g3
sS'name'
p18330
S'rhow'
p18331
sS'required'
p18332
I00
sS'group_name'
p18333
Nsa(dp18334
S'description'
p18335
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18336
sS'cpp_type'
p18337
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18338
sS'default'
p18339
g3
sS'name'
p18340
S'save_in'
p18341
sS'required'
p18342
I00
sS'group_name'
p18343
S'Advanced'
p18344
sa(dp18345
S'description'
p18346
S'The seed for the master random number generator\n'
p18347
sS'cpp_type'
p18348
S'unsigned int'
p18349
sS'default'
p18350
S'0'
p18351
sS'name'
p18352
S'seed'
p18353
sS'required'
p18354
I00
sS'group_name'
p18355
S'Advanced'
p18356
sa(dp18357
S'description'
p18358
g3
sS'cpp_type'
p18359
S'std::vector<VariableName>'
p18360
sS'default'
p18361
g3
sS'name'
p18362
S'temperature'
p18363
sS'required'
p18364
I01
sS'group_name'
p18365
Nsa(dp18366
S'description'
p18367
g3
sS'cpp_type'
p18368
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18369
sS'default'
p18370
S'NSEnergyViscousBC'
p18371
sS'name'
p18372
S'type'
p18373
sS'required'
p18374
I00
sS'group_name'
p18375
Nsa(dp18376
S'description'
p18377
g3
sS'cpp_type'
p18378
S'std::vector<VariableName>'
p18379
sS'default'
p18380
g3
sS'name'
p18381
S'u'
p18382
sS'required'
p18383
I01
sS'group_name'
p18384
Nsa(dp18385
S'description'
p18386
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18387
sS'cpp_type'
p18388
S'bool'
p18389
sS'default'
p18390
S'0'
p18391
sS'name'
p18392
S'use_displaced_mesh'
p18393
sS'required'
p18394
I00
sS'group_name'
p18395
S'Advanced'
p18396
sa(dp18397
S'description'
p18398
g3
sS'cpp_type'
p18399
S'std::vector<VariableName>'
p18400
sS'default'
p18401
g3
sS'name'
p18402
S'v'
p18403
sS'required'
p18404
I01
sS'group_name'
p18405
Nsa(dp18406
S'description'
p18407
S'The name of the variable that this boundary condition applies to\n'
p18408
sS'cpp_type'
p18409
S'NonlinearVariableName'
p18410
sS'default'
p18411
g3
sS'name'
p18412
S'variable'
p18413
sS'required'
p18414
I01
sS'group_name'
p18415
Nsa(dp18416
S'description'
p18417
g3
sS'cpp_type'
p18418
S'std::vector<VariableName>'
p18419
sS'default'
p18420
g3
sS'name'
p18421
S'w'
p18422
sS'required'
p18423
I00
sS'group_name'
p18424
NsasS'name'
p18425
S'/BCs/NSEnergyViscousBC'
p18426
sa(dp18427
S'description'
p18428
g3
sS'subblocks'
p18429
NsS'parameters'
p18430
(lp18431
(dp18432
S'description'
p18433
S'Gas constant.\n'
p18434
sS'cpp_type'
p18435
S'double'
p18436
sS'default'
p18437
g3
sS'name'
p18438
S'R'
p18439
sS'required'
p18440
I01
sS'group_name'
p18441
Nsa(dp18442
S'description'
p18443
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18444
sS'cpp_type'
p18445
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18446
sS'default'
p18447
g3
sS'name'
p18448
S'boundary'
p18449
sS'required'
p18450
I01
sS'group_name'
p18451
Nsa(dp18452
S'description'
p18453
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18454
sS'cpp_type'
p18455
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18456
sS'default'
p18457
g3
sS'name'
p18458
S'control_tags'
p18459
sS'required'
p18460
I00
sS'group_name'
p18461
Nsa(dp18462
S'description'
p18463
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18464
sS'cpp_type'
p18465
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18466
sS'default'
p18467
g3
sS'name'
p18468
S'diag_save_in'
p18469
sS'required'
p18470
I00
sS'group_name'
p18471
S'Advanced'
p18472
sa(dp18473
S'description'
p18474
S'Ratio of specific heats.\n'
p18475
sS'cpp_type'
p18476
S'double'
p18477
sS'default'
p18478
g3
sS'name'
p18479
S'gamma'
p18480
sS'required'
p18481
I01
sS'group_name'
p18482
Nsa(dp18483
S'description'
p18484
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18485
sS'cpp_type'
p18486
S'bool'
p18487
sS'default'
p18488
S'1'
p18489
sS'name'
p18490
S'implicit'
p18491
sS'required'
p18492
I00
sS'group_name'
p18493
S'Advanced'
p18494
sa(dp18495
S'description'
p18496
S'density\n'
p18497
sS'cpp_type'
p18498
S'std::vector<VariableName>'
p18499
sS'default'
p18500
g3
sS'name'
p18501
S'rho'
p18502
sS'required'
p18503
I01
sS'group_name'
p18504
Nsa(dp18505
S'description'
p18506
S'energy\n'
p18507
sS'cpp_type'
p18508
S'std::vector<VariableName>'
p18509
sS'default'
p18510
g3
sS'name'
p18511
S'rhoe'
p18512
sS'required'
p18513
I01
sS'group_name'
p18514
Nsa(dp18515
S'description'
p18516
S'x-momentum\n'
p18517
sS'cpp_type'
p18518
S'std::vector<VariableName>'
p18519
sS'default'
p18520
g3
sS'name'
p18521
S'rhou'
p18522
sS'required'
p18523
I01
sS'group_name'
p18524
Nsa(dp18525
S'description'
p18526
S'y-momentum\n'
p18527
sS'cpp_type'
p18528
S'std::vector<VariableName>'
p18529
sS'default'
p18530
g3
sS'name'
p18531
S'rhov'
p18532
sS'required'
p18533
I01
sS'group_name'
p18534
Nsa(dp18535
S'description'
p18536
S'z-momentum\n'
p18537
sS'cpp_type'
p18538
S'std::vector<VariableName>'
p18539
sS'default'
p18540
g3
sS'name'
p18541
S'rhow'
p18542
sS'required'
p18543
I00
sS'group_name'
p18544
Nsa(dp18545
S'description'
p18546
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18547
sS'cpp_type'
p18548
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18549
sS'default'
p18550
g3
sS'name'
p18551
S'save_in'
p18552
sS'required'
p18553
I00
sS'group_name'
p18554
S'Advanced'
p18555
sa(dp18556
S'description'
p18557
S'The seed for the master random number generator\n'
p18558
sS'cpp_type'
p18559
S'unsigned int'
p18560
sS'default'
p18561
S'0'
p18562
sS'name'
p18563
S'seed'
p18564
sS'required'
p18565
I00
sS'group_name'
p18566
S'Advanced'
p18567
sa(dp18568
S'description'
p18569
S'The specifed stagnation pressure\n'
p18570
sS'cpp_type'
p18571
S'double'
p18572
sS'default'
p18573
g3
sS'name'
p18574
S'stagnation_pressure'
p18575
sS'required'
p18576
I01
sS'group_name'
p18577
Nsa(dp18578
S'description'
p18579
S'The specifed stagnation temperature\n'
p18580
sS'cpp_type'
p18581
S'double'
p18582
sS'default'
p18583
g3
sS'name'
p18584
S'stagnation_temperature'
p18585
sS'required'
p18586
I01
sS'group_name'
p18587
Nsa(dp18588
S'description'
p18589
S'x-component of specifed flow direction\n'
p18590
sS'cpp_type'
p18591
S'double'
p18592
sS'default'
p18593
g3
sS'name'
p18594
S'sx'
p18595
sS'required'
p18596
I01
sS'group_name'
p18597
Nsa(dp18598
S'description'
p18599
S'y-component of specifed flow direction\n'
p18600
sS'cpp_type'
p18601
S'double'
p18602
sS'default'
p18603
g3
sS'name'
p18604
S'sy'
p18605
sS'required'
p18606
I01
sS'group_name'
p18607
Nsa(dp18608
S'description'
p18609
S'z-component of specifed flow direction\n'
p18610
sS'cpp_type'
p18611
S'double'
p18612
sS'default'
p18613
S'0'
p18614
sS'name'
p18615
S'sz'
p18616
sS'required'
p18617
I00
sS'group_name'
p18618
Nsa(dp18619
S'description'
p18620
g3
sS'cpp_type'
p18621
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18622
sS'default'
p18623
S'NSEnergyWeakStagnationBC'
p18624
sS'name'
p18625
S'type'
p18626
sS'required'
p18627
I00
sS'group_name'
p18628
Nsa(dp18629
S'description'
p18630
g3
sS'cpp_type'
p18631
S'std::vector<VariableName>'
p18632
sS'default'
p18633
g3
sS'name'
p18634
S'u'
p18635
sS'required'
p18636
I01
sS'group_name'
p18637
Nsa(dp18638
S'description'
p18639
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18640
sS'cpp_type'
p18641
S'bool'
p18642
sS'default'
p18643
S'0'
p18644
sS'name'
p18645
S'use_displaced_mesh'
p18646
sS'required'
p18647
I00
sS'group_name'
p18648
S'Advanced'
p18649
sa(dp18650
S'description'
p18651
g3
sS'cpp_type'
p18652
S'std::vector<VariableName>'
p18653
sS'default'
p18654
g3
sS'name'
p18655
S'v'
p18656
sS'required'
p18657
I01
sS'group_name'
p18658
Nsa(dp18659
S'description'
p18660
S'The name of the variable that this boundary condition applies to\n'
p18661
sS'cpp_type'
p18662
S'NonlinearVariableName'
p18663
sS'default'
p18664
g3
sS'name'
p18665
S'variable'
p18666
sS'required'
p18667
I01
sS'group_name'
p18668
Nsa(dp18669
S'description'
p18670
g3
sS'cpp_type'
p18671
S'std::vector<VariableName>'
p18672
sS'default'
p18673
g3
sS'name'
p18674
S'w'
p18675
sS'required'
p18676
I00
sS'group_name'
p18677
NsasS'name'
p18678
S'/BCs/NSEnergyWeakStagnationBC'
p18679
sa(dp18680
S'description'
p18681
g3
sS'subblocks'
p18682
NsS'parameters'
p18683
(lp18684
(dp18685
S'description'
p18686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18687
sS'cpp_type'
p18688
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18689
sS'default'
p18690
g3
sS'name'
p18691
S'boundary'
p18692
sS'required'
p18693
I01
sS'group_name'
p18694
Nsa(dp18695
S'description'
p18696
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18697
sS'cpp_type'
p18698
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18699
sS'default'
p18700
g3
sS'name'
p18701
S'control_tags'
p18702
sS'required'
p18703
I00
sS'group_name'
p18704
Nsa(dp18705
S'description'
p18706
g3
sS'cpp_type'
p18707
S'double'
p18708
sS'default'
p18709
g3
sS'name'
p18710
S'desired_velocity'
p18711
sS'required'
p18712
I01
sS'group_name'
p18713
Nsa(dp18714
S'description'
p18715
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18716
sS'cpp_type'
p18717
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18718
sS'default'
p18719
g3
sS'name'
p18720
S'diag_save_in'
p18721
sS'required'
p18722
I00
sS'group_name'
p18723
Nsa(dp18724
S'description'
p18725
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18726
sS'cpp_type'
p18727
S'bool'
p18728
sS'default'
p18729
S'1'
p18730
sS'name'
p18731
S'implicit'
p18732
sS'required'
p18733
I00
sS'group_name'
p18734
S'Advanced'
p18735
sa(dp18736
S'description'
p18737
g3
sS'cpp_type'
p18738
S'std::vector<VariableName>'
p18739
sS'default'
p18740
g3
sS'name'
p18741
S'rho'
p18742
sS'required'
p18743
I01
sS'group_name'
p18744
Nsa(dp18745
S'description'
p18746
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18747
sS'cpp_type'
p18748
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18749
sS'default'
p18750
g3
sS'name'
p18751
S'save_in'
p18752
sS'required'
p18753
I00
sS'group_name'
p18754
Nsa(dp18755
S'description'
p18756
S'The seed for the master random number generator\n'
p18757
sS'cpp_type'
p18758
S'unsigned int'
p18759
sS'default'
p18760
S'0'
p18761
sS'name'
p18762
S'seed'
p18763
sS'required'
p18764
I00
sS'group_name'
p18765
S'Advanced'
p18766
sa(dp18767
S'description'
p18768
g3
sS'cpp_type'
p18769
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18770
sS'default'
p18771
S'NSImposedVelocityBC'
p18772
sS'name'
p18773
S'type'
p18774
sS'required'
p18775
I00
sS'group_name'
p18776
Nsa(dp18777
S'description'
p18778
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18779
sS'cpp_type'
p18780
S'bool'
p18781
sS'default'
p18782
S'0'
p18783
sS'name'
p18784
S'use_displaced_mesh'
p18785
sS'required'
p18786
I00
sS'group_name'
p18787
S'Advanced'
p18788
sa(dp18789
S'description'
p18790
S'The name of the variable that this boundary condition applies to\n'
p18791
sS'cpp_type'
p18792
S'NonlinearVariableName'
p18793
sS'default'
p18794
g3
sS'name'
p18795
S'variable'
p18796
sS'required'
p18797
I01
sS'group_name'
p18798
NsasS'name'
p18799
S'/BCs/NSImposedVelocityBC'
p18800
sa(dp18801
S'description'
p18802
g3
sS'subblocks'
p18803
NsS'parameters'
p18804
(lp18805
(dp18806
S'description'
p18807
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18808
sS'cpp_type'
p18809
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18810
sS'default'
p18811
g3
sS'name'
p18812
S'boundary'
p18813
sS'required'
p18814
I01
sS'group_name'
p18815
Nsa(dp18816
S'description'
p18817
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18818
sS'cpp_type'
p18819
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18820
sS'default'
p18821
g3
sS'name'
p18822
S'control_tags'
p18823
sS'required'
p18824
I00
sS'group_name'
p18825
Nsa(dp18826
S'description'
p18827
g3
sS'cpp_type'
p18828
S'double'
p18829
sS'default'
p18830
g3
sS'name'
p18831
S'desired_unit_velocity_component'
p18832
sS'required'
p18833
I01
sS'group_name'
p18834
Nsa(dp18835
S'description'
p18836
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18837
sS'cpp_type'
p18838
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18839
sS'default'
p18840
g3
sS'name'
p18841
S'diag_save_in'
p18842
sS'required'
p18843
I00
sS'group_name'
p18844
Nsa(dp18845
S'description'
p18846
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18847
sS'cpp_type'
p18848
S'bool'
p18849
sS'default'
p18850
S'1'
p18851
sS'name'
p18852
S'implicit'
p18853
sS'required'
p18854
I00
sS'group_name'
p18855
S'Advanced'
p18856
sa(dp18857
S'description'
p18858
g3
sS'cpp_type'
p18859
S'std::vector<VariableName>'
p18860
sS'default'
p18861
g3
sS'name'
p18862
S'rho'
p18863
sS'required'
p18864
I01
sS'group_name'
p18865
Nsa(dp18866
S'description'
p18867
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18868
sS'cpp_type'
p18869
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18870
sS'default'
p18871
g3
sS'name'
p18872
S'save_in'
p18873
sS'required'
p18874
I00
sS'group_name'
p18875
Nsa(dp18876
S'description'
p18877
S'The seed for the master random number generator\n'
p18878
sS'cpp_type'
p18879
S'unsigned int'
p18880
sS'default'
p18881
S'0'
p18882
sS'name'
p18883
S'seed'
p18884
sS'required'
p18885
I00
sS'group_name'
p18886
S'Advanced'
p18887
sa(dp18888
S'description'
p18889
g3
sS'cpp_type'
p18890
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p18891
sS'default'
p18892
S'NSImposedVelocityDirectionBC'
p18893
sS'name'
p18894
S'type'
p18895
sS'required'
p18896
I00
sS'group_name'
p18897
Nsa(dp18898
S'description'
p18899
g3
sS'cpp_type'
p18900
S'std::vector<VariableName>'
p18901
sS'default'
p18902
g3
sS'name'
p18903
S'u'
p18904
sS'required'
p18905
I01
sS'group_name'
p18906
Nsa(dp18907
S'description'
p18908
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18909
sS'cpp_type'
p18910
S'bool'
p18911
sS'default'
p18912
S'0'
p18913
sS'name'
p18914
S'use_displaced_mesh'
p18915
sS'required'
p18916
I00
sS'group_name'
p18917
S'Advanced'
p18918
sa(dp18919
S'description'
p18920
g3
sS'cpp_type'
p18921
S'std::vector<VariableName>'
p18922
sS'default'
p18923
g3
sS'name'
p18924
S'v'
p18925
sS'required'
p18926
I01
sS'group_name'
p18927
Nsa(dp18928
S'description'
p18929
S'The name of the variable that this boundary condition applies to\n'
p18930
sS'cpp_type'
p18931
S'NonlinearVariableName'
p18932
sS'default'
p18933
g3
sS'name'
p18934
S'variable'
p18935
sS'required'
p18936
I01
sS'group_name'
p18937
Nsa(dp18938
S'description'
p18939
g3
sS'cpp_type'
p18940
S'std::vector<VariableName>'
p18941
sS'default'
p18942
g3
sS'name'
p18943
S'w'
p18944
sS'required'
p18945
I00
sS'group_name'
p18946
NsasS'name'
p18947
S'/BCs/NSImposedVelocityDirectionBC'
p18948
sa(dp18949
S'description'
p18950
g3
sS'subblocks'
p18951
NsS'parameters'
p18952
(lp18953
(dp18954
S'description'
p18955
S'Gas constant.\n'
p18956
sS'cpp_type'
p18957
S'double'
p18958
sS'default'
p18959
g3
sS'name'
p18960
S'R'
p18961
sS'required'
p18962
I01
sS'group_name'
p18963
Nsa(dp18964
S'description'
p18965
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18966
sS'cpp_type'
p18967
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18968
sS'default'
p18969
g3
sS'name'
p18970
S'boundary'
p18971
sS'required'
p18972
I01
sS'group_name'
p18973
Nsa(dp18974
S'description'
p18975
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18976
sS'cpp_type'
p18977
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p18978
sS'default'
p18979
g3
sS'name'
p18980
S'control_tags'
p18981
sS'required'
p18982
I00
sS'group_name'
p18983
Nsa(dp18984
S'description'
p18985
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18986
sS'cpp_type'
p18987
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18988
sS'default'
p18989
g3
sS'name'
p18990
S'diag_save_in'
p18991
sS'required'
p18992
I00
sS'group_name'
p18993
Nsa(dp18994
S'description'
p18995
S'Ratio of specific heats.\n'
p18996
sS'cpp_type'
p18997
S'double'
p18998
sS'default'
p18999
g3
sS'name'
p19000
S'gamma'
p19001
sS'required'
p19002
I01
sS'group_name'
p19003
Nsa(dp19004
S'description'
p19005
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19006
sS'cpp_type'
p19007
S'bool'
p19008
sS'default'
p19009
S'1'
p19010
sS'name'
p19011
S'implicit'
p19012
sS'required'
p19013
I00
sS'group_name'
p19014
S'Advanced'
p19015
sa(dp19016
S'description'
p19017
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19018
sS'cpp_type'
p19019
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19020
sS'default'
p19021
g3
sS'name'
p19022
S'save_in'
p19023
sS'required'
p19024
I00
sS'group_name'
p19025
Nsa(dp19026
S'description'
p19027
S'The seed for the master random number generator\n'
p19028
sS'cpp_type'
p19029
S'unsigned int'
p19030
sS'default'
p19031
S'0'
p19032
sS'name'
p19033
S'seed'
p19034
sS'required'
p19035
I00
sS'group_name'
p19036
S'Advanced'
p19037
sa(dp19038
S'description'
p19039
S'Density of incoming flow\n'
p19040
sS'cpp_type'
p19041
S'double'
p19042
sS'default'
p19043
g3
sS'name'
p19044
S'specified_rho'
p19045
sS'required'
p19046
I01
sS'group_name'
p19047
Nsa(dp19048
S'description'
p19049
S'Temperature of incoming flow\n'
p19050
sS'cpp_type'
p19051
S'double'
p19052
sS'default'
p19053
g3
sS'name'
p19054
S'specified_temperature'
p19055
sS'required'
p19056
I01
sS'group_name'
p19057
Nsa(dp19058
S'description'
p19059
S'Velocity magnitude of incoming flow\n'
p19060
sS'cpp_type'
p19061
S'double'
p19062
sS'default'
p19063
S'0'
p19064
sS'name'
p19065
S'specified_velocity_magnitude'
p19066
sS'required'
p19067
I00
sS'group_name'
p19068
Nsa(dp19069
S'description'
p19070
g3
sS'cpp_type'
p19071
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19072
sS'default'
p19073
S'NSInflowThermalBC'
p19074
sS'name'
p19075
S'type'
p19076
sS'required'
p19077
I00
sS'group_name'
p19078
Nsa(dp19079
S'description'
p19080
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19081
sS'cpp_type'
p19082
S'bool'
p19083
sS'default'
p19084
S'0'
p19085
sS'name'
p19086
S'use_displaced_mesh'
p19087
sS'required'
p19088
I00
sS'group_name'
p19089
S'Advanced'
p19090
sa(dp19091
S'description'
p19092
S'The name of the variable that this boundary condition applies to\n'
p19093
sS'cpp_type'
p19094
S'NonlinearVariableName'
p19095
sS'default'
p19096
g3
sS'name'
p19097
S'variable'
p19098
sS'required'
p19099
I01
sS'group_name'
p19100
NsasS'name'
p19101
S'/BCs/NSInflowThermalBC'
p19102
sa(dp19103
S'description'
p19104
g3
sS'subblocks'
p19105
NsS'parameters'
p19106
(lp19107
(dp19108
S'description'
p19109
S'Gas constant.\n'
p19110
sS'cpp_type'
p19111
S'double'
p19112
sS'default'
p19113
g3
sS'name'
p19114
S'R'
p19115
sS'required'
p19116
I01
sS'group_name'
p19117
Nsa(dp19118
S'description'
p19119
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19120
sS'cpp_type'
p19121
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19122
sS'default'
p19123
g3
sS'name'
p19124
S'boundary'
p19125
sS'required'
p19126
I01
sS'group_name'
p19127
Nsa(dp19128
S'description'
p19129
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19130
sS'cpp_type'
p19131
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19132
sS'default'
p19133
g3
sS'name'
p19134
S'control_tags'
p19135
sS'required'
p19136
I00
sS'group_name'
p19137
Nsa(dp19138
S'description'
p19139
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19140
sS'cpp_type'
p19141
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19142
sS'default'
p19143
g3
sS'name'
p19144
S'diag_save_in'
p19145
sS'required'
p19146
I00
sS'group_name'
p19147
S'Advanced'
p19148
sa(dp19149
S'description'
p19150
S'Ratio of specific heats.\n'
p19151
sS'cpp_type'
p19152
S'double'
p19153
sS'default'
p19154
g3
sS'name'
p19155
S'gamma'
p19156
sS'required'
p19157
I01
sS'group_name'
p19158
Nsa(dp19159
S'description'
p19160
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19161
sS'cpp_type'
p19162
S'bool'
p19163
sS'default'
p19164
S'1'
p19165
sS'name'
p19166
S'implicit'
p19167
sS'required'
p19168
I00
sS'group_name'
p19169
S'Advanced'
p19170
sa(dp19171
S'description'
p19172
S'density\n'
p19173
sS'cpp_type'
p19174
S'std::vector<VariableName>'
p19175
sS'default'
p19176
g3
sS'name'
p19177
S'rho'
p19178
sS'required'
p19179
I01
sS'group_name'
p19180
Nsa(dp19181
S'description'
p19182
S'energy\n'
p19183
sS'cpp_type'
p19184
S'std::vector<VariableName>'
p19185
sS'default'
p19186
g3
sS'name'
p19187
S'rhoe'
p19188
sS'required'
p19189
I01
sS'group_name'
p19190
Nsa(dp19191
S'description'
p19192
S'x-momentum\n'
p19193
sS'cpp_type'
p19194
S'std::vector<VariableName>'
p19195
sS'default'
p19196
g3
sS'name'
p19197
S'rhou'
p19198
sS'required'
p19199
I01
sS'group_name'
p19200
Nsa(dp19201
S'description'
p19202
S'The specified value of rho*(u.n) for this boundary\n'
p19203
sS'cpp_type'
p19204
S'double'
p19205
sS'default'
p19206
g3
sS'name'
p19207
S'rhoun'
p19208
sS'required'
p19209
I01
sS'group_name'
p19210
Nsa(dp19211
S'description'
p19212
S'y-momentum\n'
p19213
sS'cpp_type'
p19214
S'std::vector<VariableName>'
p19215
sS'default'
p19216
g3
sS'name'
p19217
S'rhov'
p19218
sS'required'
p19219
I01
sS'group_name'
p19220
Nsa(dp19221
S'description'
p19222
S'z-momentum\n'
p19223
sS'cpp_type'
p19224
S'std::vector<VariableName>'
p19225
sS'default'
p19226
g3
sS'name'
p19227
S'rhow'
p19228
sS'required'
p19229
I00
sS'group_name'
p19230
Nsa(dp19231
S'description'
p19232
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19233
sS'cpp_type'
p19234
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19235
sS'default'
p19236
g3
sS'name'
p19237
S'save_in'
p19238
sS'required'
p19239
I00
sS'group_name'
p19240
S'Advanced'
p19241
sa(dp19242
S'description'
p19243
S'The seed for the master random number generator\n'
p19244
sS'cpp_type'
p19245
S'unsigned int'
p19246
sS'default'
p19247
S'0'
p19248
sS'name'
p19249
S'seed'
p19250
sS'required'
p19251
I00
sS'group_name'
p19252
S'Advanced'
p19253
sa(dp19254
S'description'
p19255
g3
sS'cpp_type'
p19256
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19257
sS'default'
p19258
S'NSMassSpecifiedNormalFlowBC'
p19259
sS'name'
p19260
S'type'
p19261
sS'required'
p19262
I00
sS'group_name'
p19263
Nsa(dp19264
S'description'
p19265
g3
sS'cpp_type'
p19266
S'std::vector<VariableName>'
p19267
sS'default'
p19268
g3
sS'name'
p19269
S'u'
p19270
sS'required'
p19271
I01
sS'group_name'
p19272
Nsa(dp19273
S'description'
p19274
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19275
sS'cpp_type'
p19276
S'bool'
p19277
sS'default'
p19278
S'0'
p19279
sS'name'
p19280
S'use_displaced_mesh'
p19281
sS'required'
p19282
I00
sS'group_name'
p19283
S'Advanced'
p19284
sa(dp19285
S'description'
p19286
g3
sS'cpp_type'
p19287
S'std::vector<VariableName>'
p19288
sS'default'
p19289
g3
sS'name'
p19290
S'v'
p19291
sS'required'
p19292
I01
sS'group_name'
p19293
Nsa(dp19294
S'description'
p19295
S'The name of the variable that this boundary condition applies to\n'
p19296
sS'cpp_type'
p19297
S'NonlinearVariableName'
p19298
sS'default'
p19299
g3
sS'name'
p19300
S'variable'
p19301
sS'required'
p19302
I01
sS'group_name'
p19303
Nsa(dp19304
S'description'
p19305
g3
sS'cpp_type'
p19306
S'std::vector<VariableName>'
p19307
sS'default'
p19308
g3
sS'name'
p19309
S'w'
p19310
sS'required'
p19311
I00
sS'group_name'
p19312
NsasS'name'
p19313
S'/BCs/NSMassSpecifiedNormalFlowBC'
p19314
sa(dp19315
S'description'
p19316
g3
sS'subblocks'
p19317
NsS'parameters'
p19318
(lp19319
(dp19320
S'description'
p19321
S'Gas constant.\n'
p19322
sS'cpp_type'
p19323
S'double'
p19324
sS'default'
p19325
g3
sS'name'
p19326
S'R'
p19327
sS'required'
p19328
I01
sS'group_name'
p19329
Nsa(dp19330
S'description'
p19331
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19332
sS'cpp_type'
p19333
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19334
sS'default'
p19335
g3
sS'name'
p19336
S'boundary'
p19337
sS'required'
p19338
I01
sS'group_name'
p19339
Nsa(dp19340
S'description'
p19341
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19342
sS'cpp_type'
p19343
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19344
sS'default'
p19345
g3
sS'name'
p19346
S'control_tags'
p19347
sS'required'
p19348
I00
sS'group_name'
p19349
Nsa(dp19350
S'description'
p19351
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19352
sS'cpp_type'
p19353
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19354
sS'default'
p19355
g3
sS'name'
p19356
S'diag_save_in'
p19357
sS'required'
p19358
I00
sS'group_name'
p19359
S'Advanced'
p19360
sa(dp19361
S'description'
p19362
S'Ratio of specific heats.\n'
p19363
sS'cpp_type'
p19364
S'double'
p19365
sS'default'
p19366
g3
sS'name'
p19367
S'gamma'
p19368
sS'required'
p19369
I01
sS'group_name'
p19370
Nsa(dp19371
S'description'
p19372
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19373
sS'cpp_type'
p19374
S'bool'
p19375
sS'default'
p19376
S'1'
p19377
sS'name'
p19378
S'implicit'
p19379
sS'required'
p19380
I00
sS'group_name'
p19381
S'Advanced'
p19382
sa(dp19383
S'description'
p19384
S'density\n'
p19385
sS'cpp_type'
p19386
S'std::vector<VariableName>'
p19387
sS'default'
p19388
g3
sS'name'
p19389
S'rho'
p19390
sS'required'
p19391
I01
sS'group_name'
p19392
Nsa(dp19393
S'description'
p19394
S'energy\n'
p19395
sS'cpp_type'
p19396
S'std::vector<VariableName>'
p19397
sS'default'
p19398
g3
sS'name'
p19399
S'rhoe'
p19400
sS'required'
p19401
I01
sS'group_name'
p19402
Nsa(dp19403
S'description'
p19404
S'x-momentum\n'
p19405
sS'cpp_type'
p19406
S'std::vector<VariableName>'
p19407
sS'default'
p19408
g3
sS'name'
p19409
S'rhou'
p19410
sS'required'
p19411
I01
sS'group_name'
p19412
Nsa(dp19413
S'description'
p19414
S'y-momentum\n'
p19415
sS'cpp_type'
p19416
S'std::vector<VariableName>'
p19417
sS'default'
p19418
g3
sS'name'
p19419
S'rhov'
p19420
sS'required'
p19421
I01
sS'group_name'
p19422
Nsa(dp19423
S'description'
p19424
S'z-momentum\n'
p19425
sS'cpp_type'
p19426
S'std::vector<VariableName>'
p19427
sS'default'
p19428
g3
sS'name'
p19429
S'rhow'
p19430
sS'required'
p19431
I00
sS'group_name'
p19432
Nsa(dp19433
S'description'
p19434
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19435
sS'cpp_type'
p19436
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19437
sS'default'
p19438
g3
sS'name'
p19439
S'save_in'
p19440
sS'required'
p19441
I00
sS'group_name'
p19442
S'Advanced'
p19443
sa(dp19444
S'description'
p19445
S'The seed for the master random number generator\n'
p19446
sS'cpp_type'
p19447
S'unsigned int'
p19448
sS'default'
p19449
S'0'
p19450
sS'name'
p19451
S'seed'
p19452
sS'required'
p19453
I00
sS'group_name'
p19454
S'Advanced'
p19455
sa(dp19456
S'description'
p19457
g3
sS'cpp_type'
p19458
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19459
sS'default'
p19460
S'NSMassUnspecifiedNormalFlowBC'
p19461
sS'name'
p19462
S'type'
p19463
sS'required'
p19464
I00
sS'group_name'
p19465
Nsa(dp19466
S'description'
p19467
g3
sS'cpp_type'
p19468
S'std::vector<VariableName>'
p19469
sS'default'
p19470
g3
sS'name'
p19471
S'u'
p19472
sS'required'
p19473
I01
sS'group_name'
p19474
Nsa(dp19475
S'description'
p19476
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19477
sS'cpp_type'
p19478
S'bool'
p19479
sS'default'
p19480
S'0'
p19481
sS'name'
p19482
S'use_displaced_mesh'
p19483
sS'required'
p19484
I00
sS'group_name'
p19485
S'Advanced'
p19486
sa(dp19487
S'description'
p19488
g3
sS'cpp_type'
p19489
S'std::vector<VariableName>'
p19490
sS'default'
p19491
g3
sS'name'
p19492
S'v'
p19493
sS'required'
p19494
I01
sS'group_name'
p19495
Nsa(dp19496
S'description'
p19497
S'The name of the variable that this boundary condition applies to\n'
p19498
sS'cpp_type'
p19499
S'NonlinearVariableName'
p19500
sS'default'
p19501
g3
sS'name'
p19502
S'variable'
p19503
sS'required'
p19504
I01
sS'group_name'
p19505
Nsa(dp19506
S'description'
p19507
g3
sS'cpp_type'
p19508
S'std::vector<VariableName>'
p19509
sS'default'
p19510
g3
sS'name'
p19511
S'w'
p19512
sS'required'
p19513
I00
sS'group_name'
p19514
NsasS'name'
p19515
S'/BCs/NSMassUnspecifiedNormalFlowBC'
p19516
sa(dp19517
S'description'
p19518
g3
sS'subblocks'
p19519
NsS'parameters'
p19520
(lp19521
(dp19522
S'description'
p19523
S'Gas constant.\n'
p19524
sS'cpp_type'
p19525
S'double'
p19526
sS'default'
p19527
g3
sS'name'
p19528
S'R'
p19529
sS'required'
p19530
I01
sS'group_name'
p19531
Nsa(dp19532
S'description'
p19533
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19534
sS'cpp_type'
p19535
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19536
sS'default'
p19537
g3
sS'name'
p19538
S'boundary'
p19539
sS'required'
p19540
I01
sS'group_name'
p19541
Nsa(dp19542
S'description'
p19543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19544
sS'cpp_type'
p19545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19546
sS'default'
p19547
g3
sS'name'
p19548
S'control_tags'
p19549
sS'required'
p19550
I00
sS'group_name'
p19551
Nsa(dp19552
S'description'
p19553
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19554
sS'cpp_type'
p19555
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19556
sS'default'
p19557
g3
sS'name'
p19558
S'diag_save_in'
p19559
sS'required'
p19560
I00
sS'group_name'
p19561
S'Advanced'
p19562
sa(dp19563
S'description'
p19564
S'Ratio of specific heats.\n'
p19565
sS'cpp_type'
p19566
S'double'
p19567
sS'default'
p19568
g3
sS'name'
p19569
S'gamma'
p19570
sS'required'
p19571
I01
sS'group_name'
p19572
Nsa(dp19573
S'description'
p19574
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19575
sS'cpp_type'
p19576
S'bool'
p19577
sS'default'
p19578
S'1'
p19579
sS'name'
p19580
S'implicit'
p19581
sS'required'
p19582
I00
sS'group_name'
p19583
S'Advanced'
p19584
sa(dp19585
S'description'
p19586
S'density\n'
p19587
sS'cpp_type'
p19588
S'std::vector<VariableName>'
p19589
sS'default'
p19590
g3
sS'name'
p19591
S'rho'
p19592
sS'required'
p19593
I01
sS'group_name'
p19594
Nsa(dp19595
S'description'
p19596
S'energy\n'
p19597
sS'cpp_type'
p19598
S'std::vector<VariableName>'
p19599
sS'default'
p19600
g3
sS'name'
p19601
S'rhoe'
p19602
sS'required'
p19603
I01
sS'group_name'
p19604
Nsa(dp19605
S'description'
p19606
S'x-momentum\n'
p19607
sS'cpp_type'
p19608
S'std::vector<VariableName>'
p19609
sS'default'
p19610
g3
sS'name'
p19611
S'rhou'
p19612
sS'required'
p19613
I01
sS'group_name'
p19614
Nsa(dp19615
S'description'
p19616
S'y-momentum\n'
p19617
sS'cpp_type'
p19618
S'std::vector<VariableName>'
p19619
sS'default'
p19620
g3
sS'name'
p19621
S'rhov'
p19622
sS'required'
p19623
I01
sS'group_name'
p19624
Nsa(dp19625
S'description'
p19626
S'z-momentum\n'
p19627
sS'cpp_type'
p19628
S'std::vector<VariableName>'
p19629
sS'default'
p19630
g3
sS'name'
p19631
S'rhow'
p19632
sS'required'
p19633
I00
sS'group_name'
p19634
Nsa(dp19635
S'description'
p19636
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19637
sS'cpp_type'
p19638
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19639
sS'default'
p19640
g3
sS'name'
p19641
S'save_in'
p19642
sS'required'
p19643
I00
sS'group_name'
p19644
S'Advanced'
p19645
sa(dp19646
S'description'
p19647
S'The seed for the master random number generator\n'
p19648
sS'cpp_type'
p19649
S'unsigned int'
p19650
sS'default'
p19651
S'0'
p19652
sS'name'
p19653
S'seed'
p19654
sS'required'
p19655
I00
sS'group_name'
p19656
S'Advanced'
p19657
sa(dp19658
S'description'
p19659
S'The specifed stagnation pressure\n'
p19660
sS'cpp_type'
p19661
S'double'
p19662
sS'default'
p19663
g3
sS'name'
p19664
S'stagnation_pressure'
p19665
sS'required'
p19666
I01
sS'group_name'
p19667
Nsa(dp19668
S'description'
p19669
S'The specifed stagnation temperature\n'
p19670
sS'cpp_type'
p19671
S'double'
p19672
sS'default'
p19673
g3
sS'name'
p19674
S'stagnation_temperature'
p19675
sS'required'
p19676
I01
sS'group_name'
p19677
Nsa(dp19678
S'description'
p19679
S'x-component of specifed flow direction\n'
p19680
sS'cpp_type'
p19681
S'double'
p19682
sS'default'
p19683
g3
sS'name'
p19684
S'sx'
p19685
sS'required'
p19686
I01
sS'group_name'
p19687
Nsa(dp19688
S'description'
p19689
S'y-component of specifed flow direction\n'
p19690
sS'cpp_type'
p19691
S'double'
p19692
sS'default'
p19693
g3
sS'name'
p19694
S'sy'
p19695
sS'required'
p19696
I01
sS'group_name'
p19697
Nsa(dp19698
S'description'
p19699
S'z-component of specifed flow direction\n'
p19700
sS'cpp_type'
p19701
S'double'
p19702
sS'default'
p19703
S'0'
p19704
sS'name'
p19705
S'sz'
p19706
sS'required'
p19707
I00
sS'group_name'
p19708
Nsa(dp19709
S'description'
p19710
g3
sS'cpp_type'
p19711
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19712
sS'default'
p19713
S'NSMassWeakStagnationBC'
p19714
sS'name'
p19715
S'type'
p19716
sS'required'
p19717
I00
sS'group_name'
p19718
Nsa(dp19719
S'description'
p19720
g3
sS'cpp_type'
p19721
S'std::vector<VariableName>'
p19722
sS'default'
p19723
g3
sS'name'
p19724
S'u'
p19725
sS'required'
p19726
I01
sS'group_name'
p19727
Nsa(dp19728
S'description'
p19729
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19730
sS'cpp_type'
p19731
S'bool'
p19732
sS'default'
p19733
S'0'
p19734
sS'name'
p19735
S'use_displaced_mesh'
p19736
sS'required'
p19737
I00
sS'group_name'
p19738
S'Advanced'
p19739
sa(dp19740
S'description'
p19741
g3
sS'cpp_type'
p19742
S'std::vector<VariableName>'
p19743
sS'default'
p19744
g3
sS'name'
p19745
S'v'
p19746
sS'required'
p19747
I01
sS'group_name'
p19748
Nsa(dp19749
S'description'
p19750
S'The name of the variable that this boundary condition applies to\n'
p19751
sS'cpp_type'
p19752
S'NonlinearVariableName'
p19753
sS'default'
p19754
g3
sS'name'
p19755
S'variable'
p19756
sS'required'
p19757
I01
sS'group_name'
p19758
Nsa(dp19759
S'description'
p19760
g3
sS'cpp_type'
p19761
S'std::vector<VariableName>'
p19762
sS'default'
p19763
g3
sS'name'
p19764
S'w'
p19765
sS'required'
p19766
I00
sS'group_name'
p19767
NsasS'name'
p19768
S'/BCs/NSMassWeakStagnationBC'
p19769
sa(dp19770
S'description'
p19771
g3
sS'subblocks'
p19772
NsS'parameters'
p19773
(lp19774
(dp19775
S'description'
p19776
S'Gas constant.\n'
p19777
sS'cpp_type'
p19778
S'double'
p19779
sS'default'
p19780
g3
sS'name'
p19781
S'R'
p19782
sS'required'
p19783
I01
sS'group_name'
p19784
Nsa(dp19785
S'description'
p19786
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19787
sS'cpp_type'
p19788
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19789
sS'default'
p19790
g3
sS'name'
p19791
S'boundary'
p19792
sS'required'
p19793
I01
sS'group_name'
p19794
Nsa(dp19795
S'description'
p19796
S'(0,1,2) = (x,y,z) for which momentum component this BC is applied to\n'
p19797
sS'cpp_type'
p19798
S'unsigned int'
p19799
sS'default'
p19800
g3
sS'name'
p19801
S'component'
p19802
sS'required'
p19803
I01
sS'group_name'
p19804
Nsa(dp19805
S'description'
p19806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19807
sS'cpp_type'
p19808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p19809
sS'default'
p19810
g3
sS'name'
p19811
S'control_tags'
p19812
sS'required'
p19813
I00
sS'group_name'
p19814
Nsa(dp19815
S'description'
p19816
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19817
sS'cpp_type'
p19818
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19819
sS'default'
p19820
g3
sS'name'
p19821
S'diag_save_in'
p19822
sS'required'
p19823
I00
sS'group_name'
p19824
S'Advanced'
p19825
sa(dp19826
S'description'
p19827
S'Ratio of specific heats.\n'
p19828
sS'cpp_type'
p19829
S'double'
p19830
sS'default'
p19831
g3
sS'name'
p19832
S'gamma'
p19833
sS'required'
p19834
I01
sS'group_name'
p19835
Nsa(dp19836
S'description'
p19837
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19838
sS'cpp_type'
p19839
S'bool'
p19840
sS'default'
p19841
S'1'
p19842
sS'name'
p19843
S'implicit'
p19844
sS'required'
p19845
I00
sS'group_name'
p19846
S'Advanced'
p19847
sa(dp19848
S'description'
p19849
S'density\n'
p19850
sS'cpp_type'
p19851
S'std::vector<VariableName>'
p19852
sS'default'
p19853
g3
sS'name'
p19854
S'rho'
p19855
sS'required'
p19856
I01
sS'group_name'
p19857
Nsa(dp19858
S'description'
p19859
S'energy\n'
p19860
sS'cpp_type'
p19861
S'std::vector<VariableName>'
p19862
sS'default'
p19863
g3
sS'name'
p19864
S'rhoe'
p19865
sS'required'
p19866
I01
sS'group_name'
p19867
Nsa(dp19868
S'description'
p19869
S'x-momentum\n'
p19870
sS'cpp_type'
p19871
S'std::vector<VariableName>'
p19872
sS'default'
p19873
g3
sS'name'
p19874
S'rhou'
p19875
sS'required'
p19876
I01
sS'group_name'
p19877
Nsa(dp19878
S'description'
p19879
S'y-momentum\n'
p19880
sS'cpp_type'
p19881
S'std::vector<VariableName>'
p19882
sS'default'
p19883
g3
sS'name'
p19884
S'rhov'
p19885
sS'required'
p19886
I01
sS'group_name'
p19887
Nsa(dp19888
S'description'
p19889
S'z-momentum\n'
p19890
sS'cpp_type'
p19891
S'std::vector<VariableName>'
p19892
sS'default'
p19893
g3
sS'name'
p19894
S'rhow'
p19895
sS'required'
p19896
I00
sS'group_name'
p19897
Nsa(dp19898
S'description'
p19899
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19900
sS'cpp_type'
p19901
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19902
sS'default'
p19903
g3
sS'name'
p19904
S'save_in'
p19905
sS'required'
p19906
I00
sS'group_name'
p19907
S'Advanced'
p19908
sa(dp19909
S'description'
p19910
S'The seed for the master random number generator\n'
p19911
sS'cpp_type'
p19912
S'unsigned int'
p19913
sS'default'
p19914
S'0'
p19915
sS'name'
p19916
S'seed'
p19917
sS'required'
p19918
I00
sS'group_name'
p19919
S'Advanced'
p19920
sa(dp19921
S'description'
p19922
S'The specifed stagnation pressure\n'
p19923
sS'cpp_type'
p19924
S'double'
p19925
sS'default'
p19926
g3
sS'name'
p19927
S'stagnation_pressure'
p19928
sS'required'
p19929
I01
sS'group_name'
p19930
Nsa(dp19931
S'description'
p19932
S'The specifed stagnation temperature\n'
p19933
sS'cpp_type'
p19934
S'double'
p19935
sS'default'
p19936
g3
sS'name'
p19937
S'stagnation_temperature'
p19938
sS'required'
p19939
I01
sS'group_name'
p19940
Nsa(dp19941
S'description'
p19942
S'x-component of specifed flow direction\n'
p19943
sS'cpp_type'
p19944
S'double'
p19945
sS'default'
p19946
g3
sS'name'
p19947
S'sx'
p19948
sS'required'
p19949
I01
sS'group_name'
p19950
Nsa(dp19951
S'description'
p19952
S'y-component of specifed flow direction\n'
p19953
sS'cpp_type'
p19954
S'double'
p19955
sS'default'
p19956
g3
sS'name'
p19957
S'sy'
p19958
sS'required'
p19959
I01
sS'group_name'
p19960
Nsa(dp19961
S'description'
p19962
S'z-component of specifed flow direction\n'
p19963
sS'cpp_type'
p19964
S'double'
p19965
sS'default'
p19966
S'0'
p19967
sS'name'
p19968
S'sz'
p19969
sS'required'
p19970
I00
sS'group_name'
p19971
Nsa(dp19972
S'description'
p19973
g3
sS'cpp_type'
p19974
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p19975
sS'default'
p19976
S'NSMomentumConvectiveWeakStagnationBC'
p19977
sS'name'
p19978
S'type'
p19979
sS'required'
p19980
I00
sS'group_name'
p19981
Nsa(dp19982
S'description'
p19983
g3
sS'cpp_type'
p19984
S'std::vector<VariableName>'
p19985
sS'default'
p19986
g3
sS'name'
p19987
S'u'
p19988
sS'required'
p19989
I01
sS'group_name'
p19990
Nsa(dp19991
S'description'
p19992
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19993
sS'cpp_type'
p19994
S'bool'
p19995
sS'default'
p19996
S'0'
p19997
sS'name'
p19998
S'use_displaced_mesh'
p19999
sS'required'
p20000
I00
sS'group_name'
p20001
S'Advanced'
p20002
sa(dp20003
S'description'
p20004
g3
sS'cpp_type'
p20005
S'std::vector<VariableName>'
p20006
sS'default'
p20007
g3
sS'name'
p20008
S'v'
p20009
sS'required'
p20010
I01
sS'group_name'
p20011
Nsa(dp20012
S'description'
p20013
S'The name of the variable that this boundary condition applies to\n'
p20014
sS'cpp_type'
p20015
S'NonlinearVariableName'
p20016
sS'default'
p20017
g3
sS'name'
p20018
S'variable'
p20019
sS'required'
p20020
I01
sS'group_name'
p20021
Nsa(dp20022
S'description'
p20023
g3
sS'cpp_type'
p20024
S'std::vector<VariableName>'
p20025
sS'default'
p20026
g3
sS'name'
p20027
S'w'
p20028
sS'required'
p20029
I00
sS'group_name'
p20030
NsasS'name'
p20031
S'/BCs/NSMomentumConvectiveWeakStagnationBC'
p20032
sa(dp20033
S'description'
p20034
g3
sS'subblocks'
p20035
NsS'parameters'
p20036
(lp20037
(dp20038
S'description'
p20039
S'Gas constant.\n'
p20040
sS'cpp_type'
p20041
S'double'
p20042
sS'default'
p20043
g3
sS'name'
p20044
S'R'
p20045
sS'required'
p20046
I01
sS'group_name'
p20047
Nsa(dp20048
S'description'
p20049
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20050
sS'cpp_type'
p20051
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20052
sS'default'
p20053
g3
sS'name'
p20054
S'boundary'
p20055
sS'required'
p20056
I01
sS'group_name'
p20057
Nsa(dp20058
S'description'
p20059
S'(0,1,2) = (x,y,z) for which momentum component this BC is applied to\n'
p20060
sS'cpp_type'
p20061
S'unsigned int'
p20062
sS'default'
p20063
g3
sS'name'
p20064
S'component'
p20065
sS'required'
p20066
I01
sS'group_name'
p20067
Nsa(dp20068
S'description'
p20069
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20070
sS'cpp_type'
p20071
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20072
sS'default'
p20073
g3
sS'name'
p20074
S'control_tags'
p20075
sS'required'
p20076
I00
sS'group_name'
p20077
Nsa(dp20078
S'description'
p20079
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20080
sS'cpp_type'
p20081
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20082
sS'default'
p20083
g3
sS'name'
p20084
S'diag_save_in'
p20085
sS'required'
p20086
I00
sS'group_name'
p20087
S'Advanced'
p20088
sa(dp20089
S'description'
p20090
S'Ratio of specific heats.\n'
p20091
sS'cpp_type'
p20092
S'double'
p20093
sS'default'
p20094
g3
sS'name'
p20095
S'gamma'
p20096
sS'required'
p20097
I01
sS'group_name'
p20098
Nsa(dp20099
S'description'
p20100
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20101
sS'cpp_type'
p20102
S'bool'
p20103
sS'default'
p20104
S'1'
p20105
sS'name'
p20106
S'implicit'
p20107
sS'required'
p20108
I00
sS'group_name'
p20109
S'Advanced'
p20110
sa(dp20111
S'description'
p20112
S'density\n'
p20113
sS'cpp_type'
p20114
S'std::vector<VariableName>'
p20115
sS'default'
p20116
g3
sS'name'
p20117
S'rho'
p20118
sS'required'
p20119
I01
sS'group_name'
p20120
Nsa(dp20121
S'description'
p20122
S'energy\n'
p20123
sS'cpp_type'
p20124
S'std::vector<VariableName>'
p20125
sS'default'
p20126
g3
sS'name'
p20127
S'rhoe'
p20128
sS'required'
p20129
I01
sS'group_name'
p20130
Nsa(dp20131
S'description'
p20132
S'x-momentum\n'
p20133
sS'cpp_type'
p20134
S'std::vector<VariableName>'
p20135
sS'default'
p20136
g3
sS'name'
p20137
S'rhou'
p20138
sS'required'
p20139
I01
sS'group_name'
p20140
Nsa(dp20141
S'description'
p20142
S'y-momentum\n'
p20143
sS'cpp_type'
p20144
S'std::vector<VariableName>'
p20145
sS'default'
p20146
g3
sS'name'
p20147
S'rhov'
p20148
sS'required'
p20149
I01
sS'group_name'
p20150
Nsa(dp20151
S'description'
p20152
S'z-momentum\n'
p20153
sS'cpp_type'
p20154
S'std::vector<VariableName>'
p20155
sS'default'
p20156
g3
sS'name'
p20157
S'rhow'
p20158
sS'required'
p20159
I00
sS'group_name'
p20160
Nsa(dp20161
S'description'
p20162
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20163
sS'cpp_type'
p20164
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20165
sS'default'
p20166
g3
sS'name'
p20167
S'save_in'
p20168
sS'required'
p20169
I00
sS'group_name'
p20170
S'Advanced'
p20171
sa(dp20172
S'description'
p20173
S'The seed for the master random number generator\n'
p20174
sS'cpp_type'
p20175
S'unsigned int'
p20176
sS'default'
p20177
S'0'
p20178
sS'name'
p20179
S'seed'
p20180
sS'required'
p20181
I00
sS'group_name'
p20182
S'Advanced'
p20183
sa(dp20184
S'description'
p20185
g3
sS'cpp_type'
p20186
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20187
sS'default'
p20188
S'NSMomentumInviscidNoPressureImplicitFlowBC'
p20189
sS'name'
p20190
S'type'
p20191
sS'required'
p20192
I00
sS'group_name'
p20193
Nsa(dp20194
S'description'
p20195
g3
sS'cpp_type'
p20196
S'std::vector<VariableName>'
p20197
sS'default'
p20198
g3
sS'name'
p20199
S'u'
p20200
sS'required'
p20201
I01
sS'group_name'
p20202
Nsa(dp20203
S'description'
p20204
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20205
sS'cpp_type'
p20206
S'bool'
p20207
sS'default'
p20208
S'0'
p20209
sS'name'
p20210
S'use_displaced_mesh'
p20211
sS'required'
p20212
I00
sS'group_name'
p20213
S'Advanced'
p20214
sa(dp20215
S'description'
p20216
g3
sS'cpp_type'
p20217
S'std::vector<VariableName>'
p20218
sS'default'
p20219
g3
sS'name'
p20220
S'v'
p20221
sS'required'
p20222
I01
sS'group_name'
p20223
Nsa(dp20224
S'description'
p20225
S'The name of the variable that this boundary condition applies to\n'
p20226
sS'cpp_type'
p20227
S'NonlinearVariableName'
p20228
sS'default'
p20229
g3
sS'name'
p20230
S'variable'
p20231
sS'required'
p20232
I01
sS'group_name'
p20233
Nsa(dp20234
S'description'
p20235
g3
sS'cpp_type'
p20236
S'std::vector<VariableName>'
p20237
sS'default'
p20238
g3
sS'name'
p20239
S'w'
p20240
sS'required'
p20241
I00
sS'group_name'
p20242
NsasS'name'
p20243
S'/BCs/NSMomentumInviscidNoPressureImplicitFlowBC'
p20244
sa(dp20245
S'description'
p20246
g3
sS'subblocks'
p20247
NsS'parameters'
p20248
(lp20249
(dp20250
S'description'
p20251
S'Gas constant.\n'
p20252
sS'cpp_type'
p20253
S'double'
p20254
sS'default'
p20255
g3
sS'name'
p20256
S'R'
p20257
sS'required'
p20258
I01
sS'group_name'
p20259
Nsa(dp20260
S'description'
p20261
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20262
sS'cpp_type'
p20263
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20264
sS'default'
p20265
g3
sS'name'
p20266
S'boundary'
p20267
sS'required'
p20268
I01
sS'group_name'
p20269
Nsa(dp20270
S'description'
p20271
S'(0,1,2) = (x,y,z) for which momentum component this BC is applied to\n'
p20272
sS'cpp_type'
p20273
S'unsigned int'
p20274
sS'default'
p20275
g3
sS'name'
p20276
S'component'
p20277
sS'required'
p20278
I01
sS'group_name'
p20279
Nsa(dp20280
S'description'
p20281
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20282
sS'cpp_type'
p20283
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20284
sS'default'
p20285
g3
sS'name'
p20286
S'control_tags'
p20287
sS'required'
p20288
I00
sS'group_name'
p20289
Nsa(dp20290
S'description'
p20291
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20292
sS'cpp_type'
p20293
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20294
sS'default'
p20295
g3
sS'name'
p20296
S'diag_save_in'
p20297
sS'required'
p20298
I00
sS'group_name'
p20299
S'Advanced'
p20300
sa(dp20301
S'description'
p20302
S'Ratio of specific heats.\n'
p20303
sS'cpp_type'
p20304
S'double'
p20305
sS'default'
p20306
g3
sS'name'
p20307
S'gamma'
p20308
sS'required'
p20309
I01
sS'group_name'
p20310
Nsa(dp20311
S'description'
p20312
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20313
sS'cpp_type'
p20314
S'bool'
p20315
sS'default'
p20316
S'1'
p20317
sS'name'
p20318
S'implicit'
p20319
sS'required'
p20320
I00
sS'group_name'
p20321
S'Advanced'
p20322
sa(dp20323
S'description'
p20324
g3
sS'cpp_type'
p20325
S'std::vector<VariableName>'
p20326
sS'default'
p20327
g3
sS'name'
p20328
S'pressure'
p20329
sS'required'
p20330
I01
sS'group_name'
p20331
Nsa(dp20332
S'description'
p20333
S'density\n'
p20334
sS'cpp_type'
p20335
S'std::vector<VariableName>'
p20336
sS'default'
p20337
g3
sS'name'
p20338
S'rho'
p20339
sS'required'
p20340
I01
sS'group_name'
p20341
Nsa(dp20342
S'description'
p20343
S'energy\n'
p20344
sS'cpp_type'
p20345
S'std::vector<VariableName>'
p20346
sS'default'
p20347
g3
sS'name'
p20348
S'rhoe'
p20349
sS'required'
p20350
I01
sS'group_name'
p20351
Nsa(dp20352
S'description'
p20353
S'x-momentum\n'
p20354
sS'cpp_type'
p20355
S'std::vector<VariableName>'
p20356
sS'default'
p20357
g3
sS'name'
p20358
S'rhou'
p20359
sS'required'
p20360
I01
sS'group_name'
p20361
Nsa(dp20362
S'description'
p20363
S"The _component'th entry of the (rho*u)(u.n) vector for this boundary\n"
p20364
sS'cpp_type'
p20365
S'double'
p20366
sS'default'
p20367
g3
sS'name'
p20368
S'rhou_udotn'
p20369
sS'required'
p20370
I01
sS'group_name'
p20371
Nsa(dp20372
S'description'
p20373
S'y-momentum\n'
p20374
sS'cpp_type'
p20375
S'std::vector<VariableName>'
p20376
sS'default'
p20377
g3
sS'name'
p20378
S'rhov'
p20379
sS'required'
p20380
I01
sS'group_name'
p20381
Nsa(dp20382
S'description'
p20383
S'z-momentum\n'
p20384
sS'cpp_type'
p20385
S'std::vector<VariableName>'
p20386
sS'default'
p20387
g3
sS'name'
p20388
S'rhow'
p20389
sS'required'
p20390
I00
sS'group_name'
p20391
Nsa(dp20392
S'description'
p20393
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20394
sS'cpp_type'
p20395
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20396
sS'default'
p20397
g3
sS'name'
p20398
S'save_in'
p20399
sS'required'
p20400
I00
sS'group_name'
p20401
S'Advanced'
p20402
sa(dp20403
S'description'
p20404
S'The seed for the master random number generator\n'
p20405
sS'cpp_type'
p20406
S'unsigned int'
p20407
sS'default'
p20408
S'0'
p20409
sS'name'
p20410
S'seed'
p20411
sS'required'
p20412
I00
sS'group_name'
p20413
S'Advanced'
p20414
sa(dp20415
S'description'
p20416
g3
sS'cpp_type'
p20417
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20418
sS'default'
p20419
S'NSMomentumInviscidSpecifiedNormalFlowBC'
p20420
sS'name'
p20421
S'type'
p20422
sS'required'
p20423
I00
sS'group_name'
p20424
Nsa(dp20425
S'description'
p20426
g3
sS'cpp_type'
p20427
S'std::vector<VariableName>'
p20428
sS'default'
p20429
g3
sS'name'
p20430
S'u'
p20431
sS'required'
p20432
I01
sS'group_name'
p20433
Nsa(dp20434
S'description'
p20435
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20436
sS'cpp_type'
p20437
S'bool'
p20438
sS'default'
p20439
S'0'
p20440
sS'name'
p20441
S'use_displaced_mesh'
p20442
sS'required'
p20443
I00
sS'group_name'
p20444
S'Advanced'
p20445
sa(dp20446
S'description'
p20447
g3
sS'cpp_type'
p20448
S'std::vector<VariableName>'
p20449
sS'default'
p20450
g3
sS'name'
p20451
S'v'
p20452
sS'required'
p20453
I01
sS'group_name'
p20454
Nsa(dp20455
S'description'
p20456
S'The name of the variable that this boundary condition applies to\n'
p20457
sS'cpp_type'
p20458
S'NonlinearVariableName'
p20459
sS'default'
p20460
g3
sS'name'
p20461
S'variable'
p20462
sS'required'
p20463
I01
sS'group_name'
p20464
Nsa(dp20465
S'description'
p20466
g3
sS'cpp_type'
p20467
S'std::vector<VariableName>'
p20468
sS'default'
p20469
g3
sS'name'
p20470
S'w'
p20471
sS'required'
p20472
I00
sS'group_name'
p20473
NsasS'name'
p20474
S'/BCs/NSMomentumInviscidSpecifiedNormalFlowBC'
p20475
sa(dp20476
S'description'
p20477
g3
sS'subblocks'
p20478
NsS'parameters'
p20479
(lp20480
(dp20481
S'description'
p20482
S'Gas constant.\n'
p20483
sS'cpp_type'
p20484
S'double'
p20485
sS'default'
p20486
g3
sS'name'
p20487
S'R'
p20488
sS'required'
p20489
I01
sS'group_name'
p20490
Nsa(dp20491
S'description'
p20492
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20493
sS'cpp_type'
p20494
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20495
sS'default'
p20496
g3
sS'name'
p20497
S'boundary'
p20498
sS'required'
p20499
I01
sS'group_name'
p20500
Nsa(dp20501
S'description'
p20502
S'(0,1,2) = (x,y,z) for which momentum component this BC is applied to\n'
p20503
sS'cpp_type'
p20504
S'unsigned int'
p20505
sS'default'
p20506
g3
sS'name'
p20507
S'component'
p20508
sS'required'
p20509
I01
sS'group_name'
p20510
Nsa(dp20511
S'description'
p20512
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20513
sS'cpp_type'
p20514
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20515
sS'default'
p20516
g3
sS'name'
p20517
S'control_tags'
p20518
sS'required'
p20519
I00
sS'group_name'
p20520
Nsa(dp20521
S'description'
p20522
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20523
sS'cpp_type'
p20524
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20525
sS'default'
p20526
g3
sS'name'
p20527
S'diag_save_in'
p20528
sS'required'
p20529
I00
sS'group_name'
p20530
S'Advanced'
p20531
sa(dp20532
S'description'
p20533
S'Ratio of specific heats.\n'
p20534
sS'cpp_type'
p20535
S'double'
p20536
sS'default'
p20537
g3
sS'name'
p20538
S'gamma'
p20539
sS'required'
p20540
I01
sS'group_name'
p20541
Nsa(dp20542
S'description'
p20543
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20544
sS'cpp_type'
p20545
S'bool'
p20546
sS'default'
p20547
S'1'
p20548
sS'name'
p20549
S'implicit'
p20550
sS'required'
p20551
I00
sS'group_name'
p20552
S'Advanced'
p20553
sa(dp20554
S'description'
p20555
S'density\n'
p20556
sS'cpp_type'
p20557
S'std::vector<VariableName>'
p20558
sS'default'
p20559
g3
sS'name'
p20560
S'rho'
p20561
sS'required'
p20562
I01
sS'group_name'
p20563
Nsa(dp20564
S'description'
p20565
S'energy\n'
p20566
sS'cpp_type'
p20567
S'std::vector<VariableName>'
p20568
sS'default'
p20569
g3
sS'name'
p20570
S'rhoe'
p20571
sS'required'
p20572
I01
sS'group_name'
p20573
Nsa(dp20574
S'description'
p20575
S'x-momentum\n'
p20576
sS'cpp_type'
p20577
S'std::vector<VariableName>'
p20578
sS'default'
p20579
g3
sS'name'
p20580
S'rhou'
p20581
sS'required'
p20582
I01
sS'group_name'
p20583
Nsa(dp20584
S'description'
p20585
S'y-momentum\n'
p20586
sS'cpp_type'
p20587
S'std::vector<VariableName>'
p20588
sS'default'
p20589
g3
sS'name'
p20590
S'rhov'
p20591
sS'required'
p20592
I01
sS'group_name'
p20593
Nsa(dp20594
S'description'
p20595
S'z-momentum\n'
p20596
sS'cpp_type'
p20597
S'std::vector<VariableName>'
p20598
sS'default'
p20599
g3
sS'name'
p20600
S'rhow'
p20601
sS'required'
p20602
I00
sS'group_name'
p20603
Nsa(dp20604
S'description'
p20605
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20606
sS'cpp_type'
p20607
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20608
sS'default'
p20609
g3
sS'name'
p20610
S'save_in'
p20611
sS'required'
p20612
I00
sS'group_name'
p20613
S'Advanced'
p20614
sa(dp20615
S'description'
p20616
S'The seed for the master random number generator\n'
p20617
sS'cpp_type'
p20618
S'unsigned int'
p20619
sS'default'
p20620
S'0'
p20621
sS'name'
p20622
S'seed'
p20623
sS'required'
p20624
I00
sS'group_name'
p20625
S'Advanced'
p20626
sa(dp20627
S'description'
p20628
S'The specified pressure for this boundary\n'
p20629
sS'cpp_type'
p20630
S'double'
p20631
sS'default'
p20632
g3
sS'name'
p20633
S'specified_pressure'
p20634
sS'required'
p20635
I01
sS'group_name'
p20636
Nsa(dp20637
S'description'
p20638
g3
sS'cpp_type'
p20639
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20640
sS'default'
p20641
S'NSMomentumInviscidSpecifiedPressureBC'
p20642
sS'name'
p20643
S'type'
p20644
sS'required'
p20645
I00
sS'group_name'
p20646
Nsa(dp20647
S'description'
p20648
g3
sS'cpp_type'
p20649
S'std::vector<VariableName>'
p20650
sS'default'
p20651
g3
sS'name'
p20652
S'u'
p20653
sS'required'
p20654
I01
sS'group_name'
p20655
Nsa(dp20656
S'description'
p20657
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20658
sS'cpp_type'
p20659
S'bool'
p20660
sS'default'
p20661
S'0'
p20662
sS'name'
p20663
S'use_displaced_mesh'
p20664
sS'required'
p20665
I00
sS'group_name'
p20666
S'Advanced'
p20667
sa(dp20668
S'description'
p20669
g3
sS'cpp_type'
p20670
S'std::vector<VariableName>'
p20671
sS'default'
p20672
g3
sS'name'
p20673
S'v'
p20674
sS'required'
p20675
I01
sS'group_name'
p20676
Nsa(dp20677
S'description'
p20678
S'The name of the variable that this boundary condition applies to\n'
p20679
sS'cpp_type'
p20680
S'NonlinearVariableName'
p20681
sS'default'
p20682
g3
sS'name'
p20683
S'variable'
p20684
sS'required'
p20685
I01
sS'group_name'
p20686
Nsa(dp20687
S'description'
p20688
g3
sS'cpp_type'
p20689
S'std::vector<VariableName>'
p20690
sS'default'
p20691
g3
sS'name'
p20692
S'w'
p20693
sS'required'
p20694
I00
sS'group_name'
p20695
NsasS'name'
p20696
S'/BCs/NSMomentumInviscidSpecifiedPressureBC'
p20697
sa(dp20698
S'description'
p20699
g3
sS'subblocks'
p20700
NsS'parameters'
p20701
(lp20702
(dp20703
S'description'
p20704
S'Gas constant.\n'
p20705
sS'cpp_type'
p20706
S'double'
p20707
sS'default'
p20708
g3
sS'name'
p20709
S'R'
p20710
sS'required'
p20711
I01
sS'group_name'
p20712
Nsa(dp20713
S'description'
p20714
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20715
sS'cpp_type'
p20716
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20717
sS'default'
p20718
g3
sS'name'
p20719
S'boundary'
p20720
sS'required'
p20721
I01
sS'group_name'
p20722
Nsa(dp20723
S'description'
p20724
S'(0,1,2) = (x,y,z) for which momentum component this BC is applied to\n'
p20725
sS'cpp_type'
p20726
S'unsigned int'
p20727
sS'default'
p20728
g3
sS'name'
p20729
S'component'
p20730
sS'required'
p20731
I01
sS'group_name'
p20732
Nsa(dp20733
S'description'
p20734
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20735
sS'cpp_type'
p20736
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p20737
sS'default'
p20738
g3
sS'name'
p20739
S'control_tags'
p20740
sS'required'
p20741
I00
sS'group_name'
p20742
Nsa(dp20743
S'description'
p20744
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20745
sS'cpp_type'
p20746
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20747
sS'default'
p20748
g3
sS'name'
p20749
S'diag_save_in'
p20750
sS'required'
p20751
I00
sS'group_name'
p20752
S'Advanced'
p20753
sa(dp20754
S'description'
p20755
S'Ratio of specific heats.\n'
p20756
sS'cpp_type'
p20757
S'double'
p20758
sS'default'
p20759
g3
sS'name'
p20760
S'gamma'
p20761
sS'required'
p20762
I01
sS'group_name'
p20763
Nsa(dp20764
S'description'
p20765
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20766
sS'cpp_type'
p20767
S'bool'
p20768
sS'default'
p20769
S'1'
p20770
sS'name'
p20771
S'implicit'
p20772
sS'required'
p20773
I00
sS'group_name'
p20774
S'Advanced'
p20775
sa(dp20776
S'description'
p20777
S'density\n'
p20778
sS'cpp_type'
p20779
S'std::vector<VariableName>'
p20780
sS'default'
p20781
g3
sS'name'
p20782
S'rho'
p20783
sS'required'
p20784
I01
sS'group_name'
p20785
Nsa(dp20786
S'description'
p20787
S'energy\n'
p20788
sS'cpp_type'
p20789
S'std::vector<VariableName>'
p20790
sS'default'
p20791
g3
sS'name'
p20792
S'rhoe'
p20793
sS'required'
p20794
I01
sS'group_name'
p20795
Nsa(dp20796
S'description'
p20797
S'x-momentum\n'
p20798
sS'cpp_type'
p20799
S'std::vector<VariableName>'
p20800
sS'default'
p20801
g3
sS'name'
p20802
S'rhou'
p20803
sS'required'
p20804
I01
sS'group_name'
p20805
Nsa(dp20806
S'description'
p20807
S'y-momentum\n'
p20808
sS'cpp_type'
p20809
S'std::vector<VariableName>'
p20810
sS'default'
p20811
g3
sS'name'
p20812
S'rhov'
p20813
sS'required'
p20814
I01
sS'group_name'
p20815
Nsa(dp20816
S'description'
p20817
S'z-momentum\n'
p20818
sS'cpp_type'
p20819
S'std::vector<VariableName>'
p20820
sS'default'
p20821
g3
sS'name'
p20822
S'rhow'
p20823
sS'required'
p20824
I00
sS'group_name'
p20825
Nsa(dp20826
S'description'
p20827
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20828
sS'cpp_type'
p20829
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20830
sS'default'
p20831
g3
sS'name'
p20832
S'save_in'
p20833
sS'required'
p20834
I00
sS'group_name'
p20835
S'Advanced'
p20836
sa(dp20837
S'description'
p20838
S'The seed for the master random number generator\n'
p20839
sS'cpp_type'
p20840
S'unsigned int'
p20841
sS'default'
p20842
S'0'
p20843
sS'name'
p20844
S'seed'
p20845
sS'required'
p20846
I00
sS'group_name'
p20847
S'Advanced'
p20848
sa(dp20849
S'description'
p20850
S'The specifed stagnation pressure\n'
p20851
sS'cpp_type'
p20852
S'double'
p20853
sS'default'
p20854
g3
sS'name'
p20855
S'stagnation_pressure'
p20856
sS'required'
p20857
I01
sS'group_name'
p20858
Nsa(dp20859
S'description'
p20860
S'The specifed stagnation temperature\n'
p20861
sS'cpp_type'
p20862
S'double'
p20863
sS'default'
p20864
g3
sS'name'
p20865
S'stagnation_temperature'
p20866
sS'required'
p20867
I01
sS'group_name'
p20868
Nsa(dp20869
S'description'
p20870
S'x-component of specifed flow direction\n'
p20871
sS'cpp_type'
p20872
S'double'
p20873
sS'default'
p20874
g3
sS'name'
p20875
S'sx'
p20876
sS'required'
p20877
I01
sS'group_name'
p20878
Nsa(dp20879
S'description'
p20880
S'y-component of specifed flow direction\n'
p20881
sS'cpp_type'
p20882
S'double'
p20883
sS'default'
p20884
g3
sS'name'
p20885
S'sy'
p20886
sS'required'
p20887
I01
sS'group_name'
p20888
Nsa(dp20889
S'description'
p20890
S'z-component of specifed flow direction\n'
p20891
sS'cpp_type'
p20892
S'double'
p20893
sS'default'
p20894
S'0'
p20895
sS'name'
p20896
S'sz'
p20897
sS'required'
p20898
I00
sS'group_name'
p20899
Nsa(dp20900
S'description'
p20901
g3
sS'cpp_type'
p20902
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p20903
sS'default'
p20904
S'NSMomentumPressureWeakStagnationBC'
p20905
sS'name'
p20906
S'type'
p20907
sS'required'
p20908
I00
sS'group_name'
p20909
Nsa(dp20910
S'description'
p20911
g3
sS'cpp_type'
p20912
S'std::vector<VariableName>'
p20913
sS'default'
p20914
g3
sS'name'
p20915
S'u'
p20916
sS'required'
p20917
I01
sS'group_name'
p20918
Nsa(dp20919
S'description'
p20920
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20921
sS'cpp_type'
p20922
S'bool'
p20923
sS'default'
p20924
S'0'
p20925
sS'name'
p20926
S'use_displaced_mesh'
p20927
sS'required'
p20928
I00
sS'group_name'
p20929
S'Advanced'
p20930
sa(dp20931
S'description'
p20932
g3
sS'cpp_type'
p20933
S'std::vector<VariableName>'
p20934
sS'default'
p20935
g3
sS'name'
p20936
S'v'
p20937
sS'required'
p20938
I01
sS'group_name'
p20939
Nsa(dp20940
S'description'
p20941
S'The name of the variable that this boundary condition applies to\n'
p20942
sS'cpp_type'
p20943
S'NonlinearVariableName'
p20944
sS'default'
p20945
g3
sS'name'
p20946
S'variable'
p20947
sS'required'
p20948
I01
sS'group_name'
p20949
Nsa(dp20950
S'description'
p20951
g3
sS'cpp_type'
p20952
S'std::vector<VariableName>'
p20953
sS'default'
p20954
g3
sS'name'
p20955
S'w'
p20956
sS'required'
p20957
I00
sS'group_name'
p20958
NsasS'name'
p20959
S'/BCs/NSMomentumPressureWeakStagnationBC'
p20960
sa(dp20961
S'description'
p20962
g3
sS'subblocks'
p20963
NsS'parameters'
p20964
(lp20965
(dp20966
S'description'
p20967
S'Gas constant.\n'
p20968
sS'cpp_type'
p20969
S'double'
p20970
sS'default'
p20971
g3
sS'name'
p20972
S'R'
p20973
sS'required'
p20974
I01
sS'group_name'
p20975
Nsa(dp20976
S'description'
p20977
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20978
sS'cpp_type'
p20979
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20980
sS'default'
p20981
g3
sS'name'
p20982
S'boundary'
p20983
sS'required'
p20984
I01
sS'group_name'
p20985
Nsa(dp20986
S'description'
p20987
S'(0,1,2) = (x,y,z) for which momentum component this BC is applied to\n'
p20988
sS'cpp_type'
p20989
S'unsigned int'
p20990
sS'default'
p20991
g3
sS'name'
p20992
S'component'
p20993
sS'required'
p20994
I01
sS'group_name'
p20995
Nsa(dp20996
S'description'
p20997
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20998
sS'cpp_type'
p20999
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21000
sS'default'
p21001
g3
sS'name'
p21002
S'control_tags'
p21003
sS'required'
p21004
I00
sS'group_name'
p21005
Nsa(dp21006
S'description'
p21007
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21008
sS'cpp_type'
p21009
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21010
sS'default'
p21011
g3
sS'name'
p21012
S'diag_save_in'
p21013
sS'required'
p21014
I00
sS'group_name'
p21015
S'Advanced'
p21016
sa(dp21017
S'description'
p21018
S'Ratio of specific heats.\n'
p21019
sS'cpp_type'
p21020
S'double'
p21021
sS'default'
p21022
g3
sS'name'
p21023
S'gamma'
p21024
sS'required'
p21025
I01
sS'group_name'
p21026
Nsa(dp21027
S'description'
p21028
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21029
sS'cpp_type'
p21030
S'bool'
p21031
sS'default'
p21032
S'1'
p21033
sS'name'
p21034
S'implicit'
p21035
sS'required'
p21036
I00
sS'group_name'
p21037
S'Advanced'
p21038
sa(dp21039
S'description'
p21040
S'density\n'
p21041
sS'cpp_type'
p21042
S'std::vector<VariableName>'
p21043
sS'default'
p21044
g3
sS'name'
p21045
S'rho'
p21046
sS'required'
p21047
I01
sS'group_name'
p21048
Nsa(dp21049
S'description'
p21050
S'energy\n'
p21051
sS'cpp_type'
p21052
S'std::vector<VariableName>'
p21053
sS'default'
p21054
g3
sS'name'
p21055
S'rhoe'
p21056
sS'required'
p21057
I01
sS'group_name'
p21058
Nsa(dp21059
S'description'
p21060
S'x-momentum\n'
p21061
sS'cpp_type'
p21062
S'std::vector<VariableName>'
p21063
sS'default'
p21064
g3
sS'name'
p21065
S'rhou'
p21066
sS'required'
p21067
I01
sS'group_name'
p21068
Nsa(dp21069
S'description'
p21070
S'y-momentum\n'
p21071
sS'cpp_type'
p21072
S'std::vector<VariableName>'
p21073
sS'default'
p21074
g3
sS'name'
p21075
S'rhov'
p21076
sS'required'
p21077
I01
sS'group_name'
p21078
Nsa(dp21079
S'description'
p21080
S'z-momentum\n'
p21081
sS'cpp_type'
p21082
S'std::vector<VariableName>'
p21083
sS'default'
p21084
g3
sS'name'
p21085
S'rhow'
p21086
sS'required'
p21087
I00
sS'group_name'
p21088
Nsa(dp21089
S'description'
p21090
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21091
sS'cpp_type'
p21092
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21093
sS'default'
p21094
g3
sS'name'
p21095
S'save_in'
p21096
sS'required'
p21097
I00
sS'group_name'
p21098
S'Advanced'
p21099
sa(dp21100
S'description'
p21101
S'The seed for the master random number generator\n'
p21102
sS'cpp_type'
p21103
S'unsigned int'
p21104
sS'default'
p21105
S'0'
p21106
sS'name'
p21107
S'seed'
p21108
sS'required'
p21109
I00
sS'group_name'
p21110
S'Advanced'
p21111
sa(dp21112
S'description'
p21113
g3
sS'cpp_type'
p21114
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21115
sS'default'
p21116
S'NSMomentumViscousBC'
p21117
sS'name'
p21118
S'type'
p21119
sS'required'
p21120
I00
sS'group_name'
p21121
Nsa(dp21122
S'description'
p21123
g3
sS'cpp_type'
p21124
S'std::vector<VariableName>'
p21125
sS'default'
p21126
g3
sS'name'
p21127
S'u'
p21128
sS'required'
p21129
I01
sS'group_name'
p21130
Nsa(dp21131
S'description'
p21132
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21133
sS'cpp_type'
p21134
S'bool'
p21135
sS'default'
p21136
S'0'
p21137
sS'name'
p21138
S'use_displaced_mesh'
p21139
sS'required'
p21140
I00
sS'group_name'
p21141
S'Advanced'
p21142
sa(dp21143
S'description'
p21144
g3
sS'cpp_type'
p21145
S'std::vector<VariableName>'
p21146
sS'default'
p21147
g3
sS'name'
p21148
S'v'
p21149
sS'required'
p21150
I01
sS'group_name'
p21151
Nsa(dp21152
S'description'
p21153
S'The name of the variable that this boundary condition applies to\n'
p21154
sS'cpp_type'
p21155
S'NonlinearVariableName'
p21156
sS'default'
p21157
g3
sS'name'
p21158
S'variable'
p21159
sS'required'
p21160
I01
sS'group_name'
p21161
Nsa(dp21162
S'description'
p21163
g3
sS'cpp_type'
p21164
S'std::vector<VariableName>'
p21165
sS'default'
p21166
g3
sS'name'
p21167
S'w'
p21168
sS'required'
p21169
I00
sS'group_name'
p21170
NsasS'name'
p21171
S'/BCs/NSMomentumViscousBC'
p21172
sa(dp21173
S'description'
p21174
g3
sS'subblocks'
p21175
NsS'parameters'
p21176
(lp21177
(dp21178
S'description'
p21179
S'Gas constant.\n'
p21180
sS'cpp_type'
p21181
S'double'
p21182
sS'default'
p21183
g3
sS'name'
p21184
S'R'
p21185
sS'required'
p21186
I01
sS'group_name'
p21187
Nsa(dp21188
S'description'
p21189
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21190
sS'cpp_type'
p21191
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21192
sS'default'
p21193
g3
sS'name'
p21194
S'boundary'
p21195
sS'required'
p21196
I01
sS'group_name'
p21197
Nsa(dp21198
S'description'
p21199
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21200
sS'cpp_type'
p21201
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21202
sS'default'
p21203
g3
sS'name'
p21204
S'control_tags'
p21205
sS'required'
p21206
I00
sS'group_name'
p21207
Nsa(dp21208
S'description'
p21209
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21210
sS'cpp_type'
p21211
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21212
sS'default'
p21213
g3
sS'name'
p21214
S'diag_save_in'
p21215
sS'required'
p21216
I00
sS'group_name'
p21217
S'Advanced'
p21218
sa(dp21219
S'description'
p21220
S'Ratio of specific heats.\n'
p21221
sS'cpp_type'
p21222
S'double'
p21223
sS'default'
p21224
g3
sS'name'
p21225
S'gamma'
p21226
sS'required'
p21227
I01
sS'group_name'
p21228
Nsa(dp21229
S'description'
p21230
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21231
sS'cpp_type'
p21232
S'bool'
p21233
sS'default'
p21234
S'1'
p21235
sS'name'
p21236
S'implicit'
p21237
sS'required'
p21238
I00
sS'group_name'
p21239
S'Advanced'
p21240
sa(dp21241
S'description'
p21242
S'The penalty parameter, some (large) value.\n'
p21243
sS'cpp_type'
p21244
S'double'
p21245
sS'default'
p21246
g3
sS'name'
p21247
S'penalty'
p21248
sS'required'
p21249
I01
sS'group_name'
p21250
Nsa(dp21251
S'description'
p21252
S'density\n'
p21253
sS'cpp_type'
p21254
S'std::vector<VariableName>'
p21255
sS'default'
p21256
g3
sS'name'
p21257
S'rho'
p21258
sS'required'
p21259
I01
sS'group_name'
p21260
Nsa(dp21261
S'description'
p21262
S'energy\n'
p21263
sS'cpp_type'
p21264
S'std::vector<VariableName>'
p21265
sS'default'
p21266
g3
sS'name'
p21267
S'rhoe'
p21268
sS'required'
p21269
I01
sS'group_name'
p21270
Nsa(dp21271
S'description'
p21272
S'x-momentum\n'
p21273
sS'cpp_type'
p21274
S'std::vector<VariableName>'
p21275
sS'default'
p21276
g3
sS'name'
p21277
S'rhou'
p21278
sS'required'
p21279
I01
sS'group_name'
p21280
Nsa(dp21281
S'description'
p21282
S'y-momentum\n'
p21283
sS'cpp_type'
p21284
S'std::vector<VariableName>'
p21285
sS'default'
p21286
g3
sS'name'
p21287
S'rhov'
p21288
sS'required'
p21289
I01
sS'group_name'
p21290
Nsa(dp21291
S'description'
p21292
S'z-momentum\n'
p21293
sS'cpp_type'
p21294
S'std::vector<VariableName>'
p21295
sS'default'
p21296
g3
sS'name'
p21297
S'rhow'
p21298
sS'required'
p21299
I00
sS'group_name'
p21300
Nsa(dp21301
S'description'
p21302
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21303
sS'cpp_type'
p21304
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21305
sS'default'
p21306
g3
sS'name'
p21307
S'save_in'
p21308
sS'required'
p21309
I00
sS'group_name'
p21310
S'Advanced'
p21311
sa(dp21312
S'description'
p21313
S'The seed for the master random number generator\n'
p21314
sS'cpp_type'
p21315
S'unsigned int'
p21316
sS'default'
p21317
S'0'
p21318
sS'name'
p21319
S'seed'
p21320
sS'required'
p21321
I00
sS'group_name'
p21322
S'Advanced'
p21323
sa(dp21324
S'description'
p21325
S'The desired value of u.n.\n'
p21326
sS'cpp_type'
p21327
S'double'
p21328
sS'default'
p21329
S'0'
p21330
sS'name'
p21331
S'specified_udotn'
p21332
sS'required'
p21333
I00
sS'group_name'
p21334
Nsa(dp21335
S'description'
p21336
g3
sS'cpp_type'
p21337
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21338
sS'default'
p21339
S'NSPenalizedNormalFlowBC'
p21340
sS'name'
p21341
S'type'
p21342
sS'required'
p21343
I00
sS'group_name'
p21344
Nsa(dp21345
S'description'
p21346
g3
sS'cpp_type'
p21347
S'std::vector<VariableName>'
p21348
sS'default'
p21349
g3
sS'name'
p21350
S'u'
p21351
sS'required'
p21352
I01
sS'group_name'
p21353
Nsa(dp21354
S'description'
p21355
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21356
sS'cpp_type'
p21357
S'bool'
p21358
sS'default'
p21359
S'0'
p21360
sS'name'
p21361
S'use_displaced_mesh'
p21362
sS'required'
p21363
I00
sS'group_name'
p21364
S'Advanced'
p21365
sa(dp21366
S'description'
p21367
g3
sS'cpp_type'
p21368
S'std::vector<VariableName>'
p21369
sS'default'
p21370
g3
sS'name'
p21371
S'v'
p21372
sS'required'
p21373
I01
sS'group_name'
p21374
Nsa(dp21375
S'description'
p21376
S'The name of the variable that this boundary condition applies to\n'
p21377
sS'cpp_type'
p21378
S'NonlinearVariableName'
p21379
sS'default'
p21380
g3
sS'name'
p21381
S'variable'
p21382
sS'required'
p21383
I01
sS'group_name'
p21384
Nsa(dp21385
S'description'
p21386
g3
sS'cpp_type'
p21387
S'std::vector<VariableName>'
p21388
sS'default'
p21389
g3
sS'name'
p21390
S'w'
p21391
sS'required'
p21392
I00
sS'group_name'
p21393
NsasS'name'
p21394
S'/BCs/NSPenalizedNormalFlowBC'
p21395
sa(dp21396
S'description'
p21397
g3
sS'subblocks'
p21398
NsS'parameters'
p21399
(lp21400
(dp21401
S'description'
p21402
S'Gas constant.\n'
p21403
sS'cpp_type'
p21404
S'double'
p21405
sS'default'
p21406
g3
sS'name'
p21407
S'R'
p21408
sS'required'
p21409
I01
sS'group_name'
p21410
Nsa(dp21411
S'description'
p21412
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21413
sS'cpp_type'
p21414
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21415
sS'default'
p21416
g3
sS'name'
p21417
S'boundary'
p21418
sS'required'
p21419
I01
sS'group_name'
p21420
Nsa(dp21421
S'description'
p21422
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21423
sS'cpp_type'
p21424
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21425
sS'default'
p21426
g3
sS'name'
p21427
S'control_tags'
p21428
sS'required'
p21429
I00
sS'group_name'
p21430
Nsa(dp21431
S'description'
p21432
g3
sS'cpp_type'
p21433
S'double'
p21434
sS'default'
p21435
g3
sS'name'
p21436
S'desired_stagnation_pressure'
p21437
sS'required'
p21438
I01
sS'group_name'
p21439
Nsa(dp21440
S'description'
p21441
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21442
sS'cpp_type'
p21443
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21444
sS'default'
p21445
g3
sS'name'
p21446
S'diag_save_in'
p21447
sS'required'
p21448
I00
sS'group_name'
p21449
Nsa(dp21450
S'description'
p21451
S'Ratio of specific heats\n'
p21452
sS'cpp_type'
p21453
S'double'
p21454
sS'default'
p21455
g3
sS'name'
p21456
S'gamma'
p21457
sS'required'
p21458
I01
sS'group_name'
p21459
Nsa(dp21460
S'description'
p21461
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21462
sS'cpp_type'
p21463
S'bool'
p21464
sS'default'
p21465
S'1'
p21466
sS'name'
p21467
S'implicit'
p21468
sS'required'
p21469
I00
sS'group_name'
p21470
S'Advanced'
p21471
sa(dp21472
S'description'
p21473
g3
sS'cpp_type'
p21474
S'std::vector<VariableName>'
p21475
sS'default'
p21476
g3
sS'name'
p21477
S'pressure'
p21478
sS'required'
p21479
I01
sS'group_name'
p21480
Nsa(dp21481
S'description'
p21482
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21483
sS'cpp_type'
p21484
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21485
sS'default'
p21486
g3
sS'name'
p21487
S'save_in'
p21488
sS'required'
p21489
I00
sS'group_name'
p21490
Nsa(dp21491
S'description'
p21492
S'The seed for the master random number generator\n'
p21493
sS'cpp_type'
p21494
S'unsigned int'
p21495
sS'default'
p21496
S'0'
p21497
sS'name'
p21498
S'seed'
p21499
sS'required'
p21500
I00
sS'group_name'
p21501
S'Advanced'
p21502
sa(dp21503
S'description'
p21504
g3
sS'cpp_type'
p21505
S'std::vector<VariableName>'
p21506
sS'default'
p21507
g3
sS'name'
p21508
S'temperature'
p21509
sS'required'
p21510
I01
sS'group_name'
p21511
Nsa(dp21512
S'description'
p21513
g3
sS'cpp_type'
p21514
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21515
sS'default'
p21516
S'NSStagnationPressureBC'
p21517
sS'name'
p21518
S'type'
p21519
sS'required'
p21520
I00
sS'group_name'
p21521
Nsa(dp21522
S'description'
p21523
g3
sS'cpp_type'
p21524
S'std::vector<VariableName>'
p21525
sS'default'
p21526
g3
sS'name'
p21527
S'u'
p21528
sS'required'
p21529
I01
sS'group_name'
p21530
Nsa(dp21531
S'description'
p21532
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21533
sS'cpp_type'
p21534
S'bool'
p21535
sS'default'
p21536
S'0'
p21537
sS'name'
p21538
S'use_displaced_mesh'
p21539
sS'required'
p21540
I00
sS'group_name'
p21541
S'Advanced'
p21542
sa(dp21543
S'description'
p21544
g3
sS'cpp_type'
p21545
S'std::vector<VariableName>'
p21546
sS'default'
p21547
g3
sS'name'
p21548
S'v'
p21549
sS'required'
p21550
I01
sS'group_name'
p21551
Nsa(dp21552
S'description'
p21553
S'The name of the variable that this boundary condition applies to\n'
p21554
sS'cpp_type'
p21555
S'NonlinearVariableName'
p21556
sS'default'
p21557
g3
sS'name'
p21558
S'variable'
p21559
sS'required'
p21560
I01
sS'group_name'
p21561
Nsa(dp21562
S'description'
p21563
g3
sS'cpp_type'
p21564
S'std::vector<VariableName>'
p21565
sS'default'
p21566
g3
sS'name'
p21567
S'w'
p21568
sS'required'
p21569
I00
sS'group_name'
p21570
NsasS'name'
p21571
S'/BCs/NSStagnationPressureBC'
p21572
sa(dp21573
S'description'
p21574
g3
sS'subblocks'
p21575
NsS'parameters'
p21576
(lp21577
(dp21578
S'description'
p21579
S'Gas constant.\n'
p21580
sS'cpp_type'
p21581
S'double'
p21582
sS'default'
p21583
g3
sS'name'
p21584
S'R'
p21585
sS'required'
p21586
I01
sS'group_name'
p21587
Nsa(dp21588
S'description'
p21589
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21590
sS'cpp_type'
p21591
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21592
sS'default'
p21593
g3
sS'name'
p21594
S'boundary'
p21595
sS'required'
p21596
I01
sS'group_name'
p21597
Nsa(dp21598
S'description'
p21599
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21600
sS'cpp_type'
p21601
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21602
sS'default'
p21603
g3
sS'name'
p21604
S'control_tags'
p21605
sS'required'
p21606
I00
sS'group_name'
p21607
Nsa(dp21608
S'description'
p21609
g3
sS'cpp_type'
p21610
S'double'
p21611
sS'default'
p21612
g3
sS'name'
p21613
S'desired_stagnation_temperature'
p21614
sS'required'
p21615
I01
sS'group_name'
p21616
Nsa(dp21617
S'description'
p21618
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21619
sS'cpp_type'
p21620
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21621
sS'default'
p21622
g3
sS'name'
p21623
S'diag_save_in'
p21624
sS'required'
p21625
I00
sS'group_name'
p21626
Nsa(dp21627
S'description'
p21628
S'Ratio of specific heats\n'
p21629
sS'cpp_type'
p21630
S'double'
p21631
sS'default'
p21632
g3
sS'name'
p21633
S'gamma'
p21634
sS'required'
p21635
I01
sS'group_name'
p21636
Nsa(dp21637
S'description'
p21638
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21639
sS'cpp_type'
p21640
S'bool'
p21641
sS'default'
p21642
S'1'
p21643
sS'name'
p21644
S'implicit'
p21645
sS'required'
p21646
I00
sS'group_name'
p21647
S'Advanced'
p21648
sa(dp21649
S'description'
p21650
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21651
sS'cpp_type'
p21652
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21653
sS'default'
p21654
g3
sS'name'
p21655
S'save_in'
p21656
sS'required'
p21657
I00
sS'group_name'
p21658
Nsa(dp21659
S'description'
p21660
S'The seed for the master random number generator\n'
p21661
sS'cpp_type'
p21662
S'unsigned int'
p21663
sS'default'
p21664
S'0'
p21665
sS'name'
p21666
S'seed'
p21667
sS'required'
p21668
I00
sS'group_name'
p21669
S'Advanced'
p21670
sa(dp21671
S'description'
p21672
g3
sS'cpp_type'
p21673
S'std::vector<VariableName>'
p21674
sS'default'
p21675
g3
sS'name'
p21676
S'temperature'
p21677
sS'required'
p21678
I01
sS'group_name'
p21679
Nsa(dp21680
S'description'
p21681
g3
sS'cpp_type'
p21682
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21683
sS'default'
p21684
S'NSStagnationTemperatureBC'
p21685
sS'name'
p21686
S'type'
p21687
sS'required'
p21688
I00
sS'group_name'
p21689
Nsa(dp21690
S'description'
p21691
g3
sS'cpp_type'
p21692
S'std::vector<VariableName>'
p21693
sS'default'
p21694
g3
sS'name'
p21695
S'u'
p21696
sS'required'
p21697
I01
sS'group_name'
p21698
Nsa(dp21699
S'description'
p21700
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21701
sS'cpp_type'
p21702
S'bool'
p21703
sS'default'
p21704
S'0'
p21705
sS'name'
p21706
S'use_displaced_mesh'
p21707
sS'required'
p21708
I00
sS'group_name'
p21709
S'Advanced'
p21710
sa(dp21711
S'description'
p21712
g3
sS'cpp_type'
p21713
S'std::vector<VariableName>'
p21714
sS'default'
p21715
g3
sS'name'
p21716
S'v'
p21717
sS'required'
p21718
I01
sS'group_name'
p21719
Nsa(dp21720
S'description'
p21721
S'The name of the variable that this boundary condition applies to\n'
p21722
sS'cpp_type'
p21723
S'NonlinearVariableName'
p21724
sS'default'
p21725
g3
sS'name'
p21726
S'variable'
p21727
sS'required'
p21728
I01
sS'group_name'
p21729
Nsa(dp21730
S'description'
p21731
g3
sS'cpp_type'
p21732
S'std::vector<VariableName>'
p21733
sS'default'
p21734
g3
sS'name'
p21735
S'w'
p21736
sS'required'
p21737
I00
sS'group_name'
p21738
NsasS'name'
p21739
S'/BCs/NSStagnationTemperatureBC'
p21740
sa(dp21741
S'description'
p21742
g3
sS'subblocks'
p21743
NsS'parameters'
p21744
(lp21745
(dp21746
S'description'
p21747
S'Gas constant.\n'
p21748
sS'cpp_type'
p21749
S'double'
p21750
sS'default'
p21751
g3
sS'name'
p21752
S'R'
p21753
sS'required'
p21754
I01
sS'group_name'
p21755
Nsa(dp21756
S'description'
p21757
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21758
sS'cpp_type'
p21759
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21760
sS'default'
p21761
g3
sS'name'
p21762
S'boundary'
p21763
sS'required'
p21764
I01
sS'group_name'
p21765
Nsa(dp21766
S'description'
p21767
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21768
sS'cpp_type'
p21769
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21770
sS'default'
p21771
g3
sS'name'
p21772
S'control_tags'
p21773
sS'required'
p21774
I00
sS'group_name'
p21775
Nsa(dp21776
S'description'
p21777
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21778
sS'cpp_type'
p21779
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21780
sS'default'
p21781
g3
sS'name'
p21782
S'diag_save_in'
p21783
sS'required'
p21784
I00
sS'group_name'
p21785
Nsa(dp21786
S'description'
p21787
S'Time over which temperature ramps up from initial to final\n'
p21788
sS'cpp_type'
p21789
S'double'
p21790
sS'default'
p21791
g3
sS'name'
p21792
S'duration'
p21793
sS'required'
p21794
I01
sS'group_name'
p21795
Nsa(dp21796
S'description'
p21797
S'Final temperature\n'
p21798
sS'cpp_type'
p21799
S'double'
p21800
sS'default'
p21801
g3
sS'name'
p21802
S'final'
p21803
sS'required'
p21804
I01
sS'group_name'
p21805
Nsa(dp21806
S'description'
p21807
S'Ratio of specific heats.\n'
p21808
sS'cpp_type'
p21809
S'double'
p21810
sS'default'
p21811
g3
sS'name'
p21812
S'gamma'
p21813
sS'required'
p21814
I01
sS'group_name'
p21815
Nsa(dp21816
S'description'
p21817
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21818
sS'cpp_type'
p21819
S'bool'
p21820
sS'default'
p21821
S'1'
p21822
sS'name'
p21823
S'implicit'
p21824
sS'required'
p21825
I00
sS'group_name'
p21826
S'Advanced'
p21827
sa(dp21828
S'description'
p21829
S'Initial temperature\n'
p21830
sS'cpp_type'
p21831
S'double'
p21832
sS'default'
p21833
g3
sS'name'
p21834
S'initial'
p21835
sS'required'
p21836
I01
sS'group_name'
p21837
Nsa(dp21838
S'description'
p21839
g3
sS'cpp_type'
p21840
S'std::vector<VariableName>'
p21841
sS'default'
p21842
g3
sS'name'
p21843
S'rho'
p21844
sS'required'
p21845
I01
sS'group_name'
p21846
Nsa(dp21847
S'description'
p21848
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21849
sS'cpp_type'
p21850
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21851
sS'default'
p21852
g3
sS'name'
p21853
S'save_in'
p21854
sS'required'
p21855
I00
sS'group_name'
p21856
Nsa(dp21857
S'description'
p21858
S'The seed for the master random number generator\n'
p21859
sS'cpp_type'
p21860
S'unsigned int'
p21861
sS'default'
p21862
S'0'
p21863
sS'name'
p21864
S'seed'
p21865
sS'required'
p21866
I00
sS'group_name'
p21867
S'Advanced'
p21868
sa(dp21869
S'description'
p21870
g3
sS'cpp_type'
p21871
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21872
sS'default'
p21873
S'NSThermalBC'
p21874
sS'name'
p21875
S'type'
p21876
sS'required'
p21877
I00
sS'group_name'
p21878
Nsa(dp21879
S'description'
p21880
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21881
sS'cpp_type'
p21882
S'bool'
p21883
sS'default'
p21884
S'0'
p21885
sS'name'
p21886
S'use_displaced_mesh'
p21887
sS'required'
p21888
I00
sS'group_name'
p21889
S'Advanced'
p21890
sa(dp21891
S'description'
p21892
S'The name of the variable that this boundary condition applies to\n'
p21893
sS'cpp_type'
p21894
S'NonlinearVariableName'
p21895
sS'default'
p21896
g3
sS'name'
p21897
S'variable'
p21898
sS'required'
p21899
I01
sS'group_name'
p21900
NsasS'name'
p21901
S'/BCs/NSThermalBC'
p21902
sa(dp21903
S'description'
p21904
g3
sS'subblocks'
p21905
NsS'parameters'
p21906
(lp21907
(dp21908
S'description'
p21909
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21910
sS'cpp_type'
p21911
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21912
sS'default'
p21913
g3
sS'name'
p21914
S'boundary'
p21915
sS'required'
p21916
I01
sS'group_name'
p21917
Nsa(dp21918
S'description'
p21919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21920
sS'cpp_type'
p21921
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p21922
sS'default'
p21923
g3
sS'name'
p21924
S'control_tags'
p21925
sS'required'
p21926
I00
sS'group_name'
p21927
Nsa(dp21928
S'description'
p21929
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21930
sS'cpp_type'
p21931
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21932
sS'default'
p21933
g3
sS'name'
p21934
S'diag_save_in'
p21935
sS'required'
p21936
I00
sS'group_name'
p21937
S'Advanced'
p21938
sa(dp21939
S'description'
p21940
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21941
sS'cpp_type'
p21942
S'bool'
p21943
sS'default'
p21944
S'1'
p21945
sS'name'
p21946
S'implicit'
p21947
sS'required'
p21948
I00
sS'group_name'
p21949
S'Advanced'
p21950
sa(dp21951
S'description'
p21952
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21953
sS'cpp_type'
p21954
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p21955
sS'default'
p21956
g3
sS'name'
p21957
S'save_in'
p21958
sS'required'
p21959
I00
sS'group_name'
p21960
S'Advanced'
p21961
sa(dp21962
S'description'
p21963
S'The seed for the master random number generator\n'
p21964
sS'cpp_type'
p21965
S'unsigned int'
p21966
sS'default'
p21967
S'0'
p21968
sS'name'
p21969
S'seed'
p21970
sS'required'
p21971
I00
sS'group_name'
p21972
S'Advanced'
p21973
sa(dp21974
S'description'
p21975
g3
sS'cpp_type'
p21976
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p21977
sS'default'
p21978
S'NeumannBC'
p21979
sS'name'
p21980
S'type'
p21981
sS'required'
p21982
I00
sS'group_name'
p21983
Nsa(dp21984
S'description'
p21985
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21986
sS'cpp_type'
p21987
S'bool'
p21988
sS'default'
p21989
S'0'
p21990
sS'name'
p21991
S'use_displaced_mesh'
p21992
sS'required'
p21993
I00
sS'group_name'
p21994
S'Advanced'
p21995
sa(dp21996
S'description'
p21997
S'The value of the gradient on the boundary.\n'
p21998
sS'cpp_type'
p21999
S'double'
p22000
sS'default'
p22001
S'0'
p22002
sS'name'
p22003
S'value'
p22004
sS'required'
p22005
I00
sS'group_name'
p22006
Nsa(dp22007
S'description'
p22008
S'The name of the variable that this boundary condition applies to\n'
p22009
sS'cpp_type'
p22010
S'NonlinearVariableName'
p22011
sS'default'
p22012
g3
sS'name'
p22013
S'variable'
p22014
sS'required'
p22015
I01
sS'group_name'
p22016
NsasS'name'
p22017
S'/BCs/NeumannBC'
p22018
sa(dp22019
S'description'
p22020
g3
sS'subblocks'
p22021
NsS'parameters'
p22022
(lp22023
(dp22024
S'description'
p22025
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22026
sS'cpp_type'
p22027
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22028
sS'default'
p22029
g3
sS'name'
p22030
S'boundary'
p22031
sS'required'
p22032
I01
sS'group_name'
p22033
Nsa(dp22034
S'description'
p22035
S'Component of the Lagrange multiplier\n'
p22036
sS'cpp_type'
p22037
S'unsigned int'
p22038
sS'default'
p22039
g3
sS'name'
p22040
S'component'
p22041
sS'required'
p22042
I01
sS'group_name'
p22043
Nsa(dp22044
S'description'
p22045
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22046
sS'cpp_type'
p22047
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22048
sS'default'
p22049
g3
sS'name'
p22050
S'control_tags'
p22051
sS'required'
p22052
I00
sS'group_name'
p22053
Nsa(dp22054
S'description'
p22055
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22056
sS'cpp_type'
p22057
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22058
sS'default'
p22059
g3
sS'name'
p22060
S'diag_save_in'
p22061
sS'required'
p22062
I00
sS'group_name'
p22063
S'Advanced'
p22064
sa(dp22065
S'description'
p22066
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22067
sS'cpp_type'
p22068
S'bool'
p22069
sS'default'
p22070
S'1'
p22071
sS'name'
p22072
S'implicit'
p22073
sS'required'
p22074
I00
sS'group_name'
p22075
S'Advanced'
p22076
sa(dp22077
S'description'
p22078
S'Lagrange multiplier\n'
p22079
sS'cpp_type'
p22080
S'std::vector<VariableName>'
p22081
sS'default'
p22082
g3
sS'name'
p22083
S'lambda'
p22084
sS'required'
p22085
I01
sS'group_name'
p22086
Nsa(dp22087
S'description'
p22088
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22089
sS'cpp_type'
p22090
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22091
sS'default'
p22092
g3
sS'name'
p22093
S'save_in'
p22094
sS'required'
p22095
I00
sS'group_name'
p22096
S'Advanced'
p22097
sa(dp22098
S'description'
p22099
S'The seed for the master random number generator\n'
p22100
sS'cpp_type'
p22101
S'unsigned int'
p22102
sS'default'
p22103
S'0'
p22104
sS'name'
p22105
S'seed'
p22106
sS'required'
p22107
I00
sS'group_name'
p22108
S'Advanced'
p22109
sa(dp22110
S'description'
p22111
g3
sS'cpp_type'
p22112
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22113
sS'default'
p22114
S'OneDEqualValueConstraintBC'
p22115
sS'name'
p22116
S'type'
p22117
sS'required'
p22118
I00
sS'group_name'
p22119
Nsa(dp22120
S'description'
p22121
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22122
sS'cpp_type'
p22123
S'bool'
p22124
sS'default'
p22125
S'0'
p22126
sS'name'
p22127
S'use_displaced_mesh'
p22128
sS'required'
p22129
I00
sS'group_name'
p22130
S'Advanced'
p22131
sa(dp22132
S'description'
p22133
S'The name of the variable that this boundary condition applies to\n'
p22134
sS'cpp_type'
p22135
S'NonlinearVariableName'
p22136
sS'default'
p22137
g3
sS'name'
p22138
S'variable'
p22139
sS'required'
p22140
I01
sS'group_name'
p22141
Nsa(dp22142
S'description'
p22143
S'Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n'
p22144
sS'cpp_type'
p22145
S'double'
p22146
sS'default'
p22147
g3
sS'name'
p22148
S'vg'
p22149
sS'required'
p22150
I01
sS'group_name'
p22151
NsasS'name'
p22152
S'/BCs/OneDEqualValueConstraintBC'
p22153
sa(dp22154
S'description'
p22155
g3
sS'subblocks'
p22156
NsS'parameters'
p22157
(lp22158
(dp22159
S'description'
p22160
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22161
sS'cpp_type'
p22162
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22163
sS'default'
p22164
g3
sS'name'
p22165
S'boundary'
p22166
sS'required'
p22167
I01
sS'group_name'
p22168
Nsa(dp22169
S'description'
p22170
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22171
sS'cpp_type'
p22172
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22173
sS'default'
p22174
g3
sS'name'
p22175
S'control_tags'
p22176
sS'required'
p22177
I00
sS'group_name'
p22178
Nsa(dp22179
S'description'
p22180
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22181
sS'cpp_type'
p22182
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22183
sS'default'
p22184
g3
sS'name'
p22185
S'diag_save_in'
p22186
sS'required'
p22187
I00
sS'group_name'
p22188
S'Advanced'
p22189
sa(dp22190
S'description'
p22191
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22192
sS'cpp_type'
p22193
S'bool'
p22194
sS'default'
p22195
S'1'
p22196
sS'name'
p22197
S'implicit'
p22198
sS'required'
p22199
I00
sS'group_name'
p22200
S'Advanced'
p22201
sa(dp22202
S'description'
p22203
S'Penalty scalar\n'
p22204
sS'cpp_type'
p22205
S'double'
p22206
sS'default'
p22207
g3
sS'name'
p22208
S'penalty'
p22209
sS'required'
p22210
I01
sS'group_name'
p22211
Nsa(dp22212
S'description'
p22213
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22214
sS'cpp_type'
p22215
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22216
sS'default'
p22217
g3
sS'name'
p22218
S'save_in'
p22219
sS'required'
p22220
I00
sS'group_name'
p22221
S'Advanced'
p22222
sa(dp22223
S'description'
p22224
S'The seed for the master random number generator\n'
p22225
sS'cpp_type'
p22226
S'unsigned int'
p22227
sS'default'
p22228
S'0'
p22229
sS'name'
p22230
S'seed'
p22231
sS'required'
p22232
I00
sS'group_name'
p22233
S'Advanced'
p22234
sa(dp22235
S'description'
p22236
g3
sS'cpp_type'
p22237
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22238
sS'default'
p22239
S'PenaltyDirichletBC'
p22240
sS'name'
p22241
S'type'
p22242
sS'required'
p22243
I00
sS'group_name'
p22244
Nsa(dp22245
S'description'
p22246
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22247
sS'cpp_type'
p22248
S'bool'
p22249
sS'default'
p22250
S'0'
p22251
sS'name'
p22252
S'use_displaced_mesh'
p22253
sS'required'
p22254
I00
sS'group_name'
p22255
S'Advanced'
p22256
sa(dp22257
S'description'
p22258
S'Boundary value of the variable\n'
p22259
sS'cpp_type'
p22260
S'double'
p22261
sS'default'
p22262
S'0'
p22263
sS'name'
p22264
S'value'
p22265
sS'required'
p22266
I00
sS'group_name'
p22267
Nsa(dp22268
S'description'
p22269
S'The name of the variable that this boundary condition applies to\n'
p22270
sS'cpp_type'
p22271
S'NonlinearVariableName'
p22272
sS'default'
p22273
g3
sS'name'
p22274
S'variable'
p22275
sS'required'
p22276
I01
sS'group_name'
p22277
NsasS'name'
p22278
S'/BCs/PenaltyDirichletBC'
p22279
sa(dp22280
S'description'
p22281
g3
sS'subblocks'
p22282
(lp22283
(dp22284
S'description'
p22285
g3
sS'subblocks'
p22286
NsS'parameters'
p22287
(lp22288
(dp22289
S'description'
p22290
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p22291
sS'cpp_type'
p22292
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22293
sS'default'
p22294
g3
sS'name'
p22295
S'auto_direction'
p22296
sS'required'
p22297
I00
sS'group_name'
p22298
Nsa(dp22299
S'description'
p22300
S'Functions that specify the inverse transformation\n'
p22301
sS'cpp_type'
p22302
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22303
sS'default'
p22304
g3
sS'name'
p22305
S'inv_transform_func'
p22306
sS'required'
p22307
I00
sS'group_name'
p22308
Nsa(dp22309
S'description'
p22310
S'Boundary ID associated with the primary boundary.\n'
p22311
sS'cpp_type'
p22312
S'BoundaryName'
p22313
sS'default'
p22314
g3
sS'name'
p22315
S'primary'
p22316
sS'required'
p22317
I00
sS'group_name'
p22318
Nsa(dp22319
S'description'
p22320
S'Boundary ID associated with the secondary boundary.\n'
p22321
sS'cpp_type'
p22322
S'BoundaryName'
p22323
sS'default'
p22324
g3
sS'name'
p22325
S'secondary'
p22326
sS'required'
p22327
I00
sS'group_name'
p22328
Nsa(dp22329
S'description'
p22330
S'Functions that specify the transformation\n'
p22331
sS'cpp_type'
p22332
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22333
sS'default'
p22334
g3
sS'name'
p22335
S'transform_func'
p22336
sS'required'
p22337
I00
sS'group_name'
p22338
Nsa(dp22339
S'description'
p22340
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p22341
sS'cpp_type'
p22342
S'libMesh::VectorValue<double>'
p22343
sS'default'
p22344
g3
sS'name'
p22345
S'translation'
p22346
sS'required'
p22347
I00
sS'group_name'
p22348
Nsa(dp22349
S'description'
p22350
S'Variable for the periodic boundary\n'
p22351
sS'cpp_type'
p22352
S'std::vector<VariableName, std::allocator<VariableName> >'
p22353
sS'default'
p22354
g3
sS'name'
p22355
S'variable'
p22356
sS'required'
p22357
I00
sS'group_name'
p22358
NsasS'name'
p22359
S'/BCs/Periodic/*'
p22360
sasS'parameters'
p22361
NsS'name'
p22362
S'/BCs/Periodic'
p22363
sa(dp22364
S'description'
p22365
g3
sS'subblocks'
p22366
NsS'parameters'
p22367
(lp22368
(dp22369
S'description'
p22370
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22371
sS'cpp_type'
p22372
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22373
sS'default'
p22374
g3
sS'name'
p22375
S'boundary'
p22376
sS'required'
p22377
I01
sS'group_name'
p22378
Nsa(dp22379
S'description'
p22380
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22381
sS'cpp_type'
p22382
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22383
sS'default'
p22384
g3
sS'name'
p22385
S'control_tags'
p22386
sS'required'
p22387
I00
sS'group_name'
p22388
Nsa(dp22389
S'description'
p22390
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22391
sS'cpp_type'
p22392
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22393
sS'default'
p22394
g3
sS'name'
p22395
S'diag_save_in'
p22396
sS'required'
p22397
I00
sS'group_name'
p22398
Nsa(dp22399
S'description'
p22400
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22401
sS'cpp_type'
p22402
S'bool'
p22403
sS'default'
p22404
S'1'
p22405
sS'name'
p22406
S'implicit'
p22407
sS'required'
p22408
I00
sS'group_name'
p22409
S'Advanced'
p22410
sa(dp22411
S'description'
p22412
S'The postprocessor to set the value to on the boundary.\n'
p22413
sS'cpp_type'
p22414
S'PostprocessorName'
p22415
sS'default'
p22416
g3
sS'name'
p22417
S'postprocessor'
p22418
sS'required'
p22419
I01
sS'group_name'
p22420
Nsa(dp22421
S'description'
p22422
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22423
sS'cpp_type'
p22424
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22425
sS'default'
p22426
g3
sS'name'
p22427
S'save_in'
p22428
sS'required'
p22429
I00
sS'group_name'
p22430
Nsa(dp22431
S'description'
p22432
S'The seed for the master random number generator\n'
p22433
sS'cpp_type'
p22434
S'unsigned int'
p22435
sS'default'
p22436
S'0'
p22437
sS'name'
p22438
S'seed'
p22439
sS'required'
p22440
I00
sS'group_name'
p22441
S'Advanced'
p22442
sa(dp22443
S'description'
p22444
g3
sS'cpp_type'
p22445
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22446
sS'default'
p22447
S'PostprocessorDirichletBC'
p22448
sS'name'
p22449
S'type'
p22450
sS'required'
p22451
I00
sS'group_name'
p22452
Nsa(dp22453
S'description'
p22454
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22455
sS'cpp_type'
p22456
S'bool'
p22457
sS'default'
p22458
S'0'
p22459
sS'name'
p22460
S'use_displaced_mesh'
p22461
sS'required'
p22462
I00
sS'group_name'
p22463
S'Advanced'
p22464
sa(dp22465
S'description'
p22466
S'The name of the variable that this boundary condition applies to\n'
p22467
sS'cpp_type'
p22468
S'NonlinearVariableName'
p22469
sS'default'
p22470
g3
sS'name'
p22471
S'variable'
p22472
sS'required'
p22473
I01
sS'group_name'
p22474
NsasS'name'
p22475
S'/BCs/PostprocessorDirichletBC'
p22476
sa(dp22477
S'description'
p22478
g3
sS'subblocks'
p22479
NsS'parameters'
p22480
(lp22481
(dp22482
S'description'
p22483
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22484
sS'cpp_type'
p22485
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22486
sS'default'
p22487
g3
sS'name'
p22488
S'boundary'
p22489
sS'required'
p22490
I01
sS'group_name'
p22491
Nsa(dp22492
S'description'
p22493
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22494
sS'cpp_type'
p22495
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22496
sS'default'
p22497
g3
sS'name'
p22498
S'control_tags'
p22499
sS'required'
p22500
I00
sS'group_name'
p22501
Nsa(dp22502
S'description'
p22503
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22504
sS'cpp_type'
p22505
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22506
sS'default'
p22507
g3
sS'name'
p22508
S'diag_save_in'
p22509
sS'required'
p22510
I00
sS'group_name'
p22511
S'Advanced'
p22512
sa(dp22513
S'description'
p22514
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22515
sS'cpp_type'
p22516
S'bool'
p22517
sS'default'
p22518
S'1'
p22519
sS'name'
p22520
S'implicit'
p22521
sS'required'
p22522
I00
sS'group_name'
p22523
S'Advanced'
p22524
sa(dp22525
S'description'
p22526
S'The postprocessor to use for value of the gradient on the boundary.\n'
p22527
sS'cpp_type'
p22528
S'PostprocessorName'
p22529
sS'default'
p22530
S'0'
p22531
sS'name'
p22532
S'postprocessor'
p22533
sS'required'
p22534
I00
sS'group_name'
p22535
Nsa(dp22536
S'description'
p22537
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22538
sS'cpp_type'
p22539
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22540
sS'default'
p22541
g3
sS'name'
p22542
S'save_in'
p22543
sS'required'
p22544
I00
sS'group_name'
p22545
S'Advanced'
p22546
sa(dp22547
S'description'
p22548
S'The seed for the master random number generator\n'
p22549
sS'cpp_type'
p22550
S'unsigned int'
p22551
sS'default'
p22552
S'0'
p22553
sS'name'
p22554
S'seed'
p22555
sS'required'
p22556
I00
sS'group_name'
p22557
S'Advanced'
p22558
sa(dp22559
S'description'
p22560
g3
sS'cpp_type'
p22561
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22562
sS'default'
p22563
S'PostprocessorNeumannBC'
p22564
sS'name'
p22565
S'type'
p22566
sS'required'
p22567
I00
sS'group_name'
p22568
Nsa(dp22569
S'description'
p22570
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22571
sS'cpp_type'
p22572
S'bool'
p22573
sS'default'
p22574
S'0'
p22575
sS'name'
p22576
S'use_displaced_mesh'
p22577
sS'required'
p22578
I00
sS'group_name'
p22579
S'Advanced'
p22580
sa(dp22581
S'description'
p22582
S'The name of the variable that this boundary condition applies to\n'
p22583
sS'cpp_type'
p22584
S'NonlinearVariableName'
p22585
sS'default'
p22586
g3
sS'name'
p22587
S'variable'
p22588
sS'required'
p22589
I01
sS'group_name'
p22590
NsasS'name'
p22591
S'/BCs/PostprocessorNeumannBC'
p22592
sa(dp22593
S'description'
p22594
g3
sS'subblocks'
p22595
NsS'parameters'
p22596
(lp22597
(dp22598
S'description'
p22599
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22600
sS'cpp_type'
p22601
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22602
sS'default'
p22603
g3
sS'name'
p22604
S'boundary'
p22605
sS'required'
p22606
I01
sS'group_name'
p22607
Nsa(dp22608
S'description'
p22609
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22610
sS'cpp_type'
p22611
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22612
sS'default'
p22613
g3
sS'name'
p22614
S'control_tags'
p22615
sS'required'
p22616
I00
sS'group_name'
p22617
Nsa(dp22618
S'description'
p22619
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22620
sS'cpp_type'
p22621
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22622
sS'default'
p22623
g3
sS'name'
p22624
S'diag_save_in'
p22625
sS'required'
p22626
I00
sS'group_name'
p22627
Nsa(dp22628
S'description'
p22629
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22630
sS'cpp_type'
p22631
S'bool'
p22632
sS'default'
p22633
S'1'
p22634
sS'name'
p22635
S'implicit'
p22636
sS'required'
p22637
I00
sS'group_name'
p22638
S'Advanced'
p22639
sa(dp22640
S'description'
p22641
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22642
sS'cpp_type'
p22643
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22644
sS'default'
p22645
g3
sS'name'
p22646
S'save_in'
p22647
sS'required'
p22648
I00
sS'group_name'
p22649
Nsa(dp22650
S'description'
p22651
S'The seed for the master random number generator\n'
p22652
sS'cpp_type'
p22653
S'unsigned int'
p22654
sS'default'
p22655
S'0'
p22656
sS'name'
p22657
S'seed'
p22658
sS'required'
p22659
I00
sS'group_name'
p22660
S'Advanced'
p22661
sa(dp22662
S'description'
p22663
g3
sS'cpp_type'
p22664
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22665
sS'default'
p22666
S'PresetBC'
p22667
sS'name'
p22668
S'type'
p22669
sS'required'
p22670
I00
sS'group_name'
p22671
Nsa(dp22672
S'description'
p22673
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22674
sS'cpp_type'
p22675
S'bool'
p22676
sS'default'
p22677
S'0'
p22678
sS'name'
p22679
S'use_displaced_mesh'
p22680
sS'required'
p22681
I00
sS'group_name'
p22682
S'Advanced'
p22683
sa(dp22684
S'description'
p22685
S'Value of the BC\n'
p22686
sS'cpp_type'
p22687
S'double'
p22688
sS'default'
p22689
g3
sS'name'
p22690
S'value'
p22691
sS'required'
p22692
I01
sS'group_name'
p22693
Nsa(dp22694
S'description'
p22695
S'The name of the variable that this boundary condition applies to\n'
p22696
sS'cpp_type'
p22697
S'NonlinearVariableName'
p22698
sS'default'
p22699
g3
sS'name'
p22700
S'variable'
p22701
sS'required'
p22702
I01
sS'group_name'
p22703
NsasS'name'
p22704
S'/BCs/PresetBC'
p22705
sa(dp22706
S'description'
p22707
g3
sS'subblocks'
p22708
NsS'parameters'
p22709
(lp22710
(dp22711
S'description'
p22712
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22713
sS'cpp_type'
p22714
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22715
sS'default'
p22716
g3
sS'name'
p22717
S'boundary'
p22718
sS'required'
p22719
I01
sS'group_name'
p22720
Nsa(dp22721
S'description'
p22722
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22723
sS'cpp_type'
p22724
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22725
sS'default'
p22726
g3
sS'name'
p22727
S'control_tags'
p22728
sS'required'
p22729
I00
sS'group_name'
p22730
Nsa(dp22731
S'description'
p22732
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22733
sS'cpp_type'
p22734
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22735
sS'default'
p22736
g3
sS'name'
p22737
S'diag_save_in'
p22738
sS'required'
p22739
I00
sS'group_name'
p22740
Nsa(dp22741
S'description'
p22742
S'Function describing the velocity.\n'
p22743
sS'cpp_type'
p22744
S'FunctionName'
p22745
sS'default'
p22746
g3
sS'name'
p22747
S'function'
p22748
sS'required'
p22749
I00
sS'group_name'
p22750
Nsa(dp22751
S'description'
p22752
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22753
sS'cpp_type'
p22754
S'bool'
p22755
sS'default'
p22756
S'1'
p22757
sS'name'
p22758
S'implicit'
p22759
sS'required'
p22760
I00
sS'group_name'
p22761
S'Advanced'
p22762
sa(dp22763
S'description'
p22764
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22765
sS'cpp_type'
p22766
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22767
sS'default'
p22768
g3
sS'name'
p22769
S'save_in'
p22770
sS'required'
p22771
I00
sS'group_name'
p22772
Nsa(dp22773
S'description'
p22774
S'The seed for the master random number generator\n'
p22775
sS'cpp_type'
p22776
S'unsigned int'
p22777
sS'default'
p22778
S'0'
p22779
sS'name'
p22780
S'seed'
p22781
sS'required'
p22782
I00
sS'group_name'
p22783
S'Advanced'
p22784
sa(dp22785
S'description'
p22786
g3
sS'cpp_type'
p22787
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p22788
sS'default'
p22789
S'PresetVelocity'
p22790
sS'name'
p22791
S'type'
p22792
sS'required'
p22793
I00
sS'group_name'
p22794
Nsa(dp22795
S'description'
p22796
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22797
sS'cpp_type'
p22798
S'bool'
p22799
sS'default'
p22800
S'0'
p22801
sS'name'
p22802
S'use_displaced_mesh'
p22803
sS'required'
p22804
I00
sS'group_name'
p22805
S'Advanced'
p22806
sa(dp22807
S'description'
p22808
S'The name of the variable that this boundary condition applies to\n'
p22809
sS'cpp_type'
p22810
S'NonlinearVariableName'
p22811
sS'default'
p22812
g3
sS'name'
p22813
S'variable'
p22814
sS'required'
p22815
I01
sS'group_name'
p22816
Nsa(dp22817
S'description'
p22818
S'Value of the velocity.  Used as scale factor if function is given.\n'
p22819
sS'cpp_type'
p22820
S'double'
p22821
sS'default'
p22822
S'1'
p22823
sS'name'
p22824
S'velocity'
p22825
sS'required'
p22826
I00
sS'group_name'
p22827
NsasS'name'
p22828
S'/BCs/PresetVelocity'
p22829
sa(dp22830
S'description'
p22831
S'Applies a pressure on a given boundary in a given direction\n'
p22832
sS'subblocks'
p22833
(lp22834
(dp22835
S'description'
p22836
g3
sS'subblocks'
p22837
NsS'parameters'
p22838
(lp22839
(dp22840
S'description'
p22841
S'alpha parameter for HHT time integration\n'
p22842
sS'cpp_type'
p22843
S'double'
p22844
sS'default'
p22845
S'0'
p22846
sS'name'
p22847
S'alpha'
p22848
sS'required'
p22849
I00
sS'group_name'
p22850
Nsa(dp22851
S'description'
p22852
S'The list of boundary IDs from the mesh where the pressure will be applied\n'
p22853
sS'cpp_type'
p22854
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22855
sS'default'
p22856
g3
sS'name'
p22857
S'boundary'
p22858
sS'required'
p22859
I01
sS'group_name'
p22860
Nsa(dp22861
S'description'
p22862
S'The x displacement\n'
p22863
sS'cpp_type'
p22864
S'NonlinearVariableName'
p22865
sS'default'
p22866
g3
sS'name'
p22867
S'disp_x'
p22868
sS'required'
p22869
I01
sS'group_name'
p22870
Nsa(dp22871
S'description'
p22872
S'The y displacement\n'
p22873
sS'cpp_type'
p22874
S'NonlinearVariableName'
p22875
sS'default'
p22876
g3
sS'name'
p22877
S'disp_y'
p22878
sS'required'
p22879
I00
sS'group_name'
p22880
Nsa(dp22881
S'description'
p22882
S'The z displacement\n'
p22883
sS'cpp_type'
p22884
S'NonlinearVariableName'
p22885
sS'default'
p22886
g3
sS'name'
p22887
S'disp_z'
p22888
sS'required'
p22889
I00
sS'group_name'
p22890
Nsa(dp22891
S'description'
p22892
S'The factor to use in computing the pressure\n'
p22893
sS'cpp_type'
p22894
S'double'
p22895
sS'default'
p22896
S'1'
p22897
sS'name'
p22898
S'factor'
p22899
sS'required'
p22900
I00
sS'group_name'
p22901
Nsa(dp22902
S'description'
p22903
S'The function that describes the pressure\n'
p22904
sS'cpp_type'
p22905
S'FunctionName'
p22906
sS'default'
p22907
g3
sS'name'
p22908
S'function'
p22909
sS'required'
p22910
I00
sS'group_name'
p22911
Nsa(dp22912
S'description'
p22913
S'The postprocessor that describes the pressure\n'
p22914
sS'cpp_type'
p22915
S'PostprocessorName'
p22916
sS'default'
p22917
g3
sS'name'
p22918
S'postprocessor'
p22919
sS'required'
p22920
I00
sS'group_name'
p22921
Nsa(dp22922
S'description'
p22923
S'The save_in variables for x displacement\n'
p22924
sS'cpp_type'
p22925
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22926
sS'default'
p22927
g3
sS'name'
p22928
S'save_in_disp_x'
p22929
sS'required'
p22930
I00
sS'group_name'
p22931
Nsa(dp22932
S'description'
p22933
S'The save_in variables for y displacement\n'
p22934
sS'cpp_type'
p22935
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22936
sS'default'
p22937
g3
sS'name'
p22938
S'save_in_disp_y'
p22939
sS'required'
p22940
I00
sS'group_name'
p22941
Nsa(dp22942
S'description'
p22943
S'The save_in variables for z displacement\n'
p22944
sS'cpp_type'
p22945
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p22946
sS'default'
p22947
g3
sS'name'
p22948
S'save_in_disp_z'
p22949
sS'required'
p22950
I00
sS'group_name'
p22951
NsasS'name'
p22952
S'/BCs/Pressure/*'
p22953
sasS'parameters'
p22954
(lp22955
(dp22956
S'description'
p22957
S'alpha parameter required for HHT time integration scheme\n'
p22958
sS'cpp_type'
p22959
S'double'
p22960
sS'default'
p22961
S'0'
p22962
sS'name'
p22963
S'alpha'
p22964
sS'required'
p22965
I00
sS'group_name'
p22966
Nsa(dp22967
S'description'
p22968
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22969
sS'cpp_type'
p22970
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22971
sS'default'
p22972
g3
sS'name'
p22973
S'boundary'
p22974
sS'required'
p22975
I01
sS'group_name'
p22976
Nsa(dp22977
S'description'
p22978
S'The component for the pressure\n'
p22979
sS'cpp_type'
p22980
S'unsigned int'
p22981
sS'default'
p22982
g3
sS'name'
p22983
S'component'
p22984
sS'required'
p22985
I01
sS'group_name'
p22986
Nsa(dp22987
S'description'
p22988
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22989
sS'cpp_type'
p22990
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p22991
sS'default'
p22992
g3
sS'name'
p22993
S'control_tags'
p22994
sS'required'
p22995
I00
sS'group_name'
p22996
Nsa(dp22997
S'description'
p22998
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22999
sS'cpp_type'
p23000
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23001
sS'default'
p23002
g3
sS'name'
p23003
S'diag_save_in'
p23004
sS'required'
p23005
I00
sS'group_name'
p23006
S'Advanced'
p23007
sa(dp23008
S'description'
p23009
S'The magnitude to use in computing the pressure\n'
p23010
sS'cpp_type'
p23011
S'double'
p23012
sS'default'
p23013
S'1'
p23014
sS'name'
p23015
S'factor'
p23016
sS'required'
p23017
I00
sS'group_name'
p23018
Nsa(dp23019
S'description'
p23020
S'The function that describes the pressure\n'
p23021
sS'cpp_type'
p23022
S'FunctionName'
p23023
sS'default'
p23024
g3
sS'name'
p23025
S'function'
p23026
sS'required'
p23027
I00
sS'group_name'
p23028
Nsa(dp23029
S'description'
p23030
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23031
sS'cpp_type'
p23032
S'bool'
p23033
sS'default'
p23034
S'1'
p23035
sS'name'
p23036
S'implicit'
p23037
sS'required'
p23038
I00
sS'group_name'
p23039
S'Advanced'
p23040
sa(dp23041
S'description'
p23042
S'Postprocessor that will supply the pressure value\n'
p23043
sS'cpp_type'
p23044
S'PostprocessorName'
p23045
sS'default'
p23046
g3
sS'name'
p23047
S'postprocessor'
p23048
sS'required'
p23049
I00
sS'group_name'
p23050
Nsa(dp23051
S'description'
p23052
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23053
sS'cpp_type'
p23054
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23055
sS'default'
p23056
g3
sS'name'
p23057
S'save_in'
p23058
sS'required'
p23059
I00
sS'group_name'
p23060
S'Advanced'
p23061
sa(dp23062
S'description'
p23063
S'The seed for the master random number generator\n'
p23064
sS'cpp_type'
p23065
S'unsigned int'
p23066
sS'default'
p23067
S'0'
p23068
sS'name'
p23069
S'seed'
p23070
sS'required'
p23071
I00
sS'group_name'
p23072
S'Advanced'
p23073
sa(dp23074
S'description'
p23075
g3
sS'cpp_type'
p23076
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23077
sS'default'
p23078
S'Pressure'
p23079
sS'name'
p23080
S'type'
p23081
sS'required'
p23082
I00
sS'group_name'
p23083
Nsa(dp23084
S'description'
p23085
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23086
sS'cpp_type'
p23087
S'bool'
p23088
sS'default'
p23089
S'1'
p23090
sS'name'
p23091
S'use_displaced_mesh'
p23092
sS'required'
p23093
I00
sS'group_name'
p23094
S'Advanced'
p23095
sa(dp23096
S'description'
p23097
S'The name of the variable that this boundary condition applies to\n'
p23098
sS'cpp_type'
p23099
S'NonlinearVariableName'
p23100
sS'default'
p23101
g3
sS'name'
p23102
S'variable'
p23103
sS'required'
p23104
I01
sS'group_name'
p23105
NsasS'name'
p23106
S'/BCs/Pressure'
p23107
sa(dp23108
S'description'
p23109
S'Allows the user to set variable values at the face of an excavation.  You must have defined the excavation start time, start position, etc, through the excav_geom_function\n'
p23110
sS'subblocks'
p23111
NsS'parameters'
p23112
(lp23113
(dp23114
S'description'
p23115
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23116
sS'cpp_type'
p23117
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23118
sS'default'
p23119
g3
sS'name'
p23120
S'boundary'
p23121
sS'required'
p23122
I01
sS'group_name'
p23123
Nsa(dp23124
S'description'
p23125
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23126
sS'cpp_type'
p23127
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23128
sS'default'
p23129
g3
sS'name'
p23130
S'control_tags'
p23131
sS'required'
p23132
I00
sS'group_name'
p23133
Nsa(dp23134
S'description'
p23135
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23136
sS'cpp_type'
p23137
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23138
sS'default'
p23139
g3
sS'name'
p23140
S'diag_save_in'
p23141
sS'required'
p23142
I00
sS'group_name'
p23143
Nsa(dp23144
S'description'
p23145
S'The function describing the excavation geometry (type RichardsExcavGeom)\n'
p23146
sS'cpp_type'
p23147
S'FunctionName'
p23148
sS'default'
p23149
g3
sS'name'
p23150
S'excav_geom_function'
p23151
sS'required'
p23152
I01
sS'group_name'
p23153
Nsa(dp23154
S'description'
p23155
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23156
sS'cpp_type'
p23157
S'bool'
p23158
sS'default'
p23159
S'1'
p23160
sS'name'
p23161
S'implicit'
p23162
sS'required'
p23163
I00
sS'group_name'
p23164
S'Advanced'
p23165
sa(dp23166
S'description'
p23167
S'Value of the variable at the surface of the excavation.  Eg atmospheric pressure\n'
p23168
sS'cpp_type'
p23169
S'double'
p23170
sS'default'
p23171
g3
sS'name'
p23172
S'p_excav'
p23173
sS'required'
p23174
I01
sS'group_name'
p23175
Nsa(dp23176
S'description'
p23177
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23178
sS'cpp_type'
p23179
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23180
sS'default'
p23181
g3
sS'name'
p23182
S'save_in'
p23183
sS'required'
p23184
I00
sS'group_name'
p23185
Nsa(dp23186
S'description'
p23187
S'The seed for the master random number generator\n'
p23188
sS'cpp_type'
p23189
S'unsigned int'
p23190
sS'default'
p23191
S'0'
p23192
sS'name'
p23193
S'seed'
p23194
sS'required'
p23195
I00
sS'group_name'
p23196
S'Advanced'
p23197
sa(dp23198
S'description'
p23199
g3
sS'cpp_type'
p23200
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23201
sS'default'
p23202
S'RichardsExcav'
p23203
sS'name'
p23204
S'type'
p23205
sS'required'
p23206
I00
sS'group_name'
p23207
Nsa(dp23208
S'description'
p23209
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23210
sS'cpp_type'
p23211
S'bool'
p23212
sS'default'
p23213
S'0'
p23214
sS'name'
p23215
S'use_displaced_mesh'
p23216
sS'required'
p23217
I00
sS'group_name'
p23218
S'Advanced'
p23219
sa(dp23220
S'description'
p23221
S'The name of the variable that this boundary condition applies to\n'
p23222
sS'cpp_type'
p23223
S'NonlinearVariableName'
p23224
sS'default'
p23225
g3
sS'name'
p23226
S'variable'
p23227
sS'required'
p23228
I01
sS'group_name'
p23229
NsasS'name'
p23230
S'/BCs/RichardsExcav'
p23231
sa(dp23232
S'description'
p23233
g3
sS'subblocks'
p23234
NsS'parameters'
p23235
(lp23236
(dp23237
S'description'
p23238
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23239
sS'cpp_type'
p23240
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23241
sS'default'
p23242
g3
sS'name'
p23243
S'boundary'
p23244
sS'required'
p23245
I01
sS'group_name'
p23246
Nsa(dp23247
S'description'
p23248
S'Centre of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n'
p23249
sS'cpp_type'
p23250
S'double'
p23251
sS'default'
p23252
g3
sS'name'
p23253
S'centre'
p23254
sS'required'
p23255
I01
sS'group_name'
p23256
Nsa(dp23257
S'description'
p23258
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23259
sS'cpp_type'
p23260
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23261
sS'default'
p23262
g3
sS'name'
p23263
S'control_tags'
p23264
sS'required'
p23265
I00
sS'group_name'
p23266
Nsa(dp23267
S'description'
p23268
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23269
sS'cpp_type'
p23270
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23271
sS'default'
p23272
g3
sS'name'
p23273
S'diag_save_in'
p23274
sS'required'
p23275
I00
sS'group_name'
p23276
S'Advanced'
p23277
sa(dp23278
S'description'
p23279
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23280
sS'cpp_type'
p23281
S'bool'
p23282
sS'default'
p23283
S'1'
p23284
sS'name'
p23285
S'implicit'
p23286
sS'required'
p23287
I00
sS'group_name'
p23288
S'Advanced'
p23289
sa(dp23290
S'description'
p23291
S'Maximum of the flux (measured in kg.m^-2.s^-1).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.  Note, to make this a source rather than a sink, let max<0\n'
p23292
sS'cpp_type'
p23293
S'double'
p23294
sS'default'
p23295
g3
sS'name'
p23296
S'max'
p23297
sS'required'
p23298
I01
sS'group_name'
p23299
Nsa(dp23300
S'description'
p23301
S'If this function is provided, the flux will be multiplied by this function.  This is useful for spatially or temporally varying sinks\n'
p23302
sS'cpp_type'
p23303
S'FunctionName'
p23304
sS'default'
p23305
S'1'
p23306
sS'name'
p23307
S'multiplying_fcn'
p23308
sS'required'
p23309
I00
sS'group_name'
p23310
Nsa(dp23311
S'description'
p23312
S'The UserObject that holds the list of Richards variable names.\n'
p23313
sS'cpp_type'
p23314
S'UserObjectName'
p23315
sS'default'
p23316
g3
sS'name'
p23317
S'richardsVarNames_UO'
p23318
sS'required'
p23319
I01
sS'group_name'
p23320
Nsa(dp23321
S'description'
p23322
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23323
sS'cpp_type'
p23324
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23325
sS'default'
p23326
g3
sS'name'
p23327
S'save_in'
p23328
sS'required'
p23329
I00
sS'group_name'
p23330
S'Advanced'
p23331
sa(dp23332
S'description'
p23333
S'Standard deviation of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n'
p23334
sS'cpp_type'
p23335
S'double'
p23336
sS'default'
p23337
g3
sS'name'
p23338
S'sd'
p23339
sS'required'
p23340
I01
sS'group_name'
p23341
Nsa(dp23342
S'description'
p23343
S'The seed for the master random number generator\n'
p23344
sS'cpp_type'
p23345
S'unsigned int'
p23346
sS'default'
p23347
S'0'
p23348
sS'name'
p23349
S'seed'
p23350
sS'required'
p23351
I00
sS'group_name'
p23352
S'Advanced'
p23353
sa(dp23354
S'description'
p23355
g3
sS'cpp_type'
p23356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23357
sS'default'
p23358
S'RichardsHalfGaussianSink'
p23359
sS'name'
p23360
S'type'
p23361
sS'required'
p23362
I00
sS'group_name'
p23363
Nsa(dp23364
S'description'
p23365
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23366
sS'cpp_type'
p23367
S'bool'
p23368
sS'default'
p23369
S'0'
p23370
sS'name'
p23371
S'use_displaced_mesh'
p23372
sS'required'
p23373
I00
sS'group_name'
p23374
S'Advanced'
p23375
sa(dp23376
S'description'
p23377
S'The name of the variable that this boundary condition applies to\n'
p23378
sS'cpp_type'
p23379
S'NonlinearVariableName'
p23380
sS'default'
p23381
g3
sS'name'
p23382
S'variable'
p23383
sS'required'
p23384
I01
sS'group_name'
p23385
NsasS'name'
p23386
S'/BCs/RichardsHalfGaussianSink'
p23387
sa(dp23388
S'description'
p23389
g3
sS'subblocks'
p23390
NsS'parameters'
p23391
(lp23392
(dp23393
S'description'
p23394
S'An area postprocessor.  If given, the bare_fluxes will be divided by this quantity.  This means the bare fluxes are measured in kg.s^-1.  This is useful for the case when you wish to provide the *total* flux, and let MOOSE proportion it uniformly across the boundary.  In that case you would have use_mobility=false=use_relperm, and only one bare flux should be specified\n'
p23395
sS'cpp_type'
p23396
S'PostprocessorName'
p23397
sS'default'
p23398
S'1'
p23399
sS'name'
p23400
S'area_pp'
p23401
sS'required'
p23402
I00
sS'group_name'
p23403
Nsa(dp23404
S'description'
p23405
S'Tuple of flux values (measured in kg.m^-2.s^-1 for use_mobility=false, and in Pa.s^-1 if use_mobility=true).  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.  A piecewise-linear fit is performed to the (pressure,bare_fluxes) pairs to obtain the flux at any arbitrary pressure, and the first or last bare_flux values are used if the quad-point pressure falls outside this range.\n'
p23406
sS'cpp_type'
p23407
S'std::vector<double, std::allocator<double> >'
p23408
sS'default'
p23409
g3
sS'name'
p23410
S'bare_fluxes'
p23411
sS'required'
p23412
I01
sS'group_name'
p23413
Nsa(dp23414
S'description'
p23415
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23416
sS'cpp_type'
p23417
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23418
sS'default'
p23419
g3
sS'name'
p23420
S'boundary'
p23421
sS'required'
p23422
I01
sS'group_name'
p23423
Nsa(dp23424
S'description'
p23425
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23426
sS'cpp_type'
p23427
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23428
sS'default'
p23429
g3
sS'name'
p23430
S'control_tags'
p23431
sS'required'
p23432
I00
sS'group_name'
p23433
Nsa(dp23434
S'description'
p23435
S'List of names of user objects that define the fluid density.  Only needed if fully_upwind is used\n'
p23436
sS'cpp_type'
p23437
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p23438
sS'default'
p23439
g3
sS'name'
p23440
S'density_UO'
p23441
sS'required'
p23442
I00
sS'group_name'
p23443
Nsa(dp23444
S'description'
p23445
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23446
sS'cpp_type'
p23447
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23448
sS'default'
p23449
g3
sS'name'
p23450
S'diag_save_in'
p23451
sS'required'
p23452
I00
sS'group_name'
p23453
S'Advanced'
p23454
sa(dp23455
S'description'
p23456
S'Use full upwinding\n'
p23457
sS'cpp_type'
p23458
S'bool'
p23459
sS'default'
p23460
S'0'
p23461
sS'name'
p23462
S'fully_upwind'
p23463
sS'required'
p23464
I00
sS'group_name'
p23465
Nsa(dp23466
S'description'
p23467
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23468
sS'cpp_type'
p23469
S'bool'
p23470
sS'default'
p23471
S'1'
p23472
sS'name'
p23473
S'implicit'
p23474
sS'required'
p23475
I00
sS'group_name'
p23476
S'Advanced'
p23477
sa(dp23478
S'description'
p23479
S'If this function is provided, the flux will be multiplied by this function.  This is useful for spatially or temporally varying sinks\n'
p23480
sS'cpp_type'
p23481
S'FunctionName'
p23482
sS'default'
p23483
S'1'
p23484
sS'name'
p23485
S'multiplying_fcn'
p23486
sS'required'
p23487
I00
sS'group_name'
p23488
Nsa(dp23489
S'description'
p23490
S'Tuple of pressure values.  Must be monotonically increasing.\n'
p23491
sS'cpp_type'
p23492
S'std::vector<double, std::allocator<double> >'
p23493
sS'default'
p23494
g3
sS'name'
p23495
S'pressures'
p23496
sS'required'
p23497
I01
sS'group_name'
p23498
Nsa(dp23499
S'description'
p23500
S'List of names of user objects that define relative permeability.  Only needed if fully_upwind is used\n'
p23501
sS'cpp_type'
p23502
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p23503
sS'default'
p23504
g3
sS'name'
p23505
S'relperm_UO'
p23506
sS'required'
p23507
I00
sS'group_name'
p23508
Nsa(dp23509
S'description'
p23510
S'The UserObject that holds the list of Richards variable names.\n'
p23511
sS'cpp_type'
p23512
S'UserObjectName'
p23513
sS'default'
p23514
g3
sS'name'
p23515
S'richardsVarNames_UO'
p23516
sS'required'
p23517
I01
sS'group_name'
p23518
Nsa(dp23519
S'description'
p23520
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23521
sS'cpp_type'
p23522
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23523
sS'default'
p23524
g3
sS'name'
p23525
S'save_in'
p23526
sS'required'
p23527
I00
sS'group_name'
p23528
S'Advanced'
p23529
sa(dp23530
S'description'
p23531
S'The seed for the master random number generator\n'
p23532
sS'cpp_type'
p23533
S'unsigned int'
p23534
sS'default'
p23535
S'0'
p23536
sS'name'
p23537
S'seed'
p23538
sS'required'
p23539
I00
sS'group_name'
p23540
S'Advanced'
p23541
sa(dp23542
S'description'
p23543
S'List of name of user objects that define effective saturation as a function of pressure list.  Only needed if fully_upwind is used\n'
p23544
sS'cpp_type'
p23545
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p23546
sS'default'
p23547
g3
sS'name'
p23548
S'seff_UO'
p23549
sS'required'
p23550
I00
sS'group_name'
p23551
Nsa(dp23552
S'description'
p23553
g3
sS'cpp_type'
p23554
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23555
sS'default'
p23556
S'RichardsPiecewiseLinearSink'
p23557
sS'name'
p23558
S'type'
p23559
sS'required'
p23560
I00
sS'group_name'
p23561
Nsa(dp23562
S'description'
p23563
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23564
sS'cpp_type'
p23565
S'bool'
p23566
sS'default'
p23567
S'0'
p23568
sS'name'
p23569
S'use_displaced_mesh'
p23570
sS'required'
p23571
I00
sS'group_name'
p23572
S'Advanced'
p23573
sa(dp23574
S'description'
p23575
S"If true, then fluxes are multiplied by (density*permeability_nn/viscosity), where the '_nn' indicates the component normal to the boundary.  In this case bare_flux is measured in Pa.s^-1.  This can be used in conjunction with use_relperm.\n"
p23576
sS'cpp_type'
p23577
S'bool'
p23578
sS'default'
p23579
g3
sS'name'
p23580
S'use_mobility'
p23581
sS'required'
p23582
I01
sS'group_name'
p23583
Nsa(dp23584
S'description'
p23585
S'If true, then fluxes are multiplied by relative permeability.  This can be used in conjunction with use_mobility\n'
p23586
sS'cpp_type'
p23587
S'bool'
p23588
sS'default'
p23589
g3
sS'name'
p23590
S'use_relperm'
p23591
sS'required'
p23592
I01
sS'group_name'
p23593
Nsa(dp23594
S'description'
p23595
S'The name of the variable that this boundary condition applies to\n'
p23596
sS'cpp_type'
p23597
S'NonlinearVariableName'
p23598
sS'default'
p23599
g3
sS'name'
p23600
S'variable'
p23601
sS'required'
p23602
I01
sS'group_name'
p23603
NsasS'name'
p23604
S'/BCs/RichardsPiecewiseLinearSink'
p23605
sa(dp23606
S'description'
p23607
g3
sS'subblocks'
p23608
NsS'parameters'
p23609
(lp23610
(dp23611
S'description'
p23612
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23613
sS'cpp_type'
p23614
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23615
sS'default'
p23616
g3
sS'name'
p23617
S'boundary'
p23618
sS'required'
p23619
I01
sS'group_name'
p23620
Nsa(dp23621
S'description'
p23622
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23623
sS'cpp_type'
p23624
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23625
sS'default'
p23626
g3
sS'name'
p23627
S'control_tags'
p23628
sS'required'
p23629
I00
sS'group_name'
p23630
Nsa(dp23631
S'description'
p23632
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23633
sS'cpp_type'
p23634
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23635
sS'default'
p23636
g3
sS'name'
p23637
S'diag_save_in'
p23638
sS'required'
p23639
I00
sS'group_name'
p23640
S'Advanced'
p23641
sa(dp23642
S'description'
p23643
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23644
sS'cpp_type'
p23645
S'bool'
p23646
sS'default'
p23647
S'1'
p23648
sS'name'
p23649
S'implicit'
p23650
sS'required'
p23651
I00
sS'group_name'
p23652
S'Advanced'
p23653
sa(dp23654
S'description'
p23655
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23656
sS'cpp_type'
p23657
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23658
sS'default'
p23659
g3
sS'name'
p23660
S'save_in'
p23661
sS'required'
p23662
I00
sS'group_name'
p23663
S'Advanced'
p23664
sa(dp23665
S'description'
p23666
S'The seed for the master random number generator\n'
p23667
sS'cpp_type'
p23668
S'unsigned int'
p23669
sS'default'
p23670
S'0'
p23671
sS'name'
p23672
S'seed'
p23673
sS'required'
p23674
I00
sS'group_name'
p23675
S'Advanced'
p23676
sa(dp23677
S'description'
p23678
g3
sS'cpp_type'
p23679
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23680
sS'default'
p23681
S'RobinBC'
p23682
sS'name'
p23683
S'type'
p23684
sS'required'
p23685
I00
sS'group_name'
p23686
Nsa(dp23687
S'description'
p23688
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23689
sS'cpp_type'
p23690
S'bool'
p23691
sS'default'
p23692
S'0'
p23693
sS'name'
p23694
S'use_displaced_mesh'
p23695
sS'required'
p23696
I00
sS'group_name'
p23697
S'Advanced'
p23698
sa(dp23699
S'description'
p23700
S'The value of the gradient on the boundary.\n'
p23701
sS'cpp_type'
p23702
S'double'
p23703
sS'default'
p23704
S'0'
p23705
sS'name'
p23706
S'value'
p23707
sS'required'
p23708
I00
sS'group_name'
p23709
Nsa(dp23710
S'description'
p23711
S'The name of the variable that this boundary condition applies to\n'
p23712
sS'cpp_type'
p23713
S'NonlinearVariableName'
p23714
sS'default'
p23715
g3
sS'name'
p23716
S'variable'
p23717
sS'required'
p23718
I01
sS'group_name'
p23719
NsasS'name'
p23720
S'/BCs/RobinBC'
p23721
sa(dp23722
S'description'
p23723
g3
sS'subblocks'
p23724
NsS'parameters'
p23725
(lp23726
(dp23727
S'description'
p23728
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23729
sS'cpp_type'
p23730
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23731
sS'default'
p23732
g3
sS'name'
p23733
S'boundary'
p23734
sS'required'
p23735
I01
sS'group_name'
p23736
Nsa(dp23737
S'description'
p23738
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23739
sS'cpp_type'
p23740
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23741
sS'default'
p23742
g3
sS'name'
p23743
S'control_tags'
p23744
sS'required'
p23745
I00
sS'group_name'
p23746
Nsa(dp23747
S'description'
p23748
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23749
sS'cpp_type'
p23750
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23751
sS'default'
p23752
g3
sS'name'
p23753
S'diag_save_in'
p23754
sS'required'
p23755
I00
sS'group_name'
p23756
Nsa(dp23757
S'description'
p23758
g3
sS'cpp_type'
p23759
S'double'
p23760
sS'default'
p23761
S'0'
p23762
sS'name'
p23763
S'duration'
p23764
sS'required'
p23765
I00
sS'group_name'
p23766
Nsa(dp23767
S'description'
p23768
g3
sS'cpp_type'
p23769
S'double'
p23770
sS'default'
p23771
S'0'
p23772
sS'name'
p23773
S'final'
p23774
sS'required'
p23775
I00
sS'group_name'
p23776
Nsa(dp23777
S'description'
p23778
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23779
sS'cpp_type'
p23780
S'bool'
p23781
sS'default'
p23782
S'1'
p23783
sS'name'
p23784
S'implicit'
p23785
sS'required'
p23786
I00
sS'group_name'
p23787
S'Advanced'
p23788
sa(dp23789
S'description'
p23790
g3
sS'cpp_type'
p23791
S'double'
p23792
sS'default'
p23793
S'0'
p23794
sS'name'
p23795
S'initial'
p23796
sS'required'
p23797
I00
sS'group_name'
p23798
Nsa(dp23799
S'description'
p23800
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23801
sS'cpp_type'
p23802
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23803
sS'default'
p23804
g3
sS'name'
p23805
S'save_in'
p23806
sS'required'
p23807
I00
sS'group_name'
p23808
Nsa(dp23809
S'description'
p23810
S'The seed for the master random number generator\n'
p23811
sS'cpp_type'
p23812
S'unsigned int'
p23813
sS'default'
p23814
S'0'
p23815
sS'name'
p23816
S'seed'
p23817
sS'required'
p23818
I00
sS'group_name'
p23819
S'Advanced'
p23820
sa(dp23821
S'description'
p23822
g3
sS'cpp_type'
p23823
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23824
sS'default'
p23825
S'SinDirichletBC'
p23826
sS'name'
p23827
S'type'
p23828
sS'required'
p23829
I00
sS'group_name'
p23830
Nsa(dp23831
S'description'
p23832
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23833
sS'cpp_type'
p23834
S'bool'
p23835
sS'default'
p23836
S'0'
p23837
sS'name'
p23838
S'use_displaced_mesh'
p23839
sS'required'
p23840
I00
sS'group_name'
p23841
S'Advanced'
p23842
sa(dp23843
S'description'
p23844
S'The name of the variable that this boundary condition applies to\n'
p23845
sS'cpp_type'
p23846
S'NonlinearVariableName'
p23847
sS'default'
p23848
g3
sS'name'
p23849
S'variable'
p23850
sS'required'
p23851
I01
sS'group_name'
p23852
NsasS'name'
p23853
S'/BCs/SinDirichletBC'
p23854
sa(dp23855
S'description'
p23856
g3
sS'subblocks'
p23857
NsS'parameters'
p23858
(lp23859
(dp23860
S'description'
p23861
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23862
sS'cpp_type'
p23863
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p23864
sS'default'
p23865
g3
sS'name'
p23866
S'boundary'
p23867
sS'required'
p23868
I01
sS'group_name'
p23869
Nsa(dp23870
S'description'
p23871
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23872
sS'cpp_type'
p23873
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p23874
sS'default'
p23875
g3
sS'name'
p23876
S'control_tags'
p23877
sS'required'
p23878
I00
sS'group_name'
p23879
Nsa(dp23880
S'description'
p23881
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23882
sS'cpp_type'
p23883
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23884
sS'default'
p23885
g3
sS'name'
p23886
S'diag_save_in'
p23887
sS'required'
p23888
I00
sS'group_name'
p23889
S'Advanced'
p23890
sa(dp23891
S'description'
p23892
S'The duration of the ramp\n'
p23893
sS'cpp_type'
p23894
S'double'
p23895
sS'default'
p23896
S'0'
p23897
sS'name'
p23898
S'duration'
p23899
sS'required'
p23900
I00
sS'group_name'
p23901
Nsa(dp23902
S'description'
p23903
S'The final value of the gradient on the boundary\n'
p23904
sS'cpp_type'
p23905
S'double'
p23906
sS'default'
p23907
S'0'
p23908
sS'name'
p23909
S'final'
p23910
sS'required'
p23911
I00
sS'group_name'
p23912
Nsa(dp23913
S'description'
p23914
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23915
sS'cpp_type'
p23916
S'bool'
p23917
sS'default'
p23918
S'1'
p23919
sS'name'
p23920
S'implicit'
p23921
sS'required'
p23922
I00
sS'group_name'
p23923
S'Advanced'
p23924
sa(dp23925
S'description'
p23926
S'The initial value of the gradient on the boundary\n'
p23927
sS'cpp_type'
p23928
S'double'
p23929
sS'default'
p23930
S'0'
p23931
sS'name'
p23932
S'initial'
p23933
sS'required'
p23934
I00
sS'group_name'
p23935
Nsa(dp23936
S'description'
p23937
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p23938
sS'cpp_type'
p23939
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p23940
sS'default'
p23941
g3
sS'name'
p23942
S'save_in'
p23943
sS'required'
p23944
I00
sS'group_name'
p23945
S'Advanced'
p23946
sa(dp23947
S'description'
p23948
S'The seed for the master random number generator\n'
p23949
sS'cpp_type'
p23950
S'unsigned int'
p23951
sS'default'
p23952
S'0'
p23953
sS'name'
p23954
S'seed'
p23955
sS'required'
p23956
I00
sS'group_name'
p23957
S'Advanced'
p23958
sa(dp23959
S'description'
p23960
g3
sS'cpp_type'
p23961
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p23962
sS'default'
p23963
S'SinNeumannBC'
p23964
sS'name'
p23965
S'type'
p23966
sS'required'
p23967
I00
sS'group_name'
p23968
Nsa(dp23969
S'description'
p23970
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23971
sS'cpp_type'
p23972
S'bool'
p23973
sS'default'
p23974
S'0'
p23975
sS'name'
p23976
S'use_displaced_mesh'
p23977
sS'required'
p23978
I00
sS'group_name'
p23979
S'Advanced'
p23980
sa(dp23981
S'description'
p23982
S'The name of the variable that this boundary condition applies to\n'
p23983
sS'cpp_type'
p23984
S'NonlinearVariableName'
p23985
sS'default'
p23986
g3
sS'name'
p23987
S'variable'
p23988
sS'required'
p23989
I01
sS'group_name'
p23990
NsasS'name'
p23991
S'/BCs/SinNeumannBC'
p23992
sa(dp23993
S'description'
p23994
g3
sS'subblocks'
p23995
NsS'parameters'
p23996
(lp23997
(dp23998
S'description'
p23999
S'No idea.\n'
p24000
sS'cpp_type'
p24001
S'double'
p24002
sS'default'
p24003
S'1'
p24004
sS'name'
p24005
S'alpha'
p24006
sS'required'
p24007
I00
sS'group_name'
p24008
Nsa(dp24009
S'description'
p24010
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24011
sS'cpp_type'
p24012
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24013
sS'default'
p24014
g3
sS'name'
p24015
S'boundary'
p24016
sS'required'
p24017
I01
sS'group_name'
p24018
Nsa(dp24019
S'description'
p24020
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24021
sS'cpp_type'
p24022
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24023
sS'default'
p24024
g3
sS'name'
p24025
S'control_tags'
p24026
sS'required'
p24027
I00
sS'group_name'
p24028
Nsa(dp24029
S'description'
p24030
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p24031
sS'cpp_type'
p24032
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p24033
sS'default'
p24034
g3
sS'name'
p24035
S'diag_save_in'
p24036
sS'required'
p24037
I00
sS'group_name'
p24038
S'Advanced'
p24039
sa(dp24040
S'description'
p24041
S'Determines whether this object is calculated using an implicit or explicit form\n'
p24042
sS'cpp_type'
p24043
S'bool'
p24044
sS'default'
p24045
S'1'
p24046
sS'name'
p24047
S'implicit'
p24048
sS'required'
p24049
I00
sS'group_name'
p24050
S'Advanced'
p24051
sa(dp24052
S'description'
p24053
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p24054
sS'cpp_type'
p24055
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p24056
sS'default'
p24057
g3
sS'name'
p24058
S'save_in'
p24059
sS'required'
p24060
I00
sS'group_name'
p24061
S'Advanced'
p24062
sa(dp24063
S'description'
p24064
S'The seed for the master random number generator\n'
p24065
sS'cpp_type'
p24066
S'unsigned int'
p24067
sS'default'
p24068
S'0'
p24069
sS'name'
p24070
S'seed'
p24071
sS'required'
p24072
I00
sS'group_name'
p24073
S'Advanced'
p24074
sa(dp24075
S'description'
p24076
g3
sS'cpp_type'
p24077
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24078
sS'default'
p24079
S'VacuumBC'
p24080
sS'name'
p24081
S'type'
p24082
sS'required'
p24083
I00
sS'group_name'
p24084
Nsa(dp24085
S'description'
p24086
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24087
sS'cpp_type'
p24088
S'bool'
p24089
sS'default'
p24090
S'0'
p24091
sS'name'
p24092
S'use_displaced_mesh'
p24093
sS'required'
p24094
I00
sS'group_name'
p24095
S'Advanced'
p24096
sa(dp24097
S'description'
p24098
S'The name of the variable that this boundary condition applies to\n'
p24099
sS'cpp_type'
p24100
S'NonlinearVariableName'
p24101
sS'default'
p24102
g3
sS'name'
p24103
S'variable'
p24104
sS'required'
p24105
I01
sS'group_name'
p24106
NsasS'name'
p24107
S'/BCs/VacuumBC'
p24108
sa(dp24109
S'description'
p24110
g3
sS'subblocks'
p24111
NsS'parameters'
p24112
(lp24113
(dp24114
S'description'
p24115
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24116
sS'cpp_type'
p24117
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24118
sS'default'
p24119
g3
sS'name'
p24120
S'boundary'
p24121
sS'required'
p24122
I01
sS'group_name'
p24123
Nsa(dp24124
S'description'
p24125
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24126
sS'cpp_type'
p24127
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24128
sS'default'
p24129
g3
sS'name'
p24130
S'control_tags'
p24131
sS'required'
p24132
I00
sS'group_name'
p24133
Nsa(dp24134
S'description'
p24135
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p24136
sS'cpp_type'
p24137
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p24138
sS'default'
p24139
g3
sS'name'
p24140
S'diag_save_in'
p24141
sS'required'
p24142
I00
sS'group_name'
p24143
S'Advanced'
p24144
sa(dp24145
S'description'
p24146
S'Determines whether this object is calculated using an implicit or explicit form\n'
p24147
sS'cpp_type'
p24148
S'bool'
p24149
sS'default'
p24150
S'1'
p24151
sS'name'
p24152
S'implicit'
p24153
sS'required'
p24154
I00
sS'group_name'
p24155
S'Advanced'
p24156
sa(dp24157
S'description'
p24158
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p24159
sS'cpp_type'
p24160
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p24161
sS'default'
p24162
g3
sS'name'
p24163
S'save_in'
p24164
sS'required'
p24165
I00
sS'group_name'
p24166
S'Advanced'
p24167
sa(dp24168
S'description'
p24169
S'The seed for the master random number generator\n'
p24170
sS'cpp_type'
p24171
S'unsigned int'
p24172
sS'default'
p24173
S'0'
p24174
sS'name'
p24175
S'seed'
p24176
sS'required'
p24177
I00
sS'group_name'
p24178
S'Advanced'
p24179
sa(dp24180
S'description'
p24181
g3
sS'cpp_type'
p24182
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24183
sS'default'
p24184
S'VectorNeumannBC'
p24185
sS'name'
p24186
S'type'
p24187
sS'required'
p24188
I00
sS'group_name'
p24189
Nsa(dp24190
S'description'
p24191
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24192
sS'cpp_type'
p24193
S'bool'
p24194
sS'default'
p24195
S'0'
p24196
sS'name'
p24197
S'use_displaced_mesh'
p24198
sS'required'
p24199
I00
sS'group_name'
p24200
S'Advanced'
p24201
sa(dp24202
S'description'
p24203
S'The name of the variable that this boundary condition applies to\n'
p24204
sS'cpp_type'
p24205
S'NonlinearVariableName'
p24206
sS'default'
p24207
g3
sS'name'
p24208
S'variable'
p24209
sS'required'
p24210
I01
sS'group_name'
p24211
Nsa(dp24212
S'description'
p24213
S'vector this BC should act in\n'
p24214
sS'cpp_type'
p24215
S'libMesh::VectorValue<double>'
p24216
sS'default'
p24217
S'0 0 0'
p24218
sS'name'
p24219
S'vector_value'
p24220
sS'required'
p24221
I00
sS'group_name'
p24222
NsasS'name'
p24223
S'/BCs/VectorNeumannBC'
p24224
sa(dp24225
S'description'
p24226
g3
sS'subblocks'
p24227
NsS'parameters'
p24228
(lp24229
(dp24230
S'description'
p24231
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24232
sS'cpp_type'
p24233
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24234
sS'default'
p24235
g3
sS'name'
p24236
S'boundary'
p24237
sS'required'
p24238
I01
sS'group_name'
p24239
Nsa(dp24240
S'description'
p24241
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24242
sS'cpp_type'
p24243
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24244
sS'default'
p24245
g3
sS'name'
p24246
S'control_tags'
p24247
sS'required'
p24248
I00
sS'group_name'
p24249
Nsa(dp24250
S'description'
p24251
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p24252
sS'cpp_type'
p24253
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p24254
sS'default'
p24255
g3
sS'name'
p24256
S'diag_save_in'
p24257
sS'required'
p24258
I00
sS'group_name'
p24259
S'Advanced'
p24260
sa(dp24261
S'description'
p24262
S'Determines whether this object is calculated using an implicit or explicit form\n'
p24263
sS'cpp_type'
p24264
S'bool'
p24265
sS'default'
p24266
S'1'
p24267
sS'name'
p24268
S'implicit'
p24269
sS'required'
p24270
I00
sS'group_name'
p24271
S'Advanced'
p24272
sa(dp24273
S'description'
p24274
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p24275
sS'cpp_type'
p24276
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p24277
sS'default'
p24278
g3
sS'name'
p24279
S'save_in'
p24280
sS'required'
p24281
I00
sS'group_name'
p24282
S'Advanced'
p24283
sa(dp24284
S'description'
p24285
S'The seed for the master random number generator\n'
p24286
sS'cpp_type'
p24287
S'unsigned int'
p24288
sS'default'
p24289
S'0'
p24290
sS'name'
p24291
S'seed'
p24292
sS'required'
p24293
I00
sS'group_name'
p24294
S'Advanced'
p24295
sa(dp24296
S'description'
p24297
g3
sS'cpp_type'
p24298
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24299
sS'default'
p24300
S'WeakGradientBC'
p24301
sS'name'
p24302
S'type'
p24303
sS'required'
p24304
I00
sS'group_name'
p24305
Nsa(dp24306
S'description'
p24307
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24308
sS'cpp_type'
p24309
S'bool'
p24310
sS'default'
p24311
S'0'
p24312
sS'name'
p24313
S'use_displaced_mesh'
p24314
sS'required'
p24315
I00
sS'group_name'
p24316
S'Advanced'
p24317
sa(dp24318
S'description'
p24319
S'The name of the variable that this boundary condition applies to\n'
p24320
sS'cpp_type'
p24321
S'NonlinearVariableName'
p24322
sS'default'
p24323
g3
sS'name'
p24324
S'variable'
p24325
sS'required'
p24326
I01
sS'group_name'
p24327
NsasS'name'
p24328
S'/BCs/WeakGradientBC'
p24329
sasS'parameters'
p24330
NsS'name'
p24331
S'/BCs'
p24332
sa(dp24333
S'description'
p24334
g3
sS'subblocks'
p24335
(lp24336
(dp24337
S'description'
p24338
g3
sS'subblocks'
p24339
NsS'parameters'
p24340
(lp24341
(dp24342
S'description'
p24343
S'A string representing the Moose Object that will be built by this Action\n'
p24344
sS'cpp_type'
p24345
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24346
sS'default'
p24347
g3
sS'name'
p24348
S'type'
p24349
sS'required'
p24350
I01
sS'group_name'
p24351
NsasS'name'
p24352
S'/Bounds/*'
p24353
sa(dp24354
S'description'
p24355
g3
sS'subblocks'
p24356
NsS'parameters'
p24357
(lp24358
(dp24359
S'description'
p24360
S'Variable whose values are to be accumulated into the current variable\n'
p24361
sS'cpp_type'
p24362
S'std::vector<VariableName>'
p24363
sS'default'
p24364
g3
sS'name'
p24365
S'accumulate_from_variable'
p24366
sS'required'
p24367
I01
sS'group_name'
p24368
Nsa(dp24369
S'description'
p24370
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24371
sS'cpp_type'
p24372
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24373
sS'default'
p24374
g3
sS'name'
p24375
S'block'
p24376
sS'required'
p24377
I00
sS'group_name'
p24378
Nsa(dp24379
S'description'
p24380
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24381
sS'cpp_type'
p24382
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24383
sS'default'
p24384
g3
sS'name'
p24385
S'boundary'
p24386
sS'required'
p24387
I00
sS'group_name'
p24388
Nsa(dp24389
S'description'
p24390
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24391
sS'cpp_type'
p24392
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24393
sS'default'
p24394
g3
sS'name'
p24395
S'control_tags'
p24396
sS'required'
p24397
I00
sS'group_name'
p24398
Nsa(dp24399
S'name'
p24400
S'execute_on'
p24401
sS'cpp_type'
p24402
S'MultiMooseEnum'
p24403
sS'default'
p24404
S'LINEAR'
p24405
sS'description'
p24406
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24407
sS'required'
p24408
I00
sS'options'
p24409
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p24410
sS'group_name'
p24411
Nsa(dp24412
S'description'
p24413
S'The seed for the master random number generator\n'
p24414
sS'cpp_type'
p24415
S'unsigned int'
p24416
sS'default'
p24417
S'0'
p24418
sS'name'
p24419
S'seed'
p24420
sS'required'
p24421
I00
sS'group_name'
p24422
S'Advanced'
p24423
sa(dp24424
S'description'
p24425
g3
sS'cpp_type'
p24426
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24427
sS'default'
p24428
S'AccumulateAux'
p24429
sS'name'
p24430
S'type'
p24431
sS'required'
p24432
I00
sS'group_name'
p24433
Nsa(dp24434
S'description'
p24435
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24436
sS'cpp_type'
p24437
S'bool'
p24438
sS'default'
p24439
S'0'
p24440
sS'name'
p24441
S'use_displaced_mesh'
p24442
sS'required'
p24443
I00
sS'group_name'
p24444
S'Advanced'
p24445
sa(dp24446
S'description'
p24447
S'The name of the variable that this object applies to\n'
p24448
sS'cpp_type'
p24449
S'AuxVariableName'
p24450
sS'default'
p24451
g3
sS'name'
p24452
S'variable'
p24453
sS'required'
p24454
I01
sS'group_name'
p24455
NsasS'name'
p24456
S'/Bounds/AccumulateAux'
p24457
sa(dp24458
S'description'
p24459
g3
sS'subblocks'
p24460
NsS'parameters'
p24461
(lp24462
(dp24463
S'description'
p24464
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24465
sS'cpp_type'
p24466
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24467
sS'default'
p24468
g3
sS'name'
p24469
S'block'
p24470
sS'required'
p24471
I00
sS'group_name'
p24472
Nsa(dp24473
S'description'
p24474
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24475
sS'cpp_type'
p24476
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24477
sS'default'
p24478
g3
sS'name'
p24479
S'boundary'
p24480
sS'required'
p24481
I00
sS'group_name'
p24482
Nsa(dp24483
S'description'
p24484
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24485
sS'cpp_type'
p24486
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24487
sS'default'
p24488
g3
sS'name'
p24489
S'control_tags'
p24490
sS'required'
p24491
I00
sS'group_name'
p24492
Nsa(dp24493
S'name'
p24494
S'execute_on'
p24495
sS'cpp_type'
p24496
S'MultiMooseEnum'
p24497
sS'default'
p24498
S'LINEAR'
p24499
sS'description'
p24500
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24501
sS'required'
p24502
I00
sS'options'
p24503
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p24504
sS'group_name'
p24505
Nsa(dp24506
S'description'
p24507
S'The equilibrium constant in dissociation form\n'
p24508
sS'cpp_type'
p24509
S'double'
p24510
sS'default'
p24511
S'0'
p24512
sS'name'
p24513
S'log_k'
p24514
sS'required'
p24515
I00
sS'group_name'
p24516
Nsa(dp24517
S'description'
p24518
S'The seed for the master random number generator\n'
p24519
sS'cpp_type'
p24520
S'unsigned int'
p24521
sS'default'
p24522
S'0'
p24523
sS'name'
p24524
S'seed'
p24525
sS'required'
p24526
I00
sS'group_name'
p24527
S'Advanced'
p24528
sa(dp24529
S'description'
p24530
S'The stochiometric coefficient of reactants\n'
p24531
sS'cpp_type'
p24532
S'std::vector<double, std::allocator<double> >'
p24533
sS'default'
p24534
g3
sS'name'
p24535
S'sto_v'
p24536
sS'required'
p24537
I01
sS'group_name'
p24538
Nsa(dp24539
S'description'
p24540
g3
sS'cpp_type'
p24541
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24542
sS'default'
p24543
S'AqueousEquilibriumRxnAux'
p24544
sS'name'
p24545
S'type'
p24546
sS'required'
p24547
I00
sS'group_name'
p24548
Nsa(dp24549
S'description'
p24550
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24551
sS'cpp_type'
p24552
S'bool'
p24553
sS'default'
p24554
S'0'
p24555
sS'name'
p24556
S'use_displaced_mesh'
p24557
sS'required'
p24558
I00
sS'group_name'
p24559
S'Advanced'
p24560
sa(dp24561
S'description'
p24562
S'the list of primary spceies participating in this equilibrium species\n'
p24563
sS'cpp_type'
p24564
S'std::vector<VariableName>'
p24565
sS'default'
p24566
g3
sS'name'
p24567
S'v'
p24568
sS'required'
p24569
I00
sS'group_name'
p24570
Nsa(dp24571
S'description'
p24572
S'The name of the variable that this object applies to\n'
p24573
sS'cpp_type'
p24574
S'AuxVariableName'
p24575
sS'default'
p24576
g3
sS'name'
p24577
S'variable'
p24578
sS'required'
p24579
I01
sS'group_name'
p24580
NsasS'name'
p24581
S'/Bounds/AqueousEquilibriumRxnAux'
p24582
sa(dp24583
S'description'
p24584
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p24585
sS'subblocks'
p24586
NsS'parameters'
p24587
(lp24588
(dp24589
S'description'
p24590
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24591
sS'cpp_type'
p24592
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24593
sS'default'
p24594
g3
sS'name'
p24595
S'block'
p24596
sS'required'
p24597
I00
sS'group_name'
p24598
Nsa(dp24599
S'description'
p24600
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24601
sS'cpp_type'
p24602
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24603
sS'default'
p24604
g3
sS'name'
p24605
S'boundary'
p24606
sS'required'
p24607
I00
sS'group_name'
p24608
Nsa(dp24609
S'description'
p24610
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24611
sS'cpp_type'
p24612
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24613
sS'default'
p24614
g3
sS'name'
p24615
S'control_tags'
p24616
sS'required'
p24617
I00
sS'group_name'
p24618
Nsa(dp24619
S'name'
p24620
S'execute_on'
p24621
sS'cpp_type'
p24622
S'MultiMooseEnum'
p24623
sS'default'
p24624
S'LINEAR'
p24625
sS'description'
p24626
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24627
sS'required'
p24628
I00
sS'options'
p24629
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p24630
sS'group_name'
p24631
Nsa(dp24632
S'description'
p24633
S'Array of coupled variables (num_name)\n'
p24634
sS'cpp_type'
p24635
S'unsigned int'
p24636
sS'default'
p24637
g3
sS'name'
p24638
S'op_num'
p24639
sS'required'
p24640
I00
sS'group_name'
p24641
Nsa(dp24642
S'description'
p24643
S'The seed for the master random number generator\n'
p24644
sS'cpp_type'
p24645
S'unsigned int'
p24646
sS'default'
p24647
S'0'
p24648
sS'name'
p24649
S'seed'
p24650
sS'required'
p24651
I00
sS'group_name'
p24652
S'Advanced'
p24653
sa(dp24654
S'description'
p24655
g3
sS'cpp_type'
p24656
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24657
sS'default'
p24658
S'BndsCalcAux'
p24659
sS'name'
p24660
S'type'
p24661
sS'required'
p24662
I00
sS'group_name'
p24663
Nsa(dp24664
S'description'
p24665
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24666
sS'cpp_type'
p24667
S'bool'
p24668
sS'default'
p24669
S'0'
p24670
sS'name'
p24671
S'use_displaced_mesh'
p24672
sS'required'
p24673
I00
sS'group_name'
p24674
S'Advanced'
p24675
sa(dp24676
S'description'
p24677
S'Array of coupled variables\n'
p24678
sS'cpp_type'
p24679
S'std::vector<VariableName>'
p24680
sS'default'
p24681
g3
sS'name'
p24682
S'v'
p24683
sS'required'
p24684
I01
sS'group_name'
p24685
Nsa(dp24686
S'description'
p24687
S'Array of coupled variables (base_name)\n'
p24688
sS'cpp_type'
p24689
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24690
sS'default'
p24691
g3
sS'name'
p24692
S'var_name_base'
p24693
sS'required'
p24694
I00
sS'group_name'
p24695
Nsa(dp24696
S'description'
p24697
S'The name of the variable that this object applies to\n'
p24698
sS'cpp_type'
p24699
S'AuxVariableName'
p24700
sS'default'
p24701
g3
sS'name'
p24702
S'variable'
p24703
sS'required'
p24704
I01
sS'group_name'
p24705
NsasS'name'
p24706
S'/Bounds/BndsCalcAux'
p24707
sa(dp24708
S'description'
p24709
g3
sS'subblocks'
p24710
NsS'parameters'
p24711
(lp24712
(dp24713
S'description'
p24714
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24715
sS'cpp_type'
p24716
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24717
sS'default'
p24718
g3
sS'name'
p24719
S'block'
p24720
sS'required'
p24721
I00
sS'group_name'
p24722
Nsa(dp24723
S'description'
p24724
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24725
sS'cpp_type'
p24726
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24727
sS'default'
p24728
g3
sS'name'
p24729
S'boundary'
p24730
sS'required'
p24731
I00
sS'group_name'
p24732
Nsa(dp24733
S'description'
p24734
S'The variable to be bounded\n'
p24735
sS'cpp_type'
p24736
S'std::vector<VariableName>'
p24737
sS'default'
p24738
g3
sS'name'
p24739
S'bounded_variable'
p24740
sS'required'
p24741
I01
sS'group_name'
p24742
Nsa(dp24743
S'description'
p24744
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24745
sS'cpp_type'
p24746
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24747
sS'default'
p24748
g3
sS'name'
p24749
S'control_tags'
p24750
sS'required'
p24751
I00
sS'group_name'
p24752
Nsa(dp24753
S'name'
p24754
S'execute_on'
p24755
sS'cpp_type'
p24756
S'MultiMooseEnum'
p24757
sS'default'
p24758
S'LINEAR'
p24759
sS'description'
p24760
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24761
sS'required'
p24762
I00
sS'options'
p24763
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p24764
sS'group_name'
p24765
Nsa(dp24766
S'description'
p24767
S'The lower bound for the variable\n'
p24768
sS'cpp_type'
p24769
S'double'
p24770
sS'default'
p24771
g3
sS'name'
p24772
S'lower'
p24773
sS'required'
p24774
I00
sS'group_name'
p24775
Nsa(dp24776
S'description'
p24777
S'The seed for the master random number generator\n'
p24778
sS'cpp_type'
p24779
S'unsigned int'
p24780
sS'default'
p24781
S'0'
p24782
sS'name'
p24783
S'seed'
p24784
sS'required'
p24785
I00
sS'group_name'
p24786
S'Advanced'
p24787
sa(dp24788
S'description'
p24789
g3
sS'cpp_type'
p24790
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24791
sS'default'
p24792
S'BoundsAux'
p24793
sS'name'
p24794
S'type'
p24795
sS'required'
p24796
I00
sS'group_name'
p24797
Nsa(dp24798
S'description'
p24799
S'The upper bound for the variable\n'
p24800
sS'cpp_type'
p24801
S'double'
p24802
sS'default'
p24803
g3
sS'name'
p24804
S'upper'
p24805
sS'required'
p24806
I00
sS'group_name'
p24807
Nsa(dp24808
S'description'
p24809
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24810
sS'cpp_type'
p24811
S'bool'
p24812
sS'default'
p24813
S'0'
p24814
sS'name'
p24815
S'use_displaced_mesh'
p24816
sS'required'
p24817
I00
sS'group_name'
p24818
S'Advanced'
p24819
sa(dp24820
S'description'
p24821
S'The name of the variable that this object applies to\n'
p24822
sS'cpp_type'
p24823
S'AuxVariableName'
p24824
sS'default'
p24825
g3
sS'name'
p24826
S'variable'
p24827
sS'required'
p24828
I01
sS'group_name'
p24829
NsasS'name'
p24830
S'/Bounds/BoundsAux'
p24831
sa(dp24832
S'description'
p24833
g3
sS'subblocks'
p24834
NsS'parameters'
p24835
(lp24836
(dp24837
S'description'
p24838
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24839
sS'cpp_type'
p24840
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24841
sS'default'
p24842
g3
sS'name'
p24843
S'block'
p24844
sS'required'
p24845
I00
sS'group_name'
p24846
Nsa(dp24847
S'description'
p24848
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24849
sS'cpp_type'
p24850
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24851
sS'default'
p24852
g3
sS'name'
p24853
S'boundary'
p24854
sS'required'
p24855
I00
sS'group_name'
p24856
Nsa(dp24857
S'description'
p24858
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24859
sS'cpp_type'
p24860
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24861
sS'default'
p24862
g3
sS'name'
p24863
S'control_tags'
p24864
sS'required'
p24865
I00
sS'group_name'
p24866
Nsa(dp24867
S'name'
p24868
S'execute_on'
p24869
sS'cpp_type'
p24870
S'MultiMooseEnum'
p24871
sS'default'
p24872
S'LINEAR'
p24873
sS'description'
p24874
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24875
sS'required'
p24876
I00
sS'options'
p24877
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p24878
sS'group_name'
p24879
Nsa(dp24880
S'description'
p24881
S'The seed for the master random number generator\n'
p24882
sS'cpp_type'
p24883
S'unsigned int'
p24884
sS'default'
p24885
S'0'
p24886
sS'name'
p24887
S'seed'
p24888
sS'required'
p24889
I00
sS'group_name'
p24890
S'Advanced'
p24891
sa(dp24892
S'description'
p24893
g3
sS'cpp_type'
p24894
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p24895
sS'default'
p24896
S'ConstantAux'
p24897
sS'name'
p24898
S'type'
p24899
sS'required'
p24900
I00
sS'group_name'
p24901
Nsa(dp24902
S'description'
p24903
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p24904
sS'cpp_type'
p24905
S'bool'
p24906
sS'default'
p24907
S'0'
p24908
sS'name'
p24909
S'use_displaced_mesh'
p24910
sS'required'
p24911
I00
sS'group_name'
p24912
S'Advanced'
p24913
sa(dp24914
S'description'
p24915
S'Some constant value that can be read from the input file\n'
p24916
sS'cpp_type'
p24917
S'double'
p24918
sS'default'
p24919
S'0'
p24920
sS'name'
p24921
S'value'
p24922
sS'required'
p24923
I00
sS'group_name'
p24924
Nsa(dp24925
S'description'
p24926
S'The name of the variable that this object applies to\n'
p24927
sS'cpp_type'
p24928
S'AuxVariableName'
p24929
sS'default'
p24930
g3
sS'name'
p24931
S'variable'
p24932
sS'required'
p24933
I01
sS'group_name'
p24934
NsasS'name'
p24935
S'/Bounds/ConstantAux'
p24936
sa(dp24937
S'description'
p24938
g3
sS'subblocks'
p24939
NsS'parameters'
p24940
(lp24941
(dp24942
S'description'
p24943
S'The list of block ids (SubdomainID) that this object will be applied\n'
p24944
sS'cpp_type'
p24945
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p24946
sS'default'
p24947
g3
sS'name'
p24948
S'block'
p24949
sS'required'
p24950
I00
sS'group_name'
p24951
Nsa(dp24952
S'description'
p24953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p24954
sS'cpp_type'
p24955
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p24956
sS'default'
p24957
g3
sS'name'
p24958
S'boundary'
p24959
sS'required'
p24960
I00
sS'group_name'
p24961
Nsa(dp24962
S'description'
p24963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24964
sS'cpp_type'
p24965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p24966
sS'default'
p24967
g3
sS'name'
p24968
S'control_tags'
p24969
sS'required'
p24970
I00
sS'group_name'
p24971
Nsa(dp24972
S'name'
p24973
S'execute_on'
p24974
sS'cpp_type'
p24975
S'MultiMooseEnum'
p24976
sS'default'
p24977
S'NONLINEAR'
p24978
sS'description'
p24979
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p24980
sS'required'
p24981
I00
sS'options'
p24982
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p24983
sS'group_name'
p24984
Nsa(dp24985
S'description'
p24986
S'The nodal area\n'
p24987
sS'cpp_type'
p24988
S'std::vector<VariableName>'
p24989
sS'default'
p24990
g3
sS'name'
p24991
S'nodal_area'
p24992
sS'required'
p24993
I01
sS'group_name'
p24994
Nsa(dp24995
S'description'
p24996
S'The boundary to be penetrated\n'
p24997
sS'cpp_type'
p24998
S'BoundaryName'
p24999
sS'default'
p25000
g3
sS'name'
p25001
S'paired_boundary'
p25002
sS'required'
p25003
I01
sS'group_name'
p25004
Nsa(dp25005
S'description'
p25006
S'The seed for the master random number generator\n'
p25007
sS'cpp_type'
p25008
S'unsigned int'
p25009
sS'default'
p25010
S'0'
p25011
sS'name'
p25012
S'seed'
p25013
sS'required'
p25014
I00
sS'group_name'
p25015
S'Advanced'
p25016
sa(dp25017
S'description'
p25018
g3
sS'cpp_type'
p25019
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25020
sS'default'
p25021
S'ContactPressureAux'
p25022
sS'name'
p25023
S'type'
p25024
sS'required'
p25025
I00
sS'group_name'
p25026
Nsa(dp25027
S'description'
p25028
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25029
sS'cpp_type'
p25030
S'bool'
p25031
sS'default'
p25032
S'0'
p25033
sS'name'
p25034
S'use_displaced_mesh'
p25035
sS'required'
p25036
I00
sS'group_name'
p25037
S'Advanced'
p25038
sa(dp25039
S'description'
p25040
S'The name of the variable that this object applies to\n'
p25041
sS'cpp_type'
p25042
S'AuxVariableName'
p25043
sS'default'
p25044
g3
sS'name'
p25045
S'variable'
p25046
sS'required'
p25047
I01
sS'group_name'
p25048
NsasS'name'
p25049
S'/Bounds/ContactPressureAux'
p25050
sa(dp25051
S'description'
p25052
g3
sS'subblocks'
p25053
NsS'parameters'
p25054
(lp25055
(dp25056
S'description'
p25057
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25058
sS'cpp_type'
p25059
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25060
sS'default'
p25061
g3
sS'name'
p25062
S'block'
p25063
sS'required'
p25064
I00
sS'group_name'
p25065
Nsa(dp25066
S'description'
p25067
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25068
sS'cpp_type'
p25069
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25070
sS'default'
p25071
g3
sS'name'
p25072
S'boundary'
p25073
sS'required'
p25074
I00
sS'group_name'
p25075
Nsa(dp25076
S'description'
p25077
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25078
sS'cpp_type'
p25079
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25080
sS'default'
p25081
g3
sS'name'
p25082
S'control_tags'
p25083
sS'required'
p25084
I00
sS'group_name'
p25085
Nsa(dp25086
S'description'
p25087
S'The variable whose values are going to be interpolated.\n'
p25088
sS'cpp_type'
p25089
S'std::vector<VariableName>'
p25090
sS'default'
p25091
g3
sS'name'
p25092
S'coupled_var'
p25093
sS'required'
p25094
I01
sS'group_name'
p25095
Nsa(dp25096
S'name'
p25097
S'direction'
p25098
sS'cpp_type'
p25099
S'MooseEnum'
p25100
sS'default'
p25101
g3
sS'description'
p25102
S'The direction to interpolate in.\n'
p25103
sS'required'
p25104
I01
sS'options'
p25105
S'x y z'
p25106
sS'group_name'
p25107
Nsa(dp25108
S'name'
p25109
S'execute_on'
p25110
sS'cpp_type'
p25111
S'MultiMooseEnum'
p25112
sS'default'
p25113
S'LINEAR'
p25114
sS'description'
p25115
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25116
sS'required'
p25117
I00
sS'options'
p25118
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25119
sS'group_name'
p25120
Nsa(dp25121
S'description'
p25122
S'The seed for the master random number generator\n'
p25123
sS'cpp_type'
p25124
S'unsigned int'
p25125
sS'default'
p25126
S'0'
p25127
sS'name'
p25128
S'seed'
p25129
sS'required'
p25130
I00
sS'group_name'
p25131
S'Advanced'
p25132
sa(dp25133
S'description'
p25134
g3
sS'cpp_type'
p25135
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25136
sS'default'
p25137
S'CoupledDirectionalMeshHeightInterpolation'
p25138
sS'name'
p25139
S'type'
p25140
sS'required'
p25141
I00
sS'group_name'
p25142
Nsa(dp25143
S'description'
p25144
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25145
sS'cpp_type'
p25146
S'bool'
p25147
sS'default'
p25148
S'0'
p25149
sS'name'
p25150
S'use_displaced_mesh'
p25151
sS'required'
p25152
I00
sS'group_name'
p25153
S'Advanced'
p25154
sa(dp25155
S'description'
p25156
S'The name of the variable that this object applies to\n'
p25157
sS'cpp_type'
p25158
S'AuxVariableName'
p25159
sS'default'
p25160
g3
sS'name'
p25161
S'variable'
p25162
sS'required'
p25163
I01
sS'group_name'
p25164
NsasS'name'
p25165
S'/Bounds/CoupledDirectionalMeshHeightInterpolation'
p25166
sa(dp25167
S'description'
p25168
S'Free energy contribution from the cross terms in ACMultiInetrface\n'
p25169
sS'subblocks'
p25170
NsS'parameters'
p25171
(lp25172
(dp25173
S'description'
p25174
S'Coupled variable holding additional free energy contributions to be summed up\n'
p25175
sS'cpp_type'
p25176
S'std::vector<VariableName>'
p25177
sS'default'
p25178
S'0'
p25179
sS'name'
p25180
S'additional_free_energy'
p25181
sS'required'
p25182
I00
sS'group_name'
p25183
Nsa(dp25184
S'description'
p25185
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25186
sS'cpp_type'
p25187
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25188
sS'default'
p25189
g3
sS'name'
p25190
S'block'
p25191
sS'required'
p25192
I00
sS'group_name'
p25193
Nsa(dp25194
S'description'
p25195
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25196
sS'cpp_type'
p25197
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25198
sS'default'
p25199
g3
sS'name'
p25200
S'boundary'
p25201
sS'required'
p25202
I00
sS'group_name'
p25203
Nsa(dp25204
S'description'
p25205
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25206
sS'cpp_type'
p25207
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25208
sS'default'
p25209
g3
sS'name'
p25210
S'control_tags'
p25211
sS'required'
p25212
I00
sS'group_name'
p25213
Nsa(dp25214
S'name'
p25215
S'execute_on'
p25216
sS'cpp_type'
p25217
S'MultiMooseEnum'
p25218
sS'default'
p25219
S'LINEAR'
p25220
sS'description'
p25221
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25222
sS'required'
p25223
I00
sS'options'
p25224
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25225
sS'group_name'
p25226
Nsa(dp25227
S'description'
p25228
S'Variable names that contribute to interfacial energy\n'
p25229
sS'cpp_type'
p25230
S'std::vector<VariableName>'
p25231
sS'default'
p25232
g3
sS'name'
p25233
S'interfacial_vars'
p25234
sS'required'
p25235
I00
sS'group_name'
p25236
Nsa(dp25237
S'description'
p25238
S'Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n'
p25239
sS'cpp_type'
p25240
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25241
sS'default'
p25242
g3
sS'name'
p25243
S'kappa_names'
p25244
sS'required'
p25245
I01
sS'group_name'
p25246
Nsa(dp25247
S'description'
p25248
S'The seed for the master random number generator\n'
p25249
sS'cpp_type'
p25250
S'unsigned int'
p25251
sS'default'
p25252
S'0'
p25253
sS'name'
p25254
S'seed'
p25255
sS'required'
p25256
I00
sS'group_name'
p25257
S'Advanced'
p25258
sa(dp25259
S'description'
p25260
g3
sS'cpp_type'
p25261
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25262
sS'default'
p25263
S'CrossTermGradientFreeEnergy'
p25264
sS'name'
p25265
S'type'
p25266
sS'required'
p25267
I00
sS'group_name'
p25268
Nsa(dp25269
S'description'
p25270
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25271
sS'cpp_type'
p25272
S'bool'
p25273
sS'default'
p25274
S'0'
p25275
sS'name'
p25276
S'use_displaced_mesh'
p25277
sS'required'
p25278
I00
sS'group_name'
p25279
S'Advanced'
p25280
sa(dp25281
S'description'
p25282
S'The name of the variable that this object applies to\n'
p25283
sS'cpp_type'
p25284
S'AuxVariableName'
p25285
sS'default'
p25286
g3
sS'name'
p25287
S'variable'
p25288
sS'required'
p25289
I01
sS'group_name'
p25290
NsasS'name'
p25291
S'/Bounds/CrossTermGradientFreeEnergy'
p25292
sa(dp25293
S'description'
p25294
S'Output updated rotation tensor to a file: Use for stereographic plots\n'
p25295
sS'subblocks'
p25296
NsS'parameters'
p25297
(lp25298
(dp25299
S'description'
p25300
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25301
sS'cpp_type'
p25302
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25303
sS'default'
p25304
g3
sS'name'
p25305
S'block'
p25306
sS'required'
p25307
I00
sS'group_name'
p25308
Nsa(dp25309
S'description'
p25310
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25311
sS'cpp_type'
p25312
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25313
sS'default'
p25314
g3
sS'name'
p25315
S'boundary'
p25316
sS'required'
p25317
I00
sS'group_name'
p25318
Nsa(dp25319
S'description'
p25320
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25321
sS'cpp_type'
p25322
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25323
sS'default'
p25324
g3
sS'name'
p25325
S'control_tags'
p25326
sS'required'
p25327
I00
sS'group_name'
p25328
Nsa(dp25329
S'name'
p25330
S'execute_on'
p25331
sS'cpp_type'
p25332
S'MultiMooseEnum'
p25333
sS'default'
p25334
S'LINEAR'
p25335
sS'description'
p25336
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25337
sS'required'
p25338
I00
sS'options'
p25339
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25340
sS'group_name'
p25341
Nsa(dp25342
S'description'
p25343
S'Frequency of Output\n'
p25344
sS'cpp_type'
p25345
S'unsigned int'
p25346
sS'default'
p25347
S'1'
p25348
sS'name'
p25349
S'output_frequency'
p25350
sS'required'
p25351
I00
sS'group_name'
p25352
Nsa(dp25353
S'description'
p25354
S'Name of rotation output file: Default rot.out\n'
p25355
sS'cpp_type'
p25356
S'FileName'
p25357
sS'default'
p25358
S'rot.out'
p25359
sS'name'
p25360
S'rotout_file_name'
p25361
sS'required'
p25362
I00
sS'group_name'
p25363
Nsa(dp25364
S'description'
p25365
S'The seed for the master random number generator\n'
p25366
sS'cpp_type'
p25367
S'unsigned int'
p25368
sS'default'
p25369
S'0'
p25370
sS'name'
p25371
S'seed'
p25372
sS'required'
p25373
I00
sS'group_name'
p25374
S'Advanced'
p25375
sa(dp25376
S'description'
p25377
g3
sS'cpp_type'
p25378
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25379
sS'default'
p25380
S'CrystalPlasticityRotationOutAux'
p25381
sS'name'
p25382
S'type'
p25383
sS'required'
p25384
I00
sS'group_name'
p25385
Nsa(dp25386
S'description'
p25387
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25388
sS'cpp_type'
p25389
S'bool'
p25390
sS'default'
p25391
S'0'
p25392
sS'name'
p25393
S'use_displaced_mesh'
p25394
sS'required'
p25395
I00
sS'group_name'
p25396
S'Advanced'
p25397
sa(dp25398
S'description'
p25399
S'The name of the variable that this object applies to\n'
p25400
sS'cpp_type'
p25401
S'AuxVariableName'
p25402
sS'default'
p25403
g3
sS'name'
p25404
S'variable'
p25405
sS'required'
p25406
I01
sS'group_name'
p25407
NsasS'name'
p25408
S'/Bounds/CrystalPlasticityRotationOutAux'
p25409
sa(dp25410
S'description'
p25411
S'Takes RankTwoTensor material and outputs component in cylindrical coordinates\n'
p25412
sS'subblocks'
p25413
NsS'parameters'
p25414
(lp25415
(dp25416
S'description'
p25417
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25418
sS'cpp_type'
p25419
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25420
sS'default'
p25421
g3
sS'name'
p25422
S'block'
p25423
sS'required'
p25424
I00
sS'group_name'
p25425
Nsa(dp25426
S'description'
p25427
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25428
sS'cpp_type'
p25429
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25430
sS'default'
p25431
g3
sS'name'
p25432
S'boundary'
p25433
sS'required'
p25434
I00
sS'group_name'
p25435
Nsa(dp25436
S'description'
p25437
S'Location of the center point of the cylindrical coordinates\n'
p25438
sS'cpp_type'
p25439
S'libMesh::Point'
p25440
sS'default'
p25441
g3
sS'name'
p25442
S'center_point'
p25443
sS'required'
p25444
I01
sS'group_name'
p25445
Nsa(dp25446
S'description'
p25447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25448
sS'cpp_type'
p25449
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25450
sS'default'
p25451
g3
sS'name'
p25452
S'control_tags'
p25453
sS'required'
p25454
I00
sS'group_name'
p25455
Nsa(dp25456
S'name'
p25457
S'execute_on'
p25458
sS'cpp_type'
p25459
S'MultiMooseEnum'
p25460
sS'default'
p25461
S'LINEAR'
p25462
sS'description'
p25463
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25464
sS'required'
p25465
I00
sS'options'
p25466
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25467
sS'group_name'
p25468
Nsa(dp25469
S'description'
p25470
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p25471
sS'cpp_type'
p25472
S'unsigned int'
p25473
sS'default'
p25474
g3
sS'name'
p25475
S'index_i'
p25476
sS'required'
p25477
I01
sS'group_name'
p25478
Nsa(dp25479
S'description'
p25480
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p25481
sS'cpp_type'
p25482
S'unsigned int'
p25483
sS'default'
p25484
g3
sS'name'
p25485
S'index_j'
p25486
sS'required'
p25487
I01
sS'group_name'
p25488
Nsa(dp25489
S'description'
p25490
S'The rank two material tensor name\n'
p25491
sS'cpp_type'
p25492
S'MaterialPropertyName'
p25493
sS'default'
p25494
g3
sS'name'
p25495
S'rank_two_tensor'
p25496
sS'required'
p25497
I01
sS'group_name'
p25498
Nsa(dp25499
S'description'
p25500
S'The seed for the master random number generator\n'
p25501
sS'cpp_type'
p25502
S'unsigned int'
p25503
sS'default'
p25504
S'0'
p25505
sS'name'
p25506
S'seed'
p25507
sS'required'
p25508
I00
sS'group_name'
p25509
S'Advanced'
p25510
sa(dp25511
S'description'
p25512
g3
sS'cpp_type'
p25513
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25514
sS'default'
p25515
S'CylindricalRankTwoAux'
p25516
sS'name'
p25517
S'type'
p25518
sS'required'
p25519
I00
sS'group_name'
p25520
Nsa(dp25521
S'description'
p25522
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25523
sS'cpp_type'
p25524
S'bool'
p25525
sS'default'
p25526
S'0'
p25527
sS'name'
p25528
S'use_displaced_mesh'
p25529
sS'required'
p25530
I00
sS'group_name'
p25531
S'Advanced'
p25532
sa(dp25533
S'description'
p25534
S'The name of the variable that this object applies to\n'
p25535
sS'cpp_type'
p25536
S'AuxVariableName'
p25537
sS'default'
p25538
g3
sS'name'
p25539
S'variable'
p25540
sS'required'
p25541
I01
sS'group_name'
p25542
NsasS'name'
p25543
S'/Bounds/CylindricalRankTwoAux'
p25544
sa(dp25545
S'description'
p25546
S'Darcy flux (in m^3.s^-1.m^-2, or m.s^-1)  -(k_ij/mu (nabla_j P - w_j)), where k_ij is the permeability tensor, mu is the fluid viscosity, P is the fluid pressure, and w_j is the fluid weight.  If velocity_scaling is used then -(k_ij/mu (nabla_j P - w_j))/velocity_scaling is returned\n'
p25547
sS'subblocks'
p25548
NsS'parameters'
p25549
(lp25550
(dp25551
S'description'
p25552
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25553
sS'cpp_type'
p25554
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25555
sS'default'
p25556
g3
sS'name'
p25557
S'block'
p25558
sS'required'
p25559
I00
sS'group_name'
p25560
Nsa(dp25561
S'description'
p25562
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25563
sS'cpp_type'
p25564
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25565
sS'default'
p25566
g3
sS'name'
p25567
S'boundary'
p25568
sS'required'
p25569
I00
sS'group_name'
p25570
Nsa(dp25571
S'name'
p25572
S'component'
p25573
sS'cpp_type'
p25574
S'MooseEnum'
p25575
sS'default'
p25576
g3
sS'description'
p25577
S'The component of the Darcy flux to return\n'
p25578
sS'required'
p25579
I00
sS'options'
p25580
S'x y z'
p25581
sS'group_name'
p25582
Nsa(dp25583
S'description'
p25584
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25585
sS'cpp_type'
p25586
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25587
sS'default'
p25588
g3
sS'name'
p25589
S'control_tags'
p25590
sS'required'
p25591
I00
sS'group_name'
p25592
Nsa(dp25593
S'name'
p25594
S'execute_on'
p25595
sS'cpp_type'
p25596
S'MultiMooseEnum'
p25597
sS'default'
p25598
S'LINEAR'
p25599
sS'description'
p25600
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25601
sS'required'
p25602
I00
sS'options'
p25603
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25604
sS'group_name'
p25605
Nsa(dp25606
S'description'
p25607
S'Fluid dynamic viscosity (usually measured in Pa.s)\n'
p25608
sS'cpp_type'
p25609
S'double'
p25610
sS'default'
p25611
g3
sS'name'
p25612
S'fluid_viscosity'
p25613
sS'required'
p25614
I01
sS'group_name'
p25615
Nsa(dp25616
S'description'
p25617
S"Fluid weight (gravity*density) as a vector pointing downwards (usually measured in kg.m^-2.s^-2 = Pa/m).  Eg '0 0 -10000'\n"
p25618
sS'cpp_type'
p25619
S'libMesh::VectorValue<double>'
p25620
sS'default'
p25621
g3
sS'name'
p25622
S'fluid_weight'
p25623
sS'required'
p25624
I01
sS'group_name'
p25625
Nsa(dp25626
S'description'
p25627
S'The variable representing the porepressure\n'
p25628
sS'cpp_type'
p25629
S'std::vector<VariableName>'
p25630
sS'default'
p25631
g3
sS'name'
p25632
S'porepressure'
p25633
sS'required'
p25634
I01
sS'group_name'
p25635
Nsa(dp25636
S'description'
p25637
S'The seed for the master random number generator\n'
p25638
sS'cpp_type'
p25639
S'unsigned int'
p25640
sS'default'
p25641
S'0'
p25642
sS'name'
p25643
S'seed'
p25644
sS'required'
p25645
I00
sS'group_name'
p25646
S'Advanced'
p25647
sa(dp25648
S'description'
p25649
g3
sS'cpp_type'
p25650
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25651
sS'default'
p25652
S'DarcyFluxComponent'
p25653
sS'name'
p25654
S'type'
p25655
sS'required'
p25656
I00
sS'group_name'
p25657
Nsa(dp25658
S'description'
p25659
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25660
sS'cpp_type'
p25661
S'bool'
p25662
sS'default'
p25663
S'0'
p25664
sS'name'
p25665
S'use_displaced_mesh'
p25666
sS'required'
p25667
I00
sS'group_name'
p25668
S'Advanced'
p25669
sa(dp25670
S'description'
p25671
S'The name of the variable that this object applies to\n'
p25672
sS'cpp_type'
p25673
S'AuxVariableName'
p25674
sS'default'
p25675
g3
sS'name'
p25676
S'variable'
p25677
sS'required'
p25678
I01
sS'group_name'
p25679
Nsa(dp25680
S'description'
p25681
S'Scale the result by (1/velocity_scaling).  Usually velocity_scaling = porosity.\n'
p25682
sS'cpp_type'
p25683
S'double'
p25684
sS'default'
p25685
S'1'
p25686
sS'name'
p25687
S'velocity_scaling'
p25688
sS'required'
p25689
I00
sS'group_name'
p25690
NsasS'name'
p25691
S'/Bounds/DarcyFluxComponent'
p25692
sa(dp25693
S'description'
p25694
g3
sS'subblocks'
p25695
NsS'parameters'
p25696
(lp25697
(dp25698
S'description'
p25699
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25700
sS'cpp_type'
p25701
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25702
sS'default'
p25703
g3
sS'name'
p25704
S'block'
p25705
sS'required'
p25706
I00
sS'group_name'
p25707
Nsa(dp25708
S'description'
p25709
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25710
sS'cpp_type'
p25711
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25712
sS'default'
p25713
g3
sS'name'
p25714
S'boundary'
p25715
sS'required'
p25716
I00
sS'group_name'
p25717
Nsa(dp25718
S'description'
p25719
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25720
sS'cpp_type'
p25721
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25722
sS'default'
p25723
g3
sS'name'
p25724
S'control_tags'
p25725
sS'required'
p25726
I00
sS'group_name'
p25727
Nsa(dp25728
S'description'
p25729
S'The variable that is being debugged.\n'
p25730
sS'cpp_type'
p25731
S'NonlinearVariableName'
p25732
sS'default'
p25733
g3
sS'name'
p25734
S'debug_variable'
p25735
sS'required'
p25736
I01
sS'group_name'
p25737
Nsa(dp25738
S'name'
p25739
S'execute_on'
p25740
sS'cpp_type'
p25741
S'MultiMooseEnum'
p25742
sS'default'
p25743
S'LINEAR'
p25744
sS'description'
p25745
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25746
sS'required'
p25747
I00
sS'options'
p25748
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25749
sS'group_name'
p25750
Nsa(dp25751
S'description'
p25752
S'The seed for the master random number generator\n'
p25753
sS'cpp_type'
p25754
S'unsigned int'
p25755
sS'default'
p25756
S'0'
p25757
sS'name'
p25758
S'seed'
p25759
sS'required'
p25760
I00
sS'group_name'
p25761
S'Advanced'
p25762
sa(dp25763
S'description'
p25764
g3
sS'cpp_type'
p25765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25766
sS'default'
p25767
S'DebugResidualAux'
p25768
sS'name'
p25769
S'type'
p25770
sS'required'
p25771
I00
sS'group_name'
p25772
Nsa(dp25773
S'description'
p25774
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25775
sS'cpp_type'
p25776
S'bool'
p25777
sS'default'
p25778
S'0'
p25779
sS'name'
p25780
S'use_displaced_mesh'
p25781
sS'required'
p25782
I00
sS'group_name'
p25783
S'Advanced'
p25784
sa(dp25785
S'description'
p25786
S'The name of the variable that this object applies to\n'
p25787
sS'cpp_type'
p25788
S'AuxVariableName'
p25789
sS'default'
p25790
g3
sS'name'
p25791
S'variable'
p25792
sS'required'
p25793
I01
sS'group_name'
p25794
NsasS'name'
p25795
S'/Bounds/DebugResidualAux'
p25796
sa(dp25797
S'description'
p25798
g3
sS'subblocks'
p25799
NsS'parameters'
p25800
(lp25801
(dp25802
S'description'
p25803
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25804
sS'cpp_type'
p25805
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25806
sS'default'
p25807
g3
sS'name'
p25808
S'block'
p25809
sS'required'
p25810
I00
sS'group_name'
p25811
Nsa(dp25812
S'description'
p25813
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25814
sS'cpp_type'
p25815
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25816
sS'default'
p25817
g3
sS'name'
p25818
S'boundary'
p25819
sS'required'
p25820
I00
sS'group_name'
p25821
Nsa(dp25822
S'description'
p25823
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25824
sS'cpp_type'
p25825
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25826
sS'default'
p25827
g3
sS'name'
p25828
S'control_tags'
p25829
sS'required'
p25830
I00
sS'group_name'
p25831
Nsa(dp25832
S'description'
p25833
S'The CrackFrontDefinition user object name\n'
p25834
sS'cpp_type'
p25835
S'UserObjectName'
p25836
sS'default'
p25837
g3
sS'name'
p25838
S'crack_front_definition'
p25839
sS'required'
p25840
I01
sS'group_name'
p25841
Nsa(dp25842
S'description'
p25843
S'The index of the point on the crack front corresponding to this q function\n'
p25844
sS'cpp_type'
p25845
S'unsigned int'
p25846
sS'default'
p25847
g3
sS'name'
p25848
S'crack_front_point_index'
p25849
sS'required'
p25850
I00
sS'group_name'
p25851
Nsa(dp25852
S'name'
p25853
S'execute_on'
p25854
sS'cpp_type'
p25855
S'MultiMooseEnum'
p25856
sS'default'
p25857
S'LINEAR'
p25858
sS'description'
p25859
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25860
sS'required'
p25861
I00
sS'options'
p25862
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25863
sS'group_name'
p25864
Nsa(dp25865
S'description'
p25866
S'Radius for J-Integral calculation\n'
p25867
sS'cpp_type'
p25868
S'double'
p25869
sS'default'
p25870
g3
sS'name'
p25871
S'j_integral_radius_inner'
p25872
sS'required'
p25873
I01
sS'group_name'
p25874
Nsa(dp25875
S'description'
p25876
S'Radius for J-Integral calculation\n'
p25877
sS'cpp_type'
p25878
S'double'
p25879
sS'default'
p25880
g3
sS'name'
p25881
S'j_integral_radius_outer'
p25882
sS'required'
p25883
I01
sS'group_name'
p25884
Nsa(dp25885
S'description'
p25886
S'The seed for the master random number generator\n'
p25887
sS'cpp_type'
p25888
S'unsigned int'
p25889
sS'default'
p25890
S'0'
p25891
sS'name'
p25892
S'seed'
p25893
sS'required'
p25894
I00
sS'group_name'
p25895
S'Advanced'
p25896
sa(dp25897
S'description'
p25898
g3
sS'cpp_type'
p25899
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p25900
sS'default'
p25901
S'DomainIntegralQFunction'
p25902
sS'name'
p25903
S'type'
p25904
sS'required'
p25905
I00
sS'group_name'
p25906
Nsa(dp25907
S'description'
p25908
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p25909
sS'cpp_type'
p25910
S'bool'
p25911
sS'default'
p25912
S'0'
p25913
sS'name'
p25914
S'use_displaced_mesh'
p25915
sS'required'
p25916
I00
sS'group_name'
p25917
S'Advanced'
p25918
sa(dp25919
S'description'
p25920
S'The name of the variable that this object applies to\n'
p25921
sS'cpp_type'
p25922
S'AuxVariableName'
p25923
sS'default'
p25924
g3
sS'name'
p25925
S'variable'
p25926
sS'required'
p25927
I01
sS'group_name'
p25928
NsasS'name'
p25929
S'/Bounds/DomainIntegralQFunction'
p25930
sa(dp25931
S'description'
p25932
g3
sS'subblocks'
p25933
NsS'parameters'
p25934
(lp25935
(dp25936
S'description'
p25937
S'The list of block ids (SubdomainID) that this object will be applied\n'
p25938
sS'cpp_type'
p25939
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p25940
sS'default'
p25941
g3
sS'name'
p25942
S'block'
p25943
sS'required'
p25944
I00
sS'group_name'
p25945
Nsa(dp25946
S'description'
p25947
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25948
sS'cpp_type'
p25949
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25950
sS'default'
p25951
g3
sS'name'
p25952
S'boundary'
p25953
sS'required'
p25954
I00
sS'group_name'
p25955
Nsa(dp25956
S'description'
p25957
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25958
sS'cpp_type'
p25959
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p25960
sS'default'
p25961
g3
sS'name'
p25962
S'control_tags'
p25963
sS'required'
p25964
I00
sS'group_name'
p25965
Nsa(dp25966
S'description'
p25967
S'The CrackFrontDefinition user object name\n'
p25968
sS'cpp_type'
p25969
S'UserObjectName'
p25970
sS'default'
p25971
g3
sS'name'
p25972
S'crack_front_definition'
p25973
sS'required'
p25974
I01
sS'group_name'
p25975
Nsa(dp25976
S'description'
p25977
S'The index of the point on the crack front corresponding to this q function\n'
p25978
sS'cpp_type'
p25979
S'unsigned int'
p25980
sS'default'
p25981
g3
sS'name'
p25982
S'crack_front_point_index'
p25983
sS'required'
p25984
I00
sS'group_name'
p25985
Nsa(dp25986
S'name'
p25987
S'execute_on'
p25988
sS'cpp_type'
p25989
S'MultiMooseEnum'
p25990
sS'default'
p25991
S'LINEAR'
p25992
sS'description'
p25993
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p25994
sS'required'
p25995
I00
sS'options'
p25996
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p25997
sS'group_name'
p25998
Nsa(dp25999
S'description'
p26000
S'The ring of elements that defines the integration domain\n'
p26001
sS'cpp_type'
p26002
S'unsigned int'
p26003
sS'default'
p26004
g3
sS'name'
p26005
S'ring_index'
p26006
sS'required'
p26007
I01
sS'group_name'
p26008
Nsa(dp26009
S'description'
p26010
S'The seed for the master random number generator\n'
p26011
sS'cpp_type'
p26012
S'unsigned int'
p26013
sS'default'
p26014
S'0'
p26015
sS'name'
p26016
S'seed'
p26017
sS'required'
p26018
I00
sS'group_name'
p26019
S'Advanced'
p26020
sa(dp26021
S'description'
p26022
g3
sS'cpp_type'
p26023
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26024
sS'default'
p26025
S'DomainIntegralTopologicalQFunction'
p26026
sS'name'
p26027
S'type'
p26028
sS'required'
p26029
I00
sS'group_name'
p26030
Nsa(dp26031
S'description'
p26032
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26033
sS'cpp_type'
p26034
S'bool'
p26035
sS'default'
p26036
S'0'
p26037
sS'name'
p26038
S'use_displaced_mesh'
p26039
sS'required'
p26040
I00
sS'group_name'
p26041
S'Advanced'
p26042
sa(dp26043
S'description'
p26044
S'The name of the variable that this object applies to\n'
p26045
sS'cpp_type'
p26046
S'AuxVariableName'
p26047
sS'default'
p26048
g3
sS'name'
p26049
S'variable'
p26050
sS'required'
p26051
I01
sS'group_name'
p26052
NsasS'name'
p26053
S'/Bounds/DomainIntegralTopologicalQFunction'
p26054
sa(dp26055
S'description'
p26056
g3
sS'subblocks'
p26057
NsS'parameters'
p26058
(lp26059
(dp26060
S'description'
p26061
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26062
sS'cpp_type'
p26063
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26064
sS'default'
p26065
g3
sS'name'
p26066
S'block'
p26067
sS'required'
p26068
I00
sS'group_name'
p26069
Nsa(dp26070
S'description'
p26071
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26072
sS'cpp_type'
p26073
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26074
sS'default'
p26075
g3
sS'name'
p26076
S'boundary'
p26077
sS'required'
p26078
I00
sS'group_name'
p26079
Nsa(dp26080
S'description'
p26081
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26082
sS'cpp_type'
p26083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26084
sS'default'
p26085
g3
sS'name'
p26086
S'control_tags'
p26087
sS'required'
p26088
I00
sS'group_name'
p26089
Nsa(dp26090
S'name'
p26091
S'execute_on'
p26092
sS'cpp_type'
p26093
S'MultiMooseEnum'
p26094
sS'default'
p26095
S'LINEAR'
p26096
sS'description'
p26097
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26098
sS'required'
p26099
I00
sS'options'
p26100
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26101
sS'group_name'
p26102
Nsa(dp26103
S'description'
p26104
S'The seed for the master random number generator\n'
p26105
sS'cpp_type'
p26106
S'unsigned int'
p26107
sS'default'
p26108
S'0'
p26109
sS'name'
p26110
S'seed'
p26111
sS'required'
p26112
I00
sS'group_name'
p26113
S'Advanced'
p26114
sa(dp26115
S'description'
p26116
g3
sS'cpp_type'
p26117
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26118
sS'default'
p26119
S'ElasticEnergyAux'
p26120
sS'name'
p26121
S'type'
p26122
sS'required'
p26123
I00
sS'group_name'
p26124
Nsa(dp26125
S'description'
p26126
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26127
sS'cpp_type'
p26128
S'bool'
p26129
sS'default'
p26130
S'0'
p26131
sS'name'
p26132
S'use_displaced_mesh'
p26133
sS'required'
p26134
I00
sS'group_name'
p26135
S'Advanced'
p26136
sa(dp26137
S'description'
p26138
S'The name of the variable that this object applies to\n'
p26139
sS'cpp_type'
p26140
S'AuxVariableName'
p26141
sS'default'
p26142
g3
sS'name'
p26143
S'variable'
p26144
sS'required'
p26145
I01
sS'group_name'
p26146
NsasS'name'
p26147
S'/Bounds/ElasticEnergyAux'
p26148
sa(dp26149
S'description'
p26150
g3
sS'subblocks'
p26151
NsS'parameters'
p26152
(lp26153
(dp26154
S'description'
p26155
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26156
sS'cpp_type'
p26157
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26158
sS'default'
p26159
g3
sS'name'
p26160
S'block'
p26161
sS'required'
p26162
I00
sS'group_name'
p26163
Nsa(dp26164
S'description'
p26165
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26166
sS'cpp_type'
p26167
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26168
sS'default'
p26169
g3
sS'name'
p26170
S'boundary'
p26171
sS'required'
p26172
I00
sS'group_name'
p26173
Nsa(dp26174
S'description'
p26175
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26176
sS'cpp_type'
p26177
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26178
sS'default'
p26179
g3
sS'name'
p26180
S'control_tags'
p26181
sS'required'
p26182
I00
sS'group_name'
p26183
Nsa(dp26184
S'description'
p26185
S'Tolerance for distance between element and line\n'
p26186
sS'cpp_type'
p26187
S'double'
p26188
sS'default'
p26189
g3
sS'name'
p26190
S'dist_tol'
p26191
sS'required'
p26192
I01
sS'group_name'
p26193
Nsa(dp26194
S'name'
p26195
S'execute_on'
p26196
sS'cpp_type'
p26197
S'MultiMooseEnum'
p26198
sS'default'
p26199
S'INITIAL'
p26200
sS'description'
p26201
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26202
sS'required'
p26203
I00
sS'options'
p26204
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26205
sS'group_name'
p26206
Nsa(dp26207
S'description'
p26208
S'First point of line along which to pick elements\n'
p26209
sS'cpp_type'
p26210
S'libMesh::VectorValue<double>'
p26211
sS'default'
p26212
g3
sS'name'
p26213
S'line1'
p26214
sS'required'
p26215
I01
sS'group_name'
p26216
Nsa(dp26217
S'description'
p26218
S'Second point of line along which to pick elements\n'
p26219
sS'cpp_type'
p26220
S'libMesh::VectorValue<double>'
p26221
sS'default'
p26222
g3
sS'name'
p26223
S'line2'
p26224
sS'required'
p26225
I01
sS'group_name'
p26226
Nsa(dp26227
S'description'
p26228
S'ID of the line along which to pick elements\n'
p26229
sS'cpp_type'
p26230
S'int'
p26231
sS'default'
p26232
S'1'
p26233
sS'name'
p26234
S'line_id'
p26235
sS'required'
p26236
I00
sS'group_name'
p26237
Nsa(dp26238
S'description'
p26239
S'The seed for the master random number generator\n'
p26240
sS'cpp_type'
p26241
S'unsigned int'
p26242
sS'default'
p26243
S'0'
p26244
sS'name'
p26245
S'seed'
p26246
sS'required'
p26247
I00
sS'group_name'
p26248
S'Advanced'
p26249
sa(dp26250
S'description'
p26251
g3
sS'cpp_type'
p26252
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26253
sS'default'
p26254
S'ElementsOnLineAux'
p26255
sS'name'
p26256
S'type'
p26257
sS'required'
p26258
I00
sS'group_name'
p26259
Nsa(dp26260
S'description'
p26261
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26262
sS'cpp_type'
p26263
S'bool'
p26264
sS'default'
p26265
S'0'
p26266
sS'name'
p26267
S'use_displaced_mesh'
p26268
sS'required'
p26269
I00
sS'group_name'
p26270
S'Advanced'
p26271
sa(dp26272
S'description'
p26273
S'The name of the variable that this object applies to\n'
p26274
sS'cpp_type'
p26275
S'AuxVariableName'
p26276
sS'default'
p26277
g3
sS'name'
p26278
S'variable'
p26279
sS'required'
p26280
I01
sS'group_name'
p26281
NsasS'name'
p26282
S'/Bounds/ElementsOnLineAux'
p26283
sa(dp26284
S'description'
p26285
S'Feature detection by connectivity analysis\n'
p26286
sS'subblocks'
p26287
NsS'parameters'
p26288
(lp26289
(dp26290
S'description'
p26291
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26292
sS'cpp_type'
p26293
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26294
sS'default'
p26295
g3
sS'name'
p26296
S'block'
p26297
sS'required'
p26298
I00
sS'group_name'
p26299
Nsa(dp26300
S'description'
p26301
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26302
sS'cpp_type'
p26303
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26304
sS'default'
p26305
g3
sS'name'
p26306
S'boundary'
p26307
sS'required'
p26308
I00
sS'group_name'
p26309
Nsa(dp26310
S'description'
p26311
S'The FeatureFloodCount UserObject to get values from.\n'
p26312
sS'cpp_type'
p26313
S'UserObjectName'
p26314
sS'default'
p26315
g3
sS'name'
p26316
S'bubble_object'
p26317
sS'required'
p26318
I01
sS'group_name'
p26319
Nsa(dp26320
S'description'
p26321
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26322
sS'cpp_type'
p26323
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26324
sS'default'
p26325
g3
sS'name'
p26326
S'control_tags'
p26327
sS'required'
p26328
I00
sS'group_name'
p26329
Nsa(dp26330
S'name'
p26331
S'execute_on'
p26332
sS'cpp_type'
p26333
S'MultiMooseEnum'
p26334
sS'default'
p26335
S'LINEAR'
p26336
sS'description'
p26337
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26338
sS'required'
p26339
I00
sS'options'
p26340
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26341
sS'group_name'
p26342
Nsa(dp26343
S'name'
p26344
S'field_display'
p26345
sS'cpp_type'
p26346
S'MooseEnum'
p26347
sS'default'
p26348
S'UNIQUE_REGION'
p26349
sS'description'
p26350
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p26351
sS'required'
p26352
I00
sS'options'
p26353
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p26354
sS'group_name'
p26355
Nsa(dp26356
S'description'
p26357
S'The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n'
p26358
sS'cpp_type'
p26359
S'unsigned int'
p26360
sS'default'
p26361
S'0'
p26362
sS'name'
p26363
S'map_index'
p26364
sS'required'
p26365
I00
sS'group_name'
p26366
Nsa(dp26367
S'description'
p26368
S'The seed for the master random number generator\n'
p26369
sS'cpp_type'
p26370
S'unsigned int'
p26371
sS'default'
p26372
S'0'
p26373
sS'name'
p26374
S'seed'
p26375
sS'required'
p26376
I00
sS'group_name'
p26377
S'Advanced'
p26378
sa(dp26379
S'description'
p26380
g3
sS'cpp_type'
p26381
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26382
sS'default'
p26383
S'FeatureFloodCountAux'
p26384
sS'name'
p26385
S'type'
p26386
sS'required'
p26387
I00
sS'group_name'
p26388
Nsa(dp26389
S'description'
p26390
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26391
sS'cpp_type'
p26392
S'bool'
p26393
sS'default'
p26394
S'0'
p26395
sS'name'
p26396
S'use_displaced_mesh'
p26397
sS'required'
p26398
I00
sS'group_name'
p26399
S'Advanced'
p26400
sa(dp26401
S'description'
p26402
S'The name of the variable that this object applies to\n'
p26403
sS'cpp_type'
p26404
S'AuxVariableName'
p26405
sS'default'
p26406
g3
sS'name'
p26407
S'variable'
p26408
sS'required'
p26409
I01
sS'group_name'
p26410
NsasS'name'
p26411
S'/Bounds/FeatureFloodCountAux'
p26412
sa(dp26413
S'description'
p26414
g3
sS'subblocks'
p26415
NsS'parameters'
p26416
(lp26417
(dp26418
S'description'
p26419
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26420
sS'cpp_type'
p26421
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26422
sS'default'
p26423
g3
sS'name'
p26424
S'block'
p26425
sS'required'
p26426
I00
sS'group_name'
p26427
Nsa(dp26428
S'description'
p26429
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26430
sS'cpp_type'
p26431
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26432
sS'default'
p26433
g3
sS'name'
p26434
S'boundary'
p26435
sS'required'
p26436
I00
sS'group_name'
p26437
Nsa(dp26438
S'description'
p26439
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26440
sS'cpp_type'
p26441
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26442
sS'default'
p26443
g3
sS'name'
p26444
S'control_tags'
p26445
sS'required'
p26446
I00
sS'group_name'
p26447
Nsa(dp26448
S'name'
p26449
S'execute_on'
p26450
sS'cpp_type'
p26451
S'MultiMooseEnum'
p26452
sS'default'
p26453
S'LINEAR'
p26454
sS'description'
p26455
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26456
sS'required'
p26457
I00
sS'options'
p26458
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26459
sS'group_name'
p26460
Nsa(dp26461
S'description'
p26462
S'The function to use as the value\n'
p26463
sS'cpp_type'
p26464
S'FunctionName'
p26465
sS'default'
p26466
g3
sS'name'
p26467
S'function'
p26468
sS'required'
p26469
I01
sS'group_name'
p26470
Nsa(dp26471
S'description'
p26472
S'The seed for the master random number generator\n'
p26473
sS'cpp_type'
p26474
S'unsigned int'
p26475
sS'default'
p26476
S'0'
p26477
sS'name'
p26478
S'seed'
p26479
sS'required'
p26480
I00
sS'group_name'
p26481
S'Advanced'
p26482
sa(dp26483
S'description'
p26484
g3
sS'cpp_type'
p26485
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26486
sS'default'
p26487
S'FunctionAux'
p26488
sS'name'
p26489
S'type'
p26490
sS'required'
p26491
I00
sS'group_name'
p26492
Nsa(dp26493
S'description'
p26494
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26495
sS'cpp_type'
p26496
S'bool'
p26497
sS'default'
p26498
S'0'
p26499
sS'name'
p26500
S'use_displaced_mesh'
p26501
sS'required'
p26502
I00
sS'group_name'
p26503
S'Advanced'
p26504
sa(dp26505
S'description'
p26506
S'The name of the variable that this object applies to\n'
p26507
sS'cpp_type'
p26508
S'AuxVariableName'
p26509
sS'default'
p26510
g3
sS'name'
p26511
S'variable'
p26512
sS'required'
p26513
I01
sS'group_name'
p26514
NsasS'name'
p26515
S'/Bounds/FunctionAux'
p26516
sa(dp26517
S'description'
p26518
g3
sS'subblocks'
p26519
NsS'parameters'
p26520
(lp26521
(dp26522
S'description'
p26523
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26524
sS'cpp_type'
p26525
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26526
sS'default'
p26527
g3
sS'name'
p26528
S'block'
p26529
sS'required'
p26530
I00
sS'group_name'
p26531
Nsa(dp26532
S'description'
p26533
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26534
sS'cpp_type'
p26535
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26536
sS'default'
p26537
g3
sS'name'
p26538
S'boundary'
p26539
sS'required'
p26540
I00
sS'group_name'
p26541
Nsa(dp26542
S'description'
p26543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26544
sS'cpp_type'
p26545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26546
sS'default'
p26547
g3
sS'name'
p26548
S'control_tags'
p26549
sS'required'
p26550
I00
sS'group_name'
p26551
Nsa(dp26552
S'name'
p26553
S'execute_on'
p26554
sS'cpp_type'
p26555
S'MultiMooseEnum'
p26556
sS'default'
p26557
S'LINEAR'
p26558
sS'description'
p26559
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26560
sS'required'
p26561
I00
sS'options'
p26562
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26563
sS'group_name'
p26564
Nsa(dp26565
S'description'
p26566
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p26567
sS'cpp_type'
p26568
S'double'
p26569
sS'default'
p26570
g3
sS'name'
p26571
S'normal_smoothing_distance'
p26572
sS'required'
p26573
I00
sS'group_name'
p26574
Nsa(dp26575
S'description'
p26576
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p26577
sS'cpp_type'
p26578
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26579
sS'default'
p26580
g3
sS'name'
p26581
S'normal_smoothing_method'
p26582
sS'required'
p26583
I00
sS'group_name'
p26584
Nsa(dp26585
S'name'
p26586
S'order'
p26587
sS'cpp_type'
p26588
S'MooseEnum'
p26589
sS'default'
p26590
S'FIRST'
p26591
sS'description'
p26592
S'The finite element order\n'
p26593
sS'required'
p26594
I00
sS'options'
p26595
S'FIRST SECOND THIRD FOURTH'
p26596
sS'group_name'
p26597
Nsa(dp26598
S'description'
p26599
S'The boundary on the other side of a gap.\n'
p26600
sS'cpp_type'
p26601
S'BoundaryName'
p26602
sS'default'
p26603
g3
sS'name'
p26604
S'paired_boundary'
p26605
sS'required'
p26606
I01
sS'group_name'
p26607
Nsa(dp26608
S'description'
p26609
S'The variable to get the value of.\n'
p26610
sS'cpp_type'
p26611
S'VariableName'
p26612
sS'default'
p26613
g3
sS'name'
p26614
S'paired_variable'
p26615
sS'required'
p26616
I01
sS'group_name'
p26617
Nsa(dp26618
S'description'
p26619
S'The seed for the master random number generator\n'
p26620
sS'cpp_type'
p26621
S'unsigned int'
p26622
sS'default'
p26623
S'0'
p26624
sS'name'
p26625
S'seed'
p26626
sS'required'
p26627
I00
sS'group_name'
p26628
S'Advanced'
p26629
sa(dp26630
S'description'
p26631
S'Tangential distance to extend edges of contact surfaces\n'
p26632
sS'cpp_type'
p26633
S'double'
p26634
sS'default'
p26635
g3
sS'name'
p26636
S'tangential_tolerance'
p26637
sS'required'
p26638
I00
sS'group_name'
p26639
Nsa(dp26640
S'description'
p26641
g3
sS'cpp_type'
p26642
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26643
sS'default'
p26644
S'GapValueAux'
p26645
sS'name'
p26646
S'type'
p26647
sS'required'
p26648
I00
sS'group_name'
p26649
Nsa(dp26650
S'description'
p26651
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26652
sS'cpp_type'
p26653
S'bool'
p26654
sS'default'
p26655
S'1'
p26656
sS'name'
p26657
S'use_displaced_mesh'
p26658
sS'required'
p26659
I00
sS'group_name'
p26660
S'Advanced'
p26661
sa(dp26662
S'description'
p26663
S'The name of the variable that this object applies to\n'
p26664
sS'cpp_type'
p26665
S'AuxVariableName'
p26666
sS'default'
p26667
g3
sS'name'
p26668
S'variable'
p26669
sS'required'
p26670
I01
sS'group_name'
p26671
Nsa(dp26672
S'description'
p26673
S'Whether to output warning messages concerning nodes not being found\n'
p26674
sS'cpp_type'
p26675
S'bool'
p26676
sS'default'
p26677
S'0'
p26678
sS'name'
p26679
S'warnings'
p26680
sS'required'
p26681
I00
sS'group_name'
p26682
NsasS'name'
p26683
S'/Bounds/GapValueAux'
p26684
sa(dp26685
S'description'
p26686
g3
sS'subblocks'
p26687
NsS'parameters'
p26688
(lp26689
(dp26690
S'description'
p26691
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26692
sS'cpp_type'
p26693
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26694
sS'default'
p26695
g3
sS'name'
p26696
S'block'
p26697
sS'required'
p26698
I00
sS'group_name'
p26699
Nsa(dp26700
S'description'
p26701
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26702
sS'cpp_type'
p26703
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26704
sS'default'
p26705
g3
sS'name'
p26706
S'boundary'
p26707
sS'required'
p26708
I00
sS'group_name'
p26709
Nsa(dp26710
S'description'
p26711
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26712
sS'cpp_type'
p26713
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26714
sS'default'
p26715
g3
sS'name'
p26716
S'control_tags'
p26717
sS'required'
p26718
I00
sS'group_name'
p26719
Nsa(dp26720
S'name'
p26721
S'execute_on'
p26722
sS'cpp_type'
p26723
S'MultiMooseEnum'
p26724
sS'default'
p26725
S'LINEAR'
p26726
sS'description'
p26727
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26728
sS'required'
p26729
I00
sS'options'
p26730
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26731
sS'group_name'
p26732
Nsa(dp26733
S'description'
p26734
S'The seed for the master random number generator\n'
p26735
sS'cpp_type'
p26736
S'unsigned int'
p26737
sS'default'
p26738
S'0'
p26739
sS'name'
p26740
S'seed'
p26741
sS'required'
p26742
I00
sS'group_name'
p26743
S'Advanced'
p26744
sa(dp26745
S'description'
p26746
g3
sS'cpp_type'
p26747
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26748
sS'default'
p26749
S'INSCourant'
p26750
sS'name'
p26751
S'type'
p26752
sS'required'
p26753
I00
sS'group_name'
p26754
Nsa(dp26755
S'description'
p26756
S'x-velocity\n'
p26757
sS'cpp_type'
p26758
S'std::vector<VariableName>'
p26759
sS'default'
p26760
g3
sS'name'
p26761
S'u'
p26762
sS'required'
p26763
I01
sS'group_name'
p26764
Nsa(dp26765
S'description'
p26766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26767
sS'cpp_type'
p26768
S'bool'
p26769
sS'default'
p26770
S'0'
p26771
sS'name'
p26772
S'use_displaced_mesh'
p26773
sS'required'
p26774
I00
sS'group_name'
p26775
S'Advanced'
p26776
sa(dp26777
S'description'
p26778
S'y-velocity\n'
p26779
sS'cpp_type'
p26780
S'std::vector<VariableName>'
p26781
sS'default'
p26782
g3
sS'name'
p26783
S'v'
p26784
sS'required'
p26785
I00
sS'group_name'
p26786
Nsa(dp26787
S'description'
p26788
S'The name of the variable that this object applies to\n'
p26789
sS'cpp_type'
p26790
S'AuxVariableName'
p26791
sS'default'
p26792
g3
sS'name'
p26793
S'variable'
p26794
sS'required'
p26795
I01
sS'group_name'
p26796
Nsa(dp26797
S'description'
p26798
S'z-velocity\n'
p26799
sS'cpp_type'
p26800
S'std::vector<VariableName>'
p26801
sS'default'
p26802
g3
sS'name'
p26803
S'w'
p26804
sS'required'
p26805
I00
sS'group_name'
p26806
NsasS'name'
p26807
S'/Bounds/INSCourant'
p26808
sa(dp26809
S'description'
p26810
g3
sS'subblocks'
p26811
NsS'parameters'
p26812
(lp26813
(dp26814
S'description'
p26815
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26816
sS'cpp_type'
p26817
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26818
sS'default'
p26819
g3
sS'name'
p26820
S'block'
p26821
sS'required'
p26822
I00
sS'group_name'
p26823
Nsa(dp26824
S'description'
p26825
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26826
sS'cpp_type'
p26827
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26828
sS'default'
p26829
g3
sS'name'
p26830
S'boundary'
p26831
sS'required'
p26832
I00
sS'group_name'
p26833
Nsa(dp26834
S'description'
p26835
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26836
sS'cpp_type'
p26837
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26838
sS'default'
p26839
g3
sS'name'
p26840
S'control_tags'
p26841
sS'required'
p26842
I00
sS'group_name'
p26843
Nsa(dp26844
S'name'
p26845
S'execute_on'
p26846
sS'cpp_type'
p26847
S'MultiMooseEnum'
p26848
sS'default'
p26849
S'LINEAR'
p26850
sS'description'
p26851
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26852
sS'required'
p26853
I00
sS'options'
p26854
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26855
sS'group_name'
p26856
Nsa(dp26857
S'description'
p26858
S'The seed for the master random number generator\n'
p26859
sS'cpp_type'
p26860
S'unsigned int'
p26861
sS'default'
p26862
S'0'
p26863
sS'name'
p26864
S'seed'
p26865
sS'required'
p26866
I00
sS'group_name'
p26867
S'Advanced'
p26868
sa(dp26869
S'description'
p26870
g3
sS'cpp_type'
p26871
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p26872
sS'default'
p26873
S'INSDivergenceAux'
p26874
sS'name'
p26875
S'type'
p26876
sS'required'
p26877
I00
sS'group_name'
p26878
Nsa(dp26879
S'description'
p26880
S'x-velocity\n'
p26881
sS'cpp_type'
p26882
S'std::vector<VariableName>'
p26883
sS'default'
p26884
g3
sS'name'
p26885
S'u'
p26886
sS'required'
p26887
I01
sS'group_name'
p26888
Nsa(dp26889
S'description'
p26890
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26891
sS'cpp_type'
p26892
S'bool'
p26893
sS'default'
p26894
S'0'
p26895
sS'name'
p26896
S'use_displaced_mesh'
p26897
sS'required'
p26898
I00
sS'group_name'
p26899
S'Advanced'
p26900
sa(dp26901
S'description'
p26902
S'y-velocity\n'
p26903
sS'cpp_type'
p26904
S'std::vector<VariableName>'
p26905
sS'default'
p26906
g3
sS'name'
p26907
S'v'
p26908
sS'required'
p26909
I00
sS'group_name'
p26910
Nsa(dp26911
S'description'
p26912
S'The name of the variable that this object applies to\n'
p26913
sS'cpp_type'
p26914
S'AuxVariableName'
p26915
sS'default'
p26916
g3
sS'name'
p26917
S'variable'
p26918
sS'required'
p26919
I01
sS'group_name'
p26920
Nsa(dp26921
S'description'
p26922
S'z-velocity\n'
p26923
sS'cpp_type'
p26924
S'std::vector<VariableName>'
p26925
sS'default'
p26926
g3
sS'name'
p26927
S'w'
p26928
sS'required'
p26929
I00
sS'group_name'
p26930
NsasS'name'
p26931
S'/Bounds/INSDivergenceAux'
p26932
sa(dp26933
S'description'
p26934
g3
sS'subblocks'
p26935
NsS'parameters'
p26936
(lp26937
(dp26938
S'description'
p26939
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26940
sS'cpp_type'
p26941
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26942
sS'default'
p26943
g3
sS'name'
p26944
S'block'
p26945
sS'required'
p26946
I00
sS'group_name'
p26947
Nsa(dp26948
S'description'
p26949
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26950
sS'cpp_type'
p26951
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26952
sS'default'
p26953
g3
sS'name'
p26954
S'boundary'
p26955
sS'required'
p26956
I00
sS'group_name'
p26957
Nsa(dp26958
S'description'
p26959
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26960
sS'cpp_type'
p26961
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p26962
sS'default'
p26963
g3
sS'name'
p26964
S'control_tags'
p26965
sS'required'
p26966
I00
sS'group_name'
p26967
Nsa(dp26968
S'name'
p26969
S'execute_on'
p26970
sS'cpp_type'
p26971
S'MultiMooseEnum'
p26972
sS'default'
p26973
S'LINEAR'
p26974
sS'description'
p26975
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p26976
sS'required'
p26977
I00
sS'options'
p26978
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p26979
sS'group_name'
p26980
Nsa(dp26981
S'description'
p26982
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p26983
sS'cpp_type'
p26984
S'MaterialPropertyName'
p26985
sS'default'
p26986
g3
sS'name'
p26987
S'fa_name'
p26988
sS'required'
p26989
I01
sS'group_name'
p26990
Nsa(dp26991
S'description'
p26992
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p26993
sS'cpp_type'
p26994
S'MaterialPropertyName'
p26995
sS'default'
p26996
g3
sS'name'
p26997
S'fb_name'
p26998
sS'required'
p26999
I01
sS'group_name'
p27000
Nsa(dp27001
S'description'
p27002
S'Base name for the double well function g(eta)\n'
p27003
sS'cpp_type'
p27004
S'MaterialPropertyName'
p27005
sS'default'
p27006
S'g'
p27007
sS'name'
p27008
S'g_name'
p27009
sS'required'
p27010
I00
sS'group_name'
p27011
Nsa(dp27012
S'description'
p27013
S'Base name for the switching function h(eta)\n'
p27014
sS'cpp_type'
p27015
S'MaterialPropertyName'
p27016
sS'default'
p27017
S'h'
p27018
sS'name'
p27019
S'h_name'
p27020
sS'required'
p27021
I00
sS'group_name'
p27022
Nsa(dp27023
S'description'
p27024
S'The seed for the master random number generator\n'
p27025
sS'cpp_type'
p27026
S'unsigned int'
p27027
sS'default'
p27028
S'0'
p27029
sS'name'
p27030
S'seed'
p27031
sS'required'
p27032
I00
sS'group_name'
p27033
S'Advanced'
p27034
sa(dp27035
S'description'
p27036
g3
sS'cpp_type'
p27037
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27038
sS'default'
p27039
S'KKSGlobalFreeEnergy'
p27040
sS'name'
p27041
S'type'
p27042
sS'required'
p27043
I00
sS'group_name'
p27044
Nsa(dp27045
S'description'
p27046
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27047
sS'cpp_type'
p27048
S'bool'
p27049
sS'default'
p27050
S'0'
p27051
sS'name'
p27052
S'use_displaced_mesh'
p27053
sS'required'
p27054
I00
sS'group_name'
p27055
S'Advanced'
p27056
sa(dp27057
S'description'
p27058
S'The name of the variable that this object applies to\n'
p27059
sS'cpp_type'
p27060
S'AuxVariableName'
p27061
sS'default'
p27062
g3
sS'name'
p27063
S'variable'
p27064
sS'required'
p27065
I01
sS'group_name'
p27066
Nsa(dp27067
S'description'
p27068
S'Double well height parameter\n'
p27069
sS'cpp_type'
p27070
S'double'
p27071
sS'default'
p27072
g3
sS'name'
p27073
S'w'
p27074
sS'required'
p27075
I01
sS'group_name'
p27076
NsasS'name'
p27077
S'/Bounds/KKSGlobalFreeEnergy'
p27078
sa(dp27079
S'description'
p27080
g3
sS'subblocks'
p27081
NsS'parameters'
p27082
(lp27083
(dp27084
S'description'
p27085
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27086
sS'cpp_type'
p27087
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27088
sS'default'
p27089
g3
sS'name'
p27090
S'block'
p27091
sS'required'
p27092
I00
sS'group_name'
p27093
Nsa(dp27094
S'description'
p27095
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27096
sS'cpp_type'
p27097
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27098
sS'default'
p27099
g3
sS'name'
p27100
S'boundary'
p27101
sS'required'
p27102
I00
sS'group_name'
p27103
Nsa(dp27104
S'description'
p27105
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27106
sS'cpp_type'
p27107
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27108
sS'default'
p27109
g3
sS'name'
p27110
S'control_tags'
p27111
sS'required'
p27112
I00
sS'group_name'
p27113
Nsa(dp27114
S'description'
p27115
S'Activation energy, J/mol\n'
p27116
sS'cpp_type'
p27117
S'double'
p27118
sS'default'
p27119
S'29100'
p27120
sS'name'
p27121
S'e_act'
p27122
sS'required'
p27123
I00
sS'group_name'
p27124
Nsa(dp27125
S'name'
p27126
S'execute_on'
p27127
sS'cpp_type'
p27128
S'MultiMooseEnum'
p27129
sS'default'
p27130
S'LINEAR'
p27131
sS'description'
p27132
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27133
sS'required'
p27134
I00
sS'options'
p27135
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p27136
sS'group_name'
p27137
Nsa(dp27138
S'description'
p27139
S'Gas constant, in J/mol K\n'
p27140
sS'cpp_type'
p27141
S'double'
p27142
sS'default'
p27143
S'8.31434'
p27144
sS'name'
p27145
S'gas_const'
p27146
sS'required'
p27147
I00
sS'group_name'
p27148
Nsa(dp27149
S'description'
p27150
S'The equilibrium constant of the dissolution reaction\n'
p27151
sS'cpp_type'
p27152
S'double'
p27153
sS'default'
p27154
S'0'
p27155
sS'name'
p27156
S'log_k'
p27157
sS'required'
p27158
I00
sS'group_name'
p27159
Nsa(dp27160
S'description'
p27161
S'Specific reactive surface area in m^2/L solution\n'
p27162
sS'cpp_type'
p27163
S'double'
p27164
sS'default'
p27165
S'0.1'
p27166
sS'name'
p27167
S'r_area'
p27168
sS'required'
p27169
I00
sS'group_name'
p27170
Nsa(dp27171
S'description'
p27172
S'Kinetic rate constant in mol/m^2 s\n'
p27173
sS'cpp_type'
p27174
S'double'
p27175
sS'default'
p27176
S'6.45654e-08'
p27177
sS'name'
p27178
S'ref_kconst'
p27179
sS'required'
p27180
I00
sS'group_name'
p27181
Nsa(dp27182
S'description'
p27183
S'Reference temperature, K\n'
p27184
sS'cpp_type'
p27185
S'double'
p27186
sS'default'
p27187
S'298.15'
p27188
sS'name'
p27189
S'ref_temp'
p27190
sS'required'
p27191
I00
sS'group_name'
p27192
Nsa(dp27193
S'description'
p27194
S'The seed for the master random number generator\n'
p27195
sS'cpp_type'
p27196
S'unsigned int'
p27197
sS'default'
p27198
S'0'
p27199
sS'name'
p27200
S'seed'
p27201
sS'required'
p27202
I00
sS'group_name'
p27203
S'Advanced'
p27204
sa(dp27205
S'description'
p27206
S'The stochiometric coefficients of reactant species\n'
p27207
sS'cpp_type'
p27208
S'std::vector<double, std::allocator<double> >'
p27209
sS'default'
p27210
g3
sS'name'
p27211
S'sto_v'
p27212
sS'required'
p27213
I01
sS'group_name'
p27214
Nsa(dp27215
S'description'
p27216
S'System temperature at simulation, K\n'
p27217
sS'cpp_type'
p27218
S'double'
p27219
sS'default'
p27220
S'298.15'
p27221
sS'name'
p27222
S'sys_temp'
p27223
sS'required'
p27224
I00
sS'group_name'
p27225
Nsa(dp27226
S'description'
p27227
g3
sS'cpp_type'
p27228
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27229
sS'default'
p27230
S'KineticDisPreConcAux'
p27231
sS'name'
p27232
S'type'
p27233
sS'required'
p27234
I00
sS'group_name'
p27235
Nsa(dp27236
S'description'
p27237
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27238
sS'cpp_type'
p27239
S'bool'
p27240
sS'default'
p27241
S'0'
p27242
sS'name'
p27243
S'use_displaced_mesh'
p27244
sS'required'
p27245
I00
sS'group_name'
p27246
S'Advanced'
p27247
sa(dp27248
S'description'
p27249
S'The list of reactant species\n'
p27250
sS'cpp_type'
p27251
S'std::vector<VariableName>'
p27252
sS'default'
p27253
g3
sS'name'
p27254
S'v'
p27255
sS'required'
p27256
I00
sS'group_name'
p27257
Nsa(dp27258
S'description'
p27259
S'The name of the variable that this object applies to\n'
p27260
sS'cpp_type'
p27261
S'AuxVariableName'
p27262
sS'default'
p27263
g3
sS'name'
p27264
S'variable'
p27265
sS'required'
p27266
I01
sS'group_name'
p27267
NsasS'name'
p27268
S'/Bounds/KineticDisPreConcAux'
p27269
sa(dp27270
S'description'
p27271
g3
sS'subblocks'
p27272
NsS'parameters'
p27273
(lp27274
(dp27275
S'description'
p27276
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27277
sS'cpp_type'
p27278
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27279
sS'default'
p27280
g3
sS'name'
p27281
S'block'
p27282
sS'required'
p27283
I00
sS'group_name'
p27284
Nsa(dp27285
S'description'
p27286
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27287
sS'cpp_type'
p27288
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27289
sS'default'
p27290
g3
sS'name'
p27291
S'boundary'
p27292
sS'required'
p27293
I00
sS'group_name'
p27294
Nsa(dp27295
S'description'
p27296
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27297
sS'cpp_type'
p27298
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27299
sS'default'
p27300
g3
sS'name'
p27301
S'control_tags'
p27302
sS'required'
p27303
I00
sS'group_name'
p27304
Nsa(dp27305
S'description'
p27306
S'Activation energy, J/mol\n'
p27307
sS'cpp_type'
p27308
S'double'
p27309
sS'default'
p27310
S'29100'
p27311
sS'name'
p27312
S'e_act'
p27313
sS'required'
p27314
I00
sS'group_name'
p27315
Nsa(dp27316
S'name'
p27317
S'execute_on'
p27318
sS'cpp_type'
p27319
S'MultiMooseEnum'
p27320
sS'default'
p27321
S'LINEAR'
p27322
sS'description'
p27323
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27324
sS'required'
p27325
I00
sS'options'
p27326
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p27327
sS'group_name'
p27328
Nsa(dp27329
S'description'
p27330
S'Gas constant, in J/mol K\n'
p27331
sS'cpp_type'
p27332
S'double'
p27333
sS'default'
p27334
S'8.31434'
p27335
sS'name'
p27336
S'gas_const'
p27337
sS'required'
p27338
I00
sS'group_name'
p27339
Nsa(dp27340
S'description'
p27341
S'The equilibrium constant of the dissolution reaction\n'
p27342
sS'cpp_type'
p27343
S'double'
p27344
sS'default'
p27345
S'0'
p27346
sS'name'
p27347
S'log_k'
p27348
sS'required'
p27349
I00
sS'group_name'
p27350
Nsa(dp27351
S'description'
p27352
S'Specific reactive surface area in m^2/L solution\n'
p27353
sS'cpp_type'
p27354
S'double'
p27355
sS'default'
p27356
S'0.1'
p27357
sS'name'
p27358
S'r_area'
p27359
sS'required'
p27360
I00
sS'group_name'
p27361
Nsa(dp27362
S'description'
p27363
S'Kinetic rate constant in mol/m^2 s\n'
p27364
sS'cpp_type'
p27365
S'double'
p27366
sS'default'
p27367
S'6.45654e-08'
p27368
sS'name'
p27369
S'ref_kconst'
p27370
sS'required'
p27371
I00
sS'group_name'
p27372
Nsa(dp27373
S'description'
p27374
S'Reference temperature, K\n'
p27375
sS'cpp_type'
p27376
S'double'
p27377
sS'default'
p27378
S'298.15'
p27379
sS'name'
p27380
S'ref_temp'
p27381
sS'required'
p27382
I00
sS'group_name'
p27383
Nsa(dp27384
S'description'
p27385
S'The seed for the master random number generator\n'
p27386
sS'cpp_type'
p27387
S'unsigned int'
p27388
sS'default'
p27389
S'0'
p27390
sS'name'
p27391
S'seed'
p27392
sS'required'
p27393
I00
sS'group_name'
p27394
S'Advanced'
p27395
sa(dp27396
S'description'
p27397
S'The stochiometric coefficients of reactant species\n'
p27398
sS'cpp_type'
p27399
S'std::vector<double, std::allocator<double> >'
p27400
sS'default'
p27401
g3
sS'name'
p27402
S'sto_v'
p27403
sS'required'
p27404
I01
sS'group_name'
p27405
Nsa(dp27406
S'description'
p27407
S'System temperature at simulation, K\n'
p27408
sS'cpp_type'
p27409
S'double'
p27410
sS'default'
p27411
S'298.15'
p27412
sS'name'
p27413
S'sys_temp'
p27414
sS'required'
p27415
I00
sS'group_name'
p27416
Nsa(dp27417
S'description'
p27418
g3
sS'cpp_type'
p27419
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27420
sS'default'
p27421
S'KineticDisPreRateAux'
p27422
sS'name'
p27423
S'type'
p27424
sS'required'
p27425
I00
sS'group_name'
p27426
Nsa(dp27427
S'description'
p27428
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27429
sS'cpp_type'
p27430
S'bool'
p27431
sS'default'
p27432
S'0'
p27433
sS'name'
p27434
S'use_displaced_mesh'
p27435
sS'required'
p27436
I00
sS'group_name'
p27437
S'Advanced'
p27438
sa(dp27439
S'description'
p27440
S'The list of reactant species\n'
p27441
sS'cpp_type'
p27442
S'std::vector<VariableName>'
p27443
sS'default'
p27444
g3
sS'name'
p27445
S'v'
p27446
sS'required'
p27447
I00
sS'group_name'
p27448
Nsa(dp27449
S'description'
p27450
S'The name of the variable that this object applies to\n'
p27451
sS'cpp_type'
p27452
S'AuxVariableName'
p27453
sS'default'
p27454
g3
sS'name'
p27455
S'variable'
p27456
sS'required'
p27457
I01
sS'group_name'
p27458
NsasS'name'
p27459
S'/Bounds/KineticDisPreRateAux'
p27460
sa(dp27461
S'description'
p27462
g3
sS'subblocks'
p27463
NsS'parameters'
p27464
(lp27465
(dp27466
S'description'
p27467
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27468
sS'cpp_type'
p27469
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27470
sS'default'
p27471
g3
sS'name'
p27472
S'block'
p27473
sS'required'
p27474
I00
sS'group_name'
p27475
Nsa(dp27476
S'description'
p27477
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27478
sS'cpp_type'
p27479
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27480
sS'default'
p27481
g3
sS'name'
p27482
S'boundary'
p27483
sS'required'
p27484
I00
sS'group_name'
p27485
Nsa(dp27486
S'description'
p27487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27488
sS'cpp_type'
p27489
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27490
sS'default'
p27491
g3
sS'name'
p27492
S'control_tags'
p27493
sS'required'
p27494
I00
sS'group_name'
p27495
Nsa(dp27496
S'name'
p27497
S'execute_on'
p27498
sS'cpp_type'
p27499
S'MultiMooseEnum'
p27500
sS'default'
p27501
S'LINEAR'
p27502
sS'description'
p27503
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27504
sS'required'
p27505
I00
sS'options'
p27506
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p27507
sS'group_name'
p27508
Nsa(dp27509
S'description'
p27510
S'The factor by which to multiply your material property for visualization\n'
p27511
sS'cpp_type'
p27512
S'double'
p27513
sS'default'
p27514
S'1'
p27515
sS'name'
p27516
S'factor'
p27517
sS'required'
p27518
I00
sS'group_name'
p27519
Nsa(dp27520
S'description'
p27521
S'The offset to add to your material property for visualization\n'
p27522
sS'cpp_type'
p27523
S'double'
p27524
sS'default'
p27525
S'0'
p27526
sS'name'
p27527
S'offset'
p27528
sS'required'
p27529
I00
sS'group_name'
p27530
Nsa(dp27531
S'description'
p27532
S'The scalar material property name\n'
p27533
sS'cpp_type'
p27534
S'MaterialPropertyName'
p27535
sS'default'
p27536
g3
sS'name'
p27537
S'property'
p27538
sS'required'
p27539
I01
sS'group_name'
p27540
Nsa(dp27541
S'description'
p27542
S'The seed for the master random number generator\n'
p27543
sS'cpp_type'
p27544
S'unsigned int'
p27545
sS'default'
p27546
S'0'
p27547
sS'name'
p27548
S'seed'
p27549
sS'required'
p27550
I00
sS'group_name'
p27551
S'Advanced'
p27552
sa(dp27553
S'description'
p27554
g3
sS'cpp_type'
p27555
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27556
sS'default'
p27557
S'MaterialRealAux'
p27558
sS'name'
p27559
S'type'
p27560
sS'required'
p27561
I00
sS'group_name'
p27562
Nsa(dp27563
S'description'
p27564
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27565
sS'cpp_type'
p27566
S'bool'
p27567
sS'default'
p27568
S'0'
p27569
sS'name'
p27570
S'use_displaced_mesh'
p27571
sS'required'
p27572
I00
sS'group_name'
p27573
S'Advanced'
p27574
sa(dp27575
S'description'
p27576
S'The name of the variable that this object applies to\n'
p27577
sS'cpp_type'
p27578
S'AuxVariableName'
p27579
sS'default'
p27580
g3
sS'name'
p27581
S'variable'
p27582
sS'required'
p27583
I01
sS'group_name'
p27584
NsasS'name'
p27585
S'/Bounds/MaterialRealAux'
p27586
sa(dp27587
S'description'
p27588
g3
sS'subblocks'
p27589
NsS'parameters'
p27590
(lp27591
(dp27592
S'description'
p27593
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27594
sS'cpp_type'
p27595
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27596
sS'default'
p27597
g3
sS'name'
p27598
S'block'
p27599
sS'required'
p27600
I00
sS'group_name'
p27601
Nsa(dp27602
S'description'
p27603
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27604
sS'cpp_type'
p27605
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27606
sS'default'
p27607
g3
sS'name'
p27608
S'boundary'
p27609
sS'required'
p27610
I00
sS'group_name'
p27611
Nsa(dp27612
S'description'
p27613
S'The column component to consider for this kernel\n'
p27614
sS'cpp_type'
p27615
S'unsigned int'
p27616
sS'default'
p27617
S'0'
p27618
sS'name'
p27619
S'column'
p27620
sS'required'
p27621
I00
sS'group_name'
p27622
Nsa(dp27623
S'description'
p27624
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27625
sS'cpp_type'
p27626
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27627
sS'default'
p27628
g3
sS'name'
p27629
S'control_tags'
p27630
sS'required'
p27631
I00
sS'group_name'
p27632
Nsa(dp27633
S'name'
p27634
S'execute_on'
p27635
sS'cpp_type'
p27636
S'MultiMooseEnum'
p27637
sS'default'
p27638
S'LINEAR'
p27639
sS'description'
p27640
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27641
sS'required'
p27642
I00
sS'options'
p27643
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p27644
sS'group_name'
p27645
Nsa(dp27646
S'description'
p27647
S'The factor by which to multiply your material property for visualization\n'
p27648
sS'cpp_type'
p27649
S'double'
p27650
sS'default'
p27651
S'1'
p27652
sS'name'
p27653
S'factor'
p27654
sS'required'
p27655
I00
sS'group_name'
p27656
Nsa(dp27657
S'description'
p27658
S'The offset to add to your material property for visualization\n'
p27659
sS'cpp_type'
p27660
S'double'
p27661
sS'default'
p27662
S'0'
p27663
sS'name'
p27664
S'offset'
p27665
sS'required'
p27666
I00
sS'group_name'
p27667
Nsa(dp27668
S'description'
p27669
S'The scalar material property name\n'
p27670
sS'cpp_type'
p27671
S'MaterialPropertyName'
p27672
sS'default'
p27673
g3
sS'name'
p27674
S'property'
p27675
sS'required'
p27676
I01
sS'group_name'
p27677
Nsa(dp27678
S'description'
p27679
S'The row component to consider for this kernel\n'
p27680
sS'cpp_type'
p27681
S'unsigned int'
p27682
sS'default'
p27683
S'0'
p27684
sS'name'
p27685
S'row'
p27686
sS'required'
p27687
I00
sS'group_name'
p27688
Nsa(dp27689
S'description'
p27690
S'The seed for the master random number generator\n'
p27691
sS'cpp_type'
p27692
S'unsigned int'
p27693
sS'default'
p27694
S'0'
p27695
sS'name'
p27696
S'seed'
p27697
sS'required'
p27698
I00
sS'group_name'
p27699
S'Advanced'
p27700
sa(dp27701
S'description'
p27702
g3
sS'cpp_type'
p27703
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27704
sS'default'
p27705
S'MaterialRealDenseMatrixAux'
p27706
sS'name'
p27707
S'type'
p27708
sS'required'
p27709
I00
sS'group_name'
p27710
Nsa(dp27711
S'description'
p27712
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27713
sS'cpp_type'
p27714
S'bool'
p27715
sS'default'
p27716
S'0'
p27717
sS'name'
p27718
S'use_displaced_mesh'
p27719
sS'required'
p27720
I00
sS'group_name'
p27721
S'Advanced'
p27722
sa(dp27723
S'description'
p27724
S'The name of the variable that this object applies to\n'
p27725
sS'cpp_type'
p27726
S'AuxVariableName'
p27727
sS'default'
p27728
g3
sS'name'
p27729
S'variable'
p27730
sS'required'
p27731
I01
sS'group_name'
p27732
NsasS'name'
p27733
S'/Bounds/MaterialRealDenseMatrixAux'
p27734
sa(dp27735
S'description'
p27736
g3
sS'subblocks'
p27737
NsS'parameters'
p27738
(lp27739
(dp27740
S'description'
p27741
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27742
sS'cpp_type'
p27743
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27744
sS'default'
p27745
g3
sS'name'
p27746
S'block'
p27747
sS'required'
p27748
I00
sS'group_name'
p27749
Nsa(dp27750
S'description'
p27751
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27752
sS'cpp_type'
p27753
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27754
sS'default'
p27755
g3
sS'name'
p27756
S'boundary'
p27757
sS'required'
p27758
I00
sS'group_name'
p27759
Nsa(dp27760
S'description'
p27761
S'The column component to consider for this kernel\n'
p27762
sS'cpp_type'
p27763
S'unsigned int'
p27764
sS'default'
p27765
S'0'
p27766
sS'name'
p27767
S'column'
p27768
sS'required'
p27769
I00
sS'group_name'
p27770
Nsa(dp27771
S'description'
p27772
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27773
sS'cpp_type'
p27774
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27775
sS'default'
p27776
g3
sS'name'
p27777
S'control_tags'
p27778
sS'required'
p27779
I00
sS'group_name'
p27780
Nsa(dp27781
S'name'
p27782
S'execute_on'
p27783
sS'cpp_type'
p27784
S'MultiMooseEnum'
p27785
sS'default'
p27786
S'LINEAR'
p27787
sS'description'
p27788
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27789
sS'required'
p27790
I00
sS'options'
p27791
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p27792
sS'group_name'
p27793
Nsa(dp27794
S'description'
p27795
S'The factor by which to multiply your material property for visualization\n'
p27796
sS'cpp_type'
p27797
S'double'
p27798
sS'default'
p27799
S'1'
p27800
sS'name'
p27801
S'factor'
p27802
sS'required'
p27803
I00
sS'group_name'
p27804
Nsa(dp27805
S'description'
p27806
S'The offset to add to your material property for visualization\n'
p27807
sS'cpp_type'
p27808
S'double'
p27809
sS'default'
p27810
S'0'
p27811
sS'name'
p27812
S'offset'
p27813
sS'required'
p27814
I00
sS'group_name'
p27815
Nsa(dp27816
S'description'
p27817
S'The scalar material property name\n'
p27818
sS'cpp_type'
p27819
S'MaterialPropertyName'
p27820
sS'default'
p27821
g3
sS'name'
p27822
S'property'
p27823
sS'required'
p27824
I01
sS'group_name'
p27825
Nsa(dp27826
S'description'
p27827
S'The row component to consider for this kernel\n'
p27828
sS'cpp_type'
p27829
S'unsigned int'
p27830
sS'default'
p27831
S'0'
p27832
sS'name'
p27833
S'row'
p27834
sS'required'
p27835
I00
sS'group_name'
p27836
Nsa(dp27837
S'description'
p27838
S'The seed for the master random number generator\n'
p27839
sS'cpp_type'
p27840
S'unsigned int'
p27841
sS'default'
p27842
S'0'
p27843
sS'name'
p27844
S'seed'
p27845
sS'required'
p27846
I00
sS'group_name'
p27847
S'Advanced'
p27848
sa(dp27849
S'description'
p27850
g3
sS'cpp_type'
p27851
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27852
sS'default'
p27853
S'MaterialRealTensorValueAux'
p27854
sS'name'
p27855
S'type'
p27856
sS'required'
p27857
I00
sS'group_name'
p27858
Nsa(dp27859
S'description'
p27860
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27861
sS'cpp_type'
p27862
S'bool'
p27863
sS'default'
p27864
S'0'
p27865
sS'name'
p27866
S'use_displaced_mesh'
p27867
sS'required'
p27868
I00
sS'group_name'
p27869
S'Advanced'
p27870
sa(dp27871
S'description'
p27872
S'The name of the variable that this object applies to\n'
p27873
sS'cpp_type'
p27874
S'AuxVariableName'
p27875
sS'default'
p27876
g3
sS'name'
p27877
S'variable'
p27878
sS'required'
p27879
I01
sS'group_name'
p27880
NsasS'name'
p27881
S'/Bounds/MaterialRealTensorValueAux'
p27882
sa(dp27883
S'description'
p27884
g3
sS'subblocks'
p27885
NsS'parameters'
p27886
(lp27887
(dp27888
S'description'
p27889
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27890
sS'cpp_type'
p27891
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27892
sS'default'
p27893
g3
sS'name'
p27894
S'block'
p27895
sS'required'
p27896
I00
sS'group_name'
p27897
Nsa(dp27898
S'description'
p27899
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27900
sS'cpp_type'
p27901
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27902
sS'default'
p27903
g3
sS'name'
p27904
S'boundary'
p27905
sS'required'
p27906
I00
sS'group_name'
p27907
Nsa(dp27908
S'description'
p27909
S'The vector component to consider for this kernel\n'
p27910
sS'cpp_type'
p27911
S'unsigned int'
p27912
sS'default'
p27913
S'0'
p27914
sS'name'
p27915
S'component'
p27916
sS'required'
p27917
I00
sS'group_name'
p27918
Nsa(dp27919
S'description'
p27920
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27921
sS'cpp_type'
p27922
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p27923
sS'default'
p27924
g3
sS'name'
p27925
S'control_tags'
p27926
sS'required'
p27927
I00
sS'group_name'
p27928
Nsa(dp27929
S'name'
p27930
S'execute_on'
p27931
sS'cpp_type'
p27932
S'MultiMooseEnum'
p27933
sS'default'
p27934
S'LINEAR'
p27935
sS'description'
p27936
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27937
sS'required'
p27938
I00
sS'options'
p27939
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p27940
sS'group_name'
p27941
Nsa(dp27942
S'description'
p27943
S'The factor by which to multiply your material property for visualization\n'
p27944
sS'cpp_type'
p27945
S'double'
p27946
sS'default'
p27947
S'1'
p27948
sS'name'
p27949
S'factor'
p27950
sS'required'
p27951
I00
sS'group_name'
p27952
Nsa(dp27953
S'description'
p27954
S'The offset to add to your material property for visualization\n'
p27955
sS'cpp_type'
p27956
S'double'
p27957
sS'default'
p27958
S'0'
p27959
sS'name'
p27960
S'offset'
p27961
sS'required'
p27962
I00
sS'group_name'
p27963
Nsa(dp27964
S'description'
p27965
S'The scalar material property name\n'
p27966
sS'cpp_type'
p27967
S'MaterialPropertyName'
p27968
sS'default'
p27969
g3
sS'name'
p27970
S'property'
p27971
sS'required'
p27972
I01
sS'group_name'
p27973
Nsa(dp27974
S'description'
p27975
S'The seed for the master random number generator\n'
p27976
sS'cpp_type'
p27977
S'unsigned int'
p27978
sS'default'
p27979
S'0'
p27980
sS'name'
p27981
S'seed'
p27982
sS'required'
p27983
I00
sS'group_name'
p27984
S'Advanced'
p27985
sa(dp27986
S'description'
p27987
g3
sS'cpp_type'
p27988
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p27989
sS'default'
p27990
S'MaterialRealVectorValueAux'
p27991
sS'name'
p27992
S'type'
p27993
sS'required'
p27994
I00
sS'group_name'
p27995
Nsa(dp27996
S'description'
p27997
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27998
sS'cpp_type'
p27999
S'bool'
p28000
sS'default'
p28001
S'0'
p28002
sS'name'
p28003
S'use_displaced_mesh'
p28004
sS'required'
p28005
I00
sS'group_name'
p28006
S'Advanced'
p28007
sa(dp28008
S'description'
p28009
S'The name of the variable that this object applies to\n'
p28010
sS'cpp_type'
p28011
S'AuxVariableName'
p28012
sS'default'
p28013
g3
sS'name'
p28014
S'variable'
p28015
sS'required'
p28016
I01
sS'group_name'
p28017
NsasS'name'
p28018
S'/Bounds/MaterialRealVectorValueAux'
p28019
sa(dp28020
S'description'
p28021
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p28022
sS'subblocks'
p28023
NsS'parameters'
p28024
(lp28025
(dp28026
S'description'
p28027
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28028
sS'cpp_type'
p28029
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28030
sS'default'
p28031
g3
sS'name'
p28032
S'block'
p28033
sS'required'
p28034
I00
sS'group_name'
p28035
Nsa(dp28036
S'description'
p28037
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28038
sS'cpp_type'
p28039
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28040
sS'default'
p28041
g3
sS'name'
p28042
S'boundary'
p28043
sS'required'
p28044
I00
sS'group_name'
p28045
Nsa(dp28046
S'description'
p28047
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28048
sS'cpp_type'
p28049
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28050
sS'default'
p28051
g3
sS'name'
p28052
S'control_tags'
p28053
sS'required'
p28054
I00
sS'group_name'
p28055
Nsa(dp28056
S'name'
p28057
S'execute_on'
p28058
sS'cpp_type'
p28059
S'MultiMooseEnum'
p28060
sS'default'
p28061
S'LINEAR'
p28062
sS'description'
p28063
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28064
sS'required'
p28065
I00
sS'options'
p28066
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p28067
sS'group_name'
p28068
Nsa(dp28069
S'description'
p28070
S'The factor by which to multiply your material property for visualization\n'
p28071
sS'cpp_type'
p28072
S'double'
p28073
sS'default'
p28074
S'1'
p28075
sS'name'
p28076
S'factor'
p28077
sS'required'
p28078
I00
sS'group_name'
p28079
Nsa(dp28080
S'description'
p28081
S'The index to consider for this kernel\n'
p28082
sS'cpp_type'
p28083
S'unsigned int'
p28084
sS'default'
p28085
S'0'
p28086
sS'name'
p28087
S'index'
p28088
sS'required'
p28089
I00
sS'group_name'
p28090
Nsa(dp28091
S'description'
p28092
S'The offset to add to your material property for visualization\n'
p28093
sS'cpp_type'
p28094
S'double'
p28095
sS'default'
p28096
S'0'
p28097
sS'name'
p28098
S'offset'
p28099
sS'required'
p28100
I00
sS'group_name'
p28101
Nsa(dp28102
S'description'
p28103
S'The scalar material property name\n'
p28104
sS'cpp_type'
p28105
S'MaterialPropertyName'
p28106
sS'default'
p28107
g3
sS'name'
p28108
S'property'
p28109
sS'required'
p28110
I01
sS'group_name'
p28111
Nsa(dp28112
S'description'
p28113
S'The seed for the master random number generator\n'
p28114
sS'cpp_type'
p28115
S'unsigned int'
p28116
sS'default'
p28117
S'0'
p28118
sS'name'
p28119
S'seed'
p28120
sS'required'
p28121
I00
sS'group_name'
p28122
S'Advanced'
p28123
sa(dp28124
S'description'
p28125
g3
sS'cpp_type'
p28126
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28127
sS'default'
p28128
S'MaterialStdVectorAux'
p28129
sS'name'
p28130
S'type'
p28131
sS'required'
p28132
I00
sS'group_name'
p28133
Nsa(dp28134
S'description'
p28135
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28136
sS'cpp_type'
p28137
S'bool'
p28138
sS'default'
p28139
S'0'
p28140
sS'name'
p28141
S'use_displaced_mesh'
p28142
sS'required'
p28143
I00
sS'group_name'
p28144
S'Advanced'
p28145
sa(dp28146
S'description'
p28147
S'The name of the variable that this object applies to\n'
p28148
sS'cpp_type'
p28149
S'AuxVariableName'
p28150
sS'default'
p28151
g3
sS'name'
p28152
S'variable'
p28153
sS'required'
p28154
I01
sS'group_name'
p28155
NsasS'name'
p28156
S'/Bounds/MaterialStdVectorAux'
p28157
sa(dp28158
S'description'
p28159
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p28160
sS'subblocks'
p28161
NsS'parameters'
p28162
(lp28163
(dp28164
S'description'
p28165
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28166
sS'cpp_type'
p28167
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28168
sS'default'
p28169
g3
sS'name'
p28170
S'block'
p28171
sS'required'
p28172
I00
sS'group_name'
p28173
Nsa(dp28174
S'description'
p28175
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28176
sS'cpp_type'
p28177
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28178
sS'default'
p28179
g3
sS'name'
p28180
S'boundary'
p28181
sS'required'
p28182
I00
sS'group_name'
p28183
Nsa(dp28184
S'description'
p28185
S'The gradient component to be extracted for this kernel\n'
p28186
sS'cpp_type'
p28187
S'unsigned int'
p28188
sS'default'
p28189
S'0'
p28190
sS'name'
p28191
S'component'
p28192
sS'required'
p28193
I00
sS'group_name'
p28194
Nsa(dp28195
S'description'
p28196
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28197
sS'cpp_type'
p28198
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28199
sS'default'
p28200
g3
sS'name'
p28201
S'control_tags'
p28202
sS'required'
p28203
I00
sS'group_name'
p28204
Nsa(dp28205
S'name'
p28206
S'execute_on'
p28207
sS'cpp_type'
p28208
S'MultiMooseEnum'
p28209
sS'default'
p28210
S'LINEAR'
p28211
sS'description'
p28212
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28213
sS'required'
p28214
I00
sS'options'
p28215
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p28216
sS'group_name'
p28217
Nsa(dp28218
S'description'
p28219
S'The factor by which to multiply your material property for visualization\n'
p28220
sS'cpp_type'
p28221
S'double'
p28222
sS'default'
p28223
S'1'
p28224
sS'name'
p28225
S'factor'
p28226
sS'required'
p28227
I00
sS'group_name'
p28228
Nsa(dp28229
S'description'
p28230
S'The index to consider for this kernel\n'
p28231
sS'cpp_type'
p28232
S'unsigned int'
p28233
sS'default'
p28234
S'0'
p28235
sS'name'
p28236
S'index'
p28237
sS'required'
p28238
I00
sS'group_name'
p28239
Nsa(dp28240
S'description'
p28241
S'The offset to add to your material property for visualization\n'
p28242
sS'cpp_type'
p28243
S'double'
p28244
sS'default'
p28245
S'0'
p28246
sS'name'
p28247
S'offset'
p28248
sS'required'
p28249
I00
sS'group_name'
p28250
Nsa(dp28251
S'description'
p28252
S'The scalar material property name\n'
p28253
sS'cpp_type'
p28254
S'MaterialPropertyName'
p28255
sS'default'
p28256
g3
sS'name'
p28257
S'property'
p28258
sS'required'
p28259
I01
sS'group_name'
p28260
Nsa(dp28261
S'description'
p28262
S'The seed for the master random number generator\n'
p28263
sS'cpp_type'
p28264
S'unsigned int'
p28265
sS'default'
p28266
S'0'
p28267
sS'name'
p28268
S'seed'
p28269
sS'required'
p28270
I00
sS'group_name'
p28271
S'Advanced'
p28272
sa(dp28273
S'description'
p28274
g3
sS'cpp_type'
p28275
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28276
sS'default'
p28277
S'MaterialStdVectorRealGradientAux'
p28278
sS'name'
p28279
S'type'
p28280
sS'required'
p28281
I00
sS'group_name'
p28282
Nsa(dp28283
S'description'
p28284
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28285
sS'cpp_type'
p28286
S'bool'
p28287
sS'default'
p28288
S'0'
p28289
sS'name'
p28290
S'use_displaced_mesh'
p28291
sS'required'
p28292
I00
sS'group_name'
p28293
S'Advanced'
p28294
sa(dp28295
S'description'
p28296
S'The name of the variable that this object applies to\n'
p28297
sS'cpp_type'
p28298
S'AuxVariableName'
p28299
sS'default'
p28300
g3
sS'name'
p28301
S'variable'
p28302
sS'required'
p28303
I01
sS'group_name'
p28304
NsasS'name'
p28305
S'/Bounds/MaterialStdVectorRealGradientAux'
p28306
sa(dp28307
S'description'
p28308
g3
sS'subblocks'
p28309
NsS'parameters'
p28310
(lp28311
(dp28312
S'description'
p28313
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28314
sS'cpp_type'
p28315
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28316
sS'default'
p28317
g3
sS'name'
p28318
S'block'
p28319
sS'required'
p28320
I00
sS'group_name'
p28321
Nsa(dp28322
S'description'
p28323
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28324
sS'cpp_type'
p28325
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28326
sS'default'
p28327
g3
sS'name'
p28328
S'boundary'
p28329
sS'required'
p28330
I00
sS'group_name'
p28331
Nsa(dp28332
S'description'
p28333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28334
sS'cpp_type'
p28335
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28336
sS'default'
p28337
g3
sS'name'
p28338
S'control_tags'
p28339
sS'required'
p28340
I00
sS'group_name'
p28341
Nsa(dp28342
S'name'
p28343
S'execute_on'
p28344
sS'cpp_type'
p28345
S'MultiMooseEnum'
p28346
sS'default'
p28347
S'LINEAR'
p28348
sS'description'
p28349
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28350
sS'required'
p28351
I00
sS'options'
p28352
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p28353
sS'group_name'
p28354
Nsa(dp28355
S'description'
p28356
S'The matrix index (0-20) to output\n'
p28357
sS'cpp_type'
p28358
S'int'
p28359
sS'default'
p28360
g3
sS'name'
p28361
S'index'
p28362
sS'required'
p28363
I01
sS'group_name'
p28364
Nsa(dp28365
S'description'
p28366
S'The seed for the master random number generator\n'
p28367
sS'cpp_type'
p28368
S'unsigned int'
p28369
sS'default'
p28370
S'0'
p28371
sS'name'
p28372
S'seed'
p28373
sS'required'
p28374
I00
sS'group_name'
p28375
S'Advanced'
p28376
sa(dp28377
S'description'
p28378
S'The SymmElasticityTensor material property name\n'
p28379
sS'cpp_type'
p28380
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28381
sS'default'
p28382
g3
sS'name'
p28383
S'tensor_matpro'
p28384
sS'required'
p28385
I01
sS'group_name'
p28386
Nsa(dp28387
S'description'
p28388
g3
sS'cpp_type'
p28389
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28390
sS'default'
p28391
S'MaterialSymmElasticityTensorAux'
p28392
sS'name'
p28393
S'type'
p28394
sS'required'
p28395
I00
sS'group_name'
p28396
Nsa(dp28397
S'description'
p28398
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28399
sS'cpp_type'
p28400
S'bool'
p28401
sS'default'
p28402
S'0'
p28403
sS'name'
p28404
S'use_displaced_mesh'
p28405
sS'required'
p28406
I00
sS'group_name'
p28407
S'Advanced'
p28408
sa(dp28409
S'description'
p28410
S'The name of the variable that this object applies to\n'
p28411
sS'cpp_type'
p28412
S'AuxVariableName'
p28413
sS'default'
p28414
g3
sS'name'
p28415
S'variable'
p28416
sS'required'
p28417
I01
sS'group_name'
p28418
NsasS'name'
p28419
S'/Bounds/MaterialSymmElasticityTensorAux'
p28420
sa(dp28421
S'description'
p28422
g3
sS'subblocks'
p28423
NsS'parameters'
p28424
(lp28425
(dp28426
S'description'
p28427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28428
sS'cpp_type'
p28429
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28430
sS'default'
p28431
g3
sS'name'
p28432
S'block'
p28433
sS'required'
p28434
I00
sS'group_name'
p28435
Nsa(dp28436
S'description'
p28437
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28438
sS'cpp_type'
p28439
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28440
sS'default'
p28441
g3
sS'name'
p28442
S'boundary'
p28443
sS'required'
p28444
I00
sS'group_name'
p28445
Nsa(dp28446
S'description'
p28447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28448
sS'cpp_type'
p28449
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28450
sS'default'
p28451
g3
sS'name'
p28452
S'control_tags'
p28453
sS'required'
p28454
I00
sS'group_name'
p28455
Nsa(dp28456
S'description'
p28457
S'Direction vector\n'
p28458
sS'cpp_type'
p28459
S'libMesh::VectorValue<double>'
p28460
sS'default'
p28461
S'1 0 0'
p28462
sS'name'
p28463
S'direction'
p28464
sS'required'
p28465
I00
sS'group_name'
p28466
Nsa(dp28467
S'name'
p28468
S'execute_on'
p28469
sS'cpp_type'
p28470
S'MultiMooseEnum'
p28471
sS'default'
p28472
S'LINEAR'
p28473
sS'description'
p28474
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28475
sS'required'
p28476
I00
sS'options'
p28477
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p28478
sS'group_name'
p28479
Nsa(dp28480
S'description'
p28481
S'The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n'
p28482
sS'cpp_type'
p28483
S'int'
p28484
sS'default'
p28485
S'-1'
p28486
sS'name'
p28487
S'index'
p28488
sS'required'
p28489
I00
sS'group_name'
p28490
Nsa(dp28491
S'description'
p28492
S'Start point for axis used to calculate some material tensor quantities\n'
p28493
sS'cpp_type'
p28494
S'libMesh::VectorValue<double>'
p28495
sS'default'
p28496
S'0 0 0'
p28497
sS'name'
p28498
S'point1'
p28499
sS'required'
p28500
I00
sS'group_name'
p28501
Nsa(dp28502
S'description'
p28503
S'End point for axis used to calculate some material tensor quantities\n'
p28504
sS'cpp_type'
p28505
S'libMesh::VectorValue<double>'
p28506
sS'default'
p28507
S'0 1 0'
p28508
sS'name'
p28509
S'point2'
p28510
sS'required'
p28511
I00
sS'group_name'
p28512
Nsa(dp28513
S'description'
p28514
S'The quad point you want evaluated\n'
p28515
sS'cpp_type'
p28516
S'unsigned int'
p28517
sS'default'
p28518
g3
sS'name'
p28519
S'qp_select'
p28520
sS'required'
p28521
I00
sS'group_name'
p28522
Nsa(dp28523
S'name'
p28524
S'quantity'
p28525
sS'cpp_type'
p28526
S'MooseEnum'
p28527
sS'default'
p28528
g3
sS'description'
p28529
S'A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n'
p28530
sS'required'
p28531
I00
sS'options'
p28532
S'VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain'
p28533
sS'group_name'
p28534
Nsa(dp28535
S'description'
p28536
S'The seed for the master random number generator\n'
p28537
sS'cpp_type'
p28538
S'unsigned int'
p28539
sS'default'
p28540
S'0'
p28541
sS'name'
p28542
S'seed'
p28543
sS'required'
p28544
I00
sS'group_name'
p28545
S'Advanced'
p28546
sa(dp28547
S'description'
p28548
S'The material tensor name.\n'
p28549
sS'cpp_type'
p28550
S'MaterialPropertyName'
p28551
sS'default'
p28552
g3
sS'name'
p28553
S'tensor'
p28554
sS'required'
p28555
I01
sS'group_name'
p28556
Nsa(dp28557
S'description'
p28558
g3
sS'cpp_type'
p28559
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28560
sS'default'
p28561
S'MaterialTensorAux'
p28562
sS'name'
p28563
S'type'
p28564
sS'required'
p28565
I00
sS'group_name'
p28566
Nsa(dp28567
S'description'
p28568
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28569
sS'cpp_type'
p28570
S'bool'
p28571
sS'default'
p28572
S'0'
p28573
sS'name'
p28574
S'use_displaced_mesh'
p28575
sS'required'
p28576
I00
sS'group_name'
p28577
S'Advanced'
p28578
sa(dp28579
S'description'
p28580
S'The name of the variable that this object applies to\n'
p28581
sS'cpp_type'
p28582
S'AuxVariableName'
p28583
sS'default'
p28584
g3
sS'name'
p28585
S'variable'
p28586
sS'required'
p28587
I01
sS'group_name'
p28588
NsasS'name'
p28589
S'/Bounds/MaterialTensorAux'
p28590
sa(dp28591
S'description'
p28592
g3
sS'subblocks'
p28593
NsS'parameters'
p28594
(lp28595
(dp28596
S'description'
p28597
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28598
sS'cpp_type'
p28599
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28600
sS'default'
p28601
g3
sS'name'
p28602
S'block'
p28603
sS'required'
p28604
I00
sS'group_name'
p28605
Nsa(dp28606
S'description'
p28607
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28608
sS'cpp_type'
p28609
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28610
sS'default'
p28611
g3
sS'name'
p28612
S'boundary'
p28613
sS'required'
p28614
I00
sS'group_name'
p28615
Nsa(dp28616
S'description'
p28617
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28618
sS'cpp_type'
p28619
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28620
sS'default'
p28621
g3
sS'name'
p28622
S'control_tags'
p28623
sS'required'
p28624
I00
sS'group_name'
p28625
Nsa(dp28626
S'name'
p28627
S'execute_on'
p28628
sS'cpp_type'
p28629
S'MultiMooseEnum'
p28630
sS'default'
p28631
S'LINEAR'
p28632
sS'description'
p28633
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28634
sS'required'
p28635
I00
sS'options'
p28636
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p28637
sS'group_name'
p28638
Nsa(dp28639
S'description'
p28640
S'The index into the tensor, from 0 to 2.\n'
p28641
sS'cpp_type'
p28642
S'int'
p28643
sS'default'
p28644
S'-1'
p28645
sS'name'
p28646
S'index'
p28647
sS'required'
p28648
I00
sS'group_name'
p28649
Nsa(dp28650
S'name'
p28651
S'quantity'
p28652
sS'cpp_type'
p28653
S'MooseEnum'
p28654
sS'default'
p28655
g3
sS'description'
p28656
S'A scalar quantity to compute: (only option is Length).\n'
p28657
sS'required'
p28658
I00
sS'options'
p28659
S'length'
p28660
sS'group_name'
p28661
Nsa(dp28662
S'description'
p28663
S'The seed for the master random number generator\n'
p28664
sS'cpp_type'
p28665
S'unsigned int'
p28666
sS'default'
p28667
S'0'
p28668
sS'name'
p28669
S'seed'
p28670
sS'required'
p28671
I00
sS'group_name'
p28672
S'Advanced'
p28673
sa(dp28674
S'description'
p28675
g3
sS'cpp_type'
p28676
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28677
sS'default'
p28678
S'MaterialVectorAux'
p28679
sS'name'
p28680
S'type'
p28681
sS'required'
p28682
I00
sS'group_name'
p28683
Nsa(dp28684
S'description'
p28685
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28686
sS'cpp_type'
p28687
S'bool'
p28688
sS'default'
p28689
S'0'
p28690
sS'name'
p28691
S'use_displaced_mesh'
p28692
sS'required'
p28693
I00
sS'group_name'
p28694
S'Advanced'
p28695
sa(dp28696
S'description'
p28697
S'The name of the variable that this object applies to\n'
p28698
sS'cpp_type'
p28699
S'AuxVariableName'
p28700
sS'default'
p28701
g3
sS'name'
p28702
S'variable'
p28703
sS'required'
p28704
I01
sS'group_name'
p28705
Nsa(dp28706
S'description'
p28707
S'The material vector name.\n'
p28708
sS'cpp_type'
p28709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28710
sS'default'
p28711
g3
sS'name'
p28712
S'vector'
p28713
sS'required'
p28714
I01
sS'group_name'
p28715
NsasS'name'
p28716
S'/Bounds/MaterialVectorAux'
p28717
sa(dp28718
S'description'
p28719
g3
sS'subblocks'
p28720
NsS'parameters'
p28721
(lp28722
(dp28723
S'description'
p28724
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28725
sS'cpp_type'
p28726
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28727
sS'default'
p28728
g3
sS'name'
p28729
S'block'
p28730
sS'required'
p28731
I00
sS'group_name'
p28732
Nsa(dp28733
S'description'
p28734
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28735
sS'cpp_type'
p28736
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28737
sS'default'
p28738
g3
sS'name'
p28739
S'boundary'
p28740
sS'required'
p28741
I00
sS'group_name'
p28742
Nsa(dp28743
S'description'
p28744
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28745
sS'cpp_type'
p28746
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28747
sS'default'
p28748
g3
sS'name'
p28749
S'control_tags'
p28750
sS'required'
p28751
I00
sS'group_name'
p28752
Nsa(dp28753
S'name'
p28754
S'execute_on'
p28755
sS'cpp_type'
p28756
S'MultiMooseEnum'
p28757
sS'default'
p28758
S'LINEAR'
p28759
sS'description'
p28760
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28761
sS'required'
p28762
I00
sS'options'
p28763
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p28764
sS'group_name'
p28765
Nsa(dp28766
S'description'
p28767
S'Ratio of specific heats\n'
p28768
sS'cpp_type'
p28769
S'double'
p28770
sS'default'
p28771
g3
sS'name'
p28772
S'gamma'
p28773
sS'required'
p28774
I01
sS'group_name'
p28775
Nsa(dp28776
S'description'
p28777
g3
sS'cpp_type'
p28778
S'std::vector<VariableName>'
p28779
sS'default'
p28780
g3
sS'name'
p28781
S'pressure'
p28782
sS'required'
p28783
I01
sS'group_name'
p28784
Nsa(dp28785
S'description'
p28786
g3
sS'cpp_type'
p28787
S'std::vector<VariableName>'
p28788
sS'default'
p28789
g3
sS'name'
p28790
S'rho'
p28791
sS'required'
p28792
I01
sS'group_name'
p28793
Nsa(dp28794
S'description'
p28795
g3
sS'cpp_type'
p28796
S'std::vector<VariableName>'
p28797
sS'default'
p28798
g3
sS'name'
p28799
S'rhoe'
p28800
sS'required'
p28801
I01
sS'group_name'
p28802
Nsa(dp28803
S'description'
p28804
S'The seed for the master random number generator\n'
p28805
sS'cpp_type'
p28806
S'unsigned int'
p28807
sS'default'
p28808
S'0'
p28809
sS'name'
p28810
S'seed'
p28811
sS'required'
p28812
I00
sS'group_name'
p28813
S'Advanced'
p28814
sa(dp28815
S'description'
p28816
g3
sS'cpp_type'
p28817
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28818
sS'default'
p28819
S'NSEnthalpyAux'
p28820
sS'name'
p28821
S'type'
p28822
sS'required'
p28823
I00
sS'group_name'
p28824
Nsa(dp28825
S'description'
p28826
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28827
sS'cpp_type'
p28828
S'bool'
p28829
sS'default'
p28830
S'0'
p28831
sS'name'
p28832
S'use_displaced_mesh'
p28833
sS'required'
p28834
I00
sS'group_name'
p28835
S'Advanced'
p28836
sa(dp28837
S'description'
p28838
S'The name of the variable that this object applies to\n'
p28839
sS'cpp_type'
p28840
S'AuxVariableName'
p28841
sS'default'
p28842
g3
sS'name'
p28843
S'variable'
p28844
sS'required'
p28845
I01
sS'group_name'
p28846
NsasS'name'
p28847
S'/Bounds/NSEnthalpyAux'
p28848
sa(dp28849
S'description'
p28850
g3
sS'subblocks'
p28851
NsS'parameters'
p28852
(lp28853
(dp28854
S'description'
p28855
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28856
sS'cpp_type'
p28857
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28858
sS'default'
p28859
g3
sS'name'
p28860
S'block'
p28861
sS'required'
p28862
I00
sS'group_name'
p28863
Nsa(dp28864
S'description'
p28865
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28866
sS'cpp_type'
p28867
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28868
sS'default'
p28869
g3
sS'name'
p28870
S'boundary'
p28871
sS'required'
p28872
I00
sS'group_name'
p28873
Nsa(dp28874
S'description'
p28875
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28876
sS'cpp_type'
p28877
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p28878
sS'default'
p28879
g3
sS'name'
p28880
S'control_tags'
p28881
sS'required'
p28882
I00
sS'group_name'
p28883
Nsa(dp28884
S'name'
p28885
S'execute_on'
p28886
sS'cpp_type'
p28887
S'MultiMooseEnum'
p28888
sS'default'
p28889
S'LINEAR'
p28890
sS'description'
p28891
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28892
sS'required'
p28893
I00
sS'options'
p28894
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p28895
sS'group_name'
p28896
Nsa(dp28897
S'description'
p28898
S'Ratio of specific heats\n'
p28899
sS'cpp_type'
p28900
S'double'
p28901
sS'default'
p28902
g3
sS'name'
p28903
S'gamma'
p28904
sS'required'
p28905
I01
sS'group_name'
p28906
Nsa(dp28907
S'description'
p28908
g3
sS'cpp_type'
p28909
S'std::vector<VariableName>'
p28910
sS'default'
p28911
g3
sS'name'
p28912
S'rho'
p28913
sS'required'
p28914
I01
sS'group_name'
p28915
Nsa(dp28916
S'description'
p28917
g3
sS'cpp_type'
p28918
S'std::vector<VariableName>'
p28919
sS'default'
p28920
g3
sS'name'
p28921
S'rhoe'
p28922
sS'required'
p28923
I01
sS'group_name'
p28924
Nsa(dp28925
S'description'
p28926
S'The seed for the master random number generator\n'
p28927
sS'cpp_type'
p28928
S'unsigned int'
p28929
sS'default'
p28930
S'0'
p28931
sS'name'
p28932
S'seed'
p28933
sS'required'
p28934
I00
sS'group_name'
p28935
S'Advanced'
p28936
sa(dp28937
S'description'
p28938
g3
sS'cpp_type'
p28939
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p28940
sS'default'
p28941
S'NSPressureAux'
p28942
sS'name'
p28943
S'type'
p28944
sS'required'
p28945
I00
sS'group_name'
p28946
Nsa(dp28947
S'description'
p28948
g3
sS'cpp_type'
p28949
S'std::vector<VariableName>'
p28950
sS'default'
p28951
g3
sS'name'
p28952
S'u'
p28953
sS'required'
p28954
I01
sS'group_name'
p28955
Nsa(dp28956
S'description'
p28957
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28958
sS'cpp_type'
p28959
S'bool'
p28960
sS'default'
p28961
S'0'
p28962
sS'name'
p28963
S'use_displaced_mesh'
p28964
sS'required'
p28965
I00
sS'group_name'
p28966
S'Advanced'
p28967
sa(dp28968
S'description'
p28969
g3
sS'cpp_type'
p28970
S'std::vector<VariableName>'
p28971
sS'default'
p28972
g3
sS'name'
p28973
S'v'
p28974
sS'required'
p28975
I01
sS'group_name'
p28976
Nsa(dp28977
S'description'
p28978
S'The name of the variable that this object applies to\n'
p28979
sS'cpp_type'
p28980
S'AuxVariableName'
p28981
sS'default'
p28982
g3
sS'name'
p28983
S'variable'
p28984
sS'required'
p28985
I01
sS'group_name'
p28986
Nsa(dp28987
S'description'
p28988
g3
sS'cpp_type'
p28989
S'std::vector<VariableName>'
p28990
sS'default'
p28991
g3
sS'name'
p28992
S'w'
p28993
sS'required'
p28994
I00
sS'group_name'
p28995
NsasS'name'
p28996
S'/Bounds/NSPressureAux'
p28997
sa(dp28998
S'description'
p28999
g3
sS'subblocks'
p29000
NsS'parameters'
p29001
(lp29002
(dp29003
S'description'
p29004
S'Gas constant.\n'
p29005
sS'cpp_type'
p29006
S'double'
p29007
sS'default'
p29008
g3
sS'name'
p29009
S'R'
p29010
sS'required'
p29011
I01
sS'group_name'
p29012
Nsa(dp29013
S'description'
p29014
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29015
sS'cpp_type'
p29016
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29017
sS'default'
p29018
g3
sS'name'
p29019
S'block'
p29020
sS'required'
p29021
I00
sS'group_name'
p29022
Nsa(dp29023
S'description'
p29024
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29025
sS'cpp_type'
p29026
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29027
sS'default'
p29028
g3
sS'name'
p29029
S'boundary'
p29030
sS'required'
p29031
I00
sS'group_name'
p29032
Nsa(dp29033
S'description'
p29034
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29035
sS'cpp_type'
p29036
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29037
sS'default'
p29038
g3
sS'name'
p29039
S'control_tags'
p29040
sS'required'
p29041
I00
sS'group_name'
p29042
Nsa(dp29043
S'name'
p29044
S'execute_on'
p29045
sS'cpp_type'
p29046
S'MultiMooseEnum'
p29047
sS'default'
p29048
S'LINEAR'
p29049
sS'description'
p29050
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29051
sS'required'
p29052
I00
sS'options'
p29053
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29054
sS'group_name'
p29055
Nsa(dp29056
S'description'
p29057
S'Ratio of specific heats.\n'
p29058
sS'cpp_type'
p29059
S'double'
p29060
sS'default'
p29061
g3
sS'name'
p29062
S'gamma'
p29063
sS'required'
p29064
I01
sS'group_name'
p29065
Nsa(dp29066
S'description'
p29067
g3
sS'cpp_type'
p29068
S'std::vector<VariableName>'
p29069
sS'default'
p29070
g3
sS'name'
p29071
S'rho'
p29072
sS'required'
p29073
I01
sS'group_name'
p29074
Nsa(dp29075
S'description'
p29076
g3
sS'cpp_type'
p29077
S'std::vector<VariableName>'
p29078
sS'default'
p29079
g3
sS'name'
p29080
S'rhoe'
p29081
sS'required'
p29082
I01
sS'group_name'
p29083
Nsa(dp29084
S'description'
p29085
S'The seed for the master random number generator\n'
p29086
sS'cpp_type'
p29087
S'unsigned int'
p29088
sS'default'
p29089
S'0'
p29090
sS'name'
p29091
S'seed'
p29092
sS'required'
p29093
I00
sS'group_name'
p29094
S'Advanced'
p29095
sa(dp29096
S'description'
p29097
g3
sS'cpp_type'
p29098
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29099
sS'default'
p29100
S'NSTemperatureAux'
p29101
sS'name'
p29102
S'type'
p29103
sS'required'
p29104
I00
sS'group_name'
p29105
Nsa(dp29106
S'description'
p29107
g3
sS'cpp_type'
p29108
S'std::vector<VariableName>'
p29109
sS'default'
p29110
g3
sS'name'
p29111
S'u'
p29112
sS'required'
p29113
I01
sS'group_name'
p29114
Nsa(dp29115
S'description'
p29116
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29117
sS'cpp_type'
p29118
S'bool'
p29119
sS'default'
p29120
S'0'
p29121
sS'name'
p29122
S'use_displaced_mesh'
p29123
sS'required'
p29124
I00
sS'group_name'
p29125
S'Advanced'
p29126
sa(dp29127
S'description'
p29128
g3
sS'cpp_type'
p29129
S'std::vector<VariableName>'
p29130
sS'default'
p29131
g3
sS'name'
p29132
S'v'
p29133
sS'required'
p29134
I01
sS'group_name'
p29135
Nsa(dp29136
S'description'
p29137
S'The name of the variable that this object applies to\n'
p29138
sS'cpp_type'
p29139
S'AuxVariableName'
p29140
sS'default'
p29141
g3
sS'name'
p29142
S'variable'
p29143
sS'required'
p29144
I01
sS'group_name'
p29145
Nsa(dp29146
S'description'
p29147
g3
sS'cpp_type'
p29148
S'std::vector<VariableName>'
p29149
sS'default'
p29150
g3
sS'name'
p29151
S'w'
p29152
sS'required'
p29153
I00
sS'group_name'
p29154
NsasS'name'
p29155
S'/Bounds/NSTemperatureAux'
p29156
sa(dp29157
S'description'
p29158
g3
sS'subblocks'
p29159
NsS'parameters'
p29160
(lp29161
(dp29162
S'description'
p29163
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29164
sS'cpp_type'
p29165
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29166
sS'default'
p29167
g3
sS'name'
p29168
S'block'
p29169
sS'required'
p29170
I00
sS'group_name'
p29171
Nsa(dp29172
S'description'
p29173
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29174
sS'cpp_type'
p29175
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29176
sS'default'
p29177
g3
sS'name'
p29178
S'boundary'
p29179
sS'required'
p29180
I00
sS'group_name'
p29181
Nsa(dp29182
S'description'
p29183
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29184
sS'cpp_type'
p29185
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29186
sS'default'
p29187
g3
sS'name'
p29188
S'control_tags'
p29189
sS'required'
p29190
I00
sS'group_name'
p29191
Nsa(dp29192
S'name'
p29193
S'execute_on'
p29194
sS'cpp_type'
p29195
S'MultiMooseEnum'
p29196
sS'default'
p29197
S'LINEAR'
p29198
sS'description'
p29199
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29200
sS'required'
p29201
I00
sS'options'
p29202
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29203
sS'group_name'
p29204
Nsa(dp29205
S'description'
p29206
S'Momentum (conserved form)\n'
p29207
sS'cpp_type'
p29208
S'std::vector<VariableName>'
p29209
sS'default'
p29210
g3
sS'name'
p29211
S'momentum'
p29212
sS'required'
p29213
I01
sS'group_name'
p29214
Nsa(dp29215
S'description'
p29216
S'Density (conserved form)\n'
p29217
sS'cpp_type'
p29218
S'std::vector<VariableName>'
p29219
sS'default'
p29220
g3
sS'name'
p29221
S'rho'
p29222
sS'required'
p29223
I01
sS'group_name'
p29224
Nsa(dp29225
S'description'
p29226
S'The seed for the master random number generator\n'
p29227
sS'cpp_type'
p29228
S'unsigned int'
p29229
sS'default'
p29230
S'0'
p29231
sS'name'
p29232
S'seed'
p29233
sS'required'
p29234
I00
sS'group_name'
p29235
S'Advanced'
p29236
sa(dp29237
S'description'
p29238
g3
sS'cpp_type'
p29239
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29240
sS'default'
p29241
S'NSVelocityAux'
p29242
sS'name'
p29243
S'type'
p29244
sS'required'
p29245
I00
sS'group_name'
p29246
Nsa(dp29247
S'description'
p29248
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29249
sS'cpp_type'
p29250
S'bool'
p29251
sS'default'
p29252
S'0'
p29253
sS'name'
p29254
S'use_displaced_mesh'
p29255
sS'required'
p29256
I00
sS'group_name'
p29257
S'Advanced'
p29258
sa(dp29259
S'description'
p29260
S'The name of the variable that this object applies to\n'
p29261
sS'cpp_type'
p29262
S'AuxVariableName'
p29263
sS'default'
p29264
g3
sS'name'
p29265
S'variable'
p29266
sS'required'
p29267
I01
sS'group_name'
p29268
NsasS'name'
p29269
S'/Bounds/NSVelocityAux'
p29270
sa(dp29271
S'description'
p29272
g3
sS'subblocks'
p29273
NsS'parameters'
p29274
(lp29275
(dp29276
S'description'
p29277
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29278
sS'cpp_type'
p29279
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29280
sS'default'
p29281
g3
sS'name'
p29282
S'block'
p29283
sS'required'
p29284
I00
sS'group_name'
p29285
Nsa(dp29286
S'description'
p29287
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29288
sS'cpp_type'
p29289
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29290
sS'default'
p29291
g3
sS'name'
p29292
S'boundary'
p29293
sS'required'
p29294
I00
sS'group_name'
p29295
Nsa(dp29296
S'description'
p29297
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29298
sS'cpp_type'
p29299
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29300
sS'default'
p29301
g3
sS'name'
p29302
S'control_tags'
p29303
sS'required'
p29304
I00
sS'group_name'
p29305
Nsa(dp29306
S'name'
p29307
S'execute_on'
p29308
sS'cpp_type'
p29309
S'MultiMooseEnum'
p29310
sS'default'
p29311
S'LINEAR'
p29312
sS'description'
p29313
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29314
sS'required'
p29315
I00
sS'options'
p29316
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29317
sS'group_name'
p29318
Nsa(dp29319
S'description'
p29320
S'The boundary to find the distance to.\n'
p29321
sS'cpp_type'
p29322
S'BoundaryName'
p29323
sS'default'
p29324
g3
sS'name'
p29325
S'paired_boundary'
p29326
sS'required'
p29327
I01
sS'group_name'
p29328
Nsa(dp29329
S'description'
p29330
S'The seed for the master random number generator\n'
p29331
sS'cpp_type'
p29332
S'unsigned int'
p29333
sS'default'
p29334
S'0'
p29335
sS'name'
p29336
S'seed'
p29337
sS'required'
p29338
I00
sS'group_name'
p29339
S'Advanced'
p29340
sa(dp29341
S'description'
p29342
g3
sS'cpp_type'
p29343
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29344
sS'default'
p29345
S'NearestNodeDistanceAux'
p29346
sS'name'
p29347
S'type'
p29348
sS'required'
p29349
I00
sS'group_name'
p29350
Nsa(dp29351
S'description'
p29352
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29353
sS'cpp_type'
p29354
S'bool'
p29355
sS'default'
p29356
S'1'
p29357
sS'name'
p29358
S'use_displaced_mesh'
p29359
sS'required'
p29360
I00
sS'group_name'
p29361
S'Advanced'
p29362
sa(dp29363
S'description'
p29364
S'The name of the variable that this object applies to\n'
p29365
sS'cpp_type'
p29366
S'AuxVariableName'
p29367
sS'default'
p29368
g3
sS'name'
p29369
S'variable'
p29370
sS'required'
p29371
I01
sS'group_name'
p29372
NsasS'name'
p29373
S'/Bounds/NearestNodeDistanceAux'
p29374
sa(dp29375
S'description'
p29376
g3
sS'subblocks'
p29377
NsS'parameters'
p29378
(lp29379
(dp29380
S'description'
p29381
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29382
sS'cpp_type'
p29383
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29384
sS'default'
p29385
g3
sS'name'
p29386
S'block'
p29387
sS'required'
p29388
I00
sS'group_name'
p29389
Nsa(dp29390
S'description'
p29391
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29392
sS'cpp_type'
p29393
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29394
sS'default'
p29395
g3
sS'name'
p29396
S'boundary'
p29397
sS'required'
p29398
I00
sS'group_name'
p29399
Nsa(dp29400
S'description'
p29401
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29402
sS'cpp_type'
p29403
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29404
sS'default'
p29405
g3
sS'name'
p29406
S'control_tags'
p29407
sS'required'
p29408
I00
sS'group_name'
p29409
Nsa(dp29410
S'name'
p29411
S'execute_on'
p29412
sS'cpp_type'
p29413
S'MultiMooseEnum'
p29414
sS'default'
p29415
S'LINEAR'
p29416
sS'description'
p29417
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29418
sS'required'
p29419
I00
sS'options'
p29420
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29421
sS'group_name'
p29422
Nsa(dp29423
S'description'
p29424
S'The boundary to get the value from.\n'
p29425
sS'cpp_type'
p29426
S'BoundaryName'
p29427
sS'default'
p29428
g3
sS'name'
p29429
S'paired_boundary'
p29430
sS'required'
p29431
I01
sS'group_name'
p29432
Nsa(dp29433
S'description'
p29434
S'The variable to get the value of.\n'
p29435
sS'cpp_type'
p29436
S'std::vector<VariableName>'
p29437
sS'default'
p29438
g3
sS'name'
p29439
S'paired_variable'
p29440
sS'required'
p29441
I01
sS'group_name'
p29442
Nsa(dp29443
S'description'
p29444
S'The seed for the master random number generator\n'
p29445
sS'cpp_type'
p29446
S'unsigned int'
p29447
sS'default'
p29448
S'0'
p29449
sS'name'
p29450
S'seed'
p29451
sS'required'
p29452
I00
sS'group_name'
p29453
S'Advanced'
p29454
sa(dp29455
S'description'
p29456
g3
sS'cpp_type'
p29457
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29458
sS'default'
p29459
S'NearestNodeValueAux'
p29460
sS'name'
p29461
S'type'
p29462
sS'required'
p29463
I00
sS'group_name'
p29464
Nsa(dp29465
S'description'
p29466
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29467
sS'cpp_type'
p29468
S'bool'
p29469
sS'default'
p29470
S'1'
p29471
sS'name'
p29472
S'use_displaced_mesh'
p29473
sS'required'
p29474
I00
sS'group_name'
p29475
S'Advanced'
p29476
sa(dp29477
S'description'
p29478
S'The name of the variable that this object applies to\n'
p29479
sS'cpp_type'
p29480
S'AuxVariableName'
p29481
sS'default'
p29482
g3
sS'name'
p29483
S'variable'
p29484
sS'required'
p29485
I01
sS'group_name'
p29486
NsasS'name'
p29487
S'/Bounds/NearestNodeValueAux'
p29488
sa(dp29489
S'description'
p29490
g3
sS'subblocks'
p29491
NsS'parameters'
p29492
(lp29493
(dp29494
S'description'
p29495
S'beta parameter\n'
p29496
sS'cpp_type'
p29497
S'double'
p29498
sS'default'
p29499
g3
sS'name'
p29500
S'beta'
p29501
sS'required'
p29502
I01
sS'group_name'
p29503
Nsa(dp29504
S'description'
p29505
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29506
sS'cpp_type'
p29507
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29508
sS'default'
p29509
g3
sS'name'
p29510
S'block'
p29511
sS'required'
p29512
I00
sS'group_name'
p29513
Nsa(dp29514
S'description'
p29515
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29516
sS'cpp_type'
p29517
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29518
sS'default'
p29519
g3
sS'name'
p29520
S'boundary'
p29521
sS'required'
p29522
I00
sS'group_name'
p29523
Nsa(dp29524
S'description'
p29525
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29526
sS'cpp_type'
p29527
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29528
sS'default'
p29529
g3
sS'name'
p29530
S'control_tags'
p29531
sS'required'
p29532
I00
sS'group_name'
p29533
Nsa(dp29534
S'description'
p29535
S'displacement variable\n'
p29536
sS'cpp_type'
p29537
S'std::vector<VariableName>'
p29538
sS'default'
p29539
g3
sS'name'
p29540
S'displacement'
p29541
sS'required'
p29542
I01
sS'group_name'
p29543
Nsa(dp29544
S'name'
p29545
S'execute_on'
p29546
sS'cpp_type'
p29547
S'MultiMooseEnum'
p29548
sS'default'
p29549
S'LINEAR'
p29550
sS'description'
p29551
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29552
sS'required'
p29553
I00
sS'options'
p29554
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29555
sS'group_name'
p29556
Nsa(dp29557
S'description'
p29558
S'The seed for the master random number generator\n'
p29559
sS'cpp_type'
p29560
S'unsigned int'
p29561
sS'default'
p29562
S'0'
p29563
sS'name'
p29564
S'seed'
p29565
sS'required'
p29566
I00
sS'group_name'
p29567
S'Advanced'
p29568
sa(dp29569
S'description'
p29570
g3
sS'cpp_type'
p29571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29572
sS'default'
p29573
S'NewmarkAccelAux'
p29574
sS'name'
p29575
S'type'
p29576
sS'required'
p29577
I00
sS'group_name'
p29578
Nsa(dp29579
S'description'
p29580
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29581
sS'cpp_type'
p29582
S'bool'
p29583
sS'default'
p29584
S'0'
p29585
sS'name'
p29586
S'use_displaced_mesh'
p29587
sS'required'
p29588
I00
sS'group_name'
p29589
S'Advanced'
p29590
sa(dp29591
S'description'
p29592
S'The name of the variable that this object applies to\n'
p29593
sS'cpp_type'
p29594
S'AuxVariableName'
p29595
sS'default'
p29596
g3
sS'name'
p29597
S'variable'
p29598
sS'required'
p29599
I01
sS'group_name'
p29600
Nsa(dp29601
S'description'
p29602
S'velocity variable\n'
p29603
sS'cpp_type'
p29604
S'std::vector<VariableName>'
p29605
sS'default'
p29606
g3
sS'name'
p29607
S'velocity'
p29608
sS'required'
p29609
I01
sS'group_name'
p29610
NsasS'name'
p29611
S'/Bounds/NewmarkAccelAux'
p29612
sa(dp29613
S'description'
p29614
g3
sS'subblocks'
p29615
NsS'parameters'
p29616
(lp29617
(dp29618
S'description'
p29619
S'acceleration variable\n'
p29620
sS'cpp_type'
p29621
S'std::vector<VariableName>'
p29622
sS'default'
p29623
g3
sS'name'
p29624
S'acceleration'
p29625
sS'required'
p29626
I01
sS'group_name'
p29627
Nsa(dp29628
S'description'
p29629
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29630
sS'cpp_type'
p29631
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29632
sS'default'
p29633
g3
sS'name'
p29634
S'block'
p29635
sS'required'
p29636
I00
sS'group_name'
p29637
Nsa(dp29638
S'description'
p29639
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29640
sS'cpp_type'
p29641
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29642
sS'default'
p29643
g3
sS'name'
p29644
S'boundary'
p29645
sS'required'
p29646
I00
sS'group_name'
p29647
Nsa(dp29648
S'description'
p29649
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29650
sS'cpp_type'
p29651
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29652
sS'default'
p29653
g3
sS'name'
p29654
S'control_tags'
p29655
sS'required'
p29656
I00
sS'group_name'
p29657
Nsa(dp29658
S'name'
p29659
S'execute_on'
p29660
sS'cpp_type'
p29661
S'MultiMooseEnum'
p29662
sS'default'
p29663
S'LINEAR'
p29664
sS'description'
p29665
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29666
sS'required'
p29667
I00
sS'options'
p29668
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29669
sS'group_name'
p29670
Nsa(dp29671
S'description'
p29672
S'gamma parameter\n'
p29673
sS'cpp_type'
p29674
S'double'
p29675
sS'default'
p29676
g3
sS'name'
p29677
S'gamma'
p29678
sS'required'
p29679
I01
sS'group_name'
p29680
Nsa(dp29681
S'description'
p29682
S'The seed for the master random number generator\n'
p29683
sS'cpp_type'
p29684
S'unsigned int'
p29685
sS'default'
p29686
S'0'
p29687
sS'name'
p29688
S'seed'
p29689
sS'required'
p29690
I00
sS'group_name'
p29691
S'Advanced'
p29692
sa(dp29693
S'description'
p29694
g3
sS'cpp_type'
p29695
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29696
sS'default'
p29697
S'NewmarkVelAux'
p29698
sS'name'
p29699
S'type'
p29700
sS'required'
p29701
I00
sS'group_name'
p29702
Nsa(dp29703
S'description'
p29704
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29705
sS'cpp_type'
p29706
S'bool'
p29707
sS'default'
p29708
S'0'
p29709
sS'name'
p29710
S'use_displaced_mesh'
p29711
sS'required'
p29712
I00
sS'group_name'
p29713
S'Advanced'
p29714
sa(dp29715
S'description'
p29716
S'The name of the variable that this object applies to\n'
p29717
sS'cpp_type'
p29718
S'AuxVariableName'
p29719
sS'default'
p29720
g3
sS'name'
p29721
S'variable'
p29722
sS'required'
p29723
I01
sS'group_name'
p29724
NsasS'name'
p29725
S'/Bounds/NewmarkVelAux'
p29726
sa(dp29727
S'description'
p29728
g3
sS'subblocks'
p29729
NsS'parameters'
p29730
(lp29731
(dp29732
S'description'
p29733
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29734
sS'cpp_type'
p29735
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29736
sS'default'
p29737
g3
sS'name'
p29738
S'block'
p29739
sS'required'
p29740
I00
sS'group_name'
p29741
Nsa(dp29742
S'description'
p29743
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29744
sS'cpp_type'
p29745
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29746
sS'default'
p29747
g3
sS'name'
p29748
S'boundary'
p29749
sS'required'
p29750
I00
sS'group_name'
p29751
Nsa(dp29752
S'description'
p29753
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29754
sS'cpp_type'
p29755
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29756
sS'default'
p29757
g3
sS'name'
p29758
S'control_tags'
p29759
sS'required'
p29760
I00
sS'group_name'
p29761
Nsa(dp29762
S'name'
p29763
S'execute_on'
p29764
sS'cpp_type'
p29765
S'MultiMooseEnum'
p29766
sS'default'
p29767
S'LINEAR'
p29768
sS'description'
p29769
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29770
sS'required'
p29771
I00
sS'options'
p29772
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29773
sS'group_name'
p29774
Nsa(dp29775
S'description'
p29776
S'The normalization factor\n'
p29777
sS'cpp_type'
p29778
S'double'
p29779
sS'default'
p29780
S'1'
p29781
sS'name'
p29782
S'normal_factor'
p29783
sS'required'
p29784
I00
sS'group_name'
p29785
Nsa(dp29786
S'description'
p29787
S'The postprocessor on the source\n'
p29788
sS'cpp_type'
p29789
S'PostprocessorName'
p29790
sS'default'
p29791
g3
sS'name'
p29792
S'normalization'
p29793
sS'required'
p29794
I01
sS'group_name'
p29795
Nsa(dp29796
S'description'
p29797
S'The seed for the master random number generator\n'
p29798
sS'cpp_type'
p29799
S'unsigned int'
p29800
sS'default'
p29801
S'0'
p29802
sS'name'
p29803
S'seed'
p29804
sS'required'
p29805
I00
sS'group_name'
p29806
S'Advanced'
p29807
sa(dp29808
S'description'
p29809
S'The variable to be normalized\n'
p29810
sS'cpp_type'
p29811
S'std::vector<VariableName>'
p29812
sS'default'
p29813
g3
sS'name'
p29814
S'source_variable'
p29815
sS'required'
p29816
I01
sS'group_name'
p29817
Nsa(dp29818
S'description'
p29819
g3
sS'cpp_type'
p29820
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29821
sS'default'
p29822
S'NormalizationAux'
p29823
sS'name'
p29824
S'type'
p29825
sS'required'
p29826
I00
sS'group_name'
p29827
Nsa(dp29828
S'description'
p29829
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29830
sS'cpp_type'
p29831
S'bool'
p29832
sS'default'
p29833
S'0'
p29834
sS'name'
p29835
S'use_displaced_mesh'
p29836
sS'required'
p29837
I00
sS'group_name'
p29838
S'Advanced'
p29839
sa(dp29840
S'description'
p29841
S'The name of the variable that this object applies to\n'
p29842
sS'cpp_type'
p29843
S'AuxVariableName'
p29844
sS'default'
p29845
g3
sS'name'
p29846
S'variable'
p29847
sS'required'
p29848
I01
sS'group_name'
p29849
NsasS'name'
p29850
S'/Bounds/NormalizationAux'
p29851
sa(dp29852
S'description'
p29853
S'Output euler angles from user object to an AuxVariable.\n'
p29854
sS'subblocks'
p29855
NsS'parameters'
p29856
(lp29857
(dp29858
S'description'
p29859
S'The GrainTracker UserObject to get values from.\n'
p29860
sS'cpp_type'
p29861
S'UserObjectName'
p29862
sS'default'
p29863
g3
sS'name'
p29864
S'GrainTracker_object'
p29865
sS'required'
p29866
I01
sS'group_name'
p29867
Nsa(dp29868
S'description'
p29869
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29870
sS'cpp_type'
p29871
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29872
sS'default'
p29873
g3
sS'name'
p29874
S'block'
p29875
sS'required'
p29876
I00
sS'group_name'
p29877
Nsa(dp29878
S'description'
p29879
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29880
sS'cpp_type'
p29881
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29882
sS'default'
p29883
g3
sS'name'
p29884
S'boundary'
p29885
sS'required'
p29886
I00
sS'group_name'
p29887
Nsa(dp29888
S'description'
p29889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29890
sS'cpp_type'
p29891
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p29892
sS'default'
p29893
g3
sS'name'
p29894
S'control_tags'
p29895
sS'required'
p29896
I00
sS'group_name'
p29897
Nsa(dp29898
S'description'
p29899
S'Name of Euler angle provider user object\n'
p29900
sS'cpp_type'
p29901
S'UserObjectName'
p29902
sS'default'
p29903
g3
sS'name'
p29904
S'euler_angle_provider'
p29905
sS'required'
p29906
I01
sS'group_name'
p29907
Nsa(dp29908
S'name'
p29909
S'execute_on'
p29910
sS'cpp_type'
p29911
S'MultiMooseEnum'
p29912
sS'default'
p29913
S'LINEAR'
p29914
sS'description'
p29915
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p29916
sS'required'
p29917
I00
sS'options'
p29918
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p29919
sS'group_name'
p29920
Nsa(dp29921
S'name'
p29922
S'output_euler_angle'
p29923
sS'cpp_type'
p29924
S'MooseEnum'
p29925
sS'default'
p29926
g3
sS'description'
p29927
S'Euler angle to output\n'
p29928
sS'required'
p29929
I01
sS'options'
p29930
S'phi1 Phi phi2'
p29931
sS'group_name'
p29932
Nsa(dp29933
S'description'
p29934
S'The seed for the master random number generator\n'
p29935
sS'cpp_type'
p29936
S'unsigned int'
p29937
sS'default'
p29938
S'0'
p29939
sS'name'
p29940
S'seed'
p29941
sS'required'
p29942
I00
sS'group_name'
p29943
S'Advanced'
p29944
sa(dp29945
S'description'
p29946
g3
sS'cpp_type'
p29947
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p29948
sS'default'
p29949
S'OutputEulerAngles'
p29950
sS'name'
p29951
S'type'
p29952
sS'required'
p29953
I00
sS'group_name'
p29954
Nsa(dp29955
S'description'
p29956
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29957
sS'cpp_type'
p29958
S'bool'
p29959
sS'default'
p29960
S'0'
p29961
sS'name'
p29962
S'use_displaced_mesh'
p29963
sS'required'
p29964
I00
sS'group_name'
p29965
S'Advanced'
p29966
sa(dp29967
S'description'
p29968
S'The name of the variable that this object applies to\n'
p29969
sS'cpp_type'
p29970
S'AuxVariableName'
p29971
sS'default'
p29972
g3
sS'name'
p29973
S'variable'
p29974
sS'required'
p29975
I01
sS'group_name'
p29976
NsasS'name'
p29977
S'/Bounds/OutputEulerAngles'
p29978
sa(dp29979
S'description'
p29980
g3
sS'subblocks'
p29981
NsS'parameters'
p29982
(lp29983
(dp29984
S'description'
p29985
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29986
sS'cpp_type'
p29987
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29988
sS'default'
p29989
g3
sS'name'
p29990
S'block'
p29991
sS'required'
p29992
I00
sS'group_name'
p29993
Nsa(dp29994
S'description'
p29995
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29996
sS'cpp_type'
p29997
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29998
sS'default'
p29999
g3
sS'name'
p30000
S'boundary'
p30001
sS'required'
p30002
I00
sS'group_name'
p30003
Nsa(dp30004
S'description'
p30005
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30006
sS'cpp_type'
p30007
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30008
sS'default'
p30009
g3
sS'name'
p30010
S'control_tags'
p30011
sS'required'
p30012
I00
sS'group_name'
p30013
Nsa(dp30014
S'name'
p30015
S'execute_on'
p30016
sS'cpp_type'
p30017
S'MultiMooseEnum'
p30018
sS'default'
p30019
S'LINEAR'
p30020
sS'description'
p30021
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30022
sS'required'
p30023
I00
sS'options'
p30024
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30025
sS'group_name'
p30026
Nsa(dp30027
S'description'
p30028
S'The seed for the master random number generator\n'
p30029
sS'cpp_type'
p30030
S'unsigned int'
p30031
sS'default'
p30032
S'0'
p30033
sS'name'
p30034
S'seed'
p30035
sS'required'
p30036
I00
sS'group_name'
p30037
S'Advanced'
p30038
sa(dp30039
S'description'
p30040
g3
sS'cpp_type'
p30041
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30042
sS'default'
p30043
S'PFCEnergyDensity'
p30044
sS'name'
p30045
S'type'
p30046
sS'required'
p30047
I00
sS'group_name'
p30048
Nsa(dp30049
S'description'
p30050
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30051
sS'cpp_type'
p30052
S'bool'
p30053
sS'default'
p30054
S'0'
p30055
sS'name'
p30056
S'use_displaced_mesh'
p30057
sS'required'
p30058
I00
sS'group_name'
p30059
S'Advanced'
p30060
sa(dp30061
S'description'
p30062
S'Array of coupled variables\n'
p30063
sS'cpp_type'
p30064
S'std::vector<VariableName>'
p30065
sS'default'
p30066
g3
sS'name'
p30067
S'v'
p30068
sS'required'
p30069
I01
sS'group_name'
p30070
Nsa(dp30071
S'description'
p30072
S'The name of the variable that this object applies to\n'
p30073
sS'cpp_type'
p30074
S'AuxVariableName'
p30075
sS'default'
p30076
g3
sS'name'
p30077
S'variable'
p30078
sS'required'
p30079
I01
sS'group_name'
p30080
NsasS'name'
p30081
S'/Bounds/PFCEnergyDensity'
p30082
sa(dp30083
S'description'
p30084
g3
sS'subblocks'
p30085
NsS'parameters'
p30086
(lp30087
(dp30088
S'description'
p30089
S'Modified Coefficent in Taylor Series Expanstion\n'
p30090
sS'cpp_type'
p30091
S'double'
p30092
sS'default'
p30093
S'1'
p30094
sS'name'
p30095
S'a'
p30096
sS'required'
p30097
I00
sS'group_name'
p30098
Nsa(dp30099
S'description'
p30100
S'Modified Coefficent in Taylor Series Expanstion\n'
p30101
sS'cpp_type'
p30102
S'double'
p30103
sS'default'
p30104
S'1'
p30105
sS'name'
p30106
S'b'
p30107
sS'required'
p30108
I00
sS'group_name'
p30109
Nsa(dp30110
S'description'
p30111
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30112
sS'cpp_type'
p30113
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30114
sS'default'
p30115
g3
sS'name'
p30116
S'block'
p30117
sS'required'
p30118
I00
sS'group_name'
p30119
Nsa(dp30120
S'description'
p30121
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30122
sS'cpp_type'
p30123
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30124
sS'default'
p30125
g3
sS'name'
p30126
S'boundary'
p30127
sS'required'
p30128
I00
sS'group_name'
p30129
Nsa(dp30130
S'description'
p30131
S'Modified Coefficent in Taylor Series Expanstion\n'
p30132
sS'cpp_type'
p30133
S'double'
p30134
sS'default'
p30135
S'1'
p30136
sS'name'
p30137
S'c'
p30138
sS'required'
p30139
I00
sS'group_name'
p30140
Nsa(dp30141
S'description'
p30142
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30143
sS'cpp_type'
p30144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30145
sS'default'
p30146
g3
sS'name'
p30147
S'control_tags'
p30148
sS'required'
p30149
I00
sS'group_name'
p30150
Nsa(dp30151
S'name'
p30152
S'execute_on'
p30153
sS'cpp_type'
p30154
S'MultiMooseEnum'
p30155
sS'default'
p30156
S'LINEAR'
p30157
sS'description'
p30158
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30159
sS'required'
p30160
I00
sS'options'
p30161
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30162
sS'group_name'
p30163
Nsa(dp30164
S'name'
p30165
S'log_approach'
p30166
sS'cpp_type'
p30167
S'MooseEnum'
p30168
sS'default'
p30169
g3
sS'description'
p30170
S'Which approach will be used to handle the natural log\n'
p30171
sS'required'
p30172
I01
sS'options'
p30173
S'tolerance cancelation expansion nothing'
p30174
sS'group_name'
p30175
Nsa(dp30176
S'description'
p30177
S'This is the number of terms to use in the taylor series expansion\n'
p30178
sS'cpp_type'
p30179
S'unsigned int'
p30180
sS'default'
p30181
S'4'
p30182
sS'name'
p30183
S'num_exp_terms'
p30184
sS'required'
p30185
I00
sS'group_name'
p30186
Nsa(dp30187
S'description'
p30188
S'The seed for the master random number generator\n'
p30189
sS'cpp_type'
p30190
S'unsigned int'
p30191
sS'default'
p30192
S'0'
p30193
sS'name'
p30194
S'seed'
p30195
sS'required'
p30196
I00
sS'group_name'
p30197
S'Advanced'
p30198
sa(dp30199
S'description'
p30200
S'Tolerance used when the tolerance approach is chosen\n'
p30201
sS'cpp_type'
p30202
S'double'
p30203
sS'default'
p30204
S'1e-09'
p30205
sS'name'
p30206
S'tol'
p30207
sS'required'
p30208
I00
sS'group_name'
p30209
Nsa(dp30210
S'description'
p30211
g3
sS'cpp_type'
p30212
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30213
sS'default'
p30214
S'PFCRFFEnergyDensity'
p30215
sS'name'
p30216
S'type'
p30217
sS'required'
p30218
I00
sS'group_name'
p30219
Nsa(dp30220
S'description'
p30221
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30222
sS'cpp_type'
p30223
S'bool'
p30224
sS'default'
p30225
S'0'
p30226
sS'name'
p30227
S'use_displaced_mesh'
p30228
sS'required'
p30229
I00
sS'group_name'
p30230
S'Advanced'
p30231
sa(dp30232
S'description'
p30233
S'Array of coupled variables\n'
p30234
sS'cpp_type'
p30235
S'std::vector<VariableName>'
p30236
sS'default'
p30237
g3
sS'name'
p30238
S'v'
p30239
sS'required'
p30240
I01
sS'group_name'
p30241
Nsa(dp30242
S'description'
p30243
S'The name of the variable that this object applies to\n'
p30244
sS'cpp_type'
p30245
S'AuxVariableName'
p30246
sS'default'
p30247
g3
sS'name'
p30248
S'variable'
p30249
sS'required'
p30250
I01
sS'group_name'
p30251
NsasS'name'
p30252
S'/Bounds/PFCRFFEnergyDensity'
p30253
sa(dp30254
S'description'
p30255
S'Parsed function AuxKernel.\n'
p30256
sS'subblocks'
p30257
NsS'parameters'
p30258
(lp30259
(dp30260
S'description'
p30261
S'coupled variables\n'
p30262
sS'cpp_type'
p30263
S'std::vector<VariableName>'
p30264
sS'default'
p30265
g3
sS'name'
p30266
S'args'
p30267
sS'required'
p30268
I00
sS'group_name'
p30269
Nsa(dp30270
S'description'
p30271
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30272
sS'cpp_type'
p30273
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30274
sS'default'
p30275
g3
sS'name'
p30276
S'block'
p30277
sS'required'
p30278
I00
sS'group_name'
p30279
Nsa(dp30280
S'description'
p30281
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30282
sS'cpp_type'
p30283
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30284
sS'default'
p30285
g3
sS'name'
p30286
S'boundary'
p30287
sS'required'
p30288
I00
sS'group_name'
p30289
Nsa(dp30290
S'description'
p30291
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p30292
sS'cpp_type'
p30293
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30294
sS'default'
p30295
g3
sS'name'
p30296
S'constant_expressions'
p30297
sS'required'
p30298
I00
sS'group_name'
p30299
Nsa(dp30300
S'description'
p30301
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p30302
sS'cpp_type'
p30303
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30304
sS'default'
p30305
g3
sS'name'
p30306
S'constant_names'
p30307
sS'required'
p30308
I00
sS'group_name'
p30309
Nsa(dp30310
S'description'
p30311
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30312
sS'cpp_type'
p30313
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30314
sS'default'
p30315
g3
sS'name'
p30316
S'control_tags'
p30317
sS'required'
p30318
I00
sS'group_name'
p30319
Nsa(dp30320
S'description'
p30321
S'Disable the function parser algebraic optimizer\n'
p30322
sS'cpp_type'
p30323
S'bool'
p30324
sS'default'
p30325
S'0'
p30326
sS'name'
p30327
S'disable_fpoptimizer'
p30328
sS'required'
p30329
I00
sS'group_name'
p30330
Nsa(dp30331
S'description'
p30332
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p30333
sS'cpp_type'
p30334
S'bool'
p30335
sS'default'
p30336
S'1'
p30337
sS'name'
p30338
S'enable_jit'
p30339
sS'required'
p30340
I00
sS'group_name'
p30341
Nsa(dp30342
S'name'
p30343
S'execute_on'
p30344
sS'cpp_type'
p30345
S'MultiMooseEnum'
p30346
sS'default'
p30347
S'LINEAR'
p30348
sS'description'
p30349
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30350
sS'required'
p30351
I00
sS'options'
p30352
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30353
sS'group_name'
p30354
Nsa(dp30355
S'description'
p30356
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p30357
sS'cpp_type'
p30358
S'bool'
p30359
sS'default'
p30360
S'0'
p30361
sS'name'
p30362
S'fail_on_evalerror'
p30363
sS'required'
p30364
I00
sS'group_name'
p30365
Nsa(dp30366
S'description'
p30367
S'function expression\n'
p30368
sS'cpp_type'
p30369
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30370
sS'default'
p30371
g3
sS'name'
p30372
S'function'
p30373
sS'required'
p30374
I01
sS'group_name'
p30375
Nsa(dp30376
S'description'
p30377
S'The seed for the master random number generator\n'
p30378
sS'cpp_type'
p30379
S'unsigned int'
p30380
sS'default'
p30381
S'0'
p30382
sS'name'
p30383
S'seed'
p30384
sS'required'
p30385
I00
sS'group_name'
p30386
S'Advanced'
p30387
sa(dp30388
S'description'
p30389
g3
sS'cpp_type'
p30390
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30391
sS'default'
p30392
S'ParsedAux'
p30393
sS'name'
p30394
S'type'
p30395
sS'required'
p30396
I00
sS'group_name'
p30397
Nsa(dp30398
S'description'
p30399
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30400
sS'cpp_type'
p30401
S'bool'
p30402
sS'default'
p30403
S'0'
p30404
sS'name'
p30405
S'use_displaced_mesh'
p30406
sS'required'
p30407
I00
sS'group_name'
p30408
S'Advanced'
p30409
sa(dp30410
S'description'
p30411
S'The name of the variable that this object applies to\n'
p30412
sS'cpp_type'
p30413
S'AuxVariableName'
p30414
sS'default'
p30415
g3
sS'name'
p30416
S'variable'
p30417
sS'required'
p30418
I01
sS'group_name'
p30419
NsasS'name'
p30420
S'/Bounds/ParsedAux'
p30421
sa(dp30422
S'description'
p30423
g3
sS'subblocks'
p30424
NsS'parameters'
p30425
(lp30426
(dp30427
S'description'
p30428
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30429
sS'cpp_type'
p30430
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30431
sS'default'
p30432
g3
sS'name'
p30433
S'block'
p30434
sS'required'
p30435
I00
sS'group_name'
p30436
Nsa(dp30437
S'description'
p30438
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30439
sS'cpp_type'
p30440
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30441
sS'default'
p30442
g3
sS'name'
p30443
S'boundary'
p30444
sS'required'
p30445
I00
sS'group_name'
p30446
Nsa(dp30447
S'description'
p30448
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30449
sS'cpp_type'
p30450
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30451
sS'default'
p30452
g3
sS'name'
p30453
S'control_tags'
p30454
sS'required'
p30455
I00
sS'group_name'
p30456
Nsa(dp30457
S'name'
p30458
S'execute_on'
p30459
sS'cpp_type'
p30460
S'MultiMooseEnum'
p30461
sS'default'
p30462
S'LINEAR'
p30463
sS'description'
p30464
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30465
sS'required'
p30466
I00
sS'options'
p30467
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30468
sS'group_name'
p30469
Nsa(dp30470
S'description'
p30471
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p30472
sS'cpp_type'
p30473
S'double'
p30474
sS'default'
p30475
g3
sS'name'
p30476
S'normal_smoothing_distance'
p30477
sS'required'
p30478
I00
sS'group_name'
p30479
Nsa(dp30480
S'description'
p30481
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p30482
sS'cpp_type'
p30483
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30484
sS'default'
p30485
g3
sS'name'
p30486
S'normal_smoothing_method'
p30487
sS'required'
p30488
I00
sS'group_name'
p30489
Nsa(dp30490
S'name'
p30491
S'order'
p30492
sS'cpp_type'
p30493
S'MooseEnum'
p30494
sS'default'
p30495
S'FIRST'
p30496
sS'description'
p30497
S'The finite element order\n'
p30498
sS'required'
p30499
I00
sS'options'
p30500
S'FIRST SECOND THIRD FOURTH'
p30501
sS'group_name'
p30502
Nsa(dp30503
S'description'
p30504
S'The boundary to be penetrated\n'
p30505
sS'cpp_type'
p30506
S'BoundaryName'
p30507
sS'default'
p30508
g3
sS'name'
p30509
S'paired_boundary'
p30510
sS'required'
p30511
I01
sS'group_name'
p30512
Nsa(dp30513
S'name'
p30514
S'quantity'
p30515
sS'cpp_type'
p30516
S'MooseEnum'
p30517
sS'default'
p30518
S'distance'
p30519
sS'description'
p30520
S'The quantity to recover from the available penetration information\n'
p30521
sS'required'
p30522
I00
sS'options'
p30523
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p30524
sS'group_name'
p30525
Nsa(dp30526
S'description'
p30527
S'The seed for the master random number generator\n'
p30528
sS'cpp_type'
p30529
S'unsigned int'
p30530
sS'default'
p30531
S'0'
p30532
sS'name'
p30533
S'seed'
p30534
sS'required'
p30535
I00
sS'group_name'
p30536
S'Advanced'
p30537
sa(dp30538
S'description'
p30539
S'Tangential distance to extend edges of contact surfaces\n'
p30540
sS'cpp_type'
p30541
S'double'
p30542
sS'default'
p30543
g3
sS'name'
p30544
S'tangential_tolerance'
p30545
sS'required'
p30546
I00
sS'group_name'
p30547
Nsa(dp30548
S'description'
p30549
g3
sS'cpp_type'
p30550
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30551
sS'default'
p30552
S'PenetrationAux'
p30553
sS'name'
p30554
S'type'
p30555
sS'required'
p30556
I00
sS'group_name'
p30557
Nsa(dp30558
S'description'
p30559
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30560
sS'cpp_type'
p30561
S'bool'
p30562
sS'default'
p30563
S'1'
p30564
sS'name'
p30565
S'use_displaced_mesh'
p30566
sS'required'
p30567
I00
sS'group_name'
p30568
S'Advanced'
p30569
sa(dp30570
S'description'
p30571
S'The name of the variable that this object applies to\n'
p30572
sS'cpp_type'
p30573
S'AuxVariableName'
p30574
sS'default'
p30575
g3
sS'name'
p30576
S'variable'
p30577
sS'required'
p30578
I01
sS'group_name'
p30579
NsasS'name'
p30580
S'/Bounds/PenetrationAux'
p30581
sa(dp30582
S'description'
p30583
g3
sS'subblocks'
p30584
NsS'parameters'
p30585
(lp30586
(dp30587
S'description'
p30588
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30589
sS'cpp_type'
p30590
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30591
sS'default'
p30592
g3
sS'name'
p30593
S'block'
p30594
sS'required'
p30595
I00
sS'group_name'
p30596
Nsa(dp30597
S'description'
p30598
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30599
sS'cpp_type'
p30600
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30601
sS'default'
p30602
g3
sS'name'
p30603
S'boundary'
p30604
sS'required'
p30605
I00
sS'group_name'
p30606
Nsa(dp30607
S'description'
p30608
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30609
sS'cpp_type'
p30610
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30611
sS'default'
p30612
g3
sS'name'
p30613
S'control_tags'
p30614
sS'required'
p30615
I00
sS'group_name'
p30616
Nsa(dp30617
S'name'
p30618
S'execute_on'
p30619
sS'cpp_type'
p30620
S'MultiMooseEnum'
p30621
sS'default'
p30622
S'LINEAR'
p30623
sS'description'
p30624
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30625
sS'required'
p30626
I00
sS'options'
p30627
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30628
sS'group_name'
p30629
Nsa(dp30630
S'description'
p30631
S'The seed for the master random number generator\n'
p30632
sS'cpp_type'
p30633
S'unsigned int'
p30634
sS'default'
p30635
S'0'
p30636
sS'name'
p30637
S'seed'
p30638
sS'required'
p30639
I00
sS'group_name'
p30640
S'Advanced'
p30641
sa(dp30642
S'description'
p30643
g3
sS'cpp_type'
p30644
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30645
sS'default'
p30646
S'ProcessorIDAux'
p30647
sS'name'
p30648
S'type'
p30649
sS'required'
p30650
I00
sS'group_name'
p30651
Nsa(dp30652
S'description'
p30653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30654
sS'cpp_type'
p30655
S'bool'
p30656
sS'default'
p30657
S'0'
p30658
sS'name'
p30659
S'use_displaced_mesh'
p30660
sS'required'
p30661
I00
sS'group_name'
p30662
S'Advanced'
p30663
sa(dp30664
S'description'
p30665
S'The name of the variable that this object applies to\n'
p30666
sS'cpp_type'
p30667
S'AuxVariableName'
p30668
sS'default'
p30669
g3
sS'name'
p30670
S'variable'
p30671
sS'required'
p30672
I01
sS'group_name'
p30673
NsasS'name'
p30674
S'/Bounds/ProcessorIDAux'
p30675
sa(dp30676
S'description'
p30677
g3
sS'subblocks'
p30678
NsS'parameters'
p30679
(lp30680
(dp30681
S'description'
p30682
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30683
sS'cpp_type'
p30684
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30685
sS'default'
p30686
g3
sS'name'
p30687
S'block'
p30688
sS'required'
p30689
I00
sS'group_name'
p30690
Nsa(dp30691
S'description'
p30692
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30693
sS'cpp_type'
p30694
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30695
sS'default'
p30696
g3
sS'name'
p30697
S'boundary'
p30698
sS'required'
p30699
I00
sS'group_name'
p30700
Nsa(dp30701
S'description'
p30702
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30703
sS'cpp_type'
p30704
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30705
sS'default'
p30706
g3
sS'name'
p30707
S'control_tags'
p30708
sS'required'
p30709
I00
sS'group_name'
p30710
Nsa(dp30711
S'description'
p30712
S'The downstairs of the quotient variable\n'
p30713
sS'cpp_type'
p30714
S'std::vector<VariableName>'
p30715
sS'default'
p30716
g3
sS'name'
p30717
S'denominator'
p30718
sS'required'
p30719
I00
sS'group_name'
p30720
Nsa(dp30721
S'name'
p30722
S'execute_on'
p30723
sS'cpp_type'
p30724
S'MultiMooseEnum'
p30725
sS'default'
p30726
S'LINEAR'
p30727
sS'description'
p30728
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30729
sS'required'
p30730
I00
sS'options'
p30731
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30732
sS'group_name'
p30733
Nsa(dp30734
S'description'
p30735
S'The upstairs of the quotient variable\n'
p30736
sS'cpp_type'
p30737
S'std::vector<VariableName>'
p30738
sS'default'
p30739
g3
sS'name'
p30740
S'numerator'
p30741
sS'required'
p30742
I00
sS'group_name'
p30743
Nsa(dp30744
S'description'
p30745
S'The seed for the master random number generator\n'
p30746
sS'cpp_type'
p30747
S'unsigned int'
p30748
sS'default'
p30749
S'0'
p30750
sS'name'
p30751
S'seed'
p30752
sS'required'
p30753
I00
sS'group_name'
p30754
S'Advanced'
p30755
sa(dp30756
S'description'
p30757
g3
sS'cpp_type'
p30758
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30759
sS'default'
p30760
S'QuotientAux'
p30761
sS'name'
p30762
S'type'
p30763
sS'required'
p30764
I00
sS'group_name'
p30765
Nsa(dp30766
S'description'
p30767
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30768
sS'cpp_type'
p30769
S'bool'
p30770
sS'default'
p30771
S'0'
p30772
sS'name'
p30773
S'use_displaced_mesh'
p30774
sS'required'
p30775
I00
sS'group_name'
p30776
S'Advanced'
p30777
sa(dp30778
S'description'
p30779
S'The name of the variable that this object applies to\n'
p30780
sS'cpp_type'
p30781
S'AuxVariableName'
p30782
sS'default'
p30783
g3
sS'name'
p30784
S'variable'
p30785
sS'required'
p30786
I01
sS'group_name'
p30787
NsasS'name'
p30788
S'/Bounds/QuotientAux'
p30789
sa(dp30790
S'description'
p30791
S'Access a component of a RankFourTensor\n'
p30792
sS'subblocks'
p30793
NsS'parameters'
p30794
(lp30795
(dp30796
S'description'
p30797
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30798
sS'cpp_type'
p30799
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30800
sS'default'
p30801
g3
sS'name'
p30802
S'block'
p30803
sS'required'
p30804
I00
sS'group_name'
p30805
Nsa(dp30806
S'description'
p30807
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30808
sS'cpp_type'
p30809
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30810
sS'default'
p30811
g3
sS'name'
p30812
S'boundary'
p30813
sS'required'
p30814
I00
sS'group_name'
p30815
Nsa(dp30816
S'description'
p30817
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30818
sS'cpp_type'
p30819
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30820
sS'default'
p30821
g3
sS'name'
p30822
S'control_tags'
p30823
sS'required'
p30824
I00
sS'group_name'
p30825
Nsa(dp30826
S'name'
p30827
S'execute_on'
p30828
sS'cpp_type'
p30829
S'MultiMooseEnum'
p30830
sS'default'
p30831
S'LINEAR'
p30832
sS'description'
p30833
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30834
sS'required'
p30835
I00
sS'options'
p30836
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30837
sS'group_name'
p30838
Nsa(dp30839
S'description'
p30840
S'The index i of ijkl for the tensor to output (0, 1, 2)\n'
p30841
sS'cpp_type'
p30842
S'unsigned int'
p30843
sS'default'
p30844
g3
sS'name'
p30845
S'index_i'
p30846
sS'required'
p30847
I01
sS'group_name'
p30848
Nsa(dp30849
S'description'
p30850
S'The index j of ijkl for the tensor to output (0, 1, 2)\n'
p30851
sS'cpp_type'
p30852
S'unsigned int'
p30853
sS'default'
p30854
g3
sS'name'
p30855
S'index_j'
p30856
sS'required'
p30857
I01
sS'group_name'
p30858
Nsa(dp30859
S'description'
p30860
S'The index k of ijkl for the tensor to output (0, 1, 2)\n'
p30861
sS'cpp_type'
p30862
S'unsigned int'
p30863
sS'default'
p30864
g3
sS'name'
p30865
S'index_k'
p30866
sS'required'
p30867
I01
sS'group_name'
p30868
Nsa(dp30869
S'description'
p30870
S'The index l of ijkl for the tensor to output (0, 1, 2)\n'
p30871
sS'cpp_type'
p30872
S'unsigned int'
p30873
sS'default'
p30874
g3
sS'name'
p30875
S'index_l'
p30876
sS'required'
p30877
I01
sS'group_name'
p30878
Nsa(dp30879
S'description'
p30880
S'The rank four material tensor name\n'
p30881
sS'cpp_type'
p30882
S'MaterialPropertyName'
p30883
sS'default'
p30884
g3
sS'name'
p30885
S'rank_four_tensor'
p30886
sS'required'
p30887
I01
sS'group_name'
p30888
Nsa(dp30889
S'description'
p30890
S'The seed for the master random number generator\n'
p30891
sS'cpp_type'
p30892
S'unsigned int'
p30893
sS'default'
p30894
S'0'
p30895
sS'name'
p30896
S'seed'
p30897
sS'required'
p30898
I00
sS'group_name'
p30899
S'Advanced'
p30900
sa(dp30901
S'description'
p30902
g3
sS'cpp_type'
p30903
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p30904
sS'default'
p30905
S'RankFourAux'
p30906
sS'name'
p30907
S'type'
p30908
sS'required'
p30909
I00
sS'group_name'
p30910
Nsa(dp30911
S'description'
p30912
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30913
sS'cpp_type'
p30914
S'bool'
p30915
sS'default'
p30916
S'0'
p30917
sS'name'
p30918
S'use_displaced_mesh'
p30919
sS'required'
p30920
I00
sS'group_name'
p30921
S'Advanced'
p30922
sa(dp30923
S'description'
p30924
S'The name of the variable that this object applies to\n'
p30925
sS'cpp_type'
p30926
S'AuxVariableName'
p30927
sS'default'
p30928
g3
sS'name'
p30929
S'variable'
p30930
sS'required'
p30931
I01
sS'group_name'
p30932
NsasS'name'
p30933
S'/Bounds/RankFourAux'
p30934
sa(dp30935
S'description'
p30936
S'Access a component of a RankTwoTensor\n'
p30937
sS'subblocks'
p30938
NsS'parameters'
p30939
(lp30940
(dp30941
S'description'
p30942
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30943
sS'cpp_type'
p30944
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30945
sS'default'
p30946
g3
sS'name'
p30947
S'block'
p30948
sS'required'
p30949
I00
sS'group_name'
p30950
Nsa(dp30951
S'description'
p30952
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30953
sS'cpp_type'
p30954
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30955
sS'default'
p30956
g3
sS'name'
p30957
S'boundary'
p30958
sS'required'
p30959
I00
sS'group_name'
p30960
Nsa(dp30961
S'description'
p30962
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30963
sS'cpp_type'
p30964
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p30965
sS'default'
p30966
g3
sS'name'
p30967
S'control_tags'
p30968
sS'required'
p30969
I00
sS'group_name'
p30970
Nsa(dp30971
S'name'
p30972
S'execute_on'
p30973
sS'cpp_type'
p30974
S'MultiMooseEnum'
p30975
sS'default'
p30976
S'LINEAR'
p30977
sS'description'
p30978
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30979
sS'required'
p30980
I00
sS'options'
p30981
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30982
sS'group_name'
p30983
Nsa(dp30984
S'description'
p30985
S'The index i of ij for the tensor to output (0, 1, 2)\n'
p30986
sS'cpp_type'
p30987
S'unsigned int'
p30988
sS'default'
p30989
g3
sS'name'
p30990
S'index_i'
p30991
sS'required'
p30992
I01
sS'group_name'
p30993
Nsa(dp30994
S'description'
p30995
S'The index j of ij for the tensor to output (0, 1, 2)\n'
p30996
sS'cpp_type'
p30997
S'unsigned int'
p30998
sS'default'
p30999
g3
sS'name'
p31000
S'index_j'
p31001
sS'required'
p31002
I01
sS'group_name'
p31003
Nsa(dp31004
S'description'
p31005
S'The rank two material tensor name\n'
p31006
sS'cpp_type'
p31007
S'MaterialPropertyName'
p31008
sS'default'
p31009
g3
sS'name'
p31010
S'rank_two_tensor'
p31011
sS'required'
p31012
I01
sS'group_name'
p31013
Nsa(dp31014
S'description'
p31015
S'The seed for the master random number generator\n'
p31016
sS'cpp_type'
p31017
S'unsigned int'
p31018
sS'default'
p31019
S'0'
p31020
sS'name'
p31021
S'seed'
p31022
sS'required'
p31023
I00
sS'group_name'
p31024
S'Advanced'
p31025
sa(dp31026
S'description'
p31027
g3
sS'cpp_type'
p31028
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31029
sS'default'
p31030
S'RankTwoAux'
p31031
sS'name'
p31032
S'type'
p31033
sS'required'
p31034
I00
sS'group_name'
p31035
Nsa(dp31036
S'description'
p31037
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31038
sS'cpp_type'
p31039
S'bool'
p31040
sS'default'
p31041
S'0'
p31042
sS'name'
p31043
S'use_displaced_mesh'
p31044
sS'required'
p31045
I00
sS'group_name'
p31046
S'Advanced'
p31047
sa(dp31048
S'description'
p31049
S'The name of the variable that this object applies to\n'
p31050
sS'cpp_type'
p31051
S'AuxVariableName'
p31052
sS'default'
p31053
g3
sS'name'
p31054
S'variable'
p31055
sS'required'
p31056
I01
sS'group_name'
p31057
NsasS'name'
p31058
S'/Bounds/RankTwoAux'
p31059
sa(dp31060
S'description'
p31061
S'Compute a scalar property of a RankTwoTensor\n'
p31062
sS'subblocks'
p31063
NsS'parameters'
p31064
(lp31065
(dp31066
S'description'
p31067
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31068
sS'cpp_type'
p31069
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31070
sS'default'
p31071
g3
sS'name'
p31072
S'block'
p31073
sS'required'
p31074
I00
sS'group_name'
p31075
Nsa(dp31076
S'description'
p31077
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31078
sS'cpp_type'
p31079
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31080
sS'default'
p31081
g3
sS'name'
p31082
S'boundary'
p31083
sS'required'
p31084
I00
sS'group_name'
p31085
Nsa(dp31086
S'description'
p31087
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31088
sS'cpp_type'
p31089
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31090
sS'default'
p31091
g3
sS'name'
p31092
S'control_tags'
p31093
sS'required'
p31094
I00
sS'group_name'
p31095
Nsa(dp31096
S'name'
p31097
S'execute_on'
p31098
sS'cpp_type'
p31099
S'MultiMooseEnum'
p31100
sS'default'
p31101
S'LINEAR'
p31102
sS'description'
p31103
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31104
sS'required'
p31105
I00
sS'options'
p31106
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31107
sS'group_name'
p31108
Nsa(dp31109
S'description'
p31110
S'The rank two material tensor name\n'
p31111
sS'cpp_type'
p31112
S'MaterialPropertyName'
p31113
sS'default'
p31114
g3
sS'name'
p31115
S'rank_two_tensor'
p31116
sS'required'
p31117
I01
sS'group_name'
p31118
Nsa(dp31119
S'name'
p31120
S'scalar_type'
p31121
sS'cpp_type'
p31122
S'MooseEnum'
p31123
sS'default'
p31124
g3
sS'description'
p31125
S'Type of scalar output\n'
p31126
sS'required'
p31127
I00
sS'options'
p31128
S'VonMisesStress EquivalentPlasticStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant'
p31129
sS'group_name'
p31130
Nsa(dp31131
S'description'
p31132
S'The seed for the master random number generator\n'
p31133
sS'cpp_type'
p31134
S'unsigned int'
p31135
sS'default'
p31136
S'0'
p31137
sS'name'
p31138
S'seed'
p31139
sS'required'
p31140
I00
sS'group_name'
p31141
S'Advanced'
p31142
sa(dp31143
S'description'
p31144
g3
sS'cpp_type'
p31145
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31146
sS'default'
p31147
S'RankTwoScalarAux'
p31148
sS'name'
p31149
S'type'
p31150
sS'required'
p31151
I00
sS'group_name'
p31152
Nsa(dp31153
S'description'
p31154
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31155
sS'cpp_type'
p31156
S'bool'
p31157
sS'default'
p31158
S'0'
p31159
sS'name'
p31160
S'use_displaced_mesh'
p31161
sS'required'
p31162
I00
sS'group_name'
p31163
S'Advanced'
p31164
sa(dp31165
S'description'
p31166
S'The name of the variable that this object applies to\n'
p31167
sS'cpp_type'
p31168
S'AuxVariableName'
p31169
sS'default'
p31170
g3
sS'name'
p31171
S'variable'
p31172
sS'required'
p31173
I01
sS'group_name'
p31174
NsasS'name'
p31175
S'/Bounds/RankTwoScalarAux'
p31176
sa(dp31177
S'description'
p31178
S'auxillary variable which is fluid density\n'
p31179
sS'subblocks'
p31180
NsS'parameters'
p31181
(lp31182
(dp31183
S'description'
p31184
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31185
sS'cpp_type'
p31186
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31187
sS'default'
p31188
g3
sS'name'
p31189
S'block'
p31190
sS'required'
p31191
I00
sS'group_name'
p31192
Nsa(dp31193
S'description'
p31194
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31195
sS'cpp_type'
p31196
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31197
sS'default'
p31198
g3
sS'name'
p31199
S'boundary'
p31200
sS'required'
p31201
I00
sS'group_name'
p31202
Nsa(dp31203
S'description'
p31204
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31205
sS'cpp_type'
p31206
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31207
sS'default'
p31208
g3
sS'name'
p31209
S'control_tags'
p31210
sS'required'
p31211
I00
sS'group_name'
p31212
Nsa(dp31213
S'description'
p31214
S'Name of user object that defines the density.\n'
p31215
sS'cpp_type'
p31216
S'UserObjectName'
p31217
sS'default'
p31218
g3
sS'name'
p31219
S'density_UO'
p31220
sS'required'
p31221
I01
sS'group_name'
p31222
Nsa(dp31223
S'name'
p31224
S'execute_on'
p31225
sS'cpp_type'
p31226
S'MultiMooseEnum'
p31227
sS'default'
p31228
S'LINEAR'
p31229
sS'description'
p31230
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31231
sS'required'
p31232
I00
sS'options'
p31233
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31234
sS'group_name'
p31235
Nsa(dp31236
S'description'
p31237
S'The variable that represents the pressure\n'
p31238
sS'cpp_type'
p31239
S'std::vector<VariableName>'
p31240
sS'default'
p31241
g3
sS'name'
p31242
S'pressure_var'
p31243
sS'required'
p31244
I01
sS'group_name'
p31245
Nsa(dp31246
S'description'
p31247
S'The seed for the master random number generator\n'
p31248
sS'cpp_type'
p31249
S'unsigned int'
p31250
sS'default'
p31251
S'0'
p31252
sS'name'
p31253
S'seed'
p31254
sS'required'
p31255
I00
sS'group_name'
p31256
S'Advanced'
p31257
sa(dp31258
S'description'
p31259
g3
sS'cpp_type'
p31260
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31261
sS'default'
p31262
S'RichardsDensityAux'
p31263
sS'name'
p31264
S'type'
p31265
sS'required'
p31266
I00
sS'group_name'
p31267
Nsa(dp31268
S'description'
p31269
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31270
sS'cpp_type'
p31271
S'bool'
p31272
sS'default'
p31273
S'0'
p31274
sS'name'
p31275
S'use_displaced_mesh'
p31276
sS'required'
p31277
I00
sS'group_name'
p31278
S'Advanced'
p31279
sa(dp31280
S'description'
p31281
S'The name of the variable that this object applies to\n'
p31282
sS'cpp_type'
p31283
S'AuxVariableName'
p31284
sS'default'
p31285
g3
sS'name'
p31286
S'variable'
p31287
sS'required'
p31288
I01
sS'group_name'
p31289
NsasS'name'
p31290
S'/Bounds/RichardsDensityAux'
p31291
sa(dp31292
S'description'
p31293
S'auxillary variable which is d(density)/dp\n'
p31294
sS'subblocks'
p31295
NsS'parameters'
p31296
(lp31297
(dp31298
S'description'
p31299
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31300
sS'cpp_type'
p31301
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31302
sS'default'
p31303
g3
sS'name'
p31304
S'block'
p31305
sS'required'
p31306
I00
sS'group_name'
p31307
Nsa(dp31308
S'description'
p31309
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31310
sS'cpp_type'
p31311
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31312
sS'default'
p31313
g3
sS'name'
p31314
S'boundary'
p31315
sS'required'
p31316
I00
sS'group_name'
p31317
Nsa(dp31318
S'description'
p31319
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31320
sS'cpp_type'
p31321
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31322
sS'default'
p31323
g3
sS'name'
p31324
S'control_tags'
p31325
sS'required'
p31326
I00
sS'group_name'
p31327
Nsa(dp31328
S'description'
p31329
S'Name of user object that defines the density.\n'
p31330
sS'cpp_type'
p31331
S'UserObjectName'
p31332
sS'default'
p31333
g3
sS'name'
p31334
S'density_UO'
p31335
sS'required'
p31336
I01
sS'group_name'
p31337
Nsa(dp31338
S'name'
p31339
S'execute_on'
p31340
sS'cpp_type'
p31341
S'MultiMooseEnum'
p31342
sS'default'
p31343
S'LINEAR'
p31344
sS'description'
p31345
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31346
sS'required'
p31347
I00
sS'options'
p31348
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31349
sS'group_name'
p31350
Nsa(dp31351
S'description'
p31352
S'The variable that represents the pressure\n'
p31353
sS'cpp_type'
p31354
S'std::vector<VariableName>'
p31355
sS'default'
p31356
g3
sS'name'
p31357
S'pressure_var'
p31358
sS'required'
p31359
I01
sS'group_name'
p31360
Nsa(dp31361
S'description'
p31362
S'The seed for the master random number generator\n'
p31363
sS'cpp_type'
p31364
S'unsigned int'
p31365
sS'default'
p31366
S'0'
p31367
sS'name'
p31368
S'seed'
p31369
sS'required'
p31370
I00
sS'group_name'
p31371
S'Advanced'
p31372
sa(dp31373
S'description'
p31374
g3
sS'cpp_type'
p31375
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31376
sS'default'
p31377
S'RichardsDensityPrimeAux'
p31378
sS'name'
p31379
S'type'
p31380
sS'required'
p31381
I00
sS'group_name'
p31382
Nsa(dp31383
S'description'
p31384
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31385
sS'cpp_type'
p31386
S'bool'
p31387
sS'default'
p31388
S'0'
p31389
sS'name'
p31390
S'use_displaced_mesh'
p31391
sS'required'
p31392
I00
sS'group_name'
p31393
S'Advanced'
p31394
sa(dp31395
S'description'
p31396
S'The name of the variable that this object applies to\n'
p31397
sS'cpp_type'
p31398
S'AuxVariableName'
p31399
sS'default'
p31400
g3
sS'name'
p31401
S'variable'
p31402
sS'required'
p31403
I01
sS'group_name'
p31404
NsasS'name'
p31405
S'/Bounds/RichardsDensityPrimeAux'
p31406
sa(dp31407
S'description'
p31408
S'auxillary variable which is d^2(density)/dp^2\n'
p31409
sS'subblocks'
p31410
NsS'parameters'
p31411
(lp31412
(dp31413
S'description'
p31414
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31415
sS'cpp_type'
p31416
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31417
sS'default'
p31418
g3
sS'name'
p31419
S'block'
p31420
sS'required'
p31421
I00
sS'group_name'
p31422
Nsa(dp31423
S'description'
p31424
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31425
sS'cpp_type'
p31426
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31427
sS'default'
p31428
g3
sS'name'
p31429
S'boundary'
p31430
sS'required'
p31431
I00
sS'group_name'
p31432
Nsa(dp31433
S'description'
p31434
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31435
sS'cpp_type'
p31436
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31437
sS'default'
p31438
g3
sS'name'
p31439
S'control_tags'
p31440
sS'required'
p31441
I00
sS'group_name'
p31442
Nsa(dp31443
S'description'
p31444
S'Name of user object that defines the density.\n'
p31445
sS'cpp_type'
p31446
S'UserObjectName'
p31447
sS'default'
p31448
g3
sS'name'
p31449
S'density_UO'
p31450
sS'required'
p31451
I01
sS'group_name'
p31452
Nsa(dp31453
S'name'
p31454
S'execute_on'
p31455
sS'cpp_type'
p31456
S'MultiMooseEnum'
p31457
sS'default'
p31458
S'LINEAR'
p31459
sS'description'
p31460
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31461
sS'required'
p31462
I00
sS'options'
p31463
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31464
sS'group_name'
p31465
Nsa(dp31466
S'description'
p31467
S'The variable that represents the pressure\n'
p31468
sS'cpp_type'
p31469
S'std::vector<VariableName>'
p31470
sS'default'
p31471
g3
sS'name'
p31472
S'pressure_var'
p31473
sS'required'
p31474
I01
sS'group_name'
p31475
Nsa(dp31476
S'description'
p31477
S'The seed for the master random number generator\n'
p31478
sS'cpp_type'
p31479
S'unsigned int'
p31480
sS'default'
p31481
S'0'
p31482
sS'name'
p31483
S'seed'
p31484
sS'required'
p31485
I00
sS'group_name'
p31486
S'Advanced'
p31487
sa(dp31488
S'description'
p31489
g3
sS'cpp_type'
p31490
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31491
sS'default'
p31492
S'RichardsDensityPrimePrimeAux'
p31493
sS'name'
p31494
S'type'
p31495
sS'required'
p31496
I00
sS'group_name'
p31497
Nsa(dp31498
S'description'
p31499
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31500
sS'cpp_type'
p31501
S'bool'
p31502
sS'default'
p31503
S'0'
p31504
sS'name'
p31505
S'use_displaced_mesh'
p31506
sS'required'
p31507
I00
sS'group_name'
p31508
S'Advanced'
p31509
sa(dp31510
S'description'
p31511
S'The name of the variable that this object applies to\n'
p31512
sS'cpp_type'
p31513
S'AuxVariableName'
p31514
sS'default'
p31515
g3
sS'name'
p31516
S'variable'
p31517
sS'required'
p31518
I01
sS'group_name'
p31519
NsasS'name'
p31520
S'/Bounds/RichardsDensityPrimePrimeAux'
p31521
sa(dp31522
S'description'
p31523
S'auxillary variable which is the relative permeability\n'
p31524
sS'subblocks'
p31525
NsS'parameters'
p31526
(lp31527
(dp31528
S'description'
p31529
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31530
sS'cpp_type'
p31531
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31532
sS'default'
p31533
g3
sS'name'
p31534
S'block'
p31535
sS'required'
p31536
I00
sS'group_name'
p31537
Nsa(dp31538
S'description'
p31539
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31540
sS'cpp_type'
p31541
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31542
sS'default'
p31543
g3
sS'name'
p31544
S'boundary'
p31545
sS'required'
p31546
I00
sS'group_name'
p31547
Nsa(dp31548
S'description'
p31549
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31550
sS'cpp_type'
p31551
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31552
sS'default'
p31553
g3
sS'name'
p31554
S'control_tags'
p31555
sS'required'
p31556
I00
sS'group_name'
p31557
Nsa(dp31558
S'name'
p31559
S'execute_on'
p31560
sS'cpp_type'
p31561
S'MultiMooseEnum'
p31562
sS'default'
p31563
S'LINEAR'
p31564
sS'description'
p31565
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31566
sS'required'
p31567
I00
sS'options'
p31568
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31569
sS'group_name'
p31570
Nsa(dp31571
S'description'
p31572
S'Name of user object that defines the relative permeability.\n'
p31573
sS'cpp_type'
p31574
S'UserObjectName'
p31575
sS'default'
p31576
g3
sS'name'
p31577
S'relperm_UO'
p31578
sS'required'
p31579
I01
sS'group_name'
p31580
Nsa(dp31581
S'description'
p31582
S'The seed for the master random number generator\n'
p31583
sS'cpp_type'
p31584
S'unsigned int'
p31585
sS'default'
p31586
S'0'
p31587
sS'name'
p31588
S'seed'
p31589
sS'required'
p31590
I00
sS'group_name'
p31591
S'Advanced'
p31592
sa(dp31593
S'description'
p31594
S'The variable that represents the effective saturation\n'
p31595
sS'cpp_type'
p31596
S'std::vector<VariableName>'
p31597
sS'default'
p31598
g3
sS'name'
p31599
S'seff_var'
p31600
sS'required'
p31601
I01
sS'group_name'
p31602
Nsa(dp31603
S'description'
p31604
g3
sS'cpp_type'
p31605
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31606
sS'default'
p31607
S'RichardsRelPermAux'
p31608
sS'name'
p31609
S'type'
p31610
sS'required'
p31611
I00
sS'group_name'
p31612
Nsa(dp31613
S'description'
p31614
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31615
sS'cpp_type'
p31616
S'bool'
p31617
sS'default'
p31618
S'0'
p31619
sS'name'
p31620
S'use_displaced_mesh'
p31621
sS'required'
p31622
I00
sS'group_name'
p31623
S'Advanced'
p31624
sa(dp31625
S'description'
p31626
S'The name of the variable that this object applies to\n'
p31627
sS'cpp_type'
p31628
S'AuxVariableName'
p31629
sS'default'
p31630
g3
sS'name'
p31631
S'variable'
p31632
sS'required'
p31633
I01
sS'group_name'
p31634
NsasS'name'
p31635
S'/Bounds/RichardsRelPermAux'
p31636
sa(dp31637
S'description'
p31638
S'auxillary variable which is d(relative permeability)/dSeff\n'
p31639
sS'subblocks'
p31640
NsS'parameters'
p31641
(lp31642
(dp31643
S'description'
p31644
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31645
sS'cpp_type'
p31646
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31647
sS'default'
p31648
g3
sS'name'
p31649
S'block'
p31650
sS'required'
p31651
I00
sS'group_name'
p31652
Nsa(dp31653
S'description'
p31654
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31655
sS'cpp_type'
p31656
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31657
sS'default'
p31658
g3
sS'name'
p31659
S'boundary'
p31660
sS'required'
p31661
I00
sS'group_name'
p31662
Nsa(dp31663
S'description'
p31664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31665
sS'cpp_type'
p31666
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31667
sS'default'
p31668
g3
sS'name'
p31669
S'control_tags'
p31670
sS'required'
p31671
I00
sS'group_name'
p31672
Nsa(dp31673
S'name'
p31674
S'execute_on'
p31675
sS'cpp_type'
p31676
S'MultiMooseEnum'
p31677
sS'default'
p31678
S'LINEAR'
p31679
sS'description'
p31680
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31681
sS'required'
p31682
I00
sS'options'
p31683
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31684
sS'group_name'
p31685
Nsa(dp31686
S'description'
p31687
S'Name of user object that defines the relative permeability.\n'
p31688
sS'cpp_type'
p31689
S'UserObjectName'
p31690
sS'default'
p31691
g3
sS'name'
p31692
S'relperm_UO'
p31693
sS'required'
p31694
I01
sS'group_name'
p31695
Nsa(dp31696
S'description'
p31697
S'The seed for the master random number generator\n'
p31698
sS'cpp_type'
p31699
S'unsigned int'
p31700
sS'default'
p31701
S'0'
p31702
sS'name'
p31703
S'seed'
p31704
sS'required'
p31705
I00
sS'group_name'
p31706
S'Advanced'
p31707
sa(dp31708
S'description'
p31709
S'The variable that represents the effective saturation\n'
p31710
sS'cpp_type'
p31711
S'std::vector<VariableName>'
p31712
sS'default'
p31713
g3
sS'name'
p31714
S'seff_var'
p31715
sS'required'
p31716
I01
sS'group_name'
p31717
Nsa(dp31718
S'description'
p31719
g3
sS'cpp_type'
p31720
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31721
sS'default'
p31722
S'RichardsRelPermPrimeAux'
p31723
sS'name'
p31724
S'type'
p31725
sS'required'
p31726
I00
sS'group_name'
p31727
Nsa(dp31728
S'description'
p31729
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31730
sS'cpp_type'
p31731
S'bool'
p31732
sS'default'
p31733
S'0'
p31734
sS'name'
p31735
S'use_displaced_mesh'
p31736
sS'required'
p31737
I00
sS'group_name'
p31738
S'Advanced'
p31739
sa(dp31740
S'description'
p31741
S'The name of the variable that this object applies to\n'
p31742
sS'cpp_type'
p31743
S'AuxVariableName'
p31744
sS'default'
p31745
g3
sS'name'
p31746
S'variable'
p31747
sS'required'
p31748
I01
sS'group_name'
p31749
NsasS'name'
p31750
S'/Bounds/RichardsRelPermPrimeAux'
p31751
sa(dp31752
S'description'
p31753
S'auxillary variable which is d^2(relative permeability)/dSeff^2\n'
p31754
sS'subblocks'
p31755
NsS'parameters'
p31756
(lp31757
(dp31758
S'description'
p31759
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31760
sS'cpp_type'
p31761
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31762
sS'default'
p31763
g3
sS'name'
p31764
S'block'
p31765
sS'required'
p31766
I00
sS'group_name'
p31767
Nsa(dp31768
S'description'
p31769
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31770
sS'cpp_type'
p31771
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31772
sS'default'
p31773
g3
sS'name'
p31774
S'boundary'
p31775
sS'required'
p31776
I00
sS'group_name'
p31777
Nsa(dp31778
S'description'
p31779
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31780
sS'cpp_type'
p31781
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31782
sS'default'
p31783
g3
sS'name'
p31784
S'control_tags'
p31785
sS'required'
p31786
I00
sS'group_name'
p31787
Nsa(dp31788
S'name'
p31789
S'execute_on'
p31790
sS'cpp_type'
p31791
S'MultiMooseEnum'
p31792
sS'default'
p31793
S'LINEAR'
p31794
sS'description'
p31795
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31796
sS'required'
p31797
I00
sS'options'
p31798
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31799
sS'group_name'
p31800
Nsa(dp31801
S'description'
p31802
S'Name of user object that defines the relative permeability.\n'
p31803
sS'cpp_type'
p31804
S'UserObjectName'
p31805
sS'default'
p31806
g3
sS'name'
p31807
S'relperm_UO'
p31808
sS'required'
p31809
I01
sS'group_name'
p31810
Nsa(dp31811
S'description'
p31812
S'The seed for the master random number generator\n'
p31813
sS'cpp_type'
p31814
S'unsigned int'
p31815
sS'default'
p31816
S'0'
p31817
sS'name'
p31818
S'seed'
p31819
sS'required'
p31820
I00
sS'group_name'
p31821
S'Advanced'
p31822
sa(dp31823
S'description'
p31824
S'The variable that represents the effective saturation\n'
p31825
sS'cpp_type'
p31826
S'std::vector<VariableName>'
p31827
sS'default'
p31828
g3
sS'name'
p31829
S'seff_var'
p31830
sS'required'
p31831
I01
sS'group_name'
p31832
Nsa(dp31833
S'description'
p31834
g3
sS'cpp_type'
p31835
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31836
sS'default'
p31837
S'RichardsRelPermPrimePrimeAux'
p31838
sS'name'
p31839
S'type'
p31840
sS'required'
p31841
I00
sS'group_name'
p31842
Nsa(dp31843
S'description'
p31844
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31845
sS'cpp_type'
p31846
S'bool'
p31847
sS'default'
p31848
S'0'
p31849
sS'name'
p31850
S'use_displaced_mesh'
p31851
sS'required'
p31852
I00
sS'group_name'
p31853
S'Advanced'
p31854
sa(dp31855
S'description'
p31856
S'The name of the variable that this object applies to\n'
p31857
sS'cpp_type'
p31858
S'AuxVariableName'
p31859
sS'default'
p31860
g3
sS'name'
p31861
S'variable'
p31862
sS'required'
p31863
I01
sS'group_name'
p31864
NsasS'name'
p31865
S'/Bounds/RichardsRelPermPrimePrimeAux'
p31866
sa(dp31867
S'description'
p31868
S'auxillary variable which is saturation\n'
p31869
sS'subblocks'
p31870
NsS'parameters'
p31871
(lp31872
(dp31873
S'description'
p31874
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31875
sS'cpp_type'
p31876
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31877
sS'default'
p31878
g3
sS'name'
p31879
S'block'
p31880
sS'required'
p31881
I00
sS'group_name'
p31882
Nsa(dp31883
S'description'
p31884
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31885
sS'cpp_type'
p31886
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p31887
sS'default'
p31888
g3
sS'name'
p31889
S'boundary'
p31890
sS'required'
p31891
I00
sS'group_name'
p31892
Nsa(dp31893
S'description'
p31894
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31895
sS'cpp_type'
p31896
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p31897
sS'default'
p31898
g3
sS'name'
p31899
S'control_tags'
p31900
sS'required'
p31901
I00
sS'group_name'
p31902
Nsa(dp31903
S'name'
p31904
S'execute_on'
p31905
sS'cpp_type'
p31906
S'MultiMooseEnum'
p31907
sS'default'
p31908
S'LINEAR'
p31909
sS'description'
p31910
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31911
sS'required'
p31912
I00
sS'options'
p31913
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31914
sS'group_name'
p31915
Nsa(dp31916
S'description'
p31917
S'Name of user object that defines saturation.\n'
p31918
sS'cpp_type'
p31919
S'UserObjectName'
p31920
sS'default'
p31921
g3
sS'name'
p31922
S'sat_UO'
p31923
sS'required'
p31924
I01
sS'group_name'
p31925
Nsa(dp31926
S'description'
p31927
S'The seed for the master random number generator\n'
p31928
sS'cpp_type'
p31929
S'unsigned int'
p31930
sS'default'
p31931
S'0'
p31932
sS'name'
p31933
S'seed'
p31934
sS'required'
p31935
I00
sS'group_name'
p31936
S'Advanced'
p31937
sa(dp31938
S'description'
p31939
S'Variable that is the effective saturation\n'
p31940
sS'cpp_type'
p31941
S'std::vector<VariableName>'
p31942
sS'default'
p31943
g3
sS'name'
p31944
S'seff_var'
p31945
sS'required'
p31946
I01
sS'group_name'
p31947
Nsa(dp31948
S'description'
p31949
g3
sS'cpp_type'
p31950
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p31951
sS'default'
p31952
S'RichardsSatAux'
p31953
sS'name'
p31954
S'type'
p31955
sS'required'
p31956
I00
sS'group_name'
p31957
Nsa(dp31958
S'description'
p31959
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31960
sS'cpp_type'
p31961
S'bool'
p31962
sS'default'
p31963
S'0'
p31964
sS'name'
p31965
S'use_displaced_mesh'
p31966
sS'required'
p31967
I00
sS'group_name'
p31968
S'Advanced'
p31969
sa(dp31970
S'description'
p31971
S'The name of the variable that this object applies to\n'
p31972
sS'cpp_type'
p31973
S'AuxVariableName'
p31974
sS'default'
p31975
g3
sS'name'
p31976
S'variable'
p31977
sS'required'
p31978
I01
sS'group_name'
p31979
NsasS'name'
p31980
S'/Bounds/RichardsSatAux'
p31981
sa(dp31982
S'description'
p31983
S'auxillary variable which is saturation\n'
p31984
sS'subblocks'
p31985
NsS'parameters'
p31986
(lp31987
(dp31988
S'description'
p31989
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31990
sS'cpp_type'
p31991
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31992
sS'default'
p31993
g3
sS'name'
p31994
S'block'
p31995
sS'required'
p31996
I00
sS'group_name'
p31997
Nsa(dp31998
S'description'
p31999
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32000
sS'cpp_type'
p32001
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32002
sS'default'
p32003
g3
sS'name'
p32004
S'boundary'
p32005
sS'required'
p32006
I00
sS'group_name'
p32007
Nsa(dp32008
S'description'
p32009
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32010
sS'cpp_type'
p32011
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32012
sS'default'
p32013
g3
sS'name'
p32014
S'control_tags'
p32015
sS'required'
p32016
I00
sS'group_name'
p32017
Nsa(dp32018
S'name'
p32019
S'execute_on'
p32020
sS'cpp_type'
p32021
S'MultiMooseEnum'
p32022
sS'default'
p32023
S'LINEAR'
p32024
sS'description'
p32025
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32026
sS'required'
p32027
I00
sS'options'
p32028
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32029
sS'group_name'
p32030
Nsa(dp32031
S'description'
p32032
S'Name of user object that defines saturation.\n'
p32033
sS'cpp_type'
p32034
S'UserObjectName'
p32035
sS'default'
p32036
g3
sS'name'
p32037
S'sat_UO'
p32038
sS'required'
p32039
I01
sS'group_name'
p32040
Nsa(dp32041
S'description'
p32042
S'The seed for the master random number generator\n'
p32043
sS'cpp_type'
p32044
S'unsigned int'
p32045
sS'default'
p32046
S'0'
p32047
sS'name'
p32048
S'seed'
p32049
sS'required'
p32050
I00
sS'group_name'
p32051
S'Advanced'
p32052
sa(dp32053
S'description'
p32054
S'Variable that is the effective saturation\n'
p32055
sS'cpp_type'
p32056
S'std::vector<VariableName>'
p32057
sS'default'
p32058
g3
sS'name'
p32059
S'seff_var'
p32060
sS'required'
p32061
I01
sS'group_name'
p32062
Nsa(dp32063
S'description'
p32064
g3
sS'cpp_type'
p32065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32066
sS'default'
p32067
S'RichardsSatPrimeAux'
p32068
sS'name'
p32069
S'type'
p32070
sS'required'
p32071
I00
sS'group_name'
p32072
Nsa(dp32073
S'description'
p32074
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32075
sS'cpp_type'
p32076
S'bool'
p32077
sS'default'
p32078
S'0'
p32079
sS'name'
p32080
S'use_displaced_mesh'
p32081
sS'required'
p32082
I00
sS'group_name'
p32083
S'Advanced'
p32084
sa(dp32085
S'description'
p32086
S'The name of the variable that this object applies to\n'
p32087
sS'cpp_type'
p32088
S'AuxVariableName'
p32089
sS'default'
p32090
g3
sS'name'
p32091
S'variable'
p32092
sS'required'
p32093
I01
sS'group_name'
p32094
NsasS'name'
p32095
S'/Bounds/RichardsSatPrimeAux'
p32096
sa(dp32097
S'description'
p32098
S'auxillary variable which is effective saturation\n'
p32099
sS'subblocks'
p32100
NsS'parameters'
p32101
(lp32102
(dp32103
S'description'
p32104
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32105
sS'cpp_type'
p32106
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32107
sS'default'
p32108
g3
sS'name'
p32109
S'block'
p32110
sS'required'
p32111
I00
sS'group_name'
p32112
Nsa(dp32113
S'description'
p32114
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32115
sS'cpp_type'
p32116
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32117
sS'default'
p32118
g3
sS'name'
p32119
S'boundary'
p32120
sS'required'
p32121
I00
sS'group_name'
p32122
Nsa(dp32123
S'description'
p32124
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32125
sS'cpp_type'
p32126
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32127
sS'default'
p32128
g3
sS'name'
p32129
S'control_tags'
p32130
sS'required'
p32131
I00
sS'group_name'
p32132
Nsa(dp32133
S'name'
p32134
S'execute_on'
p32135
sS'cpp_type'
p32136
S'MultiMooseEnum'
p32137
sS'default'
p32138
S'LINEAR'
p32139
sS'description'
p32140
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32141
sS'required'
p32142
I00
sS'options'
p32143
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32144
sS'group_name'
p32145
Nsa(dp32146
S'description'
p32147
S'List of variables that represent the pressure\n'
p32148
sS'cpp_type'
p32149
S'std::vector<VariableName>'
p32150
sS'default'
p32151
g3
sS'name'
p32152
S'pressure_vars'
p32153
sS'required'
p32154
I01
sS'group_name'
p32155
Nsa(dp32156
S'description'
p32157
S'The seed for the master random number generator\n'
p32158
sS'cpp_type'
p32159
S'unsigned int'
p32160
sS'default'
p32161
S'0'
p32162
sS'name'
p32163
S'seed'
p32164
sS'required'
p32165
I00
sS'group_name'
p32166
S'Advanced'
p32167
sa(dp32168
S'description'
p32169
S'Name of user object that defines effective saturation.\n'
p32170
sS'cpp_type'
p32171
S'UserObjectName'
p32172
sS'default'
p32173
g3
sS'name'
p32174
S'seff_UO'
p32175
sS'required'
p32176
I01
sS'group_name'
p32177
Nsa(dp32178
S'description'
p32179
g3
sS'cpp_type'
p32180
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32181
sS'default'
p32182
S'RichardsSeffAux'
p32183
sS'name'
p32184
S'type'
p32185
sS'required'
p32186
I00
sS'group_name'
p32187
Nsa(dp32188
S'description'
p32189
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32190
sS'cpp_type'
p32191
S'bool'
p32192
sS'default'
p32193
S'0'
p32194
sS'name'
p32195
S'use_displaced_mesh'
p32196
sS'required'
p32197
I00
sS'group_name'
p32198
S'Advanced'
p32199
sa(dp32200
S'description'
p32201
S'The name of the variable that this object applies to\n'
p32202
sS'cpp_type'
p32203
S'AuxVariableName'
p32204
sS'default'
p32205
g3
sS'name'
p32206
S'variable'
p32207
sS'required'
p32208
I01
sS'group_name'
p32209
NsasS'name'
p32210
S'/Bounds/RichardsSeffAux'
p32211
sa(dp32212
S'description'
p32213
S'auxillary variable which is effective saturation\n'
p32214
sS'subblocks'
p32215
NsS'parameters'
p32216
(lp32217
(dp32218
S'description'
p32219
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32220
sS'cpp_type'
p32221
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32222
sS'default'
p32223
g3
sS'name'
p32224
S'block'
p32225
sS'required'
p32226
I00
sS'group_name'
p32227
Nsa(dp32228
S'description'
p32229
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32230
sS'cpp_type'
p32231
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32232
sS'default'
p32233
g3
sS'name'
p32234
S'boundary'
p32235
sS'required'
p32236
I00
sS'group_name'
p32237
Nsa(dp32238
S'description'
p32239
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32240
sS'cpp_type'
p32241
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32242
sS'default'
p32243
g3
sS'name'
p32244
S'control_tags'
p32245
sS'required'
p32246
I00
sS'group_name'
p32247
Nsa(dp32248
S'name'
p32249
S'execute_on'
p32250
sS'cpp_type'
p32251
S'MultiMooseEnum'
p32252
sS'default'
p32253
S'LINEAR'
p32254
sS'description'
p32255
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32256
sS'required'
p32257
I00
sS'options'
p32258
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32259
sS'group_name'
p32260
Nsa(dp32261
S'description'
p32262
S'List of variables that represent the pressure\n'
p32263
sS'cpp_type'
p32264
S'std::vector<VariableName>'
p32265
sS'default'
p32266
g3
sS'name'
p32267
S'pressure_vars'
p32268
sS'required'
p32269
I01
sS'group_name'
p32270
Nsa(dp32271
S'description'
p32272
S'The seed for the master random number generator\n'
p32273
sS'cpp_type'
p32274
S'unsigned int'
p32275
sS'default'
p32276
S'0'
p32277
sS'name'
p32278
S'seed'
p32279
sS'required'
p32280
I00
sS'group_name'
p32281
S'Advanced'
p32282
sa(dp32283
S'description'
p32284
S'Name of user object that defines effective saturation.\n'
p32285
sS'cpp_type'
p32286
S'UserObjectName'
p32287
sS'default'
p32288
g3
sS'name'
p32289
S'seff_UO'
p32290
sS'required'
p32291
I01
sS'group_name'
p32292
Nsa(dp32293
S'description'
p32294
g3
sS'cpp_type'
p32295
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32296
sS'default'
p32297
S'RichardsSeffPrimeAux'
p32298
sS'name'
p32299
S'type'
p32300
sS'required'
p32301
I00
sS'group_name'
p32302
Nsa(dp32303
S'description'
p32304
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32305
sS'cpp_type'
p32306
S'bool'
p32307
sS'default'
p32308
S'0'
p32309
sS'name'
p32310
S'use_displaced_mesh'
p32311
sS'required'
p32312
I00
sS'group_name'
p32313
S'Advanced'
p32314
sa(dp32315
S'description'
p32316
S'The name of the variable that this object applies to\n'
p32317
sS'cpp_type'
p32318
S'AuxVariableName'
p32319
sS'default'
p32320
g3
sS'name'
p32321
S'variable'
p32322
sS'required'
p32323
I01
sS'group_name'
p32324
Nsa(dp32325
S'description'
p32326
S'This aux kernel will return d(seff)/dP_wrtnum.  0<=wrtnum<number_of_pressure_vars.\n'
p32327
sS'cpp_type'
p32328
S'int'
p32329
sS'default'
p32330
g3
sS'name'
p32331
S'wrtnum'
p32332
sS'required'
p32333
I01
sS'group_name'
p32334
NsasS'name'
p32335
S'/Bounds/RichardsSeffPrimeAux'
p32336
sa(dp32337
S'description'
p32338
S'auxillary variable which is 2nd derivative of effective saturation\n'
p32339
sS'subblocks'
p32340
NsS'parameters'
p32341
(lp32342
(dp32343
S'description'
p32344
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32345
sS'cpp_type'
p32346
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32347
sS'default'
p32348
g3
sS'name'
p32349
S'block'
p32350
sS'required'
p32351
I00
sS'group_name'
p32352
Nsa(dp32353
S'description'
p32354
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32355
sS'cpp_type'
p32356
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32357
sS'default'
p32358
g3
sS'name'
p32359
S'boundary'
p32360
sS'required'
p32361
I00
sS'group_name'
p32362
Nsa(dp32363
S'description'
p32364
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32365
sS'cpp_type'
p32366
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32367
sS'default'
p32368
g3
sS'name'
p32369
S'control_tags'
p32370
sS'required'
p32371
I00
sS'group_name'
p32372
Nsa(dp32373
S'name'
p32374
S'execute_on'
p32375
sS'cpp_type'
p32376
S'MultiMooseEnum'
p32377
sS'default'
p32378
S'LINEAR'
p32379
sS'description'
p32380
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32381
sS'required'
p32382
I00
sS'options'
p32383
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32384
sS'group_name'
p32385
Nsa(dp32386
S'description'
p32387
S'List of variables that represent the pressure\n'
p32388
sS'cpp_type'
p32389
S'std::vector<VariableName>'
p32390
sS'default'
p32391
g3
sS'name'
p32392
S'pressure_vars'
p32393
sS'required'
p32394
I01
sS'group_name'
p32395
Nsa(dp32396
S'description'
p32397
S'The seed for the master random number generator\n'
p32398
sS'cpp_type'
p32399
S'unsigned int'
p32400
sS'default'
p32401
S'0'
p32402
sS'name'
p32403
S'seed'
p32404
sS'required'
p32405
I00
sS'group_name'
p32406
S'Advanced'
p32407
sa(dp32408
S'description'
p32409
S'Name of user object that defines effective saturation.\n'
p32410
sS'cpp_type'
p32411
S'UserObjectName'
p32412
sS'default'
p32413
g3
sS'name'
p32414
S'seff_UO'
p32415
sS'required'
p32416
I01
sS'group_name'
p32417
Nsa(dp32418
S'description'
p32419
g3
sS'cpp_type'
p32420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32421
sS'default'
p32422
S'RichardsSeffPrimePrimeAux'
p32423
sS'name'
p32424
S'type'
p32425
sS'required'
p32426
I00
sS'group_name'
p32427
Nsa(dp32428
S'description'
p32429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32430
sS'cpp_type'
p32431
S'bool'
p32432
sS'default'
p32433
S'0'
p32434
sS'name'
p32435
S'use_displaced_mesh'
p32436
sS'required'
p32437
I00
sS'group_name'
p32438
S'Advanced'
p32439
sa(dp32440
S'description'
p32441
S'The name of the variable that this object applies to\n'
p32442
sS'cpp_type'
p32443
S'AuxVariableName'
p32444
sS'default'
p32445
g3
sS'name'
p32446
S'variable'
p32447
sS'required'
p32448
I01
sS'group_name'
p32449
Nsa(dp32450
S'description'
p32451
S'This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum1<number_of_pressure_vars.\n'
p32452
sS'cpp_type'
p32453
S'int'
p32454
sS'default'
p32455
g3
sS'name'
p32456
S'wrtnum1'
p32457
sS'required'
p32458
I01
sS'group_name'
p32459
Nsa(dp32460
S'description'
p32461
S'This aux kernel will return d^2(seff)/dP_wrtnum1 dP_wrtnum2.  0<=wrtnum2<number_of_pressure_vars.\n'
p32462
sS'cpp_type'
p32463
S'int'
p32464
sS'default'
p32465
g3
sS'name'
p32466
S'wrtnum2'
p32467
sS'required'
p32468
I01
sS'group_name'
p32469
NsasS'name'
p32470
S'/Bounds/RichardsSeffPrimePrimeAux'
p32471
sa(dp32472
S'description'
p32473
g3
sS'subblocks'
p32474
NsS'parameters'
p32475
(lp32476
(dp32477
S'description'
p32478
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32479
sS'cpp_type'
p32480
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32481
sS'default'
p32482
g3
sS'name'
p32483
S'block'
p32484
sS'required'
p32485
I00
sS'group_name'
p32486
Nsa(dp32487
S'description'
p32488
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32489
sS'cpp_type'
p32490
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32491
sS'default'
p32492
g3
sS'name'
p32493
S'boundary'
p32494
sS'required'
p32495
I00
sS'group_name'
p32496
Nsa(dp32497
S'description'
p32498
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32499
sS'cpp_type'
p32500
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32501
sS'default'
p32502
g3
sS'name'
p32503
S'control_tags'
p32504
sS'required'
p32505
I00
sS'group_name'
p32506
Nsa(dp32507
S'name'
p32508
S'execute_on'
p32509
sS'cpp_type'
p32510
S'MultiMooseEnum'
p32511
sS'default'
p32512
S'LINEAR'
p32513
sS'description'
p32514
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32515
sS'required'
p32516
I00
sS'options'
p32517
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32518
sS'group_name'
p32519
Nsa(dp32520
S'description'
p32521
S'The seed for the master random number generator\n'
p32522
sS'cpp_type'
p32523
S'unsigned int'
p32524
sS'default'
p32525
S'0'
p32526
sS'name'
p32527
S'seed'
p32528
sS'required'
p32529
I00
sS'group_name'
p32530
S'Advanced'
p32531
sa(dp32532
S'description'
p32533
g3
sS'cpp_type'
p32534
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32535
sS'default'
p32536
S'SelfAux'
p32537
sS'name'
p32538
S'type'
p32539
sS'required'
p32540
I00
sS'group_name'
p32541
Nsa(dp32542
S'description'
p32543
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32544
sS'cpp_type'
p32545
S'bool'
p32546
sS'default'
p32547
S'0'
p32548
sS'name'
p32549
S'use_displaced_mesh'
p32550
sS'required'
p32551
I00
sS'group_name'
p32552
S'Advanced'
p32553
sa(dp32554
S'description'
p32555
S'The name of the variable that this object applies to\n'
p32556
sS'cpp_type'
p32557
S'AuxVariableName'
p32558
sS'default'
p32559
g3
sS'name'
p32560
S'variable'
p32561
sS'required'
p32562
I01
sS'group_name'
p32563
NsasS'name'
p32564
S'/Bounds/SelfAux'
p32565
sa(dp32566
S'description'
p32567
g3
sS'subblocks'
p32568
NsS'parameters'
p32569
(lp32570
(dp32571
S'description'
p32572
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p32573
sS'cpp_type'
p32574
S'double'
p32575
sS'default'
p32576
S'0'
p32577
sS'name'
p32578
S'add_factor'
p32579
sS'required'
p32580
I00
sS'group_name'
p32581
Nsa(dp32582
S'description'
p32583
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32584
sS'cpp_type'
p32585
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32586
sS'default'
p32587
g3
sS'name'
p32588
S'block'
p32589
sS'required'
p32590
I00
sS'group_name'
p32591
Nsa(dp32592
S'description'
p32593
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32594
sS'cpp_type'
p32595
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32596
sS'default'
p32597
g3
sS'name'
p32598
S'boundary'
p32599
sS'required'
p32600
I00
sS'group_name'
p32601
Nsa(dp32602
S'description'
p32603
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32604
sS'cpp_type'
p32605
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32606
sS'default'
p32607
g3
sS'name'
p32608
S'control_tags'
p32609
sS'required'
p32610
I00
sS'group_name'
p32611
Nsa(dp32612
S'description'
p32613
S'If true the meshes must be the same and then the values are simply copied over.\n'
p32614
sS'cpp_type'
p32615
S'bool'
p32616
sS'default'
p32617
S'0'
p32618
sS'name'
p32619
S'direct'
p32620
sS'required'
p32621
I00
sS'group_name'
p32622
Nsa(dp32623
S'name'
p32624
S'execute_on'
p32625
sS'cpp_type'
p32626
S'MultiMooseEnum'
p32627
sS'default'
p32628
S'LINEAR'
p32629
sS'description'
p32630
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32631
sS'required'
p32632
I00
sS'options'
p32633
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32634
sS'group_name'
p32635
Nsa(dp32636
S'description'
p32637
S'The name of the variable to extract from the file\n'
p32638
sS'cpp_type'
p32639
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32640
sS'default'
p32641
g3
sS'name'
p32642
S'from_variable'
p32643
sS'required'
p32644
I00
sS'group_name'
p32645
Nsa(dp32646
S'description'
p32647
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p32648
sS'cpp_type'
p32649
S'double'
p32650
sS'default'
p32651
S'1'
p32652
sS'name'
p32653
S'scale_factor'
p32654
sS'required'
p32655
I00
sS'group_name'
p32656
Nsa(dp32657
S'description'
p32658
S'The seed for the master random number generator\n'
p32659
sS'cpp_type'
p32660
S'unsigned int'
p32661
sS'default'
p32662
S'0'
p32663
sS'name'
p32664
S'seed'
p32665
sS'required'
p32666
I00
sS'group_name'
p32667
S'Advanced'
p32668
sa(dp32669
S'description'
p32670
S'The name of the SolutionUserObject\n'
p32671
sS'cpp_type'
p32672
S'UserObjectName'
p32673
sS'default'
p32674
g3
sS'name'
p32675
S'solution'
p32676
sS'required'
p32677
I01
sS'group_name'
p32678
Nsa(dp32679
S'description'
p32680
g3
sS'cpp_type'
p32681
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32682
sS'default'
p32683
S'SolutionAux'
p32684
sS'name'
p32685
S'type'
p32686
sS'required'
p32687
I00
sS'group_name'
p32688
Nsa(dp32689
S'description'
p32690
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32691
sS'cpp_type'
p32692
S'bool'
p32693
sS'default'
p32694
S'0'
p32695
sS'name'
p32696
S'use_displaced_mesh'
p32697
sS'required'
p32698
I00
sS'group_name'
p32699
S'Advanced'
p32700
sa(dp32701
S'description'
p32702
S'The name of the variable that this object applies to\n'
p32703
sS'cpp_type'
p32704
S'AuxVariableName'
p32705
sS'default'
p32706
g3
sS'name'
p32707
S'variable'
p32708
sS'required'
p32709
I01
sS'group_name'
p32710
NsasS'name'
p32711
S'/Bounds/SolutionAux'
p32712
sa(dp32713
S'description'
p32714
g3
sS'subblocks'
p32715
NsS'parameters'
p32716
(lp32717
(dp32718
S'description'
p32719
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32720
sS'cpp_type'
p32721
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32722
sS'default'
p32723
g3
sS'name'
p32724
S'block'
p32725
sS'required'
p32726
I00
sS'group_name'
p32727
Nsa(dp32728
S'description'
p32729
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32730
sS'cpp_type'
p32731
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32732
sS'default'
p32733
g3
sS'name'
p32734
S'boundary'
p32735
sS'required'
p32736
I00
sS'group_name'
p32737
Nsa(dp32738
S'description'
p32739
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32740
sS'cpp_type'
p32741
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32742
sS'default'
p32743
g3
sS'name'
p32744
S'control_tags'
p32745
sS'required'
p32746
I00
sS'group_name'
p32747
Nsa(dp32748
S'name'
p32749
S'execute_on'
p32750
sS'cpp_type'
p32751
S'MultiMooseEnum'
p32752
sS'default'
p32753
S'LINEAR'
p32754
sS'description'
p32755
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32756
sS'required'
p32757
I00
sS'options'
p32758
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32759
sS'group_name'
p32760
Nsa(dp32761
S'description'
p32762
S'The seed for the master random number generator\n'
p32763
sS'cpp_type'
p32764
S'unsigned int'
p32765
sS'default'
p32766
S'0'
p32767
sS'name'
p32768
S'seed'
p32769
sS'required'
p32770
I00
sS'group_name'
p32771
S'Advanced'
p32772
sa(dp32773
S'description'
p32774
g3
sS'cpp_type'
p32775
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32776
sS'default'
p32777
S'SpatialUserObjectAux'
p32778
sS'name'
p32779
S'type'
p32780
sS'required'
p32781
I00
sS'group_name'
p32782
Nsa(dp32783
S'description'
p32784
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32785
sS'cpp_type'
p32786
S'bool'
p32787
sS'default'
p32788
S'0'
p32789
sS'name'
p32790
S'use_displaced_mesh'
p32791
sS'required'
p32792
I00
sS'group_name'
p32793
S'Advanced'
p32794
sa(dp32795
S'description'
p32796
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p32797
sS'cpp_type'
p32798
S'UserObjectName'
p32799
sS'default'
p32800
g3
sS'name'
p32801
S'user_object'
p32802
sS'required'
p32803
I01
sS'group_name'
p32804
Nsa(dp32805
S'description'
p32806
S'The name of the variable that this object applies to\n'
p32807
sS'cpp_type'
p32808
S'AuxVariableName'
p32809
sS'default'
p32810
g3
sS'name'
p32811
S'variable'
p32812
sS'required'
p32813
I01
sS'group_name'
p32814
NsasS'name'
p32815
S'/Bounds/SpatialUserObjectAux'
p32816
sa(dp32817
S'description'
p32818
S'Compute the local elastic energy\n'
p32819
sS'subblocks'
p32820
NsS'parameters'
p32821
(lp32822
(dp32823
S'description'
p32824
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32825
sS'cpp_type'
p32826
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32827
sS'default'
p32828
g3
sS'name'
p32829
S'block'
p32830
sS'required'
p32831
I00
sS'group_name'
p32832
Nsa(dp32833
S'description'
p32834
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32835
sS'cpp_type'
p32836
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32837
sS'default'
p32838
g3
sS'name'
p32839
S'boundary'
p32840
sS'required'
p32841
I00
sS'group_name'
p32842
Nsa(dp32843
S'description'
p32844
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32845
sS'cpp_type'
p32846
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32847
sS'default'
p32848
g3
sS'name'
p32849
S'control_tags'
p32850
sS'required'
p32851
I00
sS'group_name'
p32852
Nsa(dp32853
S'name'
p32854
S'execute_on'
p32855
sS'cpp_type'
p32856
S'MultiMooseEnum'
p32857
sS'default'
p32858
S'LINEAR'
p32859
sS'description'
p32860
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32861
sS'required'
p32862
I00
sS'options'
p32863
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32864
sS'group_name'
p32865
Nsa(dp32866
S'description'
p32867
S'The seed for the master random number generator\n'
p32868
sS'cpp_type'
p32869
S'unsigned int'
p32870
sS'default'
p32871
S'0'
p32872
sS'name'
p32873
S'seed'
p32874
sS'required'
p32875
I00
sS'group_name'
p32876
S'Advanced'
p32877
sa(dp32878
S'description'
p32879
g3
sS'cpp_type'
p32880
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32881
sS'default'
p32882
S'TensorElasticEnergyAux'
p32883
sS'name'
p32884
S'type'
p32885
sS'required'
p32886
I00
sS'group_name'
p32887
Nsa(dp32888
S'description'
p32889
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32890
sS'cpp_type'
p32891
S'bool'
p32892
sS'default'
p32893
S'0'
p32894
sS'name'
p32895
S'use_displaced_mesh'
p32896
sS'required'
p32897
I00
sS'group_name'
p32898
S'Advanced'
p32899
sa(dp32900
S'description'
p32901
S'The name of the variable that this object applies to\n'
p32902
sS'cpp_type'
p32903
S'AuxVariableName'
p32904
sS'default'
p32905
g3
sS'name'
p32906
S'variable'
p32907
sS'required'
p32908
I01
sS'group_name'
p32909
NsasS'name'
p32910
S'/Bounds/TensorElasticEnergyAux'
p32911
sa(dp32912
S'description'
p32913
g3
sS'subblocks'
p32914
NsS'parameters'
p32915
(lp32916
(dp32917
S'description'
p32918
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32919
sS'cpp_type'
p32920
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32921
sS'default'
p32922
g3
sS'name'
p32923
S'block'
p32924
sS'required'
p32925
I00
sS'group_name'
p32926
Nsa(dp32927
S'description'
p32928
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32929
sS'cpp_type'
p32930
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32931
sS'default'
p32932
g3
sS'name'
p32933
S'boundary'
p32934
sS'required'
p32935
I00
sS'group_name'
p32936
Nsa(dp32937
S'description'
p32938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32939
sS'cpp_type'
p32940
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p32941
sS'default'
p32942
g3
sS'name'
p32943
S'control_tags'
p32944
sS'required'
p32945
I00
sS'group_name'
p32946
Nsa(dp32947
S'name'
p32948
S'data_name'
p32949
sS'cpp_type'
p32950
S'MooseEnum'
p32951
sS'default'
p32952
g3
sS'description'
p32953
S'The data to be extracted from the EBSD data by this AuxKernel\n'
p32954
sS'required'
p32955
I01
sS'options'
p32956
S'phi1 phi phi2 grain phase symmetry op'
p32957
sS'group_name'
p32958
Nsa(dp32959
S'description'
p32960
S'The EBSDReader GeneralUserObject\n'
p32961
sS'cpp_type'
p32962
S'UserObjectName'
p32963
sS'default'
p32964
g3
sS'name'
p32965
S'ebsd_reader'
p32966
sS'required'
p32967
I01
sS'group_name'
p32968
Nsa(dp32969
S'name'
p32970
S'execute_on'
p32971
sS'cpp_type'
p32972
S'MultiMooseEnum'
p32973
sS'default'
p32974
S'LINEAR'
p32975
sS'description'
p32976
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32977
sS'required'
p32978
I00
sS'options'
p32979
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32980
sS'group_name'
p32981
Nsa(dp32982
S'description'
p32983
S'The seed for the master random number generator\n'
p32984
sS'cpp_type'
p32985
S'unsigned int'
p32986
sS'default'
p32987
S'0'
p32988
sS'name'
p32989
S'seed'
p32990
sS'required'
p32991
I00
sS'group_name'
p32992
S'Advanced'
p32993
sa(dp32994
S'description'
p32995
g3
sS'cpp_type'
p32996
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p32997
sS'default'
p32998
S'TestEBSDAux'
p32999
sS'name'
p33000
S'type'
p33001
sS'required'
p33002
I00
sS'group_name'
p33003
Nsa(dp33004
S'description'
p33005
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33006
sS'cpp_type'
p33007
S'bool'
p33008
sS'default'
p33009
S'0'
p33010
sS'name'
p33011
S'use_displaced_mesh'
p33012
sS'required'
p33013
I00
sS'group_name'
p33014
S'Advanced'
p33015
sa(dp33016
S'description'
p33017
S'The name of the variable that this object applies to\n'
p33018
sS'cpp_type'
p33019
S'AuxVariableName'
p33020
sS'default'
p33021
g3
sS'name'
p33022
S'variable'
p33023
sS'required'
p33024
I01
sS'group_name'
p33025
NsasS'name'
p33026
S'/Bounds/TestEBSDAux'
p33027
sa(dp33028
S'description'
p33029
S'Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n'
p33030
sS'subblocks'
p33031
NsS'parameters'
p33032
(lp33033
(dp33034
S'description'
p33035
S'Coupled variable holding additional free energy contributions to be summed up\n'
p33036
sS'cpp_type'
p33037
S'std::vector<VariableName>'
p33038
sS'default'
p33039
S'0'
p33040
sS'name'
p33041
S'additional_free_energy'
p33042
sS'required'
p33043
I00
sS'group_name'
p33044
Nsa(dp33045
S'description'
p33046
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33047
sS'cpp_type'
p33048
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33049
sS'default'
p33050
g3
sS'name'
p33051
S'block'
p33052
sS'required'
p33053
I00
sS'group_name'
p33054
Nsa(dp33055
S'description'
p33056
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33057
sS'cpp_type'
p33058
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p33059
sS'default'
p33060
g3
sS'name'
p33061
S'boundary'
p33062
sS'required'
p33063
I00
sS'group_name'
p33064
Nsa(dp33065
S'description'
p33066
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33067
sS'cpp_type'
p33068
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33069
sS'default'
p33070
g3
sS'name'
p33071
S'control_tags'
p33072
sS'required'
p33073
I00
sS'group_name'
p33074
Nsa(dp33075
S'name'
p33076
S'execute_on'
p33077
sS'cpp_type'
p33078
S'MultiMooseEnum'
p33079
sS'default'
p33080
S'LINEAR'
p33081
sS'description'
p33082
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33083
sS'required'
p33084
I00
sS'options'
p33085
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33086
sS'group_name'
p33087
Nsa(dp33088
S'description'
p33089
S'Base name of the free energy function\n'
p33090
sS'cpp_type'
p33091
S'MaterialPropertyName'
p33092
sS'default'
p33093
S'F'
p33094
sS'name'
p33095
S'f_name'
p33096
sS'required'
p33097
I00
sS'group_name'
p33098
Nsa(dp33099
S'description'
p33100
S'Variable names that contribute to interfacial energy\n'
p33101
sS'cpp_type'
p33102
S'std::vector<VariableName>'
p33103
sS'default'
p33104
g3
sS'name'
p33105
S'interfacial_vars'
p33106
sS'required'
p33107
I00
sS'group_name'
p33108
Nsa(dp33109
S'description'
p33110
S'Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n'
p33111
sS'cpp_type'
p33112
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33113
sS'default'
p33114
g3
sS'name'
p33115
S'kappa_names'
p33116
sS'required'
p33117
I00
sS'group_name'
p33118
Nsa(dp33119
S'description'
p33120
S'The seed for the master random number generator\n'
p33121
sS'cpp_type'
p33122
S'unsigned int'
p33123
sS'default'
p33124
S'0'
p33125
sS'name'
p33126
S'seed'
p33127
sS'required'
p33128
I00
sS'group_name'
p33129
S'Advanced'
p33130
sa(dp33131
S'description'
p33132
g3
sS'cpp_type'
p33133
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33134
sS'default'
p33135
S'TotalFreeEnergy'
p33136
sS'name'
p33137
S'type'
p33138
sS'required'
p33139
I00
sS'group_name'
p33140
Nsa(dp33141
S'description'
p33142
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33143
sS'cpp_type'
p33144
S'bool'
p33145
sS'default'
p33146
S'0'
p33147
sS'name'
p33148
S'use_displaced_mesh'
p33149
sS'required'
p33150
I00
sS'group_name'
p33151
S'Advanced'
p33152
sa(dp33153
S'description'
p33154
S'The name of the variable that this object applies to\n'
p33155
sS'cpp_type'
p33156
S'AuxVariableName'
p33157
sS'default'
p33158
g3
sS'name'
p33159
S'variable'
p33160
sS'required'
p33161
I01
sS'group_name'
p33162
NsasS'name'
p33163
S'/Bounds/TotalFreeEnergy'
p33164
sa(dp33165
S'description'
p33166
g3
sS'subblocks'
p33167
NsS'parameters'
p33168
(lp33169
(dp33170
S'description'
p33171
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33172
sS'cpp_type'
p33173
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33174
sS'default'
p33175
g3
sS'name'
p33176
S'block'
p33177
sS'required'
p33178
I00
sS'group_name'
p33179
Nsa(dp33180
S'description'
p33181
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33182
sS'cpp_type'
p33183
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p33184
sS'default'
p33185
g3
sS'name'
p33186
S'boundary'
p33187
sS'required'
p33188
I00
sS'group_name'
p33189
Nsa(dp33190
S'name'
p33191
S'component'
p33192
sS'cpp_type'
p33193
S'MooseEnum'
p33194
sS'default'
p33195
g3
sS'description'
p33196
S'The gradient component to compute\n'
p33197
sS'required'
p33198
I00
sS'options'
p33199
S'x y z'
p33200
sS'group_name'
p33201
Nsa(dp33202
S'description'
p33203
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33204
sS'cpp_type'
p33205
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33206
sS'default'
p33207
g3
sS'name'
p33208
S'control_tags'
p33209
sS'required'
p33210
I00
sS'group_name'
p33211
Nsa(dp33212
S'name'
p33213
S'execute_on'
p33214
sS'cpp_type'
p33215
S'MultiMooseEnum'
p33216
sS'default'
p33217
S'LINEAR'
p33218
sS'description'
p33219
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33220
sS'required'
p33221
I00
sS'options'
p33222
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33223
sS'group_name'
p33224
Nsa(dp33225
S'description'
p33226
S'The variable from which to compute the gradient component\n'
p33227
sS'cpp_type'
p33228
S'std::vector<VariableName>'
p33229
sS'default'
p33230
g3
sS'name'
p33231
S'gradient_variable'
p33232
sS'required'
p33233
I01
sS'group_name'
p33234
Nsa(dp33235
S'description'
p33236
S'The seed for the master random number generator\n'
p33237
sS'cpp_type'
p33238
S'unsigned int'
p33239
sS'default'
p33240
S'0'
p33241
sS'name'
p33242
S'seed'
p33243
sS'required'
p33244
I00
sS'group_name'
p33245
S'Advanced'
p33246
sa(dp33247
S'description'
p33248
g3
sS'cpp_type'
p33249
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33250
sS'default'
p33251
S'VariableGradientComponent'
p33252
sS'name'
p33253
S'type'
p33254
sS'required'
p33255
I00
sS'group_name'
p33256
Nsa(dp33257
S'description'
p33258
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33259
sS'cpp_type'
p33260
S'bool'
p33261
sS'default'
p33262
S'0'
p33263
sS'name'
p33264
S'use_displaced_mesh'
p33265
sS'required'
p33266
I00
sS'group_name'
p33267
S'Advanced'
p33268
sa(dp33269
S'description'
p33270
S'The name of the variable that this object applies to\n'
p33271
sS'cpp_type'
p33272
S'AuxVariableName'
p33273
sS'default'
p33274
g3
sS'name'
p33275
S'variable'
p33276
sS'required'
p33277
I01
sS'group_name'
p33278
NsasS'name'
p33279
S'/Bounds/VariableGradientComponent'
p33280
sa(dp33281
S'description'
p33282
g3
sS'subblocks'
p33283
NsS'parameters'
p33284
(lp33285
(dp33286
S'description'
p33287
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33288
sS'cpp_type'
p33289
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33290
sS'default'
p33291
g3
sS'name'
p33292
S'block'
p33293
sS'required'
p33294
I00
sS'group_name'
p33295
Nsa(dp33296
S'description'
p33297
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33298
sS'cpp_type'
p33299
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p33300
sS'default'
p33301
g3
sS'name'
p33302
S'boundary'
p33303
sS'required'
p33304
I00
sS'group_name'
p33305
Nsa(dp33306
S'description'
p33307
S'A simple coefficient\n'
p33308
sS'cpp_type'
p33309
S'double'
p33310
sS'default'
p33311
S'1'
p33312
sS'name'
p33313
S'coefficient'
p33314
sS'required'
p33315
I00
sS'group_name'
p33316
Nsa(dp33317
S'description'
p33318
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33319
sS'cpp_type'
p33320
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33321
sS'default'
p33322
g3
sS'name'
p33323
S'control_tags'
p33324
sS'required'
p33325
I00
sS'group_name'
p33326
Nsa(dp33327
S'name'
p33328
S'execute_on'
p33329
sS'cpp_type'
p33330
S'MultiMooseEnum'
p33331
sS'default'
p33332
S'LINEAR'
p33333
sS'description'
p33334
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33335
sS'required'
p33336
I00
sS'options'
p33337
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33338
sS'group_name'
p33339
Nsa(dp33340
S'description'
p33341
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p33342
sS'cpp_type'
p33343
S'unsigned int'
p33344
sS'default'
p33345
S'2'
p33346
sS'name'
p33347
S'order'
p33348
sS'required'
p33349
I00
sS'group_name'
p33350
Nsa(dp33351
S'description'
p33352
S'The seed for the master random number generator\n'
p33353
sS'cpp_type'
p33354
S'unsigned int'
p33355
sS'default'
p33356
S'0'
p33357
sS'name'
p33358
S'seed'
p33359
sS'required'
p33360
I00
sS'group_name'
p33361
S'Advanced'
p33362
sa(dp33363
S'description'
p33364
g3
sS'cpp_type'
p33365
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33366
sS'default'
p33367
S'VariableTimeIntegrationAux'
p33368
sS'name'
p33369
S'type'
p33370
sS'required'
p33371
I00
sS'group_name'
p33372
Nsa(dp33373
S'description'
p33374
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33375
sS'cpp_type'
p33376
S'bool'
p33377
sS'default'
p33378
S'0'
p33379
sS'name'
p33380
S'use_displaced_mesh'
p33381
sS'required'
p33382
I00
sS'group_name'
p33383
S'Advanced'
p33384
sa(dp33385
S'description'
p33386
S'The name of the variable that this object applies to\n'
p33387
sS'cpp_type'
p33388
S'AuxVariableName'
p33389
sS'default'
p33390
g3
sS'name'
p33391
S'variable'
p33392
sS'required'
p33393
I01
sS'group_name'
p33394
Nsa(dp33395
S'description'
p33396
S'The variable to be integrated\n'
p33397
sS'cpp_type'
p33398
S'std::vector<VariableName>'
p33399
sS'default'
p33400
g3
sS'name'
p33401
S'variable_to_integrate'
p33402
sS'required'
p33403
I01
sS'group_name'
p33404
NsasS'name'
p33405
S'/Bounds/VariableTimeIntegrationAux'
p33406
sa(dp33407
S'description'
p33408
g3
sS'subblocks'
p33409
NsS'parameters'
p33410
(lp33411
(dp33412
S'description'
p33413
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33414
sS'cpp_type'
p33415
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33416
sS'default'
p33417
g3
sS'name'
p33418
S'block'
p33419
sS'required'
p33420
I00
sS'group_name'
p33421
Nsa(dp33422
S'description'
p33423
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33424
sS'cpp_type'
p33425
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p33426
sS'default'
p33427
g3
sS'name'
p33428
S'boundary'
p33429
sS'required'
p33430
I00
sS'group_name'
p33431
Nsa(dp33432
S'description'
p33433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33434
sS'cpp_type'
p33435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33436
sS'default'
p33437
g3
sS'name'
p33438
S'control_tags'
p33439
sS'required'
p33440
I00
sS'group_name'
p33441
Nsa(dp33442
S'name'
p33443
S'execute_on'
p33444
sS'cpp_type'
p33445
S'MultiMooseEnum'
p33446
sS'default'
p33447
S'LINEAR'
p33448
sS'description'
p33449
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33450
sS'required'
p33451
I00
sS'options'
p33452
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33453
sS'group_name'
p33454
Nsa(dp33455
S'description'
p33456
S'The seed for the master random number generator\n'
p33457
sS'cpp_type'
p33458
S'unsigned int'
p33459
sS'default'
p33460
S'0'
p33461
sS'name'
p33462
S'seed'
p33463
sS'required'
p33464
I00
sS'group_name'
p33465
S'Advanced'
p33466
sa(dp33467
S'description'
p33468
g3
sS'cpp_type'
p33469
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33470
sS'default'
p33471
S'VectorMagnitudeAux'
p33472
sS'name'
p33473
S'type'
p33474
sS'required'
p33475
I00
sS'group_name'
p33476
Nsa(dp33477
S'description'
p33478
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33479
sS'cpp_type'
p33480
S'bool'
p33481
sS'default'
p33482
S'0'
p33483
sS'name'
p33484
S'use_displaced_mesh'
p33485
sS'required'
p33486
I00
sS'group_name'
p33487
S'Advanced'
p33488
sa(dp33489
S'description'
p33490
S'The name of the variable that this object applies to\n'
p33491
sS'cpp_type'
p33492
S'AuxVariableName'
p33493
sS'default'
p33494
g3
sS'name'
p33495
S'variable'
p33496
sS'required'
p33497
I01
sS'group_name'
p33498
Nsa(dp33499
S'description'
p33500
S'x-component of the vector\n'
p33501
sS'cpp_type'
p33502
S'std::vector<VariableName>'
p33503
sS'default'
p33504
g3
sS'name'
p33505
S'x'
p33506
sS'required'
p33507
I01
sS'group_name'
p33508
Nsa(dp33509
S'description'
p33510
S'y-component of the vector\n'
p33511
sS'cpp_type'
p33512
S'std::vector<VariableName>'
p33513
sS'default'
p33514
g3
sS'name'
p33515
S'y'
p33516
sS'required'
p33517
I00
sS'group_name'
p33518
Nsa(dp33519
S'description'
p33520
S'z-component of the vector\n'
p33521
sS'cpp_type'
p33522
S'std::vector<VariableName>'
p33523
sS'default'
p33524
g3
sS'name'
p33525
S'z'
p33526
sS'required'
p33527
I00
sS'group_name'
p33528
NsasS'name'
p33529
S'/Bounds/VectorMagnitudeAux'
p33530
sasS'parameters'
p33531
NsS'name'
p33532
S'/Bounds'
p33533
sa(dp33534
S'description'
p33535
g3
sS'subblocks'
p33536
(lp33537
(dp33538
S'description'
p33539
g3
sS'subblocks'
p33540
NsS'parameters'
p33541
(lp33542
(dp33543
S'description'
p33544
S'A string representing the Moose Object that will be built by this Action\n'
p33545
sS'cpp_type'
p33546
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33547
sS'default'
p33548
g3
sS'name'
p33549
S'type'
p33550
sS'required'
p33551
I01
sS'group_name'
p33552
NsasS'name'
p33553
S'/Constraints/*'
p33554
sa(dp33555
S'description'
p33556
g3
sS'subblocks'
p33557
NsS'parameters'
p33558
(lp33559
(dp33560
S'description'
p33561
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33562
sS'cpp_type'
p33563
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33564
sS'default'
p33565
g3
sS'name'
p33566
S'control_tags'
p33567
sS'required'
p33568
I00
sS'group_name'
p33569
Nsa(dp33570
S'name'
p33571
S'execute_on'
p33572
sS'cpp_type'
p33573
S'MultiMooseEnum'
p33574
sS'default'
p33575
S'LINEAR'
p33576
sS'description'
p33577
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33578
sS'required'
p33579
I00
sS'options'
p33580
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33581
sS'group_name'
p33582
Nsa(dp33583
S'description'
p33584
S'The boundary ID associated with the master side\n'
p33585
sS'cpp_type'
p33586
S'BoundaryName'
p33587
sS'default'
p33588
g3
sS'name'
p33589
S'master'
p33590
sS'required'
p33591
I01
sS'group_name'
p33592
Nsa(dp33593
S'description'
p33594
S'The variable on the master side of the domain\n'
p33595
sS'cpp_type'
p33596
S'std::vector<VariableName>'
p33597
sS'default'
p33598
g3
sS'name'
p33599
S'master_variable'
p33600
sS'required'
p33601
I01
sS'group_name'
p33602
Nsa(dp33603
S'description'
p33604
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p33605
sS'cpp_type'
p33606
S'double'
p33607
sS'default'
p33608
g3
sS'name'
p33609
S'normal_smoothing_distance'
p33610
sS'required'
p33611
I00
sS'group_name'
p33612
Nsa(dp33613
S'description'
p33614
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p33615
sS'cpp_type'
p33616
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33617
sS'default'
p33618
g3
sS'name'
p33619
S'normal_smoothing_method'
p33620
sS'required'
p33621
I00
sS'group_name'
p33622
Nsa(dp33623
S'name'
p33624
S'order'
p33625
sS'cpp_type'
p33626
S'MooseEnum'
p33627
sS'default'
p33628
S'FIRST'
p33629
sS'description'
p33630
S'The finite element order used for projections\n'
p33631
sS'required'
p33632
I00
sS'options'
p33633
S'FIRST SECOND THIRD FOURTH'
p33634
sS'group_name'
p33635
Nsa(dp33636
S'description'
p33637
S'scaling factor to be applied to constraint equations\n'
p33638
sS'cpp_type'
p33639
S'double'
p33640
sS'default'
p33641
S'1'
p33642
sS'name'
p33643
S'scaling'
p33644
sS'required'
p33645
I00
sS'group_name'
p33646
Nsa(dp33647
S'description'
p33648
S'The boundary ID associated with the slave side\n'
p33649
sS'cpp_type'
p33650
S'BoundaryName'
p33651
sS'default'
p33652
g3
sS'name'
p33653
S'slave'
p33654
sS'required'
p33655
I01
sS'group_name'
p33656
Nsa(dp33657
S'description'
p33658
S'Tangential distance to extend edges of contact surfaces\n'
p33659
sS'cpp_type'
p33660
S'double'
p33661
sS'default'
p33662
g3
sS'name'
p33663
S'tangential_tolerance'
p33664
sS'required'
p33665
I00
sS'group_name'
p33666
Nsa(dp33667
S'description'
p33668
g3
sS'cpp_type'
p33669
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33670
sS'default'
p33671
S'CoupledTiedValueConstraint'
p33672
sS'name'
p33673
S'type'
p33674
sS'required'
p33675
I00
sS'group_name'
p33676
Nsa(dp33677
S'description'
p33678
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33679
sS'cpp_type'
p33680
S'bool'
p33681
sS'default'
p33682
S'1'
p33683
sS'name'
p33684
S'use_displaced_mesh'
p33685
sS'required'
p33686
I00
sS'group_name'
p33687
S'Advanced'
p33688
sa(dp33689
S'description'
p33690
S'The name of the variable that this constraint is applied to.\n'
p33691
sS'cpp_type'
p33692
S'NonlinearVariableName'
p33693
sS'default'
p33694
g3
sS'name'
p33695
S'variable'
p33696
sS'required'
p33697
I01
sS'group_name'
p33698
NsasS'name'
p33699
S'/Constraints/CoupledTiedValueConstraint'
p33700
sa(dp33701
S'description'
p33702
g3
sS'subblocks'
p33703
NsS'parameters'
p33704
(lp33705
(dp33706
S'description'
p33707
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33708
sS'cpp_type'
p33709
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33710
sS'default'
p33711
g3
sS'name'
p33712
S'control_tags'
p33713
sS'required'
p33714
I00
sS'group_name'
p33715
Nsa(dp33716
S'name'
p33717
S'execute_on'
p33718
sS'cpp_type'
p33719
S'MultiMooseEnum'
p33720
sS'default'
p33721
S'LINEAR'
p33722
sS'description'
p33723
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33724
sS'required'
p33725
I00
sS'options'
p33726
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33727
sS'group_name'
p33728
Nsa(dp33729
S'name'
p33730
S'formulation'
p33731
sS'cpp_type'
p33732
S'MooseEnum'
p33733
sS'default'
p33734
S'penalty'
p33735
sS'description'
p33736
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p33737
sS'required'
p33738
I00
sS'options'
p33739
S'penalty kinematic'
p33740
sS'group_name'
p33741
Nsa(dp33742
S'description'
p33743
S'The ID of the master node. If no ID is provided, first node of slave set is chosen.\n'
p33744
sS'cpp_type'
p33745
S'unsigned int'
p33746
sS'default'
p33747
S'4294967295'
p33748
sS'name'
p33749
S'master'
p33750
sS'required'
p33751
I00
sS'group_name'
p33752
Nsa(dp33753
S'description'
p33754
S'The penalty used for the boundary term\n'
p33755
sS'cpp_type'
p33756
S'double'
p33757
sS'default'
p33758
g3
sS'name'
p33759
S'penalty'
p33760
sS'required'
p33761
I01
sS'group_name'
p33762
Nsa(dp33763
S'description'
p33764
S'The boundary ID associated with the slave side\n'
p33765
sS'cpp_type'
p33766
S'BoundaryName'
p33767
sS'default'
p33768
S'NaN'
p33769
sS'name'
p33770
S'slave'
p33771
sS'required'
p33772
I00
sS'group_name'
p33773
Nsa(dp33774
S'description'
p33775
S'The IDs of the slave node\n'
p33776
sS'cpp_type'
p33777
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p33778
sS'default'
p33779
g3
sS'name'
p33780
S'slave_node_ids'
p33781
sS'required'
p33782
I00
sS'group_name'
p33783
Nsa(dp33784
S'description'
p33785
g3
sS'cpp_type'
p33786
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33787
sS'default'
p33788
S'EqualValueBoundaryConstraint'
p33789
sS'name'
p33790
S'type'
p33791
sS'required'
p33792
I00
sS'group_name'
p33793
Nsa(dp33794
S'description'
p33795
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33796
sS'cpp_type'
p33797
S'bool'
p33798
sS'default'
p33799
S'0'
p33800
sS'name'
p33801
S'use_displaced_mesh'
p33802
sS'required'
p33803
I00
sS'group_name'
p33804
S'Advanced'
p33805
sa(dp33806
S'description'
p33807
S'The name of the variable that this constraint is applied to.\n'
p33808
sS'cpp_type'
p33809
S'NonlinearVariableName'
p33810
sS'default'
p33811
g3
sS'name'
p33812
S'variable'
p33813
sS'required'
p33814
I01
sS'group_name'
p33815
NsasS'name'
p33816
S'/Constraints/EqualValueBoundaryConstraint'
p33817
sa(dp33818
S'description'
p33819
g3
sS'subblocks'
p33820
NsS'parameters'
p33821
(lp33822
(dp33823
S'description'
p33824
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33825
sS'cpp_type'
p33826
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33827
sS'default'
p33828
g3
sS'name'
p33829
S'control_tags'
p33830
sS'required'
p33831
I00
sS'group_name'
p33832
Nsa(dp33833
S'name'
p33834
S'execute_on'
p33835
sS'cpp_type'
p33836
S'MultiMooseEnum'
p33837
sS'default'
p33838
S'LINEAR'
p33839
sS'description'
p33840
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33841
sS'required'
p33842
I00
sS'options'
p33843
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33844
sS'group_name'
p33845
Nsa(dp33846
S'description'
p33847
S'The name of the interface.\n'
p33848
sS'cpp_type'
p33849
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33850
sS'default'
p33851
g3
sS'name'
p33852
S'interface'
p33853
sS'required'
p33854
I01
sS'group_name'
p33855
Nsa(dp33856
S'description'
p33857
S'Variable on master surface\n'
p33858
sS'cpp_type'
p33859
S'VariableName'
p33860
sS'default'
p33861
g3
sS'name'
p33862
S'master_variable'
p33863
sS'required'
p33864
I01
sS'group_name'
p33865
Nsa(dp33866
S'description'
p33867
S'Variable on master surface\n'
p33868
sS'cpp_type'
p33869
S'VariableName'
p33870
sS'default'
p33871
g3
sS'name'
p33872
S'slave_variable'
p33873
sS'required'
p33874
I00
sS'group_name'
p33875
Nsa(dp33876
S'description'
p33877
g3
sS'cpp_type'
p33878
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33879
sS'default'
p33880
S'EqualValueConstraint'
p33881
sS'name'
p33882
S'type'
p33883
sS'required'
p33884
I00
sS'group_name'
p33885
Nsa(dp33886
S'description'
p33887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33888
sS'cpp_type'
p33889
S'bool'
p33890
sS'default'
p33891
S'0'
p33892
sS'name'
p33893
S'use_displaced_mesh'
p33894
sS'required'
p33895
I00
sS'group_name'
p33896
S'Advanced'
p33897
sa(dp33898
S'description'
p33899
S'The name of the variable that this constraint is applied to.\n'
p33900
sS'cpp_type'
p33901
S'NonlinearVariableName'
p33902
sS'default'
p33903
g3
sS'name'
p33904
S'variable'
p33905
sS'required'
p33906
I01
sS'group_name'
p33907
NsasS'name'
p33908
S'/Constraints/EqualValueConstraint'
p33909
sa(dp33910
S'description'
p33911
g3
sS'subblocks'
p33912
NsS'parameters'
p33913
(lp33914
(dp33915
S'description'
p33916
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33917
sS'cpp_type'
p33918
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p33919
sS'default'
p33920
g3
sS'name'
p33921
S'control_tags'
p33922
sS'required'
p33923
I00
sS'group_name'
p33924
Nsa(dp33925
S'name'
p33926
S'execute_on'
p33927
sS'cpp_type'
p33928
S'MultiMooseEnum'
p33929
sS'default'
p33930
S'LINEAR'
p33931
sS'description'
p33932
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33933
sS'required'
p33934
I00
sS'options'
p33935
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33936
sS'group_name'
p33937
Nsa(dp33938
S'description'
p33939
S'The name of the interface.\n'
p33940
sS'cpp_type'
p33941
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33942
sS'default'
p33943
g3
sS'name'
p33944
S'interface'
p33945
sS'required'
p33946
I01
sS'group_name'
p33947
Nsa(dp33948
S'description'
p33949
S'Gap conductance\n'
p33950
sS'cpp_type'
p33951
S'double'
p33952
sS'default'
p33953
g3
sS'name'
p33954
S'k'
p33955
sS'required'
p33956
I01
sS'group_name'
p33957
Nsa(dp33958
S'description'
p33959
S'Variable on master surface\n'
p33960
sS'cpp_type'
p33961
S'VariableName'
p33962
sS'default'
p33963
g3
sS'name'
p33964
S'master_variable'
p33965
sS'required'
p33966
I01
sS'group_name'
p33967
Nsa(dp33968
S'description'
p33969
S'Variable on master surface\n'
p33970
sS'cpp_type'
p33971
S'VariableName'
p33972
sS'default'
p33973
g3
sS'name'
p33974
S'slave_variable'
p33975
sS'required'
p33976
I00
sS'group_name'
p33977
Nsa(dp33978
S'description'
p33979
g3
sS'cpp_type'
p33980
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p33981
sS'default'
p33982
S'GapConductanceConstraint'
p33983
sS'name'
p33984
S'type'
p33985
sS'required'
p33986
I00
sS'group_name'
p33987
Nsa(dp33988
S'description'
p33989
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33990
sS'cpp_type'
p33991
S'bool'
p33992
sS'default'
p33993
S'0'
p33994
sS'name'
p33995
S'use_displaced_mesh'
p33996
sS'required'
p33997
I00
sS'group_name'
p33998
S'Advanced'
p33999
sa(dp34000
S'description'
p34001
S'The name of the variable that this constraint is applied to.\n'
p34002
sS'cpp_type'
p34003
S'NonlinearVariableName'
p34004
sS'default'
p34005
g3
sS'name'
p34006
S'variable'
p34007
sS'required'
p34008
I01
sS'group_name'
p34009
NsasS'name'
p34010
S'/Constraints/GapConductanceConstraint'
p34011
sa(dp34012
S'description'
p34013
g3
sS'subblocks'
p34014
NsS'parameters'
p34015
(lp34016
(dp34017
S'description'
p34018
S'The master boundary\n'
p34019
sS'cpp_type'
p34020
S'BoundaryName'
p34021
sS'default'
p34022
g3
sS'name'
p34023
S'boundary'
p34024
sS'required'
p34025
I01
sS'group_name'
p34026
Nsa(dp34027
S'description'
p34028
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p34029
sS'cpp_type'
p34030
S'unsigned int'
p34031
sS'default'
p34032
g3
sS'name'
p34033
S'component'
p34034
sS'required'
p34035
I01
sS'group_name'
p34036
Nsa(dp34037
S'description'
p34038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34039
sS'cpp_type'
p34040
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34041
sS'default'
p34042
g3
sS'name'
p34043
S'control_tags'
p34044
sS'required'
p34045
I00
sS'group_name'
p34046
Nsa(dp34047
S'description'
p34048
S'The x displacement\n'
p34049
sS'cpp_type'
p34050
S'std::vector<VariableName>'
p34051
sS'default'
p34052
g3
sS'name'
p34053
S'disp_x'
p34054
sS'required'
p34055
I00
sS'group_name'
p34056
Nsa(dp34057
S'description'
p34058
S'The y displacement\n'
p34059
sS'cpp_type'
p34060
S'std::vector<VariableName>'
p34061
sS'default'
p34062
g3
sS'name'
p34063
S'disp_y'
p34064
sS'required'
p34065
I00
sS'group_name'
p34066
Nsa(dp34067
S'description'
p34068
S'The z displacement\n'
p34069
sS'cpp_type'
p34070
S'std::vector<VariableName>'
p34071
sS'default'
p34072
g3
sS'name'
p34073
S'disp_z'
p34074
sS'required'
p34075
I00
sS'group_name'
p34076
Nsa(dp34077
S'name'
p34078
S'execute_on'
p34079
sS'cpp_type'
p34080
S'MultiMooseEnum'
p34081
sS'default'
p34082
S'LINEAR'
p34083
sS'description'
p34084
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34085
sS'required'
p34086
I00
sS'options'
p34087
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34088
sS'group_name'
p34089
Nsa(dp34090
S'description'
p34091
S'The contact formulation\n'
p34092
sS'cpp_type'
p34093
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34094
sS'default'
p34095
S'default'
p34096
sS'name'
p34097
S'formulation'
p34098
sS'required'
p34099
I00
sS'group_name'
p34100
Nsa(dp34101
S'description'
p34102
S'The friction coefficient\n'
p34103
sS'cpp_type'
p34104
S'double'
p34105
sS'default'
p34106
S'0'
p34107
sS'name'
p34108
S'friction_coefficient'
p34109
sS'required'
p34110
I00
sS'group_name'
p34111
Nsa(dp34112
S'description'
p34113
S'The boundary ID associated with the master side\n'
p34114
sS'cpp_type'
p34115
S'BoundaryName'
p34116
sS'default'
p34117
g3
sS'name'
p34118
S'master'
p34119
sS'required'
p34120
I01
sS'group_name'
p34121
Nsa(dp34122
S'description'
p34123
S'The variable on the master side of the domain\n'
p34124
sS'cpp_type'
p34125
S'std::vector<VariableName>'
p34126
sS'default'
p34127
g3
sS'name'
p34128
S'master_variable'
p34129
sS'required'
p34130
I01
sS'group_name'
p34131
Nsa(dp34132
S'description'
p34133
S'The contact model to use\n'
p34134
sS'cpp_type'
p34135
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34136
sS'default'
p34137
S'frictionless'
p34138
sS'name'
p34139
S'model'
p34140
sS'required'
p34141
I00
sS'group_name'
p34142
Nsa(dp34143
S'description'
p34144
S'The nodal area\n'
p34145
sS'cpp_type'
p34146
S'std::vector<VariableName>'
p34147
sS'default'
p34148
g3
sS'name'
p34149
S'nodal_area'
p34150
sS'required'
p34151
I01
sS'group_name'
p34152
Nsa(dp34153
S'description'
p34154
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p34155
sS'cpp_type'
p34156
S'double'
p34157
sS'default'
p34158
g3
sS'name'
p34159
S'normal_smoothing_distance'
p34160
sS'required'
p34161
I00
sS'group_name'
p34162
Nsa(dp34163
S'description'
p34164
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p34165
sS'cpp_type'
p34166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34167
sS'default'
p34168
g3
sS'name'
p34169
S'normal_smoothing_method'
p34170
sS'required'
p34171
I00
sS'group_name'
p34172
Nsa(dp34173
S'name'
p34174
S'order'
p34175
sS'cpp_type'
p34176
S'MooseEnum'
p34177
sS'default'
p34178
S'FIRST'
p34179
sS'description'
p34180
S'The finite element order\n'
p34181
sS'required'
p34182
I00
sS'options'
p34183
S'CONSTANT FIRST SECOND THIRD FOURTH'
p34184
sS'group_name'
p34185
Nsa(dp34186
S'description'
p34187
S'The penalty to apply.  This can vary depending on the stiffness of your materials\n'
p34188
sS'cpp_type'
p34189
S'double'
p34190
sS'default'
p34191
S'1e+08'
p34192
sS'name'
p34193
S'penalty'
p34194
sS'required'
p34195
I00
sS'group_name'
p34196
Nsa(dp34197
S'description'
p34198
S'The slave boundary\n'
p34199
sS'cpp_type'
p34200
S'BoundaryName'
p34201
sS'default'
p34202
g3
sS'name'
p34203
S'slave'
p34204
sS'required'
p34205
I01
sS'group_name'
p34206
Nsa(dp34207
S'description'
p34208
S'Tangential distance to extend edges of contact surfaces\n'
p34209
sS'cpp_type'
p34210
S'double'
p34211
sS'default'
p34212
g3
sS'name'
p34213
S'tangential_tolerance'
p34214
sS'required'
p34215
I00
sS'group_name'
p34216
Nsa(dp34217
S'description'
p34218
S'Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  Must be positive.\n'
p34219
sS'cpp_type'
p34220
S'double'
p34221
sS'default'
p34222
S'0'
p34223
sS'name'
p34224
S'tension_release'
p34225
sS'required'
p34226
I00
sS'group_name'
p34227
Nsa(dp34228
S'description'
p34229
g3
sS'cpp_type'
p34230
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34231
sS'default'
p34232
S'GluedContactConstraint'
p34233
sS'name'
p34234
S'type'
p34235
sS'required'
p34236
I00
sS'group_name'
p34237
Nsa(dp34238
S'description'
p34239
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34240
sS'cpp_type'
p34241
S'bool'
p34242
sS'default'
p34243
S'1'
p34244
sS'name'
p34245
S'use_displaced_mesh'
p34246
sS'required'
p34247
I00
sS'group_name'
p34248
S'Advanced'
p34249
sa(dp34250
S'description'
p34251
S'The name of the variable that this constraint is applied to.\n'
p34252
sS'cpp_type'
p34253
S'NonlinearVariableName'
p34254
sS'default'
p34255
g3
sS'name'
p34256
S'variable'
p34257
sS'required'
p34258
I01
sS'group_name'
p34259
NsasS'name'
p34260
S'/Constraints/GluedContactConstraint'
p34261
sa(dp34262
S'description'
p34263
g3
sS'subblocks'
p34264
NsS'parameters'
p34265
(lp34266
(dp34267
S'description'
p34268
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34269
sS'cpp_type'
p34270
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34271
sS'default'
p34272
g3
sS'name'
p34273
S'control_tags'
p34274
sS'required'
p34275
I00
sS'group_name'
p34276
Nsa(dp34277
S'name'
p34278
S'execute_on'
p34279
sS'cpp_type'
p34280
S'MultiMooseEnum'
p34281
sS'default'
p34282
S'LINEAR'
p34283
sS'description'
p34284
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34285
sS'required'
p34286
I00
sS'options'
p34287
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34288
sS'group_name'
p34289
Nsa(dp34290
S'name'
p34291
S'formulation'
p34292
sS'cpp_type'
p34293
S'MooseEnum'
p34294
sS'default'
p34295
S'penalty'
p34296
sS'description'
p34297
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p34298
sS'required'
p34299
I00
sS'options'
p34300
S'penalty kinematic'
p34301
sS'group_name'
p34302
Nsa(dp34303
S'description'
p34304
S'The master node IDs.\n'
p34305
sS'cpp_type'
p34306
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p34307
sS'default'
p34308
g3
sS'name'
p34309
S'master'
p34310
sS'required'
p34311
I01
sS'group_name'
p34312
Nsa(dp34313
S'description'
p34314
S'The penalty used for the boundary term\n'
p34315
sS'cpp_type'
p34316
S'double'
p34317
sS'default'
p34318
g3
sS'name'
p34319
S'penalty'
p34320
sS'required'
p34321
I01
sS'group_name'
p34322
Nsa(dp34323
S'description'
p34324
S'The list of slave node ids\n'
p34325
sS'cpp_type'
p34326
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p34327
sS'default'
p34328
g3
sS'name'
p34329
S'slave_node_ids'
p34330
sS'required'
p34331
I00
sS'group_name'
p34332
Nsa(dp34333
S'description'
p34334
S'The boundary ID associated with the slave side\n'
p34335
sS'cpp_type'
p34336
S'BoundaryName'
p34337
sS'default'
p34338
S'NaN'
p34339
sS'name'
p34340
S'slave_node_set'
p34341
sS'required'
p34342
I00
sS'group_name'
p34343
Nsa(dp34344
S'description'
p34345
g3
sS'cpp_type'
p34346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34347
sS'default'
p34348
S'LinearNodalConstraint'
p34349
sS'name'
p34350
S'type'
p34351
sS'required'
p34352
I00
sS'group_name'
p34353
Nsa(dp34354
S'description'
p34355
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34356
sS'cpp_type'
p34357
S'bool'
p34358
sS'default'
p34359
S'0'
p34360
sS'name'
p34361
S'use_displaced_mesh'
p34362
sS'required'
p34363
I00
sS'group_name'
p34364
S'Advanced'
p34365
sa(dp34366
S'description'
p34367
S'The name of the variable that this constraint is applied to.\n'
p34368
sS'cpp_type'
p34369
S'NonlinearVariableName'
p34370
sS'default'
p34371
g3
sS'name'
p34372
S'variable'
p34373
sS'required'
p34374
I01
sS'group_name'
p34375
Nsa(dp34376
S'description'
p34377
S'The weights associated with the master node ids. Must be of the same size as master nodes\n'
p34378
sS'cpp_type'
p34379
S'std::vector<double, std::allocator<double> >'
p34380
sS'default'
p34381
g3
sS'name'
p34382
S'weights'
p34383
sS'required'
p34384
I01
sS'group_name'
p34385
NsasS'name'
p34386
S'/Constraints/LinearNodalConstraint'
p34387
sa(dp34388
S'description'
p34389
g3
sS'subblocks'
p34390
NsS'parameters'
p34391
(lp34392
(dp34393
S'description'
p34394
S'The master boundary\n'
p34395
sS'cpp_type'
p34396
S'BoundaryName'
p34397
sS'default'
p34398
g3
sS'name'
p34399
S'boundary'
p34400
sS'required'
p34401
I01
sS'group_name'
p34402
Nsa(dp34403
S'description'
p34404
S'Normal distance from surface within which nodes are captured\n'
p34405
sS'cpp_type'
p34406
S'double'
p34407
sS'default'
p34408
S'0'
p34409
sS'name'
p34410
S'capture_tolerance'
p34411
sS'required'
p34412
I00
sS'group_name'
p34413
Nsa(dp34414
S'description'
p34415
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p34416
sS'cpp_type'
p34417
S'unsigned int'
p34418
sS'default'
p34419
g3
sS'name'
p34420
S'component'
p34421
sS'required'
p34422
I01
sS'group_name'
p34423
Nsa(dp34424
S'description'
p34425
S'Whether to include jacobian entries coupling nodes connected to slave nodes.\n'
p34426
sS'cpp_type'
p34427
S'bool'
p34428
sS'default'
p34429
S'1'
p34430
sS'name'
p34431
S'connected_slave_nodes_jacobian'
p34432
sS'required'
p34433
I00
sS'group_name'
p34434
Nsa(dp34435
S'description'
p34436
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34437
sS'cpp_type'
p34438
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34439
sS'default'
p34440
g3
sS'name'
p34441
S'control_tags'
p34442
sS'required'
p34443
I00
sS'group_name'
p34444
Nsa(dp34445
S'description'
p34446
S'The x displacement\n'
p34447
sS'cpp_type'
p34448
S'std::vector<VariableName>'
p34449
sS'default'
p34450
g3
sS'name'
p34451
S'disp_x'
p34452
sS'required'
p34453
I00
sS'group_name'
p34454
Nsa(dp34455
S'description'
p34456
S'The y displacement\n'
p34457
sS'cpp_type'
p34458
S'std::vector<VariableName>'
p34459
sS'default'
p34460
g3
sS'name'
p34461
S'disp_y'
p34462
sS'required'
p34463
I00
sS'group_name'
p34464
Nsa(dp34465
S'description'
p34466
S'The z displacement\n'
p34467
sS'cpp_type'
p34468
S'std::vector<VariableName>'
p34469
sS'default'
p34470
g3
sS'name'
p34471
S'disp_z'
p34472
sS'required'
p34473
I00
sS'group_name'
p34474
Nsa(dp34475
S'name'
p34476
S'execute_on'
p34477
sS'cpp_type'
p34478
S'MultiMooseEnum'
p34479
sS'default'
p34480
S'LINEAR'
p34481
sS'description'
p34482
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34483
sS'required'
p34484
I00
sS'options'
p34485
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34486
sS'group_name'
p34487
Nsa(dp34488
S'description'
p34489
S'The contact formulation\n'
p34490
sS'cpp_type'
p34491
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34492
sS'default'
p34493
S'default'
p34494
sS'name'
p34495
S'formulation'
p34496
sS'required'
p34497
I00
sS'group_name'
p34498
Nsa(dp34499
S'description'
p34500
S'The friction coefficient\n'
p34501
sS'cpp_type'
p34502
S'double'
p34503
sS'default'
p34504
S'0'
p34505
sS'name'
p34506
S'friction_coefficient'
p34507
sS'required'
p34508
I00
sS'group_name'
p34509
Nsa(dp34510
S'description'
p34511
S'The boundary ID associated with the master side\n'
p34512
sS'cpp_type'
p34513
S'BoundaryName'
p34514
sS'default'
p34515
g3
sS'name'
p34516
S'master'
p34517
sS'required'
p34518
I01
sS'group_name'
p34519
Nsa(dp34520
S'description'
p34521
S'Whether to include jacobian entries coupling master and slave nodes.\n'
p34522
sS'cpp_type'
p34523
S'bool'
p34524
sS'default'
p34525
S'1'
p34526
sS'name'
p34527
S'master_slave_jacobian'
p34528
sS'required'
p34529
I00
sS'group_name'
p34530
Nsa(dp34531
S'description'
p34532
S'The variable on the master side of the domain\n'
p34533
sS'cpp_type'
p34534
S'std::vector<VariableName>'
p34535
sS'default'
p34536
g3
sS'name'
p34537
S'master_variable'
p34538
sS'required'
p34539
I01
sS'group_name'
p34540
Nsa(dp34541
S'description'
p34542
S'The contact model to use\n'
p34543
sS'cpp_type'
p34544
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34545
sS'default'
p34546
S'frictionless'
p34547
sS'name'
p34548
S'model'
p34549
sS'required'
p34550
I00
sS'group_name'
p34551
Nsa(dp34552
S'description'
p34553
S'The nodal area\n'
p34554
sS'cpp_type'
p34555
S'std::vector<VariableName>'
p34556
sS'default'
p34557
g3
sS'name'
p34558
S'nodal_area'
p34559
sS'required'
p34560
I01
sS'group_name'
p34561
Nsa(dp34562
S'description'
p34563
S'Whether to include jacobian entries coupling with variables that are not displacement variables.\n'
p34564
sS'cpp_type'
p34565
S'bool'
p34566
sS'default'
p34567
S'1'
p34568
sS'name'
p34569
S'non_displacement_variables_jacobian'
p34570
sS'required'
p34571
I00
sS'group_name'
p34572
Nsa(dp34573
S'description'
p34574
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p34575
sS'cpp_type'
p34576
S'double'
p34577
sS'default'
p34578
g3
sS'name'
p34579
S'normal_smoothing_distance'
p34580
sS'required'
p34581
I00
sS'group_name'
p34582
Nsa(dp34583
S'description'
p34584
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p34585
sS'cpp_type'
p34586
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34587
sS'default'
p34588
g3
sS'name'
p34589
S'normal_smoothing_method'
p34590
sS'required'
p34591
I00
sS'group_name'
p34592
Nsa(dp34593
S'description'
p34594
S'Whether to normalize the penalty parameter with the nodal area for penalty contact.\n'
p34595
sS'cpp_type'
p34596
S'bool'
p34597
sS'default'
p34598
S'0'
p34599
sS'name'
p34600
S'normalize_penalty'
p34601
sS'required'
p34602
I00
sS'group_name'
p34603
Nsa(dp34604
S'name'
p34605
S'order'
p34606
sS'cpp_type'
p34607
S'MooseEnum'
p34608
sS'default'
p34609
S'FIRST'
p34610
sS'description'
p34611
S'The finite element order\n'
p34612
sS'required'
p34613
I00
sS'options'
p34614
S'CONSTANT FIRST SECOND THIRD FOURTH'
p34615
sS'group_name'
p34616
Nsa(dp34617
S'description'
p34618
S'The penalty to apply.  This can vary depending on the stiffness of your materials\n'
p34619
sS'cpp_type'
p34620
S'double'
p34621
sS'default'
p34622
S'1e+08'
p34623
sS'name'
p34624
S'penalty'
p34625
sS'required'
p34626
I00
sS'group_name'
p34627
Nsa(dp34628
S'description'
p34629
S'The slave boundary\n'
p34630
sS'cpp_type'
p34631
S'BoundaryName'
p34632
sS'default'
p34633
g3
sS'name'
p34634
S'slave'
p34635
sS'required'
p34636
I01
sS'group_name'
p34637
Nsa(dp34638
S'description'
p34639
S'Tangential distance to extend edges of contact surfaces\n'
p34640
sS'cpp_type'
p34641
S'double'
p34642
sS'default'
p34643
g3
sS'name'
p34644
S'tangential_tolerance'
p34645
sS'required'
p34646
I00
sS'group_name'
p34647
Nsa(dp34648
S'description'
p34649
S'Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  No tension release if negative.\n'
p34650
sS'cpp_type'
p34651
S'double'
p34652
sS'default'
p34653
S'0'
p34654
sS'name'
p34655
S'tension_release'
p34656
sS'required'
p34657
I00
sS'group_name'
p34658
Nsa(dp34659
S'description'
p34660
g3
sS'cpp_type'
p34661
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34662
sS'default'
p34663
S'MechanicalContactConstraint'
p34664
sS'name'
p34665
S'type'
p34666
sS'required'
p34667
I00
sS'group_name'
p34668
Nsa(dp34669
S'description'
p34670
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34671
sS'cpp_type'
p34672
S'bool'
p34673
sS'default'
p34674
S'1'
p34675
sS'name'
p34676
S'use_displaced_mesh'
p34677
sS'required'
p34678
I00
sS'group_name'
p34679
S'Advanced'
p34680
sa(dp34681
S'description'
p34682
S'The name of the variable that this constraint is applied to.\n'
p34683
sS'cpp_type'
p34684
S'NonlinearVariableName'
p34685
sS'default'
p34686
g3
sS'name'
p34687
S'variable'
p34688
sS'required'
p34689
I01
sS'group_name'
p34690
NsasS'name'
p34691
S'/Constraints/MechanicalContactConstraint'
p34692
sa(dp34693
S'description'
p34694
g3
sS'subblocks'
p34695
NsS'parameters'
p34696
(lp34697
(dp34698
S'description'
p34699
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p34700
sS'cpp_type'
p34701
S'unsigned int'
p34702
sS'default'
p34703
g3
sS'name'
p34704
S'component'
p34705
sS'required'
p34706
I01
sS'group_name'
p34707
Nsa(dp34708
S'description'
p34709
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34710
sS'cpp_type'
p34711
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34712
sS'default'
p34713
g3
sS'name'
p34714
S'control_tags'
p34715
sS'required'
p34716
I00
sS'group_name'
p34717
Nsa(dp34718
S'description'
p34719
S'The x displacement\n'
p34720
sS'cpp_type'
p34721
S'std::vector<VariableName>'
p34722
sS'default'
p34723
g3
sS'name'
p34724
S'disp_x'
p34725
sS'required'
p34726
I00
sS'group_name'
p34727
Nsa(dp34728
S'description'
p34729
S'The y displacement\n'
p34730
sS'cpp_type'
p34731
S'std::vector<VariableName>'
p34732
sS'default'
p34733
g3
sS'name'
p34734
S'disp_y'
p34735
sS'required'
p34736
I00
sS'group_name'
p34737
Nsa(dp34738
S'description'
p34739
S'The z displacement\n'
p34740
sS'cpp_type'
p34741
S'std::vector<VariableName>'
p34742
sS'default'
p34743
g3
sS'name'
p34744
S'disp_z'
p34745
sS'required'
p34746
I00
sS'group_name'
p34747
Nsa(dp34748
S'name'
p34749
S'execute_on'
p34750
sS'cpp_type'
p34751
S'MultiMooseEnum'
p34752
sS'default'
p34753
S'LINEAR'
p34754
sS'description'
p34755
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34756
sS'required'
p34757
I00
sS'options'
p34758
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34759
sS'group_name'
p34760
Nsa(dp34761
S'description'
p34762
S"Whether or not to update the 'in contact' list every jacobian evaluation (by default it will happen once per timestep\n"
p34763
sS'cpp_type'
p34764
S'bool'
p34765
sS'default'
p34766
S'0'
p34767
sS'name'
p34768
S'jacobian_update'
p34769
sS'required'
p34770
I00
sS'group_name'
p34771
Nsa(dp34772
S'description'
p34773
S'The boundary ID associated with the master side\n'
p34774
sS'cpp_type'
p34775
S'BoundaryName'
p34776
sS'default'
p34777
g3
sS'name'
p34778
S'master'
p34779
sS'required'
p34780
I01
sS'group_name'
p34781
Nsa(dp34782
S'description'
p34783
S'The variable on the master side of the domain\n'
p34784
sS'cpp_type'
p34785
S'std::vector<VariableName>'
p34786
sS'default'
p34787
g3
sS'name'
p34788
S'master_variable'
p34789
sS'required'
p34790
I01
sS'group_name'
p34791
Nsa(dp34792
S'description'
p34793
S'The contact model to use\n'
p34794
sS'cpp_type'
p34795
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34796
sS'default'
p34797
S'frictionless'
p34798
sS'name'
p34799
S'model'
p34800
sS'required'
p34801
I00
sS'group_name'
p34802
Nsa(dp34803
S'description'
p34804
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p34805
sS'cpp_type'
p34806
S'double'
p34807
sS'default'
p34808
g3
sS'name'
p34809
S'normal_smoothing_distance'
p34810
sS'required'
p34811
I00
sS'group_name'
p34812
Nsa(dp34813
S'description'
p34814
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p34815
sS'cpp_type'
p34816
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34817
sS'default'
p34818
g3
sS'name'
p34819
S'normal_smoothing_method'
p34820
sS'required'
p34821
I00
sS'group_name'
p34822
Nsa(dp34823
S'name'
p34824
S'order'
p34825
sS'cpp_type'
p34826
S'MooseEnum'
p34827
sS'default'
p34828
S'FIRST'
p34829
sS'description'
p34830
S'The finite element order used for projections\n'
p34831
sS'required'
p34832
I00
sS'options'
p34833
S'FIRST SECOND THIRD FOURTH'
p34834
sS'group_name'
p34835
Nsa(dp34836
S'description'
p34837
S'The penalty to apply.  This can vary depending on the stiffness of your materials\n'
p34838
sS'cpp_type'
p34839
S'double'
p34840
sS'default'
p34841
S'1e+08'
p34842
sS'name'
p34843
S'penalty'
p34844
sS'required'
p34845
I00
sS'group_name'
p34846
Nsa(dp34847
S'description'
p34848
S'The boundary ID associated with the slave side\n'
p34849
sS'cpp_type'
p34850
S'BoundaryName'
p34851
sS'default'
p34852
g3
sS'name'
p34853
S'slave'
p34854
sS'required'
p34855
I01
sS'group_name'
p34856
Nsa(dp34857
S'description'
p34858
S'Tangential distance to extend edges of contact surfaces\n'
p34859
sS'cpp_type'
p34860
S'double'
p34861
sS'default'
p34862
g3
sS'name'
p34863
S'tangential_tolerance'
p34864
sS'required'
p34865
I00
sS'group_name'
p34866
Nsa(dp34867
S'description'
p34868
g3
sS'cpp_type'
p34869
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34870
sS'default'
p34871
S'MultiDContactConstraint'
p34872
sS'name'
p34873
S'type'
p34874
sS'required'
p34875
I00
sS'group_name'
p34876
Nsa(dp34877
S'description'
p34878
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34879
sS'cpp_type'
p34880
S'bool'
p34881
sS'default'
p34882
S'1'
p34883
sS'name'
p34884
S'use_displaced_mesh'
p34885
sS'required'
p34886
I00
sS'group_name'
p34887
S'Advanced'
p34888
sa(dp34889
S'description'
p34890
S'The name of the variable that this constraint is applied to.\n'
p34891
sS'cpp_type'
p34892
S'NonlinearVariableName'
p34893
sS'default'
p34894
g3
sS'name'
p34895
S'variable'
p34896
sS'required'
p34897
I01
sS'group_name'
p34898
NsasS'name'
p34899
S'/Constraints/MultiDContactConstraint'
p34900
sa(dp34901
S'description'
p34902
g3
sS'subblocks'
p34903
NsS'parameters'
p34904
(lp34905
(dp34906
S'description'
p34907
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34908
sS'cpp_type'
p34909
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p34910
sS'default'
p34911
g3
sS'name'
p34912
S'control_tags'
p34913
sS'required'
p34914
I00
sS'group_name'
p34915
Nsa(dp34916
S'name'
p34917
S'execute_on'
p34918
sS'cpp_type'
p34919
S'MultiMooseEnum'
p34920
sS'default'
p34921
S'LINEAR'
p34922
sS'description'
p34923
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34924
sS'required'
p34925
I00
sS'options'
p34926
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34927
sS'group_name'
p34928
Nsa(dp34929
S'description'
p34930
S"Whether or not to update the 'in contact' list every jacobian evaluation (by default it will happen once per timestep\n"
p34931
sS'cpp_type'
p34932
S'bool'
p34933
sS'default'
p34934
S'0'
p34935
sS'name'
p34936
S'jacobian_update'
p34937
sS'required'
p34938
I00
sS'group_name'
p34939
Nsa(dp34940
S'description'
p34941
S'The boundary ID associated with the master side\n'
p34942
sS'cpp_type'
p34943
S'BoundaryName'
p34944
sS'default'
p34945
g3
sS'name'
p34946
S'master'
p34947
sS'required'
p34948
I01
sS'group_name'
p34949
Nsa(dp34950
S'description'
p34951
S'The variable on the master side of the domain\n'
p34952
sS'cpp_type'
p34953
S'std::vector<VariableName>'
p34954
sS'default'
p34955
g3
sS'name'
p34956
S'master_variable'
p34957
sS'required'
p34958
I01
sS'group_name'
p34959
Nsa(dp34960
S'description'
p34961
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p34962
sS'cpp_type'
p34963
S'double'
p34964
sS'default'
p34965
g3
sS'name'
p34966
S'normal_smoothing_distance'
p34967
sS'required'
p34968
I00
sS'group_name'
p34969
Nsa(dp34970
S'description'
p34971
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p34972
sS'cpp_type'
p34973
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p34974
sS'default'
p34975
g3
sS'name'
p34976
S'normal_smoothing_method'
p34977
sS'required'
p34978
I00
sS'group_name'
p34979
Nsa(dp34980
S'name'
p34981
S'order'
p34982
sS'cpp_type'
p34983
S'MooseEnum'
p34984
sS'default'
p34985
S'FIRST'
p34986
sS'description'
p34987
S'The finite element order used for projections\n'
p34988
sS'required'
p34989
I00
sS'options'
p34990
S'FIRST SECOND THIRD FOURTH'
p34991
sS'group_name'
p34992
Nsa(dp34993
S'description'
p34994
S'The boundary ID associated with the slave side\n'
p34995
sS'cpp_type'
p34996
S'BoundaryName'
p34997
sS'default'
p34998
g3
sS'name'
p34999
S'slave'
p35000
sS'required'
p35001
I01
sS'group_name'
p35002
Nsa(dp35003
S'description'
p35004
S'Tangential distance to extend edges of contact surfaces\n'
p35005
sS'cpp_type'
p35006
S'double'
p35007
sS'default'
p35008
g3
sS'name'
p35009
S'tangential_tolerance'
p35010
sS'required'
p35011
I00
sS'group_name'
p35012
Nsa(dp35013
S'description'
p35014
g3
sS'cpp_type'
p35015
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35016
sS'default'
p35017
S'OneDContactConstraint'
p35018
sS'name'
p35019
S'type'
p35020
sS'required'
p35021
I00
sS'group_name'
p35022
Nsa(dp35023
S'description'
p35024
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35025
sS'cpp_type'
p35026
S'bool'
p35027
sS'default'
p35028
S'1'
p35029
sS'name'
p35030
S'use_displaced_mesh'
p35031
sS'required'
p35032
I00
sS'group_name'
p35033
S'Advanced'
p35034
sa(dp35035
S'description'
p35036
S'The name of the variable that this constraint is applied to.\n'
p35037
sS'cpp_type'
p35038
S'NonlinearVariableName'
p35039
sS'default'
p35040
g3
sS'name'
p35041
S'variable'
p35042
sS'required'
p35043
I01
sS'group_name'
p35044
NsasS'name'
p35045
S'/Constraints/OneDContactConstraint'
p35046
sa(dp35047
S'description'
p35048
g3
sS'subblocks'
p35049
NsS'parameters'
p35050
(lp35051
(dp35052
S'description'
p35053
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35054
sS'cpp_type'
p35055
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35056
sS'default'
p35057
g3
sS'name'
p35058
S'control_tags'
p35059
sS'required'
p35060
I00
sS'group_name'
p35061
Nsa(dp35062
S'name'
p35063
S'execute_on'
p35064
sS'cpp_type'
p35065
S'MultiMooseEnum'
p35066
sS'default'
p35067
S'LINEAR'
p35068
sS'description'
p35069
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35070
sS'required'
p35071
I00
sS'options'
p35072
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p35073
sS'group_name'
p35074
Nsa(dp35075
S'description'
p35076
S'The boundary ID associated with the master side\n'
p35077
sS'cpp_type'
p35078
S'BoundaryName'
p35079
sS'default'
p35080
g3
sS'name'
p35081
S'master'
p35082
sS'required'
p35083
I01
sS'group_name'
p35084
Nsa(dp35085
S'description'
p35086
S'The variable on the master side of the domain\n'
p35087
sS'cpp_type'
p35088
S'std::vector<VariableName>'
p35089
sS'default'
p35090
g3
sS'name'
p35091
S'master_variable'
p35092
sS'required'
p35093
I01
sS'group_name'
p35094
Nsa(dp35095
S'description'
p35096
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p35097
sS'cpp_type'
p35098
S'double'
p35099
sS'default'
p35100
g3
sS'name'
p35101
S'normal_smoothing_distance'
p35102
sS'required'
p35103
I00
sS'group_name'
p35104
Nsa(dp35105
S'description'
p35106
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p35107
sS'cpp_type'
p35108
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35109
sS'default'
p35110
g3
sS'name'
p35111
S'normal_smoothing_method'
p35112
sS'required'
p35113
I00
sS'group_name'
p35114
Nsa(dp35115
S'name'
p35116
S'order'
p35117
sS'cpp_type'
p35118
S'MooseEnum'
p35119
sS'default'
p35120
S'FIRST'
p35121
sS'description'
p35122
S'The finite element order used for projections\n'
p35123
sS'required'
p35124
I00
sS'options'
p35125
S'FIRST SECOND THIRD FOURTH'
p35126
sS'group_name'
p35127
Nsa(dp35128
S'description'
p35129
S'The boundary ID associated with the slave side\n'
p35130
sS'cpp_type'
p35131
S'BoundaryName'
p35132
sS'default'
p35133
g3
sS'name'
p35134
S'slave'
p35135
sS'required'
p35136
I01
sS'group_name'
p35137
Nsa(dp35138
S'description'
p35139
S'Tangential distance to extend edges of contact surfaces\n'
p35140
sS'cpp_type'
p35141
S'double'
p35142
sS'default'
p35143
g3
sS'name'
p35144
S'tangential_tolerance'
p35145
sS'required'
p35146
I00
sS'group_name'
p35147
Nsa(dp35148
S'description'
p35149
g3
sS'cpp_type'
p35150
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35151
sS'default'
p35152
S'SparsityBasedContactConstraint'
p35153
sS'name'
p35154
S'type'
p35155
sS'required'
p35156
I00
sS'group_name'
p35157
Nsa(dp35158
S'description'
p35159
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35160
sS'cpp_type'
p35161
S'bool'
p35162
sS'default'
p35163
S'0'
p35164
sS'name'
p35165
S'use_displaced_mesh'
p35166
sS'required'
p35167
I00
sS'group_name'
p35168
S'Advanced'
p35169
sa(dp35170
S'description'
p35171
S'The name of the variable that this constraint is applied to.\n'
p35172
sS'cpp_type'
p35173
S'NonlinearVariableName'
p35174
sS'default'
p35175
g3
sS'name'
p35176
S'variable'
p35177
sS'required'
p35178
I01
sS'group_name'
p35179
NsasS'name'
p35180
S'/Constraints/SparsityBasedContactConstraint'
p35181
sa(dp35182
S'description'
p35183
g3
sS'subblocks'
p35184
NsS'parameters'
p35185
(lp35186
(dp35187
S'description'
p35188
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35189
sS'cpp_type'
p35190
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35191
sS'default'
p35192
g3
sS'name'
p35193
S'control_tags'
p35194
sS'required'
p35195
I00
sS'group_name'
p35196
Nsa(dp35197
S'name'
p35198
S'execute_on'
p35199
sS'cpp_type'
p35200
S'MultiMooseEnum'
p35201
sS'default'
p35202
S'LINEAR'
p35203
sS'description'
p35204
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35205
sS'required'
p35206
I00
sS'options'
p35207
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p35208
sS'group_name'
p35209
Nsa(dp35210
S'description'
p35211
S'The boundary ID associated with the master side\n'
p35212
sS'cpp_type'
p35213
S'BoundaryName'
p35214
sS'default'
p35215
g3
sS'name'
p35216
S'master'
p35217
sS'required'
p35218
I01
sS'group_name'
p35219
Nsa(dp35220
S'description'
p35221
S'The variable on the master side of the domain\n'
p35222
sS'cpp_type'
p35223
S'std::vector<VariableName>'
p35224
sS'default'
p35225
g3
sS'name'
p35226
S'master_variable'
p35227
sS'required'
p35228
I01
sS'group_name'
p35229
Nsa(dp35230
S'description'
p35231
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p35232
sS'cpp_type'
p35233
S'double'
p35234
sS'default'
p35235
g3
sS'name'
p35236
S'normal_smoothing_distance'
p35237
sS'required'
p35238
I00
sS'group_name'
p35239
Nsa(dp35240
S'description'
p35241
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p35242
sS'cpp_type'
p35243
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35244
sS'default'
p35245
g3
sS'name'
p35246
S'normal_smoothing_method'
p35247
sS'required'
p35248
I00
sS'group_name'
p35249
Nsa(dp35250
S'name'
p35251
S'order'
p35252
sS'cpp_type'
p35253
S'MooseEnum'
p35254
sS'default'
p35255
S'FIRST'
p35256
sS'description'
p35257
S'The finite element order used for projections\n'
p35258
sS'required'
p35259
I00
sS'options'
p35260
S'FIRST SECOND THIRD FOURTH'
p35261
sS'group_name'
p35262
Nsa(dp35263
S'description'
p35264
S'scaling factor to be applied to constraint equations\n'
p35265
sS'cpp_type'
p35266
S'double'
p35267
sS'default'
p35268
S'1'
p35269
sS'name'
p35270
S'scaling'
p35271
sS'required'
p35272
I00
sS'group_name'
p35273
Nsa(dp35274
S'description'
p35275
S'The boundary ID associated with the slave side\n'
p35276
sS'cpp_type'
p35277
S'BoundaryName'
p35278
sS'default'
p35279
g3
sS'name'
p35280
S'slave'
p35281
sS'required'
p35282
I01
sS'group_name'
p35283
Nsa(dp35284
S'description'
p35285
S'Tangential distance to extend edges of contact surfaces\n'
p35286
sS'cpp_type'
p35287
S'double'
p35288
sS'default'
p35289
g3
sS'name'
p35290
S'tangential_tolerance'
p35291
sS'required'
p35292
I00
sS'group_name'
p35293
Nsa(dp35294
S'description'
p35295
g3
sS'cpp_type'
p35296
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35297
sS'default'
p35298
S'TiedValueConstraint'
p35299
sS'name'
p35300
S'type'
p35301
sS'required'
p35302
I00
sS'group_name'
p35303
Nsa(dp35304
S'description'
p35305
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35306
sS'cpp_type'
p35307
S'bool'
p35308
sS'default'
p35309
S'1'
p35310
sS'name'
p35311
S'use_displaced_mesh'
p35312
sS'required'
p35313
I00
sS'group_name'
p35314
S'Advanced'
p35315
sa(dp35316
S'description'
p35317
S'The name of the variable that this constraint is applied to.\n'
p35318
sS'cpp_type'
p35319
S'NonlinearVariableName'
p35320
sS'default'
p35321
g3
sS'name'
p35322
S'variable'
p35323
sS'required'
p35324
I01
sS'group_name'
p35325
NsasS'name'
p35326
S'/Constraints/TiedValueConstraint'
p35327
sasS'parameters'
p35328
NsS'name'
p35329
S'/Constraints'
p35330
sa(dp35331
S'description'
p35332
g3
sS'subblocks'
p35333
(lp35334
(dp35335
S'description'
p35336
g3
sS'subblocks'
p35337
NsS'parameters'
p35338
(lp35339
(dp35340
S'description'
p35341
S'Normal distance from surface within which nodes are captured\n'
p35342
sS'cpp_type'
p35343
S'double'
p35344
sS'default'
p35345
S'0'
p35346
sS'name'
p35347
S'capture_tolerance'
p35348
sS'required'
p35349
I00
sS'group_name'
p35350
Nsa(dp35351
S'description'
p35352
S'The x displacement\n'
p35353
sS'cpp_type'
p35354
S'NonlinearVariableName'
p35355
sS'default'
p35356
g3
sS'name'
p35357
S'disp_x'
p35358
sS'required'
p35359
I01
sS'group_name'
p35360
Nsa(dp35361
S'description'
p35362
S'The y displacement\n'
p35363
sS'cpp_type'
p35364
S'NonlinearVariableName'
p35365
sS'default'
p35366
g3
sS'name'
p35367
S'disp_y'
p35368
sS'required'
p35369
I00
sS'group_name'
p35370
Nsa(dp35371
S'description'
p35372
S'The z displacement\n'
p35373
sS'cpp_type'
p35374
S'NonlinearVariableName'
p35375
sS'default'
p35376
g3
sS'name'
p35377
S'disp_z'
p35378
sS'required'
p35379
I00
sS'group_name'
p35380
Nsa(dp35381
S'name'
p35382
S'formulation'
p35383
sS'cpp_type'
p35384
S'MooseEnum'
p35385
sS'default'
p35386
S'DEFAULT'
p35387
sS'description'
p35388
S'The contact formulation: default, penalty, augmented_lagrange\n'
p35389
sS'required'
p35390
I00
sS'options'
p35391
S'DEFAULT KINEMATIC PENALTY AUGMENTED_LAGRANGE'
p35392
sS'group_name'
p35393
Nsa(dp35394
S'description'
p35395
S'The friction coefficient\n'
p35396
sS'cpp_type'
p35397
S'double'
p35398
sS'default'
p35399
S'0'
p35400
sS'name'
p35401
S'friction_coefficient'
p35402
sS'required'
p35403
I00
sS'group_name'
p35404
Nsa(dp35405
S'description'
p35406
S'The master surface\n'
p35407
sS'cpp_type'
p35408
S'BoundaryName'
p35409
sS'default'
p35410
g3
sS'name'
p35411
S'master'
p35412
sS'required'
p35413
I01
sS'group_name'
p35414
Nsa(dp35415
S'description'
p35416
S'The contact model to use\n'
p35417
sS'cpp_type'
p35418
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35419
sS'default'
p35420
S'frictionless'
p35421
sS'name'
p35422
S'model'
p35423
sS'required'
p35424
I00
sS'group_name'
p35425
Nsa(dp35426
S'description'
p35427
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p35428
sS'cpp_type'
p35429
S'double'
p35430
sS'default'
p35431
g3
sS'name'
p35432
S'normal_smoothing_distance'
p35433
sS'required'
p35434
I00
sS'group_name'
p35435
Nsa(dp35436
S'description'
p35437
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p35438
sS'cpp_type'
p35439
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35440
sS'default'
p35441
g3
sS'name'
p35442
S'normal_smoothing_method'
p35443
sS'required'
p35444
I00
sS'group_name'
p35445
Nsa(dp35446
S'name'
p35447
S'order'
p35448
sS'cpp_type'
p35449
S'MooseEnum'
p35450
sS'default'
p35451
S'FIRST'
p35452
sS'description'
p35453
S'The finite element order: FIRST, SECOND, etc.\n'
p35454
sS'required'
p35455
I00
sS'options'
p35456
S'CONSTANT FIRST SECOND THIRD FOURTH'
p35457
sS'group_name'
p35458
Nsa(dp35459
S'description'
p35460
S'The penalty to apply.  This can vary depending on the stiffness of your materials\n'
p35461
sS'cpp_type'
p35462
S'double'
p35463
sS'default'
p35464
S'1e+08'
p35465
sS'name'
p35466
S'penalty'
p35467
sS'required'
p35468
I00
sS'group_name'
p35469
Nsa(dp35470
S'description'
p35471
S'The slave surface\n'
p35472
sS'cpp_type'
p35473
S'BoundaryName'
p35474
sS'default'
p35475
g3
sS'name'
p35476
S'slave'
p35477
sS'required'
p35478
I01
sS'group_name'
p35479
Nsa(dp35480
S'name'
p35481
S'system'
p35482
sS'cpp_type'
p35483
S'MooseEnum'
p35484
sS'default'
p35485
S'DiracKernel'
p35486
sS'description'
p35487
S'System to use for constraint enforcement.  Options are: DiracKernel Constraint\n'
p35488
sS'required'
p35489
I00
sS'options'
p35490
S'DiracKernel Constraint'
p35491
sS'group_name'
p35492
Nsa(dp35493
S'description'
p35494
S'Tangential distance to extend edges of contact surfaces\n'
p35495
sS'cpp_type'
p35496
S'double'
p35497
sS'default'
p35498
g3
sS'name'
p35499
S'tangential_tolerance'
p35500
sS'required'
p35501
I00
sS'group_name'
p35502
Nsa(dp35503
S'description'
p35504
S'Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  No tension release if negative.\n'
p35505
sS'cpp_type'
p35506
S'double'
p35507
sS'default'
p35508
S'0'
p35509
sS'name'
p35510
S'tension_release'
p35511
sS'required'
p35512
I00
sS'group_name'
p35513
Nsa(dp35514
S'description'
p35515
g3
sS'cpp_type'
p35516
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35517
sS'default'
p35518
S'NodalArea'
p35519
sS'name'
p35520
S'type'
p35521
sS'required'
p35522
I00
sS'group_name'
p35523
NsasS'name'
p35524
S'/Contact/*'
p35525
sasS'parameters'
p35526
NsS'name'
p35527
S'/Contact'
p35528
sa(dp35529
S'description'
p35530
g3
sS'subblocks'
p35531
(lp35532
(dp35533
S'description'
p35534
g3
sS'subblocks'
p35535
NsS'parameters'
p35536
(lp35537
(dp35538
S'description'
p35539
S'A string representing the Moose Object that will be built by this Action\n'
p35540
sS'cpp_type'
p35541
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35542
sS'default'
p35543
g3
sS'name'
p35544
S'type'
p35545
sS'required'
p35546
I01
sS'group_name'
p35547
NsasS'name'
p35548
S'/Controls/*'
p35549
sa(dp35550
S'description'
p35551
g3
sS'subblocks'
p35552
NsS'parameters'
p35553
(lp35554
(dp35555
S'description'
p35556
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35557
sS'cpp_type'
p35558
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35559
sS'default'
p35560
g3
sS'name'
p35561
S'control_tags'
p35562
sS'required'
p35563
I00
sS'group_name'
p35564
Nsa(dp35565
S'name'
p35566
S'execute_on'
p35567
sS'cpp_type'
p35568
S'MultiMooseEnum'
p35569
sS'default'
p35570
S'TIMESTEP_END'
p35571
sS'description'
p35572
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35573
sS'required'
p35574
I00
sS'options'
p35575
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p35576
sS'group_name'
p35577
Nsa(dp35578
S'description'
p35579
S'The function to use for controlling the specified parameter.\n'
p35580
sS'cpp_type'
p35581
S'FunctionName'
p35582
sS'default'
p35583
g3
sS'name'
p35584
S'function'
p35585
sS'required'
p35586
I01
sS'group_name'
p35587
Nsa(dp35588
S'description'
p35589
S'The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n'
p35590
sS'cpp_type'
p35591
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35592
sS'default'
p35593
g3
sS'name'
p35594
S'parameter'
p35595
sS'required'
p35596
I01
sS'group_name'
p35597
Nsa(dp35598
S'description'
p35599
g3
sS'cpp_type'
p35600
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35601
sS'default'
p35602
S'RealFunctionControl'
p35603
sS'name'
p35604
S'type'
p35605
sS'required'
p35606
I00
sS'group_name'
p35607
Nsa(dp35608
S'description'
p35609
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35610
sS'cpp_type'
p35611
S'bool'
p35612
sS'default'
p35613
S'0'
p35614
sS'name'
p35615
S'use_displaced_mesh'
p35616
sS'required'
p35617
I00
sS'group_name'
p35618
S'Advanced'
p35619
sasS'name'
p35620
S'/Controls/RealFunctionControl'
p35621
sasS'parameters'
p35622
NsS'name'
p35623
S'/Controls'
p35624
sa(dp35625
S'description'
p35626
g3
sS'subblocks'
p35627
(lp35628
(dp35629
S'description'
p35630
g3
sS'subblocks'
p35631
NsS'parameters'
p35632
(lp35633
(dp35634
S'description'
p35635
S'A string representing the Moose Object that will be built by this Action\n'
p35636
sS'cpp_type'
p35637
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35638
sS'default'
p35639
g3
sS'name'
p35640
S'type'
p35641
sS'required'
p35642
I01
sS'group_name'
p35643
NsasS'name'
p35644
S'/DGKernels/*'
p35645
sa(dp35646
S'description'
p35647
g3
sS'subblocks'
p35648
NsS'parameters'
p35649
(lp35650
(dp35651
S'description'
p35652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35653
sS'cpp_type'
p35654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35655
sS'default'
p35656
g3
sS'name'
p35657
S'control_tags'
p35658
sS'required'
p35659
I00
sS'group_name'
p35660
Nsa(dp35661
S'description'
p35662
S'epsilon\n'
p35663
sS'cpp_type'
p35664
S'double'
p35665
sS'default'
p35666
g3
sS'name'
p35667
S'epsilon'
p35668
sS'required'
p35669
I01
sS'group_name'
p35670
Nsa(dp35671
S'description'
p35672
S'sigma\n'
p35673
sS'cpp_type'
p35674
S'double'
p35675
sS'default'
p35676
g3
sS'name'
p35677
S'sigma'
p35678
sS'required'
p35679
I01
sS'group_name'
p35680
Nsa(dp35681
S'description'
p35682
g3
sS'cpp_type'
p35683
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35684
sS'default'
p35685
S'DGDiffusion'
p35686
sS'name'
p35687
S'type'
p35688
sS'required'
p35689
I00
sS'group_name'
p35690
Nsa(dp35691
S'description'
p35692
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35693
sS'cpp_type'
p35694
S'bool'
p35695
sS'default'
p35696
S'0'
p35697
sS'name'
p35698
S'use_displaced_mesh'
p35699
sS'required'
p35700
I00
sS'group_name'
p35701
S'Advanced'
p35702
sa(dp35703
S'description'
p35704
S'The name of the variable that this boundary condition applies to\n'
p35705
sS'cpp_type'
p35706
S'NonlinearVariableName'
p35707
sS'default'
p35708
g3
sS'name'
p35709
S'variable'
p35710
sS'required'
p35711
I01
sS'group_name'
p35712
NsasS'name'
p35713
S'/DGKernels/DGDiffusion'
p35714
sasS'parameters'
p35715
NsS'name'
p35716
S'/DGKernels'
p35717
sa(dp35718
S'description'
p35719
g3
sS'subblocks'
p35720
(lp35721
(dp35722
S'description'
p35723
g3
sS'subblocks'
p35724
NsS'parameters'
p35725
(lp35726
(dp35727
S'description'
p35728
S'A string representing the Moose Object that will be built by this Action\n'
p35729
sS'cpp_type'
p35730
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35731
sS'default'
p35732
g3
sS'name'
p35733
S'type'
p35734
sS'required'
p35735
I01
sS'group_name'
p35736
NsasS'name'
p35737
S'/Dampers/*'
p35738
sa(dp35739
S'description'
p35740
g3
sS'subblocks'
p35741
NsS'parameters'
p35742
(lp35743
(dp35744
S'description'
p35745
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35746
sS'cpp_type'
p35747
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35748
sS'default'
p35749
g3
sS'name'
p35750
S'control_tags'
p35751
sS'required'
p35752
I00
sS'group_name'
p35753
Nsa(dp35754
S'description'
p35755
S'The percentage (between 0 and 1) of the newton update to take.\n'
p35756
sS'cpp_type'
p35757
S'double'
p35758
sS'default'
p35759
g3
sS'name'
p35760
S'damping'
p35761
sS'required'
p35762
I01
sS'group_name'
p35763
Nsa(dp35764
S'description'
p35765
g3
sS'cpp_type'
p35766
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35767
sS'default'
p35768
S'ConstantDamper'
p35769
sS'name'
p35770
S'type'
p35771
sS'required'
p35772
I00
sS'group_name'
p35773
Nsa(dp35774
S'description'
p35775
S'The name of the variable that this damper operates on\n'
p35776
sS'cpp_type'
p35777
S'NonlinearVariableName'
p35778
sS'default'
p35779
g3
sS'name'
p35780
S'variable'
p35781
sS'required'
p35782
I01
sS'group_name'
p35783
NsasS'name'
p35784
S'/Dampers/ConstantDamper'
p35785
sa(dp35786
S'description'
p35787
g3
sS'subblocks'
p35788
NsS'parameters'
p35789
(lp35790
(dp35791
S'description'
p35792
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35793
sS'cpp_type'
p35794
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35795
sS'default'
p35796
g3
sS'name'
p35797
S'control_tags'
p35798
sS'required'
p35799
I00
sS'group_name'
p35800
Nsa(dp35801
S'description'
p35802
S'The maximum newton increment for the variable.\n'
p35803
sS'cpp_type'
p35804
S'double'
p35805
sS'default'
p35806
g3
sS'name'
p35807
S'max_increment'
p35808
sS'required'
p35809
I01
sS'group_name'
p35810
Nsa(dp35811
S'description'
p35812
g3
sS'cpp_type'
p35813
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35814
sS'default'
p35815
S'MaxIncrement'
p35816
sS'name'
p35817
S'type'
p35818
sS'required'
p35819
I00
sS'group_name'
p35820
Nsa(dp35821
S'description'
p35822
S'The name of the variable that this damper operates on\n'
p35823
sS'cpp_type'
p35824
S'NonlinearVariableName'
p35825
sS'default'
p35826
g3
sS'name'
p35827
S'variable'
p35828
sS'required'
p35829
I01
sS'group_name'
p35830
NsasS'name'
p35831
S'/Dampers/MaxIncrement'
p35832
sasS'parameters'
p35833
NsS'name'
p35834
S'/Dampers'
p35835
sa(dp35836
S'description'
p35837
g3
sS'subblocks'
p35838
NsS'parameters'
p35839
(lp35840
(dp35841
S'description'
p35842
S'Print out the actions being executed\n'
p35843
sS'cpp_type'
p35844
S'bool'
p35845
sS'default'
p35846
S'0'
p35847
sS'name'
p35848
S'show_actions'
p35849
sS'required'
p35850
I00
sS'group_name'
p35851
Nsa(dp35852
S'description'
p35853
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p35854
sS'cpp_type'
p35855
S'bool'
p35856
sS'default'
p35857
S'0'
p35858
sS'name'
p35859
S'show_material_props'
p35860
sS'required'
p35861
I00
sS'group_name'
p35862
Nsa(dp35863
S'description'
p35864
S'Shows parser block extraction and debugging information\n'
p35865
sS'cpp_type'
p35866
S'bool'
p35867
sS'default'
p35868
S'0'
p35869
sS'name'
p35870
S'show_parser'
p35871
sS'required'
p35872
I00
sS'group_name'
p35873
Nsa(dp35874
S'description'
p35875
S'The number of top residuals to print out (0 = no output)\n'
p35876
sS'cpp_type'
p35877
S'unsigned int'
p35878
sS'default'
p35879
S'0'
p35880
sS'name'
p35881
S'show_top_residuals'
p35882
sS'required'
p35883
I00
sS'group_name'
p35884
Nsa(dp35885
S'description'
p35886
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p35887
sS'cpp_type'
p35888
S'bool'
p35889
sS'default'
p35890
S'0'
p35891
sS'name'
p35892
S'show_var_residual_norms'
p35893
sS'required'
p35894
I00
sS'group_name'
p35895
Nsa(dp35896
S'description'
p35897
S'Variables for which residuals will be sent to the output file\n'
p35898
sS'cpp_type'
p35899
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p35900
sS'default'
p35901
g3
sS'name'
p35902
S'show_var_residual'
p35903
sS'required'
p35904
I00
sS'group_name'
p35905
NsasS'name'
p35906
S'/Debug'
p35907
sa(dp35908
S'description'
p35909
g3
sS'subblocks'
p35910
NsS'parameters'
p35911
(lp35912
(dp35913
S'description'
p35914
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p35915
sS'cpp_type'
p35916
S'bool'
p35917
sS'default'
p35918
g3
sS'name'
p35919
S'DEPRECATED'
p35920
sS'required'
p35921
I00
sS'group_name'
p35922
NsasS'name'
p35923
S'/DeprecatedBlock'
p35924
sa(dp35925
S'description'
p35926
g3
sS'subblocks'
p35927
(lp35928
(dp35929
S'description'
p35930
g3
sS'subblocks'
p35931
NsS'parameters'
p35932
(lp35933
(dp35934
S'description'
p35935
S'A string representing the Moose Object that will be built by this Action\n'
p35936
sS'cpp_type'
p35937
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35938
sS'default'
p35939
g3
sS'name'
p35940
S'type'
p35941
sS'required'
p35942
I01
sS'group_name'
p35943
NsasS'name'
p35944
S'/DiracKernels/*'
p35945
sa(dp35946
S'description'
p35947
g3
sS'subblocks'
p35948
NsS'parameters'
p35949
(lp35950
(dp35951
S'description'
p35952
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35953
sS'cpp_type'
p35954
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p35955
sS'default'
p35956
g3
sS'name'
p35957
S'control_tags'
p35958
sS'required'
p35959
I00
sS'group_name'
p35960
Nsa(dp35961
S'description'
p35962
S'The x,y,z coordinates of the point\n'
p35963
sS'cpp_type'
p35964
S'std::vector<double, std::allocator<double> >'
p35965
sS'default'
p35966
g3
sS'name'
p35967
S'point'
p35968
sS'required'
p35969
I01
sS'group_name'
p35970
Nsa(dp35971
S'description'
p35972
g3
sS'cpp_type'
p35973
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p35974
sS'default'
p35975
S'ConstantPointSource'
p35976
sS'name'
p35977
S'type'
p35978
sS'required'
p35979
I00
sS'group_name'
p35980
Nsa(dp35981
S'description'
p35982
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35983
sS'cpp_type'
p35984
S'bool'
p35985
sS'default'
p35986
S'0'
p35987
sS'name'
p35988
S'use_displaced_mesh'
p35989
sS'required'
p35990
I00
sS'group_name'
p35991
S'Advanced'
p35992
sa(dp35993
S'description'
p35994
S'The value of the point source\n'
p35995
sS'cpp_type'
p35996
S'double'
p35997
sS'default'
p35998
g3
sS'name'
p35999
S'value'
p36000
sS'required'
p36001
I01
sS'group_name'
p36002
Nsa(dp36003
S'description'
p36004
S'The name of the variable that this kernel operates on\n'
p36005
sS'cpp_type'
p36006
S'NonlinearVariableName'
p36007
sS'default'
p36008
g3
sS'name'
p36009
S'variable'
p36010
sS'required'
p36011
I01
sS'group_name'
p36012
NsasS'name'
p36013
S'/DiracKernels/ConstantPointSource'
p36014
sa(dp36015
S'description'
p36016
g3
sS'subblocks'
p36017
NsS'parameters'
p36018
(lp36019
(dp36020
S'description'
p36021
S'The master boundary\n'
p36022
sS'cpp_type'
p36023
S'BoundaryName'
p36024
sS'default'
p36025
g3
sS'name'
p36026
S'boundary'
p36027
sS'required'
p36028
I01
sS'group_name'
p36029
Nsa(dp36030
S'description'
p36031
S'Normal distance from surface within which nodes are captured\n'
p36032
sS'cpp_type'
p36033
S'double'
p36034
sS'default'
p36035
S'0'
p36036
sS'name'
p36037
S'capture_tolerance'
p36038
sS'required'
p36039
I00
sS'group_name'
p36040
Nsa(dp36041
S'description'
p36042
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p36043
sS'cpp_type'
p36044
S'unsigned int'
p36045
sS'default'
p36046
g3
sS'name'
p36047
S'component'
p36048
sS'required'
p36049
I01
sS'group_name'
p36050
Nsa(dp36051
S'description'
p36052
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36053
sS'cpp_type'
p36054
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36055
sS'default'
p36056
g3
sS'name'
p36057
S'control_tags'
p36058
sS'required'
p36059
I00
sS'group_name'
p36060
Nsa(dp36061
S'description'
p36062
S'The x displacement\n'
p36063
sS'cpp_type'
p36064
S'std::vector<VariableName>'
p36065
sS'default'
p36066
g3
sS'name'
p36067
S'disp_x'
p36068
sS'required'
p36069
I00
sS'group_name'
p36070
Nsa(dp36071
S'description'
p36072
S'The y displacement\n'
p36073
sS'cpp_type'
p36074
S'std::vector<VariableName>'
p36075
sS'default'
p36076
g3
sS'name'
p36077
S'disp_y'
p36078
sS'required'
p36079
I00
sS'group_name'
p36080
Nsa(dp36081
S'description'
p36082
S'The z displacement\n'
p36083
sS'cpp_type'
p36084
S'std::vector<VariableName>'
p36085
sS'default'
p36086
g3
sS'name'
p36087
S'disp_z'
p36088
sS'required'
p36089
I00
sS'group_name'
p36090
Nsa(dp36091
S'description'
p36092
S'The contact formulation\n'
p36093
sS'cpp_type'
p36094
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36095
sS'default'
p36096
S'default'
p36097
sS'name'
p36098
S'formulation'
p36099
sS'required'
p36100
I00
sS'group_name'
p36101
Nsa(dp36102
S'description'
p36103
S'The friction coefficient\n'
p36104
sS'cpp_type'
p36105
S'double'
p36106
sS'default'
p36107
S'0'
p36108
sS'name'
p36109
S'friction_coefficient'
p36110
sS'required'
p36111
I00
sS'group_name'
p36112
Nsa(dp36113
S'description'
p36114
S'The contact model to use\n'
p36115
sS'cpp_type'
p36116
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36117
sS'default'
p36118
S'frictionless'
p36119
sS'name'
p36120
S'model'
p36121
sS'required'
p36122
I00
sS'group_name'
p36123
Nsa(dp36124
S'description'
p36125
S'The nodal area\n'
p36126
sS'cpp_type'
p36127
S'std::vector<VariableName>'
p36128
sS'default'
p36129
g3
sS'name'
p36130
S'nodal_area'
p36131
sS'required'
p36132
I01
sS'group_name'
p36133
Nsa(dp36134
S'description'
p36135
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p36136
sS'cpp_type'
p36137
S'double'
p36138
sS'default'
p36139
g3
sS'name'
p36140
S'normal_smoothing_distance'
p36141
sS'required'
p36142
I00
sS'group_name'
p36143
Nsa(dp36144
S'description'
p36145
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p36146
sS'cpp_type'
p36147
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36148
sS'default'
p36149
g3
sS'name'
p36150
S'normal_smoothing_method'
p36151
sS'required'
p36152
I00
sS'group_name'
p36153
Nsa(dp36154
S'description'
p36155
S'Whether to normalize the penalty parameter with the nodal area for penalty contact.\n'
p36156
sS'cpp_type'
p36157
S'bool'
p36158
sS'default'
p36159
S'0'
p36160
sS'name'
p36161
S'normalize_penalty'
p36162
sS'required'
p36163
I00
sS'group_name'
p36164
Nsa(dp36165
S'name'
p36166
S'order'
p36167
sS'cpp_type'
p36168
S'MooseEnum'
p36169
sS'default'
p36170
S'FIRST'
p36171
sS'description'
p36172
S'The finite element order\n'
p36173
sS'required'
p36174
I00
sS'options'
p36175
S'CONSTANT FIRST SECOND THIRD FOURTH'
p36176
sS'group_name'
p36177
Nsa(dp36178
S'description'
p36179
S'The penalty to apply.  This can vary depending on the stiffness of your materials\n'
p36180
sS'cpp_type'
p36181
S'double'
p36182
sS'default'
p36183
S'1e+08'
p36184
sS'name'
p36185
S'penalty'
p36186
sS'required'
p36187
I00
sS'group_name'
p36188
Nsa(dp36189
S'description'
p36190
S'The slave boundary\n'
p36191
sS'cpp_type'
p36192
S'BoundaryName'
p36193
sS'default'
p36194
g3
sS'name'
p36195
S'slave'
p36196
sS'required'
p36197
I01
sS'group_name'
p36198
Nsa(dp36199
S'description'
p36200
S'Tangential distance to extend edges of contact surfaces\n'
p36201
sS'cpp_type'
p36202
S'double'
p36203
sS'default'
p36204
g3
sS'name'
p36205
S'tangential_tolerance'
p36206
sS'required'
p36207
I00
sS'group_name'
p36208
Nsa(dp36209
S'description'
p36210
S'Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  No tension release if negative.\n'
p36211
sS'cpp_type'
p36212
S'double'
p36213
sS'default'
p36214
S'0'
p36215
sS'name'
p36216
S'tension_release'
p36217
sS'required'
p36218
I00
sS'group_name'
p36219
Nsa(dp36220
S'description'
p36221
g3
sS'cpp_type'
p36222
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36223
sS'default'
p36224
S'ContactMaster'
p36225
sS'name'
p36226
S'type'
p36227
sS'required'
p36228
I00
sS'group_name'
p36229
Nsa(dp36230
S'description'
p36231
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36232
sS'cpp_type'
p36233
S'bool'
p36234
sS'default'
p36235
S'1'
p36236
sS'name'
p36237
S'use_displaced_mesh'
p36238
sS'required'
p36239
I00
sS'group_name'
p36240
S'Advanced'
p36241
sa(dp36242
S'description'
p36243
S'The name of the variable that this kernel operates on\n'
p36244
sS'cpp_type'
p36245
S'NonlinearVariableName'
p36246
sS'default'
p36247
g3
sS'name'
p36248
S'variable'
p36249
sS'required'
p36250
I01
sS'group_name'
p36251
NsasS'name'
p36252
S'/DiracKernels/ContactMaster'
p36253
sa(dp36254
S'description'
p36255
g3
sS'subblocks'
p36256
NsS'parameters'
p36257
(lp36258
(dp36259
S'description'
p36260
S'The master boundary\n'
p36261
sS'cpp_type'
p36262
S'BoundaryName'
p36263
sS'default'
p36264
g3
sS'name'
p36265
S'boundary'
p36266
sS'required'
p36267
I01
sS'group_name'
p36268
Nsa(dp36269
S'description'
p36270
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36271
sS'cpp_type'
p36272
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36273
sS'default'
p36274
g3
sS'name'
p36275
S'control_tags'
p36276
sS'required'
p36277
I00
sS'group_name'
p36278
Nsa(dp36279
S'description'
p36280
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p36281
sS'cpp_type'
p36282
S'double'
p36283
sS'default'
p36284
g3
sS'name'
p36285
S'normal_smoothing_distance'
p36286
sS'required'
p36287
I00
sS'group_name'
p36288
Nsa(dp36289
S'description'
p36290
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p36291
sS'cpp_type'
p36292
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36293
sS'default'
p36294
g3
sS'name'
p36295
S'normal_smoothing_method'
p36296
sS'required'
p36297
I00
sS'group_name'
p36298
Nsa(dp36299
S'name'
p36300
S'order'
p36301
sS'cpp_type'
p36302
S'MooseEnum'
p36303
sS'default'
p36304
S'FIRST'
p36305
sS'description'
p36306
S'The finite element order\n'
p36307
sS'required'
p36308
I00
sS'options'
p36309
S'CONSTANT FIRST SECOND THIRD FOURTH'
p36310
sS'group_name'
p36311
Nsa(dp36312
S'description'
p36313
S'The slave boundary\n'
p36314
sS'cpp_type'
p36315
S'BoundaryName'
p36316
sS'default'
p36317
g3
sS'name'
p36318
S'slave'
p36319
sS'required'
p36320
I01
sS'group_name'
p36321
Nsa(dp36322
S'description'
p36323
S'Tangential distance to extend edges of contact surfaces\n'
p36324
sS'cpp_type'
p36325
S'double'
p36326
sS'default'
p36327
g3
sS'name'
p36328
S'tangential_tolerance'
p36329
sS'required'
p36330
I00
sS'group_name'
p36331
Nsa(dp36332
S'description'
p36333
g3
sS'cpp_type'
p36334
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36335
sS'default'
p36336
S'GapHeatPointSourceMaster'
p36337
sS'name'
p36338
S'type'
p36339
sS'required'
p36340
I00
sS'group_name'
p36341
Nsa(dp36342
S'description'
p36343
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36344
sS'cpp_type'
p36345
S'bool'
p36346
sS'default'
p36347
S'1'
p36348
sS'name'
p36349
S'use_displaced_mesh'
p36350
sS'required'
p36351
I00
sS'group_name'
p36352
S'Advanced'
p36353
sa(dp36354
S'description'
p36355
S'The name of the variable that this kernel operates on\n'
p36356
sS'cpp_type'
p36357
S'NonlinearVariableName'
p36358
sS'default'
p36359
g3
sS'name'
p36360
S'variable'
p36361
sS'required'
p36362
I01
sS'group_name'
p36363
NsasS'name'
p36364
S'/DiracKernels/GapHeatPointSourceMaster'
p36365
sa(dp36366
S'description'
p36367
S'Approximates a borehole in the mesh with given bottomhole pressure, and radii using a number of point sinks whose positions are read from a file\n'
p36368
sS'subblocks'
p36369
NsS'parameters'
p36370
(lp36371
(dp36372
S'description'
p36373
S'Used for debugging by Andy\n'
p36374
sS'cpp_type'
p36375
S'bool'
p36376
sS'default'
p36377
S'0'
p36378
sS'name'
p36379
S'MyNameIsAndyWilkins'
p36380
sS'required'
p36381
I00
sS'group_name'
p36382
Nsa(dp36383
S'description'
p36384
S'User Object of type=RichardsSumQuantity in which to place the total outflow from the borehole for each time step.\n'
p36385
sS'cpp_type'
p36386
S'UserObjectName'
p36387
sS'default'
p36388
g3
sS'name'
p36389
S'SumQuantityUO'
p36390
sS'required'
p36391
I01
sS'group_name'
p36392
Nsa(dp36393
S'description'
p36394
S'Borehole direction.  Note this is only used if there is only one point in the point_file.\n'
p36395
sS'cpp_type'
p36396
S'libMesh::VectorValue<double>'
p36397
sS'default'
p36398
S'0 0 1'
p36399
sS'name'
p36400
S'borehole_direction'
p36401
sS'required'
p36402
I00
sS'group_name'
p36403
Nsa(dp36404
S'description'
p36405
S'Borehole length.  Note this is only used if there is only one point in the point_file.\n'
p36406
sS'cpp_type'
p36407
S'double'
p36408
sS'default'
p36409
S'0'
p36410
sS'name'
p36411
S'borehole_length'
p36412
sS'required'
p36413
I00
sS'group_name'
p36414
Nsa(dp36415
S'description'
p36416
S'Pressure at the bottom of the borehole\n'
p36417
sS'cpp_type'
p36418
S'double'
p36419
sS'default'
p36420
g3
sS'name'
p36421
S'bottom_pressure'
p36422
sS'required'
p36423
I01
sS'group_name'
p36424
Nsa(dp36425
S'description'
p36426
S'If zero then borehole does nothing.  If positive the borehole acts as a sink (production well) for porepressure > borehole pressure, and does nothing otherwise.  If negative the borehole acts as a source (injection well) for porepressure < borehole pressure, and does nothing otherwise.  The flow rate to/from the borehole is multiplied by |character|, so usually character = +/- 1, but you can specify other quantities to provide an overall scaling to the flow if you like.\n'
p36427
sS'cpp_type'
p36428
S'FunctionName'
p36429
sS'default'
p36430
g3
sS'name'
p36431
S'character'
p36432
sS'required'
p36433
I01
sS'group_name'
p36434
Nsa(dp36435
S'description'
p36436
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36437
sS'cpp_type'
p36438
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36439
sS'default'
p36440
g3
sS'name'
p36441
S'control_tags'
p36442
sS'required'
p36443
I00
sS'group_name'
p36444
Nsa(dp36445
S'description'
p36446
S'List of names of user objects that define the fluid density.  Only needed if fully_upwind is used\n'
p36447
sS'cpp_type'
p36448
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p36449
sS'default'
p36450
g3
sS'name'
p36451
S'density_UO'
p36452
sS'required'
p36453
I00
sS'group_name'
p36454
Nsa(dp36455
S'description'
p36456
S'Fully upwind the flux\n'
p36457
sS'cpp_type'
p36458
S'bool'
p36459
sS'default'
p36460
S'0'
p36461
sS'name'
p36462
S'fully_upwind'
p36463
sS'required'
p36464
I00
sS'group_name'
p36465
Nsa(dp36466
S'description'
p36467
S'The file containing the borehole radii and coordinates of the point sinks that approximate the borehole.  Each line in the file must contain a space-separated radius and coordinate.  Ie r x y z.  The last point in the file is defined as the borehole bottom, where the borehole pressure is bottom_pressure.  If your file contains just one point, you must also specify the borehole_length and borehole_direction.  Note that you will get segementation faults if your points do not lie within your mesh!\n'
p36468
sS'cpp_type'
p36469
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36470
sS'default'
p36471
g3
sS'name'
p36472
S'point_file'
p36473
sS'required'
p36474
I01
sS'group_name'
p36475
Nsa(dp36476
S'description'
p36477
S'The dimensionless constant used in evaluating the borehole effective radius.  This depends on the meshing scheme.  Peacemann finite-difference calculations give 0.28, while for rectangular finite elements the result is closer to 0.1594.  (See  Eqn(4.13) of Z Chen, Y Zhang, Well flow models for various numerical methods, Int J Num Analysis and Modeling, 3 (2008) 375-388.)\n'
p36478
sS'cpp_type'
p36479
S'double'
p36480
sS'default'
p36481
S'0.28'
p36482
sS'name'
p36483
S're_constant'
p36484
sS'required'
p36485
I00
sS'group_name'
p36486
Nsa(dp36487
S'description'
p36488
S'List of names of user objects that define relative permeability.  Only needed if fully_upwind is used\n'
p36489
sS'cpp_type'
p36490
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p36491
sS'default'
p36492
g3
sS'name'
p36493
S'relperm_UO'
p36494
sS'required'
p36495
I00
sS'group_name'
p36496
Nsa(dp36497
S'description'
p36498
S'The UserObject that holds the list of Richards variable names.\n'
p36499
sS'cpp_type'
p36500
S'UserObjectName'
p36501
sS'default'
p36502
g3
sS'name'
p36503
S'richardsVarNames_UO'
p36504
sS'required'
p36505
I01
sS'group_name'
p36506
Nsa(dp36507
S'description'
p36508
S'List of name of user objects that define effective saturation as a function of pressure list.  Only needed if fully_upwind is used\n'
p36509
sS'cpp_type'
p36510
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p36511
sS'default'
p36512
g3
sS'name'
p36513
S'seff_UO'
p36514
sS'required'
p36515
I00
sS'group_name'
p36516
Nsa(dp36517
S'description'
p36518
g3
sS'cpp_type'
p36519
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36520
sS'default'
p36521
S'RichardsBorehole'
p36522
sS'name'
p36523
S'type'
p36524
sS'required'
p36525
I00
sS'group_name'
p36526
Nsa(dp36527
S'description'
p36528
S"(fluid_density*gravitational_acceleration) as a vector pointing downwards.  Note that the borehole pressure at a given z position is bottom_pressure + unit_weight*(p - p_bottom), where p=(x,y,z) and p_bottom=(x,y,z) of the bottom point of the borehole.  If you don't want bottomhole pressure to vary in the borehole just set unit_weight=0.  Typical value is gravity = (0,0,-1E4)\n"
p36529
sS'cpp_type'
p36530
S'libMesh::VectorValue<double>'
p36531
sS'default'
p36532
g3
sS'name'
p36533
S'unit_weight'
p36534
sS'required'
p36535
I01
sS'group_name'
p36536
Nsa(dp36537
S'description'
p36538
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36539
sS'cpp_type'
p36540
S'bool'
p36541
sS'default'
p36542
S'0'
p36543
sS'name'
p36544
S'use_displaced_mesh'
p36545
sS'required'
p36546
I00
sS'group_name'
p36547
S'Advanced'
p36548
sa(dp36549
S'description'
p36550
S'The name of the variable that this kernel operates on\n'
p36551
sS'cpp_type'
p36552
S'NonlinearVariableName'
p36553
sS'default'
p36554
g3
sS'name'
p36555
S'variable'
p36556
sS'required'
p36557
I01
sS'group_name'
p36558
Nsa(dp36559
S'description'
p36560
S'Usually this is calculated internally from the element geometry, the local borehole direction and segment length, and the permeability.  However, if this parameter is given as a positive number then this number is used instead of the internal calculation.  This speeds up computation marginally.  re_constant becomes irrelevant\n'
p36561
sS'cpp_type'
p36562
S'double'
p36563
sS'default'
p36564
S'-1'
p36565
sS'name'
p36566
S'well_constant'
p36567
sS'required'
p36568
I00
sS'group_name'
p36569
NsasS'name'
p36570
S'/DiracKernels/RichardsBorehole'
p36571
sa(dp36572
S'description'
p36573
S'Approximates a polyline sink in the mesh by using a number of point sinks whose positions are read from a file\n'
p36574
sS'subblocks'
p36575
NsS'parameters'
p36576
(lp36577
(dp36578
S'description'
p36579
S'User Object of type=RichardsSumQuantity in which to place the total outflow from the polylinesink for each time step.\n'
p36580
sS'cpp_type'
p36581
S'UserObjectName'
p36582
sS'default'
p36583
g3
sS'name'
p36584
S'SumQuantityUO'
p36585
sS'required'
p36586
I01
sS'group_name'
p36587
Nsa(dp36588
S'description'
p36589
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36590
sS'cpp_type'
p36591
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36592
sS'default'
p36593
g3
sS'name'
p36594
S'control_tags'
p36595
sS'required'
p36596
I00
sS'group_name'
p36597
Nsa(dp36598
S'description'
p36599
S'Tuple of flux values (measured in kg.m^-3.s^-1).  A piecewise-linear fit is performed to the (pressure,flux) pairs to obtain the flux at any arbitrary pressure.  If a quad-point pressure is less than the first pressure value, the first flux value is used.  If quad-point pressure exceeds the final pressure value, the final flux value is used.  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.\n'
p36600
sS'cpp_type'
p36601
S'std::vector<double, std::allocator<double> >'
p36602
sS'default'
p36603
g3
sS'name'
p36604
S'fluxes'
p36605
sS'required'
p36606
I01
sS'group_name'
p36607
Nsa(dp36608
S'description'
p36609
S'The file containing the coordinates of the point sinks that will approximate the polyline.  Each line in the file must contain a space-separated coordinate.  Note that you will get segementation faults if your points do not lie within your mesh!\n'
p36610
sS'cpp_type'
p36611
S'FileName'
p36612
sS'default'
p36613
g3
sS'name'
p36614
S'point_file'
p36615
sS'required'
p36616
I01
sS'group_name'
p36617
Nsa(dp36618
S'description'
p36619
S'Tuple of pressure values.  Must be monotonically increasing.\n'
p36620
sS'cpp_type'
p36621
S'std::vector<double, std::allocator<double> >'
p36622
sS'default'
p36623
g3
sS'name'
p36624
S'pressures'
p36625
sS'required'
p36626
I01
sS'group_name'
p36627
Nsa(dp36628
S'description'
p36629
S'The UserObject that holds the list of Richards variable names.\n'
p36630
sS'cpp_type'
p36631
S'UserObjectName'
p36632
sS'default'
p36633
g3
sS'name'
p36634
S'richardsVarNames_UO'
p36635
sS'required'
p36636
I01
sS'group_name'
p36637
Nsa(dp36638
S'description'
p36639
g3
sS'cpp_type'
p36640
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36641
sS'default'
p36642
S'RichardsPolyLineSink'
p36643
sS'name'
p36644
S'type'
p36645
sS'required'
p36646
I00
sS'group_name'
p36647
Nsa(dp36648
S'description'
p36649
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36650
sS'cpp_type'
p36651
S'bool'
p36652
sS'default'
p36653
S'0'
p36654
sS'name'
p36655
S'use_displaced_mesh'
p36656
sS'required'
p36657
I00
sS'group_name'
p36658
S'Advanced'
p36659
sa(dp36660
S'description'
p36661
S'The name of the variable that this kernel operates on\n'
p36662
sS'cpp_type'
p36663
S'NonlinearVariableName'
p36664
sS'default'
p36665
g3
sS'name'
p36666
S'variable'
p36667
sS'required'
p36668
I01
sS'group_name'
p36669
NsasS'name'
p36670
S'/DiracKernels/RichardsPolyLineSink'
p36671
sa(dp36672
S'description'
p36673
g3
sS'subblocks'
p36674
NsS'parameters'
p36675
(lp36676
(dp36677
S'description'
p36678
S'The slave boundary\n'
p36679
sS'cpp_type'
p36680
S'BoundaryName'
p36681
sS'default'
p36682
g3
sS'name'
p36683
S'boundary'
p36684
sS'required'
p36685
I01
sS'group_name'
p36686
Nsa(dp36687
S'description'
p36688
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p36689
sS'cpp_type'
p36690
S'unsigned int'
p36691
sS'default'
p36692
g3
sS'name'
p36693
S'component'
p36694
sS'required'
p36695
I01
sS'group_name'
p36696
Nsa(dp36697
S'description'
p36698
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36699
sS'cpp_type'
p36700
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p36701
sS'default'
p36702
g3
sS'name'
p36703
S'control_tags'
p36704
sS'required'
p36705
I00
sS'group_name'
p36706
Nsa(dp36707
S'description'
p36708
S'The x displacement\n'
p36709
sS'cpp_type'
p36710
S'std::vector<VariableName>'
p36711
sS'default'
p36712
g3
sS'name'
p36713
S'disp_x'
p36714
sS'required'
p36715
I01
sS'group_name'
p36716
Nsa(dp36717
S'description'
p36718
S'The y displacement\n'
p36719
sS'cpp_type'
p36720
S'std::vector<VariableName>'
p36721
sS'default'
p36722
g3
sS'name'
p36723
S'disp_y'
p36724
sS'required'
p36725
I00
sS'group_name'
p36726
Nsa(dp36727
S'description'
p36728
S'The z displacement\n'
p36729
sS'cpp_type'
p36730
S'std::vector<VariableName>'
p36731
sS'default'
p36732
g3
sS'name'
p36733
S'disp_z'
p36734
sS'required'
p36735
I00
sS'group_name'
p36736
Nsa(dp36737
S'description'
p36738
S'The contact formulation\n'
p36739
sS'cpp_type'
p36740
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36741
sS'default'
p36742
S'default'
p36743
sS'name'
p36744
S'formulation'
p36745
sS'required'
p36746
I00
sS'group_name'
p36747
Nsa(dp36748
S'description'
p36749
S'The friction coefficient\n'
p36750
sS'cpp_type'
p36751
S'double'
p36752
sS'default'
p36753
S'0'
p36754
sS'name'
p36755
S'friction_coefficient'
p36756
sS'required'
p36757
I00
sS'group_name'
p36758
Nsa(dp36759
S'description'
p36760
S'The master boundary\n'
p36761
sS'cpp_type'
p36762
S'BoundaryName'
p36763
sS'default'
p36764
g3
sS'name'
p36765
S'master'
p36766
sS'required'
p36767
I01
sS'group_name'
p36768
Nsa(dp36769
S'description'
p36770
S'The contact model to use\n'
p36771
sS'cpp_type'
p36772
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36773
sS'default'
p36774
S'frictionless'
p36775
sS'name'
p36776
S'model'
p36777
sS'required'
p36778
I00
sS'group_name'
p36779
Nsa(dp36780
S'description'
p36781
S'The nodal area\n'
p36782
sS'cpp_type'
p36783
S'std::vector<VariableName>'
p36784
sS'default'
p36785
g3
sS'name'
p36786
S'nodal_area'
p36787
sS'required'
p36788
I01
sS'group_name'
p36789
Nsa(dp36790
S'description'
p36791
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p36792
sS'cpp_type'
p36793
S'double'
p36794
sS'default'
p36795
g3
sS'name'
p36796
S'normal_smoothing_distance'
p36797
sS'required'
p36798
I00
sS'group_name'
p36799
Nsa(dp36800
S'description'
p36801
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p36802
sS'cpp_type'
p36803
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36804
sS'default'
p36805
g3
sS'name'
p36806
S'normal_smoothing_method'
p36807
sS'required'
p36808
I00
sS'group_name'
p36809
Nsa(dp36810
S'description'
p36811
S'Whether to normalize the penalty parameter with the nodal area for penalty contact.\n'
p36812
sS'cpp_type'
p36813
S'bool'
p36814
sS'default'
p36815
S'0'
p36816
sS'name'
p36817
S'normalize_penalty'
p36818
sS'required'
p36819
I00
sS'group_name'
p36820
Nsa(dp36821
S'name'
p36822
S'order'
p36823
sS'cpp_type'
p36824
S'MooseEnum'
p36825
sS'default'
p36826
S'FIRST'
p36827
sS'description'
p36828
S'The finite element order\n'
p36829
sS'required'
p36830
I00
sS'options'
p36831
S'CONSTANT FIRST SECOND THIRD FOURTH'
p36832
sS'group_name'
p36833
Nsa(dp36834
S'description'
p36835
S'The penalty to apply.  This can vary depending on the stiffness of your materials\n'
p36836
sS'cpp_type'
p36837
S'double'
p36838
sS'default'
p36839
S'1e+08'
p36840
sS'name'
p36841
S'penalty'
p36842
sS'required'
p36843
I00
sS'group_name'
p36844
Nsa(dp36845
S'description'
p36846
S'Tangential distance to extend edges of contact surfaces\n'
p36847
sS'cpp_type'
p36848
S'double'
p36849
sS'default'
p36850
g3
sS'name'
p36851
S'tangential_tolerance'
p36852
sS'required'
p36853
I00
sS'group_name'
p36854
Nsa(dp36855
S'description'
p36856
g3
sS'cpp_type'
p36857
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p36858
sS'default'
p36859
S'SlaveConstraint'
p36860
sS'name'
p36861
S'type'
p36862
sS'required'
p36863
I00
sS'group_name'
p36864
Nsa(dp36865
S'description'
p36866
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36867
sS'cpp_type'
p36868
S'bool'
p36869
sS'default'
p36870
S'1'
p36871
sS'name'
p36872
S'use_displaced_mesh'
p36873
sS'required'
p36874
I00
sS'group_name'
p36875
S'Advanced'
p36876
sa(dp36877
S'description'
p36878
S'The name of the variable that this kernel operates on\n'
p36879
sS'cpp_type'
p36880
S'NonlinearVariableName'
p36881
sS'default'
p36882
g3
sS'name'
p36883
S'variable'
p36884
sS'required'
p36885
I01
sS'group_name'
p36886
NsasS'name'
p36887
S'/DiracKernels/SlaveConstraint'
p36888
sasS'parameters'
p36889
NsS'name'
p36890
S'/DiracKernels'
p36891
sa(dp36892
S'description'
p36893
g3
sS'subblocks'
p36894
NsS'parameters'
p36895
(lp36896
(dp36897
S'description'
p36898
S'Treat body as two-dimensional\n'
p36899
sS'cpp_type'
p36900
S'bool'
p36901
sS'default'
p36902
S'0'
p36903
sS'name'
p36904
S'2d'
p36905
sS'required'
p36906
I00
sS'group_name'
p36907
Nsa(dp36908
S'description'
p36909
S'Out of plane axis for models treated as two-dimensional (0=x, 1=y, 2=z)\n'
p36910
sS'cpp_type'
p36911
S'unsigned int'
p36912
sS'default'
p36913
S'2'
p36914
sS'name'
p36915
S'axis_2d'
p36916
sS'required'
p36917
I00
sS'group_name'
p36918
Nsa(dp36919
S'description'
p36920
S'The block ids where InteractionIntegralAuxFields is defined\n'
p36921
sS'cpp_type'
p36922
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36923
sS'default'
p36924
g3
sS'name'
p36925
S'block'
p36926
sS'required'
p36927
I00
sS'group_name'
p36928
Nsa(dp36929
S'description'
p36930
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36931
sS'cpp_type'
p36932
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36933
sS'default'
p36934
g3
sS'name'
p36935
S'boundary'
p36936
sS'required'
p36937
I00
sS'group_name'
p36938
Nsa(dp36939
S'description'
p36940
S'Convert J-integral to stress intensity factor K.\n'
p36941
sS'cpp_type'
p36942
S'bool'
p36943
sS'default'
p36944
S'0'
p36945
sS'name'
p36946
S'convert_J_to_K'
p36947
sS'required'
p36948
I00
sS'group_name'
p36949
Nsa(dp36950
S'name'
p36951
S'crack_direction_method'
p36952
sS'cpp_type'
p36953
S'MooseEnum'
p36954
sS'default'
p36955
g3
sS'description'
p36956
S'Method to determine direction of crack propagation.  Choices are: CrackDirectionVector CrackMouth CurvedCrackFront\n'
p36957
sS'required'
p36958
I01
sS'options'
p36959
S'CrackDirectionVector CrackMouth CurvedCrackFront'
p36960
sS'group_name'
p36961
Nsa(dp36962
S'description'
p36963
S'Direction of crack propagation\n'
p36964
sS'cpp_type'
p36965
S'libMesh::VectorValue<double>'
p36966
sS'default'
p36967
g3
sS'name'
p36968
S'crack_direction_vector'
p36969
sS'required'
p36970
I00
sS'group_name'
p36971
Nsa(dp36972
S'description'
p36973
S'Direction of crack propagation for the node at end 1 of the crack\n'
p36974
sS'cpp_type'
p36975
S'libMesh::VectorValue<double>'
p36976
sS'default'
p36977
g3
sS'name'
p36978
S'crack_direction_vector_end_1'
p36979
sS'required'
p36980
I00
sS'group_name'
p36981
Nsa(dp36982
S'description'
p36983
S'Direction of crack propagation for the node at end 2 of the crack\n'
p36984
sS'cpp_type'
p36985
S'libMesh::VectorValue<double>'
p36986
sS'default'
p36987
g3
sS'name'
p36988
S'crack_direction_vector_end_2'
p36989
sS'required'
p36990
I00
sS'group_name'
p36991
Nsa(dp36992
S'name'
p36993
S'crack_end_direction_method'
p36994
sS'cpp_type'
p36995
S'MooseEnum'
p36996
sS'default'
p36997
S'NoSpecialTreatment'
p36998
sS'description'
p36999
S'Method to determine direction of crack propagation at ends of crack.  Choices are: NoSpecialTreatment CrackDirectionVector\n'
p37000
sS'required'
p37001
I00
sS'options'
p37002
S'NoSpecialTreatment CrackDirectionVector'
p37003
sS'group_name'
p37004
Nsa(dp37005
S'description'
p37006
S'Set of points to define crack front\n'
p37007
sS'cpp_type'
p37008
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p37009
sS'default'
p37010
g3
sS'name'
p37011
S'crack_front_points'
p37012
sS'required'
p37013
I00
sS'group_name'
p37014
Nsa(dp37015
S'description'
p37016
S'Boundaries whose average coordinate defines the crack mouth\n'
p37017
sS'cpp_type'
p37018
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37019
sS'default'
p37020
g3
sS'name'
p37021
S'crack_mouth_boundary'
p37022
sS'required'
p37023
I00
sS'group_name'
p37024
Nsa(dp37025
S'description'
p37026
S'The x displacement\n'
p37027
sS'cpp_type'
p37028
S'VariableName'
p37029
sS'default'
p37030
g3
sS'name'
p37031
S'disp_x'
p37032
sS'required'
p37033
I00
sS'group_name'
p37034
Nsa(dp37035
S'description'
p37036
S'The y displacement\n'
p37037
sS'cpp_type'
p37038
S'VariableName'
p37039
sS'default'
p37040
g3
sS'name'
p37041
S'disp_y'
p37042
sS'required'
p37043
I00
sS'group_name'
p37044
Nsa(dp37045
S'description'
p37046
S'The z displacement\n'
p37047
sS'cpp_type'
p37048
S'VariableName'
p37049
sS'default'
p37050
g3
sS'name'
p37051
S'disp_z'
p37052
sS'required'
p37053
I00
sS'group_name'
p37054
Nsa(dp37055
S'description'
p37056
S'Calculate an equivalent K from KI, KII and KIII, assuming self-similar crack growth.\n'
p37057
sS'cpp_type'
p37058
S'bool'
p37059
sS'default'
p37060
S'0'
p37061
sS'name'
p37062
S'equivalent_k'
p37063
sS'required'
p37064
I00
sS'group_name'
p37065
Nsa(dp37066
S'description'
p37067
S'Specifies the family of FE shape functions to use for q AuxVariables\n'
p37068
sS'cpp_type'
p37069
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37070
sS'default'
p37071
S'LAGRANGE'
p37072
sS'name'
p37073
S'family'
p37074
sS'required'
p37075
I00
sS'group_name'
p37076
Nsa(dp37077
S'name'
p37078
S'integrals'
p37079
sS'cpp_type'
p37080
S'MultiMooseEnum'
p37081
sS'default'
p37082
g3
sS'description'
p37083
S'Domain integrals to calculate.  Choices are: JIntegral InteractionIntegralKI InteractionIntegralKII InteractionIntegralKIII InteractionIntegralT\n'
p37084
sS'required'
p37085
I01
sS'options'
p37086
S'JIntegral InteractionIntegralKI InteractionIntegralKII InteractionIntegralKIII InteractionIntegralT'
p37087
sS'group_name'
p37088
Nsa(dp37089
S'description'
p37090
S'Boundaries intersected by ends of crack\n'
p37091
sS'cpp_type'
p37092
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37093
sS'default'
p37094
g3
sS'name'
p37095
S'intersecting_boundary'
p37096
sS'required'
p37097
I00
sS'group_name'
p37098
Nsa(dp37099
S'description'
p37100
S'The number of rings of nodes to generate\n'
p37101
sS'cpp_type'
p37102
S'unsigned int'
p37103
sS'default'
p37104
g3
sS'name'
p37105
S'last_ring'
p37106
sS'required'
p37107
I00
sS'group_name'
p37108
Nsa(dp37109
S'description'
p37110
S'Specifies the order of the FE shape function to use for q AuxVariables\n'
p37111
sS'cpp_type'
p37112
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37113
sS'default'
p37114
S'FIRST'
p37115
sS'name'
p37116
S'order'
p37117
sS'required'
p37118
I00
sS'group_name'
p37119
Nsa(dp37120
S'description'
p37121
S'Variable values to be reported along the crack front\n'
p37122
sS'cpp_type'
p37123
S'std::vector<VariableName, std::allocator<VariableName> >'
p37124
sS'default'
p37125
g3
sS'name'
p37126
S'output_variable'
p37127
sS'required'
p37128
I00
sS'group_name'
p37129
Nsa(dp37130
S'description'
p37131
S"Poisson's ratio\n"
p37132
sS'cpp_type'
p37133
S'double'
p37134
sS'default'
p37135
g3
sS'name'
p37136
S'poissons_ratio'
p37137
sS'required'
p37138
I00
sS'group_name'
p37139
Nsa(dp37140
S'name'
p37141
S'position_type'
p37142
sS'cpp_type'
p37143
S'MooseEnum'
p37144
sS'default'
p37145
S'Distance'
p37146
sS'description'
p37147
S'The method used to calculate position along crack front.  Options are: Angle Distance\n'
p37148
sS'required'
p37149
I00
sS'options'
p37150
S'Angle Distance'
p37151
sS'group_name'
p37152
Nsa(dp37153
S'description'
p37154
S'Generate rings of nodes for q-function\n'
p37155
sS'cpp_type'
p37156
S'bool'
p37157
sS'default'
p37158
S'0'
p37159
sS'name'
p37160
S'q_function_rings'
p37161
sS'required'
p37162
I00
sS'group_name'
p37163
Nsa(dp37164
S'name'
p37165
S'q_function_type'
p37166
sS'cpp_type'
p37167
S'MooseEnum'
p37168
sS'default'
p37169
S'Geometry'
p37170
sS'description'
p37171
S'The method used to define the integration domain. Options are: Geometry Topology\n'
p37172
sS'required'
p37173
I00
sS'options'
p37174
S'Geometry Topology'
p37175
sS'group_name'
p37176
Nsa(dp37177
S'description'
p37178
S'Inner radius for volume integral domain\n'
p37179
sS'cpp_type'
p37180
S'std::vector<double, std::allocator<double> >'
p37181
sS'default'
p37182
g3
sS'name'
p37183
S'radius_inner'
p37184
sS'required'
p37185
I00
sS'group_name'
p37186
Nsa(dp37187
S'description'
p37188
S'Outer radius for volume integral domain\n'
p37189
sS'cpp_type'
p37190
S'std::vector<double, std::allocator<double> >'
p37191
sS'default'
p37192
g3
sS'name'
p37193
S'radius_outer'
p37194
sS'required'
p37195
I00
sS'group_name'
p37196
Nsa(dp37197
S'description'
p37198
S'The first ring of elements for volume integral domain\n'
p37199
sS'cpp_type'
p37200
S'unsigned int'
p37201
sS'default'
p37202
g3
sS'name'
p37203
S'ring_first'
p37204
sS'required'
p37205
I00
sS'group_name'
p37206
Nsa(dp37207
S'description'
p37208
S'The last ring of elements for volume integral domain\n'
p37209
sS'cpp_type'
p37210
S'unsigned int'
p37211
sS'default'
p37212
g3
sS'name'
p37213
S'ring_last'
p37214
sS'required'
p37215
I00
sS'group_name'
p37216
Nsa(dp37217
S'description'
p37218
S'Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n'
p37219
sS'cpp_type'
p37220
S'unsigned int'
p37221
sS'default'
p37222
g3
sS'name'
p37223
S'symmetry_plane'
p37224
sS'required'
p37225
I00
sS'group_name'
p37226
Nsa(dp37227
S'description'
p37228
S'Calculate T-stress\n'
p37229
sS'cpp_type'
p37230
S'bool'
p37231
sS'default'
p37232
S'0'
p37233
sS'name'
p37234
S't_stress'
p37235
sS'required'
p37236
I00
sS'group_name'
p37237
Nsa(dp37238
S'description'
p37239
S"Young's modulus\n"
p37240
sS'cpp_type'
p37241
S'double'
p37242
sS'default'
p37243
g3
sS'name'
p37244
S'youngs_modulus'
p37245
sS'required'
p37246
I00
sS'group_name'
p37247
NsasS'name'
p37248
S'/DomainIntegral'
p37249
sa(dp37250
S'description'
p37251
g3
sS'subblocks'
p37252
(lp37253
(dp37254
S'description'
p37255
g3
sS'subblocks'
p37256
(lp37257
(dp37258
S'description'
p37259
g3
sS'subblocks'
p37260
NsS'parameters'
p37261
(lp37262
(dp37263
S'description'
p37264
S'If Chebyshev acceleration is turned on\n'
p37265
sS'cpp_type'
p37266
S'bool'
p37267
sS'default'
p37268
S'1'
p37269
sS'name'
p37270
S'Chebyshev_acceleration_on'
p37271
sS'required'
p37272
I00
sS'group_name'
p37273
Nsa(dp37274
S'description'
p37275
S'True to ask the solver to set initial\n'
p37276
sS'cpp_type'
p37277
S'bool'
p37278
sS'default'
p37279
S'1'
p37280
sS'name'
p37281
S'auto_initialization'
p37282
sS'required'
p37283
I00
sS'group_name'
p37284
S'Advanced'
p37285
sa(dp37286
S'description'
p37287
S'To evaluate |Bx| for the eigenvalue\n'
p37288
sS'cpp_type'
p37289
S'PostprocessorName'
p37290
sS'default'
p37291
g3
sS'name'
p37292
S'bx_norm'
p37293
sS'required'
p37294
I01
sS'group_name'
p37295
Nsa(dp37296
S'description'
p37297
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p37298
sS'cpp_type'
p37299
S'bool'
p37300
sS'default'
p37301
S'0'
p37302
sS'name'
p37303
S'compute_initial_residual_before_preset_bcs'
p37304
sS'required'
p37305
I00
sS'group_name'
p37306
S'Solver'
p37307
sa(dp37308
S'description'
p37309
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37310
sS'cpp_type'
p37311
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37312
sS'default'
p37313
g3
sS'name'
p37314
S'control_tags'
p37315
sS'required'
p37316
I00
sS'group_name'
p37317
Nsa(dp37318
S'description'
p37319
S'Eigenvalue convergence tolerance\n'
p37320
sS'cpp_type'
p37321
S'double'
p37322
sS'default'
p37323
S'1e-06'
p37324
sS'name'
p37325
S'eig_check_tol'
p37326
sS'required'
p37327
I00
sS'group_name'
p37328
Nsa(dp37329
S'description'
p37330
S'Initial guess of the eigenvalue\n'
p37331
sS'cpp_type'
p37332
S'double'
p37333
sS'default'
p37334
S'1'
p37335
sS'name'
p37336
S'k0'
p37337
sS'required'
p37338
I00
sS'group_name'
p37339
Nsa(dp37340
S'description'
p37341
S'Linear Absolute Step Tolerance\n'
p37342
sS'cpp_type'
p37343
S'double'
p37344
sS'default'
p37345
S'-1'
p37346
sS'name'
p37347
S'l_abs_step_tol'
p37348
sS'required'
p37349
I00
sS'group_name'
p37350
S'Solver'
p37351
sa(dp37352
S'description'
p37353
S'Max Linear Iterations\n'
p37354
sS'cpp_type'
p37355
S'unsigned int'
p37356
sS'default'
p37357
S'10000'
p37358
sS'name'
p37359
S'l_max_its'
p37360
sS'required'
p37361
I00
sS'group_name'
p37362
S'Solver'
p37363
sa(dp37364
S'description'
p37365
S'Linear Tolerance\n'
p37366
sS'cpp_type'
p37367
S'double'
p37368
sS'default'
p37369
S'1e-05'
p37370
sS'name'
p37371
S'l_tol'
p37372
sS'required'
p37373
I00
sS'group_name'
p37374
S'Solver'
p37375
sa(dp37376
S'name'
p37377
S'line_search'
p37378
sS'cpp_type'
p37379
S'MooseEnum'
p37380
sS'default'
p37381
S'default'
p37382
sS'description'
p37383
S'Specifies the line search type (Note: none = basic)\n'
p37384
sS'required'
p37385
I00
sS'options'
p37386
S'default shell none basic l2 bt cp'
p37387
sS'group_name'
p37388
Nsa(dp37389
S'description'
p37390
S'The maximum number of power iterations\n'
p37391
sS'cpp_type'
p37392
S'unsigned int'
p37393
sS'default'
p37394
S'300'
p37395
sS'name'
p37396
S'max_power_iterations'
p37397
sS'required'
p37398
I00
sS'group_name'
p37399
Nsa(dp37400
S'description'
p37401
S'Minimum number of power iterations\n'
p37402
sS'cpp_type'
p37403
S'unsigned int'
p37404
sS'default'
p37405
S'1'
p37406
sS'name'
p37407
S'min_power_iterations'
p37408
sS'required'
p37409
I00
sS'group_name'
p37410
Nsa(dp37411
S'description'
p37412
S'Nonlinear Absolute step Tolerance\n'
p37413
sS'cpp_type'
p37414
S'double'
p37415
sS'default'
p37416
S'1e-50'
p37417
sS'name'
p37418
S'nl_abs_step_tol'
p37419
sS'required'
p37420
I00
sS'group_name'
p37421
S'Solver'
p37422
sa(dp37423
S'description'
p37424
S'Nonlinear Absolute Tolerance\n'
p37425
sS'cpp_type'
p37426
S'double'
p37427
sS'default'
p37428
S'1e-50'
p37429
sS'name'
p37430
S'nl_abs_tol'
p37431
sS'required'
p37432
I00
sS'group_name'
p37433
S'Solver'
p37434
sa(dp37435
S'description'
p37436
S'Max Nonlinear solver function evaluations\n'
p37437
sS'cpp_type'
p37438
S'unsigned int'
p37439
sS'default'
p37440
S'10000'
p37441
sS'name'
p37442
S'nl_max_funcs'
p37443
sS'required'
p37444
I00
sS'group_name'
p37445
S'Solver'
p37446
sa(dp37447
S'description'
p37448
S'Max Nonlinear Iterations\n'
p37449
sS'cpp_type'
p37450
S'unsigned int'
p37451
sS'default'
p37452
S'50'
p37453
sS'name'
p37454
S'nl_max_its'
p37455
sS'required'
p37456
I00
sS'group_name'
p37457
S'Solver'
p37458
sa(dp37459
S'description'
p37460
S'Nonlinear Relative step Tolerance\n'
p37461
sS'cpp_type'
p37462
S'double'
p37463
sS'default'
p37464
S'1e-50'
p37465
sS'name'
p37466
S'nl_rel_step_tol'
p37467
sS'required'
p37468
I00
sS'group_name'
p37469
S'Solver'
p37470
sa(dp37471
S'description'
p37472
S'Nonlinear Relative Tolerance\n'
p37473
sS'cpp_type'
p37474
S'double'
p37475
sS'default'
p37476
S'1e-08'
p37477
sS'name'
p37478
S'nl_rel_tol'
p37479
sS'required'
p37480
I00
sS'group_name'
p37481
S'Solver'
p37482
sa(dp37483
S'description'
p37484
S'Specifies whether or not to reinitialize FEs\n'
p37485
sS'cpp_type'
p37486
S'bool'
p37487
sS'default'
p37488
S'0'
p37489
sS'name'
p37490
S'no_fe_reinit'
p37491
sS'required'
p37492
I00
sS'group_name'
p37493
S'Advanced'
p37494
sa(dp37495
S'description'
p37496
S'Normalize x to make |x| equal to this factor\n'
p37497
sS'cpp_type'
p37498
S'double'
p37499
sS'default'
p37500
g3
sS'name'
p37501
S'normal_factor'
p37502
sS'required'
p37503
I00
sS'group_name'
p37504
S'Normalization'
p37505
sa(dp37506
S'description'
p37507
S'To evaluate |x| for normalization\n'
p37508
sS'cpp_type'
p37509
S'PostprocessorName'
p37510
sS'default'
p37511
g3
sS'name'
p37512
S'normalization'
p37513
sS'required'
p37514
I00
sS'group_name'
p37515
S'Normalization'
p37516
sa(dp37517
S'description'
p37518
S'True to output a step before normalization\n'
p37519
sS'cpp_type'
p37520
S'bool'
p37521
sS'default'
p37522
S'1'
p37523
sS'name'
p37524
S'output_before_normalization'
p37525
sS'required'
p37526
I00
sS'group_name'
p37527
S'Normalization'
p37528
sa(dp37529
S'description'
p37530
S'True to disable all the intemediate exodus outputs\n'
p37531
sS'cpp_type'
p37532
S'bool'
p37533
sS'default'
p37534
S'0'
p37535
sS'name'
p37536
S'output_on_final'
p37537
sS'required'
p37538
I00
sS'group_name'
p37539
Nsa(dp37540
S'name'
p37541
S'petsc_options'
p37542
sS'cpp_type'
p37543
S'MultiMooseEnum'
p37544
sS'default'
p37545
g3
sS'description'
p37546
S'Singleton PETSc options\n'
p37547
sS'required'
p37548
I00
sS'options'
p37549
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p37550
sS'group_name'
p37551
Nsa(dp37552
S'name'
p37553
S'petsc_options_iname'
p37554
sS'cpp_type'
p37555
S'MultiMooseEnum'
p37556
sS'default'
p37557
g3
sS'description'
p37558
S'Names of PETSc name/value pairs\n'
p37559
sS'required'
p37560
I00
sS'options'
p37561
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p37562
sS'group_name'
p37563
Nsa(dp37564
S'description'
p37565
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p37566
sS'cpp_type'
p37567
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37568
sS'default'
p37569
g3
sS'name'
p37570
S'petsc_options_value'
p37571
sS'required'
p37572
I00
sS'group_name'
p37573
Nsa(dp37574
S'description'
p37575
S'Reduce residual norm per power iteration by this factor\n'
p37576
sS'cpp_type'
p37577
S'double'
p37578
sS'default'
p37579
S'0.01'
p37580
sS'name'
p37581
S'pfactor'
p37582
sS'required'
p37583
I00
sS'group_name'
p37584
Nsa(dp37585
S'description'
p37586
S'File base name used for restart\n'
p37587
sS'cpp_type'
p37588
S'FileNameNoExtension'
p37589
sS'default'
p37590
g3
sS'name'
p37591
S'restart_file_base'
p37592
sS'required'
p37593
I00
sS'group_name'
p37594
S'Restart'
p37595
sa(dp37596
S'description'
p37597
S'Convergence tolerance on |x-x_previous| when provided\n'
p37598
sS'cpp_type'
p37599
S'double'
p37600
sS'default'
p37601
S'1.79769e+308'
p37602
sS'name'
p37603
S'sol_check_tol'
p37604
sS'required'
p37605
I00
sS'group_name'
p37606
Nsa(dp37607
S'name'
p37608
S'solve_type'
p37609
sS'cpp_type'
p37610
S'MooseEnum'
p37611
sS'default'
p37612
g3
sS'description'
p37613
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p37614
sS'required'
p37615
I00
sS'options'
p37616
S'PJFNK JFNK NEWTON FD LINEAR'
p37617
sS'group_name'
p37618
Nsa(dp37619
S'description'
p37620
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p37621
sS'cpp_type'
p37622
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37623
sS'default'
p37624
g3
sS'name'
p37625
S'splitting'
p37626
sS'required'
p37627
I00
sS'group_name'
p37628
Nsa(dp37629
S'description'
p37630
S'System time\n'
p37631
sS'cpp_type'
p37632
S'double'
p37633
sS'default'
p37634
S'0'
p37635
sS'name'
p37636
S'time'
p37637
sS'required'
p37638
I00
sS'group_name'
p37639
S'Advanced'
p37640
sa(dp37641
S'description'
p37642
g3
sS'cpp_type'
p37643
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p37644
sS'default'
p37645
S'InversePowerMethod'
p37646
sS'name'
p37647
S'type'
p37648
sS'required'
p37649
I00
sS'group_name'
p37650
Nsa(dp37651
S'description'
p37652
S'To evaluate |x-x_previous| for power iterations\n'
p37653
sS'cpp_type'
p37654
S'PostprocessorName'
p37655
sS'default'
p37656
g3
sS'name'
p37657
S'xdiff'
p37658
sS'required'
p37659
I00
sS'group_name'
p37660
NsasS'name'
p37661
S'/Executioner/<type>/InversePowerMethod'
p37662
sa(dp37663
S'description'
p37664
g3
sS'subblocks'
p37665
NsS'parameters'
p37666
(lp37667
(dp37668
S'description'
p37669
S'True to ask the solver to set initial\n'
p37670
sS'cpp_type'
p37671
S'bool'
p37672
sS'default'
p37673
S'1'
p37674
sS'name'
p37675
S'auto_initialization'
p37676
sS'required'
p37677
I00
sS'group_name'
p37678
S'Advanced'
p37679
sa(dp37680
S'description'
p37681
S'To evaluate |Bx| for the eigenvalue\n'
p37682
sS'cpp_type'
p37683
S'PostprocessorName'
p37684
sS'default'
p37685
g3
sS'name'
p37686
S'bx_norm'
p37687
sS'required'
p37688
I01
sS'group_name'
p37689
Nsa(dp37690
S'description'
p37691
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p37692
sS'cpp_type'
p37693
S'bool'
p37694
sS'default'
p37695
S'0'
p37696
sS'name'
p37697
S'compute_initial_residual_before_preset_bcs'
p37698
sS'required'
p37699
I00
sS'group_name'
p37700
S'Solver'
p37701
sa(dp37702
S'description'
p37703
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37704
sS'cpp_type'
p37705
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37706
sS'default'
p37707
g3
sS'name'
p37708
S'control_tags'
p37709
sS'required'
p37710
I00
sS'group_name'
p37711
Nsa(dp37712
S'description'
p37713
S'The number of free power iterations\n'
p37714
sS'cpp_type'
p37715
S'unsigned int'
p37716
sS'default'
p37717
S'4'
p37718
sS'name'
p37719
S'free_power_iterations'
p37720
sS'required'
p37721
I00
sS'group_name'
p37722
Nsa(dp37723
S'description'
p37724
S'Initial guess of the eigenvalue\n'
p37725
sS'cpp_type'
p37726
S'double'
p37727
sS'default'
p37728
S'1'
p37729
sS'name'
p37730
S'k0'
p37731
sS'required'
p37732
I00
sS'group_name'
p37733
Nsa(dp37734
S'description'
p37735
S'Linear Absolute Step Tolerance\n'
p37736
sS'cpp_type'
p37737
S'double'
p37738
sS'default'
p37739
S'-1'
p37740
sS'name'
p37741
S'l_abs_step_tol'
p37742
sS'required'
p37743
I00
sS'group_name'
p37744
S'Solver'
p37745
sa(dp37746
S'description'
p37747
S'Max Linear Iterations\n'
p37748
sS'cpp_type'
p37749
S'unsigned int'
p37750
sS'default'
p37751
S'10000'
p37752
sS'name'
p37753
S'l_max_its'
p37754
sS'required'
p37755
I00
sS'group_name'
p37756
S'Solver'
p37757
sa(dp37758
S'description'
p37759
S'Linear Tolerance\n'
p37760
sS'cpp_type'
p37761
S'double'
p37762
sS'default'
p37763
S'1e-05'
p37764
sS'name'
p37765
S'l_tol'
p37766
sS'required'
p37767
I00
sS'group_name'
p37768
S'Solver'
p37769
sa(dp37770
S'name'
p37771
S'line_search'
p37772
sS'cpp_type'
p37773
S'MooseEnum'
p37774
sS'default'
p37775
S'default'
p37776
sS'description'
p37777
S'Specifies the line search type (Note: none = basic)\n'
p37778
sS'required'
p37779
I00
sS'options'
p37780
S'default shell none basic l2 bt cp'
p37781
sS'group_name'
p37782
Nsa(dp37783
S'description'
p37784
S'Nonlinear Absolute step Tolerance\n'
p37785
sS'cpp_type'
p37786
S'double'
p37787
sS'default'
p37788
S'1e-50'
p37789
sS'name'
p37790
S'nl_abs_step_tol'
p37791
sS'required'
p37792
I00
sS'group_name'
p37793
S'Solver'
p37794
sa(dp37795
S'description'
p37796
S'Nonlinear Absolute Tolerance\n'
p37797
sS'cpp_type'
p37798
S'double'
p37799
sS'default'
p37800
S'1e-50'
p37801
sS'name'
p37802
S'nl_abs_tol'
p37803
sS'required'
p37804
I00
sS'group_name'
p37805
S'Solver'
p37806
sa(dp37807
S'description'
p37808
S'Max Nonlinear solver function evaluations\n'
p37809
sS'cpp_type'
p37810
S'unsigned int'
p37811
sS'default'
p37812
S'10000'
p37813
sS'name'
p37814
S'nl_max_funcs'
p37815
sS'required'
p37816
I00
sS'group_name'
p37817
S'Solver'
p37818
sa(dp37819
S'description'
p37820
S'Max Nonlinear Iterations\n'
p37821
sS'cpp_type'
p37822
S'unsigned int'
p37823
sS'default'
p37824
S'50'
p37825
sS'name'
p37826
S'nl_max_its'
p37827
sS'required'
p37828
I00
sS'group_name'
p37829
S'Solver'
p37830
sa(dp37831
S'description'
p37832
S'Nonlinear Relative step Tolerance\n'
p37833
sS'cpp_type'
p37834
S'double'
p37835
sS'default'
p37836
S'1e-50'
p37837
sS'name'
p37838
S'nl_rel_step_tol'
p37839
sS'required'
p37840
I00
sS'group_name'
p37841
S'Solver'
p37842
sa(dp37843
S'description'
p37844
S'Nonlinear Relative Tolerance\n'
p37845
sS'cpp_type'
p37846
S'double'
p37847
sS'default'
p37848
S'1e-08'
p37849
sS'name'
p37850
S'nl_rel_tol'
p37851
sS'required'
p37852
I00
sS'group_name'
p37853
S'Solver'
p37854
sa(dp37855
S'description'
p37856
S'Specifies whether or not to reinitialize FEs\n'
p37857
sS'cpp_type'
p37858
S'bool'
p37859
sS'default'
p37860
S'0'
p37861
sS'name'
p37862
S'no_fe_reinit'
p37863
sS'required'
p37864
I00
sS'group_name'
p37865
S'Advanced'
p37866
sa(dp37867
S'description'
p37868
S'Normalize x to make |x| equal to this factor\n'
p37869
sS'cpp_type'
p37870
S'double'
p37871
sS'default'
p37872
g3
sS'name'
p37873
S'normal_factor'
p37874
sS'required'
p37875
I00
sS'group_name'
p37876
S'Normalization'
p37877
sa(dp37878
S'description'
p37879
S'To evaluate |x| for normalization\n'
p37880
sS'cpp_type'
p37881
S'PostprocessorName'
p37882
sS'default'
p37883
g3
sS'name'
p37884
S'normalization'
p37885
sS'required'
p37886
I00
sS'group_name'
p37887
S'Normalization'
p37888
sa(dp37889
S'description'
p37890
S'True to output solution after free power iterations\n'
p37891
sS'cpp_type'
p37892
S'bool'
p37893
sS'default'
p37894
S'1'
p37895
sS'name'
p37896
S'output_after_power_iterations'
p37897
sS'required'
p37898
I00
sS'group_name'
p37899
Nsa(dp37900
S'description'
p37901
S'True to output a step before normalization\n'
p37902
sS'cpp_type'
p37903
S'bool'
p37904
sS'default'
p37905
S'1'
p37906
sS'name'
p37907
S'output_before_normalization'
p37908
sS'required'
p37909
I00
sS'group_name'
p37910
S'Normalization'
p37911
sa(dp37912
S'description'
p37913
S'True to disable all the intemediate exodus outputs\n'
p37914
sS'cpp_type'
p37915
S'bool'
p37916
sS'default'
p37917
S'0'
p37918
sS'name'
p37919
S'output_on_final'
p37920
sS'required'
p37921
I00
sS'group_name'
p37922
Nsa(dp37923
S'name'
p37924
S'petsc_options'
p37925
sS'cpp_type'
p37926
S'MultiMooseEnum'
p37927
sS'default'
p37928
g3
sS'description'
p37929
S'Singleton PETSc options\n'
p37930
sS'required'
p37931
I00
sS'options'
p37932
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p37933
sS'group_name'
p37934
Nsa(dp37935
S'name'
p37936
S'petsc_options_iname'
p37937
sS'cpp_type'
p37938
S'MultiMooseEnum'
p37939
sS'default'
p37940
g3
sS'description'
p37941
S'Names of PETSc name/value pairs\n'
p37942
sS'required'
p37943
I00
sS'options'
p37944
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p37945
sS'group_name'
p37946
Nsa(dp37947
S'description'
p37948
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p37949
sS'cpp_type'
p37950
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p37951
sS'default'
p37952
g3
sS'name'
p37953
S'petsc_options_value'
p37954
sS'required'
p37955
I00
sS'group_name'
p37956
Nsa(dp37957
S'description'
p37958
S'The factor of residual to be reduced per free power iteration or per nonlinear step\n'
p37959
sS'cpp_type'
p37960
S'double'
p37961
sS'default'
p37962
S'0.01'
p37963
sS'name'
p37964
S'pfactor'
p37965
sS'required'
p37966
I00
sS'group_name'
p37967
Nsa(dp37968
S'description'
p37969
S'File base name used for restart\n'
p37970
sS'cpp_type'
p37971
S'FileNameNoExtension'
p37972
sS'default'
p37973
g3
sS'name'
p37974
S'restart_file_base'
p37975
sS'required'
p37976
I00
sS'group_name'
p37977
S'Restart'
p37978
sa(dp37979
S'name'
p37980
S'solve_type'
p37981
sS'cpp_type'
p37982
S'MooseEnum'
p37983
sS'default'
p37984
g3
sS'description'
p37985
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p37986
sS'required'
p37987
I00
sS'options'
p37988
S'PJFNK JFNK NEWTON FD LINEAR'
p37989
sS'group_name'
p37990
Nsa(dp37991
S'description'
p37992
S'Absolute tolernance on residual norm\n'
p37993
sS'cpp_type'
p37994
S'double'
p37995
sS'default'
p37996
S'1e-06'
p37997
sS'name'
p37998
S'source_abs_tol'
p37999
sS'required'
p38000
I00
sS'group_name'
p38001
Nsa(dp38002
S'description'
p38003
S'Relative tolernance on residual norm after free power iterations\n'
p38004
sS'cpp_type'
p38005
S'double'
p38006
sS'default'
p38007
S'1e-50'
p38008
sS'name'
p38009
S'source_rel_tol'
p38010
sS'required'
p38011
I00
sS'group_name'
p38012
Nsa(dp38013
S'description'
p38014
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p38015
sS'cpp_type'
p38016
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38017
sS'default'
p38018
g3
sS'name'
p38019
S'splitting'
p38020
sS'required'
p38021
I00
sS'group_name'
p38022
Nsa(dp38023
S'description'
p38024
S'System time\n'
p38025
sS'cpp_type'
p38026
S'double'
p38027
sS'default'
p38028
S'0'
p38029
sS'name'
p38030
S'time'
p38031
sS'required'
p38032
I00
sS'group_name'
p38033
S'Advanced'
p38034
sa(dp38035
S'description'
p38036
g3
sS'cpp_type'
p38037
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38038
sS'default'
p38039
S'NonlinearEigen'
p38040
sS'name'
p38041
S'type'
p38042
sS'required'
p38043
I00
sS'group_name'
p38044
NsasS'name'
p38045
S'/Executioner/<type>/NonlinearEigen'
p38046
sa(dp38047
S'description'
p38048
g3
sS'subblocks'
p38049
NsS'parameters'
p38050
(lp38051
(dp38052
S'description'
p38053
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p38054
sS'cpp_type'
p38055
S'bool'
p38056
sS'default'
p38057
S'0'
p38058
sS'name'
p38059
S'compute_initial_residual_before_preset_bcs'
p38060
sS'required'
p38061
I00
sS'group_name'
p38062
S'Solver'
p38063
sa(dp38064
S'description'
p38065
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38066
sS'cpp_type'
p38067
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38068
sS'default'
p38069
g3
sS'name'
p38070
S'control_tags'
p38071
sS'required'
p38072
I00
sS'group_name'
p38073
Nsa(dp38074
S'description'
p38075
S'Linear Absolute Step Tolerance\n'
p38076
sS'cpp_type'
p38077
S'double'
p38078
sS'default'
p38079
S'-1'
p38080
sS'name'
p38081
S'l_abs_step_tol'
p38082
sS'required'
p38083
I00
sS'group_name'
p38084
S'Solver'
p38085
sa(dp38086
S'description'
p38087
S'Max Linear Iterations\n'
p38088
sS'cpp_type'
p38089
S'unsigned int'
p38090
sS'default'
p38091
S'10000'
p38092
sS'name'
p38093
S'l_max_its'
p38094
sS'required'
p38095
I00
sS'group_name'
p38096
S'Solver'
p38097
sa(dp38098
S'description'
p38099
S'Linear Tolerance\n'
p38100
sS'cpp_type'
p38101
S'double'
p38102
sS'default'
p38103
S'1e-05'
p38104
sS'name'
p38105
S'l_tol'
p38106
sS'required'
p38107
I00
sS'group_name'
p38108
S'Solver'
p38109
sa(dp38110
S'name'
p38111
S'line_search'
p38112
sS'cpp_type'
p38113
S'MooseEnum'
p38114
sS'default'
p38115
S'default'
p38116
sS'description'
p38117
S'Specifies the line search type (Note: none = basic)\n'
p38118
sS'required'
p38119
I00
sS'options'
p38120
S'default shell none basic l2 bt cp'
p38121
sS'group_name'
p38122
Nsa(dp38123
S'description'
p38124
S'Nonlinear Absolute step Tolerance\n'
p38125
sS'cpp_type'
p38126
S'double'
p38127
sS'default'
p38128
S'1e-50'
p38129
sS'name'
p38130
S'nl_abs_step_tol'
p38131
sS'required'
p38132
I00
sS'group_name'
p38133
S'Solver'
p38134
sa(dp38135
S'description'
p38136
S'Nonlinear Absolute Tolerance\n'
p38137
sS'cpp_type'
p38138
S'double'
p38139
sS'default'
p38140
S'1e-50'
p38141
sS'name'
p38142
S'nl_abs_tol'
p38143
sS'required'
p38144
I00
sS'group_name'
p38145
S'Solver'
p38146
sa(dp38147
S'description'
p38148
S'Max Nonlinear solver function evaluations\n'
p38149
sS'cpp_type'
p38150
S'unsigned int'
p38151
sS'default'
p38152
S'10000'
p38153
sS'name'
p38154
S'nl_max_funcs'
p38155
sS'required'
p38156
I00
sS'group_name'
p38157
S'Solver'
p38158
sa(dp38159
S'description'
p38160
S'Max Nonlinear Iterations\n'
p38161
sS'cpp_type'
p38162
S'unsigned int'
p38163
sS'default'
p38164
S'50'
p38165
sS'name'
p38166
S'nl_max_its'
p38167
sS'required'
p38168
I00
sS'group_name'
p38169
S'Solver'
p38170
sa(dp38171
S'description'
p38172
S'Nonlinear Relative step Tolerance\n'
p38173
sS'cpp_type'
p38174
S'double'
p38175
sS'default'
p38176
S'1e-50'
p38177
sS'name'
p38178
S'nl_rel_step_tol'
p38179
sS'required'
p38180
I00
sS'group_name'
p38181
S'Solver'
p38182
sa(dp38183
S'description'
p38184
S'Nonlinear Relative Tolerance\n'
p38185
sS'cpp_type'
p38186
S'double'
p38187
sS'default'
p38188
S'1e-08'
p38189
sS'name'
p38190
S'nl_rel_tol'
p38191
sS'required'
p38192
I00
sS'group_name'
p38193
S'Solver'
p38194
sa(dp38195
S'description'
p38196
S'Specifies whether or not to reinitialize FEs\n'
p38197
sS'cpp_type'
p38198
S'bool'
p38199
sS'default'
p38200
S'0'
p38201
sS'name'
p38202
S'no_fe_reinit'
p38203
sS'required'
p38204
I00
sS'group_name'
p38205
S'Advanced'
p38206
sa(dp38207
S'name'
p38208
S'petsc_options'
p38209
sS'cpp_type'
p38210
S'MultiMooseEnum'
p38211
sS'default'
p38212
g3
sS'description'
p38213
S'Singleton PETSc options\n'
p38214
sS'required'
p38215
I00
sS'options'
p38216
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p38217
sS'group_name'
p38218
Nsa(dp38219
S'name'
p38220
S'petsc_options_iname'
p38221
sS'cpp_type'
p38222
S'MultiMooseEnum'
p38223
sS'default'
p38224
g3
sS'description'
p38225
S'Names of PETSc name/value pairs\n'
p38226
sS'required'
p38227
I00
sS'options'
p38228
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p38229
sS'group_name'
p38230
Nsa(dp38231
S'description'
p38232
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p38233
sS'cpp_type'
p38234
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38235
sS'default'
p38236
g3
sS'name'
p38237
S'petsc_options_value'
p38238
sS'required'
p38239
I00
sS'group_name'
p38240
Nsa(dp38241
S'description'
p38242
S'File base name used for restart\n'
p38243
sS'cpp_type'
p38244
S'FileNameNoExtension'
p38245
sS'default'
p38246
g3
sS'name'
p38247
S'restart_file_base'
p38248
sS'required'
p38249
I00
sS'group_name'
p38250
S'Restart'
p38251
sa(dp38252
S'name'
p38253
S'solve_type'
p38254
sS'cpp_type'
p38255
S'MooseEnum'
p38256
sS'default'
p38257
g3
sS'description'
p38258
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p38259
sS'required'
p38260
I00
sS'options'
p38261
S'PJFNK JFNK NEWTON FD LINEAR'
p38262
sS'group_name'
p38263
Nsa(dp38264
S'description'
p38265
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p38266
sS'cpp_type'
p38267
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38268
sS'default'
p38269
g3
sS'name'
p38270
S'splitting'
p38271
sS'required'
p38272
I00
sS'group_name'
p38273
Nsa(dp38274
S'description'
p38275
g3
sS'cpp_type'
p38276
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38277
sS'default'
p38278
S'Steady'
p38279
sS'name'
p38280
S'type'
p38281
sS'required'
p38282
I00
sS'group_name'
p38283
NsasS'name'
p38284
S'/Executioner/<type>/Steady'
p38285
sa(dp38286
S'description'
p38287
g3
sS'subblocks'
p38288
NsS'parameters'
p38289
(lp38290
(dp38291
S'description'
p38292
S'abort if solve not converged rather than cut timestep\n'
p38293
sS'cpp_type'
p38294
S'bool'
p38295
sS'default'
p38296
S'0'
p38297
sS'name'
p38298
S'abort_on_solve_fail'
p38299
sS'required'
p38300
I00
sS'group_name'
p38301
S'Advanced'
p38302
sa(dp38303
S'description'
p38304
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p38305
sS'cpp_type'
p38306
S'bool'
p38307
sS'default'
p38308
S'0'
p38309
sS'name'
p38310
S'compute_initial_residual_before_preset_bcs'
p38311
sS'required'
p38312
I00
sS'group_name'
p38313
S'Solver'
p38314
sa(dp38315
S'description'
p38316
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38317
sS'cpp_type'
p38318
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38319
sS'default'
p38320
g3
sS'name'
p38321
S'control_tags'
p38322
sS'required'
p38323
I00
sS'group_name'
p38324
Nsa(dp38325
S'description'
p38326
S'The timestep size between solves\n'
p38327
sS'cpp_type'
p38328
S'double'
p38329
sS'default'
p38330
S'1'
p38331
sS'name'
p38332
S'dt'
p38333
sS'required'
p38334
I00
sS'group_name'
p38335
Nsa(dp38336
S'description'
p38337
S'The maximum timestep size in an adaptive run\n'
p38338
sS'cpp_type'
p38339
S'double'
p38340
sS'default'
p38341
S'1e+30'
p38342
sS'name'
p38343
S'dtmax'
p38344
sS'required'
p38345
I00
sS'group_name'
p38346
S'Advanced'
p38347
sa(dp38348
S'description'
p38349
S'The minimum timestep size in an adaptive run\n'
p38350
sS'cpp_type'
p38351
S'double'
p38352
sS'default'
p38353
S'2e-14'
p38354
sS'name'
p38355
S'dtmin'
p38356
sS'required'
p38357
I00
sS'group_name'
p38358
S'Advanced'
p38359
sa(dp38360
S'description'
p38361
S'The end time of the simulation\n'
p38362
sS'cpp_type'
p38363
S'double'
p38364
sS'default'
p38365
S'1e+30'
p38366
sS'name'
p38367
S'end_time'
p38368
sS'required'
p38369
I00
sS'group_name'
p38370
Nsa(dp38371
S'description'
p38372
S'Linear Absolute Step Tolerance\n'
p38373
sS'cpp_type'
p38374
S'double'
p38375
sS'default'
p38376
S'-1'
p38377
sS'name'
p38378
S'l_abs_step_tol'
p38379
sS'required'
p38380
I00
sS'group_name'
p38381
S'Solver'
p38382
sa(dp38383
S'description'
p38384
S'Max Linear Iterations\n'
p38385
sS'cpp_type'
p38386
S'unsigned int'
p38387
sS'default'
p38388
S'10000'
p38389
sS'name'
p38390
S'l_max_its'
p38391
sS'required'
p38392
I00
sS'group_name'
p38393
S'Solver'
p38394
sa(dp38395
S'description'
p38396
S'Linear Tolerance\n'
p38397
sS'cpp_type'
p38398
S'double'
p38399
sS'default'
p38400
S'1e-05'
p38401
sS'name'
p38402
S'l_tol'
p38403
sS'required'
p38404
I00
sS'group_name'
p38405
S'Solver'
p38406
sa(dp38407
S'name'
p38408
S'line_search'
p38409
sS'cpp_type'
p38410
S'MooseEnum'
p38411
sS'default'
p38412
S'default'
p38413
sS'description'
p38414
S'Specifies the line search type (Note: none = basic)\n'
p38415
sS'required'
p38416
I00
sS'options'
p38417
S'default shell none basic l2 bt cp'
p38418
sS'group_name'
p38419
Nsa(dp38420
S'description'
p38421
S'The number of timesteps during startup\n'
p38422
sS'cpp_type'
p38423
S'int'
p38424
sS'default'
p38425
S'0'
p38426
sS'name'
p38427
S'n_startup_steps'
p38428
sS'required'
p38429
I00
sS'group_name'
p38430
S'Advanced'
p38431
sa(dp38432
S'description'
p38433
S'Nonlinear Absolute step Tolerance\n'
p38434
sS'cpp_type'
p38435
S'double'
p38436
sS'default'
p38437
S'1e-50'
p38438
sS'name'
p38439
S'nl_abs_step_tol'
p38440
sS'required'
p38441
I00
sS'group_name'
p38442
S'Solver'
p38443
sa(dp38444
S'description'
p38445
S'Nonlinear Absolute Tolerance\n'
p38446
sS'cpp_type'
p38447
S'double'
p38448
sS'default'
p38449
S'1e-50'
p38450
sS'name'
p38451
S'nl_abs_tol'
p38452
sS'required'
p38453
I00
sS'group_name'
p38454
S'Solver'
p38455
sa(dp38456
S'description'
p38457
S'Max Nonlinear solver function evaluations\n'
p38458
sS'cpp_type'
p38459
S'unsigned int'
p38460
sS'default'
p38461
S'10000'
p38462
sS'name'
p38463
S'nl_max_funcs'
p38464
sS'required'
p38465
I00
sS'group_name'
p38466
S'Solver'
p38467
sa(dp38468
S'description'
p38469
S'Max Nonlinear Iterations\n'
p38470
sS'cpp_type'
p38471
S'unsigned int'
p38472
sS'default'
p38473
S'50'
p38474
sS'name'
p38475
S'nl_max_its'
p38476
sS'required'
p38477
I00
sS'group_name'
p38478
S'Solver'
p38479
sa(dp38480
S'description'
p38481
S'Nonlinear Relative step Tolerance\n'
p38482
sS'cpp_type'
p38483
S'double'
p38484
sS'default'
p38485
S'1e-50'
p38486
sS'name'
p38487
S'nl_rel_step_tol'
p38488
sS'required'
p38489
I00
sS'group_name'
p38490
S'Solver'
p38491
sa(dp38492
S'description'
p38493
S'Nonlinear Relative Tolerance\n'
p38494
sS'cpp_type'
p38495
S'double'
p38496
sS'default'
p38497
S'1e-08'
p38498
sS'name'
p38499
S'nl_rel_tol'
p38500
sS'required'
p38501
I00
sS'group_name'
p38502
S'Solver'
p38503
sa(dp38504
S'description'
p38505
S'Specifies whether or not to reinitialize FEs\n'
p38506
sS'cpp_type'
p38507
S'bool'
p38508
sS'default'
p38509
S'0'
p38510
sS'name'
p38511
S'no_fe_reinit'
p38512
sS'required'
p38513
I00
sS'group_name'
p38514
S'Advanced'
p38515
sa(dp38516
S'description'
p38517
S'The number of timesteps in a transient run\n'
p38518
sS'cpp_type'
p38519
S'unsigned int'
p38520
sS'default'
p38521
S'4294967295'
p38522
sS'name'
p38523
S'num_steps'
p38524
sS'required'
p38525
I00
sS'group_name'
p38526
Nsa(dp38527
S'name'
p38528
S'petsc_options'
p38529
sS'cpp_type'
p38530
S'MultiMooseEnum'
p38531
sS'default'
p38532
g3
sS'description'
p38533
S'Singleton PETSc options\n'
p38534
sS'required'
p38535
I00
sS'options'
p38536
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p38537
sS'group_name'
p38538
Nsa(dp38539
S'name'
p38540
S'petsc_options_iname'
p38541
sS'cpp_type'
p38542
S'MultiMooseEnum'
p38543
sS'default'
p38544
g3
sS'description'
p38545
S'Names of PETSc name/value pairs\n'
p38546
sS'required'
p38547
I00
sS'options'
p38548
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p38549
sS'group_name'
p38550
Nsa(dp38551
S'description'
p38552
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p38553
sS'cpp_type'
p38554
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38555
sS'default'
p38556
g3
sS'name'
p38557
S'petsc_options_value'
p38558
sS'required'
p38559
I00
sS'group_name'
p38560
Nsa(dp38561
S'description'
p38562
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p38563
sS'cpp_type'
p38564
S'double'
p38565
sS'default'
p38566
S'1e-50'
p38567
sS'name'
p38568
S'picard_abs_tol'
p38569
sS'required'
p38570
I00
sS'group_name'
p38571
S'Picard'
p38572
sa(dp38573
S'description'
p38574
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n'
p38575
sS'cpp_type'
p38576
S'unsigned int'
p38577
sS'default'
p38578
S'1'
p38579
sS'name'
p38580
S'picard_max_its'
p38581
sS'required'
p38582
I00
sS'group_name'
p38583
S'Picard'
p38584
sa(dp38585
S'description'
p38586
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p38587
sS'cpp_type'
p38588
S'double'
p38589
sS'default'
p38590
S'1e-08'
p38591
sS'name'
p38592
S'picard_rel_tol'
p38593
sS'required'
p38594
I00
sS'group_name'
p38595
S'Picard'
p38596
sa(dp38597
S'description'
p38598
S'Use when restarting a calculation to force a change in dt.\n'
p38599
sS'cpp_type'
p38600
S'bool'
p38601
sS'default'
p38602
S'0'
p38603
sS'name'
p38604
S'reset_dt'
p38605
sS'required'
p38606
I00
sS'group_name'
p38607
Nsa(dp38608
S'description'
p38609
S'File base name used for restart\n'
p38610
sS'cpp_type'
p38611
S'FileNameNoExtension'
p38612
sS'default'
p38613
g3
sS'name'
p38614
S'restart_file_base'
p38615
sS'required'
p38616
I00
sS'group_name'
p38617
S'Restart'
p38618
sa(dp38619
S'name'
p38620
S'scheme'
p38621
sS'cpp_type'
p38622
S'MooseEnum'
p38623
sS'default'
p38624
g3
sS'description'
p38625
S'Time integration scheme used.\n'
p38626
sS'required'
p38627
I00
sS'options'
p38628
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk'
p38629
sS'group_name'
p38630
Nsa(dp38631
S'name'
p38632
S'solve_type'
p38633
sS'cpp_type'
p38634
S'MooseEnum'
p38635
sS'default'
p38636
g3
sS'description'
p38637
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p38638
sS'required'
p38639
I00
sS'options'
p38640
S'PJFNK JFNK NEWTON FD LINEAR'
p38641
sS'group_name'
p38642
Nsa(dp38643
S'description'
p38644
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p38645
sS'cpp_type'
p38646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38647
sS'default'
p38648
g3
sS'name'
p38649
S'splitting'
p38650
sS'required'
p38651
I00
sS'group_name'
p38652
Nsa(dp38653
S'description'
p38654
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p38655
sS'cpp_type'
p38656
S'double'
p38657
sS'default'
p38658
S'1e-08'
p38659
sS'name'
p38660
S'ss_check_tol'
p38661
sS'required'
p38662
I00
sS'group_name'
p38663
S'Advanced'
p38664
sa(dp38665
S'description'
p38666
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p38667
sS'cpp_type'
p38668
S'double'
p38669
sS'default'
p38670
S'0'
p38671
sS'name'
p38672
S'ss_tmin'
p38673
sS'required'
p38674
I00
sS'group_name'
p38675
S'Advanced'
p38676
sa(dp38677
S'description'
p38678
S'The start time of the simulation\n'
p38679
sS'cpp_type'
p38680
S'double'
p38681
sS'default'
p38682
S'0'
p38683
sS'name'
p38684
S'start_time'
p38685
sS'required'
p38686
I00
sS'group_name'
p38687
S'Advanced'
p38688
sa(dp38689
S'description'
p38690
S'The end times of time periods\n'
p38691
sS'cpp_type'
p38692
S'std::vector<double, std::allocator<double> >'
p38693
sS'default'
p38694
g3
sS'name'
p38695
S'time_period_ends'
p38696
sS'required'
p38697
I00
sS'group_name'
p38698
S'Time Periods'
p38699
sa(dp38700
S'description'
p38701
S'The start times of time periods\n'
p38702
sS'cpp_type'
p38703
S'std::vector<double, std::allocator<double> >'
p38704
sS'default'
p38705
g3
sS'name'
p38706
S'time_period_starts'
p38707
sS'required'
p38708
I00
sS'group_name'
p38709
S'Time Periods'
p38710
sa(dp38711
S'description'
p38712
S'The names of periods\n'
p38713
sS'cpp_type'
p38714
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38715
sS'default'
p38716
g3
sS'name'
p38717
S'time_periods'
p38718
sS'required'
p38719
I00
sS'group_name'
p38720
S'Time Periods'
p38721
sa(dp38722
S'description'
p38723
S'the tolerance setting for final timestep size and sync times\n'
p38724
sS'cpp_type'
p38725
S'double'
p38726
sS'default'
p38727
S'2e-14'
p38728
sS'name'
p38729
S'timestep_tolerance'
p38730
sS'required'
p38731
I00
sS'group_name'
p38732
S'Advanced'
p38733
sa(dp38734
S'description'
p38735
S'Whether or not to check for steady state conditions\n'
p38736
sS'cpp_type'
p38737
S'bool'
p38738
sS'default'
p38739
S'0'
p38740
sS'name'
p38741
S'trans_ss_check'
p38742
sS'required'
p38743
I00
sS'group_name'
p38744
S'Advanced'
p38745
sa(dp38746
S'description'
p38747
g3
sS'cpp_type'
p38748
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38749
sS'default'
p38750
S'Transient'
p38751
sS'name'
p38752
S'type'
p38753
sS'required'
p38754
I00
sS'group_name'
p38755
Nsa(dp38756
S'description'
p38757
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p38758
sS'cpp_type'
p38759
S'bool'
p38760
sS'default'
p38761
S'0'
p38762
sS'name'
p38763
S'use_multiapp_dt'
p38764
sS'required'
p38765
I00
sS'group_name'
p38766
S'Advanced'
p38767
sa(dp38768
S'description'
p38769
S'Print detailed diagnostics on timestep calculation\n'
p38770
sS'cpp_type'
p38771
S'bool'
p38772
sS'default'
p38773
S'0'
p38774
sS'name'
p38775
S'verbose'
p38776
sS'required'
p38777
I00
sS'group_name'
p38778
NsasS'name'
p38779
S'/Executioner/<type>/Transient'
p38780
sasS'parameters'
p38781
NsS'name'
p38782
S'/Executioner/<type>'
p38783
sa(dp38784
S'description'
p38785
g3
sS'subblocks'
p38786
NsS'parameters'
p38787
(lp38788
(dp38789
S'description'
p38790
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p38791
sS'cpp_type'
p38792
S'double'
p38793
sS'default'
p38794
S'0'
p38795
sS'name'
p38796
S'coarsen_fraction'
p38797
sS'required'
p38798
I00
sS'group_name'
p38799
Nsa(dp38800
S'description'
p38801
S'The number of adaptivity cycles per step\n'
p38802
sS'cpp_type'
p38803
S'unsigned int'
p38804
sS'default'
p38805
S'1'
p38806
sS'name'
p38807
S'cycles_per_step'
p38808
sS'required'
p38809
I00
sS'group_name'
p38810
Nsa(dp38811
S'name'
p38812
S'error_estimator'
p38813
sS'cpp_type'
p38814
S'MooseEnum'
p38815
sS'default'
p38816
S'KellyErrorEstimator'
p38817
sS'description'
p38818
S'The class name of the error estimator you want to use.\n'
p38819
sS'required'
p38820
I00
sS'options'
p38821
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p38822
sS'group_name'
p38823
Nsa(dp38824
S'description'
p38825
S'The number of adaptivity steps to perform using the initial conditions\n'
p38826
sS'cpp_type'
p38827
S'unsigned int'
p38828
sS'default'
p38829
S'0'
p38830
sS'name'
p38831
S'initial_adaptivity'
p38832
sS'required'
p38833
I00
sS'group_name'
p38834
Nsa(dp38835
S'description'
p38836
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p38837
sS'cpp_type'
p38838
S'unsigned int'
p38839
sS'default'
p38840
S'0'
p38841
sS'name'
p38842
S'max_h_level'
p38843
sS'required'
p38844
I00
sS'group_name'
p38845
Nsa(dp38846
S'description'
p38847
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p38848
sS'cpp_type'
p38849
S'bool'
p38850
sS'default'
p38851
S'0'
p38852
sS'name'
p38853
S'print_changed_info'
p38854
sS'required'
p38855
I00
sS'group_name'
p38856
Nsa(dp38857
S'description'
p38858
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p38859
sS'cpp_type'
p38860
S'double'
p38861
sS'default'
p38862
S'0'
p38863
sS'name'
p38864
S'refine_fraction'
p38865
sS'required'
p38866
I00
sS'group_name'
p38867
Nsa(dp38868
S'description'
p38869
S'Show the progress of the initial adaptivity\n'
p38870
sS'cpp_type'
p38871
S'bool'
p38872
sS'default'
p38873
S'1'
p38874
sS'name'
p38875
S'show_initial_progress'
p38876
sS'required'
p38877
I00
sS'group_name'
p38878
Nsa(dp38879
S'description'
p38880
S'The time that adaptivity will be active after.\n'
p38881
sS'cpp_type'
p38882
S'double'
p38883
sS'default'
p38884
S'-1.79769e+308'
p38885
sS'name'
p38886
S'start_time'
p38887
sS'required'
p38888
I00
sS'group_name'
p38889
Nsa(dp38890
S'description'
p38891
S'The number of adaptivity steps to perform at any one time for steady state\n'
p38892
sS'cpp_type'
p38893
S'unsigned int'
p38894
sS'default'
p38895
S'0'
p38896
sS'name'
p38897
S'steps'
p38898
sS'required'
p38899
I00
sS'group_name'
p38900
Nsa(dp38901
S'description'
p38902
S'The time after which adaptivity will no longer be active.\n'
p38903
sS'cpp_type'
p38904
S'double'
p38905
sS'default'
p38906
S'1.79769e+308'
p38907
sS'name'
p38908
S'stop_time'
p38909
sS'required'
p38910
I00
sS'group_name'
p38911
Nsa(dp38912
S'description'
p38913
S'List of names of variables that will be associated with weight_values\n'
p38914
sS'cpp_type'
p38915
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38916
sS'default'
p38917
g3
sS'name'
p38918
S'weight_names'
p38919
sS'required'
p38920
I00
sS'group_name'
p38921
Nsa(dp38922
S'description'
p38923
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p38924
sS'cpp_type'
p38925
S'std::vector<double, std::allocator<double> >'
p38926
sS'default'
p38927
g3
sS'name'
p38928
S'weight_values'
p38929
sS'required'
p38930
I00
sS'group_name'
p38931
NsasS'name'
p38932
S'/Executioner/Adaptivity'
p38933
sa(dp38934
S'description'
p38935
g3
sS'subblocks'
p38936
(lp38937
(dp38938
S'description'
p38939
g3
sS'subblocks'
p38940
(lp38941
(dp38942
S'description'
p38943
g3
sS'subblocks'
p38944
NsS'parameters'
p38945
(lp38946
(dp38947
S'description'
p38948
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38949
sS'cpp_type'
p38950
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38951
sS'default'
p38952
g3
sS'name'
p38953
S'control_tags'
p38954
sS'required'
p38955
I00
sS'group_name'
p38956
Nsa(dp38957
S'description'
p38958
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p38959
sS'cpp_type'
p38960
S'int'
p38961
sS'default'
p38962
S'2'
p38963
sS'name'
p38964
S'order'
p38965
sS'required'
p38966
I00
sS'group_name'
p38967
Nsa(dp38968
S'description'
p38969
S'The scale factor for the predictor (can range from 0 to 1)\n'
p38970
sS'cpp_type'
p38971
S'double'
p38972
sS'default'
p38973
g3
sS'name'
p38974
S'scale'
p38975
sS'required'
p38976
I01
sS'group_name'
p38977
Nsa(dp38978
S'description'
p38979
g3
sS'cpp_type'
p38980
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p38981
sS'default'
p38982
S'AdamsPredictor'
p38983
sS'name'
p38984
S'type'
p38985
sS'required'
p38986
I00
sS'group_name'
p38987
NsasS'name'
p38988
S'/Executioner/Predictor/<type>/AdamsPredictor'
p38989
sa(dp38990
S'description'
p38991
g3
sS'subblocks'
p38992
NsS'parameters'
p38993
(lp38994
(dp38995
S'description'
p38996
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38997
sS'cpp_type'
p38998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p38999
sS'default'
p39000
g3
sS'name'
p39001
S'control_tags'
p39002
sS'required'
p39003
I00
sS'group_name'
p39004
Nsa(dp39005
S'description'
p39006
S'The scale factor for the predictor (can range from 0 to 1)\n'
p39007
sS'cpp_type'
p39008
S'double'
p39009
sS'default'
p39010
g3
sS'name'
p39011
S'scale'
p39012
sS'required'
p39013
I01
sS'group_name'
p39014
Nsa(dp39015
S'description'
p39016
g3
sS'cpp_type'
p39017
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39018
sS'default'
p39019
S'SimplePredictor'
p39020
sS'name'
p39021
S'type'
p39022
sS'required'
p39023
I00
sS'group_name'
p39024
NsasS'name'
p39025
S'/Executioner/Predictor/<type>/SimplePredictor'
p39026
sasS'parameters'
p39027
NsS'name'
p39028
S'/Executioner/Predictor/<type>'
p39029
sasS'parameters'
p39030
(lp39031
(dp39032
S'description'
p39033
S'A string representing the Moose Object that will be built by this Action\n'
p39034
sS'cpp_type'
p39035
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39036
sS'default'
p39037
g3
sS'name'
p39038
S'type'
p39039
sS'required'
p39040
I01
sS'group_name'
p39041
NsasS'name'
p39042
S'/Executioner/Predictor'
p39043
sa(dp39044
S'description'
p39045
g3
sS'subblocks'
p39046
NsS'parameters'
p39047
(lp39048
(dp39049
S'name'
p39050
S'element_order'
p39051
sS'cpp_type'
p39052
S'MooseEnum'
p39053
sS'default'
p39054
S'AUTO'
p39055
sS'description'
p39056
S'Order of the quadrature for elements\n'
p39057
sS'required'
p39058
I00
sS'options'
p39059
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p39060
sS'group_name'
p39061
Nsa(dp39062
S'name'
p39063
S'order'
p39064
sS'cpp_type'
p39065
S'MooseEnum'
p39066
sS'default'
p39067
S'AUTO'
p39068
sS'description'
p39069
S'Order of the quadrature\n'
p39070
sS'required'
p39071
I00
sS'options'
p39072
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p39073
sS'group_name'
p39074
Nsa(dp39075
S'name'
p39076
S'side_order'
p39077
sS'cpp_type'
p39078
S'MooseEnum'
p39079
sS'default'
p39080
S'AUTO'
p39081
sS'description'
p39082
S'Order of the quadrature for sides\n'
p39083
sS'required'
p39084
I00
sS'options'
p39085
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p39086
sS'group_name'
p39087
Nsa(dp39088
S'name'
p39089
S'type'
p39090
sS'cpp_type'
p39091
S'MooseEnum'
p39092
sS'default'
p39093
S'GAUSS'
p39094
sS'description'
p39095
S'Type of the quadrature rule\n'
p39096
sS'required'
p39097
I00
sS'options'
p39098
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO'
p39099
sS'group_name'
p39100
NsasS'name'
p39101
S'/Executioner/Quadrature'
p39102
sa(dp39103
S'description'
p39104
g3
sS'subblocks'
p39105
(lp39106
(dp39107
S'description'
p39108
g3
sS'subblocks'
p39109
(lp39110
(dp39111
S'description'
p39112
g3
sS'subblocks'
p39113
NsS'parameters'
p39114
(lp39115
(dp39116
S'description'
p39117
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39118
sS'cpp_type'
p39119
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39120
sS'default'
p39121
g3
sS'name'
p39122
S'control_tags'
p39123
sS'required'
p39124
I00
sS'group_name'
p39125
Nsa(dp39126
S'description'
p39127
g3
sS'cpp_type'
p39128
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39129
sS'default'
p39130
S'BDF2'
p39131
sS'name'
p39132
S'type'
p39133
sS'required'
p39134
I00
sS'group_name'
p39135
NsasS'name'
p39136
S'/Executioner/TimeIntegrator/<type>/BDF2'
p39137
sa(dp39138
S'description'
p39139
g3
sS'subblocks'
p39140
NsS'parameters'
p39141
(lp39142
(dp39143
S'description'
p39144
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39145
sS'cpp_type'
p39146
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39147
sS'default'
p39148
g3
sS'name'
p39149
S'control_tags'
p39150
sS'required'
p39151
I00
sS'group_name'
p39152
Nsa(dp39153
S'description'
p39154
g3
sS'cpp_type'
p39155
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39156
sS'default'
p39157
S'CrankNicolson'
p39158
sS'name'
p39159
S'type'
p39160
sS'required'
p39161
I00
sS'group_name'
p39162
NsasS'name'
p39163
S'/Executioner/TimeIntegrator/<type>/CrankNicolson'
p39164
sa(dp39165
S'description'
p39166
g3
sS'subblocks'
p39167
NsS'parameters'
p39168
(lp39169
(dp39170
S'description'
p39171
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39172
sS'cpp_type'
p39173
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39174
sS'default'
p39175
g3
sS'name'
p39176
S'control_tags'
p39177
sS'required'
p39178
I00
sS'group_name'
p39179
Nsa(dp39180
S'description'
p39181
g3
sS'cpp_type'
p39182
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39183
sS'default'
p39184
S'ExplicitEuler'
p39185
sS'name'
p39186
S'type'
p39187
sS'required'
p39188
I00
sS'group_name'
p39189
NsasS'name'
p39190
S'/Executioner/TimeIntegrator/<type>/ExplicitEuler'
p39191
sa(dp39192
S'description'
p39193
g3
sS'subblocks'
p39194
NsS'parameters'
p39195
(lp39196
(dp39197
S'description'
p39198
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39199
sS'cpp_type'
p39200
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39201
sS'default'
p39202
g3
sS'name'
p39203
S'control_tags'
p39204
sS'required'
p39205
I00
sS'group_name'
p39206
Nsa(dp39207
S'description'
p39208
g3
sS'cpp_type'
p39209
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39210
sS'default'
p39211
S'ExplicitMidpoint'
p39212
sS'name'
p39213
S'type'
p39214
sS'required'
p39215
I00
sS'group_name'
p39216
NsasS'name'
p39217
S'/Executioner/TimeIntegrator/<type>/ExplicitMidpoint'
p39218
sa(dp39219
S'description'
p39220
g3
sS'subblocks'
p39221
NsS'parameters'
p39222
(lp39223
(dp39224
S'description'
p39225
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39226
sS'cpp_type'
p39227
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39228
sS'default'
p39229
g3
sS'name'
p39230
S'control_tags'
p39231
sS'required'
p39232
I00
sS'group_name'
p39233
Nsa(dp39234
S'description'
p39235
g3
sS'cpp_type'
p39236
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39237
sS'default'
p39238
S'Heun'
p39239
sS'name'
p39240
S'type'
p39241
sS'required'
p39242
I00
sS'group_name'
p39243
NsasS'name'
p39244
S'/Executioner/TimeIntegrator/<type>/Heun'
p39245
sa(dp39246
S'description'
p39247
g3
sS'subblocks'
p39248
NsS'parameters'
p39249
(lp39250
(dp39251
S'description'
p39252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39253
sS'cpp_type'
p39254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39255
sS'default'
p39256
g3
sS'name'
p39257
S'control_tags'
p39258
sS'required'
p39259
I00
sS'group_name'
p39260
Nsa(dp39261
S'description'
p39262
g3
sS'cpp_type'
p39263
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39264
sS'default'
p39265
S'ImplicitEuler'
p39266
sS'name'
p39267
S'type'
p39268
sS'required'
p39269
I00
sS'group_name'
p39270
NsasS'name'
p39271
S'/Executioner/TimeIntegrator/<type>/ImplicitEuler'
p39272
sa(dp39273
S'description'
p39274
g3
sS'subblocks'
p39275
NsS'parameters'
p39276
(lp39277
(dp39278
S'description'
p39279
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39280
sS'cpp_type'
p39281
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39282
sS'default'
p39283
g3
sS'name'
p39284
S'control_tags'
p39285
sS'required'
p39286
I00
sS'group_name'
p39287
Nsa(dp39288
S'description'
p39289
g3
sS'cpp_type'
p39290
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39291
sS'default'
p39292
S'ImplicitMidpoint'
p39293
sS'name'
p39294
S'type'
p39295
sS'required'
p39296
I00
sS'group_name'
p39297
NsasS'name'
p39298
S'/Executioner/TimeIntegrator/<type>/ImplicitMidpoint'
p39299
sa(dp39300
S'description'
p39301
g3
sS'subblocks'
p39302
NsS'parameters'
p39303
(lp39304
(dp39305
S'description'
p39306
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39307
sS'cpp_type'
p39308
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39309
sS'default'
p39310
g3
sS'name'
p39311
S'control_tags'
p39312
sS'required'
p39313
I00
sS'group_name'
p39314
Nsa(dp39315
S'description'
p39316
g3
sS'cpp_type'
p39317
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39318
sS'default'
p39319
S'LStableDirk2'
p39320
sS'name'
p39321
S'type'
p39322
sS'required'
p39323
I00
sS'group_name'
p39324
NsasS'name'
p39325
S'/Executioner/TimeIntegrator/<type>/LStableDirk2'
p39326
sa(dp39327
S'description'
p39328
g3
sS'subblocks'
p39329
NsS'parameters'
p39330
(lp39331
(dp39332
S'description'
p39333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39334
sS'cpp_type'
p39335
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39336
sS'default'
p39337
g3
sS'name'
p39338
S'control_tags'
p39339
sS'required'
p39340
I00
sS'group_name'
p39341
Nsa(dp39342
S'description'
p39343
g3
sS'cpp_type'
p39344
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39345
sS'default'
p39346
S'LStableDirk3'
p39347
sS'name'
p39348
S'type'
p39349
sS'required'
p39350
I00
sS'group_name'
p39351
NsasS'name'
p39352
S'/Executioner/TimeIntegrator/<type>/LStableDirk3'
p39353
sa(dp39354
S'description'
p39355
g3
sS'subblocks'
p39356
NsS'parameters'
p39357
(lp39358
(dp39359
S'description'
p39360
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39361
sS'cpp_type'
p39362
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39363
sS'default'
p39364
g3
sS'name'
p39365
S'control_tags'
p39366
sS'required'
p39367
I00
sS'group_name'
p39368
Nsa(dp39369
S'description'
p39370
g3
sS'cpp_type'
p39371
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39372
sS'default'
p39373
S'Ralston'
p39374
sS'name'
p39375
S'type'
p39376
sS'required'
p39377
I00
sS'group_name'
p39378
NsasS'name'
p39379
S'/Executioner/TimeIntegrator/<type>/Ralston'
p39380
sa(dp39381
S'description'
p39382
g3
sS'subblocks'
p39383
NsS'parameters'
p39384
(lp39385
(dp39386
S'description'
p39387
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39388
sS'cpp_type'
p39389
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39390
sS'default'
p39391
g3
sS'name'
p39392
S'control_tags'
p39393
sS'required'
p39394
I00
sS'group_name'
p39395
Nsa(dp39396
S'description'
p39397
g3
sS'cpp_type'
p39398
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39399
sS'default'
p39400
S'SteadyState'
p39401
sS'name'
p39402
S'type'
p39403
sS'required'
p39404
I00
sS'group_name'
p39405
NsasS'name'
p39406
S'/Executioner/TimeIntegrator/<type>/SteadyState'
p39407
sasS'parameters'
p39408
NsS'name'
p39409
S'/Executioner/TimeIntegrator/<type>'
p39410
sasS'parameters'
p39411
(lp39412
(dp39413
S'description'
p39414
S'A string representing the Moose Object that will be built by this Action\n'
p39415
sS'cpp_type'
p39416
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39417
sS'default'
p39418
g3
sS'name'
p39419
S'type'
p39420
sS'required'
p39421
I01
sS'group_name'
p39422
NsasS'name'
p39423
S'/Executioner/TimeIntegrator'
p39424
sa(dp39425
S'description'
p39426
g3
sS'subblocks'
p39427
(lp39428
(dp39429
S'description'
p39430
g3
sS'subblocks'
p39431
NsS'parameters'
p39432
(lp39433
(dp39434
S'description'
p39435
S'The list of active boundary conditions during this time period (must not be used with "inactive_bcs")\n'
p39436
sS'cpp_type'
p39437
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39438
sS'default'
p39439
g3
sS'name'
p39440
S'active_bcs'
p39441
sS'required'
p39442
I00
sS'group_name'
p39443
Nsa(dp39444
S'description'
p39445
S'The list of active kernels during this time period (must not be used with "inactive_kernels")\n'
p39446
sS'cpp_type'
p39447
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39448
sS'default'
p39449
g3
sS'name'
p39450
S'active_kernels'
p39451
sS'required'
p39452
I00
sS'group_name'
p39453
Nsa(dp39454
S'description'
p39455
S'The list of inactive boundary conditions during this time period (must not be used with "active_bcs")\n'
p39456
sS'cpp_type'
p39457
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39458
sS'default'
p39459
g3
sS'name'
p39460
S'inactive_bcs'
p39461
sS'required'
p39462
I00
sS'group_name'
p39463
Nsa(dp39464
S'description'
p39465
S'The list of inactive kernels during this time period (must not be used with "active_kernels")\n'
p39466
sS'cpp_type'
p39467
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39468
sS'default'
p39469
g3
sS'name'
p39470
S'inactive_kernels'
p39471
sS'required'
p39472
I00
sS'group_name'
p39473
Nsa(dp39474
S'description'
p39475
S'The start time for this time period\n'
p39476
sS'cpp_type'
p39477
S'double'
p39478
sS'default'
p39479
S'0'
p39480
sS'name'
p39481
S'start'
p39482
sS'required'
p39483
I00
sS'group_name'
p39484
NsasS'name'
p39485
S'/Executioner/TimePeriods/*'
p39486
sasS'parameters'
p39487
NsS'name'
p39488
S'/Executioner/TimePeriods'
p39489
sa(dp39490
S'description'
p39491
g3
sS'subblocks'
p39492
(lp39493
(dp39494
S'description'
p39495
g3
sS'subblocks'
p39496
(lp39497
(dp39498
S'description'
p39499
g3
sS'subblocks'
p39500
NsS'parameters'
p39501
(lp39502
(dp39503
S'description'
p39504
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39505
sS'cpp_type'
p39506
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39507
sS'default'
p39508
g3
sS'name'
p39509
S'control_tags'
p39510
sS'required'
p39511
I00
sS'group_name'
p39512
Nsa(dp39513
S'description'
p39514
S'Initial time step size\n'
p39515
sS'cpp_type'
p39516
S'double'
p39517
sS'default'
p39518
g3
sS'name'
p39519
S'dt'
p39520
sS'required'
p39521
I01
sS'group_name'
p39522
Nsa(dp39523
S'description'
p39524
S'Maximum acceptable error.\n'
p39525
sS'cpp_type'
p39526
S'double'
p39527
sS'default'
p39528
g3
sS'name'
p39529
S'e_max'
p39530
sS'required'
p39531
I01
sS'group_name'
p39532
Nsa(dp39533
S'description'
p39534
S'Target error tolerance.\n'
p39535
sS'cpp_type'
p39536
S'double'
p39537
sS'default'
p39538
g3
sS'name'
p39539
S'e_tol'
p39540
sS'required'
p39541
I01
sS'group_name'
p39542
Nsa(dp39543
S'description'
p39544
S'Maximum ratio that the time step can increase.\n'
p39545
sS'cpp_type'
p39546
S'double'
p39547
sS'default'
p39548
S'1e+09'
p39549
sS'name'
p39550
S'max_increase'
p39551
sS'required'
p39552
I00
sS'group_name'
p39553
Nsa(dp39554
S'description'
p39555
S'Use when restarting a calculation to force a change in dt.\n'
p39556
sS'cpp_type'
p39557
S'bool'
p39558
sS'default'
p39559
S'0'
p39560
sS'name'
p39561
S'reset_dt'
p39562
sS'required'
p39563
I00
sS'group_name'
p39564
Nsa(dp39565
S'description'
p39566
S'scaling parameter for dt selection\n'
p39567
sS'cpp_type'
p39568
S'double'
p39569
sS'default'
p39570
S'0.8'
p39571
sS'name'
p39572
S'scaling_parameter'
p39573
sS'required'
p39574
I00
sS'group_name'
p39575
Nsa(dp39576
S'description'
p39577
S'when to start taking adaptive time steps\n'
p39578
sS'cpp_type'
p39579
S'int'
p39580
sS'default'
p39581
S'2'
p39582
sS'name'
p39583
S'start_adapting'
p39584
sS'required'
p39585
I00
sS'group_name'
p39586
Nsa(dp39587
S'description'
p39588
S'the number of time steps before recalculating dt\n'
p39589
sS'cpp_type'
p39590
S'int'
p39591
sS'default'
p39592
S'1'
p39593
sS'name'
p39594
S'steps_between_increase'
p39595
sS'required'
p39596
I00
sS'group_name'
p39597
Nsa(dp39598
S'description'
p39599
g3
sS'cpp_type'
p39600
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39601
sS'default'
p39602
S'AB2PredictorCorrector'
p39603
sS'name'
p39604
S'type'
p39605
sS'required'
p39606
I00
sS'group_name'
p39607
NsasS'name'
p39608
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p39609
sa(dp39610
S'description'
p39611
g3
sS'subblocks'
p39612
NsS'parameters'
p39613
(lp39614
(dp39615
S'description'
p39616
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39617
sS'cpp_type'
p39618
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39619
sS'default'
p39620
g3
sS'name'
p39621
S'control_tags'
p39622
sS'required'
p39623
I00
sS'group_name'
p39624
Nsa(dp39625
S'description'
p39626
S'Size of the time step\n'
p39627
sS'cpp_type'
p39628
S'double'
p39629
sS'default'
p39630
g3
sS'name'
p39631
S'dt'
p39632
sS'required'
p39633
I01
sS'group_name'
p39634
Nsa(dp39635
S'description'
p39636
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p39637
sS'cpp_type'
p39638
S'double'
p39639
sS'default'
p39640
S'2'
p39641
sS'name'
p39642
S'growth_factor'
p39643
sS'required'
p39644
I00
sS'group_name'
p39645
Nsa(dp39646
S'description'
p39647
S'Use when restarting a calculation to force a change in dt.\n'
p39648
sS'cpp_type'
p39649
S'bool'
p39650
sS'default'
p39651
S'0'
p39652
sS'name'
p39653
S'reset_dt'
p39654
sS'required'
p39655
I00
sS'group_name'
p39656
Nsa(dp39657
S'description'
p39658
g3
sS'cpp_type'
p39659
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39660
sS'default'
p39661
S'ConstantDT'
p39662
sS'name'
p39663
S'type'
p39664
sS'required'
p39665
I00
sS'group_name'
p39666
NsasS'name'
p39667
S'/Executioner/TimeStepper/<type>/ConstantDT'
p39668
sa(dp39669
S'description'
p39670
g3
sS'subblocks'
p39671
NsS'parameters'
p39672
(lp39673
(dp39674
S'description'
p39675
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39676
sS'cpp_type'
p39677
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39678
sS'default'
p39679
g3
sS'name'
p39680
S'control_tags'
p39681
sS'required'
p39682
I00
sS'group_name'
p39683
Nsa(dp39684
S'description'
p39685
S'The initial time step size.\n'
p39686
sS'cpp_type'
p39687
S'double'
p39688
sS'default'
p39689
S'1'
p39690
sS'name'
p39691
S'dt'
p39692
sS'required'
p39693
I00
sS'group_name'
p39694
Nsa(dp39695
S'description'
p39696
S'Maximum acceptable error.\n'
p39697
sS'cpp_type'
p39698
S'double'
p39699
sS'default'
p39700
g3
sS'name'
p39701
S'e_max'
p39702
sS'required'
p39703
I01
sS'group_name'
p39704
Nsa(dp39705
S'description'
p39706
S'Target error tolerance.\n'
p39707
sS'cpp_type'
p39708
S'double'
p39709
sS'default'
p39710
g3
sS'name'
p39711
S'e_tol'
p39712
sS'required'
p39713
I01
sS'group_name'
p39714
Nsa(dp39715
S'description'
p39716
S'Maximum ratio that the time step can increase.\n'
p39717
sS'cpp_type'
p39718
S'double'
p39719
sS'default'
p39720
S'1e+09'
p39721
sS'name'
p39722
S'max_increase'
p39723
sS'required'
p39724
I00
sS'group_name'
p39725
Nsa(dp39726
S'description'
p39727
S'Use when restarting a calculation to force a change in dt.\n'
p39728
sS'cpp_type'
p39729
S'bool'
p39730
sS'default'
p39731
S'0'
p39732
sS'name'
p39733
S'reset_dt'
p39734
sS'required'
p39735
I00
sS'group_name'
p39736
Nsa(dp39737
S'description'
p39738
g3
sS'cpp_type'
p39739
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39740
sS'default'
p39741
S'DT2'
p39742
sS'name'
p39743
S'type'
p39744
sS'required'
p39745
I00
sS'group_name'
p39746
NsasS'name'
p39747
S'/Executioner/TimeStepper/<type>/DT2'
p39748
sa(dp39749
S'description'
p39750
g3
sS'subblocks'
p39751
NsS'parameters'
p39752
(lp39753
(dp39754
S'description'
p39755
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39756
sS'cpp_type'
p39757
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39758
sS'default'
p39759
g3
sS'name'
p39760
S'control_tags'
p39761
sS'required'
p39762
I00
sS'group_name'
p39763
Nsa(dp39764
S'description'
p39765
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p39766
sS'cpp_type'
p39767
S'double'
p39768
sS'default'
p39769
S'2'
p39770
sS'name'
p39771
S'growth_factor'
p39772
sS'required'
p39773
I00
sS'group_name'
p39774
Nsa(dp39775
S'description'
p39776
S'Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n'
p39777
sS'cpp_type'
p39778
S'bool'
p39779
sS'default'
p39780
S'1'
p39781
sS'name'
p39782
S'interpolate'
p39783
sS'required'
p39784
I00
sS'group_name'
p39785
Nsa(dp39786
S'description'
p39787
S'The minimal dt to take.\n'
p39788
sS'cpp_type'
p39789
S'double'
p39790
sS'default'
p39791
S'0'
p39792
sS'name'
p39793
S'min_dt'
p39794
sS'required'
p39795
I00
sS'group_name'
p39796
Nsa(dp39797
S'description'
p39798
S'Use when restarting a calculation to force a change in dt.\n'
p39799
sS'cpp_type'
p39800
S'bool'
p39801
sS'default'
p39802
S'0'
p39803
sS'name'
p39804
S'reset_dt'
p39805
sS'required'
p39806
I00
sS'group_name'
p39807
Nsa(dp39808
S'description'
p39809
S'The values of dt\n'
p39810
sS'cpp_type'
p39811
S'std::vector<double, std::allocator<double> >'
p39812
sS'default'
p39813
g3
sS'name'
p39814
S'time_dt'
p39815
sS'required'
p39816
I00
sS'group_name'
p39817
Nsa(dp39818
S'description'
p39819
S'The values of t\n'
p39820
sS'cpp_type'
p39821
S'std::vector<double, std::allocator<double> >'
p39822
sS'default'
p39823
g3
sS'name'
p39824
S'time_t'
p39825
sS'required'
p39826
I00
sS'group_name'
p39827
Nsa(dp39828
S'description'
p39829
g3
sS'cpp_type'
p39830
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39831
sS'default'
p39832
S'FunctionDT'
p39833
sS'name'
p39834
S'type'
p39835
sS'required'
p39836
I00
sS'group_name'
p39837
NsasS'name'
p39838
S'/Executioner/TimeStepper/<type>/FunctionDT'
p39839
sa(dp39840
S'description'
p39841
S'Adjust the timestep based on the number of iterations\n'
p39842
sS'subblocks'
p39843
NsS'parameters'
p39844
(lp39845
(dp39846
S'description'
p39847
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39848
sS'cpp_type'
p39849
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p39850
sS'default'
p39851
g3
sS'name'
p39852
S'control_tags'
p39853
sS'required'
p39854
I00
sS'group_name'
p39855
Nsa(dp39856
S'description'
p39857
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed\n"
p39858
sS'cpp_type'
p39859
S'double'
p39860
sS'default'
p39861
S'0.5'
p39862
sS'name'
p39863
S'cutback_factor'
p39864
sS'required'
p39865
I00
sS'group_name'
p39866
Nsa(dp39867
S'description'
p39868
S'The default timestep size between solves\n'
p39869
sS'cpp_type'
p39870
S'double'
p39871
sS'default'
p39872
g3
sS'name'
p39873
S'dt'
p39874
sS'required'
p39875
I01
sS'group_name'
p39876
Nsa(dp39877
S'description'
p39878
S'Forces the timestepper to take a step that is consistent with points defined in the function\n'
p39879
sS'cpp_type'
p39880
S'bool'
p39881
sS'default'
p39882
S'0'
p39883
sS'name'
p39884
S'force_step_every_function_point'
p39885
sS'required'
p39886
I00
sS'group_name'
p39887
Nsa(dp39888
S'description'
p39889
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p39890
sS'cpp_type'
p39891
S'double'
p39892
sS'default'
p39893
S'2'
p39894
sS'name'
p39895
S'growth_factor'
p39896
sS'required'
p39897
I00
sS'group_name'
p39898
Nsa(dp39899
S'description'
p39900
S"Attempt to grow/shrink timestep if the iteration count is below/above 'optimal_iterations plus/minus iteration_window' (default = optimal_iterations/5).\n"
p39901
sS'cpp_type'
p39902
S'int'
p39903
sS'default'
p39904
g3
sS'name'
p39905
S'iteration_window'
p39906
sS'required'
p39907
I00
sS'group_name'
p39908
Nsa(dp39909
S'description'
p39910
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p39911
sS'cpp_type'
p39912
S'unsigned int'
p39913
sS'default'
p39914
g3
sS'name'
p39915
S'linear_iteration_ratio'
p39916
sS'required'
p39917
I00
sS'group_name'
p39918
Nsa(dp39919
S'description'
p39920
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p39921
sS'cpp_type'
p39922
S'double'
p39923
sS'default'
p39924
g3
sS'name'
p39925
S'max_function_change'
p39926
sS'required'
p39927
I00
sS'group_name'
p39928
Nsa(dp39929
S'description'
p39930
S'The target number of nonlinear iterations for adaptive timestepping\n'
p39931
sS'cpp_type'
p39932
S'int'
p39933
sS'default'
p39934
g3
sS'name'
p39935
S'optimal_iterations'
p39936
sS'required'
p39937
I00
sS'group_name'
p39938
Nsa(dp39939
S'description'
p39940
S'Use when restarting a calculation to force a change in dt.\n'
p39941
sS'cpp_type'
p39942
S'bool'
p39943
sS'default'
p39944
S'0'
p39945
sS'name'
p39946
S'reset_dt'
p39947
sS'required'
p39948
I00
sS'group_name'
p39949
Nsa(dp39950
S'description'
p39951
S'The values of dt\n'
p39952
sS'cpp_type'
p39953
S'std::vector<double, std::allocator<double> >'
p39954
sS'default'
p39955
g3
sS'name'
p39956
S'time_dt'
p39957
sS'required'
p39958
I00
sS'group_name'
p39959
Nsa(dp39960
S'description'
p39961
S'The values of t\n'
p39962
sS'cpp_type'
p39963
S'std::vector<double, std::allocator<double> >'
p39964
sS'default'
p39965
g3
sS'name'
p39966
S'time_t'
p39967
sS'required'
p39968
I00
sS'group_name'
p39969
Nsa(dp39970
S'description'
p39971
S"A 'Piecewise' type function used to control the timestep by limiting the change in the function over a timestep\n"
p39972
sS'cpp_type'
p39973
S'FunctionName'
p39974
sS'default'
p39975
g3
sS'name'
p39976
S'timestep_limiting_function'
p39977
sS'required'
p39978
I00
sS'group_name'
p39979
Nsa(dp39980
S'description'
p39981
g3
sS'cpp_type'
p39982
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p39983
sS'default'
p39984
S'IterationAdaptiveDT'
p39985
sS'name'
p39986
S'type'
p39987
sS'required'
p39988
I00
sS'group_name'
p39989
NsasS'name'
p39990
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p39991
sa(dp39992
S'description'
p39993
g3
sS'subblocks'
p39994
NsS'parameters'
p39995
(lp39996
(dp39997
S'description'
p39998
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39999
sS'cpp_type'
p40000
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40001
sS'default'
p40002
g3
sS'name'
p40003
S'control_tags'
p40004
sS'required'
p40005
I00
sS'group_name'
p40006
Nsa(dp40007
S'description'
p40008
S'Initial value of dt\n'
p40009
sS'cpp_type'
p40010
S'double'
p40011
sS'default'
p40012
g3
sS'name'
p40013
S'dt'
p40014
sS'required'
p40015
I00
sS'group_name'
p40016
Nsa(dp40017
S'description'
p40018
S'The name of the postprocessor that computes the dt\n'
p40019
sS'cpp_type'
p40020
S'PostprocessorName'
p40021
sS'default'
p40022
g3
sS'name'
p40023
S'postprocessor'
p40024
sS'required'
p40025
I01
sS'group_name'
p40026
Nsa(dp40027
S'description'
p40028
S'Use when restarting a calculation to force a change in dt.\n'
p40029
sS'cpp_type'
p40030
S'bool'
p40031
sS'default'
p40032
S'0'
p40033
sS'name'
p40034
S'reset_dt'
p40035
sS'required'
p40036
I00
sS'group_name'
p40037
Nsa(dp40038
S'description'
p40039
g3
sS'cpp_type'
p40040
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40041
sS'default'
p40042
S'PostprocessorDT'
p40043
sS'name'
p40044
S'type'
p40045
sS'required'
p40046
I00
sS'group_name'
p40047
NsasS'name'
p40048
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p40049
sa(dp40050
S'description'
p40051
g3
sS'subblocks'
p40052
NsS'parameters'
p40053
(lp40054
(dp40055
S'description'
p40056
S'Output adaptive time step log\n'
p40057
sS'cpp_type'
p40058
S'bool'
p40059
sS'default'
p40060
S'0'
p40061
sS'name'
p40062
S'adapt_log'
p40063
sS'required'
p40064
I00
sS'group_name'
p40065
Nsa(dp40066
S'description'
p40067
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40068
sS'cpp_type'
p40069
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40070
sS'default'
p40071
g3
sS'name'
p40072
S'control_tags'
p40073
sS'required'
p40074
I00
sS'group_name'
p40075
Nsa(dp40076
S'description'
p40077
S'The timestep size between solves\n'
p40078
sS'cpp_type'
p40079
S'double'
p40080
sS'default'
p40081
g3
sS'name'
p40082
S'dt'
p40083
sS'required'
p40084
I01
sS'group_name'
p40085
Nsa(dp40086
S'description'
p40087
S'Direction for the first step.  1 for up... -1 for down. \n'
p40088
sS'cpp_type'
p40089
S'int'
p40090
sS'default'
p40091
S'1'
p40092
sS'name'
p40093
S'initial_direction'
p40094
sS'required'
p40095
I00
sS'group_name'
p40096
Nsa(dp40097
S'description'
p40098
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p40099
sS'cpp_type'
p40100
S'double'
p40101
sS'default'
p40102
S'0.1'
p40103
sS'name'
p40104
S'percent_change'
p40105
sS'required'
p40106
I00
sS'group_name'
p40107
Nsa(dp40108
S'description'
p40109
S'Use when restarting a calculation to force a change in dt.\n'
p40110
sS'cpp_type'
p40111
S'bool'
p40112
sS'default'
p40113
S'0'
p40114
sS'name'
p40115
S'reset_dt'
p40116
sS'required'
p40117
I00
sS'group_name'
p40118
Nsa(dp40119
S'description'
p40120
g3
sS'cpp_type'
p40121
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40122
sS'default'
p40123
S'SolutionTimeAdaptiveDT'
p40124
sS'name'
p40125
S'type'
p40126
sS'required'
p40127
I00
sS'group_name'
p40128
NsasS'name'
p40129
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p40130
sasS'parameters'
p40131
NsS'name'
p40132
S'/Executioner/TimeStepper/<type>'
p40133
sasS'parameters'
p40134
(lp40135
(dp40136
S'description'
p40137
S'A string representing the Moose Object that will be built by this Action\n'
p40138
sS'cpp_type'
p40139
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40140
sS'default'
p40141
g3
sS'name'
p40142
S'type'
p40143
sS'required'
p40144
I01
sS'group_name'
p40145
NsasS'name'
p40146
S'/Executioner/TimeStepper'
p40147
sasS'parameters'
p40148
(lp40149
(dp40150
S'description'
p40151
S'A string representing the Moose Object that will be built by this Action\n'
p40152
sS'cpp_type'
p40153
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40154
sS'default'
p40155
g3
sS'name'
p40156
S'type'
p40157
sS'required'
p40158
I01
sS'group_name'
p40159
NsasS'name'
p40160
S'/Executioner'
p40161
sa(dp40162
S'description'
p40163
g3
sS'subblocks'
p40164
(lp40165
(dp40166
S'description'
p40167
g3
sS'subblocks'
p40168
NsS'parameters'
p40169
(lp40170
(dp40171
S'description'
p40172
S'A string representing the Moose Object that will be built by this Action\n'
p40173
sS'cpp_type'
p40174
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40175
sS'default'
p40176
g3
sS'name'
p40177
S'type'
p40178
sS'required'
p40179
I01
sS'group_name'
p40180
NsasS'name'
p40181
S'/Functions/*'
p40182
sa(dp40183
S'description'
p40184
S'Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n'
p40185
sS'subblocks'
p40186
NsS'parameters'
p40187
(lp40188
(dp40189
S'description'
p40190
S'Start point for axis of symmetry for the 2d model\n'
p40191
sS'cpp_type'
p40192
S'libMesh::VectorValue<double>'
p40193
sS'default'
p40194
S'0 0 0'
p40195
sS'name'
p40196
S'2d_axis_point1'
p40197
sS'required'
p40198
I00
sS'group_name'
p40199
Nsa(dp40200
S'description'
p40201
S'End point for axis of symmetry for the 2d model\n'
p40202
sS'cpp_type'
p40203
S'libMesh::VectorValue<double>'
p40204
sS'default'
p40205
S'0 1 0'
p40206
sS'name'
p40207
S'2d_axis_point2'
p40208
sS'required'
p40209
I00
sS'group_name'
p40210
Nsa(dp40211
S'description'
p40212
S'Start point for axis of symmetry for the 3d model\n'
p40213
sS'cpp_type'
p40214
S'libMesh::VectorValue<double>'
p40215
sS'default'
p40216
S'0 0 0'
p40217
sS'name'
p40218
S'3d_axis_point1'
p40219
sS'required'
p40220
I00
sS'group_name'
p40221
Nsa(dp40222
S'description'
p40223
S'End point for axis of symmetry for the 3d model\n'
p40224
sS'cpp_type'
p40225
S'libMesh::VectorValue<double>'
p40226
sS'default'
p40227
S'0 1 0'
p40228
sS'name'
p40229
S'3d_axis_point2'
p40230
sS'required'
p40231
I00
sS'group_name'
p40232
Nsa(dp40233
S'description'
p40234
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p40235
sS'cpp_type'
p40236
S'double'
p40237
sS'default'
p40238
S'0'
p40239
sS'name'
p40240
S'add_factor'
p40241
sS'required'
p40242
I00
sS'group_name'
p40243
Nsa(dp40244
S'description'
p40245
S'Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n'
p40246
sS'cpp_type'
p40247
S'double'
p40248
sS'default'
p40249
S'1'
p40250
sS'name'
p40251
S'axial_dimension_ratio'
p40252
sS'required'
p40253
I00
sS'group_name'
p40254
Nsa(dp40255
S'description'
p40256
S'Component of the variable to be computed if it is a vector\n'
p40257
sS'cpp_type'
p40258
S'unsigned int'
p40259
sS'default'
p40260
g3
sS'name'
p40261
S'component'
p40262
sS'required'
p40263
I00
sS'group_name'
p40264
Nsa(dp40265
S'description'
p40266
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40267
sS'cpp_type'
p40268
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40269
sS'default'
p40270
g3
sS'name'
p40271
S'control_tags'
p40272
sS'required'
p40273
I00
sS'group_name'
p40274
Nsa(dp40275
S'description'
p40276
S'The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n'
p40277
sS'cpp_type'
p40278
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40279
sS'default'
p40280
g3
sS'name'
p40281
S'from_variables'
p40282
sS'required'
p40283
I00
sS'group_name'
p40284
Nsa(dp40285
S'description'
p40286
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p40287
sS'cpp_type'
p40288
S'double'
p40289
sS'default'
p40290
S'1'
p40291
sS'name'
p40292
S'scale_factor'
p40293
sS'required'
p40294
I00
sS'group_name'
p40295
Nsa(dp40296
S'description'
p40297
S'The SolutionUserObject to extract data from.\n'
p40298
sS'cpp_type'
p40299
S'UserObjectName'
p40300
sS'default'
p40301
g3
sS'name'
p40302
S'solution'
p40303
sS'required'
p40304
I01
sS'group_name'
p40305
Nsa(dp40306
S'description'
p40307
g3
sS'cpp_type'
p40308
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40309
sS'default'
p40310
S'Axisymmetric2D3DSolutionFunction'
p40311
sS'name'
p40312
S'type'
p40313
sS'required'
p40314
I00
sS'group_name'
p40315
NsasS'name'
p40316
S'/Functions/Axisymmetric2D3DSolutionFunction'
p40317
sa(dp40318
S'description'
p40319
g3
sS'subblocks'
p40320
NsS'parameters'
p40321
(lp40322
(dp40323
S'description'
p40324
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40325
sS'cpp_type'
p40326
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40327
sS'default'
p40328
g3
sS'name'
p40329
S'control_tags'
p40330
sS'required'
p40331
I00
sS'group_name'
p40332
Nsa(dp40333
S'description'
p40334
S'The functions to be multiplied together.\n'
p40335
sS'cpp_type'
p40336
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p40337
sS'default'
p40338
g3
sS'name'
p40339
S'functions'
p40340
sS'required'
p40341
I00
sS'group_name'
p40342
Nsa(dp40343
S'description'
p40344
S'Scale factor to be applied to the ordinate values\n'
p40345
sS'cpp_type'
p40346
S'double'
p40347
sS'default'
p40348
S'1'
p40349
sS'name'
p40350
S'scale_factor'
p40351
sS'required'
p40352
I00
sS'group_name'
p40353
Nsa(dp40354
S'description'
p40355
g3
sS'cpp_type'
p40356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40357
sS'default'
p40358
S'CompositeFunction'
p40359
sS'name'
p40360
S'type'
p40361
sS'required'
p40362
I00
sS'group_name'
p40363
NsasS'name'
p40364
S'/Functions/CompositeFunction'
p40365
sa(dp40366
S'description'
p40367
g3
sS'subblocks'
p40368
NsS'parameters'
p40369
(lp40370
(dp40371
S'description'
p40372
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40373
sS'cpp_type'
p40374
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40375
sS'default'
p40376
g3
sS'name'
p40377
S'control_tags'
p40378
sS'required'
p40379
I00
sS'group_name'
p40380
Nsa(dp40381
S'description'
p40382
g3
sS'cpp_type'
p40383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40384
sS'default'
p40385
S'ConstantFunction'
p40386
sS'name'
p40387
S'type'
p40388
sS'required'
p40389
I00
sS'group_name'
p40390
Nsa(dp40391
S'description'
p40392
S'The constant value\n'
p40393
sS'cpp_type'
p40394
S'double'
p40395
sS'default'
p40396
S'0'
p40397
sS'name'
p40398
S'value'
p40399
sS'required'
p40400
I00
sS'group_name'
p40401
NsasS'name'
p40402
S'/Functions/ConstantFunction'
p40403
sa(dp40404
S'description'
p40405
g3
sS'subblocks'
p40406
NsS'parameters'
p40407
(lp40408
(dp40409
S'description'
p40410
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40411
sS'cpp_type'
p40412
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40413
sS'default'
p40414
g3
sS'name'
p40415
S'control_tags'
p40416
sS'required'
p40417
I00
sS'group_name'
p40418
Nsa(dp40419
S'description'
p40420
S'The direction in which to take the derivative.  This must not be a zero-length vector.  This function returned a finite-difference approx to (direction.nabla)^2 function\n'
p40421
sS'cpp_type'
p40422
S'libMesh::VectorValue<double>'
p40423
sS'default'
p40424
g3
sS'name'
p40425
S'direction'
p40426
sS'required'
p40427
I01
sS'group_name'
p40428
Nsa(dp40429
S'description'
p40430
g3
sS'cpp_type'
p40431
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40432
sS'default'
p40433
S'Grad2ParsedFunction'
p40434
sS'name'
p40435
S'type'
p40436
sS'required'
p40437
I00
sS'group_name'
p40438
Nsa(dp40439
S'description'
p40440
S'Constant numeric values or postprocessor names for vars.\n'
p40441
sS'cpp_type'
p40442
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40443
sS'default'
p40444
g3
sS'name'
p40445
S'vals'
p40446
sS'required'
p40447
I00
sS'group_name'
p40448
Nsa(dp40449
S'description'
p40450
S'The user defined function.\n'
p40451
sS'cpp_type'
p40452
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40453
sS'default'
p40454
g3
sS'name'
p40455
S'value'
p40456
sS'required'
p40457
I01
sS'group_name'
p40458
Nsa(dp40459
S'description'
p40460
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p40461
sS'cpp_type'
p40462
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40463
sS'default'
p40464
g3
sS'name'
p40465
S'vars'
p40466
sS'required'
p40467
I00
sS'group_name'
p40468
NsasS'name'
p40469
S'/Functions/Grad2ParsedFunction'
p40470
sa(dp40471
S'description'
p40472
g3
sS'subblocks'
p40473
NsS'parameters'
p40474
(lp40475
(dp40476
S'description'
p40477
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40478
sS'cpp_type'
p40479
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40480
sS'default'
p40481
g3
sS'name'
p40482
S'control_tags'
p40483
sS'required'
p40484
I00
sS'group_name'
p40485
Nsa(dp40486
S'description'
p40487
S'The direction in which to take the derivative.  This must not be a zero-length vector\n'
p40488
sS'cpp_type'
p40489
S'libMesh::VectorValue<double>'
p40490
sS'default'
p40491
g3
sS'name'
p40492
S'direction'
p40493
sS'required'
p40494
I01
sS'group_name'
p40495
Nsa(dp40496
S'description'
p40497
g3
sS'cpp_type'
p40498
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40499
sS'default'
p40500
S'GradParsedFunction'
p40501
sS'name'
p40502
S'type'
p40503
sS'required'
p40504
I00
sS'group_name'
p40505
Nsa(dp40506
S'description'
p40507
S'Constant numeric values or postprocessor names for vars.\n'
p40508
sS'cpp_type'
p40509
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40510
sS'default'
p40511
g3
sS'name'
p40512
S'vals'
p40513
sS'required'
p40514
I00
sS'group_name'
p40515
Nsa(dp40516
S'description'
p40517
S'The user defined function.\n'
p40518
sS'cpp_type'
p40519
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40520
sS'default'
p40521
g3
sS'name'
p40522
S'value'
p40523
sS'required'
p40524
I01
sS'group_name'
p40525
Nsa(dp40526
S'description'
p40527
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p40528
sS'cpp_type'
p40529
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40530
sS'default'
p40531
g3
sS'name'
p40532
S'vars'
p40533
sS'required'
p40534
I00
sS'group_name'
p40535
NsasS'name'
p40536
S'/Functions/GradParsedFunction'
p40537
sa(dp40538
S'description'
p40539
S'Function with values sampled from a given image stack\n'
p40540
sS'subblocks'
p40541
NsS'parameters'
p40542
(lp40543
(dp40544
S'description'
p40545
S'The image component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first component of the image\n'
p40546
sS'cpp_type'
p40547
S'unsigned int'
p40548
sS'default'
p40549
g3
sS'name'
p40550
S'component'
p40551
sS'required'
p40552
I00
sS'group_name'
p40553
Nsa(dp40554
S'description'
p40555
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40556
sS'cpp_type'
p40557
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40558
sS'default'
p40559
g3
sS'name'
p40560
S'control_tags'
p40561
sS'required'
p40562
I00
sS'group_name'
p40563
Nsa(dp40564
S'description'
p40565
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p40566
sS'cpp_type'
p40567
S'libMesh::Point'
p40568
sS'default'
p40569
g3
sS'name'
p40570
S'dimensions'
p40571
sS'required'
p40572
I00
sS'group_name'
p40573
Nsa(dp40574
S'description'
p40575
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p40576
sS'cpp_type'
p40577
S'FileName'
p40578
sS'default'
p40579
g3
sS'name'
p40580
S'file'
p40581
sS'required'
p40582
I00
sS'group_name'
p40583
Nsa(dp40584
S'description'
p40585
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p40586
sS'cpp_type'
p40587
S'FileNameNoExtension'
p40588
sS'default'
p40589
g3
sS'name'
p40590
S'file_base'
p40591
sS'required'
p40592
I00
sS'group_name'
p40593
Nsa(dp40594
S'description'
p40595
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p40596
sS'cpp_type'
p40597
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p40598
sS'default'
p40599
g3
sS'name'
p40600
S'file_range'
p40601
sS'required'
p40602
I00
sS'group_name'
p40603
Nsa(dp40604
S'description'
p40605
S"Suffix of the file to open, e.g. 'png'\n"
p40606
sS'cpp_type'
p40607
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40608
sS'default'
p40609
g3
sS'name'
p40610
S'file_suffix'
p40611
sS'required'
p40612
I00
sS'group_name'
p40613
Nsa(dp40614
S'description'
p40615
S'Flip the image along the x-axis\n'
p40616
sS'cpp_type'
p40617
S'bool'
p40618
sS'default'
p40619
S'0'
p40620
sS'name'
p40621
S'flip_x'
p40622
sS'required'
p40623
I00
sS'group_name'
p40624
S'Flip'
p40625
sa(dp40626
S'description'
p40627
S'Flip the image along the y-axis\n'
p40628
sS'cpp_type'
p40629
S'bool'
p40630
sS'default'
p40631
S'0'
p40632
sS'name'
p40633
S'flip_y'
p40634
sS'required'
p40635
I00
sS'group_name'
p40636
S'Flip'
p40637
sa(dp40638
S'description'
p40639
S'Flip the image along the z-axis\n'
p40640
sS'cpp_type'
p40641
S'bool'
p40642
sS'default'
p40643
S'0'
p40644
sS'name'
p40645
S'flip_z'
p40646
sS'required'
p40647
I00
sS'group_name'
p40648
S'Flip'
p40649
sa(dp40650
S'description'
p40651
S'The value to set for data less than the threshold value\n'
p40652
sS'cpp_type'
p40653
S'double'
p40654
sS'default'
p40655
S'0'
p40656
sS'name'
p40657
S'lower_value'
p40658
sS'required'
p40659
I00
sS'group_name'
p40660
S'Threshold'
p40661
sa(dp40662
S'description'
p40663
S'Origin of the image (defaults to mesh origin)\n'
p40664
sS'cpp_type'
p40665
S'libMesh::Point'
p40666
sS'default'
p40667
g3
sS'name'
p40668
S'origin'
p40669
sS'required'
p40670
I00
sS'group_name'
p40671
Nsa(dp40672
S'description'
p40673
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p40674
sS'cpp_type'
p40675
S'double'
p40676
sS'default'
p40677
S'1'
p40678
sS'name'
p40679
S'scale'
p40680
sS'required'
p40681
I00
sS'group_name'
p40682
S'Rescale'
p40683
sa(dp40684
S'description'
p40685
S'Value to add to all pixels; occurs prior to scaling\n'
p40686
sS'cpp_type'
p40687
S'double'
p40688
sS'default'
p40689
S'0'
p40690
sS'name'
p40691
S'shift'
p40692
sS'required'
p40693
I00
sS'group_name'
p40694
S'Rescale'
p40695
sa(dp40696
S'description'
p40697
S'The threshold value\n'
p40698
sS'cpp_type'
p40699
S'double'
p40700
sS'default'
p40701
g3
sS'name'
p40702
S'threshold'
p40703
sS'required'
p40704
I00
sS'group_name'
p40705
S'Threshold'
p40706
sa(dp40707
S'description'
p40708
g3
sS'cpp_type'
p40709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40710
sS'default'
p40711
S'ImageFunction'
p40712
sS'name'
p40713
S'type'
p40714
sS'required'
p40715
I00
sS'group_name'
p40716
Nsa(dp40717
S'description'
p40718
S'The value to set for data greater than the threshold value\n'
p40719
sS'cpp_type'
p40720
S'double'
p40721
sS'default'
p40722
S'1'
p40723
sS'name'
p40724
S'upper_value'
p40725
sS'required'
p40726
I00
sS'group_name'
p40727
S'Threshold'
p40728
sasS'name'
p40729
S'/Functions/ImageFunction'
p40730
sa(dp40731
S'description'
p40732
S'Returns the linear combination of the functions\n'
p40733
sS'subblocks'
p40734
NsS'parameters'
p40735
(lp40736
(dp40737
S'description'
p40738
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40739
sS'cpp_type'
p40740
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40741
sS'default'
p40742
g3
sS'name'
p40743
S'control_tags'
p40744
sS'required'
p40745
I00
sS'group_name'
p40746
Nsa(dp40747
S'description'
p40748
S'This function will return Sum_over_i(w_i * functions_i)\n'
p40749
sS'cpp_type'
p40750
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p40751
sS'default'
p40752
g3
sS'name'
p40753
S'functions'
p40754
sS'required'
p40755
I01
sS'group_name'
p40756
Nsa(dp40757
S'description'
p40758
g3
sS'cpp_type'
p40759
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40760
sS'default'
p40761
S'LinearCombinationFunction'
p40762
sS'name'
p40763
S'type'
p40764
sS'required'
p40765
I00
sS'group_name'
p40766
Nsa(dp40767
S'description'
p40768
S'This function will return Sum_over_i(w_i * functions_i)\n'
p40769
sS'cpp_type'
p40770
S'std::vector<double, std::allocator<double> >'
p40771
sS'default'
p40772
g3
sS'name'
p40773
S'w'
p40774
sS'required'
p40775
I01
sS'group_name'
p40776
NsasS'name'
p40777
S'/Functions/LinearCombinationFunction'
p40778
sa(dp40779
S'description'
p40780
g3
sS'subblocks'
p40781
NsS'parameters'
p40782
(lp40783
(dp40784
S'description'
p40785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40786
sS'cpp_type'
p40787
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40788
sS'default'
p40789
g3
sS'name'
p40790
S'control_tags'
p40791
sS'required'
p40792
I00
sS'group_name'
p40793
Nsa(dp40794
S'description'
p40795
g3
sS'cpp_type'
p40796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40797
sS'default'
p40798
S'ParsedFunction'
p40799
sS'name'
p40800
S'type'
p40801
sS'required'
p40802
I00
sS'group_name'
p40803
Nsa(dp40804
S'description'
p40805
S'Constant numeric values or postprocessor names for vars.\n'
p40806
sS'cpp_type'
p40807
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40808
sS'default'
p40809
g3
sS'name'
p40810
S'vals'
p40811
sS'required'
p40812
I00
sS'group_name'
p40813
Nsa(dp40814
S'description'
p40815
S'The user defined function.\n'
p40816
sS'cpp_type'
p40817
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40818
sS'default'
p40819
g3
sS'name'
p40820
S'value'
p40821
sS'required'
p40822
I01
sS'group_name'
p40823
Nsa(dp40824
S'description'
p40825
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p40826
sS'cpp_type'
p40827
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40828
sS'default'
p40829
g3
sS'name'
p40830
S'vars'
p40831
sS'required'
p40832
I00
sS'group_name'
p40833
NsasS'name'
p40834
S'/Functions/ParsedFunction'
p40835
sa(dp40836
S'description'
p40837
g3
sS'subblocks'
p40838
NsS'parameters'
p40839
(lp40840
(dp40841
S'description'
p40842
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40843
sS'cpp_type'
p40844
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40845
sS'default'
p40846
g3
sS'name'
p40847
S'control_tags'
p40848
sS'required'
p40849
I00
sS'group_name'
p40850
Nsa(dp40851
S'description'
p40852
S'Partial with respect to x.\n'
p40853
sS'cpp_type'
p40854
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40855
sS'default'
p40856
S'0'
p40857
sS'name'
p40858
S'grad_x'
p40859
sS'required'
p40860
I00
sS'group_name'
p40861
Nsa(dp40862
S'description'
p40863
S'Partial with respect to y.\n'
p40864
sS'cpp_type'
p40865
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40866
sS'default'
p40867
S'0'
p40868
sS'name'
p40869
S'grad_y'
p40870
sS'required'
p40871
I00
sS'group_name'
p40872
Nsa(dp40873
S'description'
p40874
S'Partial with respect to z.\n'
p40875
sS'cpp_type'
p40876
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40877
sS'default'
p40878
S'0'
p40879
sS'name'
p40880
S'grad_z'
p40881
sS'required'
p40882
I00
sS'group_name'
p40883
Nsa(dp40884
S'description'
p40885
g3
sS'cpp_type'
p40886
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40887
sS'default'
p40888
S'ParsedGradFunction'
p40889
sS'name'
p40890
S'type'
p40891
sS'required'
p40892
I00
sS'group_name'
p40893
Nsa(dp40894
S'description'
p40895
S'Constant numeric values or postprocessor names for vars.\n'
p40896
sS'cpp_type'
p40897
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40898
sS'default'
p40899
g3
sS'name'
p40900
S'vals'
p40901
sS'required'
p40902
I00
sS'group_name'
p40903
Nsa(dp40904
S'description'
p40905
S'User defined function.\n'
p40906
sS'cpp_type'
p40907
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40908
sS'default'
p40909
S'0'
p40910
sS'name'
p40911
S'value'
p40912
sS'required'
p40913
I00
sS'group_name'
p40914
Nsa(dp40915
S'description'
p40916
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p40917
sS'cpp_type'
p40918
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40919
sS'default'
p40920
g3
sS'name'
p40921
S'vars'
p40922
sS'required'
p40923
I00
sS'group_name'
p40924
NsasS'name'
p40925
S'/Functions/ParsedGradFunction'
p40926
sa(dp40927
S'description'
p40928
g3
sS'subblocks'
p40929
NsS'parameters'
p40930
(lp40931
(dp40932
S'description'
p40933
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40934
sS'cpp_type'
p40935
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40936
sS'default'
p40937
g3
sS'name'
p40938
S'control_tags'
p40939
sS'required'
p40940
I00
sS'group_name'
p40941
Nsa(dp40942
S'description'
p40943
g3
sS'cpp_type'
p40944
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40945
sS'default'
p40946
S'ParsedVectorFunction'
p40947
sS'name'
p40948
S'type'
p40949
sS'required'
p40950
I00
sS'group_name'
p40951
Nsa(dp40952
S'description'
p40953
S'Constant numeric values or postprocessor names for vars.\n'
p40954
sS'cpp_type'
p40955
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40956
sS'default'
p40957
g3
sS'name'
p40958
S'vals'
p40959
sS'required'
p40960
I00
sS'group_name'
p40961
Nsa(dp40962
S'description'
p40963
S'x-component of function.\n'
p40964
sS'cpp_type'
p40965
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40966
sS'default'
p40967
S'0'
p40968
sS'name'
p40969
S'value_x'
p40970
sS'required'
p40971
I00
sS'group_name'
p40972
Nsa(dp40973
S'description'
p40974
S'y-component of function.\n'
p40975
sS'cpp_type'
p40976
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40977
sS'default'
p40978
S'0'
p40979
sS'name'
p40980
S'value_y'
p40981
sS'required'
p40982
I00
sS'group_name'
p40983
Nsa(dp40984
S'description'
p40985
S'z-component of function.\n'
p40986
sS'cpp_type'
p40987
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p40988
sS'default'
p40989
S'0'
p40990
sS'name'
p40991
S'value_z'
p40992
sS'required'
p40993
I00
sS'group_name'
p40994
Nsa(dp40995
S'description'
p40996
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p40997
sS'cpp_type'
p40998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p40999
sS'default'
p41000
g3
sS'name'
p41001
S'vars'
p41002
sS'required'
p41003
I00
sS'group_name'
p41004
NsasS'name'
p41005
S'/Functions/ParsedVectorFunction'
p41006
sa(dp41007
S'description'
p41008
g3
sS'subblocks'
p41009
NsS'parameters'
p41010
(lp41011
(dp41012
S'description'
p41013
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p41014
sS'cpp_type'
p41015
S'int'
p41016
sS'default'
p41017
S'-1'
p41018
sS'name'
p41019
S'axis'
p41020
sS'required'
p41021
I00
sS'group_name'
p41022
Nsa(dp41023
S'description'
p41024
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41025
sS'cpp_type'
p41026
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41027
sS'default'
p41028
g3
sS'name'
p41029
S'control_tags'
p41030
sS'required'
p41031
I00
sS'group_name'
p41032
Nsa(dp41033
S'description'
p41034
S'File holding csv data for use with PiecewiseBilinear\n'
p41035
sS'cpp_type'
p41036
S'FileName'
p41037
sS'default'
p41038
g3
sS'name'
p41039
S'data_file'
p41040
sS'required'
p41041
I00
sS'group_name'
p41042
Nsa(dp41043
S'description'
p41044
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p41045
sS'cpp_type'
p41046
S'bool'
p41047
sS'default'
p41048
S'0'
p41049
sS'name'
p41050
S'radial'
p41051
sS'required'
p41052
I00
sS'group_name'
p41053
Nsa(dp41054
S'description'
p41055
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p41056
sS'cpp_type'
p41057
S'double'
p41058
sS'default'
p41059
S'1'
p41060
sS'name'
p41061
S'scale_factor'
p41062
sS'required'
p41063
I00
sS'group_name'
p41064
Nsa(dp41065
S'description'
p41066
g3
sS'cpp_type'
p41067
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41068
sS'default'
p41069
S'PiecewiseBilinear'
p41070
sS'name'
p41071
S'type'
p41072
sS'required'
p41073
I00
sS'group_name'
p41074
Nsa(dp41075
S'description'
p41076
S'The x abscissa values\n'
p41077
sS'cpp_type'
p41078
S'std::vector<double, std::allocator<double> >'
p41079
sS'default'
p41080
g3
sS'name'
p41081
S'x'
p41082
sS'required'
p41083
I00
sS'group_name'
p41084
Nsa(dp41085
S'description'
p41086
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p41087
sS'cpp_type'
p41088
S'int'
p41089
sS'default'
p41090
S'-1'
p41091
sS'name'
p41092
S'xaxis'
p41093
sS'required'
p41094
I00
sS'group_name'
p41095
Nsa(dp41096
S'description'
p41097
S'The y abscissa values\n'
p41098
sS'cpp_type'
p41099
S'std::vector<double, std::allocator<double> >'
p41100
sS'default'
p41101
g3
sS'name'
p41102
S'y'
p41103
sS'required'
p41104
I00
sS'group_name'
p41105
Nsa(dp41106
S'description'
p41107
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p41108
sS'cpp_type'
p41109
S'int'
p41110
sS'default'
p41111
S'-1'
p41112
sS'name'
p41113
S'yaxis'
p41114
sS'required'
p41115
I00
sS'group_name'
p41116
Nsa(dp41117
S'description'
p41118
S'The ordinate values\n'
p41119
sS'cpp_type'
p41120
S'std::vector<double, std::allocator<double> >'
p41121
sS'default'
p41122
g3
sS'name'
p41123
S'z'
p41124
sS'required'
p41125
I00
sS'group_name'
p41126
NsasS'name'
p41127
S'/Functions/PiecewiseBilinear'
p41128
sa(dp41129
S'description'
p41130
g3
sS'subblocks'
p41131
NsS'parameters'
p41132
(lp41133
(dp41134
S'description'
p41135
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p41136
sS'cpp_type'
p41137
S'int'
p41138
sS'default'
p41139
g3
sS'name'
p41140
S'axis'
p41141
sS'required'
p41142
I00
sS'group_name'
p41143
Nsa(dp41144
S'description'
p41145
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41146
sS'cpp_type'
p41147
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41148
sS'default'
p41149
g3
sS'name'
p41150
S'control_tags'
p41151
sS'required'
p41152
I00
sS'group_name'
p41153
Nsa(dp41154
S'description'
p41155
S'File holding csv data for use with Piecewise\n'
p41156
sS'cpp_type'
p41157
S'FileName'
p41158
sS'default'
p41159
g3
sS'name'
p41160
S'data_file'
p41161
sS'required'
p41162
I00
sS'group_name'
p41163
Nsa(dp41164
S'name'
p41165
S'direction'
p41166
sS'cpp_type'
p41167
S'MooseEnum'
p41168
sS'default'
p41169
S'left'
p41170
sS'description'
p41171
S'Direction to look to find value: left right\n'
p41172
sS'required'
p41173
I00
sS'options'
p41174
S'left right'
p41175
sS'group_name'
p41176
Nsa(dp41177
S'description'
p41178
S'Format of csv data file that is in either in columns or rows\n'
p41179
sS'cpp_type'
p41180
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41181
sS'default'
p41182
S'rows'
p41183
sS'name'
p41184
S'format'
p41185
sS'required'
p41186
I00
sS'group_name'
p41187
Nsa(dp41188
S'description'
p41189
S'Scale factor to be applied to the ordinate values\n'
p41190
sS'cpp_type'
p41191
S'double'
p41192
sS'default'
p41193
S'1'
p41194
sS'name'
p41195
S'scale_factor'
p41196
sS'required'
p41197
I00
sS'group_name'
p41198
Nsa(dp41199
S'description'
p41200
g3
sS'cpp_type'
p41201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41202
sS'default'
p41203
S'PiecewiseConstant'
p41204
sS'name'
p41205
S'type'
p41206
sS'required'
p41207
I00
sS'group_name'
p41208
Nsa(dp41209
S'description'
p41210
S'The abscissa values\n'
p41211
sS'cpp_type'
p41212
S'std::vector<double, std::allocator<double> >'
p41213
sS'default'
p41214
g3
sS'name'
p41215
S'x'
p41216
sS'required'
p41217
I00
sS'group_name'
p41218
Nsa(dp41219
S'description'
p41220
S'All function data, supplied in abscissa, ordinate pairs\n'
p41221
sS'cpp_type'
p41222
S'std::vector<double, std::allocator<double> >'
p41223
sS'default'
p41224
g3
sS'name'
p41225
S'xy_data'
p41226
sS'required'
p41227
I00
sS'group_name'
p41228
Nsa(dp41229
S'description'
p41230
S'The ordinate values\n'
p41231
sS'cpp_type'
p41232
S'std::vector<double, std::allocator<double> >'
p41233
sS'default'
p41234
g3
sS'name'
p41235
S'y'
p41236
sS'required'
p41237
I00
sS'group_name'
p41238
NsasS'name'
p41239
S'/Functions/PiecewiseConstant'
p41240
sa(dp41241
S'description'
p41242
g3
sS'subblocks'
p41243
NsS'parameters'
p41244
(lp41245
(dp41246
S'description'
p41247
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p41248
sS'cpp_type'
p41249
S'int'
p41250
sS'default'
p41251
g3
sS'name'
p41252
S'axis'
p41253
sS'required'
p41254
I00
sS'group_name'
p41255
Nsa(dp41256
S'description'
p41257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41258
sS'cpp_type'
p41259
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41260
sS'default'
p41261
g3
sS'name'
p41262
S'control_tags'
p41263
sS'required'
p41264
I00
sS'group_name'
p41265
Nsa(dp41266
S'description'
p41267
S'File holding csv data for use with Piecewise\n'
p41268
sS'cpp_type'
p41269
S'FileName'
p41270
sS'default'
p41271
g3
sS'name'
p41272
S'data_file'
p41273
sS'required'
p41274
I00
sS'group_name'
p41275
Nsa(dp41276
S'description'
p41277
S'Format of csv data file that is in either in columns or rows\n'
p41278
sS'cpp_type'
p41279
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41280
sS'default'
p41281
S'rows'
p41282
sS'name'
p41283
S'format'
p41284
sS'required'
p41285
I00
sS'group_name'
p41286
Nsa(dp41287
S'description'
p41288
S'Scale factor to be applied to the ordinate values\n'
p41289
sS'cpp_type'
p41290
S'double'
p41291
sS'default'
p41292
S'1'
p41293
sS'name'
p41294
S'scale_factor'
p41295
sS'required'
p41296
I00
sS'group_name'
p41297
Nsa(dp41298
S'description'
p41299
g3
sS'cpp_type'
p41300
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41301
sS'default'
p41302
S'PiecewiseLinear'
p41303
sS'name'
p41304
S'type'
p41305
sS'required'
p41306
I00
sS'group_name'
p41307
Nsa(dp41308
S'description'
p41309
S'The abscissa values\n'
p41310
sS'cpp_type'
p41311
S'std::vector<double, std::allocator<double> >'
p41312
sS'default'
p41313
g3
sS'name'
p41314
S'x'
p41315
sS'required'
p41316
I00
sS'group_name'
p41317
Nsa(dp41318
S'description'
p41319
S'All function data, supplied in abscissa, ordinate pairs\n'
p41320
sS'cpp_type'
p41321
S'std::vector<double, std::allocator<double> >'
p41322
sS'default'
p41323
g3
sS'name'
p41324
S'xy_data'
p41325
sS'required'
p41326
I00
sS'group_name'
p41327
Nsa(dp41328
S'description'
p41329
S'The ordinate values\n'
p41330
sS'cpp_type'
p41331
S'std::vector<double, std::allocator<double> >'
p41332
sS'default'
p41333
g3
sS'name'
p41334
S'y'
p41335
sS'required'
p41336
I00
sS'group_name'
p41337
NsasS'name'
p41338
S'/Functions/PiecewiseLinear'
p41339
sa(dp41340
S'description'
p41341
S'PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n'
p41342
sS'subblocks'
p41343
NsS'parameters'
p41344
(lp41345
(dp41346
S'description'
p41347
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41348
sS'cpp_type'
p41349
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41350
sS'default'
p41351
g3
sS'name'
p41352
S'control_tags'
p41353
sS'required'
p41354
I00
sS'group_name'
p41355
Nsa(dp41356
S'description'
p41357
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p41358
sS'cpp_type'
p41359
S'FileName'
p41360
sS'default'
p41361
g3
sS'name'
p41362
S'data_file'
p41363
sS'required'
p41364
I00
sS'group_name'
p41365
Nsa(dp41366
S'description'
p41367
g3
sS'cpp_type'
p41368
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41369
sS'default'
p41370
S'PiecewiseMultilinear'
p41371
sS'name'
p41372
S'type'
p41373
sS'required'
p41374
I00
sS'group_name'
p41375
NsasS'name'
p41376
S'/Functions/PiecewiseMultilinear'
p41377
sa(dp41378
S'description'
p41379
S'This function defines excavation geometry.  It can be used to enforce pressures at the boundary of excavations, and to record fluid fluxes into excavations.\n'
p41380
sS'subblocks'
p41381
NsS'parameters'
p41382
(lp41383
(dp41384
S'description'
p41385
S'This function is only active at a point if the distance between the point and the coal face <= active_length.\n'
p41386
sS'cpp_type'
p41387
S'double'
p41388
sS'default'
p41389
g3
sS'name'
p41390
S'active_length'
p41391
sS'required'
p41392
I01
sS'group_name'
p41393
Nsa(dp41394
S'description'
p41395
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41396
sS'cpp_type'
p41397
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41398
sS'default'
p41399
g3
sS'name'
p41400
S'control_tags'
p41401
sS'required'
p41402
I00
sS'group_name'
p41403
Nsa(dp41404
S'description'
p41405
S'Time at which this function is totally turned off\n'
p41406
sS'cpp_type'
p41407
S'double'
p41408
sS'default'
p41409
S'1e+30'
p41410
sS'name'
p41411
S'deactivation_time'
p41412
sS'required'
p41413
I00
sS'group_name'
p41414
Nsa(dp41415
S'description'
p41416
S'End position of the excavation.  This is an (x,y,z) point in the middle of the coal face at the very end of the panel.\n'
p41417
sS'cpp_type'
p41418
S'libMesh::VectorValue<double>'
p41419
sS'default'
p41420
g3
sS'name'
p41421
S'end_posn'
p41422
sS'required'
p41423
I01
sS'group_name'
p41424
Nsa(dp41425
S'description'
p41426
S'Time at the completion of the excavation\n'
p41427
sS'cpp_type'
p41428
S'double'
p41429
sS'default'
p41430
g3
sS'name'
p41431
S'end_time'
p41432
sS'required'
p41433
I01
sS'group_name'
p41434
Nsa(dp41435
S'description'
p41436
S'Start point of the excavation.  This is an (x,y,z) point in the middle of the coal face at the very beginning of the panel.\n'
p41437
sS'cpp_type'
p41438
S'libMesh::VectorValue<double>'
p41439
sS'default'
p41440
g3
sS'name'
p41441
S'start_posn'
p41442
sS'required'
p41443
I01
sS'group_name'
p41444
Nsa(dp41445
S'description'
p41446
S'Commencement time of the excavation\n'
p41447
sS'cpp_type'
p41448
S'double'
p41449
sS'default'
p41450
g3
sS'name'
p41451
S'start_time'
p41452
sS'required'
p41453
I01
sS'group_name'
p41454
Nsa(dp41455
S'description'
p41456
S'Return this value if a point is in the active zone.  This is usually used for controlling permeability-changes\n'
p41457
sS'cpp_type'
p41458
S'double'
p41459
sS'default'
p41460
S'1'
p41461
sS'name'
p41462
S'true_value'
p41463
sS'required'
p41464
I00
sS'group_name'
p41465
Nsa(dp41466
S'description'
p41467
g3
sS'cpp_type'
p41468
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41469
sS'default'
p41470
S'RichardsExcavGeom'
p41471
sS'name'
p41472
S'type'
p41473
sS'required'
p41474
I00
sS'group_name'
p41475
NsasS'name'
p41476
S'/Functions/RichardsExcavGeom'
p41477
sa(dp41478
S'description'
p41479
g3
sS'subblocks'
p41480
NsS'parameters'
p41481
(lp41482
(dp41483
S'description'
p41484
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p41485
sS'cpp_type'
p41486
S'double'
p41487
sS'default'
p41488
S'0'
p41489
sS'name'
p41490
S'add_factor'
p41491
sS'required'
p41492
I00
sS'group_name'
p41493
Nsa(dp41494
S'description'
p41495
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41496
sS'cpp_type'
p41497
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41498
sS'default'
p41499
g3
sS'name'
p41500
S'control_tags'
p41501
sS'required'
p41502
I00
sS'group_name'
p41503
Nsa(dp41504
S'description'
p41505
S'The name of the variable in the file that is to be extracted\n'
p41506
sS'cpp_type'
p41507
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41508
sS'default'
p41509
g3
sS'name'
p41510
S'from_variable'
p41511
sS'required'
p41512
I00
sS'group_name'
p41513
Nsa(dp41514
S'description'
p41515
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p41516
sS'cpp_type'
p41517
S'double'
p41518
sS'default'
p41519
S'1'
p41520
sS'name'
p41521
S'scale_factor'
p41522
sS'required'
p41523
I00
sS'group_name'
p41524
Nsa(dp41525
S'description'
p41526
S'The SolutionUserObject to extract data from.\n'
p41527
sS'cpp_type'
p41528
S'UserObjectName'
p41529
sS'default'
p41530
g3
sS'name'
p41531
S'solution'
p41532
sS'required'
p41533
I01
sS'group_name'
p41534
Nsa(dp41535
S'description'
p41536
g3
sS'cpp_type'
p41537
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41538
sS'default'
p41539
S'SolutionFunction'
p41540
sS'name'
p41541
S'type'
p41542
sS'required'
p41543
I00
sS'group_name'
p41544
NsasS'name'
p41545
S'/Functions/SolutionFunction'
p41546
sa(dp41547
S'description'
p41548
g3
sS'subblocks'
p41549
NsS'parameters'
p41550
(lp41551
(dp41552
S'description'
p41553
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41554
sS'cpp_type'
p41555
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41556
sS'default'
p41557
g3
sS'name'
p41558
S'control_tags'
p41559
sS'required'
p41560
I00
sS'group_name'
p41561
Nsa(dp41562
S'description'
p41563
g3
sS'cpp_type'
p41564
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41565
sS'default'
p41566
S'SplineFunction'
p41567
sS'name'
p41568
S'type'
p41569
sS'required'
p41570
I00
sS'group_name'
p41571
Nsa(dp41572
S'description'
p41573
S'The abscissa values\n'
p41574
sS'cpp_type'
p41575
S'std::vector<double, std::allocator<double> >'
p41576
sS'default'
p41577
g3
sS'name'
p41578
S'x'
p41579
sS'required'
p41580
I01
sS'group_name'
p41581
Nsa(dp41582
S'description'
p41583
S'The ordinate values\n'
p41584
sS'cpp_type'
p41585
S'std::vector<double, std::allocator<double> >'
p41586
sS'default'
p41587
g3
sS'name'
p41588
S'y'
p41589
sS'required'
p41590
I01
sS'group_name'
p41591
Nsa(dp41592
S'description'
p41593
S'The value of the first derivative of the interpolating function at point 1\n'
p41594
sS'cpp_type'
p41595
S'double'
p41596
sS'default'
p41597
S'1e+30'
p41598
sS'name'
p41599
S'yp1'
p41600
sS'required'
p41601
I00
sS'group_name'
p41602
Nsa(dp41603
S'description'
p41604
S'The value of the first derivative of the interpolating function at point n\n'
p41605
sS'cpp_type'
p41606
S'double'
p41607
sS'default'
p41608
S'1e+30'
p41609
sS'name'
p41610
S'ypn'
p41611
sS'required'
p41612
I00
sS'group_name'
p41613
NsasS'name'
p41614
S'/Functions/SplineFunction'
p41615
sasS'parameters'
p41616
NsS'name'
p41617
S'/Functions'
p41618
sa(dp41619
S'description'
p41620
g3
sS'subblocks'
p41621
NsS'parameters'
p41622
NsS'name'
p41623
S'/GlobalParams'
p41624
sa(dp41625
S'description'
p41626
g3
sS'subblocks'
p41627
(lp41628
(dp41629
S'description'
p41630
g3
sS'subblocks'
p41631
NsS'parameters'
p41632
(lp41633
(dp41634
S'description'
p41635
S'A string representing the Moose Object that will be built by this Action\n'
p41636
sS'cpp_type'
p41637
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41638
sS'default'
p41639
g3
sS'name'
p41640
S'type'
p41641
sS'required'
p41642
I01
sS'group_name'
p41643
NsasS'name'
p41644
S'/ICs/*'
p41645
sa(dp41646
S'description'
p41647
g3
sS'subblocks'
p41648
NsS'parameters'
p41649
(lp41650
(dp41651
S'description'
p41652
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41653
sS'cpp_type'
p41654
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41655
sS'default'
p41656
g3
sS'name'
p41657
S'block'
p41658
sS'required'
p41659
I00
sS'group_name'
p41660
Nsa(dp41661
S'description'
p41662
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41663
sS'cpp_type'
p41664
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p41665
sS'default'
p41666
g3
sS'name'
p41667
S'boundary'
p41668
sS'required'
p41669
I00
sS'group_name'
p41670
Nsa(dp41671
S'description'
p41672
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41673
sS'cpp_type'
p41674
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41675
sS'default'
p41676
g3
sS'name'
p41677
S'control_tags'
p41678
sS'required'
p41679
I00
sS'group_name'
p41680
Nsa(dp41681
S'description'
p41682
S'The value of the variable inside the box\n'
p41683
sS'cpp_type'
p41684
S'double'
p41685
sS'default'
p41686
S'0'
p41687
sS'name'
p41688
S'inside'
p41689
sS'required'
p41690
I00
sS'group_name'
p41691
Nsa(dp41692
S'description'
p41693
S'The value of the variable outside the box\n'
p41694
sS'cpp_type'
p41695
S'double'
p41696
sS'default'
p41697
S'0'
p41698
sS'name'
p41699
S'outside'
p41700
sS'required'
p41701
I00
sS'group_name'
p41702
Nsa(dp41703
S'description'
p41704
g3
sS'cpp_type'
p41705
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41706
sS'default'
p41707
S'BoundingBoxIC'
p41708
sS'name'
p41709
S'type'
p41710
sS'required'
p41711
I00
sS'group_name'
p41712
Nsa(dp41713
S'description'
p41714
S'The variable this initial condition is supposed to provide values for.\n'
p41715
sS'cpp_type'
p41716
S'VariableName'
p41717
sS'default'
p41718
g3
sS'name'
p41719
S'variable'
p41720
sS'required'
p41721
I01
sS'group_name'
p41722
Nsa(dp41723
S'description'
p41724
S'The x coordinate of the lower left-hand corner of the box\n'
p41725
sS'cpp_type'
p41726
S'double'
p41727
sS'default'
p41728
g3
sS'name'
p41729
S'x1'
p41730
sS'required'
p41731
I01
sS'group_name'
p41732
Nsa(dp41733
S'description'
p41734
S'The x coordinate of the upper right-hand corner of the box\n'
p41735
sS'cpp_type'
p41736
S'double'
p41737
sS'default'
p41738
g3
sS'name'
p41739
S'x2'
p41740
sS'required'
p41741
I01
sS'group_name'
p41742
Nsa(dp41743
S'description'
p41744
S'The y coordinate of the lower left-hand corner of the box\n'
p41745
sS'cpp_type'
p41746
S'double'
p41747
sS'default'
p41748
g3
sS'name'
p41749
S'y1'
p41750
sS'required'
p41751
I01
sS'group_name'
p41752
Nsa(dp41753
S'description'
p41754
S'The y coordinate of the upper right-hand corner of the box\n'
p41755
sS'cpp_type'
p41756
S'double'
p41757
sS'default'
p41758
g3
sS'name'
p41759
S'y2'
p41760
sS'required'
p41761
I01
sS'group_name'
p41762
Nsa(dp41763
S'description'
p41764
S'The z coordinate of the lower left-hand corner of the box\n'
p41765
sS'cpp_type'
p41766
S'double'
p41767
sS'default'
p41768
S'0'
p41769
sS'name'
p41770
S'z1'
p41771
sS'required'
p41772
I00
sS'group_name'
p41773
Nsa(dp41774
S'description'
p41775
S'The z coordinate of the upper right-hand corner of the box\n'
p41776
sS'cpp_type'
p41777
S'double'
p41778
sS'default'
p41779
S'0'
p41780
sS'name'
p41781
S'z2'
p41782
sS'required'
p41783
I00
sS'group_name'
p41784
NsasS'name'
p41785
S'/ICs/BoundingBoxIC'
p41786
sa(dp41787
S'description'
p41788
S'Close packed arrangement of smooth circles\n'
p41789
sS'subblocks'
p41790
NsS'parameters'
p41791
(lp41792
(dp41793
S'description'
p41794
S'in 3D, whether the objects are spheres or columns\n'
p41795
sS'cpp_type'
p41796
S'bool'
p41797
sS'default'
p41798
S'1'
p41799
sS'name'
p41800
S'3D_spheres'
p41801
sS'required'
p41802
I00
sS'group_name'
p41803
Nsa(dp41804
S'description'
p41805
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41806
sS'cpp_type'
p41807
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41808
sS'default'
p41809
g3
sS'name'
p41810
S'block'
p41811
sS'required'
p41812
I00
sS'group_name'
p41813
Nsa(dp41814
S'description'
p41815
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41816
sS'cpp_type'
p41817
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p41818
sS'default'
p41819
g3
sS'name'
p41820
S'boundary'
p41821
sS'required'
p41822
I00
sS'group_name'
p41823
Nsa(dp41824
S'description'
p41825
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41826
sS'cpp_type'
p41827
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41828
sS'default'
p41829
g3
sS'name'
p41830
S'control_tags'
p41831
sS'required'
p41832
I00
sS'group_name'
p41833
Nsa(dp41834
S'description'
p41835
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p41836
sS'cpp_type'
p41837
S'double'
p41838
sS'default'
p41839
S'0'
p41840
sS'name'
p41841
S'int_width'
p41842
sS'required'
p41843
I00
sS'group_name'
p41844
Nsa(dp41845
S'description'
p41846
S'The variable value inside the circle\n'
p41847
sS'cpp_type'
p41848
S'double'
p41849
sS'default'
p41850
g3
sS'name'
p41851
S'invalue'
p41852
sS'required'
p41853
I01
sS'group_name'
p41854
Nsa(dp41855
S'description'
p41856
S'The variable value outside the circle\n'
p41857
sS'cpp_type'
p41858
S'double'
p41859
sS'default'
p41860
g3
sS'name'
p41861
S'outvalue'
p41862
sS'required'
p41863
I01
sS'group_name'
p41864
Nsa(dp41865
S'description'
p41866
S'The radius of a circle\n'
p41867
sS'cpp_type'
p41868
S'double'
p41869
sS'default'
p41870
g3
sS'name'
p41871
S'radius'
p41872
sS'required'
p41873
I01
sS'group_name'
p41874
Nsa(dp41875
S'description'
p41876
S'Seed value for the random number generator\n'
p41877
sS'cpp_type'
p41878
S'unsigned int'
p41879
sS'default'
p41880
S'12345'
p41881
sS'name'
p41882
S'rand_seed'
p41883
sS'required'
p41884
I00
sS'group_name'
p41885
Nsa(dp41886
S'description'
p41887
g3
sS'cpp_type'
p41888
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41889
sS'default'
p41890
S'ClosePackIC'
p41891
sS'name'
p41892
S'type'
p41893
sS'required'
p41894
I00
sS'group_name'
p41895
Nsa(dp41896
S'description'
p41897
S'The variable this initial condition is supposed to provide values for.\n'
p41898
sS'cpp_type'
p41899
S'VariableName'
p41900
sS'default'
p41901
g3
sS'name'
p41902
S'variable'
p41903
sS'required'
p41904
I01
sS'group_name'
p41905
Nsa(dp41906
S'description'
p41907
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p41908
sS'cpp_type'
p41909
S'bool'
p41910
sS'default'
p41911
S'0'
p41912
sS'name'
p41913
S'zero_gradient'
p41914
sS'required'
p41915
I00
sS'group_name'
p41916
NsasS'name'
p41917
S'/ICs/ClosePackIC'
p41918
sa(dp41919
S'description'
p41920
g3
sS'subblocks'
p41921
NsS'parameters'
p41922
(lp41923
(dp41924
S'description'
p41925
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41926
sS'cpp_type'
p41927
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p41928
sS'default'
p41929
g3
sS'name'
p41930
S'block'
p41931
sS'required'
p41932
I00
sS'group_name'
p41933
Nsa(dp41934
S'description'
p41935
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41936
sS'cpp_type'
p41937
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p41938
sS'default'
p41939
g3
sS'name'
p41940
S'boundary'
p41941
sS'required'
p41942
I00
sS'group_name'
p41943
Nsa(dp41944
S'description'
p41945
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41946
sS'cpp_type'
p41947
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p41948
sS'default'
p41949
g3
sS'name'
p41950
S'control_tags'
p41951
sS'required'
p41952
I00
sS'group_name'
p41953
Nsa(dp41954
S'description'
p41955
g3
sS'cpp_type'
p41956
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p41957
sS'default'
p41958
S'ConstantIC'
p41959
sS'name'
p41960
S'type'
p41961
sS'required'
p41962
I00
sS'group_name'
p41963
Nsa(dp41964
S'description'
p41965
S'The value to be set in IC\n'
p41966
sS'cpp_type'
p41967
S'double'
p41968
sS'default'
p41969
g3
sS'name'
p41970
S'value'
p41971
sS'required'
p41972
I01
sS'group_name'
p41973
Nsa(dp41974
S'description'
p41975
S'The variable this initial condition is supposed to provide values for.\n'
p41976
sS'cpp_type'
p41977
S'VariableName'
p41978
sS'default'
p41979
g3
sS'name'
p41980
S'variable'
p41981
sS'required'
p41982
I01
sS'group_name'
p41983
NsasS'name'
p41984
S'/ICs/ConstantIC'
p41985
sa(dp41986
S'description'
p41987
S'Cross-shaped initial condition\n'
p41988
sS'subblocks'
p41989
NsS'parameters'
p41990
(lp41991
(dp41992
S'description'
p41993
S'The amplitude\n'
p41994
sS'cpp_type'
p41995
S'double'
p41996
sS'default'
p41997
S'1'
p41998
sS'name'
p41999
S'amplitude'
p42000
sS'required'
p42001
I00
sS'group_name'
p42002
Nsa(dp42003
S'description'
p42004
S'The average value\n'
p42005
sS'cpp_type'
p42006
S'double'
p42007
sS'default'
p42008
S'0'
p42009
sS'name'
p42010
S'average'
p42011
sS'required'
p42012
I00
sS'group_name'
p42013
Nsa(dp42014
S'description'
p42015
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42016
sS'cpp_type'
p42017
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42018
sS'default'
p42019
g3
sS'name'
p42020
S'block'
p42021
sS'required'
p42022
I00
sS'group_name'
p42023
Nsa(dp42024
S'description'
p42025
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42026
sS'cpp_type'
p42027
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p42028
sS'default'
p42029
g3
sS'name'
p42030
S'boundary'
p42031
sS'required'
p42032
I00
sS'group_name'
p42033
Nsa(dp42034
S'description'
p42035
S'A small area between the max value and the interface\n'
p42036
sS'cpp_type'
p42037
S'double'
p42038
sS'default'
p42039
S'0.03125'
p42040
sS'name'
p42041
S'buffer'
p42042
sS'required'
p42043
I00
sS'group_name'
p42044
Nsa(dp42045
S'description'
p42046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42047
sS'cpp_type'
p42048
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42049
sS'default'
p42050
g3
sS'name'
p42051
S'control_tags'
p42052
sS'required'
p42053
I00
sS'group_name'
p42054
Nsa(dp42055
S'description'
p42056
S'The interface width\n'
p42057
sS'cpp_type'
p42058
S'double'
p42059
sS'default'
p42060
S'0.03125'
p42061
sS'name'
p42062
S'interface'
p42063
sS'required'
p42064
I00
sS'group_name'
p42065
Nsa(dp42066
S'description'
p42067
S'The length\n'
p42068
sS'cpp_type'
p42069
S'double'
p42070
sS'default'
p42071
S'0.75'
p42072
sS'name'
p42073
S'length'
p42074
sS'required'
p42075
I00
sS'group_name'
p42076
Nsa(dp42077
S'description'
p42078
g3
sS'cpp_type'
p42079
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42080
sS'default'
p42081
S'CrossIC'
p42082
sS'name'
p42083
S'type'
p42084
sS'required'
p42085
I00
sS'group_name'
p42086
Nsa(dp42087
S'description'
p42088
S'The variable this initial condition is supposed to provide values for.\n'
p42089
sS'cpp_type'
p42090
S'VariableName'
p42091
sS'default'
p42092
g3
sS'name'
p42093
S'variable'
p42094
sS'required'
p42095
I01
sS'group_name'
p42096
Nsa(dp42097
S'description'
p42098
S'The width\n'
p42099
sS'cpp_type'
p42100
S'double'
p42101
sS'default'
p42102
S'0.125'
p42103
sS'name'
p42104
S'width'
p42105
sS'required'
p42106
I00
sS'group_name'
p42107
Nsa(dp42108
S'description'
p42109
S'The x coordinate of the lower left-hand corner of the box\n'
p42110
sS'cpp_type'
p42111
S'double'
p42112
sS'default'
p42113
S'0'
p42114
sS'name'
p42115
S'x1'
p42116
sS'required'
p42117
I00
sS'group_name'
p42118
Nsa(dp42119
S'description'
p42120
S'The x coordinate of the upper right-hand corner of the box\n'
p42121
sS'cpp_type'
p42122
S'double'
p42123
sS'default'
p42124
S'1'
p42125
sS'name'
p42126
S'x2'
p42127
sS'required'
p42128
I00
sS'group_name'
p42129
Nsa(dp42130
S'description'
p42131
S'The y coordinate of the lower left-hand corner of the box\n'
p42132
sS'cpp_type'
p42133
S'double'
p42134
sS'default'
p42135
S'0'
p42136
sS'name'
p42137
S'y1'
p42138
sS'required'
p42139
I00
sS'group_name'
p42140
Nsa(dp42141
S'description'
p42142
S'The y coordinate of the upper right-hand corner of the box\n'
p42143
sS'cpp_type'
p42144
S'double'
p42145
sS'default'
p42146
S'1'
p42147
sS'name'
p42148
S'y2'
p42149
sS'required'
p42150
I00
sS'group_name'
p42151
NsasS'name'
p42152
S'/ICs/CrossIC'
p42153
sa(dp42154
S'description'
p42155
g3
sS'subblocks'
p42156
NsS'parameters'
p42157
(lp42158
(dp42159
S'description'
p42160
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42161
sS'cpp_type'
p42162
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42163
sS'default'
p42164
g3
sS'name'
p42165
S'block'
p42166
sS'required'
p42167
I00
sS'group_name'
p42168
Nsa(dp42169
S'description'
p42170
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42171
sS'cpp_type'
p42172
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p42173
sS'default'
p42174
g3
sS'name'
p42175
S'boundary'
p42176
sS'required'
p42177
I00
sS'group_name'
p42178
Nsa(dp42179
S'description'
p42180
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42181
sS'cpp_type'
p42182
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42183
sS'default'
p42184
g3
sS'name'
p42185
S'control_tags'
p42186
sS'required'
p42187
I00
sS'group_name'
p42188
Nsa(dp42189
S'description'
p42190
S'The initial condition function.\n'
p42191
sS'cpp_type'
p42192
S'FunctionName'
p42193
sS'default'
p42194
g3
sS'name'
p42195
S'function'
p42196
sS'required'
p42197
I01
sS'group_name'
p42198
Nsa(dp42199
S'description'
p42200
g3
sS'cpp_type'
p42201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42202
sS'default'
p42203
S'FunctionIC'
p42204
sS'name'
p42205
S'type'
p42206
sS'required'
p42207
I00
sS'group_name'
p42208
Nsa(dp42209
S'description'
p42210
S'The variable this initial condition is supposed to provide values for.\n'
p42211
sS'cpp_type'
p42212
S'VariableName'
p42213
sS'default'
p42214
g3
sS'name'
p42215
S'variable'
p42216
sS'required'
p42217
I01
sS'group_name'
p42218
NsasS'name'
p42219
S'/ICs/FunctionIC'
p42220
sa(dp42221
S'description'
p42222
S'Perturbed hexagonal polycrystal\n'
p42223
sS'subblocks'
p42224
NsS'parameters'
p42225
(lp42226
(dp42227
S'description'
p42228
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42229
sS'cpp_type'
p42230
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42231
sS'default'
p42232
g3
sS'name'
p42233
S'block'
p42234
sS'required'
p42235
I00
sS'group_name'
p42236
Nsa(dp42237
S'description'
p42238
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42239
sS'cpp_type'
p42240
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p42241
sS'default'
p42242
g3
sS'name'
p42243
S'boundary'
p42244
sS'required'
p42245
I00
sS'group_name'
p42246
Nsa(dp42247
S'description'
p42248
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p42249
sS'cpp_type'
p42250
S'bool'
p42251
sS'default'
p42252
S'0'
p42253
sS'name'
p42254
S'cody_test'
p42255
sS'required'
p42256
I00
sS'group_name'
p42257
Nsa(dp42258
S'description'
p42259
S'3D microstructure will be columnar in the z-direction?\n'
p42260
sS'cpp_type'
p42261
S'bool'
p42262
sS'default'
p42263
S'0'
p42264
sS'name'
p42265
S'columnar_3D'
p42266
sS'required'
p42267
I00
sS'group_name'
p42268
Nsa(dp42269
S'description'
p42270
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42271
sS'cpp_type'
p42272
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42273
sS'default'
p42274
g3
sS'name'
p42275
S'control_tags'
p42276
sS'required'
p42277
I00
sS'group_name'
p42278
Nsa(dp42279
S'description'
p42280
S'Number of grains being represented by the order parameters\n'
p42281
sS'cpp_type'
p42282
S'unsigned int'
p42283
sS'default'
p42284
g3
sS'name'
p42285
S'grain_num'
p42286
sS'required'
p42287
I01
sS'group_name'
p42288
Nsa(dp42289
S'description'
p42290
S'The index for the current order parameter\n'
p42291
sS'cpp_type'
p42292
S'unsigned int'
p42293
sS'default'
p42294
g3
sS'name'
p42295
S'op_index'
p42296
sS'required'
p42297
I01
sS'group_name'
p42298
Nsa(dp42299
S'description'
p42300
S'Number of order parameters\n'
p42301
sS'cpp_type'
p42302
S'unsigned int'
p42303
sS'default'
p42304
g3
sS'name'
p42305
S'op_num'
p42306
sS'required'
p42307
I01
sS'group_name'
p42308
Nsa(dp42309
S'description'
p42310
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p42311
sS'cpp_type'
p42312
S'double'
p42313
sS'default'
p42314
S'0'
p42315
sS'name'
p42316
S'perturbation_percent'
p42317
sS'required'
p42318
I00
sS'group_name'
p42319
Nsa(dp42320
S'description'
p42321
S'The random seed\n'
p42322
sS'cpp_type'
p42323
S'unsigned int'
p42324
sS'default'
p42325
S'12444'
p42326
sS'name'
p42327
S'rand_seed'
p42328
sS'required'
p42329
I00
sS'group_name'
p42330
Nsa(dp42331
S'description'
p42332
g3
sS'cpp_type'
p42333
S'int'
p42334
sS'default'
p42335
S'1'
p42336
sS'name'
p42337
S'typ'
p42338
sS'required'
p42339
I00
sS'group_name'
p42340
Nsa(dp42341
S'description'
p42342
g3
sS'cpp_type'
p42343
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42344
sS'default'
p42345
S'HexPolycrystalIC'
p42346
sS'name'
p42347
S'type'
p42348
sS'required'
p42349
I00
sS'group_name'
p42350
Nsa(dp42351
S'description'
p42352
S'The variable this initial condition is supposed to provide values for.\n'
p42353
sS'cpp_type'
p42354
S'VariableName'
p42355
sS'default'
p42356
g3
sS'name'
p42357
S'variable'
p42358
sS'required'
p42359
I01
sS'group_name'
p42360
Nsa(dp42361
S'description'
p42362
S'Specifies offset of hexagon grid in x-direction\n'
p42363
sS'cpp_type'
p42364
S'double'
p42365
sS'default'
p42366
S'0.5'
p42367
sS'name'
p42368
S'x_offset'
p42369
sS'required'
p42370
I00
sS'group_name'
p42371
NsasS'name'
p42372
S'/ICs/HexPolycrystalIC'
p42373
sa(dp42374
S'description'
p42375
S'Perturbed square lattice of smooth circles\n'
p42376
sS'subblocks'
p42377
NsS'parameters'
p42378
(lp42379
(dp42380
S'description'
p42381
S'in 3D, whether the objects are spheres or columns\n'
p42382
sS'cpp_type'
p42383
S'bool'
p42384
sS'default'
p42385
S'1'
p42386
sS'name'
p42387
S'3D_spheres'
p42388
sS'required'
p42389
I00
sS'group_name'
p42390
Nsa(dp42391
S'description'
p42392
S'Variation from central lattice position\n'
p42393
sS'cpp_type'
p42394
S'double'
p42395
sS'default'
p42396
g3
sS'name'
p42397
S'Rnd_variation'
p42398
sS'required'
p42399
I00
sS'group_name'
p42400
Nsa(dp42401
S'description'
p42402
S"Don't place any bubbles on the simulation cell boundaries\n"
p42403
sS'cpp_type'
p42404
S'bool'
p42405
sS'default'
p42406
S'1'
p42407
sS'name'
p42408
S'avoid_bounds'
p42409
sS'required'
p42410
I00
sS'group_name'
p42411
Nsa(dp42412
S'description'
p42413
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42414
sS'cpp_type'
p42415
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42416
sS'default'
p42417
g3
sS'name'
p42418
S'block'
p42419
sS'required'
p42420
I00
sS'group_name'
p42421
Nsa(dp42422
S'description'
p42423
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42424
sS'cpp_type'
p42425
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p42426
sS'default'
p42427
g3
sS'name'
p42428
S'boundary'
p42429
sS'required'
p42430
I00
sS'group_name'
p42431
Nsa(dp42432
S'description'
p42433
S'Vector containing the number of bubbles along each side\n'
p42434
sS'cpp_type'
p42435
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p42436
sS'default'
p42437
g3
sS'name'
p42438
S'circles_per_side'
p42439
sS'required'
p42440
I01
sS'group_name'
p42441
Nsa(dp42442
S'description'
p42443
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42444
sS'cpp_type'
p42445
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42446
sS'default'
p42447
g3
sS'name'
p42448
S'control_tags'
p42449
sS'required'
p42450
I00
sS'group_name'
p42451
Nsa(dp42452
S'description'
p42453
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p42454
sS'cpp_type'
p42455
S'double'
p42456
sS'default'
p42457
S'0'
p42458
sS'name'
p42459
S'int_width'
p42460
sS'required'
p42461
I00
sS'group_name'
p42462
Nsa(dp42463
S'description'
p42464
S'The variable value inside the circle\n'
p42465
sS'cpp_type'
p42466
S'double'
p42467
sS'default'
p42468
g3
sS'name'
p42469
S'invalue'
p42470
sS'required'
p42471
I01
sS'group_name'
p42472
Nsa(dp42473
S'description'
p42474
S'The variable value outside the circle\n'
p42475
sS'cpp_type'
p42476
S'double'
p42477
sS'default'
p42478
g3
sS'name'
p42479
S'outvalue'
p42480
sS'required'
p42481
I01
sS'group_name'
p42482
Nsa(dp42483
S'description'
p42484
S'Variation from central lattice position\n'
p42485
sS'cpp_type'
p42486
S'double'
p42487
sS'default'
p42488
S'0'
p42489
sS'name'
p42490
S'pos_variation'
p42491
sS'required'
p42492
I00
sS'group_name'
p42493
Nsa(dp42494
S'description'
p42495
S'Mean radius value for the circels\n'
p42496
sS'cpp_type'
p42497
S'double'
p42498
sS'default'
p42499
g3
sS'name'
p42500
S'radius'
p42501
sS'required'
p42502
I01
sS'group_name'
p42503
Nsa(dp42504
S'description'
p42505
S'Plus or minus fraction of random variation in the bubble radius\n'
p42506
sS'cpp_type'
p42507
S'double'
p42508
sS'default'
p42509
S'0'
p42510
sS'name'
p42511
S'radius_variation'
p42512
sS'required'
p42513
I00
sS'group_name'
p42514
Nsa(dp42515
S'name'
p42516
S'radius_variation_type'
p42517
sS'cpp_type'
p42518
S'MooseEnum'
p42519
sS'default'
p42520
S'none'
p42521
sS'description'
p42522
S'Type of distribution that random circle radii will follow\n'
p42523
sS'required'
p42524
I00
sS'options'
p42525
S'uniform normal none'
p42526
sS'group_name'
p42527
Nsa(dp42528
S'description'
p42529
S'random seed\n'
p42530
sS'cpp_type'
p42531
S'unsigned int'
p42532
sS'default'
p42533
S'2000'
p42534
sS'name'
p42535
S'rand_seed'
p42536
sS'required'
p42537
I00
sS'group_name'
p42538
Nsa(dp42539
S'description'
p42540
g3
sS'cpp_type'
p42541
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42542
sS'default'
p42543
S'LatticeSmoothCircleIC'
p42544
sS'name'
p42545
S'type'
p42546
sS'required'
p42547
I00
sS'group_name'
p42548
Nsa(dp42549
S'description'
p42550
S'The variable this initial condition is supposed to provide values for.\n'
p42551
sS'cpp_type'
p42552
S'VariableName'
p42553
sS'default'
p42554
g3
sS'name'
p42555
S'variable'
p42556
sS'required'
p42557
I01
sS'group_name'
p42558
Nsa(dp42559
S'description'
p42560
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p42561
sS'cpp_type'
p42562
S'bool'
p42563
sS'default'
p42564
S'0'
p42565
sS'name'
p42566
S'zero_gradient'
p42567
sS'required'
p42568
I00
sS'group_name'
p42569
NsasS'name'
p42570
S'/ICs/LatticeSmoothCircleIC'
p42571
sa(dp42572
S'description'
p42573
S'Random distribution of smooth circles with given minimum spacing\n'
p42574
sS'subblocks'
p42575
NsS'parameters'
p42576
(lp42577
(dp42578
S'description'
p42579
S'in 3D, whether the objects are spheres or columns\n'
p42580
sS'cpp_type'
p42581
S'bool'
p42582
sS'default'
p42583
S'1'
p42584
sS'name'
p42585
S'3D_spheres'
p42586
sS'required'
p42587
I00
sS'group_name'
p42588
Nsa(dp42589
S'description'
p42590
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42591
sS'cpp_type'
p42592
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42593
sS'default'
p42594
g3
sS'name'
p42595
S'block'
p42596
sS'required'
p42597
I00
sS'group_name'
p42598
Nsa(dp42599
S'description'
p42600
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42601
sS'cpp_type'
p42602
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p42603
sS'default'
p42604
g3
sS'name'
p42605
S'boundary'
p42606
sS'required'
p42607
I00
sS'group_name'
p42608
Nsa(dp42609
S'description'
p42610
S'minimum spacing of bubbles, measured from center to center\n'
p42611
sS'cpp_type'
p42612
S'double'
p42613
sS'default'
p42614
g3
sS'name'
p42615
S'bubspac'
p42616
sS'required'
p42617
I01
sS'group_name'
p42618
Nsa(dp42619
S'description'
p42620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42621
sS'cpp_type'
p42622
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42623
sS'default'
p42624
g3
sS'name'
p42625
S'control_tags'
p42626
sS'required'
p42627
I00
sS'group_name'
p42628
Nsa(dp42629
S'description'
p42630
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p42631
sS'cpp_type'
p42632
S'double'
p42633
sS'default'
p42634
S'0'
p42635
sS'name'
p42636
S'int_width'
p42637
sS'required'
p42638
I00
sS'group_name'
p42639
Nsa(dp42640
S'description'
p42641
S'The variable value inside the circle\n'
p42642
sS'cpp_type'
p42643
S'double'
p42644
sS'default'
p42645
g3
sS'name'
p42646
S'invalue'
p42647
sS'required'
p42648
I01
sS'group_name'
p42649
Nsa(dp42650
S'description'
p42651
S'The number of bubbles to place\n'
p42652
sS'cpp_type'
p42653
S'unsigned int'
p42654
sS'default'
p42655
g3
sS'name'
p42656
S'numbub'
p42657
sS'required'
p42658
I01
sS'group_name'
p42659
Nsa(dp42660
S'description'
p42661
S'The number of tries\n'
p42662
sS'cpp_type'
p42663
S'unsigned int'
p42664
sS'default'
p42665
S'1000'
p42666
sS'name'
p42667
S'numtries'
p42668
sS'required'
p42669
I00
sS'group_name'
p42670
Nsa(dp42671
S'description'
p42672
S'The variable value outside the circle\n'
p42673
sS'cpp_type'
p42674
S'double'
p42675
sS'default'
p42676
g3
sS'name'
p42677
S'outvalue'
p42678
sS'required'
p42679
I01
sS'group_name'
p42680
Nsa(dp42681
S'description'
p42682
S'Mean radius value for the circels\n'
p42683
sS'cpp_type'
p42684
S'double'
p42685
sS'default'
p42686
g3
sS'name'
p42687
S'radius'
p42688
sS'required'
p42689
I01
sS'group_name'
p42690
Nsa(dp42691
S'description'
p42692
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p42693
sS'cpp_type'
p42694
S'double'
p42695
sS'default'
p42696
S'0'
p42697
sS'name'
p42698
S'radius_variation'
p42699
sS'required'
p42700
I00
sS'group_name'
p42701
Nsa(dp42702
S'name'
p42703
S'radius_variation_type'
p42704
sS'cpp_type'
p42705
S'MooseEnum'
p42706
sS'default'
p42707
S'none'
p42708
sS'description'
p42709
S'Type of distribution that random circle radii will follow\n'
p42710
sS'required'
p42711
I00
sS'options'
p42712
S'uniform normal none'
p42713
sS'group_name'
p42714
Nsa(dp42715
S'description'
p42716
S'Seed value for the random number generator\n'
p42717
sS'cpp_type'
p42718
S'unsigned int'
p42719
sS'default'
p42720
S'12345'
p42721
sS'name'
p42722
S'rand_seed'
p42723
sS'required'
p42724
I00
sS'group_name'
p42725
Nsa(dp42726
S'description'
p42727
g3
sS'cpp_type'
p42728
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42729
sS'default'
p42730
S'MultiSmoothCircleIC'
p42731
sS'name'
p42732
S'type'
p42733
sS'required'
p42734
I00
sS'group_name'
p42735
Nsa(dp42736
S'description'
p42737
S'The variable this initial condition is supposed to provide values for.\n'
p42738
sS'cpp_type'
p42739
S'VariableName'
p42740
sS'default'
p42741
g3
sS'name'
p42742
S'variable'
p42743
sS'required'
p42744
I01
sS'group_name'
p42745
Nsa(dp42746
S'description'
p42747
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p42748
sS'cpp_type'
p42749
S'bool'
p42750
sS'default'
p42751
S'0'
p42752
sS'name'
p42753
S'zero_gradient'
p42754
sS'required'
p42755
I00
sS'group_name'
p42756
NsasS'name'
p42757
S'/ICs/MultiSmoothCircleIC'
p42758
sa(dp42759
S'description'
p42760
g3
sS'subblocks'
p42761
NsS'parameters'
p42762
(lp42763
(dp42764
S'description'
p42765
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42766
sS'cpp_type'
p42767
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p42768
sS'default'
p42769
g3
sS'name'
p42770
S'block'
p42771
sS'required'
p42772
I00
sS'group_name'
p42773
Nsa(dp42774
S'description'
p42775
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42776
sS'cpp_type'
p42777
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p42778
sS'default'
p42779
g3
sS'name'
p42780
S'boundary'
p42781
sS'required'
p42782
I00
sS'group_name'
p42783
Nsa(dp42784
S'description'
p42785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42786
sS'cpp_type'
p42787
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p42788
sS'default'
p42789
g3
sS'name'
p42790
S'control_tags'
p42791
sS'required'
p42792
I00
sS'group_name'
p42793
Nsa(dp42794
S'name'
p42795
S'crystal_structure'
p42796
sS'cpp_type'
p42797
S'MooseEnum'
p42798
sS'default'
p42799
g3
sS'description'
p42800
S'The type of crystal structure\n'
p42801
sS'required'
p42802
I00
sS'options'
p42803
S'FCC BCC'
p42804
sS'group_name'
p42805
Nsa(dp42806
S'description'
p42807
S'Value inside sinusoids\n'
p42808
sS'cpp_type'
p42809
S'double'
p42810
sS'default'
p42811
S'1'
p42812
sS'name'
p42813
S'inside'
p42814
sS'required'
p42815
I00
sS'group_name'
p42816
Nsa(dp42817
S'description'
p42818
S'The lattice constant off the crystal structure\n'
p42819
sS'cpp_type'
p42820
S'double'
p42821
sS'default'
p42822
g3
sS'name'
p42823
S'lc'
p42824
sS'required'
p42825
I01
sS'group_name'
p42826
Nsa(dp42827
S'description'
p42828
S'Upper bound of the randomly generated values\n'
p42829
sS'cpp_type'
p42830
S'double'
p42831
sS'default'
p42832
S'1'
p42833
sS'name'
p42834
S'max'
p42835
sS'required'
p42836
I00
sS'group_name'
p42837
Nsa(dp42838
S'description'
p42839
S'Lower bound of the randomly generated values\n'
p42840
sS'cpp_type'
p42841
S'double'
p42842
sS'default'
p42843
S'0'
p42844
sS'name'
p42845
S'min'
p42846
sS'required'
p42847
I00
sS'group_name'
p42848
Nsa(dp42849
S'description'
p42850
S'Value outside sinusoids\n'
p42851
sS'cpp_type'
p42852
S'double'
p42853
sS'default'
p42854
S'0'
p42855
sS'name'
p42856
S'outside'
p42857
sS'required'
p42858
I00
sS'group_name'
p42859
Nsa(dp42860
S'description'
p42861
S'Seed value for the random number generator\n'
p42862
sS'cpp_type'
p42863
S'unsigned int'
p42864
sS'default'
p42865
S'0'
p42866
sS'name'
p42867
S'seed'
p42868
sS'required'
p42869
I00
sS'group_name'
p42870
Nsa(dp42871
S'description'
p42872
g3
sS'cpp_type'
p42873
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42874
sS'default'
p42875
S'PFCFreezingIC'
p42876
sS'name'
p42877
S'type'
p42878
sS'required'
p42879
I00
sS'group_name'
p42880
Nsa(dp42881
S'description'
p42882
S'The variable this initial condition is supposed to provide values for.\n'
p42883
sS'cpp_type'
p42884
S'VariableName'
p42885
sS'default'
p42886
g3
sS'name'
p42887
S'variable'
p42888
sS'required'
p42889
I01
sS'group_name'
p42890
Nsa(dp42891
S'description'
p42892
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p42893
sS'cpp_type'
p42894
S'double'
p42895
sS'default'
p42896
g3
sS'name'
p42897
S'x1'
p42898
sS'required'
p42899
I01
sS'group_name'
p42900
Nsa(dp42901
S'description'
p42902
S'The x coordinate of the upper right-hand corner of the box\n'
p42903
sS'cpp_type'
p42904
S'double'
p42905
sS'default'
p42906
g3
sS'name'
p42907
S'x2'
p42908
sS'required'
p42909
I01
sS'group_name'
p42910
Nsa(dp42911
S'description'
p42912
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p42913
sS'cpp_type'
p42914
S'double'
p42915
sS'default'
p42916
g3
sS'name'
p42917
S'y1'
p42918
sS'required'
p42919
I01
sS'group_name'
p42920
Nsa(dp42921
S'description'
p42922
S'The y coordinate of the upper right-hand corner of the box\n'
p42923
sS'cpp_type'
p42924
S'double'
p42925
sS'default'
p42926
g3
sS'name'
p42927
S'y2'
p42928
sS'required'
p42929
I01
sS'group_name'
p42930
Nsa(dp42931
S'description'
p42932
S'The z coordinate of the lower left-hand corner of the box\n'
p42933
sS'cpp_type'
p42934
S'double'
p42935
sS'default'
p42936
S'0'
p42937
sS'name'
p42938
S'z1'
p42939
sS'required'
p42940
I00
sS'group_name'
p42941
Nsa(dp42942
S'description'
p42943
S'The z coordinate of the upper right-hand corner of the box\n'
p42944
sS'cpp_type'
p42945
S'double'
p42946
sS'default'
p42947
S'0'
p42948
sS'name'
p42949
S'z2'
p42950
sS'required'
p42951
I00
sS'group_name'
p42952
NsasS'name'
p42953
S'/ICs/PFCFreezingIC'
p42954
sa(dp42955
S'description'
p42956
g3
sS'subblocks'
p42957
(lp42958
(dp42959
S'description'
p42960
g3
sS'subblocks'
p42961
NsS'parameters'
p42962
(lp42963
(dp42964
S'description'
p42965
S'Number of grains, should be 2\n'
p42966
sS'cpp_type'
p42967
S'unsigned int'
p42968
sS'default'
p42969
g3
sS'name'
p42970
S'op_num'
p42971
sS'required'
p42972
I01
sS'group_name'
p42973
Nsa(dp42974
S'description'
p42975
S'specifies the base name of the variables\n'
p42976
sS'cpp_type'
p42977
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p42978
sS'default'
p42979
g3
sS'name'
p42980
S'var_name_base'
p42981
sS'required'
p42982
I01
sS'group_name'
p42983
Nsa(dp42984
S'description'
p42985
S'The x coordinate of the lower left-hand corner of the box\n'
p42986
sS'cpp_type'
p42987
S'double'
p42988
sS'default'
p42989
g3
sS'name'
p42990
S'x1'
p42991
sS'required'
p42992
I01
sS'group_name'
p42993
Nsa(dp42994
S'description'
p42995
S'The x coordinate of the upper right-hand corner of the box\n'
p42996
sS'cpp_type'
p42997
S'double'
p42998
sS'default'
p42999
g3
sS'name'
p43000
S'x2'
p43001
sS'required'
p43002
I01
sS'group_name'
p43003
Nsa(dp43004
S'description'
p43005
S'The y coordinate of the lower left-hand corner of the box\n'
p43006
sS'cpp_type'
p43007
S'double'
p43008
sS'default'
p43009
g3
sS'name'
p43010
S'y1'
p43011
sS'required'
p43012
I01
sS'group_name'
p43013
Nsa(dp43014
S'description'
p43015
S'The y coordinate of the upper right-hand corner of the box\n'
p43016
sS'cpp_type'
p43017
S'double'
p43018
sS'default'
p43019
g3
sS'name'
p43020
S'y2'
p43021
sS'required'
p43022
I01
sS'group_name'
p43023
Nsa(dp43024
S'description'
p43025
S'The z coordinate of the lower left-hand corner of the box\n'
p43026
sS'cpp_type'
p43027
S'double'
p43028
sS'default'
p43029
S'0'
p43030
sS'name'
p43031
S'z1'
p43032
sS'required'
p43033
I00
sS'group_name'
p43034
Nsa(dp43035
S'description'
p43036
S'The z coordinate of the upper right-hand corner of the box\n'
p43037
sS'cpp_type'
p43038
S'double'
p43039
sS'default'
p43040
S'0'
p43041
sS'name'
p43042
S'z2'
p43043
sS'required'
p43044
I00
sS'group_name'
p43045
NsasS'name'
p43046
S'/ICs/PolycrystalICs/BicrystalBoundingBoxIC'
p43047
sa(dp43048
S'description'
p43049
g3
sS'subblocks'
p43050
NsS'parameters'
p43051
(lp43052
(dp43053
S'description'
p43054
S'in 3D, whether the smaller grain is a spheres or columnar grain\n'
p43055
sS'cpp_type'
p43056
S'bool'
p43057
sS'default'
p43058
S'1'
p43059
sS'name'
p43060
S'3D_sphere'
p43061
sS'required'
p43062
I00
sS'group_name'
p43063
Nsa(dp43064
S'description'
p43065
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p43066
sS'cpp_type'
p43067
S'double'
p43068
sS'default'
p43069
S'0'
p43070
sS'name'
p43071
S'int_width'
p43072
sS'required'
p43073
I00
sS'group_name'
p43074
Nsa(dp43075
S'description'
p43076
S'Number of grains, should be 2\n'
p43077
sS'cpp_type'
p43078
S'unsigned int'
p43079
sS'default'
p43080
g3
sS'name'
p43081
S'op_num'
p43082
sS'required'
p43083
I01
sS'group_name'
p43084
Nsa(dp43085
S'description'
p43086
S'Void radius\n'
p43087
sS'cpp_type'
p43088
S'double'
p43089
sS'default'
p43090
g3
sS'name'
p43091
S'radius'
p43092
sS'required'
p43093
I01
sS'group_name'
p43094
Nsa(dp43095
S'description'
p43096
S'specifies the base name of the variables\n'
p43097
sS'cpp_type'
p43098
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43099
sS'default'
p43100
g3
sS'name'
p43101
S'var_name_base'
p43102
sS'required'
p43103
I01
sS'group_name'
p43104
Nsa(dp43105
S'description'
p43106
S'The x coordinate of the circle grain center\n'
p43107
sS'cpp_type'
p43108
S'double'
p43109
sS'default'
p43110
g3
sS'name'
p43111
S'x'
p43112
sS'required'
p43113
I01
sS'group_name'
p43114
Nsa(dp43115
S'description'
p43116
S'The y coordinate of the circle grain center\n'
p43117
sS'cpp_type'
p43118
S'double'
p43119
sS'default'
p43120
g3
sS'name'
p43121
S'y'
p43122
sS'required'
p43123
I01
sS'group_name'
p43124
Nsa(dp43125
S'description'
p43126
S'The z coordinate of the circle grain center\n'
p43127
sS'cpp_type'
p43128
S'double'
p43129
sS'default'
p43130
S'0'
p43131
sS'name'
p43132
S'z'
p43133
sS'required'
p43134
I00
sS'group_name'
p43135
NsasS'name'
p43136
S'/ICs/PolycrystalICs/BicrystalCircleGrainIC'
p43137
sa(dp43138
S'description'
p43139
g3
sS'subblocks'
p43140
NsS'parameters'
p43141
(lp43142
(dp43143
S'description'
p43144
S'Number of grains, must be a square (4, 9, 16, etc)\n'
p43145
sS'cpp_type'
p43146
S'unsigned int'
p43147
sS'default'
p43148
g3
sS'name'
p43149
S'grain_num'
p43150
sS'required'
p43151
I01
sS'group_name'
p43152
Nsa(dp43153
S'description'
p43154
S'Number of order parameters\n'
p43155
sS'cpp_type'
p43156
S'unsigned int'
p43157
sS'default'
p43158
g3
sS'name'
p43159
S'op_num'
p43160
sS'required'
p43161
I01
sS'group_name'
p43162
Nsa(dp43163
S'description'
p43164
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p43165
sS'cpp_type'
p43166
S'double'
p43167
sS'default'
p43168
S'0'
p43169
sS'name'
p43170
S'perturbation_percent'
p43171
sS'required'
p43172
I00
sS'group_name'
p43173
Nsa(dp43174
S'description'
p43175
S'The random seed\n'
p43176
sS'cpp_type'
p43177
S'unsigned int'
p43178
sS'default'
p43179
S'12444'
p43180
sS'name'
p43181
S'rand_seed'
p43182
sS'required'
p43183
I00
sS'group_name'
p43184
Nsa(dp43185
S'description'
p43186
S'specifies the base name of the variables\n'
p43187
sS'cpp_type'
p43188
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43189
sS'default'
p43190
g3
sS'name'
p43191
S'var_name_base'
p43192
sS'required'
p43193
I01
sS'group_name'
p43194
Nsa(dp43195
S'description'
p43196
S'Specifies offset of hexagon grid in x-direction\n'
p43197
sS'cpp_type'
p43198
S'double'
p43199
sS'default'
p43200
S'0.5'
p43201
sS'name'
p43202
S'x_offset'
p43203
sS'required'
p43204
I00
sS'group_name'
p43205
NsasS'name'
p43206
S'/ICs/PolycrystalICs/PolycrystalHexGrainIC'
p43207
sa(dp43208
S'description'
p43209
g3
sS'subblocks'
p43210
NsS'parameters'
p43211
(lp43212
(dp43213
S'description'
p43214
S'number of order parameters to create\n'
p43215
sS'cpp_type'
p43216
S'unsigned int'
p43217
sS'default'
p43218
g3
sS'name'
p43219
S'op_num'
p43220
sS'required'
p43221
I01
sS'group_name'
p43222
Nsa(dp43223
S'name'
p43224
S'random_type'
p43225
sS'cpp_type'
p43226
S'MooseEnum'
p43227
sS'default'
p43228
g3
sS'description'
p43229
S'The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n'
p43230
sS'required'
p43231
I00
sS'options'
p43232
S'continuous discrete'
p43233
sS'group_name'
p43234
Nsa(dp43235
S'description'
p43236
S'specifies the base name of the variables\n'
p43237
sS'cpp_type'
p43238
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43239
sS'default'
p43240
g3
sS'name'
p43241
S'var_name_base'
p43242
sS'required'
p43243
I01
sS'group_name'
p43244
NsasS'name'
p43245
S'/ICs/PolycrystalICs/PolycrystalRandomIC'
p43246
sa(dp43247
S'description'
p43248
g3
sS'subblocks'
p43249
NsS'parameters'
p43250
(lp43251
(dp43252
S'description'
p43253
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p43254
sS'cpp_type'
p43255
S'bool'
p43256
sS'default'
p43257
S'0'
p43258
sS'name'
p43259
S'cody_test'
p43260
sS'required'
p43261
I00
sS'group_name'
p43262
Nsa(dp43263
S'description'
p43264
S'3D microstructure will be columnar in the z-direction?\n'
p43265
sS'cpp_type'
p43266
S'bool'
p43267
sS'default'
p43268
S'0'
p43269
sS'name'
p43270
S'columnar_3D'
p43271
sS'required'
p43272
I00
sS'group_name'
p43273
Nsa(dp43274
S'description'
p43275
S'number of grains to create, if it is going to greater than op_num\n'
p43276
sS'cpp_type'
p43277
S'unsigned int'
p43278
sS'default'
p43279
g3
sS'name'
p43280
S'grain_num'
p43281
sS'required'
p43282
I01
sS'group_name'
p43283
Nsa(dp43284
S'description'
p43285
S'number of order parameters to create\n'
p43286
sS'cpp_type'
p43287
S'unsigned int'
p43288
sS'default'
p43289
g3
sS'name'
p43290
S'op_num'
p43291
sS'required'
p43292
I01
sS'group_name'
p43293
Nsa(dp43294
S'description'
p43295
S'The random seed\n'
p43296
sS'cpp_type'
p43297
S'unsigned int'
p43298
sS'default'
p43299
S'12444'
p43300
sS'name'
p43301
S'rand_seed'
p43302
sS'required'
p43303
I00
sS'group_name'
p43304
Nsa(dp43305
S'description'
p43306
S'specifies the base name of the variables\n'
p43307
sS'cpp_type'
p43308
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43309
sS'default'
p43310
g3
sS'name'
p43311
S'var_name_base'
p43312
sS'required'
p43313
I01
sS'group_name'
p43314
NsasS'name'
p43315
S'/ICs/PolycrystalICs/PolycrystalVoronoiIC'
p43316
sa(dp43317
S'description'
p43318
g3
sS'subblocks'
p43319
NsS'parameters'
p43320
(lp43321
(dp43322
S'description'
p43323
S'The EBSDReader GeneralUserObject\n'
p43324
sS'cpp_type'
p43325
S'UserObjectName'
p43326
sS'default'
p43327
g3
sS'name'
p43328
S'ebsd_reader'
p43329
sS'required'
p43330
I01
sS'group_name'
p43331
Nsa(dp43332
S'description'
p43333
S'Specifies the number of order paraameters to create\n'
p43334
sS'cpp_type'
p43335
S'unsigned int'
p43336
sS'default'
p43337
g3
sS'name'
p43338
S'op_num'
p43339
sS'required'
p43340
I01
sS'group_name'
p43341
Nsa(dp43342
S'description'
p43343
S'EBSD phase number to be assigned to this grain\n'
p43344
sS'cpp_type'
p43345
S'unsigned int'
p43346
sS'default'
p43347
g3
sS'name'
p43348
S'phase'
p43349
sS'required'
p43350
I00
sS'group_name'
p43351
Nsa(dp43352
S'description'
p43353
S'specifies the base name of the variables\n'
p43354
sS'cpp_type'
p43355
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43356
sS'default'
p43357
g3
sS'name'
p43358
S'var_name_base'
p43359
sS'required'
p43360
I01
sS'group_name'
p43361
NsasS'name'
p43362
S'/ICs/PolycrystalICs/ReconVarIC'
p43363
sa(dp43364
S'description'
p43365
g3
sS'subblocks'
p43366
NsS'parameters'
p43367
(lp43368
(dp43369
S'description'
p43370
S'number of order parameters to create\n'
p43371
sS'cpp_type'
p43372
S'unsigned int'
p43373
sS'default'
p43374
g3
sS'name'
p43375
S'op_num'
p43376
sS'required'
p43377
I01
sS'group_name'
p43378
Nsa(dp43379
S'description'
p43380
S'specifies the base name of the variables\n'
p43381
sS'cpp_type'
p43382
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43383
sS'default'
p43384
g3
sS'name'
p43385
S'var_name_base'
p43386
sS'required'
p43387
I01
sS'group_name'
p43388
NsasS'name'
p43389
S'/ICs/PolycrystalICs/Tricrystal2CircleGrainsIC'
p43390
sasS'parameters'
p43391
NsS'name'
p43392
S'/ICs/PolycrystalICs'
p43393
sa(dp43394
S'description'
p43395
g3
sS'subblocks'
p43396
NsS'parameters'
p43397
(lp43398
(dp43399
S'description'
p43400
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43401
sS'cpp_type'
p43402
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43403
sS'default'
p43404
g3
sS'name'
p43405
S'block'
p43406
sS'required'
p43407
I00
sS'group_name'
p43408
Nsa(dp43409
S'description'
p43410
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43411
sS'cpp_type'
p43412
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p43413
sS'default'
p43414
g3
sS'name'
p43415
S'boundary'
p43416
sS'required'
p43417
I00
sS'group_name'
p43418
Nsa(dp43419
S'description'
p43420
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43421
sS'cpp_type'
p43422
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43423
sS'default'
p43424
g3
sS'name'
p43425
S'control_tags'
p43426
sS'required'
p43427
I00
sS'group_name'
p43428
Nsa(dp43429
S'description'
p43430
S'The index for the current order parameter\n'
p43431
sS'cpp_type'
p43432
S'unsigned int'
p43433
sS'default'
p43434
g3
sS'name'
p43435
S'op_index'
p43436
sS'required'
p43437
I01
sS'group_name'
p43438
Nsa(dp43439
S'description'
p43440
S'Number of order parameters\n'
p43441
sS'cpp_type'
p43442
S'unsigned int'
p43443
sS'default'
p43444
g3
sS'name'
p43445
S'op_num'
p43446
sS'required'
p43447
I01
sS'group_name'
p43448
Nsa(dp43449
S'description'
p43450
S'Type of random grain structure\n'
p43451
sS'cpp_type'
p43452
S'unsigned int'
p43453
sS'default'
p43454
g3
sS'name'
p43455
S'typ'
p43456
sS'required'
p43457
I01
sS'group_name'
p43458
Nsa(dp43459
S'description'
p43460
g3
sS'cpp_type'
p43461
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43462
sS'default'
p43463
S'PolycrystalRandomIC'
p43464
sS'name'
p43465
S'type'
p43466
sS'required'
p43467
I00
sS'group_name'
p43468
Nsa(dp43469
S'description'
p43470
S'The variable this initial condition is supposed to provide values for.\n'
p43471
sS'cpp_type'
p43472
S'VariableName'
p43473
sS'default'
p43474
g3
sS'name'
p43475
S'variable'
p43476
sS'required'
p43477
I01
sS'group_name'
p43478
NsasS'name'
p43479
S'/ICs/PolycrystalRandomIC'
p43480
sa(dp43481
S'description'
p43482
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p43483
sS'subblocks'
p43484
NsS'parameters'
p43485
(lp43486
(dp43487
S'description'
p43488
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43489
sS'cpp_type'
p43490
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43491
sS'default'
p43492
g3
sS'name'
p43493
S'block'
p43494
sS'required'
p43495
I00
sS'group_name'
p43496
Nsa(dp43497
S'description'
p43498
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43499
sS'cpp_type'
p43500
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p43501
sS'default'
p43502
g3
sS'name'
p43503
S'boundary'
p43504
sS'required'
p43505
I00
sS'group_name'
p43506
Nsa(dp43507
S'description'
p43508
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p43509
sS'cpp_type'
p43510
S'bool'
p43511
sS'default'
p43512
S'0'
p43513
sS'name'
p43514
S'cody_test'
p43515
sS'required'
p43516
I00
sS'group_name'
p43517
Nsa(dp43518
S'description'
p43519
S'3D microstructure will be columnar in the z-direction?\n'
p43520
sS'cpp_type'
p43521
S'bool'
p43522
sS'default'
p43523
S'0'
p43524
sS'name'
p43525
S'columnar_3D'
p43526
sS'required'
p43527
I00
sS'group_name'
p43528
Nsa(dp43529
S'description'
p43530
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43531
sS'cpp_type'
p43532
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43533
sS'default'
p43534
g3
sS'name'
p43535
S'control_tags'
p43536
sS'required'
p43537
I00
sS'group_name'
p43538
Nsa(dp43539
S'description'
p43540
S'Number of grains being represented by the order parameters\n'
p43541
sS'cpp_type'
p43542
S'unsigned int'
p43543
sS'default'
p43544
g3
sS'name'
p43545
S'grain_num'
p43546
sS'required'
p43547
I01
sS'group_name'
p43548
Nsa(dp43549
S'description'
p43550
S'The index for the current order parameter\n'
p43551
sS'cpp_type'
p43552
S'unsigned int'
p43553
sS'default'
p43554
g3
sS'name'
p43555
S'op_index'
p43556
sS'required'
p43557
I01
sS'group_name'
p43558
Nsa(dp43559
S'description'
p43560
S'Number of order parameters\n'
p43561
sS'cpp_type'
p43562
S'unsigned int'
p43563
sS'default'
p43564
g3
sS'name'
p43565
S'op_num'
p43566
sS'required'
p43567
I01
sS'group_name'
p43568
Nsa(dp43569
S'description'
p43570
S'The random seed\n'
p43571
sS'cpp_type'
p43572
S'unsigned int'
p43573
sS'default'
p43574
S'12444'
p43575
sS'name'
p43576
S'rand_seed'
p43577
sS'required'
p43578
I00
sS'group_name'
p43579
Nsa(dp43580
S'description'
p43581
g3
sS'cpp_type'
p43582
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43583
sS'default'
p43584
S'PolycrystalReducedIC'
p43585
sS'name'
p43586
S'type'
p43587
sS'required'
p43588
I00
sS'group_name'
p43589
Nsa(dp43590
S'description'
p43591
S'The variable this initial condition is supposed to provide values for.\n'
p43592
sS'cpp_type'
p43593
S'VariableName'
p43594
sS'default'
p43595
g3
sS'name'
p43596
S'variable'
p43597
sS'required'
p43598
I01
sS'group_name'
p43599
NsasS'name'
p43600
S'/ICs/PolycrystalReducedIC'
p43601
sa(dp43602
S'description'
p43603
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p43604
sS'subblocks'
p43605
NsS'parameters'
p43606
(lp43607
(dp43608
S'description'
p43609
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43610
sS'cpp_type'
p43611
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43612
sS'default'
p43613
g3
sS'name'
p43614
S'block'
p43615
sS'required'
p43616
I00
sS'group_name'
p43617
Nsa(dp43618
S'description'
p43619
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43620
sS'cpp_type'
p43621
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p43622
sS'default'
p43623
g3
sS'name'
p43624
S'boundary'
p43625
sS'required'
p43626
I00
sS'group_name'
p43627
Nsa(dp43628
S'description'
p43629
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43630
sS'cpp_type'
p43631
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43632
sS'default'
p43633
g3
sS'name'
p43634
S'control_tags'
p43635
sS'required'
p43636
I00
sS'group_name'
p43637
Nsa(dp43638
S'description'
p43639
g3
sS'cpp_type'
p43640
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43641
sS'default'
p43642
S'RampIC'
p43643
sS'name'
p43644
S'type'
p43645
sS'required'
p43646
I00
sS'group_name'
p43647
Nsa(dp43648
S'description'
p43649
S'The value on left (xmin) boundary.\n'
p43650
sS'cpp_type'
p43651
S'double'
p43652
sS'default'
p43653
g3
sS'name'
p43654
S'value_left'
p43655
sS'required'
p43656
I01
sS'group_name'
p43657
Nsa(dp43658
S'description'
p43659
S'The value on right (xmax) boundary.\n'
p43660
sS'cpp_type'
p43661
S'double'
p43662
sS'default'
p43663
g3
sS'name'
p43664
S'value_right'
p43665
sS'required'
p43666
I01
sS'group_name'
p43667
Nsa(dp43668
S'description'
p43669
S'The variable this initial condition is supposed to provide values for.\n'
p43670
sS'cpp_type'
p43671
S'VariableName'
p43672
sS'default'
p43673
g3
sS'name'
p43674
S'variable'
p43675
sS'required'
p43676
I01
sS'group_name'
p43677
NsasS'name'
p43678
S'/ICs/RampIC'
p43679
sa(dp43680
S'description'
p43681
g3
sS'subblocks'
p43682
NsS'parameters'
p43683
(lp43684
(dp43685
S'description'
p43686
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43687
sS'cpp_type'
p43688
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43689
sS'default'
p43690
g3
sS'name'
p43691
S'block'
p43692
sS'required'
p43693
I00
sS'group_name'
p43694
Nsa(dp43695
S'description'
p43696
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43697
sS'cpp_type'
p43698
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p43699
sS'default'
p43700
g3
sS'name'
p43701
S'boundary'
p43702
sS'required'
p43703
I00
sS'group_name'
p43704
Nsa(dp43705
S'description'
p43706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43707
sS'cpp_type'
p43708
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43709
sS'default'
p43710
g3
sS'name'
p43711
S'control_tags'
p43712
sS'required'
p43713
I00
sS'group_name'
p43714
Nsa(dp43715
S'description'
p43716
S'Upper bound of the randomly generated values\n'
p43717
sS'cpp_type'
p43718
S'double'
p43719
sS'default'
p43720
S'1'
p43721
sS'name'
p43722
S'max'
p43723
sS'required'
p43724
I00
sS'group_name'
p43725
Nsa(dp43726
S'description'
p43727
S'Lower bound of the randomly generated values\n'
p43728
sS'cpp_type'
p43729
S'double'
p43730
sS'default'
p43731
S'0'
p43732
sS'name'
p43733
S'min'
p43734
sS'required'
p43735
I00
sS'group_name'
p43736
Nsa(dp43737
S'description'
p43738
S'Seed value for the random number generator\n'
p43739
sS'cpp_type'
p43740
S'unsigned int'
p43741
sS'default'
p43742
S'0'
p43743
sS'name'
p43744
S'seed'
p43745
sS'required'
p43746
I00
sS'group_name'
p43747
Nsa(dp43748
S'description'
p43749
g3
sS'cpp_type'
p43750
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43751
sS'default'
p43752
S'RandomIC'
p43753
sS'name'
p43754
S'type'
p43755
sS'required'
p43756
I00
sS'group_name'
p43757
Nsa(dp43758
S'description'
p43759
S'The variable this initial condition is supposed to provide values for.\n'
p43760
sS'cpp_type'
p43761
S'VariableName'
p43762
sS'default'
p43763
g3
sS'name'
p43764
S'variable'
p43765
sS'required'
p43766
I01
sS'group_name'
p43767
NsasS'name'
p43768
S'/ICs/RandomIC'
p43769
sa(dp43770
S'description'
p43771
g3
sS'subblocks'
p43772
NsS'parameters'
p43773
(lp43774
(dp43775
S'description'
p43776
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43777
sS'cpp_type'
p43778
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43779
sS'default'
p43780
g3
sS'name'
p43781
S'block'
p43782
sS'required'
p43783
I00
sS'group_name'
p43784
Nsa(dp43785
S'description'
p43786
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43787
sS'cpp_type'
p43788
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p43789
sS'default'
p43790
g3
sS'name'
p43791
S'boundary'
p43792
sS'required'
p43793
I00
sS'group_name'
p43794
Nsa(dp43795
S'description'
p43796
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43797
sS'cpp_type'
p43798
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43799
sS'default'
p43800
g3
sS'name'
p43801
S'control_tags'
p43802
sS'required'
p43803
I00
sS'group_name'
p43804
Nsa(dp43805
S'description'
p43806
S'The EBSDReader object holding the EBSD data\n'
p43807
sS'cpp_type'
p43808
S'UserObjectName'
p43809
sS'default'
p43810
g3
sS'name'
p43811
S'ebsd_reader'
p43812
sS'required'
p43813
I01
sS'group_name'
p43814
Nsa(dp43815
S'description'
p43816
S'EBSD phase number this variable is to represent\n'
p43817
sS'cpp_type'
p43818
S'unsigned int'
p43819
sS'default'
p43820
g3
sS'name'
p43821
S'phase'
p43822
sS'required'
p43823
I01
sS'group_name'
p43824
Nsa(dp43825
S'description'
p43826
g3
sS'cpp_type'
p43827
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43828
sS'default'
p43829
S'ReconPhaseVarIC'
p43830
sS'name'
p43831
S'type'
p43832
sS'required'
p43833
I00
sS'group_name'
p43834
Nsa(dp43835
S'description'
p43836
S'The variable this initial condition is supposed to provide values for.\n'
p43837
sS'cpp_type'
p43838
S'VariableName'
p43839
sS'default'
p43840
g3
sS'name'
p43841
S'variable'
p43842
sS'required'
p43843
I01
sS'group_name'
p43844
NsasS'name'
p43845
S'/ICs/ReconPhaseVarIC'
p43846
sa(dp43847
S'description'
p43848
g3
sS'subblocks'
p43849
NsS'parameters'
p43850
(lp43851
(dp43852
S'description'
p43853
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43854
sS'cpp_type'
p43855
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43856
sS'default'
p43857
g3
sS'name'
p43858
S'block'
p43859
sS'required'
p43860
I00
sS'group_name'
p43861
Nsa(dp43862
S'description'
p43863
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43864
sS'cpp_type'
p43865
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p43866
sS'default'
p43867
g3
sS'name'
p43868
S'boundary'
p43869
sS'required'
p43870
I00
sS'group_name'
p43871
Nsa(dp43872
S'description'
p43873
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43874
sS'cpp_type'
p43875
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43876
sS'default'
p43877
g3
sS'name'
p43878
S'control_tags'
p43879
sS'required'
p43880
I00
sS'group_name'
p43881
Nsa(dp43882
S'description'
p43883
S'The EBSDReader GeneralUserObject\n'
p43884
sS'cpp_type'
p43885
S'UserObjectName'
p43886
sS'default'
p43887
g3
sS'name'
p43888
S'ebsd_reader'
p43889
sS'required'
p43890
I01
sS'group_name'
p43891
Nsa(dp43892
S'description'
p43893
S'The index for the current order parameter\n'
p43894
sS'cpp_type'
p43895
S'unsigned int'
p43896
sS'default'
p43897
g3
sS'name'
p43898
S'op_index'
p43899
sS'required'
p43900
I01
sS'group_name'
p43901
Nsa(dp43902
S'description'
p43903
S'Specifies the number of order parameters to create\n'
p43904
sS'cpp_type'
p43905
S'unsigned int'
p43906
sS'default'
p43907
g3
sS'name'
p43908
S'op_num'
p43909
sS'required'
p43910
I01
sS'group_name'
p43911
Nsa(dp43912
S'description'
p43913
S'EBSD phase number to be assigned to this grain\n'
p43914
sS'cpp_type'
p43915
S'unsigned int'
p43916
sS'default'
p43917
g3
sS'name'
p43918
S'phase'
p43919
sS'required'
p43920
I00
sS'group_name'
p43921
Nsa(dp43922
S'description'
p43923
g3
sS'cpp_type'
p43924
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p43925
sS'default'
p43926
S'ReconVarIC'
p43927
sS'name'
p43928
S'type'
p43929
sS'required'
p43930
I00
sS'group_name'
p43931
Nsa(dp43932
S'description'
p43933
S'The variable this initial condition is supposed to provide values for.\n'
p43934
sS'cpp_type'
p43935
S'VariableName'
p43936
sS'default'
p43937
g3
sS'name'
p43938
S'variable'
p43939
sS'required'
p43940
I01
sS'group_name'
p43941
NsasS'name'
p43942
S'/ICs/ReconVarIC'
p43943
sa(dp43944
S'description'
p43945
S'Random noise with different min/max inside/outside of a bounding box\n'
p43946
sS'subblocks'
p43947
NsS'parameters'
p43948
(lp43949
(dp43950
S'description'
p43951
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43952
sS'cpp_type'
p43953
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p43954
sS'default'
p43955
g3
sS'name'
p43956
S'block'
p43957
sS'required'
p43958
I00
sS'group_name'
p43959
Nsa(dp43960
S'description'
p43961
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43962
sS'cpp_type'
p43963
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p43964
sS'default'
p43965
g3
sS'name'
p43966
S'boundary'
p43967
sS'required'
p43968
I00
sS'group_name'
p43969
Nsa(dp43970
S'description'
p43971
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43972
sS'cpp_type'
p43973
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p43974
sS'default'
p43975
g3
sS'name'
p43976
S'control_tags'
p43977
sS'required'
p43978
I00
sS'group_name'
p43979
Nsa(dp43980
S'description'
p43981
S'The min value of the variable invalue the box\n'
p43982
sS'cpp_type'
p43983
S'double'
p43984
sS'default'
p43985
S'0'
p43986
sS'name'
p43987
S'mn_invalue'
p43988
sS'required'
p43989
I00
sS'group_name'
p43990
Nsa(dp43991
S'description'
p43992
S'The min value of the variable outvalue the box\n'
p43993
sS'cpp_type'
p43994
S'double'
p43995
sS'default'
p43996
S'0'
p43997
sS'name'
p43998
S'mn_outvalue'
p43999
sS'required'
p44000
I00
sS'group_name'
p44001
Nsa(dp44002
S'description'
p44003
S'The max value of the variable invalue the box\n'
p44004
sS'cpp_type'
p44005
S'double'
p44006
sS'default'
p44007
g3
sS'name'
p44008
S'mx_invalue'
p44009
sS'required'
p44010
I01
sS'group_name'
p44011
Nsa(dp44012
S'description'
p44013
S'The max value of the variable outvalue the box\n'
p44014
sS'cpp_type'
p44015
S'double'
p44016
sS'default'
p44017
g3
sS'name'
p44018
S'mx_outvalue'
p44019
sS'required'
p44020
I01
sS'group_name'
p44021
Nsa(dp44022
S'description'
p44023
g3
sS'cpp_type'
p44024
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44025
sS'default'
p44026
S'RndBoundingBoxIC'
p44027
sS'name'
p44028
S'type'
p44029
sS'required'
p44030
I00
sS'group_name'
p44031
Nsa(dp44032
S'description'
p44033
S'The variable this initial condition is supposed to provide values for.\n'
p44034
sS'cpp_type'
p44035
S'VariableName'
p44036
sS'default'
p44037
g3
sS'name'
p44038
S'variable'
p44039
sS'required'
p44040
I01
sS'group_name'
p44041
Nsa(dp44042
S'description'
p44043
S'The x coordinate of the lower left-hand corner of the box\n'
p44044
sS'cpp_type'
p44045
S'double'
p44046
sS'default'
p44047
g3
sS'name'
p44048
S'x1'
p44049
sS'required'
p44050
I01
sS'group_name'
p44051
Nsa(dp44052
S'description'
p44053
S'The x coordinate of the upper right-hand corner of the box\n'
p44054
sS'cpp_type'
p44055
S'double'
p44056
sS'default'
p44057
g3
sS'name'
p44058
S'x2'
p44059
sS'required'
p44060
I01
sS'group_name'
p44061
Nsa(dp44062
S'description'
p44063
S'The y coordinate of the lower left-hand corner of the box\n'
p44064
sS'cpp_type'
p44065
S'double'
p44066
sS'default'
p44067
g3
sS'name'
p44068
S'y1'
p44069
sS'required'
p44070
I01
sS'group_name'
p44071
Nsa(dp44072
S'description'
p44073
S'The y coordinate of the upper right-hand corner of the box\n'
p44074
sS'cpp_type'
p44075
S'double'
p44076
sS'default'
p44077
g3
sS'name'
p44078
S'y2'
p44079
sS'required'
p44080
I01
sS'group_name'
p44081
Nsa(dp44082
S'description'
p44083
S'The z coordinate of the lower left-hand corner of the box\n'
p44084
sS'cpp_type'
p44085
S'double'
p44086
sS'default'
p44087
S'0'
p44088
sS'name'
p44089
S'z1'
p44090
sS'required'
p44091
I00
sS'group_name'
p44092
Nsa(dp44093
S'description'
p44094
S'The z coordinate of the upper right-hand corner of the box\n'
p44095
sS'cpp_type'
p44096
S'double'
p44097
sS'default'
p44098
S'0'
p44099
sS'name'
p44100
S'z2'
p44101
sS'required'
p44102
I00
sS'group_name'
p44103
NsasS'name'
p44104
S'/ICs/RndBoundingBoxIC'
p44105
sa(dp44106
S'description'
p44107
S'Random noise with different min/max inside/outside of a smooth circle\n'
p44108
sS'subblocks'
p44109
NsS'parameters'
p44110
(lp44111
(dp44112
S'description'
p44113
S'in 3D, whether the objects are spheres or columns\n'
p44114
sS'cpp_type'
p44115
S'bool'
p44116
sS'default'
p44117
S'1'
p44118
sS'name'
p44119
S'3D_spheres'
p44120
sS'required'
p44121
I00
sS'group_name'
p44122
Nsa(dp44123
S'description'
p44124
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44125
sS'cpp_type'
p44126
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44127
sS'default'
p44128
g3
sS'name'
p44129
S'block'
p44130
sS'required'
p44131
I00
sS'group_name'
p44132
Nsa(dp44133
S'description'
p44134
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44135
sS'cpp_type'
p44136
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p44137
sS'default'
p44138
g3
sS'name'
p44139
S'boundary'
p44140
sS'required'
p44141
I00
sS'group_name'
p44142
Nsa(dp44143
S'description'
p44144
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44145
sS'cpp_type'
p44146
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44147
sS'default'
p44148
g3
sS'name'
p44149
S'control_tags'
p44150
sS'required'
p44151
I00
sS'group_name'
p44152
Nsa(dp44153
S'description'
p44154
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p44155
sS'cpp_type'
p44156
S'double'
p44157
sS'default'
p44158
S'0'
p44159
sS'name'
p44160
S'int_width'
p44161
sS'required'
p44162
I00
sS'group_name'
p44163
Nsa(dp44164
S'description'
p44165
S'The variable value inside the circle\n'
p44166
sS'cpp_type'
p44167
S'double'
p44168
sS'default'
p44169
g3
sS'name'
p44170
S'invalue'
p44171
sS'required'
p44172
I01
sS'group_name'
p44173
Nsa(dp44174
S'description'
p44175
S'The variable value outside the circle\n'
p44176
sS'cpp_type'
p44177
S'double'
p44178
sS'default'
p44179
g3
sS'name'
p44180
S'outvalue'
p44181
sS'required'
p44182
I01
sS'group_name'
p44183
Nsa(dp44184
S'description'
p44185
S'The radius of a circle\n'
p44186
sS'cpp_type'
p44187
S'double'
p44188
sS'default'
p44189
g3
sS'name'
p44190
S'radius'
p44191
sS'required'
p44192
I01
sS'group_name'
p44193
Nsa(dp44194
S'description'
p44195
S'Seed value for the random number generator\n'
p44196
sS'cpp_type'
p44197
S'unsigned int'
p44198
sS'default'
p44199
S'12345'
p44200
sS'name'
p44201
S'rand_seed'
p44202
sS'required'
p44203
I00
sS'group_name'
p44204
Nsa(dp44205
S'description'
p44206
g3
sS'cpp_type'
p44207
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44208
sS'default'
p44209
S'RndSmoothCircleIC'
p44210
sS'name'
p44211
S'type'
p44212
sS'required'
p44213
I00
sS'group_name'
p44214
Nsa(dp44215
S'description'
p44216
S'The variable this initial condition is supposed to provide values for.\n'
p44217
sS'cpp_type'
p44218
S'VariableName'
p44219
sS'default'
p44220
g3
sS'name'
p44221
S'variable'
p44222
sS'required'
p44223
I01
sS'group_name'
p44224
Nsa(dp44225
S'description'
p44226
S'Plus or minus this amount on the invalue\n'
p44227
sS'cpp_type'
p44228
S'double'
p44229
sS'default'
p44230
g3
sS'name'
p44231
S'variation_invalue'
p44232
sS'required'
p44233
I01
sS'group_name'
p44234
Nsa(dp44235
S'description'
p44236
S'Plus or minus this amount on the outvalue\n'
p44237
sS'cpp_type'
p44238
S'double'
p44239
sS'default'
p44240
g3
sS'name'
p44241
S'variation_outvalue'
p44242
sS'required'
p44243
I01
sS'group_name'
p44244
Nsa(dp44245
S'description'
p44246
S'The x coordinate of the circle center\n'
p44247
sS'cpp_type'
p44248
S'double'
p44249
sS'default'
p44250
g3
sS'name'
p44251
S'x1'
p44252
sS'required'
p44253
I01
sS'group_name'
p44254
Nsa(dp44255
S'description'
p44256
S'The y coordinate of the circle center\n'
p44257
sS'cpp_type'
p44258
S'double'
p44259
sS'default'
p44260
g3
sS'name'
p44261
S'y1'
p44262
sS'required'
p44263
I01
sS'group_name'
p44264
Nsa(dp44265
S'description'
p44266
S'The z coordinate of the circle center\n'
p44267
sS'cpp_type'
p44268
S'double'
p44269
sS'default'
p44270
S'0'
p44271
sS'name'
p44272
S'z1'
p44273
sS'required'
p44274
I00
sS'group_name'
p44275
Nsa(dp44276
S'description'
p44277
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p44278
sS'cpp_type'
p44279
S'bool'
p44280
sS'default'
p44281
S'0'
p44282
sS'name'
p44283
S'zero_gradient'
p44284
sS'required'
p44285
I00
sS'group_name'
p44286
NsasS'name'
p44287
S'/ICs/RndSmoothCircleIC'
p44288
sa(dp44289
S'description'
p44290
g3
sS'subblocks'
p44291
NsS'parameters'
p44292
(lp44293
(dp44294
S'description'
p44295
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44296
sS'cpp_type'
p44297
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44298
sS'default'
p44299
g3
sS'name'
p44300
S'control_tags'
p44301
sS'required'
p44302
I00
sS'group_name'
p44303
Nsa(dp44304
S'description'
p44305
g3
sS'cpp_type'
p44306
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44307
sS'default'
p44308
S'ScalarComponentIC'
p44309
sS'name'
p44310
S'type'
p44311
sS'required'
p44312
I00
sS'group_name'
p44313
Nsa(dp44314
S'description'
p44315
S'Initial values to initialize the scalar variable.\n'
p44316
sS'cpp_type'
p44317
S'std::vector<double, std::allocator<double> >'
p44318
sS'default'
p44319
g3
sS'name'
p44320
S'values'
p44321
sS'required'
p44322
I01
sS'group_name'
p44323
Nsa(dp44324
S'description'
p44325
S'The variable this initial condition is supposed to provide values for.\n'
p44326
sS'cpp_type'
p44327
S'VariableName'
p44328
sS'default'
p44329
g3
sS'name'
p44330
S'variable'
p44331
sS'required'
p44332
I00
sS'group_name'
p44333
NsasS'name'
p44334
S'/ICs/ScalarComponentIC'
p44335
sa(dp44336
S'description'
p44337
g3
sS'subblocks'
p44338
NsS'parameters'
p44339
(lp44340
(dp44341
S'description'
p44342
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44343
sS'cpp_type'
p44344
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44345
sS'default'
p44346
g3
sS'name'
p44347
S'control_tags'
p44348
sS'required'
p44349
I00
sS'group_name'
p44350
Nsa(dp44351
S'description'
p44352
g3
sS'cpp_type'
p44353
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44354
sS'default'
p44355
S'ScalarConstantIC'
p44356
sS'name'
p44357
S'type'
p44358
sS'required'
p44359
I00
sS'group_name'
p44360
Nsa(dp44361
S'description'
p44362
g3
sS'cpp_type'
p44363
S'double'
p44364
sS'default'
p44365
S'0'
p44366
sS'name'
p44367
S'value'
p44368
sS'required'
p44369
I00
sS'group_name'
p44370
Nsa(dp44371
S'description'
p44372
S'The variable this initial condition is supposed to provide values for.\n'
p44373
sS'cpp_type'
p44374
S'VariableName'
p44375
sS'default'
p44376
g3
sS'name'
p44377
S'variable'
p44378
sS'required'
p44379
I00
sS'group_name'
p44380
NsasS'name'
p44381
S'/ICs/ScalarConstantIC'
p44382
sa(dp44383
S'description'
p44384
S'Circle with a smooth interface\n'
p44385
sS'subblocks'
p44386
NsS'parameters'
p44387
(lp44388
(dp44389
S'description'
p44390
S'in 3D, whether the objects are spheres or columns\n'
p44391
sS'cpp_type'
p44392
S'bool'
p44393
sS'default'
p44394
S'1'
p44395
sS'name'
p44396
S'3D_spheres'
p44397
sS'required'
p44398
I00
sS'group_name'
p44399
Nsa(dp44400
S'description'
p44401
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44402
sS'cpp_type'
p44403
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44404
sS'default'
p44405
g3
sS'name'
p44406
S'block'
p44407
sS'required'
p44408
I00
sS'group_name'
p44409
Nsa(dp44410
S'description'
p44411
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44412
sS'cpp_type'
p44413
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p44414
sS'default'
p44415
g3
sS'name'
p44416
S'boundary'
p44417
sS'required'
p44418
I00
sS'group_name'
p44419
Nsa(dp44420
S'description'
p44421
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44422
sS'cpp_type'
p44423
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44424
sS'default'
p44425
g3
sS'name'
p44426
S'control_tags'
p44427
sS'required'
p44428
I00
sS'group_name'
p44429
Nsa(dp44430
S'description'
p44431
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p44432
sS'cpp_type'
p44433
S'double'
p44434
sS'default'
p44435
S'0'
p44436
sS'name'
p44437
S'int_width'
p44438
sS'required'
p44439
I00
sS'group_name'
p44440
Nsa(dp44441
S'description'
p44442
S'The variable value inside the circle\n'
p44443
sS'cpp_type'
p44444
S'double'
p44445
sS'default'
p44446
g3
sS'name'
p44447
S'invalue'
p44448
sS'required'
p44449
I01
sS'group_name'
p44450
Nsa(dp44451
S'description'
p44452
S'The variable value outside the circle\n'
p44453
sS'cpp_type'
p44454
S'double'
p44455
sS'default'
p44456
g3
sS'name'
p44457
S'outvalue'
p44458
sS'required'
p44459
I01
sS'group_name'
p44460
Nsa(dp44461
S'description'
p44462
S'The radius of a circle\n'
p44463
sS'cpp_type'
p44464
S'double'
p44465
sS'default'
p44466
g3
sS'name'
p44467
S'radius'
p44468
sS'required'
p44469
I01
sS'group_name'
p44470
Nsa(dp44471
S'description'
p44472
S'Seed value for the random number generator\n'
p44473
sS'cpp_type'
p44474
S'unsigned int'
p44475
sS'default'
p44476
S'12345'
p44477
sS'name'
p44478
S'rand_seed'
p44479
sS'required'
p44480
I00
sS'group_name'
p44481
Nsa(dp44482
S'description'
p44483
g3
sS'cpp_type'
p44484
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44485
sS'default'
p44486
S'SmoothCircleIC'
p44487
sS'name'
p44488
S'type'
p44489
sS'required'
p44490
I00
sS'group_name'
p44491
Nsa(dp44492
S'description'
p44493
S'The variable this initial condition is supposed to provide values for.\n'
p44494
sS'cpp_type'
p44495
S'VariableName'
p44496
sS'default'
p44497
g3
sS'name'
p44498
S'variable'
p44499
sS'required'
p44500
I01
sS'group_name'
p44501
Nsa(dp44502
S'description'
p44503
S'The x coordinate of the circle center\n'
p44504
sS'cpp_type'
p44505
S'double'
p44506
sS'default'
p44507
g3
sS'name'
p44508
S'x1'
p44509
sS'required'
p44510
I01
sS'group_name'
p44511
Nsa(dp44512
S'description'
p44513
S'The y coordinate of the circle center\n'
p44514
sS'cpp_type'
p44515
S'double'
p44516
sS'default'
p44517
g3
sS'name'
p44518
S'y1'
p44519
sS'required'
p44520
I01
sS'group_name'
p44521
Nsa(dp44522
S'description'
p44523
S'The z coordinate of the circle center\n'
p44524
sS'cpp_type'
p44525
S'double'
p44526
sS'default'
p44527
S'0'
p44528
sS'name'
p44529
S'z1'
p44530
sS'required'
p44531
I00
sS'group_name'
p44532
Nsa(dp44533
S'description'
p44534
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p44535
sS'cpp_type'
p44536
S'bool'
p44537
sS'default'
p44538
S'0'
p44539
sS'name'
p44540
S'zero_gradient'
p44541
sS'required'
p44542
I00
sS'group_name'
p44543
NsasS'name'
p44544
S'/ICs/SmoothCircleIC'
p44545
sa(dp44546
S'description'
p44547
S'Multiple smooth circles with manually specified radii and center points\n'
p44548
sS'subblocks'
p44549
NsS'parameters'
p44550
(lp44551
(dp44552
S'description'
p44553
S'in 3D, whether the objects are spheres or columns\n'
p44554
sS'cpp_type'
p44555
S'bool'
p44556
sS'default'
p44557
S'1'
p44558
sS'name'
p44559
S'3D_spheres'
p44560
sS'required'
p44561
I00
sS'group_name'
p44562
Nsa(dp44563
S'description'
p44564
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44565
sS'cpp_type'
p44566
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44567
sS'default'
p44568
g3
sS'name'
p44569
S'block'
p44570
sS'required'
p44571
I00
sS'group_name'
p44572
Nsa(dp44573
S'description'
p44574
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44575
sS'cpp_type'
p44576
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p44577
sS'default'
p44578
g3
sS'name'
p44579
S'boundary'
p44580
sS'required'
p44581
I00
sS'group_name'
p44582
Nsa(dp44583
S'description'
p44584
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44585
sS'cpp_type'
p44586
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44587
sS'default'
p44588
g3
sS'name'
p44589
S'control_tags'
p44590
sS'required'
p44591
I00
sS'group_name'
p44592
Nsa(dp44593
S'description'
p44594
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p44595
sS'cpp_type'
p44596
S'double'
p44597
sS'default'
p44598
S'0'
p44599
sS'name'
p44600
S'int_width'
p44601
sS'required'
p44602
I00
sS'group_name'
p44603
Nsa(dp44604
S'description'
p44605
S'The variable value inside the circle\n'
p44606
sS'cpp_type'
p44607
S'double'
p44608
sS'default'
p44609
g3
sS'name'
p44610
S'invalue'
p44611
sS'required'
p44612
I01
sS'group_name'
p44613
Nsa(dp44614
S'description'
p44615
S'The variable value outside the circle\n'
p44616
sS'cpp_type'
p44617
S'double'
p44618
sS'default'
p44619
g3
sS'name'
p44620
S'outvalue'
p44621
sS'required'
p44622
I01
sS'group_name'
p44623
Nsa(dp44624
S'description'
p44625
S'The radius for each circle\n'
p44626
sS'cpp_type'
p44627
S'std::vector<double, std::allocator<double> >'
p44628
sS'default'
p44629
g3
sS'name'
p44630
S'radii'
p44631
sS'required'
p44632
I01
sS'group_name'
p44633
Nsa(dp44634
S'description'
p44635
S'Seed value for the random number generator\n'
p44636
sS'cpp_type'
p44637
S'unsigned int'
p44638
sS'default'
p44639
S'12345'
p44640
sS'name'
p44641
S'rand_seed'
p44642
sS'required'
p44643
I00
sS'group_name'
p44644
Nsa(dp44645
S'description'
p44646
g3
sS'cpp_type'
p44647
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44648
sS'default'
p44649
S'SpecifiedSmoothCircleIC'
p44650
sS'name'
p44651
S'type'
p44652
sS'required'
p44653
I00
sS'group_name'
p44654
Nsa(dp44655
S'description'
p44656
S'The variable this initial condition is supposed to provide values for.\n'
p44657
sS'cpp_type'
p44658
S'VariableName'
p44659
sS'default'
p44660
g3
sS'name'
p44661
S'variable'
p44662
sS'required'
p44663
I01
sS'group_name'
p44664
Nsa(dp44665
S'description'
p44666
S'The x-coordinate for each circle center\n'
p44667
sS'cpp_type'
p44668
S'std::vector<double, std::allocator<double> >'
p44669
sS'default'
p44670
g3
sS'name'
p44671
S'x_positions'
p44672
sS'required'
p44673
I01
sS'group_name'
p44674
Nsa(dp44675
S'description'
p44676
S'The y-coordinate for each circle center\n'
p44677
sS'cpp_type'
p44678
S'std::vector<double, std::allocator<double> >'
p44679
sS'default'
p44680
g3
sS'name'
p44681
S'y_positions'
p44682
sS'required'
p44683
I01
sS'group_name'
p44684
Nsa(dp44685
S'description'
p44686
S'The z-coordinate for each circle center\n'
p44687
sS'cpp_type'
p44688
S'std::vector<double, std::allocator<double> >'
p44689
sS'default'
p44690
g3
sS'name'
p44691
S'z_positions'
p44692
sS'required'
p44693
I01
sS'group_name'
p44694
Nsa(dp44695
S'description'
p44696
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p44697
sS'cpp_type'
p44698
S'bool'
p44699
sS'default'
p44700
S'0'
p44701
sS'name'
p44702
S'zero_gradient'
p44703
sS'required'
p44704
I00
sS'group_name'
p44705
NsasS'name'
p44706
S'/ICs/SpecifiedSmoothCircleIC'
p44707
sa(dp44708
S'description'
p44709
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p44710
sS'subblocks'
p44711
NsS'parameters'
p44712
(lp44713
(dp44714
S'description'
p44715
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44716
sS'cpp_type'
p44717
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44718
sS'default'
p44719
g3
sS'name'
p44720
S'block'
p44721
sS'required'
p44722
I00
sS'group_name'
p44723
Nsa(dp44724
S'description'
p44725
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44726
sS'cpp_type'
p44727
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p44728
sS'default'
p44729
g3
sS'name'
p44730
S'boundary'
p44731
sS'required'
p44732
I00
sS'group_name'
p44733
Nsa(dp44734
S'description'
p44735
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44736
sS'cpp_type'
p44737
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44738
sS'default'
p44739
g3
sS'name'
p44740
S'control_tags'
p44741
sS'required'
p44742
I00
sS'group_name'
p44743
Nsa(dp44744
S'description'
p44745
S'The z coordinate of the circle center\n'
p44746
sS'cpp_type'
p44747
S'double'
p44748
sS'default'
p44749
g3
sS'name'
p44750
S'height'
p44751
sS'required'
p44752
I01
sS'group_name'
p44753
Nsa(dp44754
S'description'
p44755
S'The variable value inside the circle\n'
p44756
sS'cpp_type'
p44757
S'double'
p44758
sS'default'
p44759
g3
sS'name'
p44760
S'invalue'
p44761
sS'required'
p44762
I01
sS'group_name'
p44763
Nsa(dp44764
S'description'
p44765
S'The variable value outside the circle\n'
p44766
sS'cpp_type'
p44767
S'double'
p44768
sS'default'
p44769
g3
sS'name'
p44770
S'outvalue'
p44771
sS'required'
p44772
I01
sS'group_name'
p44773
Nsa(dp44774
S'description'
p44775
g3
sS'cpp_type'
p44776
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44777
sS'default'
p44778
S'ThumbIC'
p44779
sS'name'
p44780
S'type'
p44781
sS'required'
p44782
I00
sS'group_name'
p44783
Nsa(dp44784
S'description'
p44785
S'The variable this initial condition is supposed to provide values for.\n'
p44786
sS'cpp_type'
p44787
S'VariableName'
p44788
sS'default'
p44789
g3
sS'name'
p44790
S'variable'
p44791
sS'required'
p44792
I01
sS'group_name'
p44793
Nsa(dp44794
S'description'
p44795
S'The y coordinate of the circle center\n'
p44796
sS'cpp_type'
p44797
S'double'
p44798
sS'default'
p44799
g3
sS'name'
p44800
S'width'
p44801
sS'required'
p44802
I01
sS'group_name'
p44803
Nsa(dp44804
S'description'
p44805
S'The x coordinate of the circle center\n'
p44806
sS'cpp_type'
p44807
S'double'
p44808
sS'default'
p44809
g3
sS'name'
p44810
S'xcoord'
p44811
sS'required'
p44812
I01
sS'group_name'
p44813
NsasS'name'
p44814
S'/ICs/ThumbIC'
p44815
sa(dp44816
S'description'
p44817
S'Tricrystal with two circles/bubbles\n'
p44818
sS'subblocks'
p44819
NsS'parameters'
p44820
(lp44821
(dp44822
S'description'
p44823
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44824
sS'cpp_type'
p44825
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44826
sS'default'
p44827
g3
sS'name'
p44828
S'block'
p44829
sS'required'
p44830
I00
sS'group_name'
p44831
Nsa(dp44832
S'description'
p44833
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44834
sS'cpp_type'
p44835
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p44836
sS'default'
p44837
g3
sS'name'
p44838
S'boundary'
p44839
sS'required'
p44840
I00
sS'group_name'
p44841
Nsa(dp44842
S'description'
p44843
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44844
sS'cpp_type'
p44845
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44846
sS'default'
p44847
g3
sS'name'
p44848
S'control_tags'
p44849
sS'required'
p44850
I00
sS'group_name'
p44851
Nsa(dp44852
S'description'
p44853
S'Index for the current grain order parameter\n'
p44854
sS'cpp_type'
p44855
S'unsigned int'
p44856
sS'default'
p44857
g3
sS'name'
p44858
S'op_index'
p44859
sS'required'
p44860
I01
sS'group_name'
p44861
Nsa(dp44862
S'description'
p44863
S'Number of grain order parameters\n'
p44864
sS'cpp_type'
p44865
S'unsigned int'
p44866
sS'default'
p44867
g3
sS'name'
p44868
S'op_num'
p44869
sS'required'
p44870
I01
sS'group_name'
p44871
Nsa(dp44872
S'description'
p44873
g3
sS'cpp_type'
p44874
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44875
sS'default'
p44876
S'Tricrystal2CircleGrainsIC'
p44877
sS'name'
p44878
S'type'
p44879
sS'required'
p44880
I00
sS'group_name'
p44881
Nsa(dp44882
S'description'
p44883
S'The variable this initial condition is supposed to provide values for.\n'
p44884
sS'cpp_type'
p44885
S'VariableName'
p44886
sS'default'
p44887
g3
sS'name'
p44888
S'variable'
p44889
sS'required'
p44890
I01
sS'group_name'
p44891
NsasS'name'
p44892
S'/ICs/Tricrystal2CircleGrainsIC'
p44893
sasS'parameters'
p44894
NsS'name'
p44895
S'/ICs'
p44896
sa(dp44897
S'description'
p44898
g3
sS'subblocks'
p44899
(lp44900
(dp44901
S'description'
p44902
g3
sS'subblocks'
p44903
NsS'parameters'
p44904
(lp44905
(dp44906
S'description'
p44907
S'A string representing the Moose Object that will be built by this Action\n'
p44908
sS'cpp_type'
p44909
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p44910
sS'default'
p44911
g3
sS'name'
p44912
S'type'
p44913
sS'required'
p44914
I01
sS'group_name'
p44915
NsasS'name'
p44916
S'/Kernels/*'
p44917
sa(dp44918
S'description'
p44919
S'Grain-Boundary model concentration dependent residual\n'
p44920
sS'subblocks'
p44921
NsS'parameters'
p44922
(lp44923
(dp44924
S'description'
p44925
S'Vector of nonlinear variable arguments this object depends on\n'
p44926
sS'cpp_type'
p44927
S'std::vector<VariableName>'
p44928
sS'default'
p44929
g3
sS'name'
p44930
S'args'
p44931
sS'required'
p44932
I00
sS'group_name'
p44933
Nsa(dp44934
S'description'
p44935
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44936
sS'cpp_type'
p44937
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p44938
sS'default'
p44939
g3
sS'name'
p44940
S'block'
p44941
sS'required'
p44942
I00
sS'group_name'
p44943
Nsa(dp44944
S'description'
p44945
S'Other species concentration\n'
p44946
sS'cpp_type'
p44947
S'std::vector<VariableName>'
p44948
sS'default'
p44949
g3
sS'name'
p44950
S'c'
p44951
sS'required'
p44952
I01
sS'group_name'
p44953
Nsa(dp44954
S'description'
p44955
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44956
sS'cpp_type'
p44957
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p44958
sS'default'
p44959
g3
sS'name'
p44960
S'control_tags'
p44961
sS'required'
p44962
I00
sS'group_name'
p44963
Nsa(dp44964
S'description'
p44965
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p44966
sS'cpp_type'
p44967
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p44968
sS'default'
p44969
g3
sS'name'
p44970
S'diag_save_in'
p44971
sS'required'
p44972
I00
sS'group_name'
p44973
S'Advanced'
p44974
sa(dp44975
S'description'
p44976
S'Ratio of surface energy to GB energy\n'
p44977
sS'cpp_type'
p44978
S'double'
p44979
sS'default'
p44980
S'1'
p44981
sS'name'
p44982
S'en_ratio'
p44983
sS'required'
p44984
I00
sS'group_name'
p44985
Nsa(dp44986
S'description'
p44987
S'Determines whether this object is calculated using an implicit or explicit form\n'
p44988
sS'cpp_type'
p44989
S'bool'
p44990
sS'default'
p44991
S'1'
p44992
sS'name'
p44993
S'implicit'
p44994
sS'required'
p44995
I00
sS'group_name'
p44996
S'Advanced'
p44997
sa(dp44998
S'description'
p44999
S'The mobility used with the kernel\n'
p45000
sS'cpp_type'
p45001
S'MaterialPropertyName'
p45002
sS'default'
p45003
S'L'
p45004
sS'name'
p45005
S'mob_name'
p45006
sS'required'
p45007
I00
sS'group_name'
p45008
Nsa(dp45009
S'description'
p45010
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45011
sS'cpp_type'
p45012
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45013
sS'default'
p45014
g3
sS'name'
p45015
S'save_in'
p45016
sS'required'
p45017
I00
sS'group_name'
p45018
S'Advanced'
p45019
sa(dp45020
S'description'
p45021
S'The seed for the master random number generator\n'
p45022
sS'cpp_type'
p45023
S'unsigned int'
p45024
sS'default'
p45025
S'0'
p45026
sS'name'
p45027
S'seed'
p45028
sS'required'
p45029
I00
sS'group_name'
p45030
S'Advanced'
p45031
sa(dp45032
S'description'
p45033
g3
sS'cpp_type'
p45034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45035
sS'default'
p45036
S'ACGBPoly'
p45037
sS'name'
p45038
S'type'
p45039
sS'required'
p45040
I00
sS'group_name'
p45041
Nsa(dp45042
S'description'
p45043
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45044
sS'cpp_type'
p45045
S'bool'
p45046
sS'default'
p45047
S'0'
p45048
sS'name'
p45049
S'use_displaced_mesh'
p45050
sS'required'
p45051
I00
sS'group_name'
p45052
S'Advanced'
p45053
sa(dp45054
S'description'
p45055
S'The name of the variable that this Kernel operates on\n'
p45056
sS'cpp_type'
p45057
S'NonlinearVariableName'
p45058
sS'default'
p45059
g3
sS'name'
p45060
S'variable'
p45061
sS'required'
p45062
I01
sS'group_name'
p45063
NsasS'name'
p45064
S'/Kernels/ACGBPoly'
p45065
sa(dp45066
S'description'
p45067
S'Adds elastic energy contribution to the Allen-Cahn equation\n'
p45068
sS'subblocks'
p45069
NsS'parameters'
p45070
(lp45071
(dp45072
S'description'
p45073
S'The elastic tensor derivative for the specific order parameter\n'
p45074
sS'cpp_type'
p45075
S'MaterialPropertyName'
p45076
sS'default'
p45077
g3
sS'name'
p45078
S'D_tensor_name'
p45079
sS'required'
p45080
I01
sS'group_name'
p45081
Nsa(dp45082
S'description'
p45083
S'Vector of nonlinear variable arguments this object depends on\n'
p45084
sS'cpp_type'
p45085
S'std::vector<VariableName>'
p45086
sS'default'
p45087
g3
sS'name'
p45088
S'args'
p45089
sS'required'
p45090
I00
sS'group_name'
p45091
Nsa(dp45092
S'description'
p45093
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45094
sS'cpp_type'
p45095
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45096
sS'default'
p45097
g3
sS'name'
p45098
S'block'
p45099
sS'required'
p45100
I00
sS'group_name'
p45101
Nsa(dp45102
S'description'
p45103
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45104
sS'cpp_type'
p45105
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45106
sS'default'
p45107
g3
sS'name'
p45108
S'control_tags'
p45109
sS'required'
p45110
I00
sS'group_name'
p45111
Nsa(dp45112
S'description'
p45113
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45114
sS'cpp_type'
p45115
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45116
sS'default'
p45117
g3
sS'name'
p45118
S'diag_save_in'
p45119
sS'required'
p45120
I00
sS'group_name'
p45121
S'Advanced'
p45122
sa(dp45123
S'description'
p45124
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45125
sS'cpp_type'
p45126
S'bool'
p45127
sS'default'
p45128
S'1'
p45129
sS'name'
p45130
S'implicit'
p45131
sS'required'
p45132
I00
sS'group_name'
p45133
S'Advanced'
p45134
sa(dp45135
S'description'
p45136
S'The mobility used with the kernel\n'
p45137
sS'cpp_type'
p45138
S'MaterialPropertyName'
p45139
sS'default'
p45140
S'L'
p45141
sS'name'
p45142
S'mob_name'
p45143
sS'required'
p45144
I00
sS'group_name'
p45145
Nsa(dp45146
S'description'
p45147
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45148
sS'cpp_type'
p45149
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45150
sS'default'
p45151
g3
sS'name'
p45152
S'save_in'
p45153
sS'required'
p45154
I00
sS'group_name'
p45155
S'Advanced'
p45156
sa(dp45157
S'description'
p45158
S'The seed for the master random number generator\n'
p45159
sS'cpp_type'
p45160
S'unsigned int'
p45161
sS'default'
p45162
S'0'
p45163
sS'name'
p45164
S'seed'
p45165
sS'required'
p45166
I00
sS'group_name'
p45167
S'Advanced'
p45168
sa(dp45169
S'description'
p45170
g3
sS'cpp_type'
p45171
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45172
sS'default'
p45173
S'ACGrGrElasticDrivingForce'
p45174
sS'name'
p45175
S'type'
p45176
sS'required'
p45177
I00
sS'group_name'
p45178
Nsa(dp45179
S'description'
p45180
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45181
sS'cpp_type'
p45182
S'bool'
p45183
sS'default'
p45184
S'0'
p45185
sS'name'
p45186
S'use_displaced_mesh'
p45187
sS'required'
p45188
I00
sS'group_name'
p45189
S'Advanced'
p45190
sa(dp45191
S'description'
p45192
S'The name of the variable that this Kernel operates on\n'
p45193
sS'cpp_type'
p45194
S'NonlinearVariableName'
p45195
sS'default'
p45196
g3
sS'name'
p45197
S'variable'
p45198
sS'required'
p45199
I01
sS'group_name'
p45200
NsasS'name'
p45201
S'/Kernels/ACGrGrElasticDrivingForce'
p45202
sa(dp45203
S'description'
p45204
S'Grain-Boundary model poly crystaline interface Allen-Cahn Kernel\n'
p45205
sS'subblocks'
p45206
NsS'parameters'
p45207
(lp45208
(dp45209
S'description'
p45210
S'temperature\n'
p45211
sS'cpp_type'
p45212
S'std::vector<VariableName>'
p45213
sS'default'
p45214
g3
sS'name'
p45215
S'T'
p45216
sS'required'
p45217
I00
sS'group_name'
p45218
Nsa(dp45219
S'description'
p45220
S'Vector of nonlinear variable arguments this object depends on\n'
p45221
sS'cpp_type'
p45222
S'std::vector<VariableName>'
p45223
sS'default'
p45224
g3
sS'name'
p45225
S'args'
p45226
sS'required'
p45227
I00
sS'group_name'
p45228
Nsa(dp45229
S'description'
p45230
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45231
sS'cpp_type'
p45232
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45233
sS'default'
p45234
g3
sS'name'
p45235
S'block'
p45236
sS'required'
p45237
I00
sS'group_name'
p45238
Nsa(dp45239
S'description'
p45240
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45241
sS'cpp_type'
p45242
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45243
sS'default'
p45244
g3
sS'name'
p45245
S'control_tags'
p45246
sS'required'
p45247
I00
sS'group_name'
p45248
Nsa(dp45249
S'description'
p45250
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45251
sS'cpp_type'
p45252
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45253
sS'default'
p45254
g3
sS'name'
p45255
S'diag_save_in'
p45256
sS'required'
p45257
I00
sS'group_name'
p45258
S'Advanced'
p45259
sa(dp45260
S'description'
p45261
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45262
sS'cpp_type'
p45263
S'bool'
p45264
sS'default'
p45265
S'1'
p45266
sS'name'
p45267
S'implicit'
p45268
sS'required'
p45269
I00
sS'group_name'
p45270
S'Advanced'
p45271
sa(dp45272
S'description'
p45273
S'The mobility used with the kernel\n'
p45274
sS'cpp_type'
p45275
S'MaterialPropertyName'
p45276
sS'default'
p45277
S'L'
p45278
sS'name'
p45279
S'mob_name'
p45280
sS'required'
p45281
I00
sS'group_name'
p45282
Nsa(dp45283
S'description'
p45284
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45285
sS'cpp_type'
p45286
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45287
sS'default'
p45288
g3
sS'name'
p45289
S'save_in'
p45290
sS'required'
p45291
I00
sS'group_name'
p45292
S'Advanced'
p45293
sa(dp45294
S'description'
p45295
S'The seed for the master random number generator\n'
p45296
sS'cpp_type'
p45297
S'unsigned int'
p45298
sS'default'
p45299
S'0'
p45300
sS'name'
p45301
S'seed'
p45302
sS'required'
p45303
I00
sS'group_name'
p45304
S'Advanced'
p45305
sa(dp45306
S'description'
p45307
g3
sS'cpp_type'
p45308
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45309
sS'default'
p45310
S'ACGrGrPoly'
p45311
sS'name'
p45312
S'type'
p45313
sS'required'
p45314
I00
sS'group_name'
p45315
Nsa(dp45316
S'description'
p45317
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45318
sS'cpp_type'
p45319
S'bool'
p45320
sS'default'
p45321
S'0'
p45322
sS'name'
p45323
S'use_displaced_mesh'
p45324
sS'required'
p45325
I00
sS'group_name'
p45326
S'Advanced'
p45327
sa(dp45328
S'description'
p45329
S'Array of coupled variable names\n'
p45330
sS'cpp_type'
p45331
S'std::vector<VariableName>'
p45332
sS'default'
p45333
g3
sS'name'
p45334
S'v'
p45335
sS'required'
p45336
I01
sS'group_name'
p45337
Nsa(dp45338
S'description'
p45339
S'The name of the variable that this Kernel operates on\n'
p45340
sS'cpp_type'
p45341
S'NonlinearVariableName'
p45342
sS'default'
p45343
g3
sS'name'
p45344
S'variable'
p45345
sS'required'
p45346
I01
sS'group_name'
p45347
NsasS'name'
p45348
S'/Kernels/ACGrGrPoly'
p45349
sa(dp45350
S'description'
p45351
S'Gradient energy Allen-Cahn Kernel\n'
p45352
sS'subblocks'
p45353
NsS'parameters'
p45354
(lp45355
(dp45356
S'description'
p45357
S'Vector of nonlinear variable arguments this object depends on\n'
p45358
sS'cpp_type'
p45359
S'std::vector<VariableName>'
p45360
sS'default'
p45361
g3
sS'name'
p45362
S'args'
p45363
sS'required'
p45364
I00
sS'group_name'
p45365
Nsa(dp45366
S'description'
p45367
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45368
sS'cpp_type'
p45369
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45370
sS'default'
p45371
g3
sS'name'
p45372
S'block'
p45373
sS'required'
p45374
I00
sS'group_name'
p45375
Nsa(dp45376
S'description'
p45377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45378
sS'cpp_type'
p45379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45380
sS'default'
p45381
g3
sS'name'
p45382
S'control_tags'
p45383
sS'required'
p45384
I00
sS'group_name'
p45385
Nsa(dp45386
S'description'
p45387
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45388
sS'cpp_type'
p45389
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45390
sS'default'
p45391
g3
sS'name'
p45392
S'diag_save_in'
p45393
sS'required'
p45394
I00
sS'group_name'
p45395
S'Advanced'
p45396
sa(dp45397
S'description'
p45398
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45399
sS'cpp_type'
p45400
S'bool'
p45401
sS'default'
p45402
S'1'
p45403
sS'name'
p45404
S'implicit'
p45405
sS'required'
p45406
I00
sS'group_name'
p45407
S'Advanced'
p45408
sa(dp45409
S'description'
p45410
S'The kappa used with the kernel\n'
p45411
sS'cpp_type'
p45412
S'MaterialPropertyName'
p45413
sS'default'
p45414
S'kappa_op'
p45415
sS'name'
p45416
S'kappa_name'
p45417
sS'required'
p45418
I00
sS'group_name'
p45419
Nsa(dp45420
S'description'
p45421
S'The mobility used with the kernel\n'
p45422
sS'cpp_type'
p45423
S'MaterialPropertyName'
p45424
sS'default'
p45425
S'L'
p45426
sS'name'
p45427
S'mob_name'
p45428
sS'required'
p45429
I00
sS'group_name'
p45430
Nsa(dp45431
S'description'
p45432
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45433
sS'cpp_type'
p45434
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45435
sS'default'
p45436
g3
sS'name'
p45437
S'save_in'
p45438
sS'required'
p45439
I00
sS'group_name'
p45440
S'Advanced'
p45441
sa(dp45442
S'description'
p45443
S'The seed for the master random number generator\n'
p45444
sS'cpp_type'
p45445
S'unsigned int'
p45446
sS'default'
p45447
S'0'
p45448
sS'name'
p45449
S'seed'
p45450
sS'required'
p45451
I00
sS'group_name'
p45452
S'Advanced'
p45453
sa(dp45454
S'description'
p45455
g3
sS'cpp_type'
p45456
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45457
sS'default'
p45458
S'ACInterface'
p45459
sS'name'
p45460
S'type'
p45461
sS'required'
p45462
I00
sS'group_name'
p45463
Nsa(dp45464
S'description'
p45465
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45466
sS'cpp_type'
p45467
S'bool'
p45468
sS'default'
p45469
S'0'
p45470
sS'name'
p45471
S'use_displaced_mesh'
p45472
sS'required'
p45473
I00
sS'group_name'
p45474
S'Advanced'
p45475
sa(dp45476
S'description'
p45477
S'The name of the variable that this Kernel operates on\n'
p45478
sS'cpp_type'
p45479
S'NonlinearVariableName'
p45480
sS'default'
p45481
g3
sS'name'
p45482
S'variable'
p45483
sS'required'
p45484
I01
sS'group_name'
p45485
Nsa(dp45486
S'description'
p45487
S'The mobility is a function of any non-linear variable\n'
p45488
sS'cpp_type'
p45489
S'bool'
p45490
sS'default'
p45491
S'1'
p45492
sS'name'
p45493
S'variable_L'
p45494
sS'required'
p45495
I00
sS'group_name'
p45496
Nsa(dp45497
S'description'
p45498
S'Kappa is a function of any non-linear variable (must use ACInterfaceKappa Kernel along with this option)\n'
p45499
sS'cpp_type'
p45500
S'bool'
p45501
sS'default'
p45502
S'0'
p45503
sS'name'
p45504
S'variable_kappa'
p45505
sS'required'
p45506
I00
sS'group_name'
p45507
NsasS'name'
p45508
S'/Kernels/ACInterface'
p45509
sa(dp45510
S'description'
p45511
S'Anisotropic gradient energy Allen-Cahn Kernel Part 1\n'
p45512
sS'subblocks'
p45513
NsS'parameters'
p45514
(lp45515
(dp45516
S'description'
p45517
S'Vector of nonlinear variable arguments this object depends on\n'
p45518
sS'cpp_type'
p45519
S'std::vector<VariableName>'
p45520
sS'default'
p45521
g3
sS'name'
p45522
S'args'
p45523
sS'required'
p45524
I00
sS'group_name'
p45525
Nsa(dp45526
S'description'
p45527
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45528
sS'cpp_type'
p45529
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45530
sS'default'
p45531
g3
sS'name'
p45532
S'block'
p45533
sS'required'
p45534
I00
sS'group_name'
p45535
Nsa(dp45536
S'description'
p45537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45538
sS'cpp_type'
p45539
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45540
sS'default'
p45541
g3
sS'name'
p45542
S'control_tags'
p45543
sS'required'
p45544
I00
sS'group_name'
p45545
Nsa(dp45546
S'description'
p45547
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45548
sS'cpp_type'
p45549
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45550
sS'default'
p45551
g3
sS'name'
p45552
S'diag_save_in'
p45553
sS'required'
p45554
I00
sS'group_name'
p45555
S'Advanced'
p45556
sa(dp45557
S'description'
p45558
S'The derivative of anisotropic parameter with respect to angle\n'
p45559
sS'cpp_type'
p45560
S'MaterialPropertyName'
p45561
sS'default'
p45562
S'eps1'
p45563
sS'name'
p45564
S'eps1_name'
p45565
sS'required'
p45566
I00
sS'group_name'
p45567
Nsa(dp45568
S'description'
p45569
S'The anisotropic parameter\n'
p45570
sS'cpp_type'
p45571
S'MaterialPropertyName'
p45572
sS'default'
p45573
S'eps'
p45574
sS'name'
p45575
S'eps_name'
p45576
sS'required'
p45577
I00
sS'group_name'
p45578
Nsa(dp45579
S'description'
p45580
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45581
sS'cpp_type'
p45582
S'bool'
p45583
sS'default'
p45584
S'1'
p45585
sS'name'
p45586
S'implicit'
p45587
sS'required'
p45588
I00
sS'group_name'
p45589
S'Advanced'
p45590
sa(dp45591
S'description'
p45592
S'The mobility used with the kernel\n'
p45593
sS'cpp_type'
p45594
S'MaterialPropertyName'
p45595
sS'default'
p45596
S'L'
p45597
sS'name'
p45598
S'mob_name'
p45599
sS'required'
p45600
I00
sS'group_name'
p45601
Nsa(dp45602
S'description'
p45603
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45604
sS'cpp_type'
p45605
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45606
sS'default'
p45607
g3
sS'name'
p45608
S'save_in'
p45609
sS'required'
p45610
I00
sS'group_name'
p45611
S'Advanced'
p45612
sa(dp45613
S'description'
p45614
S'The seed for the master random number generator\n'
p45615
sS'cpp_type'
p45616
S'unsigned int'
p45617
sS'default'
p45618
S'0'
p45619
sS'name'
p45620
S'seed'
p45621
sS'required'
p45622
I00
sS'group_name'
p45623
S'Advanced'
p45624
sa(dp45625
S'description'
p45626
g3
sS'cpp_type'
p45627
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45628
sS'default'
p45629
S'ACInterfaceKobayashi1'
p45630
sS'name'
p45631
S'type'
p45632
sS'required'
p45633
I00
sS'group_name'
p45634
Nsa(dp45635
S'description'
p45636
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45637
sS'cpp_type'
p45638
S'bool'
p45639
sS'default'
p45640
S'0'
p45641
sS'name'
p45642
S'use_displaced_mesh'
p45643
sS'required'
p45644
I00
sS'group_name'
p45645
S'Advanced'
p45646
sa(dp45647
S'description'
p45648
S'The name of the variable that this Kernel operates on\n'
p45649
sS'cpp_type'
p45650
S'NonlinearVariableName'
p45651
sS'default'
p45652
g3
sS'name'
p45653
S'variable'
p45654
sS'required'
p45655
I01
sS'group_name'
p45656
NsasS'name'
p45657
S'/Kernels/ACInterfaceKobayashi1'
p45658
sa(dp45659
S'description'
p45660
S'Anisotropic Gradient energy Allen-Cahn Kernel Part 2\n'
p45661
sS'subblocks'
p45662
NsS'parameters'
p45663
(lp45664
(dp45665
S'description'
p45666
S'Vector of nonlinear variable arguments this object depends on\n'
p45667
sS'cpp_type'
p45668
S'std::vector<VariableName>'
p45669
sS'default'
p45670
g3
sS'name'
p45671
S'args'
p45672
sS'required'
p45673
I00
sS'group_name'
p45674
Nsa(dp45675
S'description'
p45676
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45677
sS'cpp_type'
p45678
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45679
sS'default'
p45680
g3
sS'name'
p45681
S'block'
p45682
sS'required'
p45683
I00
sS'group_name'
p45684
Nsa(dp45685
S'description'
p45686
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45687
sS'cpp_type'
p45688
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45689
sS'default'
p45690
g3
sS'name'
p45691
S'control_tags'
p45692
sS'required'
p45693
I00
sS'group_name'
p45694
Nsa(dp45695
S'description'
p45696
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45697
sS'cpp_type'
p45698
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45699
sS'default'
p45700
g3
sS'name'
p45701
S'diag_save_in'
p45702
sS'required'
p45703
I00
sS'group_name'
p45704
S'Advanced'
p45705
sa(dp45706
S'description'
p45707
S'The anisotropic parameter\n'
p45708
sS'cpp_type'
p45709
S'MaterialPropertyName'
p45710
sS'default'
p45711
S'eps'
p45712
sS'name'
p45713
S'eps_name'
p45714
sS'required'
p45715
I00
sS'group_name'
p45716
Nsa(dp45717
S'description'
p45718
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45719
sS'cpp_type'
p45720
S'bool'
p45721
sS'default'
p45722
S'1'
p45723
sS'name'
p45724
S'implicit'
p45725
sS'required'
p45726
I00
sS'group_name'
p45727
S'Advanced'
p45728
sa(dp45729
S'description'
p45730
S'The mobility used with the kernel\n'
p45731
sS'cpp_type'
p45732
S'MaterialPropertyName'
p45733
sS'default'
p45734
S'L'
p45735
sS'name'
p45736
S'mob_name'
p45737
sS'required'
p45738
I00
sS'group_name'
p45739
Nsa(dp45740
S'description'
p45741
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45742
sS'cpp_type'
p45743
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45744
sS'default'
p45745
g3
sS'name'
p45746
S'save_in'
p45747
sS'required'
p45748
I00
sS'group_name'
p45749
S'Advanced'
p45750
sa(dp45751
S'description'
p45752
S'The seed for the master random number generator\n'
p45753
sS'cpp_type'
p45754
S'unsigned int'
p45755
sS'default'
p45756
S'0'
p45757
sS'name'
p45758
S'seed'
p45759
sS'required'
p45760
I00
sS'group_name'
p45761
S'Advanced'
p45762
sa(dp45763
S'description'
p45764
g3
sS'cpp_type'
p45765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45766
sS'default'
p45767
S'ACInterfaceKobayashi2'
p45768
sS'name'
p45769
S'type'
p45770
sS'required'
p45771
I00
sS'group_name'
p45772
Nsa(dp45773
S'description'
p45774
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45775
sS'cpp_type'
p45776
S'bool'
p45777
sS'default'
p45778
S'0'
p45779
sS'name'
p45780
S'use_displaced_mesh'
p45781
sS'required'
p45782
I00
sS'group_name'
p45783
S'Advanced'
p45784
sa(dp45785
S'description'
p45786
S'The name of the variable that this Kernel operates on\n'
p45787
sS'cpp_type'
p45788
S'NonlinearVariableName'
p45789
sS'default'
p45790
g3
sS'name'
p45791
S'variable'
p45792
sS'required'
p45793
I01
sS'group_name'
p45794
NsasS'name'
p45795
S'/Kernels/ACInterfaceKobayashi2'
p45796
sa(dp45797
S'description'
p45798
S'Gradient energy Allen-Cahn Kernel with cross terms\n'
p45799
sS'subblocks'
p45800
NsS'parameters'
p45801
(lp45802
(dp45803
S'description'
p45804
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45805
sS'cpp_type'
p45806
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45807
sS'default'
p45808
g3
sS'name'
p45809
S'block'
p45810
sS'required'
p45811
I00
sS'group_name'
p45812
Nsa(dp45813
S'description'
p45814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45815
sS'cpp_type'
p45816
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45817
sS'default'
p45818
g3
sS'name'
p45819
S'control_tags'
p45820
sS'required'
p45821
I00
sS'group_name'
p45822
Nsa(dp45823
S'description'
p45824
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45825
sS'cpp_type'
p45826
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45827
sS'default'
p45828
g3
sS'name'
p45829
S'diag_save_in'
p45830
sS'required'
p45831
I00
sS'group_name'
p45832
S'Advanced'
p45833
sa(dp45834
S'description'
p45835
S'All eta_i order parameters of the multiphase problem\n'
p45836
sS'cpp_type'
p45837
S'std::vector<VariableName>'
p45838
sS'default'
p45839
g3
sS'name'
p45840
S'etas'
p45841
sS'required'
p45842
I01
sS'group_name'
p45843
Nsa(dp45844
S'description'
p45845
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45846
sS'cpp_type'
p45847
S'bool'
p45848
sS'default'
p45849
S'1'
p45850
sS'name'
p45851
S'implicit'
p45852
sS'required'
p45853
I00
sS'group_name'
p45854
S'Advanced'
p45855
sa(dp45856
S'description'
p45857
S'The kappa used with the kernel\n'
p45858
sS'cpp_type'
p45859
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p45860
sS'default'
p45861
g3
sS'name'
p45862
S'kappa_names'
p45863
sS'required'
p45864
I01
sS'group_name'
p45865
Nsa(dp45866
S'description'
p45867
S'The mobility used with the kernel\n'
p45868
sS'cpp_type'
p45869
S'MaterialPropertyName'
p45870
sS'default'
p45871
S'L'
p45872
sS'name'
p45873
S'mob_name'
p45874
sS'required'
p45875
I00
sS'group_name'
p45876
Nsa(dp45877
S'description'
p45878
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45879
sS'cpp_type'
p45880
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45881
sS'default'
p45882
g3
sS'name'
p45883
S'save_in'
p45884
sS'required'
p45885
I00
sS'group_name'
p45886
S'Advanced'
p45887
sa(dp45888
S'description'
p45889
S'The seed for the master random number generator\n'
p45890
sS'cpp_type'
p45891
S'unsigned int'
p45892
sS'default'
p45893
S'0'
p45894
sS'name'
p45895
S'seed'
p45896
sS'required'
p45897
I00
sS'group_name'
p45898
S'Advanced'
p45899
sa(dp45900
S'description'
p45901
g3
sS'cpp_type'
p45902
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p45903
sS'default'
p45904
S'ACMultiInterface'
p45905
sS'name'
p45906
S'type'
p45907
sS'required'
p45908
I00
sS'group_name'
p45909
Nsa(dp45910
S'description'
p45911
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45912
sS'cpp_type'
p45913
S'bool'
p45914
sS'default'
p45915
S'0'
p45916
sS'name'
p45917
S'use_displaced_mesh'
p45918
sS'required'
p45919
I00
sS'group_name'
p45920
S'Advanced'
p45921
sa(dp45922
S'description'
p45923
S'The name of the variable that this Kernel operates on\n'
p45924
sS'cpp_type'
p45925
S'NonlinearVariableName'
p45926
sS'default'
p45927
g3
sS'name'
p45928
S'variable'
p45929
sS'required'
p45930
I01
sS'group_name'
p45931
NsasS'name'
p45932
S'/Kernels/ACMultiInterface'
p45933
sa(dp45934
S'description'
p45935
S'Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n'
p45936
sS'subblocks'
p45937
NsS'parameters'
p45938
(lp45939
(dp45940
S'description'
p45941
S'Vector of nonlinear variable arguments this object depends on\n'
p45942
sS'cpp_type'
p45943
S'std::vector<VariableName>'
p45944
sS'default'
p45945
g3
sS'name'
p45946
S'args'
p45947
sS'required'
p45948
I00
sS'group_name'
p45949
Nsa(dp45950
S'description'
p45951
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45952
sS'cpp_type'
p45953
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p45954
sS'default'
p45955
g3
sS'name'
p45956
S'block'
p45957
sS'required'
p45958
I00
sS'group_name'
p45959
Nsa(dp45960
S'description'
p45961
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45962
sS'cpp_type'
p45963
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p45964
sS'default'
p45965
g3
sS'name'
p45966
S'control_tags'
p45967
sS'required'
p45968
I00
sS'group_name'
p45969
Nsa(dp45970
S'description'
p45971
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p45972
sS'cpp_type'
p45973
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p45974
sS'default'
p45975
g3
sS'name'
p45976
S'diag_save_in'
p45977
sS'required'
p45978
I00
sS'group_name'
p45979
S'Advanced'
p45980
sa(dp45981
S'description'
p45982
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p45983
sS'cpp_type'
p45984
S'MaterialPropertyName'
p45985
sS'default'
p45986
g3
sS'name'
p45987
S'f_name'
p45988
sS'required'
p45989
I01
sS'group_name'
p45990
Nsa(dp45991
S'description'
p45992
S'Determines whether this object is calculated using an implicit or explicit form\n'
p45993
sS'cpp_type'
p45994
S'bool'
p45995
sS'default'
p45996
S'1'
p45997
sS'name'
p45998
S'implicit'
p45999
sS'required'
p46000
I00
sS'group_name'
p46001
S'Advanced'
p46002
sa(dp46003
S'description'
p46004
S'The mobility used with the kernel\n'
p46005
sS'cpp_type'
p46006
S'MaterialPropertyName'
p46007
sS'default'
p46008
S'L'
p46009
sS'name'
p46010
S'mob_name'
p46011
sS'required'
p46012
I00
sS'group_name'
p46013
Nsa(dp46014
S'description'
p46015
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46016
sS'cpp_type'
p46017
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46018
sS'default'
p46019
g3
sS'name'
p46020
S'save_in'
p46021
sS'required'
p46022
I00
sS'group_name'
p46023
S'Advanced'
p46024
sa(dp46025
S'description'
p46026
S'The seed for the master random number generator\n'
p46027
sS'cpp_type'
p46028
S'unsigned int'
p46029
sS'default'
p46030
S'0'
p46031
sS'name'
p46032
S'seed'
p46033
sS'required'
p46034
I00
sS'group_name'
p46035
S'Advanced'
p46036
sa(dp46037
S'description'
p46038
g3
sS'cpp_type'
p46039
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46040
sS'default'
p46041
S'ACParsed'
p46042
sS'name'
p46043
S'type'
p46044
sS'required'
p46045
I00
sS'group_name'
p46046
Nsa(dp46047
S'description'
p46048
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46049
sS'cpp_type'
p46050
S'bool'
p46051
sS'default'
p46052
S'0'
p46053
sS'name'
p46054
S'use_displaced_mesh'
p46055
sS'required'
p46056
I00
sS'group_name'
p46057
S'Advanced'
p46058
sa(dp46059
S'description'
p46060
S'The name of the variable that this Kernel operates on\n'
p46061
sS'cpp_type'
p46062
S'NonlinearVariableName'
p46063
sS'default'
p46064
g3
sS'name'
p46065
S'variable'
p46066
sS'required'
p46067
I01
sS'group_name'
p46068
NsasS'name'
p46069
S'/Kernels/ACParsed'
p46070
sa(dp46071
S'description'
p46072
g3
sS'subblocks'
p46073
NsS'parameters'
p46074
(lp46075
(dp46076
S'description'
p46077
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46078
sS'cpp_type'
p46079
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46080
sS'default'
p46081
g3
sS'name'
p46082
S'block'
p46083
sS'required'
p46084
I00
sS'group_name'
p46085
Nsa(dp46086
S'description'
p46087
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46088
sS'cpp_type'
p46089
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46090
sS'default'
p46091
g3
sS'name'
p46092
S'control_tags'
p46093
sS'required'
p46094
I00
sS'group_name'
p46095
Nsa(dp46096
S'description'
p46097
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46098
sS'cpp_type'
p46099
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46100
sS'default'
p46101
g3
sS'name'
p46102
S'diag_save_in'
p46103
sS'required'
p46104
I00
sS'group_name'
p46105
S'Advanced'
p46106
sa(dp46107
S'description'
p46108
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46109
sS'cpp_type'
p46110
S'bool'
p46111
sS'default'
p46112
S'1'
p46113
sS'name'
p46114
S'implicit'
p46115
sS'required'
p46116
I00
sS'group_name'
p46117
S'Advanced'
p46118
sa(dp46119
S'description'
p46120
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46121
sS'cpp_type'
p46122
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46123
sS'default'
p46124
g3
sS'name'
p46125
S'save_in'
p46126
sS'required'
p46127
I00
sS'group_name'
p46128
S'Advanced'
p46129
sa(dp46130
S'description'
p46131
S'The seed for the master random number generator\n'
p46132
sS'cpp_type'
p46133
S'unsigned int'
p46134
sS'default'
p46135
S'0'
p46136
sS'name'
p46137
S'seed'
p46138
sS'required'
p46139
I00
sS'group_name'
p46140
S'Advanced'
p46141
sa(dp46142
S'description'
p46143
g3
sS'cpp_type'
p46144
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46145
sS'default'
p46146
S'AnisoHeatConduction'
p46147
sS'name'
p46148
S'type'
p46149
sS'required'
p46150
I00
sS'group_name'
p46151
Nsa(dp46152
S'description'
p46153
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46154
sS'cpp_type'
p46155
S'bool'
p46156
sS'default'
p46157
S'1'
p46158
sS'name'
p46159
S'use_displaced_mesh'
p46160
sS'required'
p46161
I00
sS'group_name'
p46162
S'Advanced'
p46163
sa(dp46164
S'description'
p46165
S'The name of the variable that this Kernel operates on\n'
p46166
sS'cpp_type'
p46167
S'NonlinearVariableName'
p46168
sS'default'
p46169
g3
sS'name'
p46170
S'variable'
p46171
sS'required'
p46172
I01
sS'group_name'
p46173
NsasS'name'
p46174
S'/Kernels/AnisoHeatConduction'
p46175
sa(dp46176
S'description'
p46177
g3
sS'subblocks'
p46178
NsS'parameters'
p46179
(lp46180
(dp46181
S'description'
p46182
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46183
sS'cpp_type'
p46184
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46185
sS'default'
p46186
g3
sS'name'
p46187
S'block'
p46188
sS'required'
p46189
I00
sS'group_name'
p46190
Nsa(dp46191
S'description'
p46192
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46193
sS'cpp_type'
p46194
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46195
sS'default'
p46196
g3
sS'name'
p46197
S'control_tags'
p46198
sS'required'
p46199
I00
sS'group_name'
p46200
Nsa(dp46201
S'description'
p46202
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46203
sS'cpp_type'
p46204
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46205
sS'default'
p46206
g3
sS'name'
p46207
S'diag_save_in'
p46208
sS'required'
p46209
I00
sS'group_name'
p46210
S'Advanced'
p46211
sa(dp46212
S'description'
p46213
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46214
sS'cpp_type'
p46215
S'bool'
p46216
sS'default'
p46217
S'1'
p46218
sS'name'
p46219
S'implicit'
p46220
sS'required'
p46221
I00
sS'group_name'
p46222
S'Advanced'
p46223
sa(dp46224
S'description'
p46225
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46226
sS'cpp_type'
p46227
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46228
sS'default'
p46229
g3
sS'name'
p46230
S'save_in'
p46231
sS'required'
p46232
I00
sS'group_name'
p46233
S'Advanced'
p46234
sa(dp46235
S'description'
p46236
S'The seed for the master random number generator\n'
p46237
sS'cpp_type'
p46238
S'unsigned int'
p46239
sS'default'
p46240
S'0'
p46241
sS'name'
p46242
S'seed'
p46243
sS'required'
p46244
I00
sS'group_name'
p46245
S'Advanced'
p46246
sa(dp46247
S'description'
p46248
S'The Tensor to multiply the Diffusion operator by\n'
p46249
sS'cpp_type'
p46250
S'libMesh::TensorValue<double>'
p46251
sS'default'
p46252
g3
sS'name'
p46253
S'tensor_coeff'
p46254
sS'required'
p46255
I01
sS'group_name'
p46256
Nsa(dp46257
S'description'
p46258
g3
sS'cpp_type'
p46259
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46260
sS'default'
p46261
S'AnisotropicDiffusion'
p46262
sS'name'
p46263
S'type'
p46264
sS'required'
p46265
I00
sS'group_name'
p46266
Nsa(dp46267
S'description'
p46268
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46269
sS'cpp_type'
p46270
S'bool'
p46271
sS'default'
p46272
S'0'
p46273
sS'name'
p46274
S'use_displaced_mesh'
p46275
sS'required'
p46276
I00
sS'group_name'
p46277
S'Advanced'
p46278
sa(dp46279
S'description'
p46280
S'The name of the variable that this Kernel operates on\n'
p46281
sS'cpp_type'
p46282
S'NonlinearVariableName'
p46283
sS'default'
p46284
g3
sS'name'
p46285
S'variable'
p46286
sS'required'
p46287
I01
sS'group_name'
p46288
NsasS'name'
p46289
S'/Kernels/AnisotropicDiffusion'
p46290
sa(dp46291
S'description'
p46292
g3
sS'subblocks'
p46293
NsS'parameters'
p46294
(lp46295
(dp46296
S'description'
p46297
S'Material property base name\n'
p46298
sS'cpp_type'
p46299
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46300
sS'default'
p46301
g3
sS'name'
p46302
S'base_name'
p46303
sS'required'
p46304
I00
sS'group_name'
p46305
Nsa(dp46306
S'description'
p46307
S'The nonlinear displacement variables for the problem\n'
p46308
sS'cpp_type'
p46309
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p46310
sS'default'
p46311
g3
sS'name'
p46312
S'displacements'
p46313
sS'required'
p46314
I01
sS'group_name'
p46315
Nsa(dp46316
S'description'
p46317
S'Auxiliary variables to save the r displacement residuals.\n'
p46318
sS'cpp_type'
p46319
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46320
sS'default'
p46321
g3
sS'name'
p46322
S'save_in_disp_r'
p46323
sS'required'
p46324
I00
sS'group_name'
p46325
Nsa(dp46326
S'description'
p46327
S'Auxiliary variables to save the z displacement residuals.\n'
p46328
sS'cpp_type'
p46329
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46330
sS'default'
p46331
g3
sS'name'
p46332
S'save_in_disp_z'
p46333
sS'required'
p46334
I00
sS'group_name'
p46335
Nsa(dp46336
S'description'
p46337
S'Whether to use displaced mesh in the kernels\n'
p46338
sS'cpp_type'
p46339
S'bool'
p46340
sS'default'
p46341
S'0'
p46342
sS'name'
p46343
S'use_displaced_mesh'
p46344
sS'required'
p46345
I00
sS'group_name'
p46346
NsasS'name'
p46347
S'/Kernels/AxisymmetricRZ'
p46348
sa(dp46349
S'description'
p46350
g3
sS'subblocks'
p46351
NsS'parameters'
p46352
(lp46353
(dp46354
S'description'
p46355
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46356
sS'cpp_type'
p46357
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46358
sS'default'
p46359
g3
sS'name'
p46360
S'block'
p46361
sS'required'
p46362
I00
sS'group_name'
p46363
Nsa(dp46364
S'description'
p46365
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46366
sS'cpp_type'
p46367
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46368
sS'default'
p46369
g3
sS'name'
p46370
S'control_tags'
p46371
sS'required'
p46372
I00
sS'group_name'
p46373
Nsa(dp46374
S'description'
p46375
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46376
sS'cpp_type'
p46377
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46378
sS'default'
p46379
g3
sS'name'
p46380
S'diag_save_in'
p46381
sS'required'
p46382
I00
sS'group_name'
p46383
S'Advanced'
p46384
sa(dp46385
S'description'
p46386
S'A function that describes the body force\n'
p46387
sS'cpp_type'
p46388
S'FunctionName'
p46389
sS'default'
p46390
S'1'
p46391
sS'name'
p46392
S'function'
p46393
sS'required'
p46394
I00
sS'group_name'
p46395
Nsa(dp46396
S'description'
p46397
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46398
sS'cpp_type'
p46399
S'bool'
p46400
sS'default'
p46401
S'1'
p46402
sS'name'
p46403
S'implicit'
p46404
sS'required'
p46405
I00
sS'group_name'
p46406
S'Advanced'
p46407
sa(dp46408
S'description'
p46409
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46410
sS'cpp_type'
p46411
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46412
sS'default'
p46413
g3
sS'name'
p46414
S'save_in'
p46415
sS'required'
p46416
I00
sS'group_name'
p46417
S'Advanced'
p46418
sa(dp46419
S'description'
p46420
S'The seed for the master random number generator\n'
p46421
sS'cpp_type'
p46422
S'unsigned int'
p46423
sS'default'
p46424
S'0'
p46425
sS'name'
p46426
S'seed'
p46427
sS'required'
p46428
I00
sS'group_name'
p46429
S'Advanced'
p46430
sa(dp46431
S'description'
p46432
g3
sS'cpp_type'
p46433
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46434
sS'default'
p46435
S'BodyForce'
p46436
sS'name'
p46437
S'type'
p46438
sS'required'
p46439
I00
sS'group_name'
p46440
Nsa(dp46441
S'description'
p46442
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46443
sS'cpp_type'
p46444
S'bool'
p46445
sS'default'
p46446
S'0'
p46447
sS'name'
p46448
S'use_displaced_mesh'
p46449
sS'required'
p46450
I00
sS'group_name'
p46451
S'Advanced'
p46452
sa(dp46453
S'description'
p46454
g3
sS'cpp_type'
p46455
S'double'
p46456
sS'default'
p46457
S'0'
p46458
sS'name'
p46459
S'value'
p46460
sS'required'
p46461
I00
sS'group_name'
p46462
Nsa(dp46463
S'description'
p46464
S'The name of the variable that this Kernel operates on\n'
p46465
sS'cpp_type'
p46466
S'NonlinearVariableName'
p46467
sS'default'
p46468
g3
sS'name'
p46469
S'variable'
p46470
sS'required'
p46471
I01
sS'group_name'
p46472
NsasS'name'
p46473
S'/Kernels/BodyForce'
p46474
sa(dp46475
S'description'
p46476
g3
sS'subblocks'
p46477
NsS'parameters'
p46478
(lp46479
(dp46480
S'description'
p46481
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46482
sS'cpp_type'
p46483
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46484
sS'default'
p46485
g3
sS'name'
p46486
S'block'
p46487
sS'required'
p46488
I00
sS'group_name'
p46489
Nsa(dp46490
S'description'
p46491
S'void concentration\n'
p46492
sS'cpp_type'
p46493
S'std::vector<VariableName>'
p46494
sS'default'
p46495
g3
sS'name'
p46496
S'c'
p46497
sS'required'
p46498
I01
sS'group_name'
p46499
Nsa(dp46500
S'description'
p46501
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46502
sS'cpp_type'
p46503
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46504
sS'default'
p46505
g3
sS'name'
p46506
S'control_tags'
p46507
sS'required'
p46508
I00
sS'group_name'
p46509
Nsa(dp46510
S'description'
p46511
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46512
sS'cpp_type'
p46513
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46514
sS'default'
p46515
g3
sS'name'
p46516
S'diag_save_in'
p46517
sS'required'
p46518
I00
sS'group_name'
p46519
S'Advanced'
p46520
sa(dp46521
S'description'
p46522
S'A function that describes the body force\n'
p46523
sS'cpp_type'
p46524
S'FunctionName'
p46525
sS'default'
p46526
g3
sS'name'
p46527
S'function'
p46528
sS'required'
p46529
I00
sS'group_name'
p46530
Nsa(dp46531
S'description'
p46532
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46533
sS'cpp_type'
p46534
S'bool'
p46535
sS'default'
p46536
S'1'
p46537
sS'name'
p46538
S'implicit'
p46539
sS'required'
p46540
I00
sS'group_name'
p46541
S'Advanced'
p46542
sa(dp46543
S'description'
p46544
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46545
sS'cpp_type'
p46546
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46547
sS'default'
p46548
g3
sS'name'
p46549
S'save_in'
p46550
sS'required'
p46551
I00
sS'group_name'
p46552
S'Advanced'
p46553
sa(dp46554
S'description'
p46555
S'The seed for the master random number generator\n'
p46556
sS'cpp_type'
p46557
S'unsigned int'
p46558
sS'default'
p46559
S'0'
p46560
sS'name'
p46561
S'seed'
p46562
sS'required'
p46563
I00
sS'group_name'
p46564
S'Advanced'
p46565
sa(dp46566
S'description'
p46567
g3
sS'cpp_type'
p46568
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46569
sS'default'
p46570
S'BodyForceVoid'
p46571
sS'name'
p46572
S'type'
p46573
sS'required'
p46574
I00
sS'group_name'
p46575
Nsa(dp46576
S'description'
p46577
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46578
sS'cpp_type'
p46579
S'bool'
p46580
sS'default'
p46581
S'0'
p46582
sS'name'
p46583
S'use_displaced_mesh'
p46584
sS'required'
p46585
I00
sS'group_name'
p46586
S'Advanced'
p46587
sa(dp46588
S'description'
p46589
g3
sS'cpp_type'
p46590
S'double'
p46591
sS'default'
p46592
S'0'
p46593
sS'name'
p46594
S'value'
p46595
sS'required'
p46596
I00
sS'group_name'
p46597
Nsa(dp46598
S'description'
p46599
S'The name of the variable that this Kernel operates on\n'
p46600
sS'cpp_type'
p46601
S'NonlinearVariableName'
p46602
sS'default'
p46603
g3
sS'name'
p46604
S'variable'
p46605
sS'required'
p46606
I01
sS'group_name'
p46607
NsasS'name'
p46608
S'/Kernels/BodyForceVoid'
p46609
sa(dp46610
S'description'
p46611
S'Cahn-Hilliard base Kernel\n'
p46612
sS'subblocks'
p46613
NsS'parameters'
p46614
(lp46615
(dp46616
S'description'
p46617
S'Vector of arguments of the mobility\n'
p46618
sS'cpp_type'
p46619
S'std::vector<VariableName>'
p46620
sS'default'
p46621
g3
sS'name'
p46622
S'args'
p46623
sS'required'
p46624
I00
sS'group_name'
p46625
Nsa(dp46626
S'description'
p46627
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46628
sS'cpp_type'
p46629
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46630
sS'default'
p46631
g3
sS'name'
p46632
S'block'
p46633
sS'required'
p46634
I00
sS'group_name'
p46635
Nsa(dp46636
S'description'
p46637
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46638
sS'cpp_type'
p46639
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46640
sS'default'
p46641
g3
sS'name'
p46642
S'control_tags'
p46643
sS'required'
p46644
I00
sS'group_name'
p46645
Nsa(dp46646
S'description'
p46647
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46648
sS'cpp_type'
p46649
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46650
sS'default'
p46651
g3
sS'name'
p46652
S'diag_save_in'
p46653
sS'required'
p46654
I00
sS'group_name'
p46655
S'Advanced'
p46656
sa(dp46657
S'description'
p46658
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46659
sS'cpp_type'
p46660
S'bool'
p46661
sS'default'
p46662
S'1'
p46663
sS'name'
p46664
S'implicit'
p46665
sS'required'
p46666
I00
sS'group_name'
p46667
S'Advanced'
p46668
sa(dp46669
S'description'
p46670
S'The mobility used with the kernel\n'
p46671
sS'cpp_type'
p46672
S'MaterialPropertyName'
p46673
sS'default'
p46674
S'M'
p46675
sS'name'
p46676
S'mob_name'
p46677
sS'required'
p46678
I00
sS'group_name'
p46679
Nsa(dp46680
S'description'
p46681
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46682
sS'cpp_type'
p46683
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46684
sS'default'
p46685
g3
sS'name'
p46686
S'save_in'
p46687
sS'required'
p46688
I00
sS'group_name'
p46689
S'Advanced'
p46690
sa(dp46691
S'description'
p46692
S'The seed for the master random number generator\n'
p46693
sS'cpp_type'
p46694
S'unsigned int'
p46695
sS'default'
p46696
S'0'
p46697
sS'name'
p46698
S'seed'
p46699
sS'required'
p46700
I00
sS'group_name'
p46701
S'Advanced'
p46702
sa(dp46703
S'description'
p46704
g3
sS'cpp_type'
p46705
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46706
sS'default'
p46707
S'CHBulkPFCTrad'
p46708
sS'name'
p46709
S'type'
p46710
sS'required'
p46711
I00
sS'group_name'
p46712
Nsa(dp46713
S'description'
p46714
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46715
sS'cpp_type'
p46716
S'bool'
p46717
sS'default'
p46718
S'0'
p46719
sS'name'
p46720
S'use_displaced_mesh'
p46721
sS'required'
p46722
I00
sS'group_name'
p46723
S'Advanced'
p46724
sa(dp46725
S'description'
p46726
S'The name of the variable that this Kernel operates on\n'
p46727
sS'cpp_type'
p46728
S'NonlinearVariableName'
p46729
sS'default'
p46730
g3
sS'name'
p46731
S'variable'
p46732
sS'required'
p46733
I01
sS'group_name'
p46734
NsasS'name'
p46735
S'/Kernels/CHBulkPFCTrad'
p46736
sa(dp46737
S'description'
p46738
g3
sS'subblocks'
p46739
NsS'parameters'
p46740
(lp46741
(dp46742
S'description'
p46743
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46744
sS'cpp_type'
p46745
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46746
sS'default'
p46747
g3
sS'name'
p46748
S'block'
p46749
sS'required'
p46750
I00
sS'group_name'
p46751
Nsa(dp46752
S'description'
p46753
S'Variable representing the laplacian of c\n'
p46754
sS'cpp_type'
p46755
S'std::vector<VariableName>'
p46756
sS'default'
p46757
g3
sS'name'
p46758
S'c'
p46759
sS'required'
p46760
I01
sS'group_name'
p46761
Nsa(dp46762
S'description'
p46763
S'Name of coefficient\n'
p46764
sS'cpp_type'
p46765
S'MaterialPropertyName'
p46766
sS'default'
p46767
g3
sS'name'
p46768
S'coeff_name'
p46769
sS'required'
p46770
I01
sS'group_name'
p46771
Nsa(dp46772
S'description'
p46773
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46774
sS'cpp_type'
p46775
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46776
sS'default'
p46777
g3
sS'name'
p46778
S'control_tags'
p46779
sS'required'
p46780
I00
sS'group_name'
p46781
Nsa(dp46782
S'description'
p46783
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46784
sS'cpp_type'
p46785
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46786
sS'default'
p46787
g3
sS'name'
p46788
S'diag_save_in'
p46789
sS'required'
p46790
I00
sS'group_name'
p46791
S'Advanced'
p46792
sa(dp46793
S'description'
p46794
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46795
sS'cpp_type'
p46796
S'bool'
p46797
sS'default'
p46798
S'1'
p46799
sS'name'
p46800
S'implicit'
p46801
sS'required'
p46802
I00
sS'group_name'
p46803
S'Advanced'
p46804
sa(dp46805
S'description'
p46806
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46807
sS'cpp_type'
p46808
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46809
sS'default'
p46810
g3
sS'name'
p46811
S'save_in'
p46812
sS'required'
p46813
I00
sS'group_name'
p46814
S'Advanced'
p46815
sa(dp46816
S'description'
p46817
S'The seed for the master random number generator\n'
p46818
sS'cpp_type'
p46819
S'unsigned int'
p46820
sS'default'
p46821
S'0'
p46822
sS'name'
p46823
S'seed'
p46824
sS'required'
p46825
I00
sS'group_name'
p46826
S'Advanced'
p46827
sa(dp46828
S'description'
p46829
g3
sS'cpp_type'
p46830
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46831
sS'default'
p46832
S'CHCpldPFCTrad'
p46833
sS'name'
p46834
S'type'
p46835
sS'required'
p46836
I00
sS'group_name'
p46837
Nsa(dp46838
S'description'
p46839
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46840
sS'cpp_type'
p46841
S'bool'
p46842
sS'default'
p46843
S'0'
p46844
sS'name'
p46845
S'use_displaced_mesh'
p46846
sS'required'
p46847
I00
sS'group_name'
p46848
S'Advanced'
p46849
sa(dp46850
S'description'
p46851
S'The name of the variable that this Kernel operates on\n'
p46852
sS'cpp_type'
p46853
S'NonlinearVariableName'
p46854
sS'default'
p46855
g3
sS'name'
p46856
S'variable'
p46857
sS'required'
p46858
I01
sS'group_name'
p46859
NsasS'name'
p46860
S'/Kernels/CHCpldPFCTrad'
p46861
sa(dp46862
S'description'
p46863
S'Gradient energy Cahn-Hilliard Kernel with a scalar (isotropic) mobility\n'
p46864
sS'subblocks'
p46865
NsS'parameters'
p46866
(lp46867
(dp46868
S'description'
p46869
S'Vector of arguments of the mobility\n'
p46870
sS'cpp_type'
p46871
S'std::vector<VariableName>'
p46872
sS'default'
p46873
g3
sS'name'
p46874
S'args'
p46875
sS'required'
p46876
I00
sS'group_name'
p46877
Nsa(dp46878
S'description'
p46879
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46880
sS'cpp_type'
p46881
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p46882
sS'default'
p46883
g3
sS'name'
p46884
S'block'
p46885
sS'required'
p46886
I00
sS'group_name'
p46887
Nsa(dp46888
S'description'
p46889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46890
sS'cpp_type'
p46891
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p46892
sS'default'
p46893
g3
sS'name'
p46894
S'control_tags'
p46895
sS'required'
p46896
I00
sS'group_name'
p46897
Nsa(dp46898
S'description'
p46899
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46900
sS'cpp_type'
p46901
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46902
sS'default'
p46903
g3
sS'name'
p46904
S'diag_save_in'
p46905
sS'required'
p46906
I00
sS'group_name'
p46907
S'Advanced'
p46908
sa(dp46909
S'description'
p46910
S'Determines whether this object is calculated using an implicit or explicit form\n'
p46911
sS'cpp_type'
p46912
S'bool'
p46913
sS'default'
p46914
S'1'
p46915
sS'name'
p46916
S'implicit'
p46917
sS'required'
p46918
I00
sS'group_name'
p46919
S'Advanced'
p46920
sa(dp46921
S'description'
p46922
S'The kappa used with the kernel\n'
p46923
sS'cpp_type'
p46924
S'MaterialPropertyName'
p46925
sS'default'
p46926
g3
sS'name'
p46927
S'kappa_name'
p46928
sS'required'
p46929
I01
sS'group_name'
p46930
Nsa(dp46931
S'description'
p46932
S'The mobility used with the kernel\n'
p46933
sS'cpp_type'
p46934
S'MaterialPropertyName'
p46935
sS'default'
p46936
g3
sS'name'
p46937
S'mob_name'
p46938
sS'required'
p46939
I01
sS'group_name'
p46940
Nsa(dp46941
S'description'
p46942
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p46943
sS'cpp_type'
p46944
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p46945
sS'default'
p46946
g3
sS'name'
p46947
S'save_in'
p46948
sS'required'
p46949
I00
sS'group_name'
p46950
S'Advanced'
p46951
sa(dp46952
S'description'
p46953
S'The seed for the master random number generator\n'
p46954
sS'cpp_type'
p46955
S'unsigned int'
p46956
sS'default'
p46957
S'0'
p46958
sS'name'
p46959
S'seed'
p46960
sS'required'
p46961
I00
sS'group_name'
p46962
S'Advanced'
p46963
sa(dp46964
S'description'
p46965
g3
sS'cpp_type'
p46966
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p46967
sS'default'
p46968
S'CHInterface'
p46969
sS'name'
p46970
S'type'
p46971
sS'required'
p46972
I00
sS'group_name'
p46973
Nsa(dp46974
S'description'
p46975
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46976
sS'cpp_type'
p46977
S'bool'
p46978
sS'default'
p46979
S'0'
p46980
sS'name'
p46981
S'use_displaced_mesh'
p46982
sS'required'
p46983
I00
sS'group_name'
p46984
S'Advanced'
p46985
sa(dp46986
S'description'
p46987
S'The name of the variable that this Kernel operates on\n'
p46988
sS'cpp_type'
p46989
S'NonlinearVariableName'
p46990
sS'default'
p46991
g3
sS'name'
p46992
S'variable'
p46993
sS'required'
p46994
I01
sS'group_name'
p46995
NsasS'name'
p46996
S'/Kernels/CHInterface'
p46997
sa(dp46998
S'description'
p46999
S'Gradient energy Cahn-Hilliard Kernel with a tensor (anisotropic) mobility\n'
p47000
sS'subblocks'
p47001
NsS'parameters'
p47002
(lp47003
(dp47004
S'description'
p47005
S'Vector of arguments of the mobility\n'
p47006
sS'cpp_type'
p47007
S'std::vector<VariableName>'
p47008
sS'default'
p47009
g3
sS'name'
p47010
S'args'
p47011
sS'required'
p47012
I00
sS'group_name'
p47013
Nsa(dp47014
S'description'
p47015
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47016
sS'cpp_type'
p47017
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47018
sS'default'
p47019
g3
sS'name'
p47020
S'block'
p47021
sS'required'
p47022
I00
sS'group_name'
p47023
Nsa(dp47024
S'description'
p47025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47026
sS'cpp_type'
p47027
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47028
sS'default'
p47029
g3
sS'name'
p47030
S'control_tags'
p47031
sS'required'
p47032
I00
sS'group_name'
p47033
Nsa(dp47034
S'description'
p47035
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47036
sS'cpp_type'
p47037
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47038
sS'default'
p47039
g3
sS'name'
p47040
S'diag_save_in'
p47041
sS'required'
p47042
I00
sS'group_name'
p47043
S'Advanced'
p47044
sa(dp47045
S'description'
p47046
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47047
sS'cpp_type'
p47048
S'bool'
p47049
sS'default'
p47050
S'1'
p47051
sS'name'
p47052
S'implicit'
p47053
sS'required'
p47054
I00
sS'group_name'
p47055
S'Advanced'
p47056
sa(dp47057
S'description'
p47058
S'The kappa used with the kernel\n'
p47059
sS'cpp_type'
p47060
S'MaterialPropertyName'
p47061
sS'default'
p47062
g3
sS'name'
p47063
S'kappa_name'
p47064
sS'required'
p47065
I01
sS'group_name'
p47066
Nsa(dp47067
S'description'
p47068
S'The mobility used with the kernel\n'
p47069
sS'cpp_type'
p47070
S'MaterialPropertyName'
p47071
sS'default'
p47072
g3
sS'name'
p47073
S'mob_name'
p47074
sS'required'
p47075
I01
sS'group_name'
p47076
Nsa(dp47077
S'description'
p47078
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47079
sS'cpp_type'
p47080
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47081
sS'default'
p47082
g3
sS'name'
p47083
S'save_in'
p47084
sS'required'
p47085
I00
sS'group_name'
p47086
S'Advanced'
p47087
sa(dp47088
S'description'
p47089
S'The seed for the master random number generator\n'
p47090
sS'cpp_type'
p47091
S'unsigned int'
p47092
sS'default'
p47093
S'0'
p47094
sS'name'
p47095
S'seed'
p47096
sS'required'
p47097
I00
sS'group_name'
p47098
S'Advanced'
p47099
sa(dp47100
S'description'
p47101
g3
sS'cpp_type'
p47102
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47103
sS'default'
p47104
S'CHInterfaceAniso'
p47105
sS'name'
p47106
S'type'
p47107
sS'required'
p47108
I00
sS'group_name'
p47109
Nsa(dp47110
S'description'
p47111
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47112
sS'cpp_type'
p47113
S'bool'
p47114
sS'default'
p47115
S'0'
p47116
sS'name'
p47117
S'use_displaced_mesh'
p47118
sS'required'
p47119
I00
sS'group_name'
p47120
S'Advanced'
p47121
sa(dp47122
S'description'
p47123
S'The name of the variable that this Kernel operates on\n'
p47124
sS'cpp_type'
p47125
S'NonlinearVariableName'
p47126
sS'default'
p47127
g3
sS'name'
p47128
S'variable'
p47129
sS'required'
p47130
I01
sS'group_name'
p47131
NsasS'name'
p47132
S'/Kernels/CHInterfaceAniso'
p47133
sa(dp47134
S'description'
p47135
S'Simple demonstration Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p47136
sS'subblocks'
p47137
NsS'parameters'
p47138
(lp47139
(dp47140
S'description'
p47141
S'Vector of arguments of the mobility\n'
p47142
sS'cpp_type'
p47143
S'std::vector<VariableName>'
p47144
sS'default'
p47145
g3
sS'name'
p47146
S'args'
p47147
sS'required'
p47148
I00
sS'group_name'
p47149
Nsa(dp47150
S'description'
p47151
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47152
sS'cpp_type'
p47153
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47154
sS'default'
p47155
g3
sS'name'
p47156
S'block'
p47157
sS'required'
p47158
I00
sS'group_name'
p47159
Nsa(dp47160
S'description'
p47161
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47162
sS'cpp_type'
p47163
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47164
sS'default'
p47165
g3
sS'name'
p47166
S'control_tags'
p47167
sS'required'
p47168
I00
sS'group_name'
p47169
Nsa(dp47170
S'description'
p47171
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47172
sS'cpp_type'
p47173
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47174
sS'default'
p47175
g3
sS'name'
p47176
S'diag_save_in'
p47177
sS'required'
p47178
I00
sS'group_name'
p47179
S'Advanced'
p47180
sa(dp47181
S'description'
p47182
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47183
sS'cpp_type'
p47184
S'bool'
p47185
sS'default'
p47186
S'1'
p47187
sS'name'
p47188
S'implicit'
p47189
sS'required'
p47190
I00
sS'group_name'
p47191
S'Advanced'
p47192
sa(dp47193
S'description'
p47194
S'The mobility used with the kernel\n'
p47195
sS'cpp_type'
p47196
S'MaterialPropertyName'
p47197
sS'default'
p47198
S'M'
p47199
sS'name'
p47200
S'mob_name'
p47201
sS'required'
p47202
I00
sS'group_name'
p47203
Nsa(dp47204
S'description'
p47205
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47206
sS'cpp_type'
p47207
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47208
sS'default'
p47209
g3
sS'name'
p47210
S'save_in'
p47211
sS'required'
p47212
I00
sS'group_name'
p47213
S'Advanced'
p47214
sa(dp47215
S'description'
p47216
S'The seed for the master random number generator\n'
p47217
sS'cpp_type'
p47218
S'unsigned int'
p47219
sS'default'
p47220
S'0'
p47221
sS'name'
p47222
S'seed'
p47223
sS'required'
p47224
I00
sS'group_name'
p47225
S'Advanced'
p47226
sa(dp47227
S'description'
p47228
g3
sS'cpp_type'
p47229
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47230
sS'default'
p47231
S'CHMath'
p47232
sS'name'
p47233
S'type'
p47234
sS'required'
p47235
I00
sS'group_name'
p47236
Nsa(dp47237
S'description'
p47238
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47239
sS'cpp_type'
p47240
S'bool'
p47241
sS'default'
p47242
S'0'
p47243
sS'name'
p47244
S'use_displaced_mesh'
p47245
sS'required'
p47246
I00
sS'group_name'
p47247
S'Advanced'
p47248
sa(dp47249
S'description'
p47250
S'The name of the variable that this Kernel operates on\n'
p47251
sS'cpp_type'
p47252
S'NonlinearVariableName'
p47253
sS'default'
p47254
g3
sS'name'
p47255
S'variable'
p47256
sS'required'
p47257
I01
sS'group_name'
p47258
NsasS'name'
p47259
S'/Kernels/CHMath'
p47260
sa(dp47261
S'description'
p47262
g3
sS'subblocks'
p47263
NsS'parameters'
p47264
(lp47265
(dp47266
S'description'
p47267
S'The D mobility used with the kernel\n'
p47268
sS'cpp_type'
p47269
S'MaterialPropertyName'
p47270
sS'default'
p47271
S'DM'
p47272
sS'name'
p47273
S'Dmob_name'
p47274
sS'required'
p47275
I00
sS'group_name'
p47276
Nsa(dp47277
S'description'
p47278
S'Constants on Taylor Series\n'
p47279
sS'cpp_type'
p47280
S'double'
p47281
sS'default'
p47282
S'1'
p47283
sS'name'
p47284
S'a'
p47285
sS'required'
p47286
I00
sS'group_name'
p47287
Nsa(dp47288
S'description'
p47289
S'Constants on Taylor Series\n'
p47290
sS'cpp_type'
p47291
S'double'
p47292
sS'default'
p47293
S'1'
p47294
sS'name'
p47295
S'b'
p47296
sS'required'
p47297
I00
sS'group_name'
p47298
Nsa(dp47299
S'description'
p47300
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47301
sS'cpp_type'
p47302
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47303
sS'default'
p47304
g3
sS'name'
p47305
S'block'
p47306
sS'required'
p47307
I00
sS'group_name'
p47308
Nsa(dp47309
S'description'
p47310
S'Constants on Taylor Series\n'
p47311
sS'cpp_type'
p47312
S'double'
p47313
sS'default'
p47314
S'1'
p47315
sS'name'
p47316
S'c'
p47317
sS'required'
p47318
I00
sS'group_name'
p47319
Nsa(dp47320
S'description'
p47321
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47322
sS'cpp_type'
p47323
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47324
sS'default'
p47325
g3
sS'name'
p47326
S'control_tags'
p47327
sS'required'
p47328
I00
sS'group_name'
p47329
Nsa(dp47330
S'description'
p47331
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47332
sS'cpp_type'
p47333
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47334
sS'default'
p47335
g3
sS'name'
p47336
S'diag_save_in'
p47337
sS'required'
p47338
I00
sS'group_name'
p47339
S'Advanced'
p47340
sa(dp47341
S'description'
p47342
S'Jacobian information for the mobility is defined\n'
p47343
sS'cpp_type'
p47344
S'bool'
p47345
sS'default'
p47346
S'0'
p47347
sS'name'
p47348
S'has_MJac'
p47349
sS'required'
p47350
I00
sS'group_name'
p47351
Nsa(dp47352
S'description'
p47353
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47354
sS'cpp_type'
p47355
S'bool'
p47356
sS'default'
p47357
S'1'
p47358
sS'name'
p47359
S'implicit'
p47360
sS'required'
p47361
I00
sS'group_name'
p47362
S'Advanced'
p47363
sa(dp47364
S'name'
p47365
S'log_approach'
p47366
sS'cpp_type'
p47367
S'MooseEnum'
p47368
sS'default'
p47369
g3
sS'description'
p47370
S'Which approach will be used to handle the natural log\n'
p47371
sS'required'
p47372
I01
sS'options'
p47373
S'tolerance cancelation expansion nothing'
p47374
sS'group_name'
p47375
Nsa(dp47376
S'description'
p47377
S'The mobility used with the kernel\n'
p47378
sS'cpp_type'
p47379
S'MaterialPropertyName'
p47380
sS'default'
p47381
S'M'
p47382
sS'name'
p47383
S'mob_name'
p47384
sS'required'
p47385
I00
sS'group_name'
p47386
Nsa(dp47387
S'description'
p47388
S'Number of terms used in the Taylor expansion of the natural log term\n'
p47389
sS'cpp_type'
p47390
S'double'
p47391
sS'default'
p47392
S'4'
p47393
sS'name'
p47394
S'n_exp_terms'
p47395
sS'required'
p47396
I00
sS'group_name'
p47397
Nsa(dp47398
S'description'
p47399
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47400
sS'cpp_type'
p47401
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47402
sS'default'
p47403
g3
sS'name'
p47404
S'save_in'
p47405
sS'required'
p47406
I00
sS'group_name'
p47407
S'Advanced'
p47408
sa(dp47409
S'description'
p47410
S'The seed for the master random number generator\n'
p47411
sS'cpp_type'
p47412
S'unsigned int'
p47413
sS'default'
p47414
S'0'
p47415
sS'name'
p47416
S'seed'
p47417
sS'required'
p47418
I00
sS'group_name'
p47419
S'Advanced'
p47420
sa(dp47421
S'description'
p47422
S'Tolerance used when the tolerance approach is chosen\n'
p47423
sS'cpp_type'
p47424
S'double'
p47425
sS'default'
p47426
S'1e-09'
p47427
sS'name'
p47428
S'tol'
p47429
sS'required'
p47430
I00
sS'group_name'
p47431
Nsa(dp47432
S'description'
p47433
g3
sS'cpp_type'
p47434
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47435
sS'default'
p47436
S'CHPFCRFF'
p47437
sS'name'
p47438
S'type'
p47439
sS'required'
p47440
I00
sS'group_name'
p47441
Nsa(dp47442
S'description'
p47443
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47444
sS'cpp_type'
p47445
S'bool'
p47446
sS'default'
p47447
S'0'
p47448
sS'name'
p47449
S'use_displaced_mesh'
p47450
sS'required'
p47451
I00
sS'group_name'
p47452
S'Advanced'
p47453
sa(dp47454
S'description'
p47455
S'Array of names of the real parts of the L variables\n'
p47456
sS'cpp_type'
p47457
S'std::vector<VariableName>'
p47458
sS'default'
p47459
g3
sS'name'
p47460
S'v'
p47461
sS'required'
p47462
I01
sS'group_name'
p47463
Nsa(dp47464
S'description'
p47465
S'The name of the variable that this Kernel operates on\n'
p47466
sS'cpp_type'
p47467
S'NonlinearVariableName'
p47468
sS'default'
p47469
g3
sS'name'
p47470
S'variable'
p47471
sS'required'
p47472
I01
sS'group_name'
p47473
NsasS'name'
p47474
S'/Kernels/CHPFCRFF'
p47475
sa(dp47476
S'description'
p47477
g3
sS'subblocks'
p47478
NsS'parameters'
p47479
(lp47480
(dp47481
S'description'
p47482
S'Base name for the complex L variables\n'
p47483
sS'cpp_type'
p47484
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47485
sS'default'
p47486
g3
sS'name'
p47487
S'L_name_base'
p47488
sS'required'
p47489
I01
sS'group_name'
p47490
Nsa(dp47491
S'name'
p47492
S'log_approach'
p47493
sS'cpp_type'
p47494
S'MooseEnum'
p47495
sS'default'
p47496
g3
sS'description'
p47497
S'Which approach will be used to handle the natural log\n'
p47498
sS'required'
p47499
I01
sS'options'
p47500
S'tolerance cancelation expansion'
p47501
sS'group_name'
p47502
Nsa(dp47503
S'description'
p47504
S'The mobility used for n in this model\n'
p47505
sS'cpp_type'
p47506
S'MaterialPropertyName'
p47507
sS'default'
p47508
S'M'
p47509
sS'name'
p47510
S'mob_name'
p47511
sS'required'
p47512
I00
sS'group_name'
p47513
Nsa(dp47514
S'description'
p47515
S'Number of terms used in the Taylor expansion of the natural log term\n'
p47516
sS'cpp_type'
p47517
S'double'
p47518
sS'default'
p47519
S'4'
p47520
sS'name'
p47521
S'n_exp_terms'
p47522
sS'required'
p47523
I00
sS'group_name'
p47524
Nsa(dp47525
S'description'
p47526
S'Variable name used for the n variable\n'
p47527
sS'cpp_type'
p47528
S'NonlinearVariableName'
p47529
sS'default'
p47530
g3
sS'name'
p47531
S'n_name'
p47532
sS'required'
p47533
I01
sS'group_name'
p47534
Nsa(dp47535
S'description'
p47536
S'specifies the number of complex L variables will be solved for\n'
p47537
sS'cpp_type'
p47538
S'unsigned int'
p47539
sS'default'
p47540
g3
sS'name'
p47541
S'num_L'
p47542
sS'required'
p47543
I01
sS'group_name'
p47544
Nsa(dp47545
S'description'
p47546
S'Tolerance used when the tolerance approach is chosen\n'
p47547
sS'cpp_type'
p47548
S'double'
p47549
sS'default'
p47550
S'1e-09'
p47551
sS'name'
p47552
S'tol'
p47553
sS'required'
p47554
I00
sS'group_name'
p47555
Nsa(dp47556
S'description'
p47557
S'Whether to use displaced mesh in the kernels\n'
p47558
sS'cpp_type'
p47559
S'bool'
p47560
sS'default'
p47561
S'0'
p47562
sS'name'
p47563
S'use_displaced_mesh'
p47564
sS'required'
p47565
I00
sS'group_name'
p47566
NsasS'name'
p47567
S'/Kernels/CHPFCRFFSplitKernel'
p47568
sa(dp47569
S'description'
p47570
S'Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a scalar (isotropic) mobility\n'
p47571
sS'subblocks'
p47572
NsS'parameters'
p47573
(lp47574
(dp47575
S'description'
p47576
S'Vector of arguments of the mobility\n'
p47577
sS'cpp_type'
p47578
S'std::vector<VariableName>'
p47579
sS'default'
p47580
g3
sS'name'
p47581
S'args'
p47582
sS'required'
p47583
I00
sS'group_name'
p47584
Nsa(dp47585
S'description'
p47586
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47587
sS'cpp_type'
p47588
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47589
sS'default'
p47590
g3
sS'name'
p47591
S'block'
p47592
sS'required'
p47593
I00
sS'group_name'
p47594
Nsa(dp47595
S'description'
p47596
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47597
sS'cpp_type'
p47598
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47599
sS'default'
p47600
g3
sS'name'
p47601
S'control_tags'
p47602
sS'required'
p47603
I00
sS'group_name'
p47604
Nsa(dp47605
S'description'
p47606
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47607
sS'cpp_type'
p47608
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47609
sS'default'
p47610
g3
sS'name'
p47611
S'diag_save_in'
p47612
sS'required'
p47613
I00
sS'group_name'
p47614
S'Advanced'
p47615
sa(dp47616
S'description'
p47617
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p47618
sS'cpp_type'
p47619
S'std::vector<VariableName>'
p47620
sS'default'
p47621
g3
sS'name'
p47622
S'displacement_gradients'
p47623
sS'required'
p47624
I00
sS'group_name'
p47625
Nsa(dp47626
S'description'
p47627
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p47628
sS'cpp_type'
p47629
S'MaterialPropertyName'
p47630
sS'default'
p47631
g3
sS'name'
p47632
S'f_name'
p47633
sS'required'
p47634
I01
sS'group_name'
p47635
Nsa(dp47636
S'description'
p47637
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47638
sS'cpp_type'
p47639
S'bool'
p47640
sS'default'
p47641
S'1'
p47642
sS'name'
p47643
S'implicit'
p47644
sS'required'
p47645
I00
sS'group_name'
p47646
S'Advanced'
p47647
sa(dp47648
S'description'
p47649
S'The mobility used with the kernel\n'
p47650
sS'cpp_type'
p47651
S'MaterialPropertyName'
p47652
sS'default'
p47653
S'M'
p47654
sS'name'
p47655
S'mob_name'
p47656
sS'required'
p47657
I00
sS'group_name'
p47658
Nsa(dp47659
S'description'
p47660
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47661
sS'cpp_type'
p47662
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47663
sS'default'
p47664
g3
sS'name'
p47665
S'save_in'
p47666
sS'required'
p47667
I00
sS'group_name'
p47668
S'Advanced'
p47669
sa(dp47670
S'description'
p47671
S'The seed for the master random number generator\n'
p47672
sS'cpp_type'
p47673
S'unsigned int'
p47674
sS'default'
p47675
S'0'
p47676
sS'name'
p47677
S'seed'
p47678
sS'required'
p47679
I00
sS'group_name'
p47680
S'Advanced'
p47681
sa(dp47682
S'description'
p47683
g3
sS'cpp_type'
p47684
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47685
sS'default'
p47686
S'CHParsed'
p47687
sS'name'
p47688
S'type'
p47689
sS'required'
p47690
I00
sS'group_name'
p47691
Nsa(dp47692
S'description'
p47693
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47694
sS'cpp_type'
p47695
S'bool'
p47696
sS'default'
p47697
S'0'
p47698
sS'name'
p47699
S'use_displaced_mesh'
p47700
sS'required'
p47701
I00
sS'group_name'
p47702
S'Advanced'
p47703
sa(dp47704
S'description'
p47705
S'The name of the variable that this Kernel operates on\n'
p47706
sS'cpp_type'
p47707
S'NonlinearVariableName'
p47708
sS'default'
p47709
g3
sS'name'
p47710
S'variable'
p47711
sS'required'
p47712
I01
sS'group_name'
p47713
NsasS'name'
p47714
S'/Kernels/CHParsed'
p47715
sa(dp47716
S'description'
p47717
g3
sS'subblocks'
p47718
NsS'parameters'
p47719
(lp47720
(dp47721
S'description'
p47722
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47723
sS'cpp_type'
p47724
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47725
sS'default'
p47726
g3
sS'name'
p47727
S'block'
p47728
sS'required'
p47729
I00
sS'group_name'
p47730
Nsa(dp47731
S'description'
p47732
S'Variable representing the laplacian of c\n'
p47733
sS'cpp_type'
p47734
S'std::vector<VariableName>'
p47735
sS'default'
p47736
g3
sS'name'
p47737
S'c'
p47738
sS'required'
p47739
I01
sS'group_name'
p47740
Nsa(dp47741
S'description'
p47742
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47743
sS'cpp_type'
p47744
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47745
sS'default'
p47746
g3
sS'name'
p47747
S'control_tags'
p47748
sS'required'
p47749
I00
sS'group_name'
p47750
Nsa(dp47751
S'description'
p47752
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47753
sS'cpp_type'
p47754
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47755
sS'default'
p47756
g3
sS'name'
p47757
S'diag_save_in'
p47758
sS'required'
p47759
I00
sS'group_name'
p47760
S'Advanced'
p47761
sa(dp47762
S'description'
p47763
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47764
sS'cpp_type'
p47765
S'bool'
p47766
sS'default'
p47767
S'1'
p47768
sS'name'
p47769
S'implicit'
p47770
sS'required'
p47771
I00
sS'group_name'
p47772
S'Advanced'
p47773
sa(dp47774
S'description'
p47775
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47776
sS'cpp_type'
p47777
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47778
sS'default'
p47779
g3
sS'name'
p47780
S'save_in'
p47781
sS'required'
p47782
I00
sS'group_name'
p47783
S'Advanced'
p47784
sa(dp47785
S'description'
p47786
S'The seed for the master random number generator\n'
p47787
sS'cpp_type'
p47788
S'unsigned int'
p47789
sS'default'
p47790
S'0'
p47791
sS'name'
p47792
S'seed'
p47793
sS'required'
p47794
I00
sS'group_name'
p47795
S'Advanced'
p47796
sa(dp47797
S'description'
p47798
g3
sS'cpp_type'
p47799
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47800
sS'default'
p47801
S'CHSplitVar'
p47802
sS'name'
p47803
S'type'
p47804
sS'required'
p47805
I00
sS'group_name'
p47806
Nsa(dp47807
S'description'
p47808
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47809
sS'cpp_type'
p47810
S'bool'
p47811
sS'default'
p47812
S'0'
p47813
sS'name'
p47814
S'use_displaced_mesh'
p47815
sS'required'
p47816
I00
sS'group_name'
p47817
S'Advanced'
p47818
sa(dp47819
S'description'
p47820
S'The name of the variable that this Kernel operates on\n'
p47821
sS'cpp_type'
p47822
S'NonlinearVariableName'
p47823
sS'default'
p47824
g3
sS'name'
p47825
S'variable'
p47826
sS'required'
p47827
I01
sS'group_name'
p47828
NsasS'name'
p47829
S'/Kernels/CHSplitVar'
p47830
sa(dp47831
S'description'
p47832
S'Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a scalar (isotropic) mobility\n'
p47833
sS'subblocks'
p47834
NsS'parameters'
p47835
(lp47836
(dp47837
S'description'
p47838
S'Vector of arguments of the mobility\n'
p47839
sS'cpp_type'
p47840
S'std::vector<VariableName>'
p47841
sS'default'
p47842
g3
sS'name'
p47843
S'args'
p47844
sS'required'
p47845
I00
sS'group_name'
p47846
Nsa(dp47847
S'description'
p47848
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47849
sS'cpp_type'
p47850
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47851
sS'default'
p47852
g3
sS'name'
p47853
S'block'
p47854
sS'required'
p47855
I00
sS'group_name'
p47856
Nsa(dp47857
S'description'
p47858
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47859
sS'cpp_type'
p47860
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p47861
sS'default'
p47862
g3
sS'name'
p47863
S'control_tags'
p47864
sS'required'
p47865
I00
sS'group_name'
p47866
Nsa(dp47867
S'description'
p47868
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47869
sS'cpp_type'
p47870
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47871
sS'default'
p47872
g3
sS'name'
p47873
S'diag_save_in'
p47874
sS'required'
p47875
I00
sS'group_name'
p47876
S'Advanced'
p47877
sa(dp47878
S'description'
p47879
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p47880
sS'cpp_type'
p47881
S'std::vector<VariableName>'
p47882
sS'default'
p47883
g3
sS'name'
p47884
S'displacement_gradients'
p47885
sS'required'
p47886
I00
sS'group_name'
p47887
Nsa(dp47888
S'description'
p47889
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p47890
sS'cpp_type'
p47891
S'MaterialPropertyName'
p47892
sS'default'
p47893
g3
sS'name'
p47894
S'f_name'
p47895
sS'required'
p47896
I01
sS'group_name'
p47897
Nsa(dp47898
S'description'
p47899
S'Determines whether this object is calculated using an implicit or explicit form\n'
p47900
sS'cpp_type'
p47901
S'bool'
p47902
sS'default'
p47903
S'1'
p47904
sS'name'
p47905
S'implicit'
p47906
sS'required'
p47907
I00
sS'group_name'
p47908
S'Advanced'
p47909
sa(dp47910
S'description'
p47911
S'The mobility used with the kernel\n'
p47912
sS'cpp_type'
p47913
S'MaterialPropertyName'
p47914
sS'default'
p47915
S'M'
p47916
sS'name'
p47917
S'mob_name'
p47918
sS'required'
p47919
I00
sS'group_name'
p47920
Nsa(dp47921
S'description'
p47922
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p47923
sS'cpp_type'
p47924
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p47925
sS'default'
p47926
g3
sS'name'
p47927
S'save_in'
p47928
sS'required'
p47929
I00
sS'group_name'
p47930
S'Advanced'
p47931
sa(dp47932
S'description'
p47933
S'The seed for the master random number generator\n'
p47934
sS'cpp_type'
p47935
S'unsigned int'
p47936
sS'default'
p47937
S'0'
p47938
sS'name'
p47939
S'seed'
p47940
sS'required'
p47941
I00
sS'group_name'
p47942
S'Advanced'
p47943
sa(dp47944
S'description'
p47945
g3
sS'cpp_type'
p47946
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p47947
sS'default'
p47948
S'CahnHilliard'
p47949
sS'name'
p47950
S'type'
p47951
sS'required'
p47952
I00
sS'group_name'
p47953
Nsa(dp47954
S'description'
p47955
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47956
sS'cpp_type'
p47957
S'bool'
p47958
sS'default'
p47959
S'0'
p47960
sS'name'
p47961
S'use_displaced_mesh'
p47962
sS'required'
p47963
I00
sS'group_name'
p47964
S'Advanced'
p47965
sa(dp47966
S'description'
p47967
S'The name of the variable that this Kernel operates on\n'
p47968
sS'cpp_type'
p47969
S'NonlinearVariableName'
p47970
sS'default'
p47971
g3
sS'name'
p47972
S'variable'
p47973
sS'required'
p47974
I01
sS'group_name'
p47975
NsasS'name'
p47976
S'/Kernels/CahnHilliard'
p47977
sa(dp47978
S'description'
p47979
S'Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a tensor (anisotropic) mobility\n'
p47980
sS'subblocks'
p47981
NsS'parameters'
p47982
(lp47983
(dp47984
S'description'
p47985
S'Vector of arguments of the mobility\n'
p47986
sS'cpp_type'
p47987
S'std::vector<VariableName>'
p47988
sS'default'
p47989
g3
sS'name'
p47990
S'args'
p47991
sS'required'
p47992
I00
sS'group_name'
p47993
Nsa(dp47994
S'description'
p47995
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47996
sS'cpp_type'
p47997
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p47998
sS'default'
p47999
g3
sS'name'
p48000
S'block'
p48001
sS'required'
p48002
I00
sS'group_name'
p48003
Nsa(dp48004
S'description'
p48005
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48006
sS'cpp_type'
p48007
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48008
sS'default'
p48009
g3
sS'name'
p48010
S'control_tags'
p48011
sS'required'
p48012
I00
sS'group_name'
p48013
Nsa(dp48014
S'description'
p48015
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48016
sS'cpp_type'
p48017
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48018
sS'default'
p48019
g3
sS'name'
p48020
S'diag_save_in'
p48021
sS'required'
p48022
I00
sS'group_name'
p48023
S'Advanced'
p48024
sa(dp48025
S'description'
p48026
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p48027
sS'cpp_type'
p48028
S'std::vector<VariableName>'
p48029
sS'default'
p48030
g3
sS'name'
p48031
S'displacement_gradients'
p48032
sS'required'
p48033
I00
sS'group_name'
p48034
Nsa(dp48035
S'description'
p48036
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p48037
sS'cpp_type'
p48038
S'MaterialPropertyName'
p48039
sS'default'
p48040
g3
sS'name'
p48041
S'f_name'
p48042
sS'required'
p48043
I01
sS'group_name'
p48044
Nsa(dp48045
S'description'
p48046
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48047
sS'cpp_type'
p48048
S'bool'
p48049
sS'default'
p48050
S'1'
p48051
sS'name'
p48052
S'implicit'
p48053
sS'required'
p48054
I00
sS'group_name'
p48055
S'Advanced'
p48056
sa(dp48057
S'description'
p48058
S'The mobility used with the kernel\n'
p48059
sS'cpp_type'
p48060
S'MaterialPropertyName'
p48061
sS'default'
p48062
S'M'
p48063
sS'name'
p48064
S'mob_name'
p48065
sS'required'
p48066
I00
sS'group_name'
p48067
Nsa(dp48068
S'description'
p48069
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48070
sS'cpp_type'
p48071
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48072
sS'default'
p48073
g3
sS'name'
p48074
S'save_in'
p48075
sS'required'
p48076
I00
sS'group_name'
p48077
S'Advanced'
p48078
sa(dp48079
S'description'
p48080
S'The seed for the master random number generator\n'
p48081
sS'cpp_type'
p48082
S'unsigned int'
p48083
sS'default'
p48084
S'0'
p48085
sS'name'
p48086
S'seed'
p48087
sS'required'
p48088
I00
sS'group_name'
p48089
S'Advanced'
p48090
sa(dp48091
S'description'
p48092
g3
sS'cpp_type'
p48093
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48094
sS'default'
p48095
S'CahnHilliardAniso'
p48096
sS'name'
p48097
S'type'
p48098
sS'required'
p48099
I00
sS'group_name'
p48100
Nsa(dp48101
S'description'
p48102
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48103
sS'cpp_type'
p48104
S'bool'
p48105
sS'default'
p48106
S'0'
p48107
sS'name'
p48108
S'use_displaced_mesh'
p48109
sS'required'
p48110
I00
sS'group_name'
p48111
S'Advanced'
p48112
sa(dp48113
S'description'
p48114
S'The name of the variable that this Kernel operates on\n'
p48115
sS'cpp_type'
p48116
S'NonlinearVariableName'
p48117
sS'default'
p48118
g3
sS'name'
p48119
S'variable'
p48120
sS'required'
p48121
I01
sS'group_name'
p48122
NsasS'name'
p48123
S'/Kernels/CahnHilliardAniso'
p48124
sa(dp48125
S'description'
p48126
g3
sS'subblocks'
p48127
NsS'parameters'
p48128
(lp48129
(dp48130
S'description'
p48131
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48132
sS'cpp_type'
p48133
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48134
sS'default'
p48135
g3
sS'name'
p48136
S'block'
p48137
sS'required'
p48138
I00
sS'group_name'
p48139
Nsa(dp48140
S'description'
p48141
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48142
sS'cpp_type'
p48143
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48144
sS'default'
p48145
g3
sS'name'
p48146
S'control_tags'
p48147
sS'required'
p48148
I00
sS'group_name'
p48149
Nsa(dp48150
S'description'
p48151
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48152
sS'cpp_type'
p48153
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48154
sS'default'
p48155
g3
sS'name'
p48156
S'diag_save_in'
p48157
sS'required'
p48158
I00
sS'group_name'
p48159
S'Advanced'
p48160
sa(dp48161
S'description'
p48162
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48163
sS'cpp_type'
p48164
S'bool'
p48165
sS'default'
p48166
S'1'
p48167
sS'name'
p48168
S'implicit'
p48169
sS'required'
p48170
I00
sS'group_name'
p48171
S'Advanced'
p48172
sa(dp48173
S'description'
p48174
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48175
sS'cpp_type'
p48176
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48177
sS'default'
p48178
g3
sS'name'
p48179
S'save_in'
p48180
sS'required'
p48181
I00
sS'group_name'
p48182
S'Advanced'
p48183
sa(dp48184
S'description'
p48185
S'The seed for the master random number generator\n'
p48186
sS'cpp_type'
p48187
S'unsigned int'
p48188
sS'default'
p48189
S'0'
p48190
sS'name'
p48191
S'seed'
p48192
sS'required'
p48193
I00
sS'group_name'
p48194
S'Advanced'
p48195
sa(dp48196
S'description'
p48197
g3
sS'cpp_type'
p48198
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48199
sS'default'
p48200
S'CoefConduction'
p48201
sS'name'
p48202
S'type'
p48203
sS'required'
p48204
I00
sS'group_name'
p48205
Nsa(dp48206
S'description'
p48207
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48208
sS'cpp_type'
p48209
S'bool'
p48210
sS'default'
p48211
S'0'
p48212
sS'name'
p48213
S'use_displaced_mesh'
p48214
sS'required'
p48215
I00
sS'group_name'
p48216
S'Advanced'
p48217
sa(dp48218
S'description'
p48219
S'The name of the variable that this Kernel operates on\n'
p48220
sS'cpp_type'
p48221
S'NonlinearVariableName'
p48222
sS'default'
p48223
g3
sS'name'
p48224
S'variable'
p48225
sS'required'
p48226
I01
sS'group_name'
p48227
NsasS'name'
p48228
S'/Kernels/CoefConduction'
p48229
sa(dp48230
S'description'
p48231
S'Scaled time derivative Kernel that acts on a coupled variable\n'
p48232
sS'subblocks'
p48233
NsS'parameters'
p48234
(lp48235
(dp48236
S'description'
p48237
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48238
sS'cpp_type'
p48239
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48240
sS'default'
p48241
g3
sS'name'
p48242
S'block'
p48243
sS'required'
p48244
I00
sS'group_name'
p48245
Nsa(dp48246
S'description'
p48247
S'Coefficient\n'
p48248
sS'cpp_type'
p48249
S'double'
p48250
sS'default'
p48251
g3
sS'name'
p48252
S'coef'
p48253
sS'required'
p48254
I01
sS'group_name'
p48255
Nsa(dp48256
S'description'
p48257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48258
sS'cpp_type'
p48259
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48260
sS'default'
p48261
g3
sS'name'
p48262
S'control_tags'
p48263
sS'required'
p48264
I00
sS'group_name'
p48265
Nsa(dp48266
S'description'
p48267
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48268
sS'cpp_type'
p48269
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48270
sS'default'
p48271
g3
sS'name'
p48272
S'diag_save_in'
p48273
sS'required'
p48274
I00
sS'group_name'
p48275
S'Advanced'
p48276
sa(dp48277
S'description'
p48278
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48279
sS'cpp_type'
p48280
S'bool'
p48281
sS'default'
p48282
S'1'
p48283
sS'name'
p48284
S'implicit'
p48285
sS'required'
p48286
I00
sS'group_name'
p48287
S'Advanced'
p48288
sa(dp48289
S'description'
p48290
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48291
sS'cpp_type'
p48292
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48293
sS'default'
p48294
g3
sS'name'
p48295
S'save_in'
p48296
sS'required'
p48297
I00
sS'group_name'
p48298
S'Advanced'
p48299
sa(dp48300
S'description'
p48301
S'The seed for the master random number generator\n'
p48302
sS'cpp_type'
p48303
S'unsigned int'
p48304
sS'default'
p48305
S'0'
p48306
sS'name'
p48307
S'seed'
p48308
sS'required'
p48309
I00
sS'group_name'
p48310
S'Advanced'
p48311
sa(dp48312
S'description'
p48313
g3
sS'cpp_type'
p48314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48315
sS'default'
p48316
S'CoefCoupledTimeDerivative'
p48317
sS'name'
p48318
S'type'
p48319
sS'required'
p48320
I00
sS'group_name'
p48321
Nsa(dp48322
S'description'
p48323
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48324
sS'cpp_type'
p48325
S'bool'
p48326
sS'default'
p48327
S'0'
p48328
sS'name'
p48329
S'use_displaced_mesh'
p48330
sS'required'
p48331
I00
sS'group_name'
p48332
S'Advanced'
p48333
sa(dp48334
S'description'
p48335
S'Coupled variable\n'
p48336
sS'cpp_type'
p48337
S'std::vector<VariableName>'
p48338
sS'default'
p48339
g3
sS'name'
p48340
S'v'
p48341
sS'required'
p48342
I01
sS'group_name'
p48343
Nsa(dp48344
S'description'
p48345
S'The name of the variable that this Kernel operates on\n'
p48346
sS'cpp_type'
p48347
S'NonlinearVariableName'
p48348
sS'default'
p48349
g3
sS'name'
p48350
S'variable'
p48351
sS'required'
p48352
I01
sS'group_name'
p48353
NsasS'name'
p48354
S'/Kernels/CoefCoupledTimeDerivative'
p48355
sa(dp48356
S'description'
p48357
S'Kernel for diffusion with diffusivity = coef + function\n'
p48358
sS'subblocks'
p48359
NsS'parameters'
p48360
(lp48361
(dp48362
S'description'
p48363
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48364
sS'cpp_type'
p48365
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48366
sS'default'
p48367
g3
sS'name'
p48368
S'block'
p48369
sS'required'
p48370
I00
sS'group_name'
p48371
Nsa(dp48372
S'description'
p48373
S'Diffusion coefficient\n'
p48374
sS'cpp_type'
p48375
S'double'
p48376
sS'default'
p48377
S'0'
p48378
sS'name'
p48379
S'coef'
p48380
sS'required'
p48381
I00
sS'group_name'
p48382
Nsa(dp48383
S'description'
p48384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48385
sS'cpp_type'
p48386
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48387
sS'default'
p48388
g3
sS'name'
p48389
S'control_tags'
p48390
sS'required'
p48391
I00
sS'group_name'
p48392
Nsa(dp48393
S'description'
p48394
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48395
sS'cpp_type'
p48396
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48397
sS'default'
p48398
g3
sS'name'
p48399
S'diag_save_in'
p48400
sS'required'
p48401
I00
sS'group_name'
p48402
S'Advanced'
p48403
sa(dp48404
S'description'
p48405
S'If provided, the diffusion coefficient will be coef + this function.  This is useful for temporally or spatially varying diffusivities\n'
p48406
sS'cpp_type'
p48407
S'FunctionName'
p48408
sS'default'
p48409
g3
sS'name'
p48410
S'function'
p48411
sS'required'
p48412
I00
sS'group_name'
p48413
Nsa(dp48414
S'description'
p48415
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48416
sS'cpp_type'
p48417
S'bool'
p48418
sS'default'
p48419
S'1'
p48420
sS'name'
p48421
S'implicit'
p48422
sS'required'
p48423
I00
sS'group_name'
p48424
S'Advanced'
p48425
sa(dp48426
S'description'
p48427
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48428
sS'cpp_type'
p48429
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48430
sS'default'
p48431
g3
sS'name'
p48432
S'save_in'
p48433
sS'required'
p48434
I00
sS'group_name'
p48435
S'Advanced'
p48436
sa(dp48437
S'description'
p48438
S'The seed for the master random number generator\n'
p48439
sS'cpp_type'
p48440
S'unsigned int'
p48441
sS'default'
p48442
S'0'
p48443
sS'name'
p48444
S'seed'
p48445
sS'required'
p48446
I00
sS'group_name'
p48447
S'Advanced'
p48448
sa(dp48449
S'description'
p48450
g3
sS'cpp_type'
p48451
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48452
sS'default'
p48453
S'CoefDiffusion'
p48454
sS'name'
p48455
S'type'
p48456
sS'required'
p48457
I00
sS'group_name'
p48458
Nsa(dp48459
S'description'
p48460
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48461
sS'cpp_type'
p48462
S'bool'
p48463
sS'default'
p48464
S'0'
p48465
sS'name'
p48466
S'use_displaced_mesh'
p48467
sS'required'
p48468
I00
sS'group_name'
p48469
S'Advanced'
p48470
sa(dp48471
S'description'
p48472
S'The name of the variable that this Kernel operates on\n'
p48473
sS'cpp_type'
p48474
S'NonlinearVariableName'
p48475
sS'default'
p48476
g3
sS'name'
p48477
S'variable'
p48478
sS'required'
p48479
I01
sS'group_name'
p48480
NsasS'name'
p48481
S'/Kernels/CoefDiffusion'
p48482
sa(dp48483
S'description'
p48484
g3
sS'subblocks'
p48485
NsS'parameters'
p48486
(lp48487
(dp48488
S'description'
p48489
S'The coefficient for the time derivative kernel\n'
p48490
sS'cpp_type'
p48491
S'double'
p48492
sS'default'
p48493
S'1'
p48494
sS'name'
p48495
S'Coefficient'
p48496
sS'required'
p48497
I00
sS'group_name'
p48498
Nsa(dp48499
S'description'
p48500
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48501
sS'cpp_type'
p48502
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48503
sS'default'
p48504
g3
sS'name'
p48505
S'block'
p48506
sS'required'
p48507
I00
sS'group_name'
p48508
Nsa(dp48509
S'description'
p48510
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48511
sS'cpp_type'
p48512
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48513
sS'default'
p48514
g3
sS'name'
p48515
S'control_tags'
p48516
sS'required'
p48517
I00
sS'group_name'
p48518
Nsa(dp48519
S'description'
p48520
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48521
sS'cpp_type'
p48522
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48523
sS'default'
p48524
g3
sS'name'
p48525
S'diag_save_in'
p48526
sS'required'
p48527
I00
sS'group_name'
p48528
S'Advanced'
p48529
sa(dp48530
S'description'
p48531
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48532
sS'cpp_type'
p48533
S'bool'
p48534
sS'default'
p48535
S'1'
p48536
sS'name'
p48537
S'implicit'
p48538
sS'required'
p48539
I00
sS'group_name'
p48540
S'Advanced'
p48541
sa(dp48542
S'description'
p48543
S'True for mass matrix lumping, false otherwise\n'
p48544
sS'cpp_type'
p48545
S'bool'
p48546
sS'default'
p48547
S'0'
p48548
sS'name'
p48549
S'lumping'
p48550
sS'required'
p48551
I00
sS'group_name'
p48552
Nsa(dp48553
S'description'
p48554
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48555
sS'cpp_type'
p48556
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48557
sS'default'
p48558
g3
sS'name'
p48559
S'save_in'
p48560
sS'required'
p48561
I00
sS'group_name'
p48562
S'Advanced'
p48563
sa(dp48564
S'description'
p48565
S'The seed for the master random number generator\n'
p48566
sS'cpp_type'
p48567
S'unsigned int'
p48568
sS'default'
p48569
S'0'
p48570
sS'name'
p48571
S'seed'
p48572
sS'required'
p48573
I00
sS'group_name'
p48574
S'Advanced'
p48575
sa(dp48576
S'description'
p48577
g3
sS'cpp_type'
p48578
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48579
sS'default'
p48580
S'CoefTimeDerivative'
p48581
sS'name'
p48582
S'type'
p48583
sS'required'
p48584
I00
sS'group_name'
p48585
Nsa(dp48586
S'description'
p48587
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48588
sS'cpp_type'
p48589
S'bool'
p48590
sS'default'
p48591
S'0'
p48592
sS'name'
p48593
S'use_displaced_mesh'
p48594
sS'required'
p48595
I00
sS'group_name'
p48596
S'Advanced'
p48597
sa(dp48598
S'description'
p48599
S'The name of the variable that this Kernel operates on\n'
p48600
sS'cpp_type'
p48601
S'NonlinearVariableName'
p48602
sS'default'
p48603
g3
sS'name'
p48604
S'variable'
p48605
sS'required'
p48606
I01
sS'group_name'
p48607
NsasS'name'
p48608
S'/Kernels/CoefTimeDerivative'
p48609
sa(dp48610
S'description'
p48611
S'Source term for noise from a ConservativeNoise userobject\n'
p48612
sS'subblocks'
p48613
NsS'parameters'
p48614
(lp48615
(dp48616
S'description'
p48617
S'Amplitude\n'
p48618
sS'cpp_type'
p48619
S'double'
p48620
sS'default'
p48621
g3
sS'name'
p48622
S'amplitude'
p48623
sS'required'
p48624
I01
sS'group_name'
p48625
Nsa(dp48626
S'description'
p48627
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48628
sS'cpp_type'
p48629
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48630
sS'default'
p48631
g3
sS'name'
p48632
S'block'
p48633
sS'required'
p48634
I00
sS'group_name'
p48635
Nsa(dp48636
S'description'
p48637
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48638
sS'cpp_type'
p48639
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48640
sS'default'
p48641
g3
sS'name'
p48642
S'control_tags'
p48643
sS'required'
p48644
I00
sS'group_name'
p48645
Nsa(dp48646
S'description'
p48647
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48648
sS'cpp_type'
p48649
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48650
sS'default'
p48651
g3
sS'name'
p48652
S'diag_save_in'
p48653
sS'required'
p48654
I00
sS'group_name'
p48655
S'Advanced'
p48656
sa(dp48657
S'description'
p48658
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48659
sS'cpp_type'
p48660
S'bool'
p48661
sS'default'
p48662
S'1'
p48663
sS'name'
p48664
S'implicit'
p48665
sS'required'
p48666
I00
sS'group_name'
p48667
S'Advanced'
p48668
sa(dp48669
S'description'
p48670
S'Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n'
p48671
sS'cpp_type'
p48672
S'MaterialPropertyName'
p48673
sS'default'
p48674
S'1'
p48675
sS'name'
p48676
S'multiplier'
p48677
sS'required'
p48678
I00
sS'group_name'
p48679
Nsa(dp48680
S'description'
p48681
S'ConservativeNoise userobject that produces the random numbers\n'
p48682
sS'cpp_type'
p48683
S'UserObjectName'
p48684
sS'default'
p48685
g3
sS'name'
p48686
S'noise'
p48687
sS'required'
p48688
I01
sS'group_name'
p48689
Nsa(dp48690
S'description'
p48691
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48692
sS'cpp_type'
p48693
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48694
sS'default'
p48695
g3
sS'name'
p48696
S'save_in'
p48697
sS'required'
p48698
I00
sS'group_name'
p48699
S'Advanced'
p48700
sa(dp48701
S'description'
p48702
S'The seed for the master random number generator\n'
p48703
sS'cpp_type'
p48704
S'unsigned int'
p48705
sS'default'
p48706
S'0'
p48707
sS'name'
p48708
S'seed'
p48709
sS'required'
p48710
I00
sS'group_name'
p48711
S'Advanced'
p48712
sa(dp48713
S'description'
p48714
g3
sS'cpp_type'
p48715
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48716
sS'default'
p48717
S'ConservedLangevinNoise'
p48718
sS'name'
p48719
S'type'
p48720
sS'required'
p48721
I00
sS'group_name'
p48722
Nsa(dp48723
S'description'
p48724
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48725
sS'cpp_type'
p48726
S'bool'
p48727
sS'default'
p48728
S'0'
p48729
sS'name'
p48730
S'use_displaced_mesh'
p48731
sS'required'
p48732
I00
sS'group_name'
p48733
S'Advanced'
p48734
sa(dp48735
S'description'
p48736
S'The name of the variable that this Kernel operates on\n'
p48737
sS'cpp_type'
p48738
S'NonlinearVariableName'
p48739
sS'default'
p48740
g3
sS'name'
p48741
S'variable'
p48742
sS'required'
p48743
I01
sS'group_name'
p48744
NsasS'name'
p48745
S'/Kernels/ConservedLangevinNoise'
p48746
sa(dp48747
S'description'
p48748
g3
sS'subblocks'
p48749
NsS'parameters'
p48750
(lp48751
(dp48752
S'description'
p48753
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48754
sS'cpp_type'
p48755
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48756
sS'default'
p48757
g3
sS'name'
p48758
S'block'
p48759
sS'required'
p48760
I00
sS'group_name'
p48761
Nsa(dp48762
S'description'
p48763
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48764
sS'cpp_type'
p48765
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48766
sS'default'
p48767
g3
sS'name'
p48768
S'control_tags'
p48769
sS'required'
p48770
I00
sS'group_name'
p48771
Nsa(dp48772
S'description'
p48773
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48774
sS'cpp_type'
p48775
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48776
sS'default'
p48777
g3
sS'name'
p48778
S'diag_save_in'
p48779
sS'required'
p48780
I00
sS'group_name'
p48781
S'Advanced'
p48782
sa(dp48783
S'description'
p48784
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48785
sS'cpp_type'
p48786
S'bool'
p48787
sS'default'
p48788
S'1'
p48789
sS'name'
p48790
S'implicit'
p48791
sS'required'
p48792
I00
sS'group_name'
p48793
S'Advanced'
p48794
sa(dp48795
S'description'
p48796
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48797
sS'cpp_type'
p48798
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48799
sS'default'
p48800
g3
sS'name'
p48801
S'save_in'
p48802
sS'required'
p48803
I00
sS'group_name'
p48804
S'Advanced'
p48805
sa(dp48806
S'description'
p48807
S'The seed for the master random number generator\n'
p48808
sS'cpp_type'
p48809
S'unsigned int'
p48810
sS'default'
p48811
S'0'
p48812
sS'name'
p48813
S'seed'
p48814
sS'required'
p48815
I00
sS'group_name'
p48816
S'Advanced'
p48817
sa(dp48818
S'description'
p48819
g3
sS'cpp_type'
p48820
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48821
sS'default'
p48822
S'Convection'
p48823
sS'name'
p48824
S'type'
p48825
sS'required'
p48826
I00
sS'group_name'
p48827
Nsa(dp48828
S'description'
p48829
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48830
sS'cpp_type'
p48831
S'bool'
p48832
sS'default'
p48833
S'0'
p48834
sS'name'
p48835
S'use_displaced_mesh'
p48836
sS'required'
p48837
I00
sS'group_name'
p48838
S'Advanced'
p48839
sa(dp48840
S'description'
p48841
S'The name of the variable that this Kernel operates on\n'
p48842
sS'cpp_type'
p48843
S'NonlinearVariableName'
p48844
sS'default'
p48845
g3
sS'name'
p48846
S'variable'
p48847
sS'required'
p48848
I01
sS'group_name'
p48849
Nsa(dp48850
S'description'
p48851
S'Component of velocity in the x direction\n'
p48852
sS'cpp_type'
p48853
S'double'
p48854
sS'default'
p48855
g3
sS'name'
p48856
S'x'
p48857
sS'required'
p48858
I01
sS'group_name'
p48859
Nsa(dp48860
S'description'
p48861
S'Component of velocity in the y direction\n'
p48862
sS'cpp_type'
p48863
S'double'
p48864
sS'default'
p48865
g3
sS'name'
p48866
S'y'
p48867
sS'required'
p48868
I01
sS'group_name'
p48869
Nsa(dp48870
S'description'
p48871
S'Component of velocity in the z direction\n'
p48872
sS'cpp_type'
p48873
S'double'
p48874
sS'default'
p48875
S'0'
p48876
sS'name'
p48877
S'z'
p48878
sS'required'
p48879
I00
sS'group_name'
p48880
NsasS'name'
p48881
S'/Kernels/Convection'
p48882
sa(dp48883
S'description'
p48884
S'Stress divergence kernel (used by the TensorMechanics action)\n'
p48885
sS'subblocks'
p48886
NsS'parameters'
p48887
(lp48888
(dp48889
S'description'
p48890
S'Material property base name\n'
p48891
sS'cpp_type'
p48892
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p48893
sS'default'
p48894
g3
sS'name'
p48895
S'base_name'
p48896
sS'required'
p48897
I00
sS'group_name'
p48898
Nsa(dp48899
S'description'
p48900
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48901
sS'cpp_type'
p48902
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p48903
sS'default'
p48904
g3
sS'name'
p48905
S'block'
p48906
sS'required'
p48907
I00
sS'group_name'
p48908
Nsa(dp48909
S'description'
p48910
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p48911
sS'cpp_type'
p48912
S'unsigned int'
p48913
sS'default'
p48914
g3
sS'name'
p48915
S'component'
p48916
sS'required'
p48917
I01
sS'group_name'
p48918
Nsa(dp48919
S'description'
p48920
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48921
sS'cpp_type'
p48922
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p48923
sS'default'
p48924
g3
sS'name'
p48925
S'control_tags'
p48926
sS'required'
p48927
I00
sS'group_name'
p48928
Nsa(dp48929
S'description'
p48930
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48931
sS'cpp_type'
p48932
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48933
sS'default'
p48934
g3
sS'name'
p48935
S'diag_save_in'
p48936
sS'required'
p48937
I00
sS'group_name'
p48938
S'Advanced'
p48939
sa(dp48940
S'description'
p48941
S'Depricated: the x displacement\n'
p48942
sS'cpp_type'
p48943
S'std::vector<VariableName>'
p48944
sS'default'
p48945
g3
sS'name'
p48946
S'disp_x'
p48947
sS'required'
p48948
I00
sS'group_name'
p48949
Nsa(dp48950
S'description'
p48951
S'Depricated: the y displacement\n'
p48952
sS'cpp_type'
p48953
S'std::vector<VariableName>'
p48954
sS'default'
p48955
g3
sS'name'
p48956
S'disp_y'
p48957
sS'required'
p48958
I00
sS'group_name'
p48959
Nsa(dp48960
S'description'
p48961
S'Depricated: the z displacement\n'
p48962
sS'cpp_type'
p48963
S'std::vector<VariableName>'
p48964
sS'default'
p48965
g3
sS'name'
p48966
S'disp_z'
p48967
sS'required'
p48968
I00
sS'group_name'
p48969
Nsa(dp48970
S'description'
p48971
S'The string of displacements suitable for the problem statement\n'
p48972
sS'cpp_type'
p48973
S'std::vector<VariableName>'
p48974
sS'default'
p48975
g3
sS'name'
p48976
S'displacements'
p48977
sS'required'
p48978
I00
sS'group_name'
p48979
Nsa(dp48980
S'description'
p48981
S'Determines whether this object is calculated using an implicit or explicit form\n'
p48982
sS'cpp_type'
p48983
S'bool'
p48984
sS'default'
p48985
S'1'
p48986
sS'name'
p48987
S'implicit'
p48988
sS'required'
p48989
I00
sS'group_name'
p48990
S'Advanced'
p48991
sa(dp48992
S'description'
p48993
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p48994
sS'cpp_type'
p48995
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p48996
sS'default'
p48997
g3
sS'name'
p48998
S'save_in'
p48999
sS'required'
p49000
I00
sS'group_name'
p49001
S'Advanced'
p49002
sa(dp49003
S'description'
p49004
S'The seed for the master random number generator\n'
p49005
sS'cpp_type'
p49006
S'unsigned int'
p49007
sS'default'
p49008
S'0'
p49009
sS'name'
p49010
S'seed'
p49011
sS'required'
p49012
I00
sS'group_name'
p49013
S'Advanced'
p49014
sa(dp49015
S'description'
p49016
S'The temperature\n'
p49017
sS'cpp_type'
p49018
S'std::vector<VariableName>'
p49019
sS'default'
p49020
g3
sS'name'
p49021
S'temp'
p49022
sS'required'
p49023
I00
sS'group_name'
p49024
Nsa(dp49025
S'description'
p49026
g3
sS'cpp_type'
p49027
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49028
sS'default'
p49029
S'CosseratStressDivergenceTensors'
p49030
sS'name'
p49031
S'type'
p49032
sS'required'
p49033
I00
sS'group_name'
p49034
Nsa(dp49035
S'description'
p49036
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49037
sS'cpp_type'
p49038
S'bool'
p49039
sS'default'
p49040
S'0'
p49041
sS'name'
p49042
S'use_displaced_mesh'
p49043
sS'required'
p49044
I00
sS'group_name'
p49045
S'Advanced'
p49046
sa(dp49047
S'description'
p49048
S'The name of the variable that this Kernel operates on\n'
p49049
sS'cpp_type'
p49050
S'NonlinearVariableName'
p49051
sS'default'
p49052
g3
sS'name'
p49053
S'variable'
p49054
sS'required'
p49055
I01
sS'group_name'
p49056
Nsa(dp49057
S'description'
p49058
S'The Cosserat rotation about x\n'
p49059
sS'cpp_type'
p49060
S'std::vector<VariableName>'
p49061
sS'default'
p49062
g3
sS'name'
p49063
S'wc_x'
p49064
sS'required'
p49065
I00
sS'group_name'
p49066
Nsa(dp49067
S'description'
p49068
S'The Cosserat rotation about y\n'
p49069
sS'cpp_type'
p49070
S'std::vector<VariableName>'
p49071
sS'default'
p49072
g3
sS'name'
p49073
S'wc_y'
p49074
sS'required'
p49075
I00
sS'group_name'
p49076
Nsa(dp49077
S'description'
p49078
S'The Cosserat rotation about z\n'
p49079
sS'cpp_type'
p49080
S'std::vector<VariableName>'
p49081
sS'default'
p49082
g3
sS'name'
p49083
S'wc_z'
p49084
sS'required'
p49085
I00
sS'group_name'
p49086
NsasS'name'
p49087
S'/Kernels/CosseratStressDivergenceTensors'
p49088
sa(dp49089
S'description'
p49090
g3
sS'subblocks'
p49091
NsS'parameters'
p49092
(lp49093
(dp49094
S'description'
p49095
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49096
sS'cpp_type'
p49097
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49098
sS'default'
p49099
g3
sS'name'
p49100
S'block'
p49101
sS'required'
p49102
I00
sS'group_name'
p49103
Nsa(dp49104
S'description'
p49105
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49106
sS'cpp_type'
p49107
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49108
sS'default'
p49109
g3
sS'name'
p49110
S'control_tags'
p49111
sS'required'
p49112
I00
sS'group_name'
p49113
Nsa(dp49114
S'description'
p49115
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49116
sS'cpp_type'
p49117
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49118
sS'default'
p49119
g3
sS'name'
p49120
S'diag_save_in'
p49121
sS'required'
p49122
I00
sS'group_name'
p49123
S'Advanced'
p49124
sa(dp49125
S'description'
p49126
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49127
sS'cpp_type'
p49128
S'bool'
p49129
sS'default'
p49130
S'1'
p49131
sS'name'
p49132
S'implicit'
p49133
sS'required'
p49134
I00
sS'group_name'
p49135
S'Advanced'
p49136
sa(dp49137
S'description'
p49138
S'The equilibrium constaant of this equilibrium species in dissociateion reaction\n'
p49139
sS'cpp_type'
p49140
S'double'
p49141
sS'default'
p49142
S'0'
p49143
sS'name'
p49144
S'log_k'
p49145
sS'required'
p49146
I00
sS'group_name'
p49147
Nsa(dp49148
S'description'
p49149
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49150
sS'cpp_type'
p49151
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49152
sS'default'
p49153
g3
sS'name'
p49154
S'save_in'
p49155
sS'required'
p49156
I00
sS'group_name'
p49157
S'Advanced'
p49158
sa(dp49159
S'description'
p49160
S'The seed for the master random number generator\n'
p49161
sS'cpp_type'
p49162
S'unsigned int'
p49163
sS'default'
p49164
S'0'
p49165
sS'name'
p49166
S'seed'
p49167
sS'required'
p49168
I00
sS'group_name'
p49169
S'Advanced'
p49170
sa(dp49171
S'description'
p49172
S'The stochiomentic coef of the primary variable this kernel operats on\n'
p49173
sS'cpp_type'
p49174
S'double'
p49175
sS'default'
p49176
S'1'
p49177
sS'name'
p49178
S'sto_u'
p49179
sS'required'
p49180
I00
sS'group_name'
p49181
Nsa(dp49182
S'description'
p49183
S'The stochiometric coefficients of coupled primary species\n'
p49184
sS'cpp_type'
p49185
S'std::vector<double, std::allocator<double> >'
p49186
sS'default'
p49187
g3
sS'name'
p49188
S'sto_v'
p49189
sS'required'
p49190
I01
sS'group_name'
p49191
Nsa(dp49192
S'description'
p49193
g3
sS'cpp_type'
p49194
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49195
sS'default'
p49196
S'CoupledBEEquilibriumSub'
p49197
sS'name'
p49198
S'type'
p49199
sS'required'
p49200
I00
sS'group_name'
p49201
Nsa(dp49202
S'description'
p49203
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49204
sS'cpp_type'
p49205
S'bool'
p49206
sS'default'
p49207
S'0'
p49208
sS'name'
p49209
S'use_displaced_mesh'
p49210
sS'required'
p49211
I00
sS'group_name'
p49212
S'Advanced'
p49213
sa(dp49214
S'description'
p49215
S'Coupled primary species constituting the equalibrium species\n'
p49216
sS'cpp_type'
p49217
S'std::vector<VariableName>'
p49218
sS'default'
p49219
g3
sS'name'
p49220
S'v'
p49221
sS'required'
p49222
I00
sS'group_name'
p49223
Nsa(dp49224
S'description'
p49225
S'The name of the variable that this Kernel operates on\n'
p49226
sS'cpp_type'
p49227
S'NonlinearVariableName'
p49228
sS'default'
p49229
g3
sS'name'
p49230
S'variable'
p49231
sS'required'
p49232
I01
sS'group_name'
p49233
Nsa(dp49234
S'description'
p49235
S'The weight of the equilibrium species\n'
p49236
sS'cpp_type'
p49237
S'double'
p49238
sS'default'
p49239
S'1'
p49240
sS'name'
p49241
S'weight'
p49242
sS'required'
p49243
I00
sS'group_name'
p49244
NsasS'name'
p49245
S'/Kernels/CoupledBEEquilibriumSub'
p49246
sa(dp49247
S'description'
p49248
g3
sS'subblocks'
p49249
NsS'parameters'
p49250
(lp49251
(dp49252
S'description'
p49253
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49254
sS'cpp_type'
p49255
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49256
sS'default'
p49257
g3
sS'name'
p49258
S'block'
p49259
sS'required'
p49260
I00
sS'group_name'
p49261
Nsa(dp49262
S'description'
p49263
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49264
sS'cpp_type'
p49265
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49266
sS'default'
p49267
g3
sS'name'
p49268
S'control_tags'
p49269
sS'required'
p49270
I00
sS'group_name'
p49271
Nsa(dp49272
S'description'
p49273
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49274
sS'cpp_type'
p49275
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49276
sS'default'
p49277
g3
sS'name'
p49278
S'diag_save_in'
p49279
sS'required'
p49280
I00
sS'group_name'
p49281
S'Advanced'
p49282
sa(dp49283
S'description'
p49284
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49285
sS'cpp_type'
p49286
S'bool'
p49287
sS'default'
p49288
S'1'
p49289
sS'name'
p49290
S'implicit'
p49291
sS'required'
p49292
I00
sS'group_name'
p49293
S'Advanced'
p49294
sa(dp49295
S'description'
p49296
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49297
sS'cpp_type'
p49298
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49299
sS'default'
p49300
g3
sS'name'
p49301
S'save_in'
p49302
sS'required'
p49303
I00
sS'group_name'
p49304
S'Advanced'
p49305
sa(dp49306
S'description'
p49307
S'The seed for the master random number generator\n'
p49308
sS'cpp_type'
p49309
S'unsigned int'
p49310
sS'default'
p49311
S'0'
p49312
sS'name'
p49313
S'seed'
p49314
sS'required'
p49315
I00
sS'group_name'
p49316
S'Advanced'
p49317
sa(dp49318
S'description'
p49319
g3
sS'cpp_type'
p49320
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49321
sS'default'
p49322
S'CoupledBEKinetic'
p49323
sS'name'
p49324
S'type'
p49325
sS'required'
p49326
I00
sS'group_name'
p49327
Nsa(dp49328
S'description'
p49329
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49330
sS'cpp_type'
p49331
S'bool'
p49332
sS'default'
p49333
S'0'
p49334
sS'name'
p49335
S'use_displaced_mesh'
p49336
sS'required'
p49337
I00
sS'group_name'
p49338
S'Advanced'
p49339
sa(dp49340
S'description'
p49341
S'List of kinetic species being coupled by concentration\n'
p49342
sS'cpp_type'
p49343
S'std::vector<VariableName>'
p49344
sS'default'
p49345
g3
sS'name'
p49346
S'v'
p49347
sS'required'
p49348
I00
sS'group_name'
p49349
Nsa(dp49350
S'description'
p49351
S'The name of the variable that this Kernel operates on\n'
p49352
sS'cpp_type'
p49353
S'NonlinearVariableName'
p49354
sS'default'
p49355
g3
sS'name'
p49356
S'variable'
p49357
sS'required'
p49358
I01
sS'group_name'
p49359
Nsa(dp49360
S'description'
p49361
S'The weight of kinetic species concentration\n'
p49362
sS'cpp_type'
p49363
S'std::vector<double, std::allocator<double> >'
p49364
sS'default'
p49365
g3
sS'name'
p49366
S'weight'
p49367
sS'required'
p49368
I01
sS'group_name'
p49369
NsasS'name'
p49370
S'/Kernels/CoupledBEKinetic'
p49371
sa(dp49372
S'description'
p49373
g3
sS'subblocks'
p49374
NsS'parameters'
p49375
(lp49376
(dp49377
S'description'
p49378
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49379
sS'cpp_type'
p49380
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49381
sS'default'
p49382
g3
sS'name'
p49383
S'block'
p49384
sS'required'
p49385
I00
sS'group_name'
p49386
Nsa(dp49387
S'description'
p49388
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49389
sS'cpp_type'
p49390
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49391
sS'default'
p49392
g3
sS'name'
p49393
S'control_tags'
p49394
sS'required'
p49395
I00
sS'group_name'
p49396
Nsa(dp49397
S'description'
p49398
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49399
sS'cpp_type'
p49400
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49401
sS'default'
p49402
g3
sS'name'
p49403
S'diag_save_in'
p49404
sS'required'
p49405
I00
sS'group_name'
p49406
S'Advanced'
p49407
sa(dp49408
S'description'
p49409
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49410
sS'cpp_type'
p49411
S'bool'
p49412
sS'default'
p49413
S'1'
p49414
sS'name'
p49415
S'implicit'
p49416
sS'required'
p49417
I00
sS'group_name'
p49418
S'Advanced'
p49419
sa(dp49420
S'description'
p49421
S'Equilibrium constant of dissociation equilibrium reaction\n'
p49422
sS'cpp_type'
p49423
S'double'
p49424
sS'default'
p49425
S'0'
p49426
sS'name'
p49427
S'log_k'
p49428
sS'required'
p49429
I00
sS'group_name'
p49430
Nsa(dp49431
S'description'
p49432
S'Pressure\n'
p49433
sS'cpp_type'
p49434
S'std::vector<VariableName>'
p49435
sS'default'
p49436
g3
sS'name'
p49437
S'p'
p49438
sS'required'
p49439
I01
sS'group_name'
p49440
Nsa(dp49441
S'description'
p49442
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49443
sS'cpp_type'
p49444
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49445
sS'default'
p49446
g3
sS'name'
p49447
S'save_in'
p49448
sS'required'
p49449
I00
sS'group_name'
p49450
S'Advanced'
p49451
sa(dp49452
S'description'
p49453
S'The seed for the master random number generator\n'
p49454
sS'cpp_type'
p49455
S'unsigned int'
p49456
sS'default'
p49457
S'0'
p49458
sS'name'
p49459
S'seed'
p49460
sS'required'
p49461
I00
sS'group_name'
p49462
S'Advanced'
p49463
sa(dp49464
S'description'
p49465
S'Stochiometric coef of the primary spceices the kernel operates on in the equilibrium reaction\n'
p49466
sS'cpp_type'
p49467
S'double'
p49468
sS'default'
p49469
S'1'
p49470
sS'name'
p49471
S'sto_u'
p49472
sS'required'
p49473
I00
sS'group_name'
p49474
Nsa(dp49475
S'description'
p49476
S'The stochiometric coefficients of coupled primary species in equilibrium reaction\n'
p49477
sS'cpp_type'
p49478
S'std::vector<double, std::allocator<double> >'
p49479
sS'default'
p49480
g3
sS'name'
p49481
S'sto_v'
p49482
sS'required'
p49483
I01
sS'group_name'
p49484
Nsa(dp49485
S'description'
p49486
g3
sS'cpp_type'
p49487
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49488
sS'default'
p49489
S'CoupledConvectionReactionSub'
p49490
sS'name'
p49491
S'type'
p49492
sS'required'
p49493
I00
sS'group_name'
p49494
Nsa(dp49495
S'description'
p49496
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49497
sS'cpp_type'
p49498
S'bool'
p49499
sS'default'
p49500
S'0'
p49501
sS'name'
p49502
S'use_displaced_mesh'
p49503
sS'required'
p49504
I00
sS'group_name'
p49505
S'Advanced'
p49506
sa(dp49507
S'description'
p49508
S'List of coupled primary species\n'
p49509
sS'cpp_type'
p49510
S'std::vector<VariableName>'
p49511
sS'default'
p49512
g3
sS'name'
p49513
S'v'
p49514
sS'required'
p49515
I00
sS'group_name'
p49516
Nsa(dp49517
S'description'
p49518
S'The name of the variable that this Kernel operates on\n'
p49519
sS'cpp_type'
p49520
S'NonlinearVariableName'
p49521
sS'default'
p49522
g3
sS'name'
p49523
S'variable'
p49524
sS'required'
p49525
I01
sS'group_name'
p49526
Nsa(dp49527
S'description'
p49528
S'Weight of the equilibrium species\n'
p49529
sS'cpp_type'
p49530
S'double'
p49531
sS'default'
p49532
S'1'
p49533
sS'name'
p49534
S'weight'
p49535
sS'required'
p49536
I00
sS'group_name'
p49537
NsasS'name'
p49538
S'/Kernels/CoupledConvectionReactionSub'
p49539
sa(dp49540
S'description'
p49541
g3
sS'subblocks'
p49542
NsS'parameters'
p49543
(lp49544
(dp49545
S'description'
p49546
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49547
sS'cpp_type'
p49548
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49549
sS'default'
p49550
g3
sS'name'
p49551
S'block'
p49552
sS'required'
p49553
I00
sS'group_name'
p49554
Nsa(dp49555
S'description'
p49556
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49557
sS'cpp_type'
p49558
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49559
sS'default'
p49560
g3
sS'name'
p49561
S'control_tags'
p49562
sS'required'
p49563
I00
sS'group_name'
p49564
Nsa(dp49565
S'description'
p49566
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49567
sS'cpp_type'
p49568
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49569
sS'default'
p49570
g3
sS'name'
p49571
S'diag_save_in'
p49572
sS'required'
p49573
I00
sS'group_name'
p49574
S'Advanced'
p49575
sa(dp49576
S'description'
p49577
S'The real material property to use as the diffusivity of this particular species\n'
p49578
sS'cpp_type'
p49579
S'MaterialPropertyName'
p49580
sS'default'
p49581
S'diffusivity'
p49582
sS'name'
p49583
S'diffusivity'
p49584
sS'required'
p49585
I00
sS'group_name'
p49586
Nsa(dp49587
S'description'
p49588
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49589
sS'cpp_type'
p49590
S'bool'
p49591
sS'default'
p49592
S'1'
p49593
sS'name'
p49594
S'implicit'
p49595
sS'required'
p49596
I00
sS'group_name'
p49597
S'Advanced'
p49598
sa(dp49599
S'description'
p49600
S'Equilibrium constant of the equilbrium reaction in dissociation form\n'
p49601
sS'cpp_type'
p49602
S'double'
p49603
sS'default'
p49604
S'0'
p49605
sS'name'
p49606
S'log_k'
p49607
sS'required'
p49608
I00
sS'group_name'
p49609
Nsa(dp49610
S'description'
p49611
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49612
sS'cpp_type'
p49613
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49614
sS'default'
p49615
g3
sS'name'
p49616
S'save_in'
p49617
sS'required'
p49618
I00
sS'group_name'
p49619
S'Advanced'
p49620
sa(dp49621
S'description'
p49622
S'The seed for the master random number generator\n'
p49623
sS'cpp_type'
p49624
S'unsigned int'
p49625
sS'default'
p49626
S'0'
p49627
sS'name'
p49628
S'seed'
p49629
sS'required'
p49630
I00
sS'group_name'
p49631
S'Advanced'
p49632
sa(dp49633
S'description'
p49634
S'Stochiometric coef of the primary species this kernel operates on in the equilibrium reaction\n'
p49635
sS'cpp_type'
p49636
S'double'
p49637
sS'default'
p49638
S'1'
p49639
sS'name'
p49640
S'sto_u'
p49641
sS'required'
p49642
I00
sS'group_name'
p49643
Nsa(dp49644
S'description'
p49645
S'The stochiometric coefficients of coupled primary species\n'
p49646
sS'cpp_type'
p49647
S'std::vector<double, std::allocator<double> >'
p49648
sS'default'
p49649
g3
sS'name'
p49650
S'sto_v'
p49651
sS'required'
p49652
I01
sS'group_name'
p49653
Nsa(dp49654
S'description'
p49655
g3
sS'cpp_type'
p49656
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49657
sS'default'
p49658
S'CoupledDiffusionReactionSub'
p49659
sS'name'
p49660
S'type'
p49661
sS'required'
p49662
I00
sS'group_name'
p49663
Nsa(dp49664
S'description'
p49665
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49666
sS'cpp_type'
p49667
S'bool'
p49668
sS'default'
p49669
S'0'
p49670
sS'name'
p49671
S'use_displaced_mesh'
p49672
sS'required'
p49673
I00
sS'group_name'
p49674
S'Advanced'
p49675
sa(dp49676
S'description'
p49677
S'List of coupled primary species in this equilibrium species\n'
p49678
sS'cpp_type'
p49679
S'std::vector<VariableName>'
p49680
sS'default'
p49681
g3
sS'name'
p49682
S'v'
p49683
sS'required'
p49684
I00
sS'group_name'
p49685
Nsa(dp49686
S'description'
p49687
S'The name of the variable that this Kernel operates on\n'
p49688
sS'cpp_type'
p49689
S'NonlinearVariableName'
p49690
sS'default'
p49691
g3
sS'name'
p49692
S'variable'
p49693
sS'required'
p49694
I01
sS'group_name'
p49695
Nsa(dp49696
S'description'
p49697
S'Weight of equilibrium species concentration in the primary species concentration\n'
p49698
sS'cpp_type'
p49699
S'double'
p49700
sS'default'
p49701
S'1'
p49702
sS'name'
p49703
S'weight'
p49704
sS'required'
p49705
I00
sS'group_name'
p49706
NsasS'name'
p49707
S'/Kernels/CoupledDiffusionReactionSub'
p49708
sa(dp49709
S'description'
p49710
g3
sS'subblocks'
p49711
NsS'parameters'
p49712
(lp49713
(dp49714
S'description'
p49715
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49716
sS'cpp_type'
p49717
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49718
sS'default'
p49719
g3
sS'name'
p49720
S'block'
p49721
sS'required'
p49722
I00
sS'group_name'
p49723
Nsa(dp49724
S'description'
p49725
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49726
sS'cpp_type'
p49727
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49728
sS'default'
p49729
g3
sS'name'
p49730
S'control_tags'
p49731
sS'required'
p49732
I00
sS'group_name'
p49733
Nsa(dp49734
S'description'
p49735
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49736
sS'cpp_type'
p49737
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49738
sS'default'
p49739
g3
sS'name'
p49740
S'diag_save_in'
p49741
sS'required'
p49742
I00
sS'group_name'
p49743
S'Advanced'
p49744
sa(dp49745
S'description'
p49746
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49747
sS'cpp_type'
p49748
S'bool'
p49749
sS'default'
p49750
S'1'
p49751
sS'name'
p49752
S'implicit'
p49753
sS'required'
p49754
I00
sS'group_name'
p49755
S'Advanced'
p49756
sa(dp49757
S'description'
p49758
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49759
sS'cpp_type'
p49760
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49761
sS'default'
p49762
g3
sS'name'
p49763
S'save_in'
p49764
sS'required'
p49765
I00
sS'group_name'
p49766
S'Advanced'
p49767
sa(dp49768
S'description'
p49769
S'The seed for the master random number generator\n'
p49770
sS'cpp_type'
p49771
S'unsigned int'
p49772
sS'default'
p49773
S'0'
p49774
sS'name'
p49775
S'seed'
p49776
sS'required'
p49777
I00
sS'group_name'
p49778
S'Advanced'
p49779
sa(dp49780
S'description'
p49781
g3
sS'cpp_type'
p49782
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49783
sS'default'
p49784
S'CoupledForce'
p49785
sS'name'
p49786
S'type'
p49787
sS'required'
p49788
I00
sS'group_name'
p49789
Nsa(dp49790
S'description'
p49791
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49792
sS'cpp_type'
p49793
S'bool'
p49794
sS'default'
p49795
S'0'
p49796
sS'name'
p49797
S'use_displaced_mesh'
p49798
sS'required'
p49799
I00
sS'group_name'
p49800
S'Advanced'
p49801
sa(dp49802
S'description'
p49803
S'The coupled variable which provides the force\n'
p49804
sS'cpp_type'
p49805
S'std::vector<VariableName>'
p49806
sS'default'
p49807
g3
sS'name'
p49808
S'v'
p49809
sS'required'
p49810
I01
sS'group_name'
p49811
Nsa(dp49812
S'description'
p49813
S'The name of the variable that this Kernel operates on\n'
p49814
sS'cpp_type'
p49815
S'NonlinearVariableName'
p49816
sS'default'
p49817
g3
sS'name'
p49818
S'variable'
p49819
sS'required'
p49820
I01
sS'group_name'
p49821
NsasS'name'
p49822
S'/Kernels/CoupledForce'
p49823
sa(dp49824
S'description'
p49825
S'Time derivative Kernel that acts on a coupled variable\n'
p49826
sS'subblocks'
p49827
NsS'parameters'
p49828
(lp49829
(dp49830
S'description'
p49831
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49832
sS'cpp_type'
p49833
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49834
sS'default'
p49835
g3
sS'name'
p49836
S'block'
p49837
sS'required'
p49838
I00
sS'group_name'
p49839
Nsa(dp49840
S'description'
p49841
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49842
sS'cpp_type'
p49843
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49844
sS'default'
p49845
g3
sS'name'
p49846
S'control_tags'
p49847
sS'required'
p49848
I00
sS'group_name'
p49849
Nsa(dp49850
S'description'
p49851
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49852
sS'cpp_type'
p49853
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49854
sS'default'
p49855
g3
sS'name'
p49856
S'diag_save_in'
p49857
sS'required'
p49858
I00
sS'group_name'
p49859
S'Advanced'
p49860
sa(dp49861
S'description'
p49862
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49863
sS'cpp_type'
p49864
S'bool'
p49865
sS'default'
p49866
S'1'
p49867
sS'name'
p49868
S'implicit'
p49869
sS'required'
p49870
I00
sS'group_name'
p49871
S'Advanced'
p49872
sa(dp49873
S'description'
p49874
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49875
sS'cpp_type'
p49876
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49877
sS'default'
p49878
g3
sS'name'
p49879
S'save_in'
p49880
sS'required'
p49881
I00
sS'group_name'
p49882
S'Advanced'
p49883
sa(dp49884
S'description'
p49885
S'The seed for the master random number generator\n'
p49886
sS'cpp_type'
p49887
S'unsigned int'
p49888
sS'default'
p49889
S'0'
p49890
sS'name'
p49891
S'seed'
p49892
sS'required'
p49893
I00
sS'group_name'
p49894
S'Advanced'
p49895
sa(dp49896
S'description'
p49897
g3
sS'cpp_type'
p49898
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p49899
sS'default'
p49900
S'CoupledTimeDerivative'
p49901
sS'name'
p49902
S'type'
p49903
sS'required'
p49904
I00
sS'group_name'
p49905
Nsa(dp49906
S'description'
p49907
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49908
sS'cpp_type'
p49909
S'bool'
p49910
sS'default'
p49911
S'0'
p49912
sS'name'
p49913
S'use_displaced_mesh'
p49914
sS'required'
p49915
I00
sS'group_name'
p49916
S'Advanced'
p49917
sa(dp49918
S'description'
p49919
S'Coupled variable\n'
p49920
sS'cpp_type'
p49921
S'std::vector<VariableName>'
p49922
sS'default'
p49923
g3
sS'name'
p49924
S'v'
p49925
sS'required'
p49926
I01
sS'group_name'
p49927
Nsa(dp49928
S'description'
p49929
S'The name of the variable that this Kernel operates on\n'
p49930
sS'cpp_type'
p49931
S'NonlinearVariableName'
p49932
sS'default'
p49933
g3
sS'name'
p49934
S'variable'
p49935
sS'required'
p49936
I01
sS'group_name'
p49937
NsasS'name'
p49938
S'/Kernels/CoupledTimeDerivative'
p49939
sa(dp49940
S'description'
p49941
S'Darcy flux.  nabla_i (k_ij/mu (nabla_j P - w_j)), where k_ij is the permeability tensor, mu is the fluid viscosity, P is the fluid pressure, and w_j is the fluid weight\n'
p49942
sS'subblocks'
p49943
NsS'parameters'
p49944
(lp49945
(dp49946
S'description'
p49947
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49948
sS'cpp_type'
p49949
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p49950
sS'default'
p49951
g3
sS'name'
p49952
S'block'
p49953
sS'required'
p49954
I00
sS'group_name'
p49955
Nsa(dp49956
S'description'
p49957
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49958
sS'cpp_type'
p49959
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p49960
sS'default'
p49961
g3
sS'name'
p49962
S'control_tags'
p49963
sS'required'
p49964
I00
sS'group_name'
p49965
Nsa(dp49966
S'description'
p49967
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p49968
sS'cpp_type'
p49969
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p49970
sS'default'
p49971
g3
sS'name'
p49972
S'diag_save_in'
p49973
sS'required'
p49974
I00
sS'group_name'
p49975
S'Advanced'
p49976
sa(dp49977
S'description'
p49978
S'Fluid dynamic viscosity (usually measured in Pa.s)\n'
p49979
sS'cpp_type'
p49980
S'double'
p49981
sS'default'
p49982
g3
sS'name'
p49983
S'fluid_viscosity'
p49984
sS'required'
p49985
I01
sS'group_name'
p49986
Nsa(dp49987
S'description'
p49988
S"Fluid weight (gravity*density) as a vector pointing downwards (usually measured in kg.m^-2.s^-2 = Pa/m).  Eg '0 0 -10000'\n"
p49989
sS'cpp_type'
p49990
S'libMesh::VectorValue<double>'
p49991
sS'default'
p49992
g3
sS'name'
p49993
S'fluid_weight'
p49994
sS'required'
p49995
I01
sS'group_name'
p49996
Nsa(dp49997
S'description'
p49998
S'Determines whether this object is calculated using an implicit or explicit form\n'
p49999
sS'cpp_type'
p50000
S'bool'
p50001
sS'default'
p50002
S'1'
p50003
sS'name'
p50004
S'implicit'
p50005
sS'required'
p50006
I00
sS'group_name'
p50007
S'Advanced'
p50008
sa(dp50009
S'description'
p50010
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50011
sS'cpp_type'
p50012
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50013
sS'default'
p50014
g3
sS'name'
p50015
S'save_in'
p50016
sS'required'
p50017
I00
sS'group_name'
p50018
S'Advanced'
p50019
sa(dp50020
S'description'
p50021
S'The seed for the master random number generator\n'
p50022
sS'cpp_type'
p50023
S'unsigned int'
p50024
sS'default'
p50025
S'0'
p50026
sS'name'
p50027
S'seed'
p50028
sS'required'
p50029
I00
sS'group_name'
p50030
S'Advanced'
p50031
sa(dp50032
S'description'
p50033
g3
sS'cpp_type'
p50034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50035
sS'default'
p50036
S'DarcyFlux'
p50037
sS'name'
p50038
S'type'
p50039
sS'required'
p50040
I00
sS'group_name'
p50041
Nsa(dp50042
S'description'
p50043
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50044
sS'cpp_type'
p50045
S'bool'
p50046
sS'default'
p50047
S'0'
p50048
sS'name'
p50049
S'use_displaced_mesh'
p50050
sS'required'
p50051
I00
sS'group_name'
p50052
S'Advanced'
p50053
sa(dp50054
S'description'
p50055
S'The name of the variable that this Kernel operates on\n'
p50056
sS'cpp_type'
p50057
S'NonlinearVariableName'
p50058
sS'default'
p50059
g3
sS'name'
p50060
S'variable'
p50061
sS'required'
p50062
I01
sS'group_name'
p50063
NsasS'name'
p50064
S'/Kernels/DarcyFlux'
p50065
sa(dp50066
S'description'
p50067
S'Mass flow rate from the matrix to the porespace.  Add this to TimeDerivative kernel to get complete DE for the fluid in adsorbed in the matrix\n'
p50068
sS'subblocks'
p50069
NsS'parameters'
p50070
(lp50071
(dp50072
S'description'
p50073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50074
sS'cpp_type'
p50075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50076
sS'default'
p50077
g3
sS'name'
p50078
S'block'
p50079
sS'required'
p50080
I00
sS'group_name'
p50081
Nsa(dp50082
S'description'
p50083
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50084
sS'cpp_type'
p50085
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50086
sS'default'
p50087
g3
sS'name'
p50088
S'control_tags'
p50089
sS'required'
p50090
I00
sS'group_name'
p50091
Nsa(dp50092
S'description'
p50093
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50094
sS'cpp_type'
p50095
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50096
sS'default'
p50097
g3
sS'name'
p50098
S'diag_save_in'
p50099
sS'required'
p50100
I00
sS'group_name'
p50101
S'Advanced'
p50102
sa(dp50103
S'description'
p50104
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50105
sS'cpp_type'
p50106
S'bool'
p50107
sS'default'
p50108
S'1'
p50109
sS'name'
p50110
S'implicit'
p50111
sS'required'
p50112
I00
sS'group_name'
p50113
S'Advanced'
p50114
sa(dp50115
S'description'
p50116
S'Variable representing the porepressure of the fluid adsorbed into the matrix\n'
p50117
sS'cpp_type'
p50118
S'std::vector<VariableName>'
p50119
sS'default'
p50120
g3
sS'name'
p50121
S'pressure_var'
p50122
sS'required'
p50123
I01
sS'group_name'
p50124
Nsa(dp50125
S'description'
p50126
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50127
sS'cpp_type'
p50128
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50129
sS'default'
p50130
g3
sS'name'
p50131
S'save_in'
p50132
sS'required'
p50133
I00
sS'group_name'
p50134
S'Advanced'
p50135
sa(dp50136
S'description'
p50137
S'The seed for the master random number generator\n'
p50138
sS'cpp_type'
p50139
S'unsigned int'
p50140
sS'default'
p50141
S'0'
p50142
sS'name'
p50143
S'seed'
p50144
sS'required'
p50145
I00
sS'group_name'
p50146
S'Advanced'
p50147
sa(dp50148
S'description'
p50149
g3
sS'cpp_type'
p50150
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50151
sS'default'
p50152
S'DesorptionFromMatrix'
p50153
sS'name'
p50154
S'type'
p50155
sS'required'
p50156
I00
sS'group_name'
p50157
Nsa(dp50158
S'description'
p50159
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50160
sS'cpp_type'
p50161
S'bool'
p50162
sS'default'
p50163
S'0'
p50164
sS'name'
p50165
S'use_displaced_mesh'
p50166
sS'required'
p50167
I00
sS'group_name'
p50168
S'Advanced'
p50169
sa(dp50170
S'description'
p50171
S'The name of the variable that this Kernel operates on\n'
p50172
sS'cpp_type'
p50173
S'NonlinearVariableName'
p50174
sS'default'
p50175
g3
sS'name'
p50176
S'variable'
p50177
sS'required'
p50178
I01
sS'group_name'
p50179
NsasS'name'
p50180
S'/Kernels/DesorptionFromMatrix'
p50181
sa(dp50182
S'description'
p50183
S'Mass flow rate to the porespace from the matrix.  Add this to the other kernels for the porepressure variable to form the complete DE\n'
p50184
sS'subblocks'
p50185
NsS'parameters'
p50186
(lp50187
(dp50188
S'description'
p50189
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50190
sS'cpp_type'
p50191
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50192
sS'default'
p50193
g3
sS'name'
p50194
S'block'
p50195
sS'required'
p50196
I00
sS'group_name'
p50197
Nsa(dp50198
S'description'
p50199
S'Variable representing the concentration (kg/m^3) of fluid in the matrix that will be desorped to porespace\n'
p50200
sS'cpp_type'
p50201
S'std::vector<VariableName>'
p50202
sS'default'
p50203
g3
sS'name'
p50204
S'conc_var'
p50205
sS'required'
p50206
I01
sS'group_name'
p50207
Nsa(dp50208
S'description'
p50209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50210
sS'cpp_type'
p50211
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50212
sS'default'
p50213
g3
sS'name'
p50214
S'control_tags'
p50215
sS'required'
p50216
I00
sS'group_name'
p50217
Nsa(dp50218
S'description'
p50219
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50220
sS'cpp_type'
p50221
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50222
sS'default'
p50223
g3
sS'name'
p50224
S'diag_save_in'
p50225
sS'required'
p50226
I00
sS'group_name'
p50227
S'Advanced'
p50228
sa(dp50229
S'description'
p50230
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50231
sS'cpp_type'
p50232
S'bool'
p50233
sS'default'
p50234
S'1'
p50235
sS'name'
p50236
S'implicit'
p50237
sS'required'
p50238
I00
sS'group_name'
p50239
S'Advanced'
p50240
sa(dp50241
S'description'
p50242
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50243
sS'cpp_type'
p50244
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50245
sS'default'
p50246
g3
sS'name'
p50247
S'save_in'
p50248
sS'required'
p50249
I00
sS'group_name'
p50250
S'Advanced'
p50251
sa(dp50252
S'description'
p50253
S'The seed for the master random number generator\n'
p50254
sS'cpp_type'
p50255
S'unsigned int'
p50256
sS'default'
p50257
S'0'
p50258
sS'name'
p50259
S'seed'
p50260
sS'required'
p50261
I00
sS'group_name'
p50262
S'Advanced'
p50263
sa(dp50264
S'description'
p50265
g3
sS'cpp_type'
p50266
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50267
sS'default'
p50268
S'DesorptionToPorespace'
p50269
sS'name'
p50270
S'type'
p50271
sS'required'
p50272
I00
sS'group_name'
p50273
Nsa(dp50274
S'description'
p50275
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50276
sS'cpp_type'
p50277
S'bool'
p50278
sS'default'
p50279
S'0'
p50280
sS'name'
p50281
S'use_displaced_mesh'
p50282
sS'required'
p50283
I00
sS'group_name'
p50284
S'Advanced'
p50285
sa(dp50286
S'description'
p50287
S'The name of the variable that this Kernel operates on\n'
p50288
sS'cpp_type'
p50289
S'NonlinearVariableName'
p50290
sS'default'
p50291
g3
sS'name'
p50292
S'variable'
p50293
sS'required'
p50294
I01
sS'group_name'
p50295
NsasS'name'
p50296
S'/Kernels/DesorptionToPorespace'
p50297
sa(dp50298
S'description'
p50299
g3
sS'subblocks'
p50300
NsS'parameters'
p50301
(lp50302
(dp50303
S'description'
p50304
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50305
sS'cpp_type'
p50306
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50307
sS'default'
p50308
g3
sS'name'
p50309
S'block'
p50310
sS'required'
p50311
I00
sS'group_name'
p50312
Nsa(dp50313
S'description'
p50314
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50315
sS'cpp_type'
p50316
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50317
sS'default'
p50318
g3
sS'name'
p50319
S'control_tags'
p50320
sS'required'
p50321
I00
sS'group_name'
p50322
Nsa(dp50323
S'description'
p50324
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50325
sS'cpp_type'
p50326
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50327
sS'default'
p50328
g3
sS'name'
p50329
S'diag_save_in'
p50330
sS'required'
p50331
I00
sS'group_name'
p50332
S'Advanced'
p50333
sa(dp50334
S'description'
p50335
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50336
sS'cpp_type'
p50337
S'bool'
p50338
sS'default'
p50339
S'1'
p50340
sS'name'
p50341
S'implicit'
p50342
sS'required'
p50343
I00
sS'group_name'
p50344
S'Advanced'
p50345
sa(dp50346
S'description'
p50347
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50348
sS'cpp_type'
p50349
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50350
sS'default'
p50351
g3
sS'name'
p50352
S'save_in'
p50353
sS'required'
p50354
I00
sS'group_name'
p50355
S'Advanced'
p50356
sa(dp50357
S'description'
p50358
S'The seed for the master random number generator\n'
p50359
sS'cpp_type'
p50360
S'unsigned int'
p50361
sS'default'
p50362
S'0'
p50363
sS'name'
p50364
S'seed'
p50365
sS'required'
p50366
I00
sS'group_name'
p50367
S'Advanced'
p50368
sa(dp50369
S'description'
p50370
g3
sS'cpp_type'
p50371
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50372
sS'default'
p50373
S'Diffusion'
p50374
sS'name'
p50375
S'type'
p50376
sS'required'
p50377
I00
sS'group_name'
p50378
Nsa(dp50379
S'description'
p50380
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50381
sS'cpp_type'
p50382
S'bool'
p50383
sS'default'
p50384
S'0'
p50385
sS'name'
p50386
S'use_displaced_mesh'
p50387
sS'required'
p50388
I00
sS'group_name'
p50389
S'Advanced'
p50390
sa(dp50391
S'description'
p50392
S'The name of the variable that this Kernel operates on\n'
p50393
sS'cpp_type'
p50394
S'NonlinearVariableName'
p50395
sS'default'
p50396
g3
sS'name'
p50397
S'variable'
p50398
sS'required'
p50399
I01
sS'group_name'
p50400
NsasS'name'
p50401
S'/Kernels/Diffusion'
p50402
sa(dp50403
S'description'
p50404
S'Residual due to stress related Rayleigh damping and HHT time integration terms \n'
p50405
sS'subblocks'
p50406
NsS'parameters'
p50407
(lp50408
(dp50409
S'description'
p50410
S'alpha parameter for HHT time integration\n'
p50411
sS'cpp_type'
p50412
S'double'
p50413
sS'default'
p50414
S'0'
p50415
sS'name'
p50416
S'alpha'
p50417
sS'required'
p50418
I00
sS'group_name'
p50419
Nsa(dp50420
S'description'
p50421
S'Material property base name\n'
p50422
sS'cpp_type'
p50423
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50424
sS'default'
p50425
g3
sS'name'
p50426
S'base_name'
p50427
sS'required'
p50428
I00
sS'group_name'
p50429
Nsa(dp50430
S'description'
p50431
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50432
sS'cpp_type'
p50433
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50434
sS'default'
p50435
g3
sS'name'
p50436
S'block'
p50437
sS'required'
p50438
I00
sS'group_name'
p50439
Nsa(dp50440
S'description'
p50441
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p50442
sS'cpp_type'
p50443
S'unsigned int'
p50444
sS'default'
p50445
g3
sS'name'
p50446
S'component'
p50447
sS'required'
p50448
I01
sS'group_name'
p50449
Nsa(dp50450
S'description'
p50451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50452
sS'cpp_type'
p50453
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50454
sS'default'
p50455
g3
sS'name'
p50456
S'control_tags'
p50457
sS'required'
p50458
I00
sS'group_name'
p50459
Nsa(dp50460
S'description'
p50461
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50462
sS'cpp_type'
p50463
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50464
sS'default'
p50465
g3
sS'name'
p50466
S'diag_save_in'
p50467
sS'required'
p50468
I00
sS'group_name'
p50469
S'Advanced'
p50470
sa(dp50471
S'description'
p50472
S'Depricated: the x displacement\n'
p50473
sS'cpp_type'
p50474
S'std::vector<VariableName>'
p50475
sS'default'
p50476
g3
sS'name'
p50477
S'disp_x'
p50478
sS'required'
p50479
I00
sS'group_name'
p50480
Nsa(dp50481
S'description'
p50482
S'Depricated: the y displacement\n'
p50483
sS'cpp_type'
p50484
S'std::vector<VariableName>'
p50485
sS'default'
p50486
g3
sS'name'
p50487
S'disp_y'
p50488
sS'required'
p50489
I00
sS'group_name'
p50490
Nsa(dp50491
S'description'
p50492
S'Depricated: the z displacement\n'
p50493
sS'cpp_type'
p50494
S'std::vector<VariableName>'
p50495
sS'default'
p50496
g3
sS'name'
p50497
S'disp_z'
p50498
sS'required'
p50499
I00
sS'group_name'
p50500
Nsa(dp50501
S'description'
p50502
S'The string of displacements suitable for the problem statement\n'
p50503
sS'cpp_type'
p50504
S'std::vector<VariableName>'
p50505
sS'default'
p50506
g3
sS'name'
p50507
S'displacements'
p50508
sS'required'
p50509
I00
sS'group_name'
p50510
Nsa(dp50511
S'description'
p50512
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50513
sS'cpp_type'
p50514
S'bool'
p50515
sS'default'
p50516
S'1'
p50517
sS'name'
p50518
S'implicit'
p50519
sS'required'
p50520
I00
sS'group_name'
p50521
S'Advanced'
p50522
sa(dp50523
S'description'
p50524
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50525
sS'cpp_type'
p50526
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50527
sS'default'
p50528
g3
sS'name'
p50529
S'save_in'
p50530
sS'required'
p50531
I00
sS'group_name'
p50532
S'Advanced'
p50533
sa(dp50534
S'description'
p50535
S'The seed for the master random number generator\n'
p50536
sS'cpp_type'
p50537
S'unsigned int'
p50538
sS'default'
p50539
S'0'
p50540
sS'name'
p50541
S'seed'
p50542
sS'required'
p50543
I00
sS'group_name'
p50544
S'Advanced'
p50545
sa(dp50546
S'description'
p50547
S'The temperature\n'
p50548
sS'cpp_type'
p50549
S'std::vector<VariableName>'
p50550
sS'default'
p50551
g3
sS'name'
p50552
S'temp'
p50553
sS'required'
p50554
I00
sS'group_name'
p50555
Nsa(dp50556
S'description'
p50557
g3
sS'cpp_type'
p50558
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50559
sS'default'
p50560
S'DynamicStressDivergenceTensors'
p50561
sS'name'
p50562
S'type'
p50563
sS'required'
p50564
I00
sS'group_name'
p50565
Nsa(dp50566
S'description'
p50567
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50568
sS'cpp_type'
p50569
S'bool'
p50570
sS'default'
p50571
S'0'
p50572
sS'name'
p50573
S'use_displaced_mesh'
p50574
sS'required'
p50575
I00
sS'group_name'
p50576
S'Advanced'
p50577
sa(dp50578
S'description'
p50579
S'The name of the variable that this Kernel operates on\n'
p50580
sS'cpp_type'
p50581
S'NonlinearVariableName'
p50582
sS'default'
p50583
g3
sS'name'
p50584
S'variable'
p50585
sS'required'
p50586
I01
sS'group_name'
p50587
Nsa(dp50588
S'description'
p50589
S'zeta parameter for the Rayleigh damping\n'
p50590
sS'cpp_type'
p50591
S'double'
p50592
sS'default'
p50593
S'0'
p50594
sS'name'
p50595
S'zeta'
p50596
sS'required'
p50597
I00
sS'group_name'
p50598
NsasS'name'
p50599
S'/Kernels/DynamicStressDivergenceTensors'
p50600
sa(dp50601
S'description'
p50602
g3
sS'subblocks'
p50603
NsS'parameters'
p50604
(lp50605
(dp50606
S'description'
p50607
S'alpha parameter for HHT time integration\n'
p50608
sS'cpp_type'
p50609
S'double'
p50610
sS'default'
p50611
S'0'
p50612
sS'name'
p50613
S'alpha'
p50614
sS'required'
p50615
I00
sS'group_name'
p50616
Nsa(dp50617
S'description'
p50618
S'Material property base name\n'
p50619
sS'cpp_type'
p50620
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50621
sS'default'
p50622
g3
sS'name'
p50623
S'base_name'
p50624
sS'required'
p50625
I00
sS'group_name'
p50626
Nsa(dp50627
S'description'
p50628
S'The x displacement\n'
p50629
sS'cpp_type'
p50630
S'NonlinearVariableName'
p50631
sS'default'
p50632
g3
sS'name'
p50633
S'disp_x'
p50634
sS'required'
p50635
I00
sS'group_name'
p50636
Nsa(dp50637
S'description'
p50638
S'The y displacement\n'
p50639
sS'cpp_type'
p50640
S'NonlinearVariableName'
p50641
sS'default'
p50642
g3
sS'name'
p50643
S'disp_y'
p50644
sS'required'
p50645
I00
sS'group_name'
p50646
Nsa(dp50647
S'description'
p50648
S'The z displacement\n'
p50649
sS'cpp_type'
p50650
S'NonlinearVariableName'
p50651
sS'default'
p50652
g3
sS'name'
p50653
S'disp_z'
p50654
sS'required'
p50655
I00
sS'group_name'
p50656
Nsa(dp50657
S'description'
p50658
S'The nonlinear displacement variables for the problem\n'
p50659
sS'cpp_type'
p50660
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p50661
sS'default'
p50662
g3
sS'name'
p50663
S'displacements'
p50664
sS'required'
p50665
I00
sS'group_name'
p50666
Nsa(dp50667
S'description'
p50668
S'Auxiliary variables to save the x displacement residuals.\n'
p50669
sS'cpp_type'
p50670
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50671
sS'default'
p50672
g3
sS'name'
p50673
S'save_in_disp_x'
p50674
sS'required'
p50675
I00
sS'group_name'
p50676
Nsa(dp50677
S'description'
p50678
S'Auxiliary variables to save the y displacement residuals.\n'
p50679
sS'cpp_type'
p50680
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50681
sS'default'
p50682
g3
sS'name'
p50683
S'save_in_disp_y'
p50684
sS'required'
p50685
I00
sS'group_name'
p50686
Nsa(dp50687
S'description'
p50688
S'Auxiliary variables to save the z displacement residuals.\n'
p50689
sS'cpp_type'
p50690
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50691
sS'default'
p50692
g3
sS'name'
p50693
S'save_in_disp_z'
p50694
sS'required'
p50695
I00
sS'group_name'
p50696
Nsa(dp50697
S'description'
p50698
S'The temperature\n'
p50699
sS'cpp_type'
p50700
S'NonlinearVariableName'
p50701
sS'default'
p50702
g3
sS'name'
p50703
S'temp'
p50704
sS'required'
p50705
I00
sS'group_name'
p50706
Nsa(dp50707
S'description'
p50708
S'Whether to use displaced mesh in the kernels\n'
p50709
sS'cpp_type'
p50710
S'bool'
p50711
sS'default'
p50712
S'0'
p50713
sS'name'
p50714
S'use_displaced_mesh'
p50715
sS'required'
p50716
I00
sS'group_name'
p50717
Nsa(dp50718
S'description'
p50719
S'zeta parameter for the Rayleigh damping\n'
p50720
sS'cpp_type'
p50721
S'double'
p50722
sS'default'
p50723
S'0'
p50724
sS'name'
p50725
S'zeta'
p50726
sS'required'
p50727
I00
sS'group_name'
p50728
NsasS'name'
p50729
S'/Kernels/DynamicTensorMechanics'
p50730
sa(dp50731
S'description'
p50732
g3
sS'subblocks'
p50733
NsS'parameters'
p50734
(lp50735
(dp50736
S'description'
p50737
S'Aplitude of the bell curve\n'
p50738
sS'cpp_type'
p50739
S'double'
p50740
sS'default'
p50741
S'1'
p50742
sS'name'
p50743
S'amplitude'
p50744
sS'required'
p50745
I00
sS'group_name'
p50746
Nsa(dp50747
S'description'
p50748
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50749
sS'cpp_type'
p50750
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50751
sS'default'
p50752
g3
sS'name'
p50753
S'block'
p50754
sS'required'
p50755
I00
sS'group_name'
p50756
Nsa(dp50757
S'description'
p50758
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50759
sS'cpp_type'
p50760
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50761
sS'default'
p50762
g3
sS'name'
p50763
S'control_tags'
p50764
sS'required'
p50765
I00
sS'group_name'
p50766
Nsa(dp50767
S'description'
p50768
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50769
sS'cpp_type'
p50770
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50771
sS'default'
p50772
g3
sS'name'
p50773
S'diag_save_in'
p50774
sS'required'
p50775
I00
sS'group_name'
p50776
S'Advanced'
p50777
sa(dp50778
S'description'
p50779
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50780
sS'cpp_type'
p50781
S'bool'
p50782
sS'default'
p50783
S'1'
p50784
sS'name'
p50785
S'implicit'
p50786
sS'required'
p50787
I00
sS'group_name'
p50788
S'Advanced'
p50789
sa(dp50790
S'description'
p50791
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50792
sS'cpp_type'
p50793
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50794
sS'default'
p50795
g3
sS'name'
p50796
S'save_in'
p50797
sS'required'
p50798
I00
sS'group_name'
p50799
S'Advanced'
p50800
sa(dp50801
S'description'
p50802
S'The seed for the master random number generator\n'
p50803
sS'cpp_type'
p50804
S'unsigned int'
p50805
sS'default'
p50806
S'0'
p50807
sS'name'
p50808
S'seed'
p50809
sS'required'
p50810
I00
sS'group_name'
p50811
S'Advanced'
p50812
sa(dp50813
S'description'
p50814
g3
sS'cpp_type'
p50815
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50816
sS'default'
p50817
S'GaussContForcing'
p50818
sS'name'
p50819
S'type'
p50820
sS'required'
p50821
I00
sS'group_name'
p50822
Nsa(dp50823
S'description'
p50824
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50825
sS'cpp_type'
p50826
S'bool'
p50827
sS'default'
p50828
S'0'
p50829
sS'name'
p50830
S'use_displaced_mesh'
p50831
sS'required'
p50832
I00
sS'group_name'
p50833
S'Advanced'
p50834
sa(dp50835
S'description'
p50836
S'The name of the variable that this Kernel operates on\n'
p50837
sS'cpp_type'
p50838
S'NonlinearVariableName'
p50839
sS'default'
p50840
g3
sS'name'
p50841
S'variable'
p50842
sS'required'
p50843
I01
sS'group_name'
p50844
Nsa(dp50845
S'description'
p50846
S'Center of the hump in the X direction\n'
p50847
sS'cpp_type'
p50848
S'double'
p50849
sS'default'
p50850
S'4'
p50851
sS'name'
p50852
S'x_center'
p50853
sS'required'
p50854
I00
sS'group_name'
p50855
Nsa(dp50856
S'description'
p50857
S'Spread of the curve in the x direction (sigma_x)\n'
p50858
sS'cpp_type'
p50859
S'double'
p50860
sS'default'
p50861
S'1'
p50862
sS'name'
p50863
S'x_spread'
p50864
sS'required'
p50865
I00
sS'group_name'
p50866
Nsa(dp50867
S'description'
p50868
S'Center of the hump in the Y direction\n'
p50869
sS'cpp_type'
p50870
S'double'
p50871
sS'default'
p50872
S'6'
p50873
sS'name'
p50874
S'y_center'
p50875
sS'required'
p50876
I00
sS'group_name'
p50877
Nsa(dp50878
S'description'
p50879
S'Spread of the curve in the y direction (sigma_y)\n'
p50880
sS'cpp_type'
p50881
S'double'
p50882
sS'default'
p50883
S'1'
p50884
sS'name'
p50885
S'y_spread'
p50886
sS'required'
p50887
I00
sS'group_name'
p50888
Nsa(dp50889
S'description'
p50890
S'Center of the hump in the Z direction\n'
p50891
sS'cpp_type'
p50892
S'double'
p50893
sS'default'
p50894
S'0'
p50895
sS'name'
p50896
S'z_center'
p50897
sS'required'
p50898
I00
sS'group_name'
p50899
Nsa(dp50900
S'description'
p50901
S'Spread of the curve in the z direction (sigma_z)\n'
p50902
sS'cpp_type'
p50903
S'double'
p50904
sS'default'
p50905
S'1'
p50906
sS'name'
p50907
S'z_spread'
p50908
sS'required'
p50909
I00
sS'group_name'
p50910
NsasS'name'
p50911
S'/Kernels/GaussContForcing'
p50912
sa(dp50913
S'description'
p50914
S'Set the kernel variable to a specified component of the gradient of a coupled variable.\n'
p50915
sS'subblocks'
p50916
NsS'parameters'
p50917
(lp50918
(dp50919
S'description'
p50920
S'The list of block ids (SubdomainID) that this object will be applied\n'
p50921
sS'cpp_type'
p50922
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50923
sS'default'
p50924
g3
sS'name'
p50925
S'block'
p50926
sS'required'
p50927
I00
sS'group_name'
p50928
Nsa(dp50929
S'description'
p50930
S'Component of the gradient of the coupled variable v\n'
p50931
sS'cpp_type'
p50932
S'unsigned int'
p50933
sS'default'
p50934
g3
sS'name'
p50935
S'component'
p50936
sS'required'
p50937
I01
sS'group_name'
p50938
Nsa(dp50939
S'description'
p50940
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50941
sS'cpp_type'
p50942
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p50943
sS'default'
p50944
g3
sS'name'
p50945
S'control_tags'
p50946
sS'required'
p50947
I00
sS'group_name'
p50948
Nsa(dp50949
S'description'
p50950
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50951
sS'cpp_type'
p50952
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50953
sS'default'
p50954
g3
sS'name'
p50955
S'diag_save_in'
p50956
sS'required'
p50957
I00
sS'group_name'
p50958
S'Advanced'
p50959
sa(dp50960
S'description'
p50961
S'Determines whether this object is calculated using an implicit or explicit form\n'
p50962
sS'cpp_type'
p50963
S'bool'
p50964
sS'default'
p50965
S'1'
p50966
sS'name'
p50967
S'implicit'
p50968
sS'required'
p50969
I00
sS'group_name'
p50970
S'Advanced'
p50971
sa(dp50972
S'description'
p50973
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p50974
sS'cpp_type'
p50975
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p50976
sS'default'
p50977
g3
sS'name'
p50978
S'save_in'
p50979
sS'required'
p50980
I00
sS'group_name'
p50981
S'Advanced'
p50982
sa(dp50983
S'description'
p50984
S'The seed for the master random number generator\n'
p50985
sS'cpp_type'
p50986
S'unsigned int'
p50987
sS'default'
p50988
S'0'
p50989
sS'name'
p50990
S'seed'
p50991
sS'required'
p50992
I00
sS'group_name'
p50993
S'Advanced'
p50994
sa(dp50995
S'description'
p50996
g3
sS'cpp_type'
p50997
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p50998
sS'default'
p50999
S'GradientComponent'
p51000
sS'name'
p51001
S'type'
p51002
sS'required'
p51003
I00
sS'group_name'
p51004
Nsa(dp51005
S'description'
p51006
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51007
sS'cpp_type'
p51008
S'bool'
p51009
sS'default'
p51010
S'0'
p51011
sS'name'
p51012
S'use_displaced_mesh'
p51013
sS'required'
p51014
I00
sS'group_name'
p51015
S'Advanced'
p51016
sa(dp51017
S'description'
p51018
S'Coupled variable to match gradient component of\n'
p51019
sS'cpp_type'
p51020
S'std::vector<VariableName>'
p51021
sS'default'
p51022
g3
sS'name'
p51023
S'v'
p51024
sS'required'
p51025
I01
sS'group_name'
p51026
Nsa(dp51027
S'description'
p51028
S'The name of the variable that this Kernel operates on\n'
p51029
sS'cpp_type'
p51030
S'NonlinearVariableName'
p51031
sS'default'
p51032
g3
sS'name'
p51033
S'variable'
p51034
sS'required'
p51035
I01
sS'group_name'
p51036
NsasS'name'
p51037
S'/Kernels/GradientComponent'
p51038
sa(dp51039
S'description'
p51040
S'Apply gravity. Value is in units of acceleration.\n'
p51041
sS'subblocks'
p51042
NsS'parameters'
p51043
(lp51044
(dp51045
S'description'
p51046
S'alpha parameter required for HHT time integration scheme\n'
p51047
sS'cpp_type'
p51048
S'double'
p51049
sS'default'
p51050
S'0'
p51051
sS'name'
p51052
S'alpha'
p51053
sS'required'
p51054
I00
sS'group_name'
p51055
Nsa(dp51056
S'description'
p51057
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51058
sS'cpp_type'
p51059
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51060
sS'default'
p51061
g3
sS'name'
p51062
S'block'
p51063
sS'required'
p51064
I00
sS'group_name'
p51065
Nsa(dp51066
S'description'
p51067
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51068
sS'cpp_type'
p51069
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51070
sS'default'
p51071
g3
sS'name'
p51072
S'control_tags'
p51073
sS'required'
p51074
I00
sS'group_name'
p51075
Nsa(dp51076
S'description'
p51077
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51078
sS'cpp_type'
p51079
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51080
sS'default'
p51081
g3
sS'name'
p51082
S'diag_save_in'
p51083
sS'required'
p51084
I00
sS'group_name'
p51085
S'Advanced'
p51086
sa(dp51087
S'description'
p51088
S'A function that describes the gravitational force\n'
p51089
sS'cpp_type'
p51090
S'FunctionName'
p51091
sS'default'
p51092
S'1'
p51093
sS'name'
p51094
S'function'
p51095
sS'required'
p51096
I00
sS'group_name'
p51097
Nsa(dp51098
S'description'
p51099
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51100
sS'cpp_type'
p51101
S'bool'
p51102
sS'default'
p51103
S'1'
p51104
sS'name'
p51105
S'implicit'
p51106
sS'required'
p51107
I00
sS'group_name'
p51108
S'Advanced'
p51109
sa(dp51110
S'description'
p51111
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51112
sS'cpp_type'
p51113
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51114
sS'default'
p51115
g3
sS'name'
p51116
S'save_in'
p51117
sS'required'
p51118
I00
sS'group_name'
p51119
S'Advanced'
p51120
sa(dp51121
S'description'
p51122
S'The seed for the master random number generator\n'
p51123
sS'cpp_type'
p51124
S'unsigned int'
p51125
sS'default'
p51126
S'0'
p51127
sS'name'
p51128
S'seed'
p51129
sS'required'
p51130
I00
sS'group_name'
p51131
S'Advanced'
p51132
sa(dp51133
S'description'
p51134
g3
sS'cpp_type'
p51135
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51136
sS'default'
p51137
S'Gravity'
p51138
sS'name'
p51139
S'type'
p51140
sS'required'
p51141
I00
sS'group_name'
p51142
Nsa(dp51143
S'description'
p51144
S'Displaced mesh defaults to true\n'
p51145
sS'cpp_type'
p51146
S'bool'
p51147
sS'default'
p51148
S'1'
p51149
sS'name'
p51150
S'use_displaced_mesh'
p51151
sS'required'
p51152
I00
sS'group_name'
p51153
S'Advanced'
p51154
sa(dp51155
S'description'
p51156
g3
sS'cpp_type'
p51157
S'double'
p51158
sS'default'
p51159
S'0'
p51160
sS'name'
p51161
S'value'
p51162
sS'required'
p51163
I00
sS'group_name'
p51164
Nsa(dp51165
S'description'
p51166
S'The name of the variable that this Kernel operates on\n'
p51167
sS'cpp_type'
p51168
S'NonlinearVariableName'
p51169
sS'default'
p51170
g3
sS'name'
p51171
S'variable'
p51172
sS'required'
p51173
I01
sS'group_name'
p51174
NsasS'name'
p51175
S'/Kernels/Gravity'
p51176
sa(dp51177
S'description'
p51178
g3
sS'subblocks'
p51179
NsS'parameters'
p51180
(lp51181
(dp51182
S'description'
p51183
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51184
sS'cpp_type'
p51185
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51186
sS'default'
p51187
g3
sS'name'
p51188
S'block'
p51189
sS'required'
p51190
I00
sS'group_name'
p51191
Nsa(dp51192
S'description'
p51193
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51194
sS'cpp_type'
p51195
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51196
sS'default'
p51197
g3
sS'name'
p51198
S'control_tags'
p51199
sS'required'
p51200
I00
sS'group_name'
p51201
Nsa(dp51202
S'description'
p51203
S'The name of the coupled variable, if one is used in the kernel\n'
p51204
sS'cpp_type'
p51205
S'std::vector<VariableName>'
p51206
sS'default'
p51207
g3
sS'name'
p51208
S'coupled_var'
p51209
sS'required'
p51210
I00
sS'group_name'
p51211
Nsa(dp51212
S'description'
p51213
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51214
sS'cpp_type'
p51215
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51216
sS'default'
p51217
g3
sS'name'
p51218
S'diag_save_in'
p51219
sS'required'
p51220
I00
sS'group_name'
p51221
S'Advanced'
p51222
sa(dp51223
S'description'
p51224
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51225
sS'cpp_type'
p51226
S'bool'
p51227
sS'default'
p51228
S'1'
p51229
sS'name'
p51230
S'implicit'
p51231
sS'required'
p51232
I00
sS'group_name'
p51233
S'Advanced'
p51234
sa(dp51235
S'description'
p51236
S'If the kernel is positive, this is true, if negative, it is false\n'
p51237
sS'cpp_type'
p51238
S'bool'
p51239
sS'default'
p51240
g3
sS'name'
p51241
S'positive'
p51242
sS'required'
p51243
I01
sS'group_name'
p51244
Nsa(dp51245
S'description'
p51246
S'Name of material property to be used in the kernel\n'
p51247
sS'cpp_type'
p51248
S'MaterialPropertyName'
p51249
sS'default'
p51250
g3
sS'name'
p51251
S'prop_name'
p51252
sS'required'
p51253
I01
sS'group_name'
p51254
Nsa(dp51255
S'description'
p51256
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51257
sS'cpp_type'
p51258
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51259
sS'default'
p51260
g3
sS'name'
p51261
S'save_in'
p51262
sS'required'
p51263
I00
sS'group_name'
p51264
S'Advanced'
p51265
sa(dp51266
S'description'
p51267
S'The seed for the master random number generator\n'
p51268
sS'cpp_type'
p51269
S'unsigned int'
p51270
sS'default'
p51271
S'0'
p51272
sS'name'
p51273
S'seed'
p51274
sS'required'
p51275
I00
sS'group_name'
p51276
S'Advanced'
p51277
sa(dp51278
S'description'
p51279
g3
sS'cpp_type'
p51280
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51281
sS'default'
p51282
S'HHPFCRFF'
p51283
sS'name'
p51284
S'type'
p51285
sS'required'
p51286
I00
sS'group_name'
p51287
Nsa(dp51288
S'description'
p51289
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51290
sS'cpp_type'
p51291
S'bool'
p51292
sS'default'
p51293
S'0'
p51294
sS'name'
p51295
S'use_displaced_mesh'
p51296
sS'required'
p51297
I00
sS'group_name'
p51298
S'Advanced'
p51299
sa(dp51300
S'description'
p51301
S'The name of the variable that this Kernel operates on\n'
p51302
sS'cpp_type'
p51303
S'NonlinearVariableName'
p51304
sS'default'
p51305
g3
sS'name'
p51306
S'variable'
p51307
sS'required'
p51308
I01
sS'group_name'
p51309
NsasS'name'
p51310
S'/Kernels/HHPFCRFF'
p51311
sa(dp51312
S'description'
p51313
g3
sS'subblocks'
p51314
NsS'parameters'
p51315
(lp51316
(dp51317
S'description'
p51318
S'Base name for the complex L variables\n'
p51319
sS'cpp_type'
p51320
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51321
sS'default'
p51322
g3
sS'name'
p51323
S'L_name_base'
p51324
sS'required'
p51325
I01
sS'group_name'
p51326
Nsa(dp51327
S'name'
p51328
S'log_approach'
p51329
sS'cpp_type'
p51330
S'MooseEnum'
p51331
sS'default'
p51332
g3
sS'description'
p51333
S'Which approach will be used to handle the natural log\n'
p51334
sS'required'
p51335
I01
sS'options'
p51336
S'tolerance cancelation expansion'
p51337
sS'group_name'
p51338
Nsa(dp51339
S'description'
p51340
S'The mobility used for n in this model\n'
p51341
sS'cpp_type'
p51342
S'MaterialPropertyName'
p51343
sS'default'
p51344
S'M'
p51345
sS'name'
p51346
S'mob_name'
p51347
sS'required'
p51348
I00
sS'group_name'
p51349
Nsa(dp51350
S'description'
p51351
S'Number of terms used in the Taylor expansion of the natural log term\n'
p51352
sS'cpp_type'
p51353
S'double'
p51354
sS'default'
p51355
S'4'
p51356
sS'name'
p51357
S'n_exp_terms'
p51358
sS'required'
p51359
I00
sS'group_name'
p51360
Nsa(dp51361
S'description'
p51362
S'Variable name used for the n variable\n'
p51363
sS'cpp_type'
p51364
S'VariableName'
p51365
sS'default'
p51366
g3
sS'name'
p51367
S'n_name'
p51368
sS'required'
p51369
I01
sS'group_name'
p51370
Nsa(dp51371
S'description'
p51372
S'specifies the number of complex L variables will be solved for\n'
p51373
sS'cpp_type'
p51374
S'unsigned int'
p51375
sS'default'
p51376
g3
sS'name'
p51377
S'num_L'
p51378
sS'required'
p51379
I01
sS'group_name'
p51380
Nsa(dp51381
S'description'
p51382
S'Tolerance used when the tolerance approach is chosen\n'
p51383
sS'cpp_type'
p51384
S'double'
p51385
sS'default'
p51386
S'1e-09'
p51387
sS'name'
p51388
S'tol'
p51389
sS'required'
p51390
I00
sS'group_name'
p51391
Nsa(dp51392
S'description'
p51393
S'Whether to use displaced mesh in the kernels\n'
p51394
sS'cpp_type'
p51395
S'bool'
p51396
sS'default'
p51397
S'0'
p51398
sS'name'
p51399
S'use_displaced_mesh'
p51400
sS'required'
p51401
I00
sS'group_name'
p51402
NsasS'name'
p51403
S'/Kernels/HHPFCRFFSplitKernel'
p51404
sa(dp51405
S'description'
p51406
g3
sS'subblocks'
p51407
NsS'parameters'
p51408
(lp51409
(dp51410
S'description'
p51411
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51412
sS'cpp_type'
p51413
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51414
sS'default'
p51415
g3
sS'name'
p51416
S'block'
p51417
sS'required'
p51418
I00
sS'group_name'
p51419
Nsa(dp51420
S'description'
p51421
S'component\n'
p51422
sS'cpp_type'
p51423
S'unsigned int'
p51424
sS'default'
p51425
g3
sS'name'
p51426
S'component'
p51427
sS'required'
p51428
I01
sS'group_name'
p51429
Nsa(dp51430
S'description'
p51431
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51432
sS'cpp_type'
p51433
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51434
sS'default'
p51435
g3
sS'name'
p51436
S'control_tags'
p51437
sS'required'
p51438
I00
sS'group_name'
p51439
Nsa(dp51440
S'description'
p51441
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51442
sS'cpp_type'
p51443
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51444
sS'default'
p51445
g3
sS'name'
p51446
S'diag_save_in'
p51447
sS'required'
p51448
I00
sS'group_name'
p51449
S'Advanced'
p51450
sa(dp51451
S'description'
p51452
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51453
sS'cpp_type'
p51454
S'bool'
p51455
sS'default'
p51456
S'1'
p51457
sS'name'
p51458
S'implicit'
p51459
sS'required'
p51460
I00
sS'group_name'
p51461
S'Advanced'
p51462
sa(dp51463
S'description'
p51464
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51465
sS'cpp_type'
p51466
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51467
sS'default'
p51468
g3
sS'name'
p51469
S'save_in'
p51470
sS'required'
p51471
I00
sS'group_name'
p51472
S'Advanced'
p51473
sa(dp51474
S'description'
p51475
S'The seed for the master random number generator\n'
p51476
sS'cpp_type'
p51477
S'unsigned int'
p51478
sS'default'
p51479
S'0'
p51480
sS'name'
p51481
S'seed'
p51482
sS'required'
p51483
I00
sS'group_name'
p51484
S'Advanced'
p51485
sa(dp51486
S'description'
p51487
g3
sS'cpp_type'
p51488
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51489
sS'default'
p51490
S'HeatCondHomogenizationKernel'
p51491
sS'name'
p51492
S'type'
p51493
sS'required'
p51494
I00
sS'group_name'
p51495
Nsa(dp51496
S'description'
p51497
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51498
sS'cpp_type'
p51499
S'bool'
p51500
sS'default'
p51501
S'0'
p51502
sS'name'
p51503
S'use_displaced_mesh'
p51504
sS'required'
p51505
I00
sS'group_name'
p51506
S'Advanced'
p51507
sa(dp51508
S'description'
p51509
S'The name of the variable that this Kernel operates on\n'
p51510
sS'cpp_type'
p51511
S'NonlinearVariableName'
p51512
sS'default'
p51513
g3
sS'name'
p51514
S'variable'
p51515
sS'required'
p51516
I01
sS'group_name'
p51517
NsasS'name'
p51518
S'/Kernels/HeatCondHomogenizationKernel'
p51519
sa(dp51520
S'description'
p51521
g3
sS'subblocks'
p51522
NsS'parameters'
p51523
(lp51524
(dp51525
S'description'
p51526
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51527
sS'cpp_type'
p51528
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51529
sS'default'
p51530
g3
sS'name'
p51531
S'block'
p51532
sS'required'
p51533
I00
sS'group_name'
p51534
Nsa(dp51535
S'description'
p51536
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51537
sS'cpp_type'
p51538
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51539
sS'default'
p51540
g3
sS'name'
p51541
S'control_tags'
p51542
sS'required'
p51543
I00
sS'group_name'
p51544
Nsa(dp51545
S'description'
p51546
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51547
sS'cpp_type'
p51548
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51549
sS'default'
p51550
g3
sS'name'
p51551
S'diag_save_in'
p51552
sS'required'
p51553
I00
sS'group_name'
p51554
S'Advanced'
p51555
sa(dp51556
S'description'
p51557
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51558
sS'cpp_type'
p51559
S'bool'
p51560
sS'default'
p51561
S'1'
p51562
sS'name'
p51563
S'implicit'
p51564
sS'required'
p51565
I00
sS'group_name'
p51566
S'Advanced'
p51567
sa(dp51568
S'description'
p51569
S'True for mass matrix lumping, false otherwise\n'
p51570
sS'cpp_type'
p51571
S'bool'
p51572
sS'default'
p51573
S'0'
p51574
sS'name'
p51575
S'lumping'
p51576
sS'required'
p51577
I00
sS'group_name'
p51578
Nsa(dp51579
S'description'
p51580
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51581
sS'cpp_type'
p51582
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51583
sS'default'
p51584
g3
sS'name'
p51585
S'save_in'
p51586
sS'required'
p51587
I00
sS'group_name'
p51588
S'Advanced'
p51589
sa(dp51590
S'description'
p51591
S'The seed for the master random number generator\n'
p51592
sS'cpp_type'
p51593
S'unsigned int'
p51594
sS'default'
p51595
S'0'
p51596
sS'name'
p51597
S'seed'
p51598
sS'required'
p51599
I00
sS'group_name'
p51600
S'Advanced'
p51601
sa(dp51602
S'description'
p51603
g3
sS'cpp_type'
p51604
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51605
sS'default'
p51606
S'HeatCondTimeDerivative'
p51607
sS'name'
p51608
S'type'
p51609
sS'required'
p51610
I00
sS'group_name'
p51611
Nsa(dp51612
S'description'
p51613
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51614
sS'cpp_type'
p51615
S'bool'
p51616
sS'default'
p51617
S'0'
p51618
sS'name'
p51619
S'use_displaced_mesh'
p51620
sS'required'
p51621
I00
sS'group_name'
p51622
S'Advanced'
p51623
sa(dp51624
S'description'
p51625
S'The name of the variable that this Kernel operates on\n'
p51626
sS'cpp_type'
p51627
S'NonlinearVariableName'
p51628
sS'default'
p51629
g3
sS'name'
p51630
S'variable'
p51631
sS'required'
p51632
I01
sS'group_name'
p51633
NsasS'name'
p51634
S'/Kernels/HeatCondTimeDerivative'
p51635
sa(dp51636
S'description'
p51637
S'Compute thermal conductivity\n'
p51638
sS'subblocks'
p51639
NsS'parameters'
p51640
(lp51641
(dp51642
S'description'
p51643
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51644
sS'cpp_type'
p51645
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51646
sS'default'
p51647
g3
sS'name'
p51648
S'block'
p51649
sS'required'
p51650
I00
sS'group_name'
p51651
Nsa(dp51652
S'description'
p51653
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51654
sS'cpp_type'
p51655
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51656
sS'default'
p51657
g3
sS'name'
p51658
S'control_tags'
p51659
sS'required'
p51660
I00
sS'group_name'
p51661
Nsa(dp51662
S'description'
p51663
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51664
sS'cpp_type'
p51665
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51666
sS'default'
p51667
g3
sS'name'
p51668
S'diag_save_in'
p51669
sS'required'
p51670
I00
sS'group_name'
p51671
S'Advanced'
p51672
sa(dp51673
S'description'
p51674
S'Property name of the derivative of the diffusivity with respect to the variable (Default: thermal_conductivity_dT)\n'
p51675
sS'cpp_type'
p51676
S'MaterialPropertyName'
p51677
sS'default'
p51678
S'thermal_conductivity_dT'
p51679
sS'name'
p51680
S'diffusion_coefficient_dT_name'
p51681
sS'required'
p51682
I00
sS'group_name'
p51683
Nsa(dp51684
S'description'
p51685
S'Property name of the diffusivity (Default: thermal_conductivity)\n'
p51686
sS'cpp_type'
p51687
S'MaterialPropertyName'
p51688
sS'default'
p51689
S'thermal_conductivity'
p51690
sS'name'
p51691
S'diffusion_coefficient_name'
p51692
sS'required'
p51693
I00
sS'group_name'
p51694
Nsa(dp51695
S'description'
p51696
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51697
sS'cpp_type'
p51698
S'bool'
p51699
sS'default'
p51700
S'1'
p51701
sS'name'
p51702
S'implicit'
p51703
sS'required'
p51704
I00
sS'group_name'
p51705
S'Advanced'
p51706
sa(dp51707
S'description'
p51708
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51709
sS'cpp_type'
p51710
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51711
sS'default'
p51712
g3
sS'name'
p51713
S'save_in'
p51714
sS'required'
p51715
I00
sS'group_name'
p51716
S'Advanced'
p51717
sa(dp51718
S'description'
p51719
S'The seed for the master random number generator\n'
p51720
sS'cpp_type'
p51721
S'unsigned int'
p51722
sS'default'
p51723
S'0'
p51724
sS'name'
p51725
S'seed'
p51726
sS'required'
p51727
I00
sS'group_name'
p51728
S'Advanced'
p51729
sa(dp51730
S'description'
p51731
g3
sS'cpp_type'
p51732
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51733
sS'default'
p51734
S'HeatConduction'
p51735
sS'name'
p51736
S'type'
p51737
sS'required'
p51738
I00
sS'group_name'
p51739
Nsa(dp51740
S'description'
p51741
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51742
sS'cpp_type'
p51743
S'bool'
p51744
sS'default'
p51745
S'1'
p51746
sS'name'
p51747
S'use_displaced_mesh'
p51748
sS'required'
p51749
I00
sS'group_name'
p51750
S'Advanced'
p51751
sa(dp51752
S'description'
p51753
S'The name of the variable that this Kernel operates on\n'
p51754
sS'cpp_type'
p51755
S'NonlinearVariableName'
p51756
sS'default'
p51757
g3
sS'name'
p51758
S'variable'
p51759
sS'required'
p51760
I01
sS'group_name'
p51761
NsasS'name'
p51762
S'/Kernels/HeatConduction'
p51763
sa(dp51764
S'description'
p51765
g3
sS'subblocks'
p51766
NsS'parameters'
p51767
(lp51768
(dp51769
S'description'
p51770
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51771
sS'cpp_type'
p51772
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51773
sS'default'
p51774
g3
sS'name'
p51775
S'block'
p51776
sS'required'
p51777
I00
sS'group_name'
p51778
Nsa(dp51779
S'description'
p51780
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51781
sS'cpp_type'
p51782
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51783
sS'default'
p51784
g3
sS'name'
p51785
S'control_tags'
p51786
sS'required'
p51787
I00
sS'group_name'
p51788
Nsa(dp51789
S'description'
p51790
S'Property name of the density material property (Default: density)\n'
p51791
sS'cpp_type'
p51792
S'MaterialPropertyName'
p51793
sS'default'
p51794
S'density'
p51795
sS'name'
p51796
S'density_name'
p51797
sS'required'
p51798
I00
sS'group_name'
p51799
Nsa(dp51800
S'description'
p51801
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51802
sS'cpp_type'
p51803
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51804
sS'default'
p51805
g3
sS'name'
p51806
S'diag_save_in'
p51807
sS'required'
p51808
I00
sS'group_name'
p51809
S'Advanced'
p51810
sa(dp51811
S'description'
p51812
S"Property name of the heat capacity material property, this is only used when 'use_specific_heat' is true (Default: heat_capacity)\n"
p51813
sS'cpp_type'
p51814
S'MaterialPropertyName'
p51815
sS'default'
p51816
S'heat_capacity'
p51817
sS'name'
p51818
S'heat_capacity_name'
p51819
sS'required'
p51820
I00
sS'group_name'
p51821
Nsa(dp51822
S'description'
p51823
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51824
sS'cpp_type'
p51825
S'bool'
p51826
sS'default'
p51827
S'1'
p51828
sS'name'
p51829
S'implicit'
p51830
sS'required'
p51831
I00
sS'group_name'
p51832
S'Advanced'
p51833
sa(dp51834
S'description'
p51835
S'True for mass matrix lumping, false otherwise\n'
p51836
sS'cpp_type'
p51837
S'bool'
p51838
sS'default'
p51839
S'0'
p51840
sS'name'
p51841
S'lumping'
p51842
sS'required'
p51843
I00
sS'group_name'
p51844
Nsa(dp51845
S'description'
p51846
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51847
sS'cpp_type'
p51848
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51849
sS'default'
p51850
g3
sS'name'
p51851
S'save_in'
p51852
sS'required'
p51853
I00
sS'group_name'
p51854
S'Advanced'
p51855
sa(dp51856
S'description'
p51857
S'The seed for the master random number generator\n'
p51858
sS'cpp_type'
p51859
S'unsigned int'
p51860
sS'default'
p51861
S'0'
p51862
sS'name'
p51863
S'seed'
p51864
sS'required'
p51865
I00
sS'group_name'
p51866
S'Advanced'
p51867
sa(dp51868
S'description'
p51869
S'Property name of the specific heat material property (Default: specific_heat)\n'
p51870
sS'cpp_type'
p51871
S'MaterialPropertyName'
p51872
sS'default'
p51873
S'specific_heat'
p51874
sS'name'
p51875
S'specific_heat_name'
p51876
sS'required'
p51877
I00
sS'group_name'
p51878
Nsa(dp51879
S'description'
p51880
g3
sS'cpp_type'
p51881
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p51882
sS'default'
p51883
S'HeatConductionTimeDerivative'
p51884
sS'name'
p51885
S'type'
p51886
sS'required'
p51887
I00
sS'group_name'
p51888
Nsa(dp51889
S'description'
p51890
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51891
sS'cpp_type'
p51892
S'bool'
p51893
sS'default'
p51894
S'1'
p51895
sS'name'
p51896
S'use_displaced_mesh'
p51897
sS'required'
p51898
I00
sS'group_name'
p51899
S'Advanced'
p51900
sa(dp51901
S'description'
p51902
S"Use a single material property, 'heat_capacity', as the coefficient of the time derivative.\n"
p51903
sS'cpp_type'
p51904
S'bool'
p51905
sS'default'
p51906
S'0'
p51907
sS'name'
p51908
S'use_heat_capacity'
p51909
sS'required'
p51910
I00
sS'group_name'
p51911
Nsa(dp51912
S'description'
p51913
S'The name of the variable that this Kernel operates on\n'
p51914
sS'cpp_type'
p51915
S'NonlinearVariableName'
p51916
sS'default'
p51917
g3
sS'name'
p51918
S'variable'
p51919
sS'required'
p51920
I01
sS'group_name'
p51921
NsasS'name'
p51922
S'/Kernels/HeatConductionTimeDerivative'
p51923
sa(dp51924
S'description'
p51925
g3
sS'subblocks'
p51926
NsS'parameters'
p51927
(lp51928
(dp51929
S'description'
p51930
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51931
sS'cpp_type'
p51932
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p51933
sS'default'
p51934
g3
sS'name'
p51935
S'block'
p51936
sS'required'
p51937
I00
sS'group_name'
p51938
Nsa(dp51939
S'description'
p51940
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51941
sS'cpp_type'
p51942
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p51943
sS'default'
p51944
g3
sS'name'
p51945
S'control_tags'
p51946
sS'required'
p51947
I00
sS'group_name'
p51948
Nsa(dp51949
S'description'
p51950
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51951
sS'cpp_type'
p51952
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51953
sS'default'
p51954
g3
sS'name'
p51955
S'diag_save_in'
p51956
sS'required'
p51957
I00
sS'group_name'
p51958
S'Advanced'
p51959
sa(dp51960
S'description'
p51961
S'Function describing the volumetric heat source\n'
p51962
sS'cpp_type'
p51963
S'FunctionName'
p51964
sS'default'
p51965
S'1'
p51966
sS'name'
p51967
S'function'
p51968
sS'required'
p51969
I00
sS'group_name'
p51970
Nsa(dp51971
S'description'
p51972
S'Determines whether this object is calculated using an implicit or explicit form\n'
p51973
sS'cpp_type'
p51974
S'bool'
p51975
sS'default'
p51976
S'1'
p51977
sS'name'
p51978
S'implicit'
p51979
sS'required'
p51980
I00
sS'group_name'
p51981
S'Advanced'
p51982
sa(dp51983
S'description'
p51984
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p51985
sS'cpp_type'
p51986
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p51987
sS'default'
p51988
g3
sS'name'
p51989
S'save_in'
p51990
sS'required'
p51991
I00
sS'group_name'
p51992
S'Advanced'
p51993
sa(dp51994
S'description'
p51995
S'The seed for the master random number generator\n'
p51996
sS'cpp_type'
p51997
S'unsigned int'
p51998
sS'default'
p51999
S'0'
p52000
sS'name'
p52001
S'seed'
p52002
sS'required'
p52003
I00
sS'group_name'
p52004
S'Advanced'
p52005
sa(dp52006
S'description'
p52007
g3
sS'cpp_type'
p52008
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52009
sS'default'
p52010
S'HeatSource'
p52011
sS'name'
p52012
S'type'
p52013
sS'required'
p52014
I00
sS'group_name'
p52015
Nsa(dp52016
S'description'
p52017
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52018
sS'cpp_type'
p52019
S'bool'
p52020
sS'default'
p52021
S'0'
p52022
sS'name'
p52023
S'use_displaced_mesh'
p52024
sS'required'
p52025
I00
sS'group_name'
p52026
S'Advanced'
p52027
sa(dp52028
S'description'
p52029
S'Value of heat source. Multiplied by function if present.\n'
p52030
sS'cpp_type'
p52031
S'double'
p52032
sS'default'
p52033
S'1'
p52034
sS'name'
p52035
S'value'
p52036
sS'required'
p52037
I00
sS'group_name'
p52038
Nsa(dp52039
S'description'
p52040
S'The name of the variable that this Kernel operates on\n'
p52041
sS'cpp_type'
p52042
S'NonlinearVariableName'
p52043
sS'default'
p52044
g3
sS'name'
p52045
S'variable'
p52046
sS'required'
p52047
I01
sS'group_name'
p52048
NsasS'name'
p52049
S'/Kernels/HeatSource'
p52050
sa(dp52051
S'description'
p52052
g3
sS'subblocks'
p52053
NsS'parameters'
p52054
(lp52055
(dp52056
S'description'
p52057
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52058
sS'cpp_type'
p52059
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52060
sS'default'
p52061
g3
sS'name'
p52062
S'block'
p52063
sS'required'
p52064
I00
sS'group_name'
p52065
Nsa(dp52066
S'description'
p52067
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p52068
sS'cpp_type'
p52069
S'unsigned int'
p52070
sS'default'
p52071
g3
sS'name'
p52072
S'component'
p52073
sS'required'
p52074
I01
sS'group_name'
p52075
Nsa(dp52076
S'description'
p52077
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52078
sS'cpp_type'
p52079
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52080
sS'default'
p52081
g3
sS'name'
p52082
S'control_tags'
p52083
sS'required'
p52084
I00
sS'group_name'
p52085
Nsa(dp52086
S'description'
p52087
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52088
sS'cpp_type'
p52089
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52090
sS'default'
p52091
g3
sS'name'
p52092
S'diag_save_in'
p52093
sS'required'
p52094
I00
sS'group_name'
p52095
S'Advanced'
p52096
sa(dp52097
S'description'
p52098
S'The diffusion coefficient for the temperature gradient (Default: thermal_conductivity)\n'
p52099
sS'cpp_type'
p52100
S'MaterialPropertyName'
p52101
sS'default'
p52102
S'thermal_conductivity'
p52103
sS'name'
p52104
S'diffusion_coefficient_name'
p52105
sS'required'
p52106
I00
sS'group_name'
p52107
Nsa(dp52108
S'description'
p52109
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52110
sS'cpp_type'
p52111
S'bool'
p52112
sS'default'
p52113
S'1'
p52114
sS'name'
p52115
S'implicit'
p52116
sS'required'
p52117
I00
sS'group_name'
p52118
S'Advanced'
p52119
sa(dp52120
S'description'
p52121
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52122
sS'cpp_type'
p52123
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52124
sS'default'
p52125
g3
sS'name'
p52126
S'save_in'
p52127
sS'required'
p52128
I00
sS'group_name'
p52129
S'Advanced'
p52130
sa(dp52131
S'description'
p52132
S'The seed for the master random number generator\n'
p52133
sS'cpp_type'
p52134
S'unsigned int'
p52135
sS'default'
p52136
S'0'
p52137
sS'name'
p52138
S'seed'
p52139
sS'required'
p52140
I00
sS'group_name'
p52141
S'Advanced'
p52142
sa(dp52143
S'description'
p52144
g3
sS'cpp_type'
p52145
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52146
sS'default'
p52147
S'HomogenizationHeatConduction'
p52148
sS'name'
p52149
S'type'
p52150
sS'required'
p52151
I00
sS'group_name'
p52152
Nsa(dp52153
S'description'
p52154
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52155
sS'cpp_type'
p52156
S'bool'
p52157
sS'default'
p52158
S'0'
p52159
sS'name'
p52160
S'use_displaced_mesh'
p52161
sS'required'
p52162
I00
sS'group_name'
p52163
S'Advanced'
p52164
sa(dp52165
S'description'
p52166
S'The name of the variable that this Kernel operates on\n'
p52167
sS'cpp_type'
p52168
S'NonlinearVariableName'
p52169
sS'default'
p52170
g3
sS'name'
p52171
S'variable'
p52172
sS'required'
p52173
I01
sS'group_name'
p52174
NsasS'name'
p52175
S'/Kernels/HomogenizationHeatConduction'
p52176
sa(dp52177
S'description'
p52178
g3
sS'subblocks'
p52179
NsS'parameters'
p52180
(lp52181
(dp52182
S'description'
p52183
S'Name appended to material properties to make them unique\n'
p52184
sS'cpp_type'
p52185
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52186
sS'default'
p52187
g3
sS'name'
p52188
S'appended_property_name'
p52189
sS'required'
p52190
I00
sS'group_name'
p52191
Nsa(dp52192
S'description'
p52193
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52194
sS'cpp_type'
p52195
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52196
sS'default'
p52197
g3
sS'name'
p52198
S'block'
p52199
sS'required'
p52200
I00
sS'group_name'
p52201
Nsa(dp52202
S'description'
p52203
S'An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n'
p52204
sS'cpp_type'
p52205
S'unsigned int'
p52206
sS'default'
p52207
g3
sS'name'
p52208
S'column'
p52209
sS'required'
p52210
I01
sS'group_name'
p52211
Nsa(dp52212
S'description'
p52213
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p52214
sS'cpp_type'
p52215
S'unsigned int'
p52216
sS'default'
p52217
g3
sS'name'
p52218
S'component'
p52219
sS'required'
p52220
I01
sS'group_name'
p52221
Nsa(dp52222
S'description'
p52223
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52224
sS'cpp_type'
p52225
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52226
sS'default'
p52227
g3
sS'name'
p52228
S'control_tags'
p52229
sS'required'
p52230
I00
sS'group_name'
p52231
Nsa(dp52232
S'description'
p52233
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52234
sS'cpp_type'
p52235
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52236
sS'default'
p52237
g3
sS'name'
p52238
S'diag_save_in'
p52239
sS'required'
p52240
I00
sS'group_name'
p52241
S'Advanced'
p52242
sa(dp52243
S'description'
p52244
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52245
sS'cpp_type'
p52246
S'bool'
p52247
sS'default'
p52248
S'1'
p52249
sS'name'
p52250
S'implicit'
p52251
sS'required'
p52252
I00
sS'group_name'
p52253
S'Advanced'
p52254
sa(dp52255
S'description'
p52256
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52257
sS'cpp_type'
p52258
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52259
sS'default'
p52260
g3
sS'name'
p52261
S'save_in'
p52262
sS'required'
p52263
I00
sS'group_name'
p52264
S'Advanced'
p52265
sa(dp52266
S'description'
p52267
S'The seed for the master random number generator\n'
p52268
sS'cpp_type'
p52269
S'unsigned int'
p52270
sS'default'
p52271
S'0'
p52272
sS'name'
p52273
S'seed'
p52274
sS'required'
p52275
I00
sS'group_name'
p52276
S'Advanced'
p52277
sa(dp52278
S'description'
p52279
g3
sS'cpp_type'
p52280
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52281
sS'default'
p52282
S'HomogenizationKernel'
p52283
sS'name'
p52284
S'type'
p52285
sS'required'
p52286
I00
sS'group_name'
p52287
Nsa(dp52288
S'description'
p52289
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52290
sS'cpp_type'
p52291
S'bool'
p52292
sS'default'
p52293
S'0'
p52294
sS'name'
p52295
S'use_displaced_mesh'
p52296
sS'required'
p52297
I00
sS'group_name'
p52298
S'Advanced'
p52299
sa(dp52300
S'description'
p52301
S'The name of the variable that this Kernel operates on\n'
p52302
sS'cpp_type'
p52303
S'NonlinearVariableName'
p52304
sS'default'
p52305
g3
sS'name'
p52306
S'variable'
p52307
sS'required'
p52308
I01
sS'group_name'
p52309
NsasS'name'
p52310
S'/Kernels/HomogenizationKernel'
p52311
sa(dp52312
S'description'
p52313
g3
sS'subblocks'
p52314
NsS'parameters'
p52315
(lp52316
(dp52317
S'description'
p52318
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52319
sS'cpp_type'
p52320
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52321
sS'default'
p52322
g3
sS'name'
p52323
S'block'
p52324
sS'required'
p52325
I00
sS'group_name'
p52326
Nsa(dp52327
S'description'
p52328
S'0,1,2 depending on if we are solving the x,y,z component of the Corrector equation\n'
p52329
sS'cpp_type'
p52330
S'unsigned int'
p52331
sS'default'
p52332
g3
sS'name'
p52333
S'component'
p52334
sS'required'
p52335
I01
sS'group_name'
p52336
Nsa(dp52337
S'description'
p52338
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52339
sS'cpp_type'
p52340
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52341
sS'default'
p52342
g3
sS'name'
p52343
S'control_tags'
p52344
sS'required'
p52345
I00
sS'group_name'
p52346
Nsa(dp52347
S'description'
p52348
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52349
sS'cpp_type'
p52350
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52351
sS'default'
p52352
g3
sS'name'
p52353
S'diag_save_in'
p52354
sS'required'
p52355
I00
sS'group_name'
p52356
S'Advanced'
p52357
sa(dp52358
S'description'
p52359
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52360
sS'cpp_type'
p52361
S'bool'
p52362
sS'default'
p52363
S'1'
p52364
sS'name'
p52365
S'implicit'
p52366
sS'required'
p52367
I00
sS'group_name'
p52368
S'Advanced'
p52369
sa(dp52370
S'description'
p52371
S'pressure\n'
p52372
sS'cpp_type'
p52373
S'std::vector<VariableName>'
p52374
sS'default'
p52375
g3
sS'name'
p52376
S'p'
p52377
sS'required'
p52378
I01
sS'group_name'
p52379
Nsa(dp52380
S'description'
p52381
S'density\n'
p52382
sS'cpp_type'
p52383
S'double'
p52384
sS'default'
p52385
g3
sS'name'
p52386
S'rho'
p52387
sS'required'
p52388
I01
sS'group_name'
p52389
Nsa(dp52390
S'description'
p52391
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52392
sS'cpp_type'
p52393
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52394
sS'default'
p52395
g3
sS'name'
p52396
S'save_in'
p52397
sS'required'
p52398
I00
sS'group_name'
p52399
S'Advanced'
p52400
sa(dp52401
S'description'
p52402
S'The seed for the master random number generator\n'
p52403
sS'cpp_type'
p52404
S'unsigned int'
p52405
sS'default'
p52406
S'0'
p52407
sS'name'
p52408
S'seed'
p52409
sS'required'
p52410
I00
sS'group_name'
p52411
S'Advanced'
p52412
sa(dp52413
S'description'
p52414
g3
sS'cpp_type'
p52415
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52416
sS'default'
p52417
S'INSChorinCorrector'
p52418
sS'name'
p52419
S'type'
p52420
sS'required'
p52421
I00
sS'group_name'
p52422
Nsa(dp52423
S'description'
p52424
S'star x-velocity\n'
p52425
sS'cpp_type'
p52426
S'std::vector<VariableName>'
p52427
sS'default'
p52428
g3
sS'name'
p52429
S'u_star'
p52430
sS'required'
p52431
I01
sS'group_name'
p52432
Nsa(dp52433
S'description'
p52434
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52435
sS'cpp_type'
p52436
S'bool'
p52437
sS'default'
p52438
S'0'
p52439
sS'name'
p52440
S'use_displaced_mesh'
p52441
sS'required'
p52442
I00
sS'group_name'
p52443
S'Advanced'
p52444
sa(dp52445
S'description'
p52446
S'star y-velocity\n'
p52447
sS'cpp_type'
p52448
S'std::vector<VariableName>'
p52449
sS'default'
p52450
g3
sS'name'
p52451
S'v_star'
p52452
sS'required'
p52453
I00
sS'group_name'
p52454
Nsa(dp52455
S'description'
p52456
S'The name of the variable that this Kernel operates on\n'
p52457
sS'cpp_type'
p52458
S'NonlinearVariableName'
p52459
sS'default'
p52460
g3
sS'name'
p52461
S'variable'
p52462
sS'required'
p52463
I01
sS'group_name'
p52464
Nsa(dp52465
S'description'
p52466
S'star z-velocity\n'
p52467
sS'cpp_type'
p52468
S'std::vector<VariableName>'
p52469
sS'default'
p52470
g3
sS'name'
p52471
S'w_star'
p52472
sS'required'
p52473
I00
sS'group_name'
p52474
NsasS'name'
p52475
S'/Kernels/INSChorinCorrector'
p52476
sa(dp52477
S'description'
p52478
g3
sS'subblocks'
p52479
NsS'parameters'
p52480
(lp52481
(dp52482
S'description'
p52483
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52484
sS'cpp_type'
p52485
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52486
sS'default'
p52487
g3
sS'name'
p52488
S'block'
p52489
sS'required'
p52490
I00
sS'group_name'
p52491
Nsa(dp52492
S'description'
p52493
S'0,1,2 depending on if we are solving the x,y,z component of the Predictor equation\n'
p52494
sS'cpp_type'
p52495
S'unsigned int'
p52496
sS'default'
p52497
g3
sS'name'
p52498
S'component'
p52499
sS'required'
p52500
I01
sS'group_name'
p52501
Nsa(dp52502
S'description'
p52503
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52504
sS'cpp_type'
p52505
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52506
sS'default'
p52507
g3
sS'name'
p52508
S'control_tags'
p52509
sS'required'
p52510
I00
sS'group_name'
p52511
Nsa(dp52512
S'description'
p52513
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52514
sS'cpp_type'
p52515
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52516
sS'default'
p52517
g3
sS'name'
p52518
S'diag_save_in'
p52519
sS'required'
p52520
I00
sS'group_name'
p52521
S'Advanced'
p52522
sa(dp52523
S'description'
p52524
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52525
sS'cpp_type'
p52526
S'bool'
p52527
sS'default'
p52528
S'1'
p52529
sS'name'
p52530
S'implicit'
p52531
sS'required'
p52532
I00
sS'group_name'
p52533
S'Advanced'
p52534
sa(dp52535
S'description'
p52536
S'dynamic viscosity\n'
p52537
sS'cpp_type'
p52538
S'double'
p52539
sS'default'
p52540
g3
sS'name'
p52541
S'mu'
p52542
sS'required'
p52543
I01
sS'group_name'
p52544
Nsa(dp52545
S'description'
p52546
S'One of: OLD, NEW, STAR.  Indicates which velocity to use in the predictor.\n'
p52547
sS'cpp_type'
p52548
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52549
sS'default'
p52550
g3
sS'name'
p52551
S'predictor_type'
p52552
sS'required'
p52553
I01
sS'group_name'
p52554
Nsa(dp52555
S'description'
p52556
S'density\n'
p52557
sS'cpp_type'
p52558
S'double'
p52559
sS'default'
p52560
g3
sS'name'
p52561
S'rho'
p52562
sS'required'
p52563
I01
sS'group_name'
p52564
Nsa(dp52565
S'description'
p52566
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52567
sS'cpp_type'
p52568
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52569
sS'default'
p52570
g3
sS'name'
p52571
S'save_in'
p52572
sS'required'
p52573
I00
sS'group_name'
p52574
S'Advanced'
p52575
sa(dp52576
S'description'
p52577
S'The seed for the master random number generator\n'
p52578
sS'cpp_type'
p52579
S'unsigned int'
p52580
sS'default'
p52581
S'0'
p52582
sS'name'
p52583
S'seed'
p52584
sS'required'
p52585
I00
sS'group_name'
p52586
S'Advanced'
p52587
sa(dp52588
S'description'
p52589
g3
sS'cpp_type'
p52590
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52591
sS'default'
p52592
S'INSChorinPredictor'
p52593
sS'name'
p52594
S'type'
p52595
sS'required'
p52596
I00
sS'group_name'
p52597
Nsa(dp52598
S'description'
p52599
S'x-velocity\n'
p52600
sS'cpp_type'
p52601
S'std::vector<VariableName>'
p52602
sS'default'
p52603
g3
sS'name'
p52604
S'u'
p52605
sS'required'
p52606
I01
sS'group_name'
p52607
Nsa(dp52608
S'description'
p52609
S'star x-velocity\n'
p52610
sS'cpp_type'
p52611
S'std::vector<VariableName>'
p52612
sS'default'
p52613
g3
sS'name'
p52614
S'u_star'
p52615
sS'required'
p52616
I01
sS'group_name'
p52617
Nsa(dp52618
S'description'
p52619
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52620
sS'cpp_type'
p52621
S'bool'
p52622
sS'default'
p52623
S'0'
p52624
sS'name'
p52625
S'use_displaced_mesh'
p52626
sS'required'
p52627
I00
sS'group_name'
p52628
S'Advanced'
p52629
sa(dp52630
S'description'
p52631
S'y-velocity\n'
p52632
sS'cpp_type'
p52633
S'std::vector<VariableName>'
p52634
sS'default'
p52635
g3
sS'name'
p52636
S'v'
p52637
sS'required'
p52638
I00
sS'group_name'
p52639
Nsa(dp52640
S'description'
p52641
S'star y-velocity\n'
p52642
sS'cpp_type'
p52643
S'std::vector<VariableName>'
p52644
sS'default'
p52645
g3
sS'name'
p52646
S'v_star'
p52647
sS'required'
p52648
I00
sS'group_name'
p52649
Nsa(dp52650
S'description'
p52651
S'The name of the variable that this Kernel operates on\n'
p52652
sS'cpp_type'
p52653
S'NonlinearVariableName'
p52654
sS'default'
p52655
g3
sS'name'
p52656
S'variable'
p52657
sS'required'
p52658
I01
sS'group_name'
p52659
Nsa(dp52660
S'description'
p52661
S'z-velocity\n'
p52662
sS'cpp_type'
p52663
S'std::vector<VariableName>'
p52664
sS'default'
p52665
g3
sS'name'
p52666
S'w'
p52667
sS'required'
p52668
I00
sS'group_name'
p52669
Nsa(dp52670
S'description'
p52671
S'star z-velocity\n'
p52672
sS'cpp_type'
p52673
S'std::vector<VariableName>'
p52674
sS'default'
p52675
g3
sS'name'
p52676
S'w_star'
p52677
sS'required'
p52678
I00
sS'group_name'
p52679
NsasS'name'
p52680
S'/Kernels/INSChorinPredictor'
p52681
sa(dp52682
S'description'
p52683
g3
sS'subblocks'
p52684
NsS'parameters'
p52685
(lp52686
(dp52687
S'description'
p52688
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52689
sS'cpp_type'
p52690
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52691
sS'default'
p52692
g3
sS'name'
p52693
S'block'
p52694
sS'required'
p52695
I00
sS'group_name'
p52696
Nsa(dp52697
S'description'
p52698
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52699
sS'cpp_type'
p52700
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52701
sS'default'
p52702
g3
sS'name'
p52703
S'control_tags'
p52704
sS'required'
p52705
I00
sS'group_name'
p52706
Nsa(dp52707
S'description'
p52708
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52709
sS'cpp_type'
p52710
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52711
sS'default'
p52712
g3
sS'name'
p52713
S'diag_save_in'
p52714
sS'required'
p52715
I00
sS'group_name'
p52716
S'Advanced'
p52717
sa(dp52718
S'description'
p52719
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52720
sS'cpp_type'
p52721
S'bool'
p52722
sS'default'
p52723
S'1'
p52724
sS'name'
p52725
S'implicit'
p52726
sS'required'
p52727
I00
sS'group_name'
p52728
S'Advanced'
p52729
sa(dp52730
S'description'
p52731
S'density\n'
p52732
sS'cpp_type'
p52733
S'double'
p52734
sS'default'
p52735
g3
sS'name'
p52736
S'rho'
p52737
sS'required'
p52738
I01
sS'group_name'
p52739
Nsa(dp52740
S'description'
p52741
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52742
sS'cpp_type'
p52743
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52744
sS'default'
p52745
g3
sS'name'
p52746
S'save_in'
p52747
sS'required'
p52748
I00
sS'group_name'
p52749
S'Advanced'
p52750
sa(dp52751
S'description'
p52752
S'The seed for the master random number generator\n'
p52753
sS'cpp_type'
p52754
S'unsigned int'
p52755
sS'default'
p52756
S'0'
p52757
sS'name'
p52758
S'seed'
p52759
sS'required'
p52760
I00
sS'group_name'
p52761
S'Advanced'
p52762
sa(dp52763
S'description'
p52764
g3
sS'cpp_type'
p52765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52766
sS'default'
p52767
S'INSChorinPressurePoisson'
p52768
sS'name'
p52769
S'type'
p52770
sS'required'
p52771
I00
sS'group_name'
p52772
Nsa(dp52773
S'description'
p52774
S'star x-velocity\n'
p52775
sS'cpp_type'
p52776
S'std::vector<VariableName>'
p52777
sS'default'
p52778
g3
sS'name'
p52779
S'u_star'
p52780
sS'required'
p52781
I01
sS'group_name'
p52782
Nsa(dp52783
S'description'
p52784
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52785
sS'cpp_type'
p52786
S'bool'
p52787
sS'default'
p52788
S'0'
p52789
sS'name'
p52790
S'use_displaced_mesh'
p52791
sS'required'
p52792
I00
sS'group_name'
p52793
S'Advanced'
p52794
sa(dp52795
S'description'
p52796
S'star y-velocity\n'
p52797
sS'cpp_type'
p52798
S'std::vector<VariableName>'
p52799
sS'default'
p52800
g3
sS'name'
p52801
S'v_star'
p52802
sS'required'
p52803
I00
sS'group_name'
p52804
Nsa(dp52805
S'description'
p52806
S'The name of the variable that this Kernel operates on\n'
p52807
sS'cpp_type'
p52808
S'NonlinearVariableName'
p52809
sS'default'
p52810
g3
sS'name'
p52811
S'variable'
p52812
sS'required'
p52813
I01
sS'group_name'
p52814
Nsa(dp52815
S'description'
p52816
S'star z-velocity\n'
p52817
sS'cpp_type'
p52818
S'std::vector<VariableName>'
p52819
sS'default'
p52820
g3
sS'name'
p52821
S'w_star'
p52822
sS'required'
p52823
I00
sS'group_name'
p52824
NsasS'name'
p52825
S'/Kernels/INSChorinPressurePoisson'
p52826
sa(dp52827
S'description'
p52828
g3
sS'subblocks'
p52829
NsS'parameters'
p52830
(lp52831
(dp52832
S'description'
p52833
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52834
sS'cpp_type'
p52835
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52836
sS'default'
p52837
g3
sS'name'
p52838
S'block'
p52839
sS'required'
p52840
I00
sS'group_name'
p52841
Nsa(dp52842
S'description'
p52843
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52844
sS'cpp_type'
p52845
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p52846
sS'default'
p52847
g3
sS'name'
p52848
S'control_tags'
p52849
sS'required'
p52850
I00
sS'group_name'
p52851
Nsa(dp52852
S'description'
p52853
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52854
sS'cpp_type'
p52855
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52856
sS'default'
p52857
g3
sS'name'
p52858
S'diag_save_in'
p52859
sS'required'
p52860
I00
sS'group_name'
p52861
S'Advanced'
p52862
sa(dp52863
S'description'
p52864
S'Determines whether this object is calculated using an implicit or explicit form\n'
p52865
sS'cpp_type'
p52866
S'bool'
p52867
sS'default'
p52868
S'1'
p52869
sS'name'
p52870
S'implicit'
p52871
sS'required'
p52872
I00
sS'group_name'
p52873
S'Advanced'
p52874
sa(dp52875
S'description'
p52876
S'pressure\n'
p52877
sS'cpp_type'
p52878
S'std::vector<VariableName>'
p52879
sS'default'
p52880
g3
sS'name'
p52881
S'p'
p52882
sS'required'
p52883
I01
sS'group_name'
p52884
Nsa(dp52885
S'description'
p52886
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p52887
sS'cpp_type'
p52888
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p52889
sS'default'
p52890
g3
sS'name'
p52891
S'save_in'
p52892
sS'required'
p52893
I00
sS'group_name'
p52894
S'Advanced'
p52895
sa(dp52896
S'description'
p52897
S'The seed for the master random number generator\n'
p52898
sS'cpp_type'
p52899
S'unsigned int'
p52900
sS'default'
p52901
S'0'
p52902
sS'name'
p52903
S'seed'
p52904
sS'required'
p52905
I00
sS'group_name'
p52906
S'Advanced'
p52907
sa(dp52908
S'description'
p52909
g3
sS'cpp_type'
p52910
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p52911
sS'default'
p52912
S'INSMass'
p52913
sS'name'
p52914
S'type'
p52915
sS'required'
p52916
I00
sS'group_name'
p52917
Nsa(dp52918
S'description'
p52919
S'x-velocity\n'
p52920
sS'cpp_type'
p52921
S'std::vector<VariableName>'
p52922
sS'default'
p52923
g3
sS'name'
p52924
S'u'
p52925
sS'required'
p52926
I01
sS'group_name'
p52927
Nsa(dp52928
S'description'
p52929
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52930
sS'cpp_type'
p52931
S'bool'
p52932
sS'default'
p52933
S'0'
p52934
sS'name'
p52935
S'use_displaced_mesh'
p52936
sS'required'
p52937
I00
sS'group_name'
p52938
S'Advanced'
p52939
sa(dp52940
S'description'
p52941
S'y-velocity\n'
p52942
sS'cpp_type'
p52943
S'std::vector<VariableName>'
p52944
sS'default'
p52945
S'0'
p52946
sS'name'
p52947
S'v'
p52948
sS'required'
p52949
I00
sS'group_name'
p52950
Nsa(dp52951
S'description'
p52952
S'The name of the variable that this Kernel operates on\n'
p52953
sS'cpp_type'
p52954
S'NonlinearVariableName'
p52955
sS'default'
p52956
g3
sS'name'
p52957
S'variable'
p52958
sS'required'
p52959
I01
sS'group_name'
p52960
Nsa(dp52961
S'description'
p52962
S'z-velocity\n'
p52963
sS'cpp_type'
p52964
S'std::vector<VariableName>'
p52965
sS'default'
p52966
S'0'
p52967
sS'name'
p52968
S'w'
p52969
sS'required'
p52970
I00
sS'group_name'
p52971
NsasS'name'
p52972
S'/Kernels/INSMass'
p52973
sa(dp52974
S'description'
p52975
g3
sS'subblocks'
p52976
NsS'parameters'
p52977
(lp52978
(dp52979
S'description'
p52980
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52981
sS'cpp_type'
p52982
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p52983
sS'default'
p52984
g3
sS'name'
p52985
S'block'
p52986
sS'required'
p52987
I00
sS'group_name'
p52988
Nsa(dp52989
S'description'
p52990
S'0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n'
p52991
sS'cpp_type'
p52992
S'unsigned int'
p52993
sS'default'
p52994
g3
sS'name'
p52995
S'component'
p52996
sS'required'
p52997
I01
sS'group_name'
p52998
Nsa(dp52999
S'description'
p53000
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53001
sS'cpp_type'
p53002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53003
sS'default'
p53004
g3
sS'name'
p53005
S'control_tags'
p53006
sS'required'
p53007
I00
sS'group_name'
p53008
Nsa(dp53009
S'description'
p53010
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53011
sS'cpp_type'
p53012
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53013
sS'default'
p53014
g3
sS'name'
p53015
S'diag_save_in'
p53016
sS'required'
p53017
I00
sS'group_name'
p53018
S'Advanced'
p53019
sa(dp53020
S'description'
p53021
S'Direction of the gravity vector\n'
p53022
sS'cpp_type'
p53023
S'libMesh::VectorValue<double>'
p53024
sS'default'
p53025
g3
sS'name'
p53026
S'gravity'
p53027
sS'required'
p53028
I01
sS'group_name'
p53029
Nsa(dp53030
S'description'
p53031
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53032
sS'cpp_type'
p53033
S'bool'
p53034
sS'default'
p53035
S'1'
p53036
sS'name'
p53037
S'implicit'
p53038
sS'required'
p53039
I00
sS'group_name'
p53040
S'Advanced'
p53041
sa(dp53042
S'description'
p53043
S'dynamic viscosity\n'
p53044
sS'cpp_type'
p53045
S'double'
p53046
sS'default'
p53047
g3
sS'name'
p53048
S'mu'
p53049
sS'required'
p53050
I01
sS'group_name'
p53051
Nsa(dp53052
S'description'
p53053
S'pressure\n'
p53054
sS'cpp_type'
p53055
S'std::vector<VariableName>'
p53056
sS'default'
p53057
g3
sS'name'
p53058
S'p'
p53059
sS'required'
p53060
I01
sS'group_name'
p53061
Nsa(dp53062
S'description'
p53063
S'density\n'
p53064
sS'cpp_type'
p53065
S'double'
p53066
sS'default'
p53067
g3
sS'name'
p53068
S'rho'
p53069
sS'required'
p53070
I01
sS'group_name'
p53071
Nsa(dp53072
S'description'
p53073
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53074
sS'cpp_type'
p53075
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53076
sS'default'
p53077
g3
sS'name'
p53078
S'save_in'
p53079
sS'required'
p53080
I00
sS'group_name'
p53081
S'Advanced'
p53082
sa(dp53083
S'description'
p53084
S'The seed for the master random number generator\n'
p53085
sS'cpp_type'
p53086
S'unsigned int'
p53087
sS'default'
p53088
S'0'
p53089
sS'name'
p53090
S'seed'
p53091
sS'required'
p53092
I00
sS'group_name'
p53093
S'Advanced'
p53094
sa(dp53095
S'description'
p53096
g3
sS'cpp_type'
p53097
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53098
sS'default'
p53099
S'INSMomentum'
p53100
sS'name'
p53101
S'type'
p53102
sS'required'
p53103
I00
sS'group_name'
p53104
Nsa(dp53105
S'description'
p53106
S'x-velocity\n'
p53107
sS'cpp_type'
p53108
S'std::vector<VariableName>'
p53109
sS'default'
p53110
g3
sS'name'
p53111
S'u'
p53112
sS'required'
p53113
I01
sS'group_name'
p53114
Nsa(dp53115
S'description'
p53116
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53117
sS'cpp_type'
p53118
S'bool'
p53119
sS'default'
p53120
S'0'
p53121
sS'name'
p53122
S'use_displaced_mesh'
p53123
sS'required'
p53124
I00
sS'group_name'
p53125
S'Advanced'
p53126
sa(dp53127
S'description'
p53128
S'y-velocity\n'
p53129
sS'cpp_type'
p53130
S'std::vector<VariableName>'
p53131
sS'default'
p53132
S'0'
p53133
sS'name'
p53134
S'v'
p53135
sS'required'
p53136
I00
sS'group_name'
p53137
Nsa(dp53138
S'description'
p53139
S'The name of the variable that this Kernel operates on\n'
p53140
sS'cpp_type'
p53141
S'NonlinearVariableName'
p53142
sS'default'
p53143
g3
sS'name'
p53144
S'variable'
p53145
sS'required'
p53146
I01
sS'group_name'
p53147
Nsa(dp53148
S'description'
p53149
S'z-velocity\n'
p53150
sS'cpp_type'
p53151
S'std::vector<VariableName>'
p53152
sS'default'
p53153
S'0'
p53154
sS'name'
p53155
S'w'
p53156
sS'required'
p53157
I00
sS'group_name'
p53158
NsasS'name'
p53159
S'/Kernels/INSMomentum'
p53160
sa(dp53161
S'description'
p53162
g3
sS'subblocks'
p53163
NsS'parameters'
p53164
(lp53165
(dp53166
S'description'
p53167
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53168
sS'cpp_type'
p53169
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53170
sS'default'
p53171
g3
sS'name'
p53172
S'block'
p53173
sS'required'
p53174
I00
sS'group_name'
p53175
Nsa(dp53176
S'description'
p53177
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53178
sS'cpp_type'
p53179
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53180
sS'default'
p53181
g3
sS'name'
p53182
S'control_tags'
p53183
sS'required'
p53184
I00
sS'group_name'
p53185
Nsa(dp53186
S'description'
p53187
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53188
sS'cpp_type'
p53189
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53190
sS'default'
p53191
g3
sS'name'
p53192
S'diag_save_in'
p53193
sS'required'
p53194
I00
sS'group_name'
p53195
S'Advanced'
p53196
sa(dp53197
S'description'
p53198
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53199
sS'cpp_type'
p53200
S'bool'
p53201
sS'default'
p53202
S'1'
p53203
sS'name'
p53204
S'implicit'
p53205
sS'required'
p53206
I00
sS'group_name'
p53207
S'Advanced'
p53208
sa(dp53209
S'description'
p53210
S'True for mass matrix lumping, false otherwise\n'
p53211
sS'cpp_type'
p53212
S'bool'
p53213
sS'default'
p53214
S'0'
p53215
sS'name'
p53216
S'lumping'
p53217
sS'required'
p53218
I00
sS'group_name'
p53219
Nsa(dp53220
S'description'
p53221
S'density\n'
p53222
sS'cpp_type'
p53223
S'double'
p53224
sS'default'
p53225
g3
sS'name'
p53226
S'rho'
p53227
sS'required'
p53228
I01
sS'group_name'
p53229
Nsa(dp53230
S'description'
p53231
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53232
sS'cpp_type'
p53233
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53234
sS'default'
p53235
g3
sS'name'
p53236
S'save_in'
p53237
sS'required'
p53238
I00
sS'group_name'
p53239
S'Advanced'
p53240
sa(dp53241
S'description'
p53242
S'The seed for the master random number generator\n'
p53243
sS'cpp_type'
p53244
S'unsigned int'
p53245
sS'default'
p53246
S'0'
p53247
sS'name'
p53248
S'seed'
p53249
sS'required'
p53250
I00
sS'group_name'
p53251
S'Advanced'
p53252
sa(dp53253
S'description'
p53254
g3
sS'cpp_type'
p53255
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53256
sS'default'
p53257
S'INSMomentumTimeDerivative'
p53258
sS'name'
p53259
S'type'
p53260
sS'required'
p53261
I00
sS'group_name'
p53262
Nsa(dp53263
S'description'
p53264
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53265
sS'cpp_type'
p53266
S'bool'
p53267
sS'default'
p53268
S'0'
p53269
sS'name'
p53270
S'use_displaced_mesh'
p53271
sS'required'
p53272
I00
sS'group_name'
p53273
S'Advanced'
p53274
sa(dp53275
S'description'
p53276
S'The name of the variable that this Kernel operates on\n'
p53277
sS'cpp_type'
p53278
S'NonlinearVariableName'
p53279
sS'default'
p53280
g3
sS'name'
p53281
S'variable'
p53282
sS'required'
p53283
I01
sS'group_name'
p53284
NsasS'name'
p53285
S'/Kernels/INSMomentumTimeDerivative'
p53286
sa(dp53287
S'description'
p53288
g3
sS'subblocks'
p53289
NsS'parameters'
p53290
(lp53291
(dp53292
S'description'
p53293
S'x-acceleration\n'
p53294
sS'cpp_type'
p53295
S'std::vector<VariableName>'
p53296
sS'default'
p53297
g3
sS'name'
p53298
S'a1'
p53299
sS'required'
p53300
I01
sS'group_name'
p53301
Nsa(dp53302
S'description'
p53303
S'y-acceleration\n'
p53304
sS'cpp_type'
p53305
S'std::vector<VariableName>'
p53306
sS'default'
p53307
g3
sS'name'
p53308
S'a2'
p53309
sS'required'
p53310
I00
sS'group_name'
p53311
Nsa(dp53312
S'description'
p53313
S'z-acceleration\n'
p53314
sS'cpp_type'
p53315
S'std::vector<VariableName>'
p53316
sS'default'
p53317
g3
sS'name'
p53318
S'a3'
p53319
sS'required'
p53320
I00
sS'group_name'
p53321
Nsa(dp53322
S'description'
p53323
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53324
sS'cpp_type'
p53325
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53326
sS'default'
p53327
g3
sS'name'
p53328
S'block'
p53329
sS'required'
p53330
I00
sS'group_name'
p53331
Nsa(dp53332
S'description'
p53333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53334
sS'cpp_type'
p53335
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53336
sS'default'
p53337
g3
sS'name'
p53338
S'control_tags'
p53339
sS'required'
p53340
I00
sS'group_name'
p53341
Nsa(dp53342
S'description'
p53343
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53344
sS'cpp_type'
p53345
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53346
sS'default'
p53347
g3
sS'name'
p53348
S'diag_save_in'
p53349
sS'required'
p53350
I00
sS'group_name'
p53351
S'Advanced'
p53352
sa(dp53353
S'description'
p53354
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53355
sS'cpp_type'
p53356
S'bool'
p53357
sS'default'
p53358
S'1'
p53359
sS'name'
p53360
S'implicit'
p53361
sS'required'
p53362
I00
sS'group_name'
p53363
S'Advanced'
p53364
sa(dp53365
S'description'
p53366
S'density\n'
p53367
sS'cpp_type'
p53368
S'double'
p53369
sS'default'
p53370
g3
sS'name'
p53371
S'rho'
p53372
sS'required'
p53373
I01
sS'group_name'
p53374
Nsa(dp53375
S'description'
p53376
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53377
sS'cpp_type'
p53378
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53379
sS'default'
p53380
g3
sS'name'
p53381
S'save_in'
p53382
sS'required'
p53383
I00
sS'group_name'
p53384
S'Advanced'
p53385
sa(dp53386
S'description'
p53387
S'The seed for the master random number generator\n'
p53388
sS'cpp_type'
p53389
S'unsigned int'
p53390
sS'default'
p53391
S'0'
p53392
sS'name'
p53393
S'seed'
p53394
sS'required'
p53395
I00
sS'group_name'
p53396
S'Advanced'
p53397
sa(dp53398
S'description'
p53399
g3
sS'cpp_type'
p53400
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53401
sS'default'
p53402
S'INSPressurePoisson'
p53403
sS'name'
p53404
S'type'
p53405
sS'required'
p53406
I00
sS'group_name'
p53407
Nsa(dp53408
S'description'
p53409
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53410
sS'cpp_type'
p53411
S'bool'
p53412
sS'default'
p53413
S'0'
p53414
sS'name'
p53415
S'use_displaced_mesh'
p53416
sS'required'
p53417
I00
sS'group_name'
p53418
S'Advanced'
p53419
sa(dp53420
S'description'
p53421
S'The name of the variable that this Kernel operates on\n'
p53422
sS'cpp_type'
p53423
S'NonlinearVariableName'
p53424
sS'default'
p53425
g3
sS'name'
p53426
S'variable'
p53427
sS'required'
p53428
I01
sS'group_name'
p53429
NsasS'name'
p53430
S'/Kernels/INSPressurePoisson'
p53431
sa(dp53432
S'description'
p53433
g3
sS'subblocks'
p53434
NsS'parameters'
p53435
(lp53436
(dp53437
S'description'
p53438
S'x-acceleration\n'
p53439
sS'cpp_type'
p53440
S'std::vector<VariableName>'
p53441
sS'default'
p53442
g3
sS'name'
p53443
S'a1'
p53444
sS'required'
p53445
I01
sS'group_name'
p53446
Nsa(dp53447
S'description'
p53448
S'y-acceleration\n'
p53449
sS'cpp_type'
p53450
S'std::vector<VariableName>'
p53451
sS'default'
p53452
g3
sS'name'
p53453
S'a2'
p53454
sS'required'
p53455
I00
sS'group_name'
p53456
Nsa(dp53457
S'description'
p53458
S'z-acceleration\n'
p53459
sS'cpp_type'
p53460
S'std::vector<VariableName>'
p53461
sS'default'
p53462
g3
sS'name'
p53463
S'a3'
p53464
sS'required'
p53465
I00
sS'group_name'
p53466
Nsa(dp53467
S'description'
p53468
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53469
sS'cpp_type'
p53470
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53471
sS'default'
p53472
g3
sS'name'
p53473
S'block'
p53474
sS'required'
p53475
I00
sS'group_name'
p53476
Nsa(dp53477
S'description'
p53478
S'0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n'
p53479
sS'cpp_type'
p53480
S'unsigned int'
p53481
sS'default'
p53482
g3
sS'name'
p53483
S'component'
p53484
sS'required'
p53485
I01
sS'group_name'
p53486
Nsa(dp53487
S'description'
p53488
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53489
sS'cpp_type'
p53490
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53491
sS'default'
p53492
g3
sS'name'
p53493
S'control_tags'
p53494
sS'required'
p53495
I00
sS'group_name'
p53496
Nsa(dp53497
S'description'
p53498
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53499
sS'cpp_type'
p53500
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53501
sS'default'
p53502
g3
sS'name'
p53503
S'diag_save_in'
p53504
sS'required'
p53505
I00
sS'group_name'
p53506
S'Advanced'
p53507
sa(dp53508
S'description'
p53509
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53510
sS'cpp_type'
p53511
S'bool'
p53512
sS'default'
p53513
S'1'
p53514
sS'name'
p53515
S'implicit'
p53516
sS'required'
p53517
I00
sS'group_name'
p53518
S'Advanced'
p53519
sa(dp53520
S'description'
p53521
S'pressure\n'
p53522
sS'cpp_type'
p53523
S'std::vector<VariableName>'
p53524
sS'default'
p53525
g3
sS'name'
p53526
S'p'
p53527
sS'required'
p53528
I01
sS'group_name'
p53529
Nsa(dp53530
S'description'
p53531
S'density\n'
p53532
sS'cpp_type'
p53533
S'double'
p53534
sS'default'
p53535
g3
sS'name'
p53536
S'rho'
p53537
sS'required'
p53538
I01
sS'group_name'
p53539
Nsa(dp53540
S'description'
p53541
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53542
sS'cpp_type'
p53543
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53544
sS'default'
p53545
g3
sS'name'
p53546
S'save_in'
p53547
sS'required'
p53548
I00
sS'group_name'
p53549
S'Advanced'
p53550
sa(dp53551
S'description'
p53552
S'The seed for the master random number generator\n'
p53553
sS'cpp_type'
p53554
S'unsigned int'
p53555
sS'default'
p53556
S'0'
p53557
sS'name'
p53558
S'seed'
p53559
sS'required'
p53560
I00
sS'group_name'
p53561
S'Advanced'
p53562
sa(dp53563
S'description'
p53564
g3
sS'cpp_type'
p53565
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53566
sS'default'
p53567
S'INSProjection'
p53568
sS'name'
p53569
S'type'
p53570
sS'required'
p53571
I00
sS'group_name'
p53572
Nsa(dp53573
S'description'
p53574
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53575
sS'cpp_type'
p53576
S'bool'
p53577
sS'default'
p53578
S'0'
p53579
sS'name'
p53580
S'use_displaced_mesh'
p53581
sS'required'
p53582
I00
sS'group_name'
p53583
S'Advanced'
p53584
sa(dp53585
S'description'
p53586
S'The name of the variable that this Kernel operates on\n'
p53587
sS'cpp_type'
p53588
S'NonlinearVariableName'
p53589
sS'default'
p53590
g3
sS'name'
p53591
S'variable'
p53592
sS'required'
p53593
I01
sS'group_name'
p53594
NsasS'name'
p53595
S'/Kernels/INSProjection'
p53596
sa(dp53597
S'description'
p53598
g3
sS'subblocks'
p53599
NsS'parameters'
p53600
(lp53601
(dp53602
S'description'
p53603
S'x-acceleration\n'
p53604
sS'cpp_type'
p53605
S'std::vector<VariableName>'
p53606
sS'default'
p53607
g3
sS'name'
p53608
S'a1'
p53609
sS'required'
p53610
I01
sS'group_name'
p53611
Nsa(dp53612
S'description'
p53613
S'y-acceleration\n'
p53614
sS'cpp_type'
p53615
S'std::vector<VariableName>'
p53616
sS'default'
p53617
g3
sS'name'
p53618
S'a2'
p53619
sS'required'
p53620
I00
sS'group_name'
p53621
Nsa(dp53622
S'description'
p53623
S'z-acceleration\n'
p53624
sS'cpp_type'
p53625
S'std::vector<VariableName>'
p53626
sS'default'
p53627
g3
sS'name'
p53628
S'a3'
p53629
sS'required'
p53630
I00
sS'group_name'
p53631
Nsa(dp53632
S'description'
p53633
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53634
sS'cpp_type'
p53635
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53636
sS'default'
p53637
g3
sS'name'
p53638
S'block'
p53639
sS'required'
p53640
I00
sS'group_name'
p53641
Nsa(dp53642
S'description'
p53643
S'0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n'
p53644
sS'cpp_type'
p53645
S'unsigned int'
p53646
sS'default'
p53647
g3
sS'name'
p53648
S'component'
p53649
sS'required'
p53650
I01
sS'group_name'
p53651
Nsa(dp53652
S'description'
p53653
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53654
sS'cpp_type'
p53655
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53656
sS'default'
p53657
g3
sS'name'
p53658
S'control_tags'
p53659
sS'required'
p53660
I00
sS'group_name'
p53661
Nsa(dp53662
S'description'
p53663
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53664
sS'cpp_type'
p53665
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53666
sS'default'
p53667
g3
sS'name'
p53668
S'diag_save_in'
p53669
sS'required'
p53670
I00
sS'group_name'
p53671
S'Advanced'
p53672
sa(dp53673
S'description'
p53674
S'Direction of the gravity vector\n'
p53675
sS'cpp_type'
p53676
S'libMesh::VectorValue<double>'
p53677
sS'default'
p53678
g3
sS'name'
p53679
S'gravity'
p53680
sS'required'
p53681
I01
sS'group_name'
p53682
Nsa(dp53683
S'description'
p53684
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53685
sS'cpp_type'
p53686
S'bool'
p53687
sS'default'
p53688
S'1'
p53689
sS'name'
p53690
S'implicit'
p53691
sS'required'
p53692
I00
sS'group_name'
p53693
S'Advanced'
p53694
sa(dp53695
S'description'
p53696
S'dynamic viscosity\n'
p53697
sS'cpp_type'
p53698
S'double'
p53699
sS'default'
p53700
g3
sS'name'
p53701
S'mu'
p53702
sS'required'
p53703
I01
sS'group_name'
p53704
Nsa(dp53705
S'description'
p53706
S'density\n'
p53707
sS'cpp_type'
p53708
S'double'
p53709
sS'default'
p53710
g3
sS'name'
p53711
S'rho'
p53712
sS'required'
p53713
I01
sS'group_name'
p53714
Nsa(dp53715
S'description'
p53716
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53717
sS'cpp_type'
p53718
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53719
sS'default'
p53720
g3
sS'name'
p53721
S'save_in'
p53722
sS'required'
p53723
I00
sS'group_name'
p53724
S'Advanced'
p53725
sa(dp53726
S'description'
p53727
S'The seed for the master random number generator\n'
p53728
sS'cpp_type'
p53729
S'unsigned int'
p53730
sS'default'
p53731
S'0'
p53732
sS'name'
p53733
S'seed'
p53734
sS'required'
p53735
I00
sS'group_name'
p53736
S'Advanced'
p53737
sa(dp53738
S'description'
p53739
g3
sS'cpp_type'
p53740
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53741
sS'default'
p53742
S'INSSplitMomentum'
p53743
sS'name'
p53744
S'type'
p53745
sS'required'
p53746
I00
sS'group_name'
p53747
Nsa(dp53748
S'description'
p53749
S'x-velocity\n'
p53750
sS'cpp_type'
p53751
S'std::vector<VariableName>'
p53752
sS'default'
p53753
g3
sS'name'
p53754
S'u'
p53755
sS'required'
p53756
I01
sS'group_name'
p53757
Nsa(dp53758
S'description'
p53759
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53760
sS'cpp_type'
p53761
S'bool'
p53762
sS'default'
p53763
S'0'
p53764
sS'name'
p53765
S'use_displaced_mesh'
p53766
sS'required'
p53767
I00
sS'group_name'
p53768
S'Advanced'
p53769
sa(dp53770
S'description'
p53771
S'y-velocity\n'
p53772
sS'cpp_type'
p53773
S'std::vector<VariableName>'
p53774
sS'default'
p53775
g3
sS'name'
p53776
S'v'
p53777
sS'required'
p53778
I00
sS'group_name'
p53779
Nsa(dp53780
S'description'
p53781
S'The name of the variable that this Kernel operates on\n'
p53782
sS'cpp_type'
p53783
S'NonlinearVariableName'
p53784
sS'default'
p53785
g3
sS'name'
p53786
S'variable'
p53787
sS'required'
p53788
I01
sS'group_name'
p53789
Nsa(dp53790
S'description'
p53791
S'z-velocity\n'
p53792
sS'cpp_type'
p53793
S'std::vector<VariableName>'
p53794
sS'default'
p53795
g3
sS'name'
p53796
S'w'
p53797
sS'required'
p53798
I00
sS'group_name'
p53799
NsasS'name'
p53800
S'/Kernels/INSSplitMomentum'
p53801
sa(dp53802
S'description'
p53803
g3
sS'subblocks'
p53804
NsS'parameters'
p53805
(lp53806
(dp53807
S'description'
p53808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53809
sS'cpp_type'
p53810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53811
sS'default'
p53812
g3
sS'name'
p53813
S'block'
p53814
sS'required'
p53815
I00
sS'group_name'
p53816
Nsa(dp53817
S'description'
p53818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53819
sS'cpp_type'
p53820
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53821
sS'default'
p53822
g3
sS'name'
p53823
S'control_tags'
p53824
sS'required'
p53825
I00
sS'group_name'
p53826
Nsa(dp53827
S'description'
p53828
S'specific heat\n'
p53829
sS'cpp_type'
p53830
S'double'
p53831
sS'default'
p53832
g3
sS'name'
p53833
S'cp'
p53834
sS'required'
p53835
I01
sS'group_name'
p53836
Nsa(dp53837
S'description'
p53838
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53839
sS'cpp_type'
p53840
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53841
sS'default'
p53842
g3
sS'name'
p53843
S'diag_save_in'
p53844
sS'required'
p53845
I00
sS'group_name'
p53846
S'Advanced'
p53847
sa(dp53848
S'description'
p53849
S'Determines whether this object is calculated using an implicit or explicit form\n'
p53850
sS'cpp_type'
p53851
S'bool'
p53852
sS'default'
p53853
S'1'
p53854
sS'name'
p53855
S'implicit'
p53856
sS'required'
p53857
I00
sS'group_name'
p53858
S'Advanced'
p53859
sa(dp53860
S'description'
p53861
S'thermal conductivity\n'
p53862
sS'cpp_type'
p53863
S'double'
p53864
sS'default'
p53865
g3
sS'name'
p53866
S'k'
p53867
sS'required'
p53868
I01
sS'group_name'
p53869
Nsa(dp53870
S'description'
p53871
S'density\n'
p53872
sS'cpp_type'
p53873
S'double'
p53874
sS'default'
p53875
g3
sS'name'
p53876
S'rho'
p53877
sS'required'
p53878
I01
sS'group_name'
p53879
Nsa(dp53880
S'description'
p53881
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p53882
sS'cpp_type'
p53883
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p53884
sS'default'
p53885
g3
sS'name'
p53886
S'save_in'
p53887
sS'required'
p53888
I00
sS'group_name'
p53889
S'Advanced'
p53890
sa(dp53891
S'description'
p53892
S'The seed for the master random number generator\n'
p53893
sS'cpp_type'
p53894
S'unsigned int'
p53895
sS'default'
p53896
S'0'
p53897
sS'name'
p53898
S'seed'
p53899
sS'required'
p53900
I00
sS'group_name'
p53901
S'Advanced'
p53902
sa(dp53903
S'description'
p53904
g3
sS'cpp_type'
p53905
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p53906
sS'default'
p53907
S'INSTemperature'
p53908
sS'name'
p53909
S'type'
p53910
sS'required'
p53911
I00
sS'group_name'
p53912
Nsa(dp53913
S'description'
p53914
S'x-velocity\n'
p53915
sS'cpp_type'
p53916
S'std::vector<VariableName>'
p53917
sS'default'
p53918
g3
sS'name'
p53919
S'u'
p53920
sS'required'
p53921
I01
sS'group_name'
p53922
Nsa(dp53923
S'description'
p53924
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53925
sS'cpp_type'
p53926
S'bool'
p53927
sS'default'
p53928
S'0'
p53929
sS'name'
p53930
S'use_displaced_mesh'
p53931
sS'required'
p53932
I00
sS'group_name'
p53933
S'Advanced'
p53934
sa(dp53935
S'description'
p53936
S'y-velocity\n'
p53937
sS'cpp_type'
p53938
S'std::vector<VariableName>'
p53939
sS'default'
p53940
g3
sS'name'
p53941
S'v'
p53942
sS'required'
p53943
I00
sS'group_name'
p53944
Nsa(dp53945
S'description'
p53946
S'The name of the variable that this Kernel operates on\n'
p53947
sS'cpp_type'
p53948
S'NonlinearVariableName'
p53949
sS'default'
p53950
g3
sS'name'
p53951
S'variable'
p53952
sS'required'
p53953
I01
sS'group_name'
p53954
Nsa(dp53955
S'description'
p53956
S'z-velocity\n'
p53957
sS'cpp_type'
p53958
S'std::vector<VariableName>'
p53959
sS'default'
p53960
g3
sS'name'
p53961
S'w'
p53962
sS'required'
p53963
I00
sS'group_name'
p53964
NsasS'name'
p53965
S'/Kernels/INSTemperature'
p53966
sa(dp53967
S'description'
p53968
g3
sS'subblocks'
p53969
NsS'parameters'
p53970
(lp53971
(dp53972
S'description'
p53973
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53974
sS'cpp_type'
p53975
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p53976
sS'default'
p53977
g3
sS'name'
p53978
S'block'
p53979
sS'required'
p53980
I00
sS'group_name'
p53981
Nsa(dp53982
S'description'
p53983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53984
sS'cpp_type'
p53985
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p53986
sS'default'
p53987
g3
sS'name'
p53988
S'control_tags'
p53989
sS'required'
p53990
I00
sS'group_name'
p53991
Nsa(dp53992
S'description'
p53993
S'specific heat\n'
p53994
sS'cpp_type'
p53995
S'double'
p53996
sS'default'
p53997
g3
sS'name'
p53998
S'cp'
p53999
sS'required'
p54000
I01
sS'group_name'
p54001
Nsa(dp54002
S'description'
p54003
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54004
sS'cpp_type'
p54005
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54006
sS'default'
p54007
g3
sS'name'
p54008
S'diag_save_in'
p54009
sS'required'
p54010
I00
sS'group_name'
p54011
S'Advanced'
p54012
sa(dp54013
S'description'
p54014
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54015
sS'cpp_type'
p54016
S'bool'
p54017
sS'default'
p54018
S'1'
p54019
sS'name'
p54020
S'implicit'
p54021
sS'required'
p54022
I00
sS'group_name'
p54023
S'Advanced'
p54024
sa(dp54025
S'description'
p54026
S'True for mass matrix lumping, false otherwise\n'
p54027
sS'cpp_type'
p54028
S'bool'
p54029
sS'default'
p54030
S'0'
p54031
sS'name'
p54032
S'lumping'
p54033
sS'required'
p54034
I00
sS'group_name'
p54035
Nsa(dp54036
S'description'
p54037
S'density\n'
p54038
sS'cpp_type'
p54039
S'double'
p54040
sS'default'
p54041
g3
sS'name'
p54042
S'rho'
p54043
sS'required'
p54044
I01
sS'group_name'
p54045
Nsa(dp54046
S'description'
p54047
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54048
sS'cpp_type'
p54049
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54050
sS'default'
p54051
g3
sS'name'
p54052
S'save_in'
p54053
sS'required'
p54054
I00
sS'group_name'
p54055
S'Advanced'
p54056
sa(dp54057
S'description'
p54058
S'The seed for the master random number generator\n'
p54059
sS'cpp_type'
p54060
S'unsigned int'
p54061
sS'default'
p54062
S'0'
p54063
sS'name'
p54064
S'seed'
p54065
sS'required'
p54066
I00
sS'group_name'
p54067
S'Advanced'
p54068
sa(dp54069
S'description'
p54070
g3
sS'cpp_type'
p54071
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54072
sS'default'
p54073
S'INSTemperatureTimeDerivative'
p54074
sS'name'
p54075
S'type'
p54076
sS'required'
p54077
I00
sS'group_name'
p54078
Nsa(dp54079
S'description'
p54080
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54081
sS'cpp_type'
p54082
S'bool'
p54083
sS'default'
p54084
S'0'
p54085
sS'name'
p54086
S'use_displaced_mesh'
p54087
sS'required'
p54088
I00
sS'group_name'
p54089
S'Advanced'
p54090
sa(dp54091
S'description'
p54092
S'The name of the variable that this Kernel operates on\n'
p54093
sS'cpp_type'
p54094
S'NonlinearVariableName'
p54095
sS'default'
p54096
g3
sS'name'
p54097
S'variable'
p54098
sS'required'
p54099
I01
sS'group_name'
p54100
NsasS'name'
p54101
S'/Kernels/INSTemperatureTimeDerivative'
p54102
sa(dp54103
S'description'
p54104
S'Calculates the residual for the interial force (M*accel) and the contribution of mass dependent Rayleigh damping and HHT time integration scheme [eta*M*((1+alpha)vel-alpha*vel_old)]\n'
p54105
sS'subblocks'
p54106
NsS'parameters'
p54107
(lp54108
(dp54109
S'description'
p54110
S'acceleration variable\n'
p54111
sS'cpp_type'
p54112
S'std::vector<VariableName>'
p54113
sS'default'
p54114
g3
sS'name'
p54115
S'acceleration'
p54116
sS'required'
p54117
I01
sS'group_name'
p54118
Nsa(dp54119
S'description'
p54120
S'alpha parameter for mass dependent numerical damping induced by HHT time integration scheme\n'
p54121
sS'cpp_type'
p54122
S'double'
p54123
sS'default'
p54124
S'0'
p54125
sS'name'
p54126
S'alpha'
p54127
sS'required'
p54128
I00
sS'group_name'
p54129
Nsa(dp54130
S'description'
p54131
S'beta parameter for Newmark Time integration\n'
p54132
sS'cpp_type'
p54133
S'double'
p54134
sS'default'
p54135
g3
sS'name'
p54136
S'beta'
p54137
sS'required'
p54138
I01
sS'group_name'
p54139
Nsa(dp54140
S'description'
p54141
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54142
sS'cpp_type'
p54143
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54144
sS'default'
p54145
g3
sS'name'
p54146
S'block'
p54147
sS'required'
p54148
I00
sS'group_name'
p54149
Nsa(dp54150
S'description'
p54151
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54152
sS'cpp_type'
p54153
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54154
sS'default'
p54155
g3
sS'name'
p54156
S'control_tags'
p54157
sS'required'
p54158
I00
sS'group_name'
p54159
Nsa(dp54160
S'description'
p54161
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54162
sS'cpp_type'
p54163
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54164
sS'default'
p54165
g3
sS'name'
p54166
S'diag_save_in'
p54167
sS'required'
p54168
I00
sS'group_name'
p54169
S'Advanced'
p54170
sa(dp54171
S'description'
p54172
S'eta parameter for mass dependent Rayleigh damping\n'
p54173
sS'cpp_type'
p54174
S'double'
p54175
sS'default'
p54176
S'0'
p54177
sS'name'
p54178
S'eta'
p54179
sS'required'
p54180
I00
sS'group_name'
p54181
Nsa(dp54182
S'description'
p54183
S'gamma parameter for Newmark Time integration\n'
p54184
sS'cpp_type'
p54185
S'double'
p54186
sS'default'
p54187
g3
sS'name'
p54188
S'gamma'
p54189
sS'required'
p54190
I01
sS'group_name'
p54191
Nsa(dp54192
S'description'
p54193
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54194
sS'cpp_type'
p54195
S'bool'
p54196
sS'default'
p54197
S'1'
p54198
sS'name'
p54199
S'implicit'
p54200
sS'required'
p54201
I00
sS'group_name'
p54202
S'Advanced'
p54203
sa(dp54204
S'description'
p54205
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54206
sS'cpp_type'
p54207
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54208
sS'default'
p54209
g3
sS'name'
p54210
S'save_in'
p54211
sS'required'
p54212
I00
sS'group_name'
p54213
S'Advanced'
p54214
sa(dp54215
S'description'
p54216
S'The seed for the master random number generator\n'
p54217
sS'cpp_type'
p54218
S'unsigned int'
p54219
sS'default'
p54220
S'0'
p54221
sS'name'
p54222
S'seed'
p54223
sS'required'
p54224
I00
sS'group_name'
p54225
S'Advanced'
p54226
sa(dp54227
S'description'
p54228
g3
sS'cpp_type'
p54229
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54230
sS'default'
p54231
S'InertialForce'
p54232
sS'name'
p54233
S'type'
p54234
sS'required'
p54235
I00
sS'group_name'
p54236
Nsa(dp54237
S'description'
p54238
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54239
sS'cpp_type'
p54240
S'bool'
p54241
sS'default'
p54242
S'1'
p54243
sS'name'
p54244
S'use_displaced_mesh'
p54245
sS'required'
p54246
I00
sS'group_name'
p54247
S'Advanced'
p54248
sa(dp54249
S'description'
p54250
S'The name of the variable that this Kernel operates on\n'
p54251
sS'cpp_type'
p54252
S'NonlinearVariableName'
p54253
sS'default'
p54254
g3
sS'name'
p54255
S'variable'
p54256
sS'required'
p54257
I01
sS'group_name'
p54258
Nsa(dp54259
S'description'
p54260
S'velocity variable\n'
p54261
sS'cpp_type'
p54262
S'std::vector<VariableName>'
p54263
sS'default'
p54264
g3
sS'name'
p54265
S'velocity'
p54266
sS'required'
p54267
I01
sS'group_name'
p54268
NsasS'name'
p54269
S'/Kernels/InertialForce'
p54270
sa(dp54271
S'description'
p54272
g3
sS'subblocks'
p54273
NsS'parameters'
p54274
(lp54275
(dp54276
S'description'
p54277
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54278
sS'cpp_type'
p54279
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54280
sS'default'
p54281
g3
sS'name'
p54282
S'block'
p54283
sS'required'
p54284
I00
sS'group_name'
p54285
Nsa(dp54286
S'description'
p54287
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54288
sS'cpp_type'
p54289
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54290
sS'default'
p54291
g3
sS'name'
p54292
S'control_tags'
p54293
sS'required'
p54294
I00
sS'group_name'
p54295
Nsa(dp54296
S'description'
p54297
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54298
sS'cpp_type'
p54299
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54300
sS'default'
p54301
g3
sS'name'
p54302
S'diag_save_in'
p54303
sS'required'
p54304
I00
sS'group_name'
p54305
S'Advanced'
p54306
sa(dp54307
S'description'
p54308
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54309
sS'cpp_type'
p54310
S'bool'
p54311
sS'default'
p54312
S'1'
p54313
sS'name'
p54314
S'implicit'
p54315
sS'required'
p54316
I00
sS'group_name'
p54317
S'Advanced'
p54318
sa(dp54319
S'description'
p54320
S'Gradient of the electrical potential\n'
p54321
sS'cpp_type'
p54322
S'std::vector<VariableName>'
p54323
sS'default'
p54324
g3
sS'name'
p54325
S'potential'
p54326
sS'required'
p54327
I01
sS'group_name'
p54328
Nsa(dp54329
S'description'
p54330
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54331
sS'cpp_type'
p54332
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54333
sS'default'
p54334
g3
sS'name'
p54335
S'save_in'
p54336
sS'required'
p54337
I00
sS'group_name'
p54338
S'Advanced'
p54339
sa(dp54340
S'description'
p54341
S'The seed for the master random number generator\n'
p54342
sS'cpp_type'
p54343
S'unsigned int'
p54344
sS'default'
p54345
S'0'
p54346
sS'name'
p54347
S'seed'
p54348
sS'required'
p54349
I00
sS'group_name'
p54350
S'Advanced'
p54351
sa(dp54352
S'description'
p54353
g3
sS'cpp_type'
p54354
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54355
sS'default'
p54356
S'JouleHeating'
p54357
sS'name'
p54358
S'type'
p54359
sS'required'
p54360
I00
sS'group_name'
p54361
Nsa(dp54362
S'description'
p54363
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54364
sS'cpp_type'
p54365
S'bool'
p54366
sS'default'
p54367
S'0'
p54368
sS'name'
p54369
S'use_displaced_mesh'
p54370
sS'required'
p54371
I00
sS'group_name'
p54372
S'Advanced'
p54373
sa(dp54374
S'description'
p54375
S'The name of the variable that this Kernel operates on\n'
p54376
sS'cpp_type'
p54377
S'NonlinearVariableName'
p54378
sS'default'
p54379
g3
sS'name'
p54380
S'variable'
p54381
sS'required'
p54382
I01
sS'group_name'
p54383
NsasS'name'
p54384
S'/Kernels/JouleHeating'
p54385
sa(dp54386
S'description'
p54387
S'KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n'
p54388
sS'subblocks'
p54389
NsS'parameters'
p54390
(lp54391
(dp54392
S'description'
p54393
S'Vector of nonlinear variable arguments this object depends on\n'
p54394
sS'cpp_type'
p54395
S'std::vector<VariableName>'
p54396
sS'default'
p54397
g3
sS'name'
p54398
S'args'
p54399
sS'required'
p54400
I00
sS'group_name'
p54401
Nsa(dp54402
S'description'
p54403
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54404
sS'cpp_type'
p54405
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54406
sS'default'
p54407
g3
sS'name'
p54408
S'block'
p54409
sS'required'
p54410
I00
sS'group_name'
p54411
Nsa(dp54412
S'description'
p54413
S'a-phase concentration\n'
p54414
sS'cpp_type'
p54415
S'std::vector<VariableName>'
p54416
sS'default'
p54417
g3
sS'name'
p54418
S'ca'
p54419
sS'required'
p54420
I01
sS'group_name'
p54421
Nsa(dp54422
S'description'
p54423
S'b-phase concentration\n'
p54424
sS'cpp_type'
p54425
S'std::vector<VariableName>'
p54426
sS'default'
p54427
g3
sS'name'
p54428
S'cb'
p54429
sS'required'
p54430
I01
sS'group_name'
p54431
Nsa(dp54432
S'description'
p54433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54434
sS'cpp_type'
p54435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54436
sS'default'
p54437
g3
sS'name'
p54438
S'control_tags'
p54439
sS'required'
p54440
I00
sS'group_name'
p54441
Nsa(dp54442
S'description'
p54443
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54444
sS'cpp_type'
p54445
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54446
sS'default'
p54447
g3
sS'name'
p54448
S'diag_save_in'
p54449
sS'required'
p54450
I00
sS'group_name'
p54451
S'Advanced'
p54452
sa(dp54453
S'description'
p54454
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p54455
sS'cpp_type'
p54456
S'MaterialPropertyName'
p54457
sS'default'
p54458
g3
sS'name'
p54459
S'fa_name'
p54460
sS'required'
p54461
I01
sS'group_name'
p54462
Nsa(dp54463
S'description'
p54464
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p54465
sS'cpp_type'
p54466
S'MaterialPropertyName'
p54467
sS'default'
p54468
g3
sS'name'
p54469
S'fb_name'
p54470
sS'required'
p54471
I01
sS'group_name'
p54472
Nsa(dp54473
S'description'
p54474
S'Base name for the switching function h(eta)\n'
p54475
sS'cpp_type'
p54476
S'MaterialPropertyName'
p54477
sS'default'
p54478
S'h'
p54479
sS'name'
p54480
S'h_name'
p54481
sS'required'
p54482
I00
sS'group_name'
p54483
Nsa(dp54484
S'description'
p54485
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54486
sS'cpp_type'
p54487
S'bool'
p54488
sS'default'
p54489
S'1'
p54490
sS'name'
p54491
S'implicit'
p54492
sS'required'
p54493
I00
sS'group_name'
p54494
S'Advanced'
p54495
sa(dp54496
S'description'
p54497
S'The mobility used with the kernel\n'
p54498
sS'cpp_type'
p54499
S'MaterialPropertyName'
p54500
sS'default'
p54501
S'L'
p54502
sS'name'
p54503
S'mob_name'
p54504
sS'required'
p54505
I00
sS'group_name'
p54506
Nsa(dp54507
S'description'
p54508
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54509
sS'cpp_type'
p54510
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54511
sS'default'
p54512
g3
sS'name'
p54513
S'save_in'
p54514
sS'required'
p54515
I00
sS'group_name'
p54516
S'Advanced'
p54517
sa(dp54518
S'description'
p54519
S'The seed for the master random number generator\n'
p54520
sS'cpp_type'
p54521
S'unsigned int'
p54522
sS'default'
p54523
S'0'
p54524
sS'name'
p54525
S'seed'
p54526
sS'required'
p54527
I00
sS'group_name'
p54528
S'Advanced'
p54529
sa(dp54530
S'description'
p54531
g3
sS'cpp_type'
p54532
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54533
sS'default'
p54534
S'KKSACBulkC'
p54535
sS'name'
p54536
S'type'
p54537
sS'required'
p54538
I00
sS'group_name'
p54539
Nsa(dp54540
S'description'
p54541
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54542
sS'cpp_type'
p54543
S'bool'
p54544
sS'default'
p54545
S'0'
p54546
sS'name'
p54547
S'use_displaced_mesh'
p54548
sS'required'
p54549
I00
sS'group_name'
p54550
S'Advanced'
p54551
sa(dp54552
S'description'
p54553
S'The name of the variable that this Kernel operates on\n'
p54554
sS'cpp_type'
p54555
S'NonlinearVariableName'
p54556
sS'default'
p54557
g3
sS'name'
p54558
S'variable'
p54559
sS'required'
p54560
I01
sS'group_name'
p54561
NsasS'name'
p54562
S'/Kernels/KKSACBulkC'
p54563
sa(dp54564
S'description'
p54565
S'KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n'
p54566
sS'subblocks'
p54567
NsS'parameters'
p54568
(lp54569
(dp54570
S'description'
p54571
S'Vector of nonlinear variable arguments this object depends on\n'
p54572
sS'cpp_type'
p54573
S'std::vector<VariableName>'
p54574
sS'default'
p54575
g3
sS'name'
p54576
S'args'
p54577
sS'required'
p54578
I00
sS'group_name'
p54579
Nsa(dp54580
S'description'
p54581
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54582
sS'cpp_type'
p54583
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54584
sS'default'
p54585
g3
sS'name'
p54586
S'block'
p54587
sS'required'
p54588
I00
sS'group_name'
p54589
Nsa(dp54590
S'description'
p54591
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54592
sS'cpp_type'
p54593
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54594
sS'default'
p54595
g3
sS'name'
p54596
S'control_tags'
p54597
sS'required'
p54598
I00
sS'group_name'
p54599
Nsa(dp54600
S'description'
p54601
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54602
sS'cpp_type'
p54603
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54604
sS'default'
p54605
g3
sS'name'
p54606
S'diag_save_in'
p54607
sS'required'
p54608
I00
sS'group_name'
p54609
S'Advanced'
p54610
sa(dp54611
S'description'
p54612
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p54613
sS'cpp_type'
p54614
S'MaterialPropertyName'
p54615
sS'default'
p54616
g3
sS'name'
p54617
S'fa_name'
p54618
sS'required'
p54619
I01
sS'group_name'
p54620
Nsa(dp54621
S'description'
p54622
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p54623
sS'cpp_type'
p54624
S'MaterialPropertyName'
p54625
sS'default'
p54626
g3
sS'name'
p54627
S'fb_name'
p54628
sS'required'
p54629
I01
sS'group_name'
p54630
Nsa(dp54631
S'description'
p54632
S'Base name for the double well function g(eta)\n'
p54633
sS'cpp_type'
p54634
S'MaterialPropertyName'
p54635
sS'default'
p54636
S'g'
p54637
sS'name'
p54638
S'g_name'
p54639
sS'required'
p54640
I00
sS'group_name'
p54641
Nsa(dp54642
S'description'
p54643
S'Base name for the switching function h(eta)\n'
p54644
sS'cpp_type'
p54645
S'MaterialPropertyName'
p54646
sS'default'
p54647
S'h'
p54648
sS'name'
p54649
S'h_name'
p54650
sS'required'
p54651
I00
sS'group_name'
p54652
Nsa(dp54653
S'description'
p54654
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54655
sS'cpp_type'
p54656
S'bool'
p54657
sS'default'
p54658
S'1'
p54659
sS'name'
p54660
S'implicit'
p54661
sS'required'
p54662
I00
sS'group_name'
p54663
S'Advanced'
p54664
sa(dp54665
S'description'
p54666
S'The mobility used with the kernel\n'
p54667
sS'cpp_type'
p54668
S'MaterialPropertyName'
p54669
sS'default'
p54670
S'L'
p54671
sS'name'
p54672
S'mob_name'
p54673
sS'required'
p54674
I00
sS'group_name'
p54675
Nsa(dp54676
S'description'
p54677
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54678
sS'cpp_type'
p54679
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54680
sS'default'
p54681
g3
sS'name'
p54682
S'save_in'
p54683
sS'required'
p54684
I00
sS'group_name'
p54685
S'Advanced'
p54686
sa(dp54687
S'description'
p54688
S'The seed for the master random number generator\n'
p54689
sS'cpp_type'
p54690
S'unsigned int'
p54691
sS'default'
p54692
S'0'
p54693
sS'name'
p54694
S'seed'
p54695
sS'required'
p54696
I00
sS'group_name'
p54697
S'Advanced'
p54698
sa(dp54699
S'description'
p54700
g3
sS'cpp_type'
p54701
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54702
sS'default'
p54703
S'KKSACBulkF'
p54704
sS'name'
p54705
S'type'
p54706
sS'required'
p54707
I00
sS'group_name'
p54708
Nsa(dp54709
S'description'
p54710
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54711
sS'cpp_type'
p54712
S'bool'
p54713
sS'default'
p54714
S'0'
p54715
sS'name'
p54716
S'use_displaced_mesh'
p54717
sS'required'
p54718
I00
sS'group_name'
p54719
S'Advanced'
p54720
sa(dp54721
S'description'
p54722
S'The name of the variable that this Kernel operates on\n'
p54723
sS'cpp_type'
p54724
S'NonlinearVariableName'
p54725
sS'default'
p54726
g3
sS'name'
p54727
S'variable'
p54728
sS'required'
p54729
I01
sS'group_name'
p54730
Nsa(dp54731
S'description'
p54732
S'Double well height parameter\n'
p54733
sS'cpp_type'
p54734
S'double'
p54735
sS'default'
p54736
g3
sS'name'
p54737
S'w'
p54738
sS'required'
p54739
I01
sS'group_name'
p54740
NsasS'name'
p54741
S'/Kernels/KKSACBulkF'
p54742
sa(dp54743
S'description'
p54744
S"KKS model kernel for the Bulk Cahn-Hilliard term. This operates on the concentration 'c' as the non-linear variable\n"
p54745
sS'subblocks'
p54746
NsS'parameters'
p54747
(lp54748
(dp54749
S'description'
p54750
S'Vector of arguments of the mobility\n'
p54751
sS'cpp_type'
p54752
S'std::vector<VariableName>'
p54753
sS'default'
p54754
g3
sS'name'
p54755
S'args'
p54756
sS'required'
p54757
I00
sS'group_name'
p54758
Nsa(dp54759
S'description'
p54760
S'Vector of additional arguments to Fa\n'
p54761
sS'cpp_type'
p54762
S'std::vector<VariableName>'
p54763
sS'default'
p54764
g3
sS'name'
p54765
S'args_a'
p54766
sS'required'
p54767
I00
sS'group_name'
p54768
Nsa(dp54769
S'description'
p54770
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54771
sS'cpp_type'
p54772
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54773
sS'default'
p54774
g3
sS'name'
p54775
S'block'
p54776
sS'required'
p54777
I00
sS'group_name'
p54778
Nsa(dp54779
S'description'
p54780
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p54781
sS'cpp_type'
p54782
S'std::vector<VariableName>'
p54783
sS'default'
p54784
g3
sS'name'
p54785
S'ca'
p54786
sS'required'
p54787
I01
sS'group_name'
p54788
Nsa(dp54789
S'description'
p54790
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p54791
sS'cpp_type'
p54792
S'std::vector<VariableName>'
p54793
sS'default'
p54794
g3
sS'name'
p54795
S'cb'
p54796
sS'required'
p54797
I01
sS'group_name'
p54798
Nsa(dp54799
S'description'
p54800
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54801
sS'cpp_type'
p54802
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54803
sS'default'
p54804
g3
sS'name'
p54805
S'control_tags'
p54806
sS'required'
p54807
I00
sS'group_name'
p54808
Nsa(dp54809
S'description'
p54810
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54811
sS'cpp_type'
p54812
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54813
sS'default'
p54814
g3
sS'name'
p54815
S'diag_save_in'
p54816
sS'required'
p54817
I00
sS'group_name'
p54818
S'Advanced'
p54819
sa(dp54820
S'description'
p54821
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p54822
sS'cpp_type'
p54823
S'MaterialPropertyName'
p54824
sS'default'
p54825
g3
sS'name'
p54826
S'fa_name'
p54827
sS'required'
p54828
I01
sS'group_name'
p54829
Nsa(dp54830
S'description'
p54831
S'Base name of the free energy function F (f_name in the corresponding derivative function material)\n'
p54832
sS'cpp_type'
p54833
S'MaterialPropertyName'
p54834
sS'default'
p54835
g3
sS'name'
p54836
S'fb_name'
p54837
sS'required'
p54838
I01
sS'group_name'
p54839
Nsa(dp54840
S'description'
p54841
S'Base name for the switching function h(eta)\n'
p54842
sS'cpp_type'
p54843
S'MaterialPropertyName'
p54844
sS'default'
p54845
S'h'
p54846
sS'name'
p54847
S'h_name'
p54848
sS'required'
p54849
I00
sS'group_name'
p54850
Nsa(dp54851
S'description'
p54852
S'Determines whether this object is calculated using an implicit or explicit form\n'
p54853
sS'cpp_type'
p54854
S'bool'
p54855
sS'default'
p54856
S'1'
p54857
sS'name'
p54858
S'implicit'
p54859
sS'required'
p54860
I00
sS'group_name'
p54861
S'Advanced'
p54862
sa(dp54863
S'description'
p54864
S'The mobility used with the kernel\n'
p54865
sS'cpp_type'
p54866
S'MaterialPropertyName'
p54867
sS'default'
p54868
S'M'
p54869
sS'name'
p54870
S'mob_name'
p54871
sS'required'
p54872
I00
sS'group_name'
p54873
Nsa(dp54874
S'description'
p54875
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54876
sS'cpp_type'
p54877
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54878
sS'default'
p54879
g3
sS'name'
p54880
S'save_in'
p54881
sS'required'
p54882
I00
sS'group_name'
p54883
S'Advanced'
p54884
sa(dp54885
S'description'
p54886
S'The seed for the master random number generator\n'
p54887
sS'cpp_type'
p54888
S'unsigned int'
p54889
sS'default'
p54890
S'0'
p54891
sS'name'
p54892
S'seed'
p54893
sS'required'
p54894
I00
sS'group_name'
p54895
S'Advanced'
p54896
sa(dp54897
S'description'
p54898
g3
sS'cpp_type'
p54899
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p54900
sS'default'
p54901
S'KKSCHBulk'
p54902
sS'name'
p54903
S'type'
p54904
sS'required'
p54905
I00
sS'group_name'
p54906
Nsa(dp54907
S'description'
p54908
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54909
sS'cpp_type'
p54910
S'bool'
p54911
sS'default'
p54912
S'0'
p54913
sS'name'
p54914
S'use_displaced_mesh'
p54915
sS'required'
p54916
I00
sS'group_name'
p54917
S'Advanced'
p54918
sa(dp54919
S'description'
p54920
S'The name of the variable that this Kernel operates on\n'
p54921
sS'cpp_type'
p54922
S'NonlinearVariableName'
p54923
sS'default'
p54924
g3
sS'name'
p54925
S'variable'
p54926
sS'required'
p54927
I01
sS'group_name'
p54928
NsasS'name'
p54929
S'/Kernels/KKSCHBulk'
p54930
sa(dp54931
S'description'
p54932
S'KKS model kernel to enforce the pointwise equality of phase chemical potentials  dFa/dca = dFb/dcb. The non-linear variable of this kernel is ca.\n'
p54933
sS'subblocks'
p54934
NsS'parameters'
p54935
(lp54936
(dp54937
S'description'
p54938
S'Vector of further parameters to Fa (optional, to add in second cross derivatives of Fa)\n'
p54939
sS'cpp_type'
p54940
S'std::vector<VariableName>'
p54941
sS'default'
p54942
g3
sS'name'
p54943
S'args_a'
p54944
sS'required'
p54945
I00
sS'group_name'
p54946
Nsa(dp54947
S'description'
p54948
S'Vector of further parameters to Fb (optional, to add in second cross derivatives of Fb)\n'
p54949
sS'cpp_type'
p54950
S'std::vector<VariableName>'
p54951
sS'default'
p54952
g3
sS'name'
p54953
S'args_b'
p54954
sS'required'
p54955
I00
sS'group_name'
p54956
Nsa(dp54957
S'description'
p54958
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54959
sS'cpp_type'
p54960
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p54961
sS'default'
p54962
g3
sS'name'
p54963
S'block'
p54964
sS'required'
p54965
I00
sS'group_name'
p54966
Nsa(dp54967
S'description'
p54968
S'Phase b concentration\n'
p54969
sS'cpp_type'
p54970
S'std::vector<VariableName>'
p54971
sS'default'
p54972
g3
sS'name'
p54973
S'cb'
p54974
sS'required'
p54975
I01
sS'group_name'
p54976
Nsa(dp54977
S'description'
p54978
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54979
sS'cpp_type'
p54980
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p54981
sS'default'
p54982
g3
sS'name'
p54983
S'control_tags'
p54984
sS'required'
p54985
I00
sS'group_name'
p54986
Nsa(dp54987
S'description'
p54988
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p54989
sS'cpp_type'
p54990
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p54991
sS'default'
p54992
g3
sS'name'
p54993
S'diag_save_in'
p54994
sS'required'
p54995
I00
sS'group_name'
p54996
S'Advanced'
p54997
sa(dp54998
S'description'
p54999
S'Base name of the free energy function Fa (f_name in the corresponding derivative function material)\n'
p55000
sS'cpp_type'
p55001
S'MaterialPropertyName'
p55002
sS'default'
p55003
g3
sS'name'
p55004
S'fa_name'
p55005
sS'required'
p55006
I01
sS'group_name'
p55007
Nsa(dp55008
S'description'
p55009
S'Base name of the free energy function Fb (f_name in the corresponding derivative function material)\n'
p55010
sS'cpp_type'
p55011
S'MaterialPropertyName'
p55012
sS'default'
p55013
g3
sS'name'
p55014
S'fb_name'
p55015
sS'required'
p55016
I01
sS'group_name'
p55017
Nsa(dp55018
S'description'
p55019
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55020
sS'cpp_type'
p55021
S'bool'
p55022
sS'default'
p55023
S'1'
p55024
sS'name'
p55025
S'implicit'
p55026
sS'required'
p55027
I00
sS'group_name'
p55028
S'Advanced'
p55029
sa(dp55030
S'description'
p55031
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55032
sS'cpp_type'
p55033
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55034
sS'default'
p55035
g3
sS'name'
p55036
S'save_in'
p55037
sS'required'
p55038
I00
sS'group_name'
p55039
S'Advanced'
p55040
sa(dp55041
S'description'
p55042
S'The seed for the master random number generator\n'
p55043
sS'cpp_type'
p55044
S'unsigned int'
p55045
sS'default'
p55046
S'0'
p55047
sS'name'
p55048
S'seed'
p55049
sS'required'
p55050
I00
sS'group_name'
p55051
S'Advanced'
p55052
sa(dp55053
S'description'
p55054
g3
sS'cpp_type'
p55055
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55056
sS'default'
p55057
S'KKSPhaseChemicalPotential'
p55058
sS'name'
p55059
S'type'
p55060
sS'required'
p55061
I00
sS'group_name'
p55062
Nsa(dp55063
S'description'
p55064
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55065
sS'cpp_type'
p55066
S'bool'
p55067
sS'default'
p55068
S'0'
p55069
sS'name'
p55070
S'use_displaced_mesh'
p55071
sS'required'
p55072
I00
sS'group_name'
p55073
S'Advanced'
p55074
sa(dp55075
S'description'
p55076
S'The name of the variable that this Kernel operates on\n'
p55077
sS'cpp_type'
p55078
S'NonlinearVariableName'
p55079
sS'default'
p55080
g3
sS'name'
p55081
S'variable'
p55082
sS'required'
p55083
I01
sS'group_name'
p55084
NsasS'name'
p55085
S'/Kernels/KKSPhaseChemicalPotential'
p55086
sa(dp55087
S'description'
p55088
S'KKS model kernel to enforce the decomposition of concentration into phase concentration  (1-h(eta))*ca + h(eta)*cb - c = 0. The non-linear variable of this kernel is cb.\n'
p55089
sS'subblocks'
p55090
NsS'parameters'
p55091
(lp55092
(dp55093
S'description'
p55094
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55095
sS'cpp_type'
p55096
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55097
sS'default'
p55098
g3
sS'name'
p55099
S'block'
p55100
sS'required'
p55101
I00
sS'group_name'
p55102
Nsa(dp55103
S'description'
p55104
S'Real concentration\n'
p55105
sS'cpp_type'
p55106
S'std::vector<VariableName>'
p55107
sS'default'
p55108
g3
sS'name'
p55109
S'c'
p55110
sS'required'
p55111
I01
sS'group_name'
p55112
Nsa(dp55113
S'description'
p55114
S'Phase a concentration\n'
p55115
sS'cpp_type'
p55116
S'std::vector<VariableName>'
p55117
sS'default'
p55118
g3
sS'name'
p55119
S'ca'
p55120
sS'required'
p55121
I01
sS'group_name'
p55122
Nsa(dp55123
S'description'
p55124
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55125
sS'cpp_type'
p55126
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55127
sS'default'
p55128
g3
sS'name'
p55129
S'control_tags'
p55130
sS'required'
p55131
I00
sS'group_name'
p55132
Nsa(dp55133
S'description'
p55134
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55135
sS'cpp_type'
p55136
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55137
sS'default'
p55138
g3
sS'name'
p55139
S'diag_save_in'
p55140
sS'required'
p55141
I00
sS'group_name'
p55142
S'Advanced'
p55143
sa(dp55144
S'description'
p55145
S'Phase a/b order parameter\n'
p55146
sS'cpp_type'
p55147
S'std::vector<VariableName>'
p55148
sS'default'
p55149
g3
sS'name'
p55150
S'eta'
p55151
sS'required'
p55152
I01
sS'group_name'
p55153
Nsa(dp55154
S'description'
p55155
S'Base name for the switching function h(eta)\n'
p55156
sS'cpp_type'
p55157
S'MaterialPropertyName'
p55158
sS'default'
p55159
S'h'
p55160
sS'name'
p55161
S'h_name'
p55162
sS'required'
p55163
I00
sS'group_name'
p55164
Nsa(dp55165
S'description'
p55166
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55167
sS'cpp_type'
p55168
S'bool'
p55169
sS'default'
p55170
S'1'
p55171
sS'name'
p55172
S'implicit'
p55173
sS'required'
p55174
I00
sS'group_name'
p55175
S'Advanced'
p55176
sa(dp55177
S'description'
p55178
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55179
sS'cpp_type'
p55180
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55181
sS'default'
p55182
g3
sS'name'
p55183
S'save_in'
p55184
sS'required'
p55185
I00
sS'group_name'
p55186
S'Advanced'
p55187
sa(dp55188
S'description'
p55189
S'The seed for the master random number generator\n'
p55190
sS'cpp_type'
p55191
S'unsigned int'
p55192
sS'default'
p55193
S'0'
p55194
sS'name'
p55195
S'seed'
p55196
sS'required'
p55197
I00
sS'group_name'
p55198
S'Advanced'
p55199
sa(dp55200
S'description'
p55201
g3
sS'cpp_type'
p55202
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55203
sS'default'
p55204
S'KKSPhaseConcentration'
p55205
sS'name'
p55206
S'type'
p55207
sS'required'
p55208
I00
sS'group_name'
p55209
Nsa(dp55210
S'description'
p55211
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55212
sS'cpp_type'
p55213
S'bool'
p55214
sS'default'
p55215
S'0'
p55216
sS'name'
p55217
S'use_displaced_mesh'
p55218
sS'required'
p55219
I00
sS'group_name'
p55220
S'Advanced'
p55221
sa(dp55222
S'description'
p55223
S'The name of the variable that this Kernel operates on\n'
p55224
sS'cpp_type'
p55225
S'NonlinearVariableName'
p55226
sS'default'
p55227
g3
sS'name'
p55228
S'variable'
p55229
sS'required'
p55230
I01
sS'group_name'
p55231
NsasS'name'
p55232
S'/Kernels/KKSPhaseConcentration'
p55233
sa(dp55234
S'description'
p55235
S"KKS model kernel for the split Bulk Cahn-Hilliard term. This operates on the chemical potential 'c' as the non-linear variable\n"
p55236
sS'subblocks'
p55237
NsS'parameters'
p55238
(lp55239
(dp55240
S'description'
p55241
S'Vector of additional arguments to Fa\n'
p55242
sS'cpp_type'
p55243
S'std::vector<VariableName>'
p55244
sS'default'
p55245
g3
sS'name'
p55246
S'args_a'
p55247
sS'required'
p55248
I00
sS'group_name'
p55249
Nsa(dp55250
S'description'
p55251
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55252
sS'cpp_type'
p55253
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55254
sS'default'
p55255
g3
sS'name'
p55256
S'block'
p55257
sS'required'
p55258
I00
sS'group_name'
p55259
Nsa(dp55260
S'description'
p55261
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p55262
sS'cpp_type'
p55263
S'std::vector<VariableName>'
p55264
sS'default'
p55265
g3
sS'name'
p55266
S'ca'
p55267
sS'required'
p55268
I01
sS'group_name'
p55269
Nsa(dp55270
S'description'
p55271
S'phase concentration corresponding to the non-linear variable of this kernel\n'
p55272
sS'cpp_type'
p55273
S'std::vector<VariableName>'
p55274
sS'default'
p55275
g3
sS'name'
p55276
S'cb'
p55277
sS'required'
p55278
I01
sS'group_name'
p55279
Nsa(dp55280
S'description'
p55281
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55282
sS'cpp_type'
p55283
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55284
sS'default'
p55285
g3
sS'name'
p55286
S'control_tags'
p55287
sS'required'
p55288
I00
sS'group_name'
p55289
Nsa(dp55290
S'description'
p55291
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55292
sS'cpp_type'
p55293
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55294
sS'default'
p55295
g3
sS'name'
p55296
S'diag_save_in'
p55297
sS'required'
p55298
I00
sS'group_name'
p55299
S'Advanced'
p55300
sa(dp55301
S'description'
p55302
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p55303
sS'cpp_type'
p55304
S'MaterialPropertyName'
p55305
sS'default'
p55306
g3
sS'name'
p55307
S'fa_name'
p55308
sS'required'
p55309
I01
sS'group_name'
p55310
Nsa(dp55311
S'description'
p55312
S'Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n'
p55313
sS'cpp_type'
p55314
S'MaterialPropertyName'
p55315
sS'default'
p55316
g3
sS'name'
p55317
S'fb_name'
p55318
sS'required'
p55319
I01
sS'group_name'
p55320
Nsa(dp55321
S'description'
p55322
S'Base name for the switching function h(eta)\n'
p55323
sS'cpp_type'
p55324
S'MaterialPropertyName'
p55325
sS'default'
p55326
S'h'
p55327
sS'name'
p55328
S'h_name'
p55329
sS'required'
p55330
I00
sS'group_name'
p55331
Nsa(dp55332
S'description'
p55333
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55334
sS'cpp_type'
p55335
S'bool'
p55336
sS'default'
p55337
S'1'
p55338
sS'name'
p55339
S'implicit'
p55340
sS'required'
p55341
I00
sS'group_name'
p55342
S'Advanced'
p55343
sa(dp55344
S'description'
p55345
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55346
sS'cpp_type'
p55347
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55348
sS'default'
p55349
g3
sS'name'
p55350
S'save_in'
p55351
sS'required'
p55352
I00
sS'group_name'
p55353
S'Advanced'
p55354
sa(dp55355
S'description'
p55356
S'The seed for the master random number generator\n'
p55357
sS'cpp_type'
p55358
S'unsigned int'
p55359
sS'default'
p55360
S'0'
p55361
sS'name'
p55362
S'seed'
p55363
sS'required'
p55364
I00
sS'group_name'
p55365
S'Advanced'
p55366
sa(dp55367
S'description'
p55368
g3
sS'cpp_type'
p55369
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55370
sS'default'
p55371
S'KKSSplitCHCRes'
p55372
sS'name'
p55373
S'type'
p55374
sS'required'
p55375
I00
sS'group_name'
p55376
Nsa(dp55377
S'description'
p55378
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55379
sS'cpp_type'
p55380
S'bool'
p55381
sS'default'
p55382
S'0'
p55383
sS'name'
p55384
S'use_displaced_mesh'
p55385
sS'required'
p55386
I00
sS'group_name'
p55387
S'Advanced'
p55388
sa(dp55389
S'description'
p55390
S'The name of the variable that this Kernel operates on\n'
p55391
sS'cpp_type'
p55392
S'NonlinearVariableName'
p55393
sS'default'
p55394
g3
sS'name'
p55395
S'variable'
p55396
sS'required'
p55397
I01
sS'group_name'
p55398
Nsa(dp55399
S'description'
p55400
S'Chemical potenial non-linear helper variable for the split solve\n'
p55401
sS'cpp_type'
p55402
S'std::vector<VariableName>'
p55403
sS'default'
p55404
g3
sS'name'
p55405
S'w'
p55406
sS'required'
p55407
I01
sS'group_name'
p55408
NsasS'name'
p55409
S'/Kernels/KKSSplitCHCRes'
p55410
sa(dp55411
S'description'
p55412
S'Source term for non-conserved Langevin noise\n'
p55413
sS'subblocks'
p55414
NsS'parameters'
p55415
(lp55416
(dp55417
S'description'
p55418
S'Amplitude\n'
p55419
sS'cpp_type'
p55420
S'double'
p55421
sS'default'
p55422
g3
sS'name'
p55423
S'amplitude'
p55424
sS'required'
p55425
I01
sS'group_name'
p55426
Nsa(dp55427
S'description'
p55428
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55429
sS'cpp_type'
p55430
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55431
sS'default'
p55432
g3
sS'name'
p55433
S'block'
p55434
sS'required'
p55435
I00
sS'group_name'
p55436
Nsa(dp55437
S'description'
p55438
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55439
sS'cpp_type'
p55440
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55441
sS'default'
p55442
g3
sS'name'
p55443
S'control_tags'
p55444
sS'required'
p55445
I00
sS'group_name'
p55446
Nsa(dp55447
S'description'
p55448
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55449
sS'cpp_type'
p55450
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55451
sS'default'
p55452
g3
sS'name'
p55453
S'diag_save_in'
p55454
sS'required'
p55455
I00
sS'group_name'
p55456
S'Advanced'
p55457
sa(dp55458
S'description'
p55459
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55460
sS'cpp_type'
p55461
S'bool'
p55462
sS'default'
p55463
S'1'
p55464
sS'name'
p55465
S'implicit'
p55466
sS'required'
p55467
I00
sS'group_name'
p55468
S'Advanced'
p55469
sa(dp55470
S'description'
p55471
S'Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n'
p55472
sS'cpp_type'
p55473
S'MaterialPropertyName'
p55474
sS'default'
p55475
S'1'
p55476
sS'name'
p55477
S'multiplier'
p55478
sS'required'
p55479
I00
sS'group_name'
p55480
Nsa(dp55481
S'description'
p55482
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55483
sS'cpp_type'
p55484
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55485
sS'default'
p55486
g3
sS'name'
p55487
S'save_in'
p55488
sS'required'
p55489
I00
sS'group_name'
p55490
S'Advanced'
p55491
sa(dp55492
S'description'
p55493
S'The seed for the master random number generator\n'
p55494
sS'cpp_type'
p55495
S'unsigned int'
p55496
sS'default'
p55497
S'0'
p55498
sS'name'
p55499
S'seed'
p55500
sS'required'
p55501
I00
sS'group_name'
p55502
S'Advanced'
p55503
sa(dp55504
S'description'
p55505
g3
sS'cpp_type'
p55506
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55507
sS'default'
p55508
S'LangevinNoise'
p55509
sS'name'
p55510
S'type'
p55511
sS'required'
p55512
I00
sS'group_name'
p55513
Nsa(dp55514
S'description'
p55515
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55516
sS'cpp_type'
p55517
S'bool'
p55518
sS'default'
p55519
S'0'
p55520
sS'name'
p55521
S'use_displaced_mesh'
p55522
sS'required'
p55523
I00
sS'group_name'
p55524
S'Advanced'
p55525
sa(dp55526
S'description'
p55527
S'The name of the variable that this Kernel operates on\n'
p55528
sS'cpp_type'
p55529
S'NonlinearVariableName'
p55530
sS'default'
p55531
g3
sS'name'
p55532
S'variable'
p55533
sS'required'
p55534
I01
sS'group_name'
p55535
NsasS'name'
p55536
S'/Kernels/LangevinNoise'
p55537
sa(dp55538
S'description'
p55539
S'Kernel that defines a body force modified by a material mask\n'
p55540
sS'subblocks'
p55541
NsS'parameters'
p55542
(lp55543
(dp55544
S'description'
p55545
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55546
sS'cpp_type'
p55547
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55548
sS'default'
p55549
g3
sS'name'
p55550
S'block'
p55551
sS'required'
p55552
I00
sS'group_name'
p55553
Nsa(dp55554
S'description'
p55555
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55556
sS'cpp_type'
p55557
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55558
sS'default'
p55559
g3
sS'name'
p55560
S'control_tags'
p55561
sS'required'
p55562
I00
sS'group_name'
p55563
Nsa(dp55564
S'description'
p55565
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55566
sS'cpp_type'
p55567
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55568
sS'default'
p55569
g3
sS'name'
p55570
S'diag_save_in'
p55571
sS'required'
p55572
I00
sS'group_name'
p55573
S'Advanced'
p55574
sa(dp55575
S'description'
p55576
S'A function that describes the body force\n'
p55577
sS'cpp_type'
p55578
S'FunctionName'
p55579
sS'default'
p55580
S'1'
p55581
sS'name'
p55582
S'function'
p55583
sS'required'
p55584
I00
sS'group_name'
p55585
Nsa(dp55586
S'description'
p55587
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55588
sS'cpp_type'
p55589
S'bool'
p55590
sS'default'
p55591
S'1'
p55592
sS'name'
p55593
S'implicit'
p55594
sS'required'
p55595
I00
sS'group_name'
p55596
S'Advanced'
p55597
sa(dp55598
S'description'
p55599
S'Material property defining the mask\n'
p55600
sS'cpp_type'
p55601
S'MaterialPropertyName'
p55602
sS'default'
p55603
g3
sS'name'
p55604
S'mask'
p55605
sS'required'
p55606
I00
sS'group_name'
p55607
Nsa(dp55608
S'description'
p55609
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55610
sS'cpp_type'
p55611
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55612
sS'default'
p55613
g3
sS'name'
p55614
S'save_in'
p55615
sS'required'
p55616
I00
sS'group_name'
p55617
S'Advanced'
p55618
sa(dp55619
S'description'
p55620
S'The seed for the master random number generator\n'
p55621
sS'cpp_type'
p55622
S'unsigned int'
p55623
sS'default'
p55624
S'0'
p55625
sS'name'
p55626
S'seed'
p55627
sS'required'
p55628
I00
sS'group_name'
p55629
S'Advanced'
p55630
sa(dp55631
S'description'
p55632
g3
sS'cpp_type'
p55633
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55634
sS'default'
p55635
S'MaskedBodyForce'
p55636
sS'name'
p55637
S'type'
p55638
sS'required'
p55639
I00
sS'group_name'
p55640
Nsa(dp55641
S'description'
p55642
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55643
sS'cpp_type'
p55644
S'bool'
p55645
sS'default'
p55646
S'0'
p55647
sS'name'
p55648
S'use_displaced_mesh'
p55649
sS'required'
p55650
I00
sS'group_name'
p55651
S'Advanced'
p55652
sa(dp55653
S'description'
p55654
g3
sS'cpp_type'
p55655
S'double'
p55656
sS'default'
p55657
S'0'
p55658
sS'name'
p55659
S'value'
p55660
sS'required'
p55661
I00
sS'group_name'
p55662
Nsa(dp55663
S'description'
p55664
S'The name of the variable that this Kernel operates on\n'
p55665
sS'cpp_type'
p55666
S'NonlinearVariableName'
p55667
sS'default'
p55668
g3
sS'name'
p55669
S'variable'
p55670
sS'required'
p55671
I01
sS'group_name'
p55672
NsasS'name'
p55673
S'/Kernels/MaskedBodyForce'
p55674
sa(dp55675
S'description'
p55676
g3
sS'subblocks'
p55677
NsS'parameters'
p55678
(lp55679
(dp55680
S'description'
p55681
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55682
sS'cpp_type'
p55683
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55684
sS'default'
p55685
g3
sS'name'
p55686
S'block'
p55687
sS'required'
p55688
I00
sS'group_name'
p55689
Nsa(dp55690
S'description'
p55691
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55692
sS'cpp_type'
p55693
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55694
sS'default'
p55695
g3
sS'name'
p55696
S'control_tags'
p55697
sS'required'
p55698
I00
sS'group_name'
p55699
Nsa(dp55700
S'description'
p55701
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55702
sS'cpp_type'
p55703
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55704
sS'default'
p55705
g3
sS'name'
p55706
S'diag_save_in'
p55707
sS'required'
p55708
I00
sS'group_name'
p55709
S'Advanced'
p55710
sa(dp55711
S'description'
p55712
S'Use for eigenvalue problem (true) or source problem (false)\n'
p55713
sS'cpp_type'
p55714
S'bool'
p55715
sS'default'
p55716
S'1'
p55717
sS'name'
p55718
S'eigen'
p55719
sS'required'
p55720
I00
sS'group_name'
p55721
Nsa(dp55722
S'description'
p55723
S'The name of the postprocessor that provides the eigenvalue.\n'
p55724
sS'cpp_type'
p55725
S'PostprocessorName'
p55726
sS'default'
p55727
S'1'
p55728
sS'name'
p55729
S'eigen_postprocessor'
p55730
sS'required'
p55731
I00
sS'group_name'
p55732
Nsa(dp55733
S'description'
p55734
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55735
sS'cpp_type'
p55736
S'bool'
p55737
sS'default'
p55738
S'1'
p55739
sS'name'
p55740
S'implicit'
p55741
sS'required'
p55742
I00
sS'group_name'
p55743
S'Advanced'
p55744
sa(dp55745
S'description'
p55746
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55747
sS'cpp_type'
p55748
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55749
sS'default'
p55750
g3
sS'name'
p55751
S'save_in'
p55752
sS'required'
p55753
I00
sS'group_name'
p55754
S'Advanced'
p55755
sa(dp55756
S'description'
p55757
S'The seed for the master random number generator\n'
p55758
sS'cpp_type'
p55759
S'unsigned int'
p55760
sS'default'
p55761
S'0'
p55762
sS'name'
p55763
S'seed'
p55764
sS'required'
p55765
I00
sS'group_name'
p55766
S'Advanced'
p55767
sa(dp55768
S'description'
p55769
g3
sS'cpp_type'
p55770
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55771
sS'default'
p55772
S'MassEigenKernel'
p55773
sS'name'
p55774
S'type'
p55775
sS'required'
p55776
I00
sS'group_name'
p55777
Nsa(dp55778
S'description'
p55779
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55780
sS'cpp_type'
p55781
S'bool'
p55782
sS'default'
p55783
S'0'
p55784
sS'name'
p55785
S'use_displaced_mesh'
p55786
sS'required'
p55787
I00
sS'group_name'
p55788
S'Advanced'
p55789
sa(dp55790
S'description'
p55791
S'The name of the variable that this Kernel operates on\n'
p55792
sS'cpp_type'
p55793
S'NonlinearVariableName'
p55794
sS'default'
p55795
g3
sS'name'
p55796
S'variable'
p55797
sS'required'
p55798
I01
sS'group_name'
p55799
NsasS'name'
p55800
S'/Kernels/MassEigenKernel'
p55801
sa(dp55802
S'description'
p55803
g3
sS'subblocks'
p55804
NsS'parameters'
p55805
(lp55806
(dp55807
S'description'
p55808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55809
sS'cpp_type'
p55810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55811
sS'default'
p55812
g3
sS'name'
p55813
S'block'
p55814
sS'required'
p55815
I00
sS'group_name'
p55816
Nsa(dp55817
S'description'
p55818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55819
sS'cpp_type'
p55820
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55821
sS'default'
p55822
g3
sS'name'
p55823
S'control_tags'
p55824
sS'required'
p55825
I00
sS'group_name'
p55826
Nsa(dp55827
S'description'
p55828
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55829
sS'cpp_type'
p55830
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55831
sS'default'
p55832
g3
sS'name'
p55833
S'diag_save_in'
p55834
sS'required'
p55835
I00
sS'group_name'
p55836
S'Advanced'
p55837
sa(dp55838
S'description'
p55839
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55840
sS'cpp_type'
p55841
S'bool'
p55842
sS'default'
p55843
S'1'
p55844
sS'name'
p55845
S'implicit'
p55846
sS'required'
p55847
I00
sS'group_name'
p55848
S'Advanced'
p55849
sa(dp55850
S'description'
p55851
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55852
sS'cpp_type'
p55853
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55854
sS'default'
p55855
g3
sS'name'
p55856
S'save_in'
p55857
sS'required'
p55858
I00
sS'group_name'
p55859
S'Advanced'
p55860
sa(dp55861
S'description'
p55862
S'The seed for the master random number generator\n'
p55863
sS'cpp_type'
p55864
S'unsigned int'
p55865
sS'default'
p55866
S'0'
p55867
sS'name'
p55868
S'seed'
p55869
sS'required'
p55870
I00
sS'group_name'
p55871
S'Advanced'
p55872
sa(dp55873
S'description'
p55874
g3
sS'cpp_type'
p55875
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p55876
sS'default'
p55877
S'MassLumpedTimeDerivative'
p55878
sS'name'
p55879
S'type'
p55880
sS'required'
p55881
I00
sS'group_name'
p55882
Nsa(dp55883
S'description'
p55884
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p55885
sS'cpp_type'
p55886
S'bool'
p55887
sS'default'
p55888
S'0'
p55889
sS'name'
p55890
S'use_displaced_mesh'
p55891
sS'required'
p55892
I00
sS'group_name'
p55893
S'Advanced'
p55894
sa(dp55895
S'description'
p55896
S'The name of the variable that this Kernel operates on\n'
p55897
sS'cpp_type'
p55898
S'NonlinearVariableName'
p55899
sS'default'
p55900
g3
sS'name'
p55901
S'variable'
p55902
sS'required'
p55903
I01
sS'group_name'
p55904
NsasS'name'
p55905
S'/Kernels/MassLumpedTimeDerivative'
p55906
sa(dp55907
S'description'
p55908
S'Diffusion equation Kernel that takes an anisotropic Diffusivity from a material property\n'
p55909
sS'subblocks'
p55910
NsS'parameters'
p55911
(lp55912
(dp55913
S'description'
p55914
S'The name of the diffusivity\n'
p55915
sS'cpp_type'
p55916
S'MaterialPropertyName'
p55917
sS'default'
p55918
S'D'
p55919
sS'name'
p55920
S'D_name'
p55921
sS'required'
p55922
I00
sS'group_name'
p55923
Nsa(dp55924
S'description'
p55925
S'Vector of arguments of the diffusivity\n'
p55926
sS'cpp_type'
p55927
S'std::vector<VariableName>'
p55928
sS'default'
p55929
g3
sS'name'
p55930
S'args'
p55931
sS'required'
p55932
I00
sS'group_name'
p55933
Nsa(dp55934
S'description'
p55935
S'The list of block ids (SubdomainID) that this object will be applied\n'
p55936
sS'cpp_type'
p55937
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p55938
sS'default'
p55939
g3
sS'name'
p55940
S'block'
p55941
sS'required'
p55942
I00
sS'group_name'
p55943
Nsa(dp55944
S'description'
p55945
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55946
sS'cpp_type'
p55947
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p55948
sS'default'
p55949
g3
sS'name'
p55950
S'control_tags'
p55951
sS'required'
p55952
I00
sS'group_name'
p55953
Nsa(dp55954
S'description'
p55955
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55956
sS'cpp_type'
p55957
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55958
sS'default'
p55959
g3
sS'name'
p55960
S'diag_save_in'
p55961
sS'required'
p55962
I00
sS'group_name'
p55963
S'Advanced'
p55964
sa(dp55965
S'description'
p55966
S'Determines whether this object is calculated using an implicit or explicit form\n'
p55967
sS'cpp_type'
p55968
S'bool'
p55969
sS'default'
p55970
S'1'
p55971
sS'name'
p55972
S'implicit'
p55973
sS'required'
p55974
I00
sS'group_name'
p55975
S'Advanced'
p55976
sa(dp55977
S'description'
p55978
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p55979
sS'cpp_type'
p55980
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p55981
sS'default'
p55982
g3
sS'name'
p55983
S'save_in'
p55984
sS'required'
p55985
I00
sS'group_name'
p55986
S'Advanced'
p55987
sa(dp55988
S'description'
p55989
S'The seed for the master random number generator\n'
p55990
sS'cpp_type'
p55991
S'unsigned int'
p55992
sS'default'
p55993
S'0'
p55994
sS'name'
p55995
S'seed'
p55996
sS'required'
p55997
I00
sS'group_name'
p55998
S'Advanced'
p55999
sa(dp56000
S'description'
p56001
g3
sS'cpp_type'
p56002
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56003
sS'default'
p56004
S'MatAnisoDiffusion'
p56005
sS'name'
p56006
S'type'
p56007
sS'required'
p56008
I00
sS'group_name'
p56009
Nsa(dp56010
S'description'
p56011
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56012
sS'cpp_type'
p56013
S'bool'
p56014
sS'default'
p56015
S'0'
p56016
sS'name'
p56017
S'use_displaced_mesh'
p56018
sS'required'
p56019
I00
sS'group_name'
p56020
S'Advanced'
p56021
sa(dp56022
S'description'
p56023
S'The name of the variable that this Kernel operates on\n'
p56024
sS'cpp_type'
p56025
S'NonlinearVariableName'
p56026
sS'default'
p56027
g3
sS'name'
p56028
S'variable'
p56029
sS'required'
p56030
I01
sS'group_name'
p56031
NsasS'name'
p56032
S'/Kernels/MatAnisoDiffusion'
p56033
sa(dp56034
S'description'
p56035
S'Diffusion equation Kernel that takes an isotropic Diffusivity from a material property\n'
p56036
sS'subblocks'
p56037
NsS'parameters'
p56038
(lp56039
(dp56040
S'description'
p56041
S'The name of the diffusivity\n'
p56042
sS'cpp_type'
p56043
S'MaterialPropertyName'
p56044
sS'default'
p56045
S'D'
p56046
sS'name'
p56047
S'D_name'
p56048
sS'required'
p56049
I00
sS'group_name'
p56050
Nsa(dp56051
S'description'
p56052
S'Vector of arguments of the diffusivity\n'
p56053
sS'cpp_type'
p56054
S'std::vector<VariableName>'
p56055
sS'default'
p56056
g3
sS'name'
p56057
S'args'
p56058
sS'required'
p56059
I00
sS'group_name'
p56060
Nsa(dp56061
S'description'
p56062
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56063
sS'cpp_type'
p56064
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56065
sS'default'
p56066
g3
sS'name'
p56067
S'block'
p56068
sS'required'
p56069
I00
sS'group_name'
p56070
Nsa(dp56071
S'description'
p56072
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56073
sS'cpp_type'
p56074
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56075
sS'default'
p56076
g3
sS'name'
p56077
S'control_tags'
p56078
sS'required'
p56079
I00
sS'group_name'
p56080
Nsa(dp56081
S'description'
p56082
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56083
sS'cpp_type'
p56084
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56085
sS'default'
p56086
g3
sS'name'
p56087
S'diag_save_in'
p56088
sS'required'
p56089
I00
sS'group_name'
p56090
S'Advanced'
p56091
sa(dp56092
S'description'
p56093
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56094
sS'cpp_type'
p56095
S'bool'
p56096
sS'default'
p56097
S'1'
p56098
sS'name'
p56099
S'implicit'
p56100
sS'required'
p56101
I00
sS'group_name'
p56102
S'Advanced'
p56103
sa(dp56104
S'description'
p56105
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56106
sS'cpp_type'
p56107
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56108
sS'default'
p56109
g3
sS'name'
p56110
S'save_in'
p56111
sS'required'
p56112
I00
sS'group_name'
p56113
S'Advanced'
p56114
sa(dp56115
S'description'
p56116
S'The seed for the master random number generator\n'
p56117
sS'cpp_type'
p56118
S'unsigned int'
p56119
sS'default'
p56120
S'0'
p56121
sS'name'
p56122
S'seed'
p56123
sS'required'
p56124
I00
sS'group_name'
p56125
S'Advanced'
p56126
sa(dp56127
S'description'
p56128
g3
sS'cpp_type'
p56129
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56130
sS'default'
p56131
S'MatDiffusion'
p56132
sS'name'
p56133
S'type'
p56134
sS'required'
p56135
I00
sS'group_name'
p56136
Nsa(dp56137
S'description'
p56138
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56139
sS'cpp_type'
p56140
S'bool'
p56141
sS'default'
p56142
S'0'
p56143
sS'name'
p56144
S'use_displaced_mesh'
p56145
sS'required'
p56146
I00
sS'group_name'
p56147
S'Advanced'
p56148
sa(dp56149
S'description'
p56150
S'The name of the variable that this Kernel operates on\n'
p56151
sS'cpp_type'
p56152
S'NonlinearVariableName'
p56153
sS'default'
p56154
g3
sS'name'
p56155
S'variable'
p56156
sS'required'
p56157
I01
sS'group_name'
p56158
NsasS'name'
p56159
S'/Kernels/MatDiffusion'
p56160
sa(dp56161
S'description'
p56162
g3
sS'subblocks'
p56163
NsS'parameters'
p56164
(lp56165
(dp56166
S'description'
p56167
S'Name appended to material properties to make them unique\n'
p56168
sS'cpp_type'
p56169
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56170
sS'default'
p56171
g3
sS'name'
p56172
S'appended_property_name'
p56173
sS'required'
p56174
I00
sS'group_name'
p56175
Nsa(dp56176
S'description'
p56177
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56178
sS'cpp_type'
p56179
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56180
sS'default'
p56181
g3
sS'name'
p56182
S'block'
p56183
sS'required'
p56184
I00
sS'group_name'
p56185
Nsa(dp56186
S'description'
p56187
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p56188
sS'cpp_type'
p56189
S'unsigned int'
p56190
sS'default'
p56191
g3
sS'name'
p56192
S'component'
p56193
sS'required'
p56194
I01
sS'group_name'
p56195
Nsa(dp56196
S'description'
p56197
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56198
sS'cpp_type'
p56199
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56200
sS'default'
p56201
g3
sS'name'
p56202
S'control_tags'
p56203
sS'required'
p56204
I00
sS'group_name'
p56205
Nsa(dp56206
S'description'
p56207
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56208
sS'cpp_type'
p56209
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56210
sS'default'
p56211
g3
sS'name'
p56212
S'diag_save_in'
p56213
sS'required'
p56214
I00
sS'group_name'
p56215
S'Advanced'
p56216
sa(dp56217
S'description'
p56218
S'The x displacement\n'
p56219
sS'cpp_type'
p56220
S'std::vector<VariableName>'
p56221
sS'default'
p56222
g3
sS'name'
p56223
S'disp_x'
p56224
sS'required'
p56225
I00
sS'group_name'
p56226
Nsa(dp56227
S'description'
p56228
S'The y displacement\n'
p56229
sS'cpp_type'
p56230
S'std::vector<VariableName>'
p56231
sS'default'
p56232
g3
sS'name'
p56233
S'disp_y'
p56234
sS'required'
p56235
I00
sS'group_name'
p56236
Nsa(dp56237
S'description'
p56238
S'The z displacement\n'
p56239
sS'cpp_type'
p56240
S'std::vector<VariableName>'
p56241
sS'default'
p56242
g3
sS'name'
p56243
S'disp_z'
p56244
sS'required'
p56245
I00
sS'group_name'
p56246
Nsa(dp56247
S'description'
p56248
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56249
sS'cpp_type'
p56250
S'bool'
p56251
sS'default'
p56252
S'1'
p56253
sS'name'
p56254
S'implicit'
p56255
sS'required'
p56256
I00
sS'group_name'
p56257
S'Advanced'
p56258
sa(dp56259
S'description'
p56260
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56261
sS'cpp_type'
p56262
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56263
sS'default'
p56264
g3
sS'name'
p56265
S'save_in'
p56266
sS'required'
p56267
I00
sS'group_name'
p56268
S'Advanced'
p56269
sa(dp56270
S'description'
p56271
S'The seed for the master random number generator\n'
p56272
sS'cpp_type'
p56273
S'unsigned int'
p56274
sS'default'
p56275
S'0'
p56276
sS'name'
p56277
S'seed'
p56278
sS'required'
p56279
I00
sS'group_name'
p56280
S'Advanced'
p56281
sa(dp56282
S'description'
p56283
g3
sS'cpp_type'
p56284
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56285
sS'default'
p56286
S'MomentBalancing'
p56287
sS'name'
p56288
S'type'
p56289
sS'required'
p56290
I00
sS'group_name'
p56291
Nsa(dp56292
S'description'
p56293
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56294
sS'cpp_type'
p56295
S'bool'
p56296
sS'default'
p56297
S'0'
p56298
sS'name'
p56299
S'use_displaced_mesh'
p56300
sS'required'
p56301
I00
sS'group_name'
p56302
S'Advanced'
p56303
sa(dp56304
S'description'
p56305
S'The name of the variable that this Kernel operates on\n'
p56306
sS'cpp_type'
p56307
S'NonlinearVariableName'
p56308
sS'default'
p56309
g3
sS'name'
p56310
S'variable'
p56311
sS'required'
p56312
I01
sS'group_name'
p56313
Nsa(dp56314
S'description'
p56315
S'The Cosserat rotation about x\n'
p56316
sS'cpp_type'
p56317
S'std::vector<VariableName>'
p56318
sS'default'
p56319
g3
sS'name'
p56320
S'wc_x'
p56321
sS'required'
p56322
I00
sS'group_name'
p56323
Nsa(dp56324
S'description'
p56325
S'The Cosserat rotation about y\n'
p56326
sS'cpp_type'
p56327
S'std::vector<VariableName>'
p56328
sS'default'
p56329
g3
sS'name'
p56330
S'wc_y'
p56331
sS'required'
p56332
I00
sS'group_name'
p56333
Nsa(dp56334
S'description'
p56335
S'The Cosserat rotation about z\n'
p56336
sS'cpp_type'
p56337
S'std::vector<VariableName>'
p56338
sS'default'
p56339
g3
sS'name'
p56340
S'wc_z'
p56341
sS'required'
p56342
I00
sS'group_name'
p56343
NsasS'name'
p56344
S'/Kernels/MomentBalancing'
p56345
sa(dp56346
S'description'
p56347
S'Adds rigid mody motion to grains\n'
p56348
sS'subblocks'
p56349
NsS'parameters'
p56350
(lp56351
(dp56352
S'description'
p56353
S'Optional parameter that allows the user to define type of force density under consideration\n'
p56354
sS'cpp_type'
p56355
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56356
sS'default'
p56357
g3
sS'name'
p56358
S'base_name'
p56359
sS'required'
p56360
I00
sS'group_name'
p56361
Nsa(dp56362
S'description'
p56363
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56364
sS'cpp_type'
p56365
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56366
sS'default'
p56367
g3
sS'name'
p56368
S'block'
p56369
sS'required'
p56370
I00
sS'group_name'
p56371
Nsa(dp56372
S'description'
p56373
S'Concentration\n'
p56374
sS'cpp_type'
p56375
S'std::vector<VariableName>'
p56376
sS'default'
p56377
g3
sS'name'
p56378
S'c'
p56379
sS'required'
p56380
I01
sS'group_name'
p56381
Nsa(dp56382
S'description'
p56383
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56384
sS'cpp_type'
p56385
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56386
sS'default'
p56387
g3
sS'name'
p56388
S'control_tags'
p56389
sS'required'
p56390
I00
sS'group_name'
p56391
Nsa(dp56392
S'description'
p56393
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56394
sS'cpp_type'
p56395
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56396
sS'default'
p56397
g3
sS'name'
p56398
S'diag_save_in'
p56399
sS'required'
p56400
I00
sS'group_name'
p56401
S'Advanced'
p56402
sa(dp56403
S'description'
p56404
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56405
sS'cpp_type'
p56406
S'bool'
p56407
sS'default'
p56408
S'1'
p56409
sS'name'
p56410
S'implicit'
p56411
sS'required'
p56412
I00
sS'group_name'
p56413
S'Advanced'
p56414
sa(dp56415
S'description'
p56416
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56417
sS'cpp_type'
p56418
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56419
sS'default'
p56420
g3
sS'name'
p56421
S'save_in'
p56422
sS'required'
p56423
I00
sS'group_name'
p56424
S'Advanced'
p56425
sa(dp56426
S'description'
p56427
S'The seed for the master random number generator\n'
p56428
sS'cpp_type'
p56429
S'unsigned int'
p56430
sS'default'
p56431
S'0'
p56432
sS'name'
p56433
S'seed'
p56434
sS'required'
p56435
I00
sS'group_name'
p56436
S'Advanced'
p56437
sa(dp56438
S'description'
p56439
g3
sS'cpp_type'
p56440
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56441
sS'default'
p56442
S'MultiGrainRigidBodyMotion'
p56443
sS'name'
p56444
S'type'
p56445
sS'required'
p56446
I00
sS'group_name'
p56447
Nsa(dp56448
S'description'
p56449
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56450
sS'cpp_type'
p56451
S'bool'
p56452
sS'default'
p56453
S'0'
p56454
sS'name'
p56455
S'use_displaced_mesh'
p56456
sS'required'
p56457
I00
sS'group_name'
p56458
S'Advanced'
p56459
sa(dp56460
S'description'
p56461
S'Array of coupled variable names\n'
p56462
sS'cpp_type'
p56463
S'std::vector<VariableName>'
p56464
sS'default'
p56465
g3
sS'name'
p56466
S'v'
p56467
sS'required'
p56468
I01
sS'group_name'
p56469
Nsa(dp56470
S'description'
p56471
S'The name of the variable that this Kernel operates on\n'
p56472
sS'cpp_type'
p56473
S'NonlinearVariableName'
p56474
sS'default'
p56475
g3
sS'name'
p56476
S'variable'
p56477
sS'required'
p56478
I01
sS'group_name'
p56479
NsasS'name'
p56480
S'/Kernels/MultiGrainRigidBodyMotion'
p56481
sa(dp56482
S'description'
p56483
g3
sS'subblocks'
p56484
NsS'parameters'
p56485
(lp56486
(dp56487
S'description'
p56488
S'Gas constant.\n'
p56489
sS'cpp_type'
p56490
S'double'
p56491
sS'default'
p56492
g3
sS'name'
p56493
S'R'
p56494
sS'required'
p56495
I01
sS'group_name'
p56496
Nsa(dp56497
S'description'
p56498
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56499
sS'cpp_type'
p56500
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56501
sS'default'
p56502
g3
sS'name'
p56503
S'block'
p56504
sS'required'
p56505
I00
sS'group_name'
p56506
Nsa(dp56507
S'description'
p56508
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56509
sS'cpp_type'
p56510
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56511
sS'default'
p56512
g3
sS'name'
p56513
S'control_tags'
p56514
sS'required'
p56515
I00
sS'group_name'
p56516
Nsa(dp56517
S'description'
p56518
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56519
sS'cpp_type'
p56520
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56521
sS'default'
p56522
g3
sS'name'
p56523
S'diag_save_in'
p56524
sS'required'
p56525
I00
sS'group_name'
p56526
S'Advanced'
p56527
sa(dp56528
S'description'
p56529
g3
sS'cpp_type'
p56530
S'std::vector<VariableName>'
p56531
sS'default'
p56532
g3
sS'name'
p56533
S'enthalpy'
p56534
sS'required'
p56535
I01
sS'group_name'
p56536
Nsa(dp56537
S'description'
p56538
S'Ratio of specific heats\n'
p56539
sS'cpp_type'
p56540
S'double'
p56541
sS'default'
p56542
g3
sS'name'
p56543
S'gamma'
p56544
sS'required'
p56545
I01
sS'group_name'
p56546
Nsa(dp56547
S'description'
p56548
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56549
sS'cpp_type'
p56550
S'bool'
p56551
sS'default'
p56552
S'1'
p56553
sS'name'
p56554
S'implicit'
p56555
sS'required'
p56556
I00
sS'group_name'
p56557
S'Advanced'
p56558
sa(dp56559
S'description'
p56560
S'density\n'
p56561
sS'cpp_type'
p56562
S'std::vector<VariableName>'
p56563
sS'default'
p56564
g3
sS'name'
p56565
S'rho'
p56566
sS'required'
p56567
I01
sS'group_name'
p56568
Nsa(dp56569
S'description'
p56570
S'energy\n'
p56571
sS'cpp_type'
p56572
S'std::vector<VariableName>'
p56573
sS'default'
p56574
g3
sS'name'
p56575
S'rhoe'
p56576
sS'required'
p56577
I01
sS'group_name'
p56578
Nsa(dp56579
S'description'
p56580
S'x-momentum\n'
p56581
sS'cpp_type'
p56582
S'std::vector<VariableName>'
p56583
sS'default'
p56584
g3
sS'name'
p56585
S'rhou'
p56586
sS'required'
p56587
I01
sS'group_name'
p56588
Nsa(dp56589
S'description'
p56590
S'y-momentum\n'
p56591
sS'cpp_type'
p56592
S'std::vector<VariableName>'
p56593
sS'default'
p56594
g3
sS'name'
p56595
S'rhov'
p56596
sS'required'
p56597
I00
sS'group_name'
p56598
Nsa(dp56599
S'description'
p56600
S'z-momentum\n'
p56601
sS'cpp_type'
p56602
S'std::vector<VariableName>'
p56603
sS'default'
p56604
g3
sS'name'
p56605
S'rhow'
p56606
sS'required'
p56607
I00
sS'group_name'
p56608
Nsa(dp56609
S'description'
p56610
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56611
sS'cpp_type'
p56612
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56613
sS'default'
p56614
g3
sS'name'
p56615
S'save_in'
p56616
sS'required'
p56617
I00
sS'group_name'
p56618
S'Advanced'
p56619
sa(dp56620
S'description'
p56621
S'The seed for the master random number generator\n'
p56622
sS'cpp_type'
p56623
S'unsigned int'
p56624
sS'default'
p56625
S'0'
p56626
sS'name'
p56627
S'seed'
p56628
sS'required'
p56629
I00
sS'group_name'
p56630
S'Advanced'
p56631
sa(dp56632
S'description'
p56633
g3
sS'cpp_type'
p56634
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56635
sS'default'
p56636
S'NSEnergyInviscidFlux'
p56637
sS'name'
p56638
S'type'
p56639
sS'required'
p56640
I00
sS'group_name'
p56641
Nsa(dp56642
S'description'
p56643
g3
sS'cpp_type'
p56644
S'std::vector<VariableName>'
p56645
sS'default'
p56646
g3
sS'name'
p56647
S'u'
p56648
sS'required'
p56649
I01
sS'group_name'
p56650
Nsa(dp56651
S'description'
p56652
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56653
sS'cpp_type'
p56654
S'bool'
p56655
sS'default'
p56656
S'0'
p56657
sS'name'
p56658
S'use_displaced_mesh'
p56659
sS'required'
p56660
I00
sS'group_name'
p56661
S'Advanced'
p56662
sa(dp56663
S'description'
p56664
g3
sS'cpp_type'
p56665
S'std::vector<VariableName>'
p56666
sS'default'
p56667
g3
sS'name'
p56668
S'v'
p56669
sS'required'
p56670
I00
sS'group_name'
p56671
Nsa(dp56672
S'description'
p56673
S'The name of the variable that this Kernel operates on\n'
p56674
sS'cpp_type'
p56675
S'NonlinearVariableName'
p56676
sS'default'
p56677
g3
sS'name'
p56678
S'variable'
p56679
sS'required'
p56680
I01
sS'group_name'
p56681
Nsa(dp56682
S'description'
p56683
g3
sS'cpp_type'
p56684
S'std::vector<VariableName>'
p56685
sS'default'
p56686
g3
sS'name'
p56687
S'w'
p56688
sS'required'
p56689
I00
sS'group_name'
p56690
NsasS'name'
p56691
S'/Kernels/NSEnergyInviscidFlux'
p56692
sa(dp56693
S'description'
p56694
g3
sS'subblocks'
p56695
NsS'parameters'
p56696
(lp56697
(dp56698
S'description'
p56699
S'Gas constant.\n'
p56700
sS'cpp_type'
p56701
S'double'
p56702
sS'default'
p56703
g3
sS'name'
p56704
S'R'
p56705
sS'required'
p56706
I01
sS'group_name'
p56707
Nsa(dp56708
S'description'
p56709
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56710
sS'cpp_type'
p56711
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56712
sS'default'
p56713
g3
sS'name'
p56714
S'block'
p56715
sS'required'
p56716
I00
sS'group_name'
p56717
Nsa(dp56718
S'description'
p56719
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56720
sS'cpp_type'
p56721
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56722
sS'default'
p56723
g3
sS'name'
p56724
S'control_tags'
p56725
sS'required'
p56726
I00
sS'group_name'
p56727
Nsa(dp56728
S'description'
p56729
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56730
sS'cpp_type'
p56731
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56732
sS'default'
p56733
g3
sS'name'
p56734
S'diag_save_in'
p56735
sS'required'
p56736
I00
sS'group_name'
p56737
S'Advanced'
p56738
sa(dp56739
S'description'
p56740
S'Ratio of specific heats\n'
p56741
sS'cpp_type'
p56742
S'double'
p56743
sS'default'
p56744
g3
sS'name'
p56745
S'gamma'
p56746
sS'required'
p56747
I01
sS'group_name'
p56748
Nsa(dp56749
S'description'
p56750
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56751
sS'cpp_type'
p56752
S'bool'
p56753
sS'default'
p56754
S'1'
p56755
sS'name'
p56756
S'implicit'
p56757
sS'required'
p56758
I00
sS'group_name'
p56759
S'Advanced'
p56760
sa(dp56761
S'description'
p56762
S'density\n'
p56763
sS'cpp_type'
p56764
S'std::vector<VariableName>'
p56765
sS'default'
p56766
g3
sS'name'
p56767
S'rho'
p56768
sS'required'
p56769
I01
sS'group_name'
p56770
Nsa(dp56771
S'description'
p56772
S'energy\n'
p56773
sS'cpp_type'
p56774
S'std::vector<VariableName>'
p56775
sS'default'
p56776
g3
sS'name'
p56777
S'rhoe'
p56778
sS'required'
p56779
I01
sS'group_name'
p56780
Nsa(dp56781
S'description'
p56782
S'x-momentum\n'
p56783
sS'cpp_type'
p56784
S'std::vector<VariableName>'
p56785
sS'default'
p56786
g3
sS'name'
p56787
S'rhou'
p56788
sS'required'
p56789
I01
sS'group_name'
p56790
Nsa(dp56791
S'description'
p56792
S'y-momentum\n'
p56793
sS'cpp_type'
p56794
S'std::vector<VariableName>'
p56795
sS'default'
p56796
g3
sS'name'
p56797
S'rhov'
p56798
sS'required'
p56799
I00
sS'group_name'
p56800
Nsa(dp56801
S'description'
p56802
S'z-momentum\n'
p56803
sS'cpp_type'
p56804
S'std::vector<VariableName>'
p56805
sS'default'
p56806
g3
sS'name'
p56807
S'rhow'
p56808
sS'required'
p56809
I00
sS'group_name'
p56810
Nsa(dp56811
S'description'
p56812
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56813
sS'cpp_type'
p56814
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56815
sS'default'
p56816
g3
sS'name'
p56817
S'save_in'
p56818
sS'required'
p56819
I00
sS'group_name'
p56820
S'Advanced'
p56821
sa(dp56822
S'description'
p56823
S'The seed for the master random number generator\n'
p56824
sS'cpp_type'
p56825
S'unsigned int'
p56826
sS'default'
p56827
S'0'
p56828
sS'name'
p56829
S'seed'
p56830
sS'required'
p56831
I00
sS'group_name'
p56832
S'Advanced'
p56833
sa(dp56834
S'description'
p56835
g3
sS'cpp_type'
p56836
S'std::vector<VariableName>'
p56837
sS'default'
p56838
g3
sS'name'
p56839
S'temperature'
p56840
sS'required'
p56841
I01
sS'group_name'
p56842
Nsa(dp56843
S'description'
p56844
g3
sS'cpp_type'
p56845
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p56846
sS'default'
p56847
S'NSEnergyThermalFlux'
p56848
sS'name'
p56849
S'type'
p56850
sS'required'
p56851
I00
sS'group_name'
p56852
Nsa(dp56853
S'description'
p56854
g3
sS'cpp_type'
p56855
S'std::vector<VariableName>'
p56856
sS'default'
p56857
g3
sS'name'
p56858
S'u'
p56859
sS'required'
p56860
I01
sS'group_name'
p56861
Nsa(dp56862
S'description'
p56863
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p56864
sS'cpp_type'
p56865
S'bool'
p56866
sS'default'
p56867
S'0'
p56868
sS'name'
p56869
S'use_displaced_mesh'
p56870
sS'required'
p56871
I00
sS'group_name'
p56872
S'Advanced'
p56873
sa(dp56874
S'description'
p56875
g3
sS'cpp_type'
p56876
S'std::vector<VariableName>'
p56877
sS'default'
p56878
g3
sS'name'
p56879
S'v'
p56880
sS'required'
p56881
I00
sS'group_name'
p56882
Nsa(dp56883
S'description'
p56884
S'The name of the variable that this Kernel operates on\n'
p56885
sS'cpp_type'
p56886
S'NonlinearVariableName'
p56887
sS'default'
p56888
g3
sS'name'
p56889
S'variable'
p56890
sS'required'
p56891
I01
sS'group_name'
p56892
Nsa(dp56893
S'description'
p56894
g3
sS'cpp_type'
p56895
S'std::vector<VariableName>'
p56896
sS'default'
p56897
g3
sS'name'
p56898
S'w'
p56899
sS'required'
p56900
I00
sS'group_name'
p56901
NsasS'name'
p56902
S'/Kernels/NSEnergyThermalFlux'
p56903
sa(dp56904
S'description'
p56905
g3
sS'subblocks'
p56906
NsS'parameters'
p56907
(lp56908
(dp56909
S'description'
p56910
S'Gas constant.\n'
p56911
sS'cpp_type'
p56912
S'double'
p56913
sS'default'
p56914
g3
sS'name'
p56915
S'R'
p56916
sS'required'
p56917
I01
sS'group_name'
p56918
Nsa(dp56919
S'description'
p56920
S'The list of block ids (SubdomainID) that this object will be applied\n'
p56921
sS'cpp_type'
p56922
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p56923
sS'default'
p56924
g3
sS'name'
p56925
S'block'
p56926
sS'required'
p56927
I00
sS'group_name'
p56928
Nsa(dp56929
S'description'
p56930
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p56931
sS'cpp_type'
p56932
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p56933
sS'default'
p56934
g3
sS'name'
p56935
S'control_tags'
p56936
sS'required'
p56937
I00
sS'group_name'
p56938
Nsa(dp56939
S'description'
p56940
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p56941
sS'cpp_type'
p56942
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p56943
sS'default'
p56944
g3
sS'name'
p56945
S'diag_save_in'
p56946
sS'required'
p56947
I00
sS'group_name'
p56948
S'Advanced'
p56949
sa(dp56950
S'description'
p56951
S'Ratio of specific heats\n'
p56952
sS'cpp_type'
p56953
S'double'
p56954
sS'default'
p56955
g3
sS'name'
p56956
S'gamma'
p56957
sS'required'
p56958
I01
sS'group_name'
p56959
Nsa(dp56960
S'description'
p56961
S'Determines whether this object is calculated using an implicit or explicit form\n'
p56962
sS'cpp_type'
p56963
S'bool'
p56964
sS'default'
p56965
S'1'
p56966
sS'name'
p56967
S'implicit'
p56968
sS'required'
p56969
I00
sS'group_name'
p56970
S'Advanced'
p56971
sa(dp56972
S'description'
p56973
S'density\n'
p56974
sS'cpp_type'
p56975
S'std::vector<VariableName>'
p56976
sS'default'
p56977
g3
sS'name'
p56978
S'rho'
p56979
sS'required'
p56980
I01
sS'group_name'
p56981
Nsa(dp56982
S'description'
p56983
S'energy\n'
p56984
sS'cpp_type'
p56985
S'std::vector<VariableName>'
p56986
sS'default'
p56987
g3
sS'name'
p56988
S'rhoe'
p56989
sS'required'
p56990
I01
sS'group_name'
p56991
Nsa(dp56992
S'description'
p56993
S'x-momentum\n'
p56994
sS'cpp_type'
p56995
S'std::vector<VariableName>'
p56996
sS'default'
p56997
g3
sS'name'
p56998
S'rhou'
p56999
sS'required'
p57000
I01
sS'group_name'
p57001
Nsa(dp57002
S'description'
p57003
S'y-momentum\n'
p57004
sS'cpp_type'
p57005
S'std::vector<VariableName>'
p57006
sS'default'
p57007
g3
sS'name'
p57008
S'rhov'
p57009
sS'required'
p57010
I00
sS'group_name'
p57011
Nsa(dp57012
S'description'
p57013
S'z-momentum\n'
p57014
sS'cpp_type'
p57015
S'std::vector<VariableName>'
p57016
sS'default'
p57017
g3
sS'name'
p57018
S'rhow'
p57019
sS'required'
p57020
I00
sS'group_name'
p57021
Nsa(dp57022
S'description'
p57023
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57024
sS'cpp_type'
p57025
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57026
sS'default'
p57027
g3
sS'name'
p57028
S'save_in'
p57029
sS'required'
p57030
I00
sS'group_name'
p57031
S'Advanced'
p57032
sa(dp57033
S'description'
p57034
S'The seed for the master random number generator\n'
p57035
sS'cpp_type'
p57036
S'unsigned int'
p57037
sS'default'
p57038
S'0'
p57039
sS'name'
p57040
S'seed'
p57041
sS'required'
p57042
I00
sS'group_name'
p57043
S'Advanced'
p57044
sa(dp57045
S'description'
p57046
g3
sS'cpp_type'
p57047
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57048
sS'default'
p57049
S'NSEnergyViscousFlux'
p57050
sS'name'
p57051
S'type'
p57052
sS'required'
p57053
I00
sS'group_name'
p57054
Nsa(dp57055
S'description'
p57056
g3
sS'cpp_type'
p57057
S'std::vector<VariableName>'
p57058
sS'default'
p57059
g3
sS'name'
p57060
S'u'
p57061
sS'required'
p57062
I01
sS'group_name'
p57063
Nsa(dp57064
S'description'
p57065
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57066
sS'cpp_type'
p57067
S'bool'
p57068
sS'default'
p57069
S'0'
p57070
sS'name'
p57071
S'use_displaced_mesh'
p57072
sS'required'
p57073
I00
sS'group_name'
p57074
S'Advanced'
p57075
sa(dp57076
S'description'
p57077
g3
sS'cpp_type'
p57078
S'std::vector<VariableName>'
p57079
sS'default'
p57080
g3
sS'name'
p57081
S'v'
p57082
sS'required'
p57083
I00
sS'group_name'
p57084
Nsa(dp57085
S'description'
p57086
S'The name of the variable that this Kernel operates on\n'
p57087
sS'cpp_type'
p57088
S'NonlinearVariableName'
p57089
sS'default'
p57090
g3
sS'name'
p57091
S'variable'
p57092
sS'required'
p57093
I01
sS'group_name'
p57094
Nsa(dp57095
S'description'
p57096
g3
sS'cpp_type'
p57097
S'std::vector<VariableName>'
p57098
sS'default'
p57099
g3
sS'name'
p57100
S'w'
p57101
sS'required'
p57102
I00
sS'group_name'
p57103
NsasS'name'
p57104
S'/Kernels/NSEnergyViscousFlux'
p57105
sa(dp57106
S'description'
p57107
g3
sS'subblocks'
p57108
NsS'parameters'
p57109
(lp57110
(dp57111
S'description'
p57112
S'Gas constant.\n'
p57113
sS'cpp_type'
p57114
S'double'
p57115
sS'default'
p57116
g3
sS'name'
p57117
S'R'
p57118
sS'required'
p57119
I01
sS'group_name'
p57120
Nsa(dp57121
S'description'
p57122
S'The body force vector component.\n'
p57123
sS'cpp_type'
p57124
S'double'
p57125
sS'default'
p57126
g3
sS'name'
p57127
S'acceleration'
p57128
sS'required'
p57129
I01
sS'group_name'
p57130
Nsa(dp57131
S'description'
p57132
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57133
sS'cpp_type'
p57134
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57135
sS'default'
p57136
g3
sS'name'
p57137
S'block'
p57138
sS'required'
p57139
I00
sS'group_name'
p57140
Nsa(dp57141
S'description'
p57142
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57143
sS'cpp_type'
p57144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57145
sS'default'
p57146
g3
sS'name'
p57147
S'control_tags'
p57148
sS'required'
p57149
I00
sS'group_name'
p57150
Nsa(dp57151
S'description'
p57152
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57153
sS'cpp_type'
p57154
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57155
sS'default'
p57156
g3
sS'name'
p57157
S'diag_save_in'
p57158
sS'required'
p57159
I00
sS'group_name'
p57160
S'Advanced'
p57161
sa(dp57162
S'description'
p57163
S'Ratio of specific heats\n'
p57164
sS'cpp_type'
p57165
S'double'
p57166
sS'default'
p57167
g3
sS'name'
p57168
S'gamma'
p57169
sS'required'
p57170
I01
sS'group_name'
p57171
Nsa(dp57172
S'description'
p57173
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57174
sS'cpp_type'
p57175
S'bool'
p57176
sS'default'
p57177
S'1'
p57178
sS'name'
p57179
S'implicit'
p57180
sS'required'
p57181
I00
sS'group_name'
p57182
S'Advanced'
p57183
sa(dp57184
S'description'
p57185
S'density\n'
p57186
sS'cpp_type'
p57187
S'std::vector<VariableName>'
p57188
sS'default'
p57189
g3
sS'name'
p57190
S'rho'
p57191
sS'required'
p57192
I01
sS'group_name'
p57193
Nsa(dp57194
S'description'
p57195
S'energy\n'
p57196
sS'cpp_type'
p57197
S'std::vector<VariableName>'
p57198
sS'default'
p57199
g3
sS'name'
p57200
S'rhoe'
p57201
sS'required'
p57202
I01
sS'group_name'
p57203
Nsa(dp57204
S'description'
p57205
S'x-momentum\n'
p57206
sS'cpp_type'
p57207
S'std::vector<VariableName>'
p57208
sS'default'
p57209
g3
sS'name'
p57210
S'rhou'
p57211
sS'required'
p57212
I01
sS'group_name'
p57213
Nsa(dp57214
S'description'
p57215
S'y-momentum\n'
p57216
sS'cpp_type'
p57217
S'std::vector<VariableName>'
p57218
sS'default'
p57219
g3
sS'name'
p57220
S'rhov'
p57221
sS'required'
p57222
I00
sS'group_name'
p57223
Nsa(dp57224
S'description'
p57225
S'z-momentum\n'
p57226
sS'cpp_type'
p57227
S'std::vector<VariableName>'
p57228
sS'default'
p57229
g3
sS'name'
p57230
S'rhow'
p57231
sS'required'
p57232
I00
sS'group_name'
p57233
Nsa(dp57234
S'description'
p57235
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57236
sS'cpp_type'
p57237
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57238
sS'default'
p57239
g3
sS'name'
p57240
S'save_in'
p57241
sS'required'
p57242
I00
sS'group_name'
p57243
S'Advanced'
p57244
sa(dp57245
S'description'
p57246
S'The seed for the master random number generator\n'
p57247
sS'cpp_type'
p57248
S'unsigned int'
p57249
sS'default'
p57250
S'0'
p57251
sS'name'
p57252
S'seed'
p57253
sS'required'
p57254
I00
sS'group_name'
p57255
S'Advanced'
p57256
sa(dp57257
S'description'
p57258
g3
sS'cpp_type'
p57259
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57260
sS'default'
p57261
S'NSGravityForce'
p57262
sS'name'
p57263
S'type'
p57264
sS'required'
p57265
I00
sS'group_name'
p57266
Nsa(dp57267
S'description'
p57268
g3
sS'cpp_type'
p57269
S'std::vector<VariableName>'
p57270
sS'default'
p57271
g3
sS'name'
p57272
S'u'
p57273
sS'required'
p57274
I01
sS'group_name'
p57275
Nsa(dp57276
S'description'
p57277
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57278
sS'cpp_type'
p57279
S'bool'
p57280
sS'default'
p57281
S'0'
p57282
sS'name'
p57283
S'use_displaced_mesh'
p57284
sS'required'
p57285
I00
sS'group_name'
p57286
S'Advanced'
p57287
sa(dp57288
S'description'
p57289
g3
sS'cpp_type'
p57290
S'std::vector<VariableName>'
p57291
sS'default'
p57292
g3
sS'name'
p57293
S'v'
p57294
sS'required'
p57295
I00
sS'group_name'
p57296
Nsa(dp57297
S'description'
p57298
S'The name of the variable that this Kernel operates on\n'
p57299
sS'cpp_type'
p57300
S'NonlinearVariableName'
p57301
sS'default'
p57302
g3
sS'name'
p57303
S'variable'
p57304
sS'required'
p57305
I01
sS'group_name'
p57306
Nsa(dp57307
S'description'
p57308
g3
sS'cpp_type'
p57309
S'std::vector<VariableName>'
p57310
sS'default'
p57311
g3
sS'name'
p57312
S'w'
p57313
sS'required'
p57314
I00
sS'group_name'
p57315
NsasS'name'
p57316
S'/Kernels/NSGravityForce'
p57317
sa(dp57318
S'description'
p57319
g3
sS'subblocks'
p57320
NsS'parameters'
p57321
(lp57322
(dp57323
S'description'
p57324
S'The body force vector component.\n'
p57325
sS'cpp_type'
p57326
S'double'
p57327
sS'default'
p57328
g3
sS'name'
p57329
S'acceleration'
p57330
sS'required'
p57331
I01
sS'group_name'
p57332
Nsa(dp57333
S'description'
p57334
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57335
sS'cpp_type'
p57336
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57337
sS'default'
p57338
g3
sS'name'
p57339
S'block'
p57340
sS'required'
p57341
I00
sS'group_name'
p57342
Nsa(dp57343
S'description'
p57344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57345
sS'cpp_type'
p57346
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57347
sS'default'
p57348
g3
sS'name'
p57349
S'control_tags'
p57350
sS'required'
p57351
I00
sS'group_name'
p57352
Nsa(dp57353
S'description'
p57354
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57355
sS'cpp_type'
p57356
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57357
sS'default'
p57358
g3
sS'name'
p57359
S'diag_save_in'
p57360
sS'required'
p57361
I00
sS'group_name'
p57362
S'Advanced'
p57363
sa(dp57364
S'description'
p57365
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57366
sS'cpp_type'
p57367
S'bool'
p57368
sS'default'
p57369
S'1'
p57370
sS'name'
p57371
S'implicit'
p57372
sS'required'
p57373
I00
sS'group_name'
p57374
S'Advanced'
p57375
sa(dp57376
S'description'
p57377
g3
sS'cpp_type'
p57378
S'std::vector<VariableName>'
p57379
sS'default'
p57380
g3
sS'name'
p57381
S'momentum'
p57382
sS'required'
p57383
I01
sS'group_name'
p57384
Nsa(dp57385
S'description'
p57386
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57387
sS'cpp_type'
p57388
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57389
sS'default'
p57390
g3
sS'name'
p57391
S'save_in'
p57392
sS'required'
p57393
I00
sS'group_name'
p57394
S'Advanced'
p57395
sa(dp57396
S'description'
p57397
S'The seed for the master random number generator\n'
p57398
sS'cpp_type'
p57399
S'unsigned int'
p57400
sS'default'
p57401
S'0'
p57402
sS'name'
p57403
S'seed'
p57404
sS'required'
p57405
I00
sS'group_name'
p57406
S'Advanced'
p57407
sa(dp57408
S'description'
p57409
g3
sS'cpp_type'
p57410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57411
sS'default'
p57412
S'NSGravityPower'
p57413
sS'name'
p57414
S'type'
p57415
sS'required'
p57416
I00
sS'group_name'
p57417
Nsa(dp57418
S'description'
p57419
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57420
sS'cpp_type'
p57421
S'bool'
p57422
sS'default'
p57423
S'0'
p57424
sS'name'
p57425
S'use_displaced_mesh'
p57426
sS'required'
p57427
I00
sS'group_name'
p57428
S'Advanced'
p57429
sa(dp57430
S'description'
p57431
S'The name of the variable that this Kernel operates on\n'
p57432
sS'cpp_type'
p57433
S'NonlinearVariableName'
p57434
sS'default'
p57435
g3
sS'name'
p57436
S'variable'
p57437
sS'required'
p57438
I01
sS'group_name'
p57439
NsasS'name'
p57440
S'/Kernels/NSGravityPower'
p57441
sa(dp57442
S'description'
p57443
g3
sS'subblocks'
p57444
NsS'parameters'
p57445
(lp57446
(dp57447
S'description'
p57448
S'Gas constant.\n'
p57449
sS'cpp_type'
p57450
S'double'
p57451
sS'default'
p57452
g3
sS'name'
p57453
S'R'
p57454
sS'required'
p57455
I01
sS'group_name'
p57456
Nsa(dp57457
S'description'
p57458
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57459
sS'cpp_type'
p57460
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57461
sS'default'
p57462
g3
sS'name'
p57463
S'block'
p57464
sS'required'
p57465
I00
sS'group_name'
p57466
Nsa(dp57467
S'description'
p57468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57469
sS'cpp_type'
p57470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57471
sS'default'
p57472
g3
sS'name'
p57473
S'control_tags'
p57474
sS'required'
p57475
I00
sS'group_name'
p57476
Nsa(dp57477
S'description'
p57478
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57479
sS'cpp_type'
p57480
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57481
sS'default'
p57482
g3
sS'name'
p57483
S'diag_save_in'
p57484
sS'required'
p57485
I00
sS'group_name'
p57486
S'Advanced'
p57487
sa(dp57488
S'description'
p57489
S'Ratio of specific heats\n'
p57490
sS'cpp_type'
p57491
S'double'
p57492
sS'default'
p57493
g3
sS'name'
p57494
S'gamma'
p57495
sS'required'
p57496
I01
sS'group_name'
p57497
Nsa(dp57498
S'description'
p57499
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57500
sS'cpp_type'
p57501
S'bool'
p57502
sS'default'
p57503
S'1'
p57504
sS'name'
p57505
S'implicit'
p57506
sS'required'
p57507
I00
sS'group_name'
p57508
S'Advanced'
p57509
sa(dp57510
S'description'
p57511
S'density\n'
p57512
sS'cpp_type'
p57513
S'std::vector<VariableName>'
p57514
sS'default'
p57515
g3
sS'name'
p57516
S'rho'
p57517
sS'required'
p57518
I01
sS'group_name'
p57519
Nsa(dp57520
S'description'
p57521
S'energy\n'
p57522
sS'cpp_type'
p57523
S'std::vector<VariableName>'
p57524
sS'default'
p57525
g3
sS'name'
p57526
S'rhoe'
p57527
sS'required'
p57528
I01
sS'group_name'
p57529
Nsa(dp57530
S'description'
p57531
S'x-momentum\n'
p57532
sS'cpp_type'
p57533
S'std::vector<VariableName>'
p57534
sS'default'
p57535
g3
sS'name'
p57536
S'rhou'
p57537
sS'required'
p57538
I01
sS'group_name'
p57539
Nsa(dp57540
S'description'
p57541
S'y-momentum\n'
p57542
sS'cpp_type'
p57543
S'std::vector<VariableName>'
p57544
sS'default'
p57545
g3
sS'name'
p57546
S'rhov'
p57547
sS'required'
p57548
I00
sS'group_name'
p57549
Nsa(dp57550
S'description'
p57551
S'z-momentum\n'
p57552
sS'cpp_type'
p57553
S'std::vector<VariableName>'
p57554
sS'default'
p57555
g3
sS'name'
p57556
S'rhow'
p57557
sS'required'
p57558
I00
sS'group_name'
p57559
Nsa(dp57560
S'description'
p57561
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57562
sS'cpp_type'
p57563
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57564
sS'default'
p57565
g3
sS'name'
p57566
S'save_in'
p57567
sS'required'
p57568
I00
sS'group_name'
p57569
S'Advanced'
p57570
sa(dp57571
S'description'
p57572
S'The seed for the master random number generator\n'
p57573
sS'cpp_type'
p57574
S'unsigned int'
p57575
sS'default'
p57576
S'0'
p57577
sS'name'
p57578
S'seed'
p57579
sS'required'
p57580
I00
sS'group_name'
p57581
S'Advanced'
p57582
sa(dp57583
S'description'
p57584
g3
sS'cpp_type'
p57585
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57586
sS'default'
p57587
S'NSMassInviscidFlux'
p57588
sS'name'
p57589
S'type'
p57590
sS'required'
p57591
I00
sS'group_name'
p57592
Nsa(dp57593
S'description'
p57594
g3
sS'cpp_type'
p57595
S'std::vector<VariableName>'
p57596
sS'default'
p57597
g3
sS'name'
p57598
S'u'
p57599
sS'required'
p57600
I01
sS'group_name'
p57601
Nsa(dp57602
S'description'
p57603
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57604
sS'cpp_type'
p57605
S'bool'
p57606
sS'default'
p57607
S'0'
p57608
sS'name'
p57609
S'use_displaced_mesh'
p57610
sS'required'
p57611
I00
sS'group_name'
p57612
S'Advanced'
p57613
sa(dp57614
S'description'
p57615
g3
sS'cpp_type'
p57616
S'std::vector<VariableName>'
p57617
sS'default'
p57618
g3
sS'name'
p57619
S'v'
p57620
sS'required'
p57621
I00
sS'group_name'
p57622
Nsa(dp57623
S'description'
p57624
S'The name of the variable that this Kernel operates on\n'
p57625
sS'cpp_type'
p57626
S'NonlinearVariableName'
p57627
sS'default'
p57628
g3
sS'name'
p57629
S'variable'
p57630
sS'required'
p57631
I01
sS'group_name'
p57632
Nsa(dp57633
S'description'
p57634
g3
sS'cpp_type'
p57635
S'std::vector<VariableName>'
p57636
sS'default'
p57637
g3
sS'name'
p57638
S'w'
p57639
sS'required'
p57640
I00
sS'group_name'
p57641
NsasS'name'
p57642
S'/Kernels/NSMassInviscidFlux'
p57643
sa(dp57644
S'description'
p57645
g3
sS'subblocks'
p57646
NsS'parameters'
p57647
(lp57648
(dp57649
S'description'
p57650
S'Gas constant.\n'
p57651
sS'cpp_type'
p57652
S'double'
p57653
sS'default'
p57654
g3
sS'name'
p57655
S'R'
p57656
sS'required'
p57657
I01
sS'group_name'
p57658
Nsa(dp57659
S'description'
p57660
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57661
sS'cpp_type'
p57662
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57663
sS'default'
p57664
g3
sS'name'
p57665
S'block'
p57666
sS'required'
p57667
I00
sS'group_name'
p57668
Nsa(dp57669
S'description'
p57670
S'0,1,2 depending on if we are solving the x,y,z component of the momentum equation\n'
p57671
sS'cpp_type'
p57672
S'unsigned int'
p57673
sS'default'
p57674
g3
sS'name'
p57675
S'component'
p57676
sS'required'
p57677
I01
sS'group_name'
p57678
Nsa(dp57679
S'description'
p57680
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57681
sS'cpp_type'
p57682
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57683
sS'default'
p57684
g3
sS'name'
p57685
S'control_tags'
p57686
sS'required'
p57687
I00
sS'group_name'
p57688
Nsa(dp57689
S'description'
p57690
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57691
sS'cpp_type'
p57692
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57693
sS'default'
p57694
g3
sS'name'
p57695
S'diag_save_in'
p57696
sS'required'
p57697
I00
sS'group_name'
p57698
S'Advanced'
p57699
sa(dp57700
S'description'
p57701
S'Ratio of specific heats\n'
p57702
sS'cpp_type'
p57703
S'double'
p57704
sS'default'
p57705
g3
sS'name'
p57706
S'gamma'
p57707
sS'required'
p57708
I01
sS'group_name'
p57709
Nsa(dp57710
S'description'
p57711
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57712
sS'cpp_type'
p57713
S'bool'
p57714
sS'default'
p57715
S'1'
p57716
sS'name'
p57717
S'implicit'
p57718
sS'required'
p57719
I00
sS'group_name'
p57720
S'Advanced'
p57721
sa(dp57722
S'description'
p57723
g3
sS'cpp_type'
p57724
S'std::vector<VariableName>'
p57725
sS'default'
p57726
g3
sS'name'
p57727
S'pressure'
p57728
sS'required'
p57729
I01
sS'group_name'
p57730
Nsa(dp57731
S'description'
p57732
S'density\n'
p57733
sS'cpp_type'
p57734
S'std::vector<VariableName>'
p57735
sS'default'
p57736
g3
sS'name'
p57737
S'rho'
p57738
sS'required'
p57739
I01
sS'group_name'
p57740
Nsa(dp57741
S'description'
p57742
S'energy\n'
p57743
sS'cpp_type'
p57744
S'std::vector<VariableName>'
p57745
sS'default'
p57746
g3
sS'name'
p57747
S'rhoe'
p57748
sS'required'
p57749
I01
sS'group_name'
p57750
Nsa(dp57751
S'description'
p57752
S'x-momentum\n'
p57753
sS'cpp_type'
p57754
S'std::vector<VariableName>'
p57755
sS'default'
p57756
g3
sS'name'
p57757
S'rhou'
p57758
sS'required'
p57759
I01
sS'group_name'
p57760
Nsa(dp57761
S'description'
p57762
S'y-momentum\n'
p57763
sS'cpp_type'
p57764
S'std::vector<VariableName>'
p57765
sS'default'
p57766
g3
sS'name'
p57767
S'rhov'
p57768
sS'required'
p57769
I00
sS'group_name'
p57770
Nsa(dp57771
S'description'
p57772
S'z-momentum\n'
p57773
sS'cpp_type'
p57774
S'std::vector<VariableName>'
p57775
sS'default'
p57776
g3
sS'name'
p57777
S'rhow'
p57778
sS'required'
p57779
I00
sS'group_name'
p57780
Nsa(dp57781
S'description'
p57782
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57783
sS'cpp_type'
p57784
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57785
sS'default'
p57786
g3
sS'name'
p57787
S'save_in'
p57788
sS'required'
p57789
I00
sS'group_name'
p57790
S'Advanced'
p57791
sa(dp57792
S'description'
p57793
S'The seed for the master random number generator\n'
p57794
sS'cpp_type'
p57795
S'unsigned int'
p57796
sS'default'
p57797
S'0'
p57798
sS'name'
p57799
S'seed'
p57800
sS'required'
p57801
I00
sS'group_name'
p57802
S'Advanced'
p57803
sa(dp57804
S'description'
p57805
g3
sS'cpp_type'
p57806
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p57807
sS'default'
p57808
S'NSMomentumInviscidFlux'
p57809
sS'name'
p57810
S'type'
p57811
sS'required'
p57812
I00
sS'group_name'
p57813
Nsa(dp57814
S'description'
p57815
g3
sS'cpp_type'
p57816
S'std::vector<VariableName>'
p57817
sS'default'
p57818
g3
sS'name'
p57819
S'u'
p57820
sS'required'
p57821
I01
sS'group_name'
p57822
Nsa(dp57823
S'description'
p57824
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p57825
sS'cpp_type'
p57826
S'bool'
p57827
sS'default'
p57828
S'0'
p57829
sS'name'
p57830
S'use_displaced_mesh'
p57831
sS'required'
p57832
I00
sS'group_name'
p57833
S'Advanced'
p57834
sa(dp57835
S'description'
p57836
g3
sS'cpp_type'
p57837
S'std::vector<VariableName>'
p57838
sS'default'
p57839
g3
sS'name'
p57840
S'v'
p57841
sS'required'
p57842
I00
sS'group_name'
p57843
Nsa(dp57844
S'description'
p57845
S'The name of the variable that this Kernel operates on\n'
p57846
sS'cpp_type'
p57847
S'NonlinearVariableName'
p57848
sS'default'
p57849
g3
sS'name'
p57850
S'variable'
p57851
sS'required'
p57852
I01
sS'group_name'
p57853
Nsa(dp57854
S'description'
p57855
g3
sS'cpp_type'
p57856
S'std::vector<VariableName>'
p57857
sS'default'
p57858
g3
sS'name'
p57859
S'w'
p57860
sS'required'
p57861
I00
sS'group_name'
p57862
NsasS'name'
p57863
S'/Kernels/NSMomentumInviscidFlux'
p57864
sa(dp57865
S'description'
p57866
g3
sS'subblocks'
p57867
NsS'parameters'
p57868
(lp57869
(dp57870
S'description'
p57871
S'Gas constant.\n'
p57872
sS'cpp_type'
p57873
S'double'
p57874
sS'default'
p57875
g3
sS'name'
p57876
S'R'
p57877
sS'required'
p57878
I01
sS'group_name'
p57879
Nsa(dp57880
S'description'
p57881
S'The list of block ids (SubdomainID) that this object will be applied\n'
p57882
sS'cpp_type'
p57883
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p57884
sS'default'
p57885
g3
sS'name'
p57886
S'block'
p57887
sS'required'
p57888
I00
sS'group_name'
p57889
Nsa(dp57890
S'description'
p57891
g3
sS'cpp_type'
p57892
S'double'
p57893
sS'default'
p57894
g3
sS'name'
p57895
S'component'
p57896
sS'required'
p57897
I01
sS'group_name'
p57898
Nsa(dp57899
S'description'
p57900
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p57901
sS'cpp_type'
p57902
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p57903
sS'default'
p57904
g3
sS'name'
p57905
S'control_tags'
p57906
sS'required'
p57907
I00
sS'group_name'
p57908
Nsa(dp57909
S'description'
p57910
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p57911
sS'cpp_type'
p57912
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p57913
sS'default'
p57914
g3
sS'name'
p57915
S'diag_save_in'
p57916
sS'required'
p57917
I00
sS'group_name'
p57918
S'Advanced'
p57919
sa(dp57920
S'description'
p57921
S'Ratio of specific heats\n'
p57922
sS'cpp_type'
p57923
S'double'
p57924
sS'default'
p57925
g3
sS'name'
p57926
S'gamma'
p57927
sS'required'
p57928
I01
sS'group_name'
p57929
Nsa(dp57930
S'description'
p57931
S'Determines whether this object is calculated using an implicit or explicit form\n'
p57932
sS'cpp_type'
p57933
S'bool'
p57934
sS'default'
p57935
S'1'
p57936
sS'name'
p57937
S'implicit'
p57938
sS'required'
p57939
I00
sS'group_name'
p57940
S'Advanced'
p57941
sa(dp57942
S'description'
p57943
g3
sS'cpp_type'
p57944
S'std::vector<VariableName>'
p57945
sS'default'
p57946
g3
sS'name'
p57947
S'pressure'
p57948
sS'required'
p57949
I01
sS'group_name'
p57950
Nsa(dp57951
S'description'
p57952
S'density\n'
p57953
sS'cpp_type'
p57954
S'std::vector<VariableName>'
p57955
sS'default'
p57956
g3
sS'name'
p57957
S'rho'
p57958
sS'required'
p57959
I01
sS'group_name'
p57960
Nsa(dp57961
S'description'
p57962
S'energy\n'
p57963
sS'cpp_type'
p57964
S'std::vector<VariableName>'
p57965
sS'default'
p57966
g3
sS'name'
p57967
S'rhoe'
p57968
sS'required'
p57969
I01
sS'group_name'
p57970
Nsa(dp57971
S'description'
p57972
S'x-momentum\n'
p57973
sS'cpp_type'
p57974
S'std::vector<VariableName>'
p57975
sS'default'
p57976
g3
sS'name'
p57977
S'rhou'
p57978
sS'required'
p57979
I01
sS'group_name'
p57980
Nsa(dp57981
S'description'
p57982
S'y-momentum\n'
p57983
sS'cpp_type'
p57984
S'std::vector<VariableName>'
p57985
sS'default'
p57986
g3
sS'name'
p57987
S'rhov'
p57988
sS'required'
p57989
I00
sS'group_name'
p57990
Nsa(dp57991
S'description'
p57992
S'z-momentum\n'
p57993
sS'cpp_type'
p57994
S'std::vector<VariableName>'
p57995
sS'default'
p57996
g3
sS'name'
p57997
S'rhow'
p57998
sS'required'
p57999
I00
sS'group_name'
p58000
Nsa(dp58001
S'description'
p58002
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58003
sS'cpp_type'
p58004
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58005
sS'default'
p58006
g3
sS'name'
p58007
S'save_in'
p58008
sS'required'
p58009
I00
sS'group_name'
p58010
S'Advanced'
p58011
sa(dp58012
S'description'
p58013
S'The seed for the master random number generator\n'
p58014
sS'cpp_type'
p58015
S'unsigned int'
p58016
sS'default'
p58017
S'0'
p58018
sS'name'
p58019
S'seed'
p58020
sS'required'
p58021
I00
sS'group_name'
p58022
S'Advanced'
p58023
sa(dp58024
S'description'
p58025
g3
sS'cpp_type'
p58026
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58027
sS'default'
p58028
S'NSMomentumInviscidFluxWithGradP'
p58029
sS'name'
p58030
S'type'
p58031
sS'required'
p58032
I00
sS'group_name'
p58033
Nsa(dp58034
S'description'
p58035
g3
sS'cpp_type'
p58036
S'std::vector<VariableName>'
p58037
sS'default'
p58038
g3
sS'name'
p58039
S'u'
p58040
sS'required'
p58041
I01
sS'group_name'
p58042
Nsa(dp58043
S'description'
p58044
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58045
sS'cpp_type'
p58046
S'bool'
p58047
sS'default'
p58048
S'0'
p58049
sS'name'
p58050
S'use_displaced_mesh'
p58051
sS'required'
p58052
I00
sS'group_name'
p58053
S'Advanced'
p58054
sa(dp58055
S'description'
p58056
g3
sS'cpp_type'
p58057
S'std::vector<VariableName>'
p58058
sS'default'
p58059
g3
sS'name'
p58060
S'v'
p58061
sS'required'
p58062
I00
sS'group_name'
p58063
Nsa(dp58064
S'description'
p58065
S'The name of the variable that this Kernel operates on\n'
p58066
sS'cpp_type'
p58067
S'NonlinearVariableName'
p58068
sS'default'
p58069
g3
sS'name'
p58070
S'variable'
p58071
sS'required'
p58072
I01
sS'group_name'
p58073
Nsa(dp58074
S'description'
p58075
g3
sS'cpp_type'
p58076
S'std::vector<VariableName>'
p58077
sS'default'
p58078
g3
sS'name'
p58079
S'w'
p58080
sS'required'
p58081
I00
sS'group_name'
p58082
NsasS'name'
p58083
S'/Kernels/NSMomentumInviscidFluxWithGradP'
p58084
sa(dp58085
S'description'
p58086
g3
sS'subblocks'
p58087
NsS'parameters'
p58088
(lp58089
(dp58090
S'description'
p58091
S'Gas constant.\n'
p58092
sS'cpp_type'
p58093
S'double'
p58094
sS'default'
p58095
g3
sS'name'
p58096
S'R'
p58097
sS'required'
p58098
I01
sS'group_name'
p58099
Nsa(dp58100
S'description'
p58101
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58102
sS'cpp_type'
p58103
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58104
sS'default'
p58105
g3
sS'name'
p58106
S'block'
p58107
sS'required'
p58108
I00
sS'group_name'
p58109
Nsa(dp58110
S'description'
p58111
g3
sS'cpp_type'
p58112
S'unsigned int'
p58113
sS'default'
p58114
g3
sS'name'
p58115
S'component'
p58116
sS'required'
p58117
I01
sS'group_name'
p58118
Nsa(dp58119
S'description'
p58120
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58121
sS'cpp_type'
p58122
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58123
sS'default'
p58124
g3
sS'name'
p58125
S'control_tags'
p58126
sS'required'
p58127
I00
sS'group_name'
p58128
Nsa(dp58129
S'description'
p58130
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58131
sS'cpp_type'
p58132
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58133
sS'default'
p58134
g3
sS'name'
p58135
S'diag_save_in'
p58136
sS'required'
p58137
I00
sS'group_name'
p58138
S'Advanced'
p58139
sa(dp58140
S'description'
p58141
S'Ratio of specific heats\n'
p58142
sS'cpp_type'
p58143
S'double'
p58144
sS'default'
p58145
g3
sS'name'
p58146
S'gamma'
p58147
sS'required'
p58148
I01
sS'group_name'
p58149
Nsa(dp58150
S'description'
p58151
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58152
sS'cpp_type'
p58153
S'bool'
p58154
sS'default'
p58155
S'1'
p58156
sS'name'
p58157
S'implicit'
p58158
sS'required'
p58159
I00
sS'group_name'
p58160
S'Advanced'
p58161
sa(dp58162
S'description'
p58163
S'density\n'
p58164
sS'cpp_type'
p58165
S'std::vector<VariableName>'
p58166
sS'default'
p58167
g3
sS'name'
p58168
S'rho'
p58169
sS'required'
p58170
I01
sS'group_name'
p58171
Nsa(dp58172
S'description'
p58173
S'energy\n'
p58174
sS'cpp_type'
p58175
S'std::vector<VariableName>'
p58176
sS'default'
p58177
g3
sS'name'
p58178
S'rhoe'
p58179
sS'required'
p58180
I01
sS'group_name'
p58181
Nsa(dp58182
S'description'
p58183
S'x-momentum\n'
p58184
sS'cpp_type'
p58185
S'std::vector<VariableName>'
p58186
sS'default'
p58187
g3
sS'name'
p58188
S'rhou'
p58189
sS'required'
p58190
I01
sS'group_name'
p58191
Nsa(dp58192
S'description'
p58193
S'y-momentum\n'
p58194
sS'cpp_type'
p58195
S'std::vector<VariableName>'
p58196
sS'default'
p58197
g3
sS'name'
p58198
S'rhov'
p58199
sS'required'
p58200
I00
sS'group_name'
p58201
Nsa(dp58202
S'description'
p58203
S'z-momentum\n'
p58204
sS'cpp_type'
p58205
S'std::vector<VariableName>'
p58206
sS'default'
p58207
g3
sS'name'
p58208
S'rhow'
p58209
sS'required'
p58210
I00
sS'group_name'
p58211
Nsa(dp58212
S'description'
p58213
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58214
sS'cpp_type'
p58215
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58216
sS'default'
p58217
g3
sS'name'
p58218
S'save_in'
p58219
sS'required'
p58220
I00
sS'group_name'
p58221
S'Advanced'
p58222
sa(dp58223
S'description'
p58224
S'The seed for the master random number generator\n'
p58225
sS'cpp_type'
p58226
S'unsigned int'
p58227
sS'default'
p58228
S'0'
p58229
sS'name'
p58230
S'seed'
p58231
sS'required'
p58232
I00
sS'group_name'
p58233
S'Advanced'
p58234
sa(dp58235
S'description'
p58236
g3
sS'cpp_type'
p58237
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58238
sS'default'
p58239
S'NSMomentumViscousFlux'
p58240
sS'name'
p58241
S'type'
p58242
sS'required'
p58243
I00
sS'group_name'
p58244
Nsa(dp58245
S'description'
p58246
g3
sS'cpp_type'
p58247
S'std::vector<VariableName>'
p58248
sS'default'
p58249
g3
sS'name'
p58250
S'u'
p58251
sS'required'
p58252
I01
sS'group_name'
p58253
Nsa(dp58254
S'description'
p58255
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58256
sS'cpp_type'
p58257
S'bool'
p58258
sS'default'
p58259
S'0'
p58260
sS'name'
p58261
S'use_displaced_mesh'
p58262
sS'required'
p58263
I00
sS'group_name'
p58264
S'Advanced'
p58265
sa(dp58266
S'description'
p58267
g3
sS'cpp_type'
p58268
S'std::vector<VariableName>'
p58269
sS'default'
p58270
g3
sS'name'
p58271
S'v'
p58272
sS'required'
p58273
I00
sS'group_name'
p58274
Nsa(dp58275
S'description'
p58276
S'The name of the variable that this Kernel operates on\n'
p58277
sS'cpp_type'
p58278
S'NonlinearVariableName'
p58279
sS'default'
p58280
g3
sS'name'
p58281
S'variable'
p58282
sS'required'
p58283
I01
sS'group_name'
p58284
Nsa(dp58285
S'description'
p58286
g3
sS'cpp_type'
p58287
S'std::vector<VariableName>'
p58288
sS'default'
p58289
g3
sS'name'
p58290
S'w'
p58291
sS'required'
p58292
I00
sS'group_name'
p58293
NsasS'name'
p58294
S'/Kernels/NSMomentumViscousFlux'
p58295
sa(dp58296
S'description'
p58297
g3
sS'subblocks'
p58298
NsS'parameters'
p58299
(lp58300
(dp58301
S'description'
p58302
S'Gas constant.\n'
p58303
sS'cpp_type'
p58304
S'double'
p58305
sS'default'
p58306
g3
sS'name'
p58307
S'R'
p58308
sS'required'
p58309
I01
sS'group_name'
p58310
Nsa(dp58311
S'description'
p58312
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58313
sS'cpp_type'
p58314
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58315
sS'default'
p58316
g3
sS'name'
p58317
S'block'
p58318
sS'required'
p58319
I00
sS'group_name'
p58320
Nsa(dp58321
S'description'
p58322
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58323
sS'cpp_type'
p58324
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58325
sS'default'
p58326
g3
sS'name'
p58327
S'control_tags'
p58328
sS'required'
p58329
I00
sS'group_name'
p58330
Nsa(dp58331
S'description'
p58332
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58333
sS'cpp_type'
p58334
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58335
sS'default'
p58336
g3
sS'name'
p58337
S'diag_save_in'
p58338
sS'required'
p58339
I00
sS'group_name'
p58340
S'Advanced'
p58341
sa(dp58342
S'description'
p58343
g3
sS'cpp_type'
p58344
S'std::vector<VariableName>'
p58345
sS'default'
p58346
g3
sS'name'
p58347
S'enthalpy'
p58348
sS'required'
p58349
I01
sS'group_name'
p58350
Nsa(dp58351
S'description'
p58352
S'Ratio of specific heats\n'
p58353
sS'cpp_type'
p58354
S'double'
p58355
sS'default'
p58356
g3
sS'name'
p58357
S'gamma'
p58358
sS'required'
p58359
I01
sS'group_name'
p58360
Nsa(dp58361
S'description'
p58362
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58363
sS'cpp_type'
p58364
S'bool'
p58365
sS'default'
p58366
S'1'
p58367
sS'name'
p58368
S'implicit'
p58369
sS'required'
p58370
I00
sS'group_name'
p58371
S'Advanced'
p58372
sa(dp58373
S'description'
p58374
S'density\n'
p58375
sS'cpp_type'
p58376
S'std::vector<VariableName>'
p58377
sS'default'
p58378
g3
sS'name'
p58379
S'rho'
p58380
sS'required'
p58381
I01
sS'group_name'
p58382
Nsa(dp58383
S'description'
p58384
S'energy\n'
p58385
sS'cpp_type'
p58386
S'std::vector<VariableName>'
p58387
sS'default'
p58388
g3
sS'name'
p58389
S'rhoe'
p58390
sS'required'
p58391
I01
sS'group_name'
p58392
Nsa(dp58393
S'description'
p58394
S'x-momentum\n'
p58395
sS'cpp_type'
p58396
S'std::vector<VariableName>'
p58397
sS'default'
p58398
g3
sS'name'
p58399
S'rhou'
p58400
sS'required'
p58401
I01
sS'group_name'
p58402
Nsa(dp58403
S'description'
p58404
S'y-momentum\n'
p58405
sS'cpp_type'
p58406
S'std::vector<VariableName>'
p58407
sS'default'
p58408
g3
sS'name'
p58409
S'rhov'
p58410
sS'required'
p58411
I00
sS'group_name'
p58412
Nsa(dp58413
S'description'
p58414
S'z-momentum\n'
p58415
sS'cpp_type'
p58416
S'std::vector<VariableName>'
p58417
sS'default'
p58418
g3
sS'name'
p58419
S'rhow'
p58420
sS'required'
p58421
I00
sS'group_name'
p58422
Nsa(dp58423
S'description'
p58424
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58425
sS'cpp_type'
p58426
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58427
sS'default'
p58428
g3
sS'name'
p58429
S'save_in'
p58430
sS'required'
p58431
I00
sS'group_name'
p58432
S'Advanced'
p58433
sa(dp58434
S'description'
p58435
S'The seed for the master random number generator\n'
p58436
sS'cpp_type'
p58437
S'unsigned int'
p58438
sS'default'
p58439
S'0'
p58440
sS'name'
p58441
S'seed'
p58442
sS'required'
p58443
I00
sS'group_name'
p58444
S'Advanced'
p58445
sa(dp58446
S'description'
p58447
g3
sS'cpp_type'
p58448
S'std::vector<VariableName>'
p58449
sS'default'
p58450
g3
sS'name'
p58451
S'temperature'
p58452
sS'required'
p58453
I01
sS'group_name'
p58454
Nsa(dp58455
S'description'
p58456
g3
sS'cpp_type'
p58457
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58458
sS'default'
p58459
S'NSSUPGEnergy'
p58460
sS'name'
p58461
S'type'
p58462
sS'required'
p58463
I00
sS'group_name'
p58464
Nsa(dp58465
S'description'
p58466
g3
sS'cpp_type'
p58467
S'std::vector<VariableName>'
p58468
sS'default'
p58469
g3
sS'name'
p58470
S'u'
p58471
sS'required'
p58472
I01
sS'group_name'
p58473
Nsa(dp58474
S'description'
p58475
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58476
sS'cpp_type'
p58477
S'bool'
p58478
sS'default'
p58479
S'0'
p58480
sS'name'
p58481
S'use_displaced_mesh'
p58482
sS'required'
p58483
I00
sS'group_name'
p58484
S'Advanced'
p58485
sa(dp58486
S'description'
p58487
g3
sS'cpp_type'
p58488
S'std::vector<VariableName>'
p58489
sS'default'
p58490
g3
sS'name'
p58491
S'v'
p58492
sS'required'
p58493
I00
sS'group_name'
p58494
Nsa(dp58495
S'description'
p58496
S'The name of the variable that this Kernel operates on\n'
p58497
sS'cpp_type'
p58498
S'NonlinearVariableName'
p58499
sS'default'
p58500
g3
sS'name'
p58501
S'variable'
p58502
sS'required'
p58503
I01
sS'group_name'
p58504
Nsa(dp58505
S'description'
p58506
g3
sS'cpp_type'
p58507
S'std::vector<VariableName>'
p58508
sS'default'
p58509
g3
sS'name'
p58510
S'w'
p58511
sS'required'
p58512
I00
sS'group_name'
p58513
NsasS'name'
p58514
S'/Kernels/NSSUPGEnergy'
p58515
sa(dp58516
S'description'
p58517
g3
sS'subblocks'
p58518
NsS'parameters'
p58519
(lp58520
(dp58521
S'description'
p58522
S'Gas constant.\n'
p58523
sS'cpp_type'
p58524
S'double'
p58525
sS'default'
p58526
g3
sS'name'
p58527
S'R'
p58528
sS'required'
p58529
I01
sS'group_name'
p58530
Nsa(dp58531
S'description'
p58532
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58533
sS'cpp_type'
p58534
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58535
sS'default'
p58536
g3
sS'name'
p58537
S'block'
p58538
sS'required'
p58539
I00
sS'group_name'
p58540
Nsa(dp58541
S'description'
p58542
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58543
sS'cpp_type'
p58544
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58545
sS'default'
p58546
g3
sS'name'
p58547
S'control_tags'
p58548
sS'required'
p58549
I00
sS'group_name'
p58550
Nsa(dp58551
S'description'
p58552
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58553
sS'cpp_type'
p58554
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58555
sS'default'
p58556
g3
sS'name'
p58557
S'diag_save_in'
p58558
sS'required'
p58559
I00
sS'group_name'
p58560
S'Advanced'
p58561
sa(dp58562
S'description'
p58563
g3
sS'cpp_type'
p58564
S'std::vector<VariableName>'
p58565
sS'default'
p58566
g3
sS'name'
p58567
S'enthalpy'
p58568
sS'required'
p58569
I01
sS'group_name'
p58570
Nsa(dp58571
S'description'
p58572
S'Ratio of specific heats\n'
p58573
sS'cpp_type'
p58574
S'double'
p58575
sS'default'
p58576
g3
sS'name'
p58577
S'gamma'
p58578
sS'required'
p58579
I01
sS'group_name'
p58580
Nsa(dp58581
S'description'
p58582
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58583
sS'cpp_type'
p58584
S'bool'
p58585
sS'default'
p58586
S'1'
p58587
sS'name'
p58588
S'implicit'
p58589
sS'required'
p58590
I00
sS'group_name'
p58591
S'Advanced'
p58592
sa(dp58593
S'description'
p58594
S'density\n'
p58595
sS'cpp_type'
p58596
S'std::vector<VariableName>'
p58597
sS'default'
p58598
g3
sS'name'
p58599
S'rho'
p58600
sS'required'
p58601
I01
sS'group_name'
p58602
Nsa(dp58603
S'description'
p58604
S'energy\n'
p58605
sS'cpp_type'
p58606
S'std::vector<VariableName>'
p58607
sS'default'
p58608
g3
sS'name'
p58609
S'rhoe'
p58610
sS'required'
p58611
I01
sS'group_name'
p58612
Nsa(dp58613
S'description'
p58614
S'x-momentum\n'
p58615
sS'cpp_type'
p58616
S'std::vector<VariableName>'
p58617
sS'default'
p58618
g3
sS'name'
p58619
S'rhou'
p58620
sS'required'
p58621
I01
sS'group_name'
p58622
Nsa(dp58623
S'description'
p58624
S'y-momentum\n'
p58625
sS'cpp_type'
p58626
S'std::vector<VariableName>'
p58627
sS'default'
p58628
g3
sS'name'
p58629
S'rhov'
p58630
sS'required'
p58631
I00
sS'group_name'
p58632
Nsa(dp58633
S'description'
p58634
S'z-momentum\n'
p58635
sS'cpp_type'
p58636
S'std::vector<VariableName>'
p58637
sS'default'
p58638
g3
sS'name'
p58639
S'rhow'
p58640
sS'required'
p58641
I00
sS'group_name'
p58642
Nsa(dp58643
S'description'
p58644
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58645
sS'cpp_type'
p58646
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58647
sS'default'
p58648
g3
sS'name'
p58649
S'save_in'
p58650
sS'required'
p58651
I00
sS'group_name'
p58652
S'Advanced'
p58653
sa(dp58654
S'description'
p58655
S'The seed for the master random number generator\n'
p58656
sS'cpp_type'
p58657
S'unsigned int'
p58658
sS'default'
p58659
S'0'
p58660
sS'name'
p58661
S'seed'
p58662
sS'required'
p58663
I00
sS'group_name'
p58664
S'Advanced'
p58665
sa(dp58666
S'description'
p58667
g3
sS'cpp_type'
p58668
S'std::vector<VariableName>'
p58669
sS'default'
p58670
g3
sS'name'
p58671
S'temperature'
p58672
sS'required'
p58673
I01
sS'group_name'
p58674
Nsa(dp58675
S'description'
p58676
g3
sS'cpp_type'
p58677
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58678
sS'default'
p58679
S'NSSUPGMass'
p58680
sS'name'
p58681
S'type'
p58682
sS'required'
p58683
I00
sS'group_name'
p58684
Nsa(dp58685
S'description'
p58686
g3
sS'cpp_type'
p58687
S'std::vector<VariableName>'
p58688
sS'default'
p58689
g3
sS'name'
p58690
S'u'
p58691
sS'required'
p58692
I01
sS'group_name'
p58693
Nsa(dp58694
S'description'
p58695
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58696
sS'cpp_type'
p58697
S'bool'
p58698
sS'default'
p58699
S'0'
p58700
sS'name'
p58701
S'use_displaced_mesh'
p58702
sS'required'
p58703
I00
sS'group_name'
p58704
S'Advanced'
p58705
sa(dp58706
S'description'
p58707
g3
sS'cpp_type'
p58708
S'std::vector<VariableName>'
p58709
sS'default'
p58710
g3
sS'name'
p58711
S'v'
p58712
sS'required'
p58713
I00
sS'group_name'
p58714
Nsa(dp58715
S'description'
p58716
S'The name of the variable that this Kernel operates on\n'
p58717
sS'cpp_type'
p58718
S'NonlinearVariableName'
p58719
sS'default'
p58720
g3
sS'name'
p58721
S'variable'
p58722
sS'required'
p58723
I01
sS'group_name'
p58724
Nsa(dp58725
S'description'
p58726
g3
sS'cpp_type'
p58727
S'std::vector<VariableName>'
p58728
sS'default'
p58729
g3
sS'name'
p58730
S'w'
p58731
sS'required'
p58732
I00
sS'group_name'
p58733
NsasS'name'
p58734
S'/Kernels/NSSUPGMass'
p58735
sa(dp58736
S'description'
p58737
g3
sS'subblocks'
p58738
NsS'parameters'
p58739
(lp58740
(dp58741
S'description'
p58742
S'Gas constant.\n'
p58743
sS'cpp_type'
p58744
S'double'
p58745
sS'default'
p58746
g3
sS'name'
p58747
S'R'
p58748
sS'required'
p58749
I01
sS'group_name'
p58750
Nsa(dp58751
S'description'
p58752
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58753
sS'cpp_type'
p58754
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58755
sS'default'
p58756
g3
sS'name'
p58757
S'block'
p58758
sS'required'
p58759
I00
sS'group_name'
p58760
Nsa(dp58761
S'description'
p58762
g3
sS'cpp_type'
p58763
S'unsigned int'
p58764
sS'default'
p58765
g3
sS'name'
p58766
S'component'
p58767
sS'required'
p58768
I01
sS'group_name'
p58769
Nsa(dp58770
S'description'
p58771
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58772
sS'cpp_type'
p58773
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58774
sS'default'
p58775
g3
sS'name'
p58776
S'control_tags'
p58777
sS'required'
p58778
I00
sS'group_name'
p58779
Nsa(dp58780
S'description'
p58781
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58782
sS'cpp_type'
p58783
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58784
sS'default'
p58785
g3
sS'name'
p58786
S'diag_save_in'
p58787
sS'required'
p58788
I00
sS'group_name'
p58789
S'Advanced'
p58790
sa(dp58791
S'description'
p58792
g3
sS'cpp_type'
p58793
S'std::vector<VariableName>'
p58794
sS'default'
p58795
g3
sS'name'
p58796
S'enthalpy'
p58797
sS'required'
p58798
I01
sS'group_name'
p58799
Nsa(dp58800
S'description'
p58801
S'Ratio of specific heats\n'
p58802
sS'cpp_type'
p58803
S'double'
p58804
sS'default'
p58805
g3
sS'name'
p58806
S'gamma'
p58807
sS'required'
p58808
I01
sS'group_name'
p58809
Nsa(dp58810
S'description'
p58811
S'Determines whether this object is calculated using an implicit or explicit form\n'
p58812
sS'cpp_type'
p58813
S'bool'
p58814
sS'default'
p58815
S'1'
p58816
sS'name'
p58817
S'implicit'
p58818
sS'required'
p58819
I00
sS'group_name'
p58820
S'Advanced'
p58821
sa(dp58822
S'description'
p58823
S'density\n'
p58824
sS'cpp_type'
p58825
S'std::vector<VariableName>'
p58826
sS'default'
p58827
g3
sS'name'
p58828
S'rho'
p58829
sS'required'
p58830
I01
sS'group_name'
p58831
Nsa(dp58832
S'description'
p58833
S'energy\n'
p58834
sS'cpp_type'
p58835
S'std::vector<VariableName>'
p58836
sS'default'
p58837
g3
sS'name'
p58838
S'rhoe'
p58839
sS'required'
p58840
I01
sS'group_name'
p58841
Nsa(dp58842
S'description'
p58843
S'x-momentum\n'
p58844
sS'cpp_type'
p58845
S'std::vector<VariableName>'
p58846
sS'default'
p58847
g3
sS'name'
p58848
S'rhou'
p58849
sS'required'
p58850
I01
sS'group_name'
p58851
Nsa(dp58852
S'description'
p58853
S'y-momentum\n'
p58854
sS'cpp_type'
p58855
S'std::vector<VariableName>'
p58856
sS'default'
p58857
g3
sS'name'
p58858
S'rhov'
p58859
sS'required'
p58860
I00
sS'group_name'
p58861
Nsa(dp58862
S'description'
p58863
S'z-momentum\n'
p58864
sS'cpp_type'
p58865
S'std::vector<VariableName>'
p58866
sS'default'
p58867
g3
sS'name'
p58868
S'rhow'
p58869
sS'required'
p58870
I00
sS'group_name'
p58871
Nsa(dp58872
S'description'
p58873
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58874
sS'cpp_type'
p58875
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58876
sS'default'
p58877
g3
sS'name'
p58878
S'save_in'
p58879
sS'required'
p58880
I00
sS'group_name'
p58881
S'Advanced'
p58882
sa(dp58883
S'description'
p58884
S'The seed for the master random number generator\n'
p58885
sS'cpp_type'
p58886
S'unsigned int'
p58887
sS'default'
p58888
S'0'
p58889
sS'name'
p58890
S'seed'
p58891
sS'required'
p58892
I00
sS'group_name'
p58893
S'Advanced'
p58894
sa(dp58895
S'description'
p58896
g3
sS'cpp_type'
p58897
S'std::vector<VariableName>'
p58898
sS'default'
p58899
g3
sS'name'
p58900
S'temperature'
p58901
sS'required'
p58902
I01
sS'group_name'
p58903
Nsa(dp58904
S'description'
p58905
g3
sS'cpp_type'
p58906
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p58907
sS'default'
p58908
S'NSSUPGMomentum'
p58909
sS'name'
p58910
S'type'
p58911
sS'required'
p58912
I00
sS'group_name'
p58913
Nsa(dp58914
S'description'
p58915
g3
sS'cpp_type'
p58916
S'std::vector<VariableName>'
p58917
sS'default'
p58918
g3
sS'name'
p58919
S'u'
p58920
sS'required'
p58921
I01
sS'group_name'
p58922
Nsa(dp58923
S'description'
p58924
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p58925
sS'cpp_type'
p58926
S'bool'
p58927
sS'default'
p58928
S'0'
p58929
sS'name'
p58930
S'use_displaced_mesh'
p58931
sS'required'
p58932
I00
sS'group_name'
p58933
S'Advanced'
p58934
sa(dp58935
S'description'
p58936
g3
sS'cpp_type'
p58937
S'std::vector<VariableName>'
p58938
sS'default'
p58939
g3
sS'name'
p58940
S'v'
p58941
sS'required'
p58942
I00
sS'group_name'
p58943
Nsa(dp58944
S'description'
p58945
S'The name of the variable that this Kernel operates on\n'
p58946
sS'cpp_type'
p58947
S'NonlinearVariableName'
p58948
sS'default'
p58949
g3
sS'name'
p58950
S'variable'
p58951
sS'required'
p58952
I01
sS'group_name'
p58953
Nsa(dp58954
S'description'
p58955
g3
sS'cpp_type'
p58956
S'std::vector<VariableName>'
p58957
sS'default'
p58958
g3
sS'name'
p58959
S'w'
p58960
sS'required'
p58961
I00
sS'group_name'
p58962
NsasS'name'
p58963
S'/Kernels/NSSUPGMomentum'
p58964
sa(dp58965
S'description'
p58966
g3
sS'subblocks'
p58967
NsS'parameters'
p58968
(lp58969
(dp58970
S'description'
p58971
S'The list of block ids (SubdomainID) that this object will be applied\n'
p58972
sS'cpp_type'
p58973
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p58974
sS'default'
p58975
g3
sS'name'
p58976
S'block'
p58977
sS'required'
p58978
I00
sS'group_name'
p58979
Nsa(dp58980
S'description'
p58981
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p58982
sS'cpp_type'
p58983
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p58984
sS'default'
p58985
g3
sS'name'
p58986
S'control_tags'
p58987
sS'required'
p58988
I00
sS'group_name'
p58989
Nsa(dp58990
S'description'
p58991
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p58992
sS'cpp_type'
p58993
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p58994
sS'default'
p58995
g3
sS'name'
p58996
S'diag_save_in'
p58997
sS'required'
p58998
I00
sS'group_name'
p58999
S'Advanced'
p59000
sa(dp59001
S'description'
p59002
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59003
sS'cpp_type'
p59004
S'bool'
p59005
sS'default'
p59006
S'1'
p59007
sS'name'
p59008
S'implicit'
p59009
sS'required'
p59010
I00
sS'group_name'
p59011
S'Advanced'
p59012
sa(dp59013
S'description'
p59014
g3
sS'cpp_type'
p59015
S'std::vector<VariableName>'
p59016
sS'default'
p59017
g3
sS'name'
p59018
S'p'
p59019
sS'required'
p59020
I01
sS'group_name'
p59021
Nsa(dp59022
S'description'
p59023
g3
sS'cpp_type'
p59024
S'std::vector<VariableName>'
p59025
sS'default'
p59026
g3
sS'name'
p59027
S'pe'
p59028
sS'required'
p59029
I01
sS'group_name'
p59030
Nsa(dp59031
S'description'
p59032
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59033
sS'cpp_type'
p59034
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59035
sS'default'
p59036
g3
sS'name'
p59037
S'save_in'
p59038
sS'required'
p59039
I00
sS'group_name'
p59040
S'Advanced'
p59041
sa(dp59042
S'description'
p59043
S'The seed for the master random number generator\n'
p59044
sS'cpp_type'
p59045
S'unsigned int'
p59046
sS'default'
p59047
S'0'
p59048
sS'name'
p59049
S'seed'
p59050
sS'required'
p59051
I00
sS'group_name'
p59052
S'Advanced'
p59053
sa(dp59054
S'description'
p59055
g3
sS'cpp_type'
p59056
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59057
sS'default'
p59058
S'NSTemperatureL2'
p59059
sS'name'
p59060
S'type'
p59061
sS'required'
p59062
I00
sS'group_name'
p59063
Nsa(dp59064
S'description'
p59065
g3
sS'cpp_type'
p59066
S'std::vector<VariableName>'
p59067
sS'default'
p59068
g3
sS'name'
p59069
S'u'
p59070
sS'required'
p59071
I01
sS'group_name'
p59072
Nsa(dp59073
S'description'
p59074
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p59075
sS'cpp_type'
p59076
S'bool'
p59077
sS'default'
p59078
S'0'
p59079
sS'name'
p59080
S'use_displaced_mesh'
p59081
sS'required'
p59082
I00
sS'group_name'
p59083
S'Advanced'
p59084
sa(dp59085
S'description'
p59086
g3
sS'cpp_type'
p59087
S'std::vector<VariableName>'
p59088
sS'default'
p59089
g3
sS'name'
p59090
S'v'
p59091
sS'required'
p59092
I01
sS'group_name'
p59093
Nsa(dp59094
S'description'
p59095
S'The name of the variable that this Kernel operates on\n'
p59096
sS'cpp_type'
p59097
S'NonlinearVariableName'
p59098
sS'default'
p59099
g3
sS'name'
p59100
S'variable'
p59101
sS'required'
p59102
I01
sS'group_name'
p59103
Nsa(dp59104
S'description'
p59105
g3
sS'cpp_type'
p59106
S'std::vector<VariableName>'
p59107
sS'default'
p59108
g3
sS'name'
p59109
S'w'
p59110
sS'required'
p59111
I00
sS'group_name'
p59112
NsasS'name'
p59113
S'/Kernels/NSTemperatureL2'
p59114
sa(dp59115
S'description'
p59116
g3
sS'subblocks'
p59117
NsS'parameters'
p59118
(lp59119
(dp59120
S'description'
p59121
S'Name appended to material properties to make them unique\n'
p59122
sS'cpp_type'
p59123
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59124
sS'default'
p59125
g3
sS'name'
p59126
S'appended_property_name'
p59127
sS'required'
p59128
I00
sS'group_name'
p59129
Nsa(dp59130
S'description'
p59131
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59132
sS'cpp_type'
p59133
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59134
sS'default'
p59135
g3
sS'name'
p59136
S'block'
p59137
sS'required'
p59138
I00
sS'group_name'
p59139
Nsa(dp59140
S'description'
p59141
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p59142
sS'cpp_type'
p59143
S'unsigned int'
p59144
sS'default'
p59145
S'2'
p59146
sS'name'
p59147
S'component'
p59148
sS'required'
p59149
I00
sS'group_name'
p59150
Nsa(dp59151
S'description'
p59152
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59153
sS'cpp_type'
p59154
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59155
sS'default'
p59156
g3
sS'name'
p59157
S'control_tags'
p59158
sS'required'
p59159
I00
sS'group_name'
p59160
Nsa(dp59161
S'description'
p59162
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59163
sS'cpp_type'
p59164
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59165
sS'default'
p59166
g3
sS'name'
p59167
S'diag_save_in'
p59168
sS'required'
p59169
I00
sS'group_name'
p59170
S'Advanced'
p59171
sa(dp59172
S'description'
p59173
S'The x displacement\n'
p59174
sS'cpp_type'
p59175
S'std::vector<VariableName>'
p59176
sS'default'
p59177
g3
sS'name'
p59178
S'disp_x'
p59179
sS'required'
p59180
I00
sS'group_name'
p59181
Nsa(dp59182
S'description'
p59183
S'The y displacement\n'
p59184
sS'cpp_type'
p59185
S'std::vector<VariableName>'
p59186
sS'default'
p59187
g3
sS'name'
p59188
S'disp_y'
p59189
sS'required'
p59190
I00
sS'group_name'
p59191
Nsa(dp59192
S'description'
p59193
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59194
sS'cpp_type'
p59195
S'bool'
p59196
sS'default'
p59197
S'1'
p59198
sS'name'
p59199
S'implicit'
p59200
sS'required'
p59201
I00
sS'group_name'
p59202
S'Advanced'
p59203
sa(dp59204
S'description'
p59205
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59206
sS'cpp_type'
p59207
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59208
sS'default'
p59209
g3
sS'name'
p59210
S'save_in'
p59211
sS'required'
p59212
I00
sS'group_name'
p59213
S'Advanced'
p59214
sa(dp59215
S'description'
p59216
S'The seed for the master random number generator\n'
p59217
sS'cpp_type'
p59218
S'unsigned int'
p59219
sS'default'
p59220
S'0'
p59221
sS'name'
p59222
S'seed'
p59223
sS'required'
p59224
I00
sS'group_name'
p59225
S'Advanced'
p59226
sa(dp59227
S'description'
p59228
S'The temperature\n'
p59229
sS'cpp_type'
p59230
S'std::vector<VariableName>'
p59231
sS'default'
p59232
g3
sS'name'
p59233
S'temp'
p59234
sS'required'
p59235
I00
sS'group_name'
p59236
Nsa(dp59237
S'description'
p59238
g3
sS'cpp_type'
p59239
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59240
sS'default'
p59241
S'OutOfPlaneStress'
p59242
sS'name'
p59243
S'type'
p59244
sS'required'
p59245
I00
sS'group_name'
p59246
Nsa(dp59247
S'description'
p59248
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p59249
sS'cpp_type'
p59250
S'bool'
p59251
sS'default'
p59252
S'1'
p59253
sS'name'
p59254
S'use_displaced_mesh'
p59255
sS'required'
p59256
I00
sS'group_name'
p59257
S'Advanced'
p59258
sa(dp59259
S'description'
p59260
S'The name of the variable that this Kernel operates on\n'
p59261
sS'cpp_type'
p59262
S'NonlinearVariableName'
p59263
sS'default'
p59264
g3
sS'name'
p59265
S'variable'
p59266
sS'required'
p59267
I01
sS'group_name'
p59268
NsasS'name'
p59269
S'/Kernels/OutOfPlaneStress'
p59270
sa(dp59271
S'description'
p59272
g3
sS'subblocks'
p59273
NsS'parameters'
p59274
(lp59275
(dp59276
S'description'
p59277
S'Base name for the complex L variables\n'
p59278
sS'cpp_type'
p59279
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59280
sS'default'
p59281
g3
sS'name'
p59282
S'L_name_base'
p59283
sS'required'
p59284
I01
sS'group_name'
p59285
Nsa(dp59286
S'description'
p59287
S'Parameter in the taylor series expansion\n'
p59288
sS'cpp_type'
p59289
S'double'
p59290
sS'default'
p59291
S'1'
p59292
sS'name'
p59293
S'a'
p59294
sS'required'
p59295
I00
sS'group_name'
p59296
Nsa(dp59297
S'description'
p59298
S'Parameter in the taylor series expansion\n'
p59299
sS'cpp_type'
p59300
S'double'
p59301
sS'default'
p59302
S'1'
p59303
sS'name'
p59304
S'b'
p59305
sS'required'
p59306
I00
sS'group_name'
p59307
Nsa(dp59308
S'description'
p59309
S'Parameter in the taylor series expansion\n'
p59310
sS'cpp_type'
p59311
S'double'
p59312
sS'default'
p59313
S'1'
p59314
sS'name'
p59315
S'c'
p59316
sS'required'
p59317
I00
sS'group_name'
p59318
Nsa(dp59319
S'name'
p59320
S'log_approach'
p59321
sS'cpp_type'
p59322
S'MooseEnum'
p59323
sS'default'
p59324
g3
sS'description'
p59325
S'Which approach will be used to handle the natural log\n'
p59326
sS'required'
p59327
I01
sS'options'
p59328
S'tolerance cancelation expansion'
p59329
sS'group_name'
p59330
Nsa(dp59331
S'description'
p59332
S'The mobility used for n in this model\n'
p59333
sS'cpp_type'
p59334
S'MaterialPropertyName'
p59335
sS'default'
p59336
S'M'
p59337
sS'name'
p59338
S'mob_name'
p59339
sS'required'
p59340
I00
sS'group_name'
p59341
Nsa(dp59342
S'description'
p59343
S'Number of terms used in the Taylor expansion of the natural log term\n'
p59344
sS'cpp_type'
p59345
S'double'
p59346
sS'default'
p59347
S'4'
p59348
sS'name'
p59349
S'n_exp_terms'
p59350
sS'required'
p59351
I00
sS'group_name'
p59352
Nsa(dp59353
S'description'
p59354
S'Variable name used for the n variable\n'
p59355
sS'cpp_type'
p59356
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59357
sS'default'
p59358
g3
sS'name'
p59359
S'n_name'
p59360
sS'required'
p59361
I01
sS'group_name'
p59362
Nsa(dp59363
S'description'
p59364
S'specifies the number of complex L variables will be solved for\n'
p59365
sS'cpp_type'
p59366
S'unsigned int'
p59367
sS'default'
p59368
g3
sS'name'
p59369
S'num_L'
p59370
sS'required'
p59371
I01
sS'group_name'
p59372
Nsa(dp59373
S'description'
p59374
S'Tolerance used when the tolerance approach is chosen\n'
p59375
sS'cpp_type'
p59376
S'double'
p59377
sS'default'
p59378
S'1e-09'
p59379
sS'name'
p59380
S'tol'
p59381
sS'required'
p59382
I00
sS'group_name'
p59383
Nsa(dp59384
S'description'
p59385
S'Whether to use displaced mesh in the kernels\n'
p59386
sS'cpp_type'
p59387
S'bool'
p59388
sS'default'
p59389
S'0'
p59390
sS'name'
p59391
S'use_displaced_mesh'
p59392
sS'required'
p59393
I00
sS'group_name'
p59394
NsasS'name'
p59395
S'/Kernels/PFCRFFKernel'
p59396
sa(dp59397
S'description'
p59398
S'Kernel to compute bulk energy contribution to damage order parameter residual equation\n'
p59399
sS'subblocks'
p59400
NsS'parameters'
p59401
(lp59402
(dp59403
S'description'
p59404
S'Material property name with undamaged strain energy driving damage (G0_pos)\n'
p59405
sS'cpp_type'
p59406
S'MaterialPropertyName'
p59407
sS'default'
p59408
g3
sS'name'
p59409
S'G0_var'
p59410
sS'required'
p59411
I01
sS'group_name'
p59412
Nsa(dp59413
S'description'
p59414
S'Auxiliary variable\n'
p59415
sS'cpp_type'
p59416
S'std::vector<VariableName>'
p59417
sS'default'
p59418
g3
sS'name'
p59419
S'beta'
p59420
sS'required'
p59421
I01
sS'group_name'
p59422
Nsa(dp59423
S'description'
p59424
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59425
sS'cpp_type'
p59426
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59427
sS'default'
p59428
g3
sS'name'
p59429
S'block'
p59430
sS'required'
p59431
I00
sS'group_name'
p59432
Nsa(dp59433
S'description'
p59434
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59435
sS'cpp_type'
p59436
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59437
sS'default'
p59438
g3
sS'name'
p59439
S'control_tags'
p59440
sS'required'
p59441
I00
sS'group_name'
p59442
Nsa(dp59443
S'description'
p59444
S'Material property name with derivative of G0_pos with strain\n'
p59445
sS'cpp_type'
p59446
S'MaterialPropertyName'
p59447
sS'default'
p59448
g3
sS'name'
p59449
S'dG0_dstrain_var'
p59450
sS'required'
p59451
I00
sS'group_name'
p59452
Nsa(dp59453
S'description'
p59454
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59455
sS'cpp_type'
p59456
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59457
sS'default'
p59458
g3
sS'name'
p59459
S'diag_save_in'
p59460
sS'required'
p59461
I00
sS'group_name'
p59462
S'Advanced'
p59463
sa(dp59464
S'description'
p59465
S'The x displacement\n'
p59466
sS'cpp_type'
p59467
S'std::vector<VariableName>'
p59468
sS'default'
p59469
g3
sS'name'
p59470
S'disp_x'
p59471
sS'required'
p59472
I00
sS'group_name'
p59473
Nsa(dp59474
S'description'
p59475
S'The y displacement\n'
p59476
sS'cpp_type'
p59477
S'std::vector<VariableName>'
p59478
sS'default'
p59479
g3
sS'name'
p59480
S'disp_y'
p59481
sS'required'
p59482
I00
sS'group_name'
p59483
Nsa(dp59484
S'description'
p59485
S'The z displacement\n'
p59486
sS'cpp_type'
p59487
S'std::vector<VariableName>'
p59488
sS'default'
p59489
g3
sS'name'
p59490
S'disp_z'
p59491
sS'required'
p59492
I00
sS'group_name'
p59493
Nsa(dp59494
S'description'
p59495
S'Material property name with gc value\n'
p59496
sS'cpp_type'
p59497
S'MaterialPropertyName'
p59498
sS'default'
p59499
g3
sS'name'
p59500
S'gc_prop_var'
p59501
sS'required'
p59502
I01
sS'group_name'
p59503
Nsa(dp59504
S'description'
p59505
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59506
sS'cpp_type'
p59507
S'bool'
p59508
sS'default'
p59509
S'1'
p59510
sS'name'
p59511
S'implicit'
p59512
sS'required'
p59513
I00
sS'group_name'
p59514
S'Advanced'
p59515
sa(dp59516
S'description'
p59517
S'Interface width\n'
p59518
sS'cpp_type'
p59519
S'double'
p59520
sS'default'
p59521
g3
sS'name'
p59522
S'l'
p59523
sS'required'
p59524
I01
sS'group_name'
p59525
Nsa(dp59526
S'description'
p59527
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59528
sS'cpp_type'
p59529
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59530
sS'default'
p59531
g3
sS'name'
p59532
S'save_in'
p59533
sS'required'
p59534
I00
sS'group_name'
p59535
S'Advanced'
p59536
sa(dp59537
S'description'
p59538
S'The seed for the master random number generator\n'
p59539
sS'cpp_type'
p59540
S'unsigned int'
p59541
sS'default'
p59542
S'0'
p59543
sS'name'
p59544
S'seed'
p59545
sS'required'
p59546
I00
sS'group_name'
p59547
S'Advanced'
p59548
sa(dp59549
S'description'
p59550
g3
sS'cpp_type'
p59551
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59552
sS'default'
p59553
S'PFFracBulkRate'
p59554
sS'name'
p59555
S'type'
p59556
sS'required'
p59557
I00
sS'group_name'
p59558
Nsa(dp59559
S'description'
p59560
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p59561
sS'cpp_type'
p59562
S'bool'
p59563
sS'default'
p59564
S'0'
p59565
sS'name'
p59566
S'use_displaced_mesh'
p59567
sS'required'
p59568
I00
sS'group_name'
p59569
S'Advanced'
p59570
sa(dp59571
S'description'
p59572
S'The name of the variable that this Kernel operates on\n'
p59573
sS'cpp_type'
p59574
S'NonlinearVariableName'
p59575
sS'default'
p59576
g3
sS'name'
p59577
S'variable'
p59578
sS'required'
p59579
I01
sS'group_name'
p59580
Nsa(dp59581
S'description'
p59582
S'Viscosity parameter\n'
p59583
sS'cpp_type'
p59584
S'double'
p59585
sS'default'
p59586
g3
sS'name'
p59587
S'visco'
p59588
sS'required'
p59589
I01
sS'group_name'
p59590
NsasS'name'
p59591
S'/Kernels/PFFracBulkRate'
p59592
sa(dp59593
S'description'
p59594
S'Phase-field fracture residual for beta variable: Contribution from gradient of damage order parameter\n'
p59595
sS'subblocks'
p59596
NsS'parameters'
p59597
(lp59598
(dp59599
S'description'
p59600
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59601
sS'cpp_type'
p59602
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59603
sS'default'
p59604
g3
sS'name'
p59605
S'block'
p59606
sS'required'
p59607
I00
sS'group_name'
p59608
Nsa(dp59609
S'description'
p59610
S'Order parameter for damage\n'
p59611
sS'cpp_type'
p59612
S'std::vector<VariableName>'
p59613
sS'default'
p59614
g3
sS'name'
p59615
S'c'
p59616
sS'required'
p59617
I01
sS'group_name'
p59618
Nsa(dp59619
S'description'
p59620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59621
sS'cpp_type'
p59622
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59623
sS'default'
p59624
g3
sS'name'
p59625
S'control_tags'
p59626
sS'required'
p59627
I00
sS'group_name'
p59628
Nsa(dp59629
S'description'
p59630
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59631
sS'cpp_type'
p59632
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59633
sS'default'
p59634
g3
sS'name'
p59635
S'diag_save_in'
p59636
sS'required'
p59637
I00
sS'group_name'
p59638
S'Advanced'
p59639
sa(dp59640
S'description'
p59641
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59642
sS'cpp_type'
p59643
S'bool'
p59644
sS'default'
p59645
S'1'
p59646
sS'name'
p59647
S'implicit'
p59648
sS'required'
p59649
I00
sS'group_name'
p59650
S'Advanced'
p59651
sa(dp59652
S'description'
p59653
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59654
sS'cpp_type'
p59655
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59656
sS'default'
p59657
g3
sS'name'
p59658
S'save_in'
p59659
sS'required'
p59660
I00
sS'group_name'
p59661
S'Advanced'
p59662
sa(dp59663
S'description'
p59664
S'The seed for the master random number generator\n'
p59665
sS'cpp_type'
p59666
S'unsigned int'
p59667
sS'default'
p59668
S'0'
p59669
sS'name'
p59670
S'seed'
p59671
sS'required'
p59672
I00
sS'group_name'
p59673
S'Advanced'
p59674
sa(dp59675
S'description'
p59676
g3
sS'cpp_type'
p59677
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59678
sS'default'
p59679
S'PFFracCoupledInterface'
p59680
sS'name'
p59681
S'type'
p59682
sS'required'
p59683
I00
sS'group_name'
p59684
Nsa(dp59685
S'description'
p59686
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p59687
sS'cpp_type'
p59688
S'bool'
p59689
sS'default'
p59690
S'0'
p59691
sS'name'
p59692
S'use_displaced_mesh'
p59693
sS'required'
p59694
I00
sS'group_name'
p59695
S'Advanced'
p59696
sa(dp59697
S'description'
p59698
S'The name of the variable that this Kernel operates on\n'
p59699
sS'cpp_type'
p59700
S'NonlinearVariableName'
p59701
sS'default'
p59702
g3
sS'name'
p59703
S'variable'
p59704
sS'required'
p59705
I01
sS'group_name'
p59706
NsasS'name'
p59707
S'/Kernels/PFFracCoupledInterface'
p59708
sa(dp59709
S'description'
p59710
S'Phase-field fracture residual for beta variable: Contribution from beta\n'
p59711
sS'subblocks'
p59712
NsS'parameters'
p59713
(lp59714
(dp59715
S'description'
p59716
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59717
sS'cpp_type'
p59718
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59719
sS'default'
p59720
g3
sS'name'
p59721
S'block'
p59722
sS'required'
p59723
I00
sS'group_name'
p59724
Nsa(dp59725
S'description'
p59726
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59727
sS'cpp_type'
p59728
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59729
sS'default'
p59730
g3
sS'name'
p59731
S'control_tags'
p59732
sS'required'
p59733
I00
sS'group_name'
p59734
Nsa(dp59735
S'description'
p59736
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59737
sS'cpp_type'
p59738
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59739
sS'default'
p59740
g3
sS'name'
p59741
S'diag_save_in'
p59742
sS'required'
p59743
I00
sS'group_name'
p59744
S'Advanced'
p59745
sa(dp59746
S'description'
p59747
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59748
sS'cpp_type'
p59749
S'bool'
p59750
sS'default'
p59751
S'1'
p59752
sS'name'
p59753
S'implicit'
p59754
sS'required'
p59755
I00
sS'group_name'
p59756
S'Advanced'
p59757
sa(dp59758
S'description'
p59759
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59760
sS'cpp_type'
p59761
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59762
sS'default'
p59763
g3
sS'name'
p59764
S'save_in'
p59765
sS'required'
p59766
I00
sS'group_name'
p59767
S'Advanced'
p59768
sa(dp59769
S'description'
p59770
S'The seed for the master random number generator\n'
p59771
sS'cpp_type'
p59772
S'unsigned int'
p59773
sS'default'
p59774
S'0'
p59775
sS'name'
p59776
S'seed'
p59777
sS'required'
p59778
I00
sS'group_name'
p59779
S'Advanced'
p59780
sa(dp59781
S'description'
p59782
g3
sS'cpp_type'
p59783
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59784
sS'default'
p59785
S'PFFracIntVar'
p59786
sS'name'
p59787
S'type'
p59788
sS'required'
p59789
I00
sS'group_name'
p59790
Nsa(dp59791
S'description'
p59792
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p59793
sS'cpp_type'
p59794
S'bool'
p59795
sS'default'
p59796
S'0'
p59797
sS'name'
p59798
S'use_displaced_mesh'
p59799
sS'required'
p59800
I00
sS'group_name'
p59801
S'Advanced'
p59802
sa(dp59803
S'description'
p59804
S'The name of the variable that this Kernel operates on\n'
p59805
sS'cpp_type'
p59806
S'NonlinearVariableName'
p59807
sS'default'
p59808
g3
sS'name'
p59809
S'variable'
p59810
sS'required'
p59811
I01
sS'group_name'
p59812
NsasS'name'
p59813
S'/Kernels/PFFracIntVar'
p59814
sa(dp59815
S'description'
p59816
g3
sS'subblocks'
p59817
NsS'parameters'
p59818
(lp59819
(dp59820
S'description'
p59821
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p59822
sS'cpp_type'
p59823
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59824
sS'default'
p59825
g3
sS'name'
p59826
S'base_name'
p59827
sS'required'
p59828
I00
sS'group_name'
p59829
Nsa(dp59830
S'description'
p59831
S'specifies the number of grains to create\n'
p59832
sS'cpp_type'
p59833
S'unsigned int'
p59834
sS'default'
p59835
g3
sS'name'
p59836
S'op_num'
p59837
sS'required'
p59838
I01
sS'group_name'
p59839
Nsa(dp59840
S'description'
p59841
S'Whether to use displaced mesh in the kernels\n'
p59842
sS'cpp_type'
p59843
S'bool'
p59844
sS'default'
p59845
S'0'
p59846
sS'name'
p59847
S'use_displaced_mesh'
p59848
sS'required'
p59849
I00
sS'group_name'
p59850
Nsa(dp59851
S'description'
p59852
S'specifies the base name of the variables\n'
p59853
sS'cpp_type'
p59854
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59855
sS'default'
p59856
g3
sS'name'
p59857
S'var_name_base'
p59858
sS'required'
p59859
I01
sS'group_name'
p59860
NsasS'name'
p59861
S'/Kernels/PolycrystalElasticDrivingForce'
p59862
sa(dp59863
S'description'
p59864
g3
sS'subblocks'
p59865
NsS'parameters'
p59866
(lp59867
(dp59868
S'description'
p59869
S'Name of temperature variable\n'
p59870
sS'cpp_type'
p59871
S'VariableName'
p59872
sS'default'
p59873
S'NONE'
p59874
sS'name'
p59875
S'T'
p59876
sS'required'
p59877
I00
sS'group_name'
p59878
Nsa(dp59879
S'description'
p59880
S'Name of coupled concentration variable\n'
p59881
sS'cpp_type'
p59882
S'VariableName'
p59883
sS'default'
p59884
S'NONE'
p59885
sS'name'
p59886
S'c'
p59887
sS'required'
p59888
I00
sS'group_name'
p59889
Nsa(dp59890
S'description'
p59891
S'Ratio of surface to GB energy\n'
p59892
sS'cpp_type'
p59893
S'double'
p59894
sS'default'
p59895
S'1'
p59896
sS'name'
p59897
S'en_ratio'
p59898
sS'required'
p59899
I00
sS'group_name'
p59900
Nsa(dp59901
S'description'
p59902
S'Whether kernels are implicit or not\n'
p59903
sS'cpp_type'
p59904
S'bool'
p59905
sS'default'
p59906
S'1'
p59907
sS'name'
p59908
S'implicit'
p59909
sS'required'
p59910
I00
sS'group_name'
p59911
Nsa(dp59912
S'description'
p59913
S'specifies the number of grains to create\n'
p59914
sS'cpp_type'
p59915
S'unsigned int'
p59916
sS'default'
p59917
g3
sS'name'
p59918
S'op_num'
p59919
sS'required'
p59920
I01
sS'group_name'
p59921
Nsa(dp59922
S'description'
p59923
S'Whether to use displaced mesh in the kernels\n'
p59924
sS'cpp_type'
p59925
S'bool'
p59926
sS'default'
p59927
S'0'
p59928
sS'name'
p59929
S'use_displaced_mesh'
p59930
sS'required'
p59931
I00
sS'group_name'
p59932
Nsa(dp59933
S'description'
p59934
S'specifies the base name of the variables\n'
p59935
sS'cpp_type'
p59936
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p59937
sS'default'
p59938
g3
sS'name'
p59939
S'var_name_base'
p59940
sS'required'
p59941
I01
sS'group_name'
p59942
NsasS'name'
p59943
S'/Kernels/PolycrystalKernel'
p59944
sa(dp59945
S'description'
p59946
S'Kernel = biot_coefficient*d(volumetric_strain)/dt + (1/biot_modulus)*d(porepressure)/dt.  This is the time-derivative for poromechanics for a single-phase, fully-saturated fluid with constant bulk modulus\n'
p59947
sS'subblocks'
p59948
NsS'parameters'
p59949
(lp59950
(dp59951
S'description'
p59952
S'The list of block ids (SubdomainID) that this object will be applied\n'
p59953
sS'cpp_type'
p59954
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p59955
sS'default'
p59956
g3
sS'name'
p59957
S'block'
p59958
sS'required'
p59959
I00
sS'group_name'
p59960
Nsa(dp59961
S'description'
p59962
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p59963
sS'cpp_type'
p59964
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p59965
sS'default'
p59966
g3
sS'name'
p59967
S'control_tags'
p59968
sS'required'
p59969
I00
sS'group_name'
p59970
Nsa(dp59971
S'description'
p59972
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p59973
sS'cpp_type'
p59974
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p59975
sS'default'
p59976
g3
sS'name'
p59977
S'diag_save_in'
p59978
sS'required'
p59979
I00
sS'group_name'
p59980
S'Advanced'
p59981
sa(dp59982
S'description'
p59983
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p59984
sS'cpp_type'
p59985
S'std::vector<VariableName>'
p59986
sS'default'
p59987
g3
sS'name'
p59988
S'displacements'
p59989
sS'required'
p59990
I01
sS'group_name'
p59991
Nsa(dp59992
S'description'
p59993
S'Determines whether this object is calculated using an implicit or explicit form\n'
p59994
sS'cpp_type'
p59995
S'bool'
p59996
sS'default'
p59997
S'1'
p59998
sS'name'
p59999
S'implicit'
p60000
sS'required'
p60001
I00
sS'group_name'
p60002
S'Advanced'
p60003
sa(dp60004
S'description'
p60005
S'True for mass matrix lumping, false otherwise\n'
p60006
sS'cpp_type'
p60007
S'bool'
p60008
sS'default'
p60009
S'0'
p60010
sS'name'
p60011
S'lumping'
p60012
sS'required'
p60013
I00
sS'group_name'
p60014
Nsa(dp60015
S'description'
p60016
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60017
sS'cpp_type'
p60018
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60019
sS'default'
p60020
g3
sS'name'
p60021
S'save_in'
p60022
sS'required'
p60023
I00
sS'group_name'
p60024
S'Advanced'
p60025
sa(dp60026
S'description'
p60027
S'The seed for the master random number generator\n'
p60028
sS'cpp_type'
p60029
S'unsigned int'
p60030
sS'default'
p60031
S'0'
p60032
sS'name'
p60033
S'seed'
p60034
sS'required'
p60035
I00
sS'group_name'
p60036
S'Advanced'
p60037
sa(dp60038
S'description'
p60039
g3
sS'cpp_type'
p60040
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60041
sS'default'
p60042
S'PoroFullSatTimeDerivative'
p60043
sS'name'
p60044
S'type'
p60045
sS'required'
p60046
I00
sS'group_name'
p60047
Nsa(dp60048
S'description'
p60049
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60050
sS'cpp_type'
p60051
S'bool'
p60052
sS'default'
p60053
S'0'
p60054
sS'name'
p60055
S'use_displaced_mesh'
p60056
sS'required'
p60057
I00
sS'group_name'
p60058
S'Advanced'
p60059
sa(dp60060
S'description'
p60061
S'The name of the variable that this Kernel operates on\n'
p60062
sS'cpp_type'
p60063
S'NonlinearVariableName'
p60064
sS'default'
p60065
g3
sS'name'
p60066
S'variable'
p60067
sS'required'
p60068
I01
sS'group_name'
p60069
NsasS'name'
p60070
S'/Kernels/PoroFullSatTimeDerivative'
p60071
sa(dp60072
S'description'
p60073
g3
sS'subblocks'
p60074
NsS'parameters'
p60075
(lp60076
(dp60077
S'description'
p60078
S'Material property base name\n'
p60079
sS'cpp_type'
p60080
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60081
sS'default'
p60082
g3
sS'name'
p60083
S'base_name'
p60084
sS'required'
p60085
I00
sS'group_name'
p60086
Nsa(dp60087
S'description'
p60088
S'The x displacement\n'
p60089
sS'cpp_type'
p60090
S'NonlinearVariableName'
p60091
sS'default'
p60092
g3
sS'name'
p60093
S'disp_x'
p60094
sS'required'
p60095
I00
sS'group_name'
p60096
Nsa(dp60097
S'description'
p60098
S'The y displacement\n'
p60099
sS'cpp_type'
p60100
S'NonlinearVariableName'
p60101
sS'default'
p60102
g3
sS'name'
p60103
S'disp_y'
p60104
sS'required'
p60105
I00
sS'group_name'
p60106
Nsa(dp60107
S'description'
p60108
S'The z displacement\n'
p60109
sS'cpp_type'
p60110
S'NonlinearVariableName'
p60111
sS'default'
p60112
g3
sS'name'
p60113
S'disp_z'
p60114
sS'required'
p60115
I00
sS'group_name'
p60116
Nsa(dp60117
S'description'
p60118
S'The nonlinear displacement variables for the problem\n'
p60119
sS'cpp_type'
p60120
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p60121
sS'default'
p60122
g3
sS'name'
p60123
S'displacements'
p60124
sS'required'
p60125
I00
sS'group_name'
p60126
Nsa(dp60127
S'description'
p60128
S'The porepressure variable\n'
p60129
sS'cpp_type'
p60130
S'NonlinearVariableName'
p60131
sS'default'
p60132
g3
sS'name'
p60133
S'porepressure'
p60134
sS'required'
p60135
I01
sS'group_name'
p60136
Nsa(dp60137
S'description'
p60138
S'Auxiliary variables to save the x displacement residuals.\n'
p60139
sS'cpp_type'
p60140
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60141
sS'default'
p60142
g3
sS'name'
p60143
S'save_in_disp_x'
p60144
sS'required'
p60145
I00
sS'group_name'
p60146
Nsa(dp60147
S'description'
p60148
S'Auxiliary variables to save the y displacement residuals.\n'
p60149
sS'cpp_type'
p60150
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60151
sS'default'
p60152
g3
sS'name'
p60153
S'save_in_disp_y'
p60154
sS'required'
p60155
I00
sS'group_name'
p60156
Nsa(dp60157
S'description'
p60158
S'Auxiliary variables to save the z displacement residuals.\n'
p60159
sS'cpp_type'
p60160
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60161
sS'default'
p60162
g3
sS'name'
p60163
S'save_in_disp_z'
p60164
sS'required'
p60165
I00
sS'group_name'
p60166
Nsa(dp60167
S'description'
p60168
S'The temperature\n'
p60169
sS'cpp_type'
p60170
S'NonlinearVariableName'
p60171
sS'default'
p60172
g3
sS'name'
p60173
S'temp'
p60174
sS'required'
p60175
I00
sS'group_name'
p60176
Nsa(dp60177
S'description'
p60178
S'Whether to use displaced mesh in the kernels\n'
p60179
sS'cpp_type'
p60180
S'bool'
p60181
sS'default'
p60182
S'0'
p60183
sS'name'
p60184
S'use_displaced_mesh'
p60185
sS'required'
p60186
I00
sS'group_name'
p60187
NsasS'name'
p60188
S'/Kernels/PoroMechanics'
p60189
sa(dp60190
S'description'
p60191
S'Adds -BiotCoefficient*porepressure*grad_test[component]\n'
p60192
sS'subblocks'
p60193
NsS'parameters'
p60194
(lp60195
(dp60196
S'description'
p60197
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60198
sS'cpp_type'
p60199
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60200
sS'default'
p60201
g3
sS'name'
p60202
S'block'
p60203
sS'required'
p60204
I00
sS'group_name'
p60205
Nsa(dp60206
S'description'
p60207
S'The gradient direction (0 for x, 1 for y and 2 for z)\n'
p60208
sS'cpp_type'
p60209
S'unsigned int'
p60210
sS'default'
p60211
g3
sS'name'
p60212
S'component'
p60213
sS'required'
p60214
I01
sS'group_name'
p60215
Nsa(dp60216
S'description'
p60217
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60218
sS'cpp_type'
p60219
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60220
sS'default'
p60221
g3
sS'name'
p60222
S'control_tags'
p60223
sS'required'
p60224
I00
sS'group_name'
p60225
Nsa(dp60226
S'description'
p60227
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60228
sS'cpp_type'
p60229
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60230
sS'default'
p60231
g3
sS'name'
p60232
S'diag_save_in'
p60233
sS'required'
p60234
I00
sS'group_name'
p60235
S'Advanced'
p60236
sa(dp60237
S'description'
p60238
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60239
sS'cpp_type'
p60240
S'bool'
p60241
sS'default'
p60242
S'1'
p60243
sS'name'
p60244
S'implicit'
p60245
sS'required'
p60246
I00
sS'group_name'
p60247
S'Advanced'
p60248
sa(dp60249
S'description'
p60250
S'Porepressure.  This kernel adds -BiotCoefficient*porepressure*grad_test[component]\n'
p60251
sS'cpp_type'
p60252
S'std::vector<VariableName>'
p60253
sS'default'
p60254
g3
sS'name'
p60255
S'porepressure'
p60256
sS'required'
p60257
I01
sS'group_name'
p60258
Nsa(dp60259
S'description'
p60260
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60261
sS'cpp_type'
p60262
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60263
sS'default'
p60264
g3
sS'name'
p60265
S'save_in'
p60266
sS'required'
p60267
I00
sS'group_name'
p60268
S'Advanced'
p60269
sa(dp60270
S'description'
p60271
S'The seed for the master random number generator\n'
p60272
sS'cpp_type'
p60273
S'unsigned int'
p60274
sS'default'
p60275
S'0'
p60276
sS'name'
p60277
S'seed'
p60278
sS'required'
p60279
I00
sS'group_name'
p60280
S'Advanced'
p60281
sa(dp60282
S'description'
p60283
g3
sS'cpp_type'
p60284
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60285
sS'default'
p60286
S'PoroMechanicsCoupling'
p60287
sS'name'
p60288
S'type'
p60289
sS'required'
p60290
I00
sS'group_name'
p60291
Nsa(dp60292
S'description'
p60293
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60294
sS'cpp_type'
p60295
S'bool'
p60296
sS'default'
p60297
S'0'
p60298
sS'name'
p60299
S'use_displaced_mesh'
p60300
sS'required'
p60301
I00
sS'group_name'
p60302
S'Advanced'
p60303
sa(dp60304
S'description'
p60305
S'The name of the variable that this Kernel operates on\n'
p60306
sS'cpp_type'
p60307
S'NonlinearVariableName'
p60308
sS'default'
p60309
g3
sS'name'
p60310
S'variable'
p60311
sS'required'
p60312
I01
sS'group_name'
p60313
NsasS'name'
p60314
S'/Kernels/PoroMechanicsCoupling'
p60315
sa(dp60316
S'description'
p60317
g3
sS'subblocks'
p60318
NsS'parameters'
p60319
(lp60320
(dp60321
S'description'
p60322
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60323
sS'cpp_type'
p60324
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60325
sS'default'
p60326
g3
sS'name'
p60327
S'block'
p60328
sS'required'
p60329
I00
sS'group_name'
p60330
Nsa(dp60331
S'description'
p60332
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60333
sS'cpp_type'
p60334
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60335
sS'default'
p60336
g3
sS'name'
p60337
S'control_tags'
p60338
sS'required'
p60339
I00
sS'group_name'
p60340
Nsa(dp60341
S'description'
p60342
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60343
sS'cpp_type'
p60344
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60345
sS'default'
p60346
g3
sS'name'
p60347
S'diag_save_in'
p60348
sS'required'
p60349
I00
sS'group_name'
p60350
S'Advanced'
p60351
sa(dp60352
S'description'
p60353
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60354
sS'cpp_type'
p60355
S'bool'
p60356
sS'default'
p60357
S'1'
p60358
sS'name'
p60359
S'implicit'
p60360
sS'required'
p60361
I00
sS'group_name'
p60362
S'Advanced'
p60363
sa(dp60364
S'description'
p60365
S'Pressure\n'
p60366
sS'cpp_type'
p60367
S'std::vector<VariableName>'
p60368
sS'default'
p60369
g3
sS'name'
p60370
S'p'
p60371
sS'required'
p60372
I01
sS'group_name'
p60373
Nsa(dp60374
S'description'
p60375
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60376
sS'cpp_type'
p60377
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60378
sS'default'
p60379
g3
sS'name'
p60380
S'save_in'
p60381
sS'required'
p60382
I00
sS'group_name'
p60383
S'Advanced'
p60384
sa(dp60385
S'description'
p60386
S'The seed for the master random number generator\n'
p60387
sS'cpp_type'
p60388
S'unsigned int'
p60389
sS'default'
p60390
S'0'
p60391
sS'name'
p60392
S'seed'
p60393
sS'required'
p60394
I00
sS'group_name'
p60395
S'Advanced'
p60396
sa(dp60397
S'description'
p60398
g3
sS'cpp_type'
p60399
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60400
sS'default'
p60401
S'PrimaryConvection'
p60402
sS'name'
p60403
S'type'
p60404
sS'required'
p60405
I00
sS'group_name'
p60406
Nsa(dp60407
S'description'
p60408
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60409
sS'cpp_type'
p60410
S'bool'
p60411
sS'default'
p60412
S'0'
p60413
sS'name'
p60414
S'use_displaced_mesh'
p60415
sS'required'
p60416
I00
sS'group_name'
p60417
S'Advanced'
p60418
sa(dp60419
S'description'
p60420
S'The name of the variable that this Kernel operates on\n'
p60421
sS'cpp_type'
p60422
S'NonlinearVariableName'
p60423
sS'default'
p60424
g3
sS'name'
p60425
S'variable'
p60426
sS'required'
p60427
I01
sS'group_name'
p60428
NsasS'name'
p60429
S'/Kernels/PrimaryConvection'
p60430
sa(dp60431
S'description'
p60432
g3
sS'subblocks'
p60433
NsS'parameters'
p60434
(lp60435
(dp60436
S'description'
p60437
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60438
sS'cpp_type'
p60439
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60440
sS'default'
p60441
g3
sS'name'
p60442
S'block'
p60443
sS'required'
p60444
I00
sS'group_name'
p60445
Nsa(dp60446
S'description'
p60447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60448
sS'cpp_type'
p60449
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60450
sS'default'
p60451
g3
sS'name'
p60452
S'control_tags'
p60453
sS'required'
p60454
I00
sS'group_name'
p60455
Nsa(dp60456
S'description'
p60457
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60458
sS'cpp_type'
p60459
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60460
sS'default'
p60461
g3
sS'name'
p60462
S'diag_save_in'
p60463
sS'required'
p60464
I00
sS'group_name'
p60465
S'Advanced'
p60466
sa(dp60467
S'description'
p60468
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60469
sS'cpp_type'
p60470
S'bool'
p60471
sS'default'
p60472
S'1'
p60473
sS'name'
p60474
S'implicit'
p60475
sS'required'
p60476
I00
sS'group_name'
p60477
S'Advanced'
p60478
sa(dp60479
S'description'
p60480
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60481
sS'cpp_type'
p60482
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60483
sS'default'
p60484
g3
sS'name'
p60485
S'save_in'
p60486
sS'required'
p60487
I00
sS'group_name'
p60488
S'Advanced'
p60489
sa(dp60490
S'description'
p60491
S'The seed for the master random number generator\n'
p60492
sS'cpp_type'
p60493
S'unsigned int'
p60494
sS'default'
p60495
S'0'
p60496
sS'name'
p60497
S'seed'
p60498
sS'required'
p60499
I00
sS'group_name'
p60500
S'Advanced'
p60501
sa(dp60502
S'description'
p60503
g3
sS'cpp_type'
p60504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60505
sS'default'
p60506
S'PrimaryDiffusion'
p60507
sS'name'
p60508
S'type'
p60509
sS'required'
p60510
I00
sS'group_name'
p60511
Nsa(dp60512
S'description'
p60513
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60514
sS'cpp_type'
p60515
S'bool'
p60516
sS'default'
p60517
S'0'
p60518
sS'name'
p60519
S'use_displaced_mesh'
p60520
sS'required'
p60521
I00
sS'group_name'
p60522
S'Advanced'
p60523
sa(dp60524
S'description'
p60525
S'The name of the variable that this Kernel operates on\n'
p60526
sS'cpp_type'
p60527
S'NonlinearVariableName'
p60528
sS'default'
p60529
g3
sS'name'
p60530
S'variable'
p60531
sS'required'
p60532
I01
sS'group_name'
p60533
NsasS'name'
p60534
S'/Kernels/PrimaryDiffusion'
p60535
sa(dp60536
S'description'
p60537
g3
sS'subblocks'
p60538
NsS'parameters'
p60539
(lp60540
(dp60541
S'description'
p60542
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60543
sS'cpp_type'
p60544
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60545
sS'default'
p60546
g3
sS'name'
p60547
S'block'
p60548
sS'required'
p60549
I00
sS'group_name'
p60550
Nsa(dp60551
S'description'
p60552
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60553
sS'cpp_type'
p60554
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60555
sS'default'
p60556
g3
sS'name'
p60557
S'control_tags'
p60558
sS'required'
p60559
I00
sS'group_name'
p60560
Nsa(dp60561
S'description'
p60562
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60563
sS'cpp_type'
p60564
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60565
sS'default'
p60566
g3
sS'name'
p60567
S'diag_save_in'
p60568
sS'required'
p60569
I00
sS'group_name'
p60570
S'Advanced'
p60571
sa(dp60572
S'description'
p60573
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60574
sS'cpp_type'
p60575
S'bool'
p60576
sS'default'
p60577
S'1'
p60578
sS'name'
p60579
S'implicit'
p60580
sS'required'
p60581
I00
sS'group_name'
p60582
S'Advanced'
p60583
sa(dp60584
S'description'
p60585
S'True for mass matrix lumping, false otherwise\n'
p60586
sS'cpp_type'
p60587
S'bool'
p60588
sS'default'
p60589
S'0'
p60590
sS'name'
p60591
S'lumping'
p60592
sS'required'
p60593
I00
sS'group_name'
p60594
Nsa(dp60595
S'description'
p60596
S'The real material property (here is it a porosity) to use\n'
p60597
sS'cpp_type'
p60598
S'MaterialPropertyName'
p60599
sS'default'
p60600
S'porosity'
p60601
sS'name'
p60602
S'porosity'
p60603
sS'required'
p60604
I00
sS'group_name'
p60605
Nsa(dp60606
S'description'
p60607
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60608
sS'cpp_type'
p60609
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60610
sS'default'
p60611
g3
sS'name'
p60612
S'save_in'
p60613
sS'required'
p60614
I00
sS'group_name'
p60615
S'Advanced'
p60616
sa(dp60617
S'description'
p60618
S'The seed for the master random number generator\n'
p60619
sS'cpp_type'
p60620
S'unsigned int'
p60621
sS'default'
p60622
S'0'
p60623
sS'name'
p60624
S'seed'
p60625
sS'required'
p60626
I00
sS'group_name'
p60627
S'Advanced'
p60628
sa(dp60629
S'description'
p60630
g3
sS'cpp_type'
p60631
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60632
sS'default'
p60633
S'PrimaryTimeDerivative'
p60634
sS'name'
p60635
S'type'
p60636
sS'required'
p60637
I00
sS'group_name'
p60638
Nsa(dp60639
S'description'
p60640
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60641
sS'cpp_type'
p60642
S'bool'
p60643
sS'default'
p60644
S'0'
p60645
sS'name'
p60646
S'use_displaced_mesh'
p60647
sS'required'
p60648
I00
sS'group_name'
p60649
S'Advanced'
p60650
sa(dp60651
S'description'
p60652
S'The name of the variable that this Kernel operates on\n'
p60653
sS'cpp_type'
p60654
S'NonlinearVariableName'
p60655
sS'default'
p60656
g3
sS'name'
p60657
S'variable'
p60658
sS'required'
p60659
I01
sS'group_name'
p60660
NsasS'name'
p60661
S'/Kernels/PrimaryTimeDerivative'
p60662
sa(dp60663
S'description'
p60664
g3
sS'subblocks'
p60665
NsS'parameters'
p60666
(lp60667
(dp60668
S'description'
p60669
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60670
sS'cpp_type'
p60671
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60672
sS'default'
p60673
g3
sS'name'
p60674
S'block'
p60675
sS'required'
p60676
I00
sS'group_name'
p60677
Nsa(dp60678
S'description'
p60679
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60680
sS'cpp_type'
p60681
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60682
sS'default'
p60683
g3
sS'name'
p60684
S'control_tags'
p60685
sS'required'
p60686
I00
sS'group_name'
p60687
Nsa(dp60688
S'description'
p60689
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60690
sS'cpp_type'
p60691
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60692
sS'default'
p60693
g3
sS'name'
p60694
S'diag_save_in'
p60695
sS'required'
p60696
I00
sS'group_name'
p60697
S'Advanced'
p60698
sa(dp60699
S'description'
p60700
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60701
sS'cpp_type'
p60702
S'bool'
p60703
sS'default'
p60704
S'1'
p60705
sS'name'
p60706
S'implicit'
p60707
sS'required'
p60708
I00
sS'group_name'
p60709
S'Advanced'
p60710
sa(dp60711
S'description'
p60712
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60713
sS'cpp_type'
p60714
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60715
sS'default'
p60716
g3
sS'name'
p60717
S'save_in'
p60718
sS'required'
p60719
I00
sS'group_name'
p60720
S'Advanced'
p60721
sa(dp60722
S'description'
p60723
S'The seed for the master random number generator\n'
p60724
sS'cpp_type'
p60725
S'unsigned int'
p60726
sS'default'
p60727
S'0'
p60728
sS'name'
p60729
S'seed'
p60730
sS'required'
p60731
I00
sS'group_name'
p60732
S'Advanced'
p60733
sa(dp60734
S'description'
p60735
g3
sS'cpp_type'
p60736
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60737
sS'default'
p60738
S'QSource'
p60739
sS'name'
p60740
S'type'
p60741
sS'required'
p60742
I00
sS'group_name'
p60743
Nsa(dp60744
S'description'
p60745
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60746
sS'cpp_type'
p60747
S'bool'
p60748
sS'default'
p60749
S'0'
p60750
sS'name'
p60751
S'use_displaced_mesh'
p60752
sS'required'
p60753
I00
sS'group_name'
p60754
S'Advanced'
p60755
sa(dp60756
S'description'
p60757
S'The name of the variable that this Kernel operates on\n'
p60758
sS'cpp_type'
p60759
S'NonlinearVariableName'
p60760
sS'default'
p60761
g3
sS'name'
p60762
S'variable'
p60763
sS'required'
p60764
I01
sS'group_name'
p60765
NsasS'name'
p60766
S'/Kernels/QSource'
p60767
sa(dp60768
S'description'
p60769
g3
sS'subblocks'
p60770
NsS'parameters'
p60771
(lp60772
(dp60773
S'description'
p60774
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60775
sS'cpp_type'
p60776
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60777
sS'default'
p60778
g3
sS'name'
p60779
S'block'
p60780
sS'required'
p60781
I00
sS'group_name'
p60782
Nsa(dp60783
S'description'
p60784
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60785
sS'cpp_type'
p60786
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60787
sS'default'
p60788
g3
sS'name'
p60789
S'control_tags'
p60790
sS'required'
p60791
I00
sS'group_name'
p60792
Nsa(dp60793
S'description'
p60794
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60795
sS'cpp_type'
p60796
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60797
sS'default'
p60798
g3
sS'name'
p60799
S'diag_save_in'
p60800
sS'required'
p60801
I00
sS'group_name'
p60802
S'Advanced'
p60803
sa(dp60804
S'description'
p60805
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60806
sS'cpp_type'
p60807
S'bool'
p60808
sS'default'
p60809
S'1'
p60810
sS'name'
p60811
S'implicit'
p60812
sS'required'
p60813
I00
sS'group_name'
p60814
S'Advanced'
p60815
sa(dp60816
S'description'
p60817
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60818
sS'cpp_type'
p60819
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60820
sS'default'
p60821
g3
sS'name'
p60822
S'save_in'
p60823
sS'required'
p60824
I00
sS'group_name'
p60825
S'Advanced'
p60826
sa(dp60827
S'description'
p60828
S'The seed for the master random number generator\n'
p60829
sS'cpp_type'
p60830
S'unsigned int'
p60831
sS'default'
p60832
S'0'
p60833
sS'name'
p60834
S'seed'
p60835
sS'required'
p60836
I00
sS'group_name'
p60837
S'Advanced'
p60838
sa(dp60839
S'description'
p60840
g3
sS'cpp_type'
p60841
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60842
sS'default'
p60843
S'Reaction'
p60844
sS'name'
p60845
S'type'
p60846
sS'required'
p60847
I00
sS'group_name'
p60848
Nsa(dp60849
S'description'
p60850
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60851
sS'cpp_type'
p60852
S'bool'
p60853
sS'default'
p60854
S'0'
p60855
sS'name'
p60856
S'use_displaced_mesh'
p60857
sS'required'
p60858
I00
sS'group_name'
p60859
S'Advanced'
p60860
sa(dp60861
S'description'
p60862
S'The name of the variable that this Kernel operates on\n'
p60863
sS'cpp_type'
p60864
S'NonlinearVariableName'
p60865
sS'default'
p60866
g3
sS'name'
p60867
S'variable'
p60868
sS'required'
p60869
I01
sS'group_name'
p60870
NsasS'name'
p60871
S'/Kernels/Reaction'
p60872
sa(dp60873
S'description'
p60874
g3
sS'subblocks'
p60875
NsS'parameters'
p60876
(lp60877
(dp60878
S'description'
p60879
S'The list of block ids (SubdomainID) that this object will be applied\n'
p60880
sS'cpp_type'
p60881
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p60882
sS'default'
p60883
g3
sS'name'
p60884
S'block'
p60885
sS'required'
p60886
I00
sS'group_name'
p60887
Nsa(dp60888
S'description'
p60889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p60890
sS'cpp_type'
p60891
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p60892
sS'default'
p60893
g3
sS'name'
p60894
S'control_tags'
p60895
sS'required'
p60896
I00
sS'group_name'
p60897
Nsa(dp60898
S'description'
p60899
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60900
sS'cpp_type'
p60901
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60902
sS'default'
p60903
g3
sS'name'
p60904
S'diag_save_in'
p60905
sS'required'
p60906
I00
sS'group_name'
p60907
S'Advanced'
p60908
sa(dp60909
S'description'
p60910
S'Determines whether this object is calculated using an implicit or explicit form\n'
p60911
sS'cpp_type'
p60912
S'bool'
p60913
sS'default'
p60914
S'1'
p60915
sS'name'
p60916
S'implicit'
p60917
sS'required'
p60918
I00
sS'group_name'
p60919
S'Advanced'
p60920
sa(dp60921
S'description'
p60922
S'If you are using second-order Lagrange shape functions you need to set this to false.\n'
p60923
sS'cpp_type'
p60924
S'bool'
p60925
sS'default'
p60926
S'1'
p60927
sS'name'
p60928
S'linear_shape_fcns'
p60929
sS'required'
p60930
I00
sS'group_name'
p60931
Nsa(dp60932
S'description'
p60933
S'The UserObject that holds the list of Richards variable names.\n'
p60934
sS'cpp_type'
p60935
S'UserObjectName'
p60936
sS'default'
p60937
g3
sS'name'
p60938
S'richardsVarNames_UO'
p60939
sS'required'
p60940
I01
sS'group_name'
p60941
Nsa(dp60942
S'description'
p60943
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p60944
sS'cpp_type'
p60945
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p60946
sS'default'
p60947
g3
sS'name'
p60948
S'save_in'
p60949
sS'required'
p60950
I00
sS'group_name'
p60951
S'Advanced'
p60952
sa(dp60953
S'description'
p60954
S'The seed for the master random number generator\n'
p60955
sS'cpp_type'
p60956
S'unsigned int'
p60957
sS'default'
p60958
S'0'
p60959
sS'name'
p60960
S'seed'
p60961
sS'required'
p60962
I00
sS'group_name'
p60963
S'Advanced'
p60964
sa(dp60965
S'description'
p60966
g3
sS'cpp_type'
p60967
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p60968
sS'default'
p60969
S'RichardsFlux'
p60970
sS'name'
p60971
S'type'
p60972
sS'required'
p60973
I00
sS'group_name'
p60974
Nsa(dp60975
S'description'
p60976
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p60977
sS'cpp_type'
p60978
S'bool'
p60979
sS'default'
p60980
S'0'
p60981
sS'name'
p60982
S'use_displaced_mesh'
p60983
sS'required'
p60984
I00
sS'group_name'
p60985
S'Advanced'
p60986
sa(dp60987
S'description'
p60988
S'The name of the variable that this Kernel operates on\n'
p60989
sS'cpp_type'
p60990
S'NonlinearVariableName'
p60991
sS'default'
p60992
g3
sS'name'
p60993
S'variable'
p60994
sS'required'
p60995
I01
sS'group_name'
p60996
NsasS'name'
p60997
S'/Kernels/RichardsFlux'
p60998
sa(dp60999
S'description'
p61000
g3
sS'subblocks'
p61001
NsS'parameters'
p61002
(lp61003
(dp61004
S'description'
p61005
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61006
sS'cpp_type'
p61007
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61008
sS'default'
p61009
g3
sS'name'
p61010
S'block'
p61011
sS'required'
p61012
I00
sS'group_name'
p61013
Nsa(dp61014
S'description'
p61015
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61016
sS'cpp_type'
p61017
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61018
sS'default'
p61019
g3
sS'name'
p61020
S'control_tags'
p61021
sS'required'
p61022
I00
sS'group_name'
p61023
Nsa(dp61024
S'description'
p61025
S'List of names of user objects that define the fluid density\n'
p61026
sS'cpp_type'
p61027
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p61028
sS'default'
p61029
g3
sS'name'
p61030
S'density_UO'
p61031
sS'required'
p61032
I01
sS'group_name'
p61033
Nsa(dp61034
S'description'
p61035
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61036
sS'cpp_type'
p61037
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61038
sS'default'
p61039
g3
sS'name'
p61040
S'diag_save_in'
p61041
sS'required'
p61042
I00
sS'group_name'
p61043
S'Advanced'
p61044
sa(dp61045
S'description'
p61046
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61047
sS'cpp_type'
p61048
S'bool'
p61049
sS'default'
p61050
S'1'
p61051
sS'name'
p61052
S'implicit'
p61053
sS'required'
p61054
I00
sS'group_name'
p61055
S'Advanced'
p61056
sa(dp61057
S'description'
p61058
S'List of names of user objects that define relative permeability\n'
p61059
sS'cpp_type'
p61060
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p61061
sS'default'
p61062
g3
sS'name'
p61063
S'relperm_UO'
p61064
sS'required'
p61065
I01
sS'group_name'
p61066
Nsa(dp61067
S'description'
p61068
S'The UserObject that holds the list of Richards variable names.\n'
p61069
sS'cpp_type'
p61070
S'UserObjectName'
p61071
sS'default'
p61072
g3
sS'name'
p61073
S'richardsVarNames_UO'
p61074
sS'required'
p61075
I01
sS'group_name'
p61076
Nsa(dp61077
S'description'
p61078
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61079
sS'cpp_type'
p61080
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61081
sS'default'
p61082
g3
sS'name'
p61083
S'save_in'
p61084
sS'required'
p61085
I00
sS'group_name'
p61086
S'Advanced'
p61087
sa(dp61088
S'description'
p61089
S'The seed for the master random number generator\n'
p61090
sS'cpp_type'
p61091
S'unsigned int'
p61092
sS'default'
p61093
S'0'
p61094
sS'name'
p61095
S'seed'
p61096
sS'required'
p61097
I00
sS'group_name'
p61098
S'Advanced'
p61099
sa(dp61100
S'description'
p61101
S'List of name of user objects that define effective saturation as a function of pressure list\n'
p61102
sS'cpp_type'
p61103
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p61104
sS'default'
p61105
g3
sS'name'
p61106
S'seff_UO'
p61107
sS'required'
p61108
I01
sS'group_name'
p61109
Nsa(dp61110
S'description'
p61111
g3
sS'cpp_type'
p61112
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61113
sS'default'
p61114
S'RichardsFullyUpwindFlux'
p61115
sS'name'
p61116
S'type'
p61117
sS'required'
p61118
I00
sS'group_name'
p61119
Nsa(dp61120
S'description'
p61121
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61122
sS'cpp_type'
p61123
S'bool'
p61124
sS'default'
p61125
S'0'
p61126
sS'name'
p61127
S'use_displaced_mesh'
p61128
sS'required'
p61129
I00
sS'group_name'
p61130
S'Advanced'
p61131
sa(dp61132
S'description'
p61133
S'The name of the variable that this Kernel operates on\n'
p61134
sS'cpp_type'
p61135
S'NonlinearVariableName'
p61136
sS'default'
p61137
g3
sS'name'
p61138
S'variable'
p61139
sS'required'
p61140
I01
sS'group_name'
p61141
NsasS'name'
p61142
S'/Kernels/RichardsFullyUpwindFlux'
p61143
sa(dp61144
S'description'
p61145
g3
sS'subblocks'
p61146
NsS'parameters'
p61147
(lp61148
(dp61149
S'description'
p61150
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61151
sS'cpp_type'
p61152
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61153
sS'default'
p61154
g3
sS'name'
p61155
S'block'
p61156
sS'required'
p61157
I00
sS'group_name'
p61158
Nsa(dp61159
S'description'
p61160
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61161
sS'cpp_type'
p61162
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61163
sS'default'
p61164
g3
sS'name'
p61165
S'control_tags'
p61166
sS'required'
p61167
I00
sS'group_name'
p61168
Nsa(dp61169
S'description'
p61170
S'List of names of user objects that define the fluid density (or densities for multiphase).  In the multiphase case, for ease of use, the density, Seff and Sat UserObjects are the same format as for RichardsMaterial, but only the one relevant for the specific phase is actually used.\n'
p61171
sS'cpp_type'
p61172
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p61173
sS'default'
p61174
g3
sS'name'
p61175
S'density_UO'
p61176
sS'required'
p61177
I01
sS'group_name'
p61178
Nsa(dp61179
S'description'
p61180
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61181
sS'cpp_type'
p61182
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61183
sS'default'
p61184
g3
sS'name'
p61185
S'diag_save_in'
p61186
sS'required'
p61187
I00
sS'group_name'
p61188
S'Advanced'
p61189
sa(dp61190
S'description'
p61191
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61192
sS'cpp_type'
p61193
S'bool'
p61194
sS'default'
p61195
S'1'
p61196
sS'name'
p61197
S'implicit'
p61198
sS'required'
p61199
I00
sS'group_name'
p61200
S'Advanced'
p61201
sa(dp61202
S'description'
p61203
S'The UserObject that holds the list of Richards variables.\n'
p61204
sS'cpp_type'
p61205
S'UserObjectName'
p61206
sS'default'
p61207
g3
sS'name'
p61208
S'richardsVarNames_UO'
p61209
sS'required'
p61210
I01
sS'group_name'
p61211
Nsa(dp61212
S'description'
p61213
S'List of names of user objects that define saturation as a function of effective saturation\n'
p61214
sS'cpp_type'
p61215
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p61216
sS'default'
p61217
g3
sS'name'
p61218
S'sat_UO'
p61219
sS'required'
p61220
I01
sS'group_name'
p61221
Nsa(dp61222
S'description'
p61223
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61224
sS'cpp_type'
p61225
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61226
sS'default'
p61227
g3
sS'name'
p61228
S'save_in'
p61229
sS'required'
p61230
I00
sS'group_name'
p61231
S'Advanced'
p61232
sa(dp61233
S'description'
p61234
S'The seed for the master random number generator\n'
p61235
sS'cpp_type'
p61236
S'unsigned int'
p61237
sS'default'
p61238
S'0'
p61239
sS'name'
p61240
S'seed'
p61241
sS'required'
p61242
I00
sS'group_name'
p61243
S'Advanced'
p61244
sa(dp61245
S'description'
p61246
S'List of name of user objects that define effective saturation as a function of porepressure(s)\n'
p61247
sS'cpp_type'
p61248
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p61249
sS'default'
p61250
g3
sS'name'
p61251
S'seff_UO'
p61252
sS'required'
p61253
I01
sS'group_name'
p61254
Nsa(dp61255
S'description'
p61256
g3
sS'cpp_type'
p61257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61258
sS'default'
p61259
S'RichardsLumpedMassChange'
p61260
sS'name'
p61261
S'type'
p61262
sS'required'
p61263
I00
sS'group_name'
p61264
Nsa(dp61265
S'description'
p61266
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61267
sS'cpp_type'
p61268
S'bool'
p61269
sS'default'
p61270
S'0'
p61271
sS'name'
p61272
S'use_displaced_mesh'
p61273
sS'required'
p61274
I00
sS'group_name'
p61275
S'Advanced'
p61276
sa(dp61277
S'description'
p61278
S'The name of the variable that this Kernel operates on\n'
p61279
sS'cpp_type'
p61280
S'NonlinearVariableName'
p61281
sS'default'
p61282
g3
sS'name'
p61283
S'variable'
p61284
sS'required'
p61285
I01
sS'group_name'
p61286
NsasS'name'
p61287
S'/Kernels/RichardsLumpedMassChange'
p61288
sa(dp61289
S'description'
p61290
g3
sS'subblocks'
p61291
NsS'parameters'
p61292
(lp61293
(dp61294
S'description'
p61295
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61296
sS'cpp_type'
p61297
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61298
sS'default'
p61299
g3
sS'name'
p61300
S'block'
p61301
sS'required'
p61302
I00
sS'group_name'
p61303
Nsa(dp61304
S'description'
p61305
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61306
sS'cpp_type'
p61307
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61308
sS'default'
p61309
g3
sS'name'
p61310
S'control_tags'
p61311
sS'required'
p61312
I00
sS'group_name'
p61313
Nsa(dp61314
S'description'
p61315
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61316
sS'cpp_type'
p61317
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61318
sS'default'
p61319
g3
sS'name'
p61320
S'diag_save_in'
p61321
sS'required'
p61322
I00
sS'group_name'
p61323
S'Advanced'
p61324
sa(dp61325
S'description'
p61326
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61327
sS'cpp_type'
p61328
S'bool'
p61329
sS'default'
p61330
S'1'
p61331
sS'name'
p61332
S'implicit'
p61333
sS'required'
p61334
I00
sS'group_name'
p61335
S'Advanced'
p61336
sa(dp61337
S'description'
p61338
S'True for mass matrix lumping, false otherwise\n'
p61339
sS'cpp_type'
p61340
S'bool'
p61341
sS'default'
p61342
S'0'
p61343
sS'name'
p61344
S'lumping'
p61345
sS'required'
p61346
I00
sS'group_name'
p61347
Nsa(dp61348
S'description'
p61349
S'The UserObject that holds the list of Richards variable names.\n'
p61350
sS'cpp_type'
p61351
S'UserObjectName'
p61352
sS'default'
p61353
g3
sS'name'
p61354
S'richardsVarNames_UO'
p61355
sS'required'
p61356
I01
sS'group_name'
p61357
Nsa(dp61358
S'description'
p61359
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61360
sS'cpp_type'
p61361
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61362
sS'default'
p61363
g3
sS'name'
p61364
S'save_in'
p61365
sS'required'
p61366
I00
sS'group_name'
p61367
S'Advanced'
p61368
sa(dp61369
S'description'
p61370
S'The seed for the master random number generator\n'
p61371
sS'cpp_type'
p61372
S'unsigned int'
p61373
sS'default'
p61374
S'0'
p61375
sS'name'
p61376
S'seed'
p61377
sS'required'
p61378
I00
sS'group_name'
p61379
S'Advanced'
p61380
sa(dp61381
S'description'
p61382
g3
sS'cpp_type'
p61383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61384
sS'default'
p61385
S'RichardsMassChange'
p61386
sS'name'
p61387
S'type'
p61388
sS'required'
p61389
I00
sS'group_name'
p61390
Nsa(dp61391
S'description'
p61392
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61393
sS'cpp_type'
p61394
S'bool'
p61395
sS'default'
p61396
S'0'
p61397
sS'name'
p61398
S'use_displaced_mesh'
p61399
sS'required'
p61400
I00
sS'group_name'
p61401
S'Advanced'
p61402
sa(dp61403
S'description'
p61404
S'True for using SUPG in this kernel, false otherwise.  This has no effect if the material does not use SUPG.\n'
p61405
sS'cpp_type'
p61406
S'bool'
p61407
sS'default'
p61408
S'0'
p61409
sS'name'
p61410
S'use_supg'
p61411
sS'required'
p61412
I00
sS'group_name'
p61413
Nsa(dp61414
S'description'
p61415
S'The name of the variable that this Kernel operates on\n'
p61416
sS'cpp_type'
p61417
S'NonlinearVariableName'
p61418
sS'default'
p61419
g3
sS'name'
p61420
S'variable'
p61421
sS'required'
p61422
I01
sS'group_name'
p61423
NsasS'name'
p61424
S'/Kernels/RichardsMassChange'
p61425
sa(dp61426
S'description'
p61427
S'This adds a term to the residual that attempts to enforce variable > lower_var.  The term is a*(lower - variable) for variable<lower, and zero otherwise\n'
p61428
sS'subblocks'
p61429
NsS'parameters'
p61430
(lp61431
(dp61432
S'description'
p61433
S'Weight of the penalty.  Penalty = a*(lower - variable) for variable<lower, and zero otherwise.  Care should be taken with this parameter choice.  Determine the typical size of your residual (usually rho*perm*(gradP - rho*g)/visc), then typically you want the penalty to ensure p>lower*(1-1E-6), so for the PPP formulation you typically Penalty = a*1E-6*|p|.  I recommend that Penalty = 1E-3*residual, yielding a = 1E3*residual/|P|. \n'
p61434
sS'cpp_type'
p61435
S'double'
p61436
sS'default'
p61437
S'1e-10'
p61438
sS'name'
p61439
S'a'
p61440
sS'required'
p61441
I00
sS'group_name'
p61442
Nsa(dp61443
S'description'
p61444
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61445
sS'cpp_type'
p61446
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61447
sS'default'
p61448
g3
sS'name'
p61449
S'block'
p61450
sS'required'
p61451
I00
sS'group_name'
p61452
Nsa(dp61453
S'description'
p61454
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61455
sS'cpp_type'
p61456
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61457
sS'default'
p61458
g3
sS'name'
p61459
S'control_tags'
p61460
sS'required'
p61461
I00
sS'group_name'
p61462
Nsa(dp61463
S'description'
p61464
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61465
sS'cpp_type'
p61466
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61467
sS'default'
p61468
g3
sS'name'
p61469
S'diag_save_in'
p61470
sS'required'
p61471
I00
sS'group_name'
p61472
S'Advanced'
p61473
sa(dp61474
S'description'
p61475
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61476
sS'cpp_type'
p61477
S'bool'
p61478
sS'default'
p61479
S'1'
p61480
sS'name'
p61481
S'implicit'
p61482
sS'required'
p61483
I00
sS'group_name'
p61484
S'Advanced'
p61485
sa(dp61486
S'description'
p61487
S'Your variable will be constrained to be greater than this lower_var variable.\n'
p61488
sS'cpp_type'
p61489
S'std::vector<VariableName>'
p61490
sS'default'
p61491
g3
sS'name'
p61492
S'lower_var'
p61493
sS'required'
p61494
I01
sS'group_name'
p61495
Nsa(dp61496
S'description'
p61497
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61498
sS'cpp_type'
p61499
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61500
sS'default'
p61501
g3
sS'name'
p61502
S'save_in'
p61503
sS'required'
p61504
I00
sS'group_name'
p61505
S'Advanced'
p61506
sa(dp61507
S'description'
p61508
S'The seed for the master random number generator\n'
p61509
sS'cpp_type'
p61510
S'unsigned int'
p61511
sS'default'
p61512
S'0'
p61513
sS'name'
p61514
S'seed'
p61515
sS'required'
p61516
I00
sS'group_name'
p61517
S'Advanced'
p61518
sa(dp61519
S'description'
p61520
g3
sS'cpp_type'
p61521
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61522
sS'default'
p61523
S'RichardsPPenalty'
p61524
sS'name'
p61525
S'type'
p61526
sS'required'
p61527
I00
sS'group_name'
p61528
Nsa(dp61529
S'description'
p61530
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61531
sS'cpp_type'
p61532
S'bool'
p61533
sS'default'
p61534
S'0'
p61535
sS'name'
p61536
S'use_displaced_mesh'
p61537
sS'required'
p61538
I00
sS'group_name'
p61539
S'Advanced'
p61540
sa(dp61541
S'description'
p61542
S'The name of the variable that this Kernel operates on\n'
p61543
sS'cpp_type'
p61544
S'NonlinearVariableName'
p61545
sS'default'
p61546
g3
sS'name'
p61547
S'variable'
p61548
sS'required'
p61549
I01
sS'group_name'
p61550
NsasS'name'
p61551
S'/Kernels/RichardsPPenalty'
p61552
sa(dp61553
S'description'
p61554
g3
sS'subblocks'
p61555
NsS'parameters'
p61556
(lp61557
(dp61558
S'description'
p61559
S'The amplitude of the forcing function\n'
p61560
sS'cpp_type'
p61561
S'double'
p61562
sS'default'
p61563
S'1'
p61564
sS'name'
p61565
S'amplitude'
p61566
sS'required'
p61567
I00
sS'group_name'
p61568
Nsa(dp61569
S'description'
p61570
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61571
sS'cpp_type'
p61572
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61573
sS'default'
p61574
g3
sS'name'
p61575
S'block'
p61576
sS'required'
p61577
I00
sS'group_name'
p61578
Nsa(dp61579
S'description'
p61580
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61581
sS'cpp_type'
p61582
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61583
sS'default'
p61584
g3
sS'name'
p61585
S'control_tags'
p61586
sS'required'
p61587
I00
sS'group_name'
p61588
Nsa(dp61589
S'description'
p61590
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61591
sS'cpp_type'
p61592
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61593
sS'default'
p61594
g3
sS'name'
p61595
S'diag_save_in'
p61596
sS'required'
p61597
I00
sS'group_name'
p61598
S'Advanced'
p61599
sa(dp61600
S'description'
p61601
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61602
sS'cpp_type'
p61603
S'bool'
p61604
sS'default'
p61605
S'1'
p61606
sS'name'
p61607
S'implicit'
p61608
sS'required'
p61609
I00
sS'group_name'
p61610
S'Advanced'
p61611
sa(dp61612
S'description'
p61613
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61614
sS'cpp_type'
p61615
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61616
sS'default'
p61617
g3
sS'name'
p61618
S'save_in'
p61619
sS'required'
p61620
I00
sS'group_name'
p61621
S'Advanced'
p61622
sa(dp61623
S'description'
p61624
S'The seed for the master random number generator\n'
p61625
sS'cpp_type'
p61626
S'unsigned int'
p61627
sS'default'
p61628
S'0'
p61629
sS'name'
p61630
S'seed'
p61631
sS'required'
p61632
I00
sS'group_name'
p61633
S'Advanced'
p61634
sa(dp61635
S'description'
p61636
g3
sS'cpp_type'
p61637
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61638
sS'default'
p61639
S'SharpInterfaceForcing'
p61640
sS'name'
p61641
S'type'
p61642
sS'required'
p61643
I00
sS'group_name'
p61644
Nsa(dp61645
S'description'
p61646
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61647
sS'cpp_type'
p61648
S'bool'
p61649
sS'default'
p61650
S'0'
p61651
sS'name'
p61652
S'use_displaced_mesh'
p61653
sS'required'
p61654
I00
sS'group_name'
p61655
S'Advanced'
p61656
sa(dp61657
S'description'
p61658
S'The name of the variable that this Kernel operates on\n'
p61659
sS'cpp_type'
p61660
S'NonlinearVariableName'
p61661
sS'default'
p61662
g3
sS'name'
p61663
S'variable'
p61664
sS'required'
p61665
I01
sS'group_name'
p61666
Nsa(dp61667
S'description'
p61668
S'The parametric x center of the forcing function\n'
p61669
sS'cpp_type'
p61670
S'FunctionName'
p61671
sS'default'
p61672
g3
sS'name'
p61673
S'x_center'
p61674
sS'required'
p61675
I01
sS'group_name'
p61676
Nsa(dp61677
S'description'
p61678
S'The parametric y center of the forcing function\n'
p61679
sS'cpp_type'
p61680
S'FunctionName'
p61681
sS'default'
p61682
g3
sS'name'
p61683
S'y_center'
p61684
sS'required'
p61685
I01
sS'group_name'
p61686
NsasS'name'
p61687
S'/Kernels/SharpInterfaceForcing'
p61688
sa(dp61689
S'description'
p61690
S'Adds rigid mody motion to a single grain\n'
p61691
sS'subblocks'
p61692
NsS'parameters'
p61693
(lp61694
(dp61695
S'description'
p61696
S'Optional parameter that allows the user to define type of force density under consideration\n'
p61697
sS'cpp_type'
p61698
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61699
sS'default'
p61700
g3
sS'name'
p61701
S'base_name'
p61702
sS'required'
p61703
I00
sS'group_name'
p61704
Nsa(dp61705
S'description'
p61706
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61707
sS'cpp_type'
p61708
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61709
sS'default'
p61710
g3
sS'name'
p61711
S'block'
p61712
sS'required'
p61713
I00
sS'group_name'
p61714
Nsa(dp61715
S'description'
p61716
S'Concentration\n'
p61717
sS'cpp_type'
p61718
S'std::vector<VariableName>'
p61719
sS'default'
p61720
g3
sS'name'
p61721
S'c'
p61722
sS'required'
p61723
I01
sS'group_name'
p61724
Nsa(dp61725
S'description'
p61726
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61727
sS'cpp_type'
p61728
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61729
sS'default'
p61730
g3
sS'name'
p61731
S'control_tags'
p61732
sS'required'
p61733
I00
sS'group_name'
p61734
Nsa(dp61735
S'description'
p61736
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61737
sS'cpp_type'
p61738
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61739
sS'default'
p61740
g3
sS'name'
p61741
S'diag_save_in'
p61742
sS'required'
p61743
I00
sS'group_name'
p61744
S'Advanced'
p61745
sa(dp61746
S'description'
p61747
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61748
sS'cpp_type'
p61749
S'bool'
p61750
sS'default'
p61751
S'1'
p61752
sS'name'
p61753
S'implicit'
p61754
sS'required'
p61755
I00
sS'group_name'
p61756
S'Advanced'
p61757
sa(dp61758
S'description'
p61759
S'Grain number for the kernel to be applied\n'
p61760
sS'cpp_type'
p61761
S'unsigned int'
p61762
sS'default'
p61763
S'0'
p61764
sS'name'
p61765
S'op_index'
p61766
sS'required'
p61767
I00
sS'group_name'
p61768
Nsa(dp61769
S'description'
p61770
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61771
sS'cpp_type'
p61772
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61773
sS'default'
p61774
g3
sS'name'
p61775
S'save_in'
p61776
sS'required'
p61777
I00
sS'group_name'
p61778
S'Advanced'
p61779
sa(dp61780
S'description'
p61781
S'The seed for the master random number generator\n'
p61782
sS'cpp_type'
p61783
S'unsigned int'
p61784
sS'default'
p61785
S'0'
p61786
sS'name'
p61787
S'seed'
p61788
sS'required'
p61789
I00
sS'group_name'
p61790
S'Advanced'
p61791
sa(dp61792
S'description'
p61793
g3
sS'cpp_type'
p61794
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61795
sS'default'
p61796
S'SingleGrainRigidBodyMotion'
p61797
sS'name'
p61798
S'type'
p61799
sS'required'
p61800
I00
sS'group_name'
p61801
Nsa(dp61802
S'description'
p61803
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61804
sS'cpp_type'
p61805
S'bool'
p61806
sS'default'
p61807
S'0'
p61808
sS'name'
p61809
S'use_displaced_mesh'
p61810
sS'required'
p61811
I00
sS'group_name'
p61812
S'Advanced'
p61813
sa(dp61814
S'description'
p61815
S'Array of coupled variable names\n'
p61816
sS'cpp_type'
p61817
S'std::vector<VariableName>'
p61818
sS'default'
p61819
g3
sS'name'
p61820
S'v'
p61821
sS'required'
p61822
I01
sS'group_name'
p61823
Nsa(dp61824
S'description'
p61825
S'The name of the variable that this Kernel operates on\n'
p61826
sS'cpp_type'
p61827
S'NonlinearVariableName'
p61828
sS'default'
p61829
g3
sS'name'
p61830
S'variable'
p61831
sS'required'
p61832
I01
sS'group_name'
p61833
NsasS'name'
p61834
S'/Kernels/SingleGrainRigidBodyMotion'
p61835
sa(dp61836
S'description'
p61837
g3
sS'subblocks'
p61838
NsS'parameters'
p61839
(lp61840
(dp61841
S'description'
p61842
S'Factor to replace rho/dt^2\n'
p61843
sS'cpp_type'
p61844
S'double'
p61845
sS'default'
p61846
g3
sS'name'
p61847
S'artificial_scaling'
p61848
sS'required'
p61849
I00
sS'group_name'
p61850
Nsa(dp61851
S'description'
p61852
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61853
sS'cpp_type'
p61854
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61855
sS'default'
p61856
g3
sS'name'
p61857
S'block'
p61858
sS'required'
p61859
I00
sS'group_name'
p61860
Nsa(dp61861
S'description'
p61862
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61863
sS'cpp_type'
p61864
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61865
sS'default'
p61866
g3
sS'name'
p61867
S'control_tags'
p61868
sS'required'
p61869
I00
sS'group_name'
p61870
Nsa(dp61871
S'description'
p61872
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61873
sS'cpp_type'
p61874
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61875
sS'default'
p61876
g3
sS'name'
p61877
S'diag_save_in'
p61878
sS'required'
p61879
I00
sS'group_name'
p61880
S'Advanced'
p61881
sa(dp61882
S'description'
p61883
S'Determines whether this object is calculated using an implicit or explicit form\n'
p61884
sS'cpp_type'
p61885
S'bool'
p61886
sS'default'
p61887
S'1'
p61888
sS'name'
p61889
S'implicit'
p61890
sS'required'
p61891
I00
sS'group_name'
p61892
S'Advanced'
p61893
sa(dp61894
S'description'
p61895
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61896
sS'cpp_type'
p61897
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61898
sS'default'
p61899
g3
sS'name'
p61900
S'save_in'
p61901
sS'required'
p61902
I00
sS'group_name'
p61903
S'Advanced'
p61904
sa(dp61905
S'description'
p61906
S'The seed for the master random number generator\n'
p61907
sS'cpp_type'
p61908
S'unsigned int'
p61909
sS'default'
p61910
S'0'
p61911
sS'name'
p61912
S'seed'
p61913
sS'required'
p61914
I00
sS'group_name'
p61915
S'Advanced'
p61916
sa(dp61917
S'description'
p61918
g3
sS'cpp_type'
p61919
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p61920
sS'default'
p61921
S'SolidMechImplicitEuler'
p61922
sS'name'
p61923
S'type'
p61924
sS'required'
p61925
I00
sS'group_name'
p61926
Nsa(dp61927
S'description'
p61928
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p61929
sS'cpp_type'
p61930
S'bool'
p61931
sS'default'
p61932
S'1'
p61933
sS'name'
p61934
S'use_displaced_mesh'
p61935
sS'required'
p61936
I00
sS'group_name'
p61937
S'Advanced'
p61938
sa(dp61939
S'description'
p61940
S'The name of the variable that this Kernel operates on\n'
p61941
sS'cpp_type'
p61942
S'NonlinearVariableName'
p61943
sS'default'
p61944
g3
sS'name'
p61945
S'variable'
p61946
sS'required'
p61947
I01
sS'group_name'
p61948
NsasS'name'
p61949
S'/Kernels/SolidMechImplicitEuler'
p61950
sa(dp61951
S'description'
p61952
g3
sS'subblocks'
p61953
NsS'parameters'
p61954
(lp61955
(dp61956
S'description'
p61957
S'The list of block ids (SubdomainID) that this object will be applied\n'
p61958
sS'cpp_type'
p61959
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p61960
sS'default'
p61961
g3
sS'name'
p61962
S'block'
p61963
sS'required'
p61964
I00
sS'group_name'
p61965
Nsa(dp61966
S'description'
p61967
S'Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n'
p61968
sS'cpp_type'
p61969
S'bool'
p61970
sS'default'
p61971
S'0'
p61972
sS'name'
p61973
S'constant_properties'
p61974
sS'required'
p61975
I00
sS'group_name'
p61976
Nsa(dp61977
S'description'
p61978
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p61979
sS'cpp_type'
p61980
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p61981
sS'default'
p61982
g3
sS'name'
p61983
S'control_tags'
p61984
sS'required'
p61985
I00
sS'group_name'
p61986
Nsa(dp61987
S'description'
p61988
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p61989
sS'cpp_type'
p61990
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p61991
sS'default'
p61992
g3
sS'name'
p61993
S'diag_save_in'
p61994
sS'required'
p61995
I00
sS'group_name'
p61996
S'Advanced'
p61997
sa(dp61998
S'description'
p61999
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62000
sS'cpp_type'
p62001
S'bool'
p62002
sS'default'
p62003
S'1'
p62004
sS'name'
p62005
S'implicit'
p62006
sS'required'
p62007
I00
sS'group_name'
p62008
S'Advanced'
p62009
sa(dp62010
S'description'
p62011
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62012
sS'cpp_type'
p62013
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62014
sS'default'
p62015
g3
sS'name'
p62016
S'save_in'
p62017
sS'required'
p62018
I00
sS'group_name'
p62019
S'Advanced'
p62020
sa(dp62021
S'description'
p62022
S'The seed for the master random number generator\n'
p62023
sS'cpp_type'
p62024
S'unsigned int'
p62025
sS'default'
p62026
S'0'
p62027
sS'name'
p62028
S'seed'
p62029
sS'required'
p62030
I00
sS'group_name'
p62031
S'Advanced'
p62032
sa(dp62033
S'description'
p62034
S'Coupled Temperature\n'
p62035
sS'cpp_type'
p62036
S'std::vector<VariableName>'
p62037
sS'default'
p62038
g3
sS'name'
p62039
S'temp'
p62040
sS'required'
p62041
I01
sS'group_name'
p62042
Nsa(dp62043
S'description'
p62044
g3
sS'cpp_type'
p62045
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62046
sS'default'
p62047
S'SolidMechTempCoupleX'
p62048
sS'name'
p62049
S'type'
p62050
sS'required'
p62051
I00
sS'group_name'
p62052
Nsa(dp62053
S'description'
p62054
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62055
sS'cpp_type'
p62056
S'bool'
p62057
sS'default'
p62058
S'0'
p62059
sS'name'
p62060
S'use_displaced_mesh'
p62061
sS'required'
p62062
I00
sS'group_name'
p62063
S'Advanced'
p62064
sa(dp62065
S'description'
p62066
S'The name of the variable that this Kernel operates on\n'
p62067
sS'cpp_type'
p62068
S'NonlinearVariableName'
p62069
sS'default'
p62070
g3
sS'name'
p62071
S'variable'
p62072
sS'required'
p62073
I01
sS'group_name'
p62074
NsasS'name'
p62075
S'/Kernels/SolidMechTempCoupleX'
p62076
sa(dp62077
S'description'
p62078
g3
sS'subblocks'
p62079
NsS'parameters'
p62080
(lp62081
(dp62082
S'description'
p62083
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62084
sS'cpp_type'
p62085
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62086
sS'default'
p62087
g3
sS'name'
p62088
S'block'
p62089
sS'required'
p62090
I00
sS'group_name'
p62091
Nsa(dp62092
S'description'
p62093
S'Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n'
p62094
sS'cpp_type'
p62095
S'bool'
p62096
sS'default'
p62097
S'0'
p62098
sS'name'
p62099
S'constant_properties'
p62100
sS'required'
p62101
I00
sS'group_name'
p62102
Nsa(dp62103
S'description'
p62104
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62105
sS'cpp_type'
p62106
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62107
sS'default'
p62108
g3
sS'name'
p62109
S'control_tags'
p62110
sS'required'
p62111
I00
sS'group_name'
p62112
Nsa(dp62113
S'description'
p62114
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62115
sS'cpp_type'
p62116
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62117
sS'default'
p62118
g3
sS'name'
p62119
S'diag_save_in'
p62120
sS'required'
p62121
I00
sS'group_name'
p62122
S'Advanced'
p62123
sa(dp62124
S'description'
p62125
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62126
sS'cpp_type'
p62127
S'bool'
p62128
sS'default'
p62129
S'1'
p62130
sS'name'
p62131
S'implicit'
p62132
sS'required'
p62133
I00
sS'group_name'
p62134
S'Advanced'
p62135
sa(dp62136
S'description'
p62137
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62138
sS'cpp_type'
p62139
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62140
sS'default'
p62141
g3
sS'name'
p62142
S'save_in'
p62143
sS'required'
p62144
I00
sS'group_name'
p62145
S'Advanced'
p62146
sa(dp62147
S'description'
p62148
S'The seed for the master random number generator\n'
p62149
sS'cpp_type'
p62150
S'unsigned int'
p62151
sS'default'
p62152
S'0'
p62153
sS'name'
p62154
S'seed'
p62155
sS'required'
p62156
I00
sS'group_name'
p62157
S'Advanced'
p62158
sa(dp62159
S'description'
p62160
S'Coupled Temperature\n'
p62161
sS'cpp_type'
p62162
S'std::vector<VariableName>'
p62163
sS'default'
p62164
g3
sS'name'
p62165
S'temp'
p62166
sS'required'
p62167
I01
sS'group_name'
p62168
Nsa(dp62169
S'description'
p62170
g3
sS'cpp_type'
p62171
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62172
sS'default'
p62173
S'SolidMechTempCoupleY'
p62174
sS'name'
p62175
S'type'
p62176
sS'required'
p62177
I00
sS'group_name'
p62178
Nsa(dp62179
S'description'
p62180
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62181
sS'cpp_type'
p62182
S'bool'
p62183
sS'default'
p62184
S'0'
p62185
sS'name'
p62186
S'use_displaced_mesh'
p62187
sS'required'
p62188
I00
sS'group_name'
p62189
S'Advanced'
p62190
sa(dp62191
S'description'
p62192
S'The name of the variable that this Kernel operates on\n'
p62193
sS'cpp_type'
p62194
S'NonlinearVariableName'
p62195
sS'default'
p62196
g3
sS'name'
p62197
S'variable'
p62198
sS'required'
p62199
I01
sS'group_name'
p62200
NsasS'name'
p62201
S'/Kernels/SolidMechTempCoupleY'
p62202
sa(dp62203
S'description'
p62204
g3
sS'subblocks'
p62205
NsS'parameters'
p62206
(lp62207
(dp62208
S'description'
p62209
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62210
sS'cpp_type'
p62211
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62212
sS'default'
p62213
g3
sS'name'
p62214
S'block'
p62215
sS'required'
p62216
I00
sS'group_name'
p62217
Nsa(dp62218
S'description'
p62219
S'Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n'
p62220
sS'cpp_type'
p62221
S'bool'
p62222
sS'default'
p62223
S'0'
p62224
sS'name'
p62225
S'constant_properties'
p62226
sS'required'
p62227
I00
sS'group_name'
p62228
Nsa(dp62229
S'description'
p62230
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62231
sS'cpp_type'
p62232
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62233
sS'default'
p62234
g3
sS'name'
p62235
S'control_tags'
p62236
sS'required'
p62237
I00
sS'group_name'
p62238
Nsa(dp62239
S'description'
p62240
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62241
sS'cpp_type'
p62242
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62243
sS'default'
p62244
g3
sS'name'
p62245
S'diag_save_in'
p62246
sS'required'
p62247
I00
sS'group_name'
p62248
S'Advanced'
p62249
sa(dp62250
S'description'
p62251
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62252
sS'cpp_type'
p62253
S'bool'
p62254
sS'default'
p62255
S'1'
p62256
sS'name'
p62257
S'implicit'
p62258
sS'required'
p62259
I00
sS'group_name'
p62260
S'Advanced'
p62261
sa(dp62262
S'description'
p62263
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62264
sS'cpp_type'
p62265
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62266
sS'default'
p62267
g3
sS'name'
p62268
S'save_in'
p62269
sS'required'
p62270
I00
sS'group_name'
p62271
S'Advanced'
p62272
sa(dp62273
S'description'
p62274
S'The seed for the master random number generator\n'
p62275
sS'cpp_type'
p62276
S'unsigned int'
p62277
sS'default'
p62278
S'0'
p62279
sS'name'
p62280
S'seed'
p62281
sS'required'
p62282
I00
sS'group_name'
p62283
S'Advanced'
p62284
sa(dp62285
S'description'
p62286
S'Coupled Temperature\n'
p62287
sS'cpp_type'
p62288
S'std::vector<VariableName>'
p62289
sS'default'
p62290
g3
sS'name'
p62291
S'temp'
p62292
sS'required'
p62293
I01
sS'group_name'
p62294
Nsa(dp62295
S'description'
p62296
g3
sS'cpp_type'
p62297
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62298
sS'default'
p62299
S'SolidMechTempCoupleZ'
p62300
sS'name'
p62301
S'type'
p62302
sS'required'
p62303
I00
sS'group_name'
p62304
Nsa(dp62305
S'description'
p62306
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62307
sS'cpp_type'
p62308
S'bool'
p62309
sS'default'
p62310
S'0'
p62311
sS'name'
p62312
S'use_displaced_mesh'
p62313
sS'required'
p62314
I00
sS'group_name'
p62315
S'Advanced'
p62316
sa(dp62317
S'description'
p62318
S'The name of the variable that this Kernel operates on\n'
p62319
sS'cpp_type'
p62320
S'NonlinearVariableName'
p62321
sS'default'
p62322
g3
sS'name'
p62323
S'variable'
p62324
sS'required'
p62325
I01
sS'group_name'
p62326
NsasS'name'
p62327
S'/Kernels/SolidMechTempCoupleZ'
p62328
sa(dp62329
S'description'
p62330
g3
sS'subblocks'
p62331
NsS'parameters'
p62332
(lp62333
(dp62334
S'description'
p62335
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62336
sS'cpp_type'
p62337
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62338
sS'default'
p62339
g3
sS'name'
p62340
S'block'
p62341
sS'required'
p62342
I00
sS'group_name'
p62343
Nsa(dp62344
S'description'
p62345
S'Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n'
p62346
sS'cpp_type'
p62347
S'bool'
p62348
sS'default'
p62349
S'0'
p62350
sS'name'
p62351
S'constant_properties'
p62352
sS'required'
p62353
I00
sS'group_name'
p62354
Nsa(dp62355
S'description'
p62356
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62357
sS'cpp_type'
p62358
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62359
sS'default'
p62360
g3
sS'name'
p62361
S'control_tags'
p62362
sS'required'
p62363
I00
sS'group_name'
p62364
Nsa(dp62365
S'description'
p62366
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62367
sS'cpp_type'
p62368
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62369
sS'default'
p62370
g3
sS'name'
p62371
S'diag_save_in'
p62372
sS'required'
p62373
I00
sS'group_name'
p62374
S'Advanced'
p62375
sa(dp62376
S'description'
p62377
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62378
sS'cpp_type'
p62379
S'bool'
p62380
sS'default'
p62381
S'1'
p62382
sS'name'
p62383
S'implicit'
p62384
sS'required'
p62385
I00
sS'group_name'
p62386
S'Advanced'
p62387
sa(dp62388
S'description'
p62389
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62390
sS'cpp_type'
p62391
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62392
sS'default'
p62393
g3
sS'name'
p62394
S'save_in'
p62395
sS'required'
p62396
I00
sS'group_name'
p62397
S'Advanced'
p62398
sa(dp62399
S'description'
p62400
S'The seed for the master random number generator\n'
p62401
sS'cpp_type'
p62402
S'unsigned int'
p62403
sS'default'
p62404
S'0'
p62405
sS'name'
p62406
S'seed'
p62407
sS'required'
p62408
I00
sS'group_name'
p62409
S'Advanced'
p62410
sa(dp62411
S'description'
p62412
g3
sS'cpp_type'
p62413
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62414
sS'default'
p62415
S'SolidMechX'
p62416
sS'name'
p62417
S'type'
p62418
sS'required'
p62419
I00
sS'group_name'
p62420
Nsa(dp62421
S'description'
p62422
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62423
sS'cpp_type'
p62424
S'bool'
p62425
sS'default'
p62426
S'0'
p62427
sS'name'
p62428
S'use_displaced_mesh'
p62429
sS'required'
p62430
I00
sS'group_name'
p62431
S'Advanced'
p62432
sa(dp62433
S'description'
p62434
S'The name of the variable that this Kernel operates on\n'
p62435
sS'cpp_type'
p62436
S'NonlinearVariableName'
p62437
sS'default'
p62438
g3
sS'name'
p62439
S'variable'
p62440
sS'required'
p62441
I01
sS'group_name'
p62442
Nsa(dp62443
S'description'
p62444
S'Coupled Displacement in the y Direction\n'
p62445
sS'cpp_type'
p62446
S'std::vector<VariableName>'
p62447
sS'default'
p62448
g3
sS'name'
p62449
S'y'
p62450
sS'required'
p62451
I01
sS'group_name'
p62452
Nsa(dp62453
S'description'
p62454
S'Coupled Displacement in the z Direction\n'
p62455
sS'cpp_type'
p62456
S'std::vector<VariableName>'
p62457
sS'default'
p62458
g3
sS'name'
p62459
S'z'
p62460
sS'required'
p62461
I00
sS'group_name'
p62462
NsasS'name'
p62463
S'/Kernels/SolidMechX'
p62464
sa(dp62465
S'description'
p62466
g3
sS'subblocks'
p62467
NsS'parameters'
p62468
(lp62469
(dp62470
S'description'
p62471
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62472
sS'cpp_type'
p62473
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62474
sS'default'
p62475
g3
sS'name'
p62476
S'block'
p62477
sS'required'
p62478
I00
sS'group_name'
p62479
Nsa(dp62480
S'description'
p62481
S'Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n'
p62482
sS'cpp_type'
p62483
S'bool'
p62484
sS'default'
p62485
S'0'
p62486
sS'name'
p62487
S'constant_properties'
p62488
sS'required'
p62489
I00
sS'group_name'
p62490
Nsa(dp62491
S'description'
p62492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62493
sS'cpp_type'
p62494
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62495
sS'default'
p62496
g3
sS'name'
p62497
S'control_tags'
p62498
sS'required'
p62499
I00
sS'group_name'
p62500
Nsa(dp62501
S'description'
p62502
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62503
sS'cpp_type'
p62504
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62505
sS'default'
p62506
g3
sS'name'
p62507
S'diag_save_in'
p62508
sS'required'
p62509
I00
sS'group_name'
p62510
S'Advanced'
p62511
sa(dp62512
S'description'
p62513
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62514
sS'cpp_type'
p62515
S'bool'
p62516
sS'default'
p62517
S'1'
p62518
sS'name'
p62519
S'implicit'
p62520
sS'required'
p62521
I00
sS'group_name'
p62522
S'Advanced'
p62523
sa(dp62524
S'description'
p62525
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62526
sS'cpp_type'
p62527
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62528
sS'default'
p62529
g3
sS'name'
p62530
S'save_in'
p62531
sS'required'
p62532
I00
sS'group_name'
p62533
S'Advanced'
p62534
sa(dp62535
S'description'
p62536
S'The seed for the master random number generator\n'
p62537
sS'cpp_type'
p62538
S'unsigned int'
p62539
sS'default'
p62540
S'0'
p62541
sS'name'
p62542
S'seed'
p62543
sS'required'
p62544
I00
sS'group_name'
p62545
S'Advanced'
p62546
sa(dp62547
S'description'
p62548
g3
sS'cpp_type'
p62549
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62550
sS'default'
p62551
S'SolidMechY'
p62552
sS'name'
p62553
S'type'
p62554
sS'required'
p62555
I00
sS'group_name'
p62556
Nsa(dp62557
S'description'
p62558
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62559
sS'cpp_type'
p62560
S'bool'
p62561
sS'default'
p62562
S'0'
p62563
sS'name'
p62564
S'use_displaced_mesh'
p62565
sS'required'
p62566
I00
sS'group_name'
p62567
S'Advanced'
p62568
sa(dp62569
S'description'
p62570
S'The name of the variable that this Kernel operates on\n'
p62571
sS'cpp_type'
p62572
S'NonlinearVariableName'
p62573
sS'default'
p62574
g3
sS'name'
p62575
S'variable'
p62576
sS'required'
p62577
I01
sS'group_name'
p62578
Nsa(dp62579
S'description'
p62580
S'Coupled Displacement in the x Direction\n'
p62581
sS'cpp_type'
p62582
S'std::vector<VariableName>'
p62583
sS'default'
p62584
g3
sS'name'
p62585
S'x'
p62586
sS'required'
p62587
I01
sS'group_name'
p62588
Nsa(dp62589
S'description'
p62590
S'Coupled Displacement in the z Direction\n'
p62591
sS'cpp_type'
p62592
S'std::vector<VariableName>'
p62593
sS'default'
p62594
g3
sS'name'
p62595
S'z'
p62596
sS'required'
p62597
I00
sS'group_name'
p62598
NsasS'name'
p62599
S'/Kernels/SolidMechY'
p62600
sa(dp62601
S'description'
p62602
g3
sS'subblocks'
p62603
NsS'parameters'
p62604
(lp62605
(dp62606
S'description'
p62607
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62608
sS'cpp_type'
p62609
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62610
sS'default'
p62611
g3
sS'name'
p62612
S'block'
p62613
sS'required'
p62614
I00
sS'group_name'
p62615
Nsa(dp62616
S'description'
p62617
S'Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.\n'
p62618
sS'cpp_type'
p62619
S'bool'
p62620
sS'default'
p62621
S'0'
p62622
sS'name'
p62623
S'constant_properties'
p62624
sS'required'
p62625
I00
sS'group_name'
p62626
Nsa(dp62627
S'description'
p62628
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62629
sS'cpp_type'
p62630
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62631
sS'default'
p62632
g3
sS'name'
p62633
S'control_tags'
p62634
sS'required'
p62635
I00
sS'group_name'
p62636
Nsa(dp62637
S'description'
p62638
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62639
sS'cpp_type'
p62640
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62641
sS'default'
p62642
g3
sS'name'
p62643
S'diag_save_in'
p62644
sS'required'
p62645
I00
sS'group_name'
p62646
S'Advanced'
p62647
sa(dp62648
S'description'
p62649
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62650
sS'cpp_type'
p62651
S'bool'
p62652
sS'default'
p62653
S'1'
p62654
sS'name'
p62655
S'implicit'
p62656
sS'required'
p62657
I00
sS'group_name'
p62658
S'Advanced'
p62659
sa(dp62660
S'description'
p62661
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62662
sS'cpp_type'
p62663
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62664
sS'default'
p62665
g3
sS'name'
p62666
S'save_in'
p62667
sS'required'
p62668
I00
sS'group_name'
p62669
S'Advanced'
p62670
sa(dp62671
S'description'
p62672
S'The seed for the master random number generator\n'
p62673
sS'cpp_type'
p62674
S'unsigned int'
p62675
sS'default'
p62676
S'0'
p62677
sS'name'
p62678
S'seed'
p62679
sS'required'
p62680
I00
sS'group_name'
p62681
S'Advanced'
p62682
sa(dp62683
S'description'
p62684
g3
sS'cpp_type'
p62685
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62686
sS'default'
p62687
S'SolidMechZ'
p62688
sS'name'
p62689
S'type'
p62690
sS'required'
p62691
I00
sS'group_name'
p62692
Nsa(dp62693
S'description'
p62694
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62695
sS'cpp_type'
p62696
S'bool'
p62697
sS'default'
p62698
S'0'
p62699
sS'name'
p62700
S'use_displaced_mesh'
p62701
sS'required'
p62702
I00
sS'group_name'
p62703
S'Advanced'
p62704
sa(dp62705
S'description'
p62706
S'The name of the variable that this Kernel operates on\n'
p62707
sS'cpp_type'
p62708
S'NonlinearVariableName'
p62709
sS'default'
p62710
g3
sS'name'
p62711
S'variable'
p62712
sS'required'
p62713
I01
sS'group_name'
p62714
Nsa(dp62715
S'description'
p62716
S'Coupled Displacement in the x Direction\n'
p62717
sS'cpp_type'
p62718
S'std::vector<VariableName>'
p62719
sS'default'
p62720
g3
sS'name'
p62721
S'x'
p62722
sS'required'
p62723
I01
sS'group_name'
p62724
Nsa(dp62725
S'description'
p62726
S'Coupled Displacement in the y Direction\n'
p62727
sS'cpp_type'
p62728
S'std::vector<VariableName>'
p62729
sS'default'
p62730
g3
sS'name'
p62731
S'y'
p62732
sS'required'
p62733
I01
sS'group_name'
p62734
NsasS'name'
p62735
S'/Kernels/SolidMechZ'
p62736
sa(dp62737
S'description'
p62738
S'Add Soret effect to Split formulation Cahn-Hilliard Kernel\n'
p62739
sS'subblocks'
p62740
NsS'parameters'
p62741
(lp62742
(dp62743
S'description'
p62744
S'The material name for the heat of transport\n'
p62745
sS'cpp_type'
p62746
S'MaterialPropertyName'
p62747
sS'default'
p62748
S'Qheat'
p62749
sS'name'
p62750
S'Q_name'
p62751
sS'required'
p62752
I00
sS'group_name'
p62753
Nsa(dp62754
S'description'
p62755
S'Temperature\n'
p62756
sS'cpp_type'
p62757
S'std::vector<VariableName>'
p62758
sS'default'
p62759
g3
sS'name'
p62760
S'T'
p62761
sS'required'
p62762
I01
sS'group_name'
p62763
Nsa(dp62764
S'description'
p62765
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62766
sS'cpp_type'
p62767
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62768
sS'default'
p62769
g3
sS'name'
p62770
S'block'
p62771
sS'required'
p62772
I00
sS'group_name'
p62773
Nsa(dp62774
S'description'
p62775
S'Concentration\n'
p62776
sS'cpp_type'
p62777
S'std::vector<VariableName>'
p62778
sS'default'
p62779
g3
sS'name'
p62780
S'c'
p62781
sS'required'
p62782
I01
sS'group_name'
p62783
Nsa(dp62784
S'description'
p62785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62786
sS'cpp_type'
p62787
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62788
sS'default'
p62789
g3
sS'name'
p62790
S'control_tags'
p62791
sS'required'
p62792
I00
sS'group_name'
p62793
Nsa(dp62794
S'description'
p62795
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62796
sS'cpp_type'
p62797
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62798
sS'default'
p62799
g3
sS'name'
p62800
S'diag_save_in'
p62801
sS'required'
p62802
I00
sS'group_name'
p62803
S'Advanced'
p62804
sa(dp62805
S'description'
p62806
S'The diffusivity used with the kernel\n'
p62807
sS'cpp_type'
p62808
S'MaterialPropertyName'
p62809
sS'default'
p62810
g3
sS'name'
p62811
S'diff_name'
p62812
sS'required'
p62813
I01
sS'group_name'
p62814
Nsa(dp62815
S'description'
p62816
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62817
sS'cpp_type'
p62818
S'bool'
p62819
sS'default'
p62820
S'1'
p62821
sS'name'
p62822
S'implicit'
p62823
sS'required'
p62824
I00
sS'group_name'
p62825
S'Advanced'
p62826
sa(dp62827
S'description'
p62828
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62829
sS'cpp_type'
p62830
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62831
sS'default'
p62832
g3
sS'name'
p62833
S'save_in'
p62834
sS'required'
p62835
I00
sS'group_name'
p62836
S'Advanced'
p62837
sa(dp62838
S'description'
p62839
S'The seed for the master random number generator\n'
p62840
sS'cpp_type'
p62841
S'unsigned int'
p62842
sS'default'
p62843
S'0'
p62844
sS'name'
p62845
S'seed'
p62846
sS'required'
p62847
I00
sS'group_name'
p62848
S'Advanced'
p62849
sa(dp62850
S'description'
p62851
g3
sS'cpp_type'
p62852
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62853
sS'default'
p62854
S'SoretDiffusion'
p62855
sS'name'
p62856
S'type'
p62857
sS'required'
p62858
I00
sS'group_name'
p62859
Nsa(dp62860
S'description'
p62861
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62862
sS'cpp_type'
p62863
S'bool'
p62864
sS'default'
p62865
S'0'
p62866
sS'name'
p62867
S'use_displaced_mesh'
p62868
sS'required'
p62869
I00
sS'group_name'
p62870
S'Advanced'
p62871
sa(dp62872
S'description'
p62873
S'The name of the variable that this Kernel operates on\n'
p62874
sS'cpp_type'
p62875
S'NonlinearVariableName'
p62876
sS'default'
p62877
g3
sS'name'
p62878
S'variable'
p62879
sS'required'
p62880
I01
sS'group_name'
p62881
NsasS'name'
p62882
S'/Kernels/SoretDiffusion'
p62883
sa(dp62884
S'description'
p62885
S'Simple demonstration split formulation Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p62886
sS'subblocks'
p62887
NsS'parameters'
p62888
(lp62889
(dp62890
S'description'
p62891
S'The list of block ids (SubdomainID) that this object will be applied\n'
p62892
sS'cpp_type'
p62893
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p62894
sS'default'
p62895
g3
sS'name'
p62896
S'block'
p62897
sS'required'
p62898
I00
sS'group_name'
p62899
Nsa(dp62900
S'description'
p62901
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p62902
sS'cpp_type'
p62903
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p62904
sS'default'
p62905
g3
sS'name'
p62906
S'control_tags'
p62907
sS'required'
p62908
I00
sS'group_name'
p62909
Nsa(dp62910
S'description'
p62911
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62912
sS'cpp_type'
p62913
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62914
sS'default'
p62915
g3
sS'name'
p62916
S'diag_save_in'
p62917
sS'required'
p62918
I00
sS'group_name'
p62919
S'Advanced'
p62920
sa(dp62921
S'description'
p62922
S'Determines whether this object is calculated using an implicit or explicit form\n'
p62923
sS'cpp_type'
p62924
S'bool'
p62925
sS'default'
p62926
S'1'
p62927
sS'name'
p62928
S'implicit'
p62929
sS'required'
p62930
I00
sS'group_name'
p62931
S'Advanced'
p62932
sa(dp62933
S'description'
p62934
S'The kappa used with the kernel\n'
p62935
sS'cpp_type'
p62936
S'MaterialPropertyName'
p62937
sS'default'
p62938
g3
sS'name'
p62939
S'kappa_name'
p62940
sS'required'
p62941
I01
sS'group_name'
p62942
Nsa(dp62943
S'description'
p62944
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p62945
sS'cpp_type'
p62946
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p62947
sS'default'
p62948
g3
sS'name'
p62949
S'save_in'
p62950
sS'required'
p62951
I00
sS'group_name'
p62952
S'Advanced'
p62953
sa(dp62954
S'description'
p62955
S'The seed for the master random number generator\n'
p62956
sS'cpp_type'
p62957
S'unsigned int'
p62958
sS'default'
p62959
S'0'
p62960
sS'name'
p62961
S'seed'
p62962
sS'required'
p62963
I00
sS'group_name'
p62964
S'Advanced'
p62965
sa(dp62966
S'description'
p62967
g3
sS'cpp_type'
p62968
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p62969
sS'default'
p62970
S'SplitCHMath'
p62971
sS'name'
p62972
S'type'
p62973
sS'required'
p62974
I00
sS'group_name'
p62975
Nsa(dp62976
S'description'
p62977
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p62978
sS'cpp_type'
p62979
S'bool'
p62980
sS'default'
p62981
S'0'
p62982
sS'name'
p62983
S'use_displaced_mesh'
p62984
sS'required'
p62985
I00
sS'group_name'
p62986
S'Advanced'
p62987
sa(dp62988
S'description'
p62989
S'The name of the variable that this Kernel operates on\n'
p62990
sS'cpp_type'
p62991
S'NonlinearVariableName'
p62992
sS'default'
p62993
g3
sS'name'
p62994
S'variable'
p62995
sS'required'
p62996
I01
sS'group_name'
p62997
Nsa(dp62998
S'description'
p62999
S'chem poten\n'
p63000
sS'cpp_type'
p63001
S'std::vector<VariableName>'
p63002
sS'default'
p63003
g3
sS'name'
p63004
S'w'
p63005
sS'required'
p63006
I01
sS'group_name'
p63007
NsasS'name'
p63008
S'/Kernels/SplitCHMath'
p63009
sa(dp63010
S'description'
p63011
S'Split formulation Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy\n'
p63012
sS'subblocks'
p63013
NsS'parameters'
p63014
(lp63015
(dp63016
S'description'
p63017
S'Vector of additional arguments to F\n'
p63018
sS'cpp_type'
p63019
S'std::vector<VariableName>'
p63020
sS'default'
p63021
g3
sS'name'
p63022
S'args'
p63023
sS'required'
p63024
I00
sS'group_name'
p63025
Nsa(dp63026
S'description'
p63027
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63028
sS'cpp_type'
p63029
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63030
sS'default'
p63031
g3
sS'name'
p63032
S'block'
p63033
sS'required'
p63034
I00
sS'group_name'
p63035
Nsa(dp63036
S'description'
p63037
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63038
sS'cpp_type'
p63039
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63040
sS'default'
p63041
g3
sS'name'
p63042
S'control_tags'
p63043
sS'required'
p63044
I00
sS'group_name'
p63045
Nsa(dp63046
S'description'
p63047
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63048
sS'cpp_type'
p63049
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63050
sS'default'
p63051
g3
sS'name'
p63052
S'diag_save_in'
p63053
sS'required'
p63054
I00
sS'group_name'
p63055
S'Advanced'
p63056
sa(dp63057
S'description'
p63058
S'Base name of the free energy function F defined in a DerivativeParsedMaterial\n'
p63059
sS'cpp_type'
p63060
S'MaterialPropertyName'
p63061
sS'default'
p63062
g3
sS'name'
p63063
S'f_name'
p63064
sS'required'
p63065
I01
sS'group_name'
p63066
Nsa(dp63067
S'description'
p63068
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63069
sS'cpp_type'
p63070
S'bool'
p63071
sS'default'
p63072
S'1'
p63073
sS'name'
p63074
S'implicit'
p63075
sS'required'
p63076
I00
sS'group_name'
p63077
S'Advanced'
p63078
sa(dp63079
S'description'
p63080
S'The kappa used with the kernel\n'
p63081
sS'cpp_type'
p63082
S'MaterialPropertyName'
p63083
sS'default'
p63084
g3
sS'name'
p63085
S'kappa_name'
p63086
sS'required'
p63087
I01
sS'group_name'
p63088
Nsa(dp63089
S'description'
p63090
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63091
sS'cpp_type'
p63092
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63093
sS'default'
p63094
g3
sS'name'
p63095
S'save_in'
p63096
sS'required'
p63097
I00
sS'group_name'
p63098
S'Advanced'
p63099
sa(dp63100
S'description'
p63101
S'The seed for the master random number generator\n'
p63102
sS'cpp_type'
p63103
S'unsigned int'
p63104
sS'default'
p63105
S'0'
p63106
sS'name'
p63107
S'seed'
p63108
sS'required'
p63109
I00
sS'group_name'
p63110
S'Advanced'
p63111
sa(dp63112
S'description'
p63113
g3
sS'cpp_type'
p63114
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63115
sS'default'
p63116
S'SplitCHParsed'
p63117
sS'name'
p63118
S'type'
p63119
sS'required'
p63120
I00
sS'group_name'
p63121
Nsa(dp63122
S'description'
p63123
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63124
sS'cpp_type'
p63125
S'bool'
p63126
sS'default'
p63127
S'0'
p63128
sS'name'
p63129
S'use_displaced_mesh'
p63130
sS'required'
p63131
I00
sS'group_name'
p63132
S'Advanced'
p63133
sa(dp63134
S'description'
p63135
S'The name of the variable that this Kernel operates on\n'
p63136
sS'cpp_type'
p63137
S'NonlinearVariableName'
p63138
sS'default'
p63139
g3
sS'name'
p63140
S'variable'
p63141
sS'required'
p63142
I01
sS'group_name'
p63143
Nsa(dp63144
S'description'
p63145
S'chem poten\n'
p63146
sS'cpp_type'
p63147
S'std::vector<VariableName>'
p63148
sS'default'
p63149
g3
sS'name'
p63150
S'w'
p63151
sS'required'
p63152
I01
sS'group_name'
p63153
NsasS'name'
p63154
S'/Kernels/SplitCHParsed'
p63155
sa(dp63156
S'description'
p63157
S'Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a scalar (isotropic) mobility\n'
p63158
sS'subblocks'
p63159
NsS'parameters'
p63160
(lp63161
(dp63162
S'description'
p63163
S'Vector of arguments of the mobility\n'
p63164
sS'cpp_type'
p63165
S'std::vector<VariableName>'
p63166
sS'default'
p63167
g3
sS'name'
p63168
S'args'
p63169
sS'required'
p63170
I00
sS'group_name'
p63171
Nsa(dp63172
S'description'
p63173
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63174
sS'cpp_type'
p63175
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63176
sS'default'
p63177
g3
sS'name'
p63178
S'block'
p63179
sS'required'
p63180
I00
sS'group_name'
p63181
Nsa(dp63182
S'description'
p63183
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63184
sS'cpp_type'
p63185
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63186
sS'default'
p63187
g3
sS'name'
p63188
S'control_tags'
p63189
sS'required'
p63190
I00
sS'group_name'
p63191
Nsa(dp63192
S'description'
p63193
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63194
sS'cpp_type'
p63195
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63196
sS'default'
p63197
g3
sS'name'
p63198
S'diag_save_in'
p63199
sS'required'
p63200
I00
sS'group_name'
p63201
S'Advanced'
p63202
sa(dp63203
S'description'
p63204
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63205
sS'cpp_type'
p63206
S'bool'
p63207
sS'default'
p63208
S'1'
p63209
sS'name'
p63210
S'implicit'
p63211
sS'required'
p63212
I00
sS'group_name'
p63213
S'Advanced'
p63214
sa(dp63215
S'description'
p63216
S'The mobility used with the kernel\n'
p63217
sS'cpp_type'
p63218
S'MaterialPropertyName'
p63219
sS'default'
p63220
S'mobtemp'
p63221
sS'name'
p63222
S'mob_name'
p63223
sS'required'
p63224
I00
sS'group_name'
p63225
Nsa(dp63226
S'description'
p63227
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63228
sS'cpp_type'
p63229
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63230
sS'default'
p63231
g3
sS'name'
p63232
S'save_in'
p63233
sS'required'
p63234
I00
sS'group_name'
p63235
S'Advanced'
p63236
sa(dp63237
S'description'
p63238
S'The seed for the master random number generator\n'
p63239
sS'cpp_type'
p63240
S'unsigned int'
p63241
sS'default'
p63242
S'0'
p63243
sS'name'
p63244
S'seed'
p63245
sS'required'
p63246
I00
sS'group_name'
p63247
S'Advanced'
p63248
sa(dp63249
S'description'
p63250
g3
sS'cpp_type'
p63251
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63252
sS'default'
p63253
S'SplitCHWRes'
p63254
sS'name'
p63255
S'type'
p63256
sS'required'
p63257
I00
sS'group_name'
p63258
Nsa(dp63259
S'description'
p63260
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63261
sS'cpp_type'
p63262
S'bool'
p63263
sS'default'
p63264
S'0'
p63265
sS'name'
p63266
S'use_displaced_mesh'
p63267
sS'required'
p63268
I00
sS'group_name'
p63269
S'Advanced'
p63270
sa(dp63271
S'description'
p63272
S'The name of the variable that this Kernel operates on\n'
p63273
sS'cpp_type'
p63274
S'NonlinearVariableName'
p63275
sS'default'
p63276
g3
sS'name'
p63277
S'variable'
p63278
sS'required'
p63279
I01
sS'group_name'
p63280
NsasS'name'
p63281
S'/Kernels/SplitCHWRes'
p63282
sa(dp63283
S'description'
p63284
S'Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a tensor (anisotropic) mobility\n'
p63285
sS'subblocks'
p63286
NsS'parameters'
p63287
(lp63288
(dp63289
S'description'
p63290
S'Vector of arguments of the mobility\n'
p63291
sS'cpp_type'
p63292
S'std::vector<VariableName>'
p63293
sS'default'
p63294
g3
sS'name'
p63295
S'args'
p63296
sS'required'
p63297
I00
sS'group_name'
p63298
Nsa(dp63299
S'description'
p63300
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63301
sS'cpp_type'
p63302
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63303
sS'default'
p63304
g3
sS'name'
p63305
S'block'
p63306
sS'required'
p63307
I00
sS'group_name'
p63308
Nsa(dp63309
S'description'
p63310
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63311
sS'cpp_type'
p63312
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63313
sS'default'
p63314
g3
sS'name'
p63315
S'control_tags'
p63316
sS'required'
p63317
I00
sS'group_name'
p63318
Nsa(dp63319
S'description'
p63320
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63321
sS'cpp_type'
p63322
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63323
sS'default'
p63324
g3
sS'name'
p63325
S'diag_save_in'
p63326
sS'required'
p63327
I00
sS'group_name'
p63328
S'Advanced'
p63329
sa(dp63330
S'description'
p63331
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63332
sS'cpp_type'
p63333
S'bool'
p63334
sS'default'
p63335
S'1'
p63336
sS'name'
p63337
S'implicit'
p63338
sS'required'
p63339
I00
sS'group_name'
p63340
S'Advanced'
p63341
sa(dp63342
S'description'
p63343
S'The mobility used with the kernel\n'
p63344
sS'cpp_type'
p63345
S'MaterialPropertyName'
p63346
sS'default'
p63347
S'mobtemp'
p63348
sS'name'
p63349
S'mob_name'
p63350
sS'required'
p63351
I00
sS'group_name'
p63352
Nsa(dp63353
S'description'
p63354
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63355
sS'cpp_type'
p63356
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63357
sS'default'
p63358
g3
sS'name'
p63359
S'save_in'
p63360
sS'required'
p63361
I00
sS'group_name'
p63362
S'Advanced'
p63363
sa(dp63364
S'description'
p63365
S'The seed for the master random number generator\n'
p63366
sS'cpp_type'
p63367
S'unsigned int'
p63368
sS'default'
p63369
S'0'
p63370
sS'name'
p63371
S'seed'
p63372
sS'required'
p63373
I00
sS'group_name'
p63374
S'Advanced'
p63375
sa(dp63376
S'description'
p63377
g3
sS'cpp_type'
p63378
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63379
sS'default'
p63380
S'SplitCHWResAniso'
p63381
sS'name'
p63382
S'type'
p63383
sS'required'
p63384
I00
sS'group_name'
p63385
Nsa(dp63386
S'description'
p63387
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63388
sS'cpp_type'
p63389
S'bool'
p63390
sS'default'
p63391
S'0'
p63392
sS'name'
p63393
S'use_displaced_mesh'
p63394
sS'required'
p63395
I00
sS'group_name'
p63396
S'Advanced'
p63397
sa(dp63398
S'description'
p63399
S'The name of the variable that this Kernel operates on\n'
p63400
sS'cpp_type'
p63401
S'NonlinearVariableName'
p63402
sS'default'
p63403
g3
sS'name'
p63404
S'variable'
p63405
sS'required'
p63406
I01
sS'group_name'
p63407
NsasS'name'
p63408
S'/Kernels/SplitCHWResAniso'
p63409
sa(dp63410
S'description'
p63411
g3
sS'subblocks'
p63412
NsS'parameters'
p63413
(lp63414
(dp63415
S'description'
p63416
S'alpha parameter required for HHT time integration\n'
p63417
sS'cpp_type'
p63418
S'double'
p63419
sS'default'
p63420
S'0'
p63421
sS'name'
p63422
S'alpha'
p63423
sS'required'
p63424
I00
sS'group_name'
p63425
Nsa(dp63426
S'description'
p63427
S'Name appended to material properties to make them unique\n'
p63428
sS'cpp_type'
p63429
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63430
sS'default'
p63431
g3
sS'name'
p63432
S'appended_property_name'
p63433
sS'required'
p63434
I00
sS'group_name'
p63435
Nsa(dp63436
S'description'
p63437
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63438
sS'cpp_type'
p63439
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63440
sS'default'
p63441
g3
sS'name'
p63442
S'block'
p63443
sS'required'
p63444
I00
sS'group_name'
p63445
Nsa(dp63446
S'description'
p63447
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p63448
sS'cpp_type'
p63449
S'unsigned int'
p63450
sS'default'
p63451
g3
sS'name'
p63452
S'component'
p63453
sS'required'
p63454
I01
sS'group_name'
p63455
Nsa(dp63456
S'description'
p63457
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63458
sS'cpp_type'
p63459
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63460
sS'default'
p63461
g3
sS'name'
p63462
S'control_tags'
p63463
sS'required'
p63464
I00
sS'group_name'
p63465
Nsa(dp63466
S'description'
p63467
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63468
sS'cpp_type'
p63469
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63470
sS'default'
p63471
g3
sS'name'
p63472
S'diag_save_in'
p63473
sS'required'
p63474
I00
sS'group_name'
p63475
S'Advanced'
p63476
sa(dp63477
S'description'
p63478
S'The x displacement\n'
p63479
sS'cpp_type'
p63480
S'std::vector<VariableName>'
p63481
sS'default'
p63482
g3
sS'name'
p63483
S'disp_x'
p63484
sS'required'
p63485
I00
sS'group_name'
p63486
Nsa(dp63487
S'description'
p63488
S'The y displacement\n'
p63489
sS'cpp_type'
p63490
S'std::vector<VariableName>'
p63491
sS'default'
p63492
g3
sS'name'
p63493
S'disp_y'
p63494
sS'required'
p63495
I00
sS'group_name'
p63496
Nsa(dp63497
S'description'
p63498
S'The z displacement\n'
p63499
sS'cpp_type'
p63500
S'std::vector<VariableName>'
p63501
sS'default'
p63502
g3
sS'name'
p63503
S'disp_z'
p63504
sS'required'
p63505
I00
sS'group_name'
p63506
Nsa(dp63507
S'description'
p63508
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63509
sS'cpp_type'
p63510
S'bool'
p63511
sS'default'
p63512
S'1'
p63513
sS'name'
p63514
S'implicit'
p63515
sS'required'
p63516
I00
sS'group_name'
p63517
S'Advanced'
p63518
sa(dp63519
S'description'
p63520
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63521
sS'cpp_type'
p63522
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63523
sS'default'
p63524
g3
sS'name'
p63525
S'save_in'
p63526
sS'required'
p63527
I00
sS'group_name'
p63528
S'Advanced'
p63529
sa(dp63530
S'description'
p63531
S'The seed for the master random number generator\n'
p63532
sS'cpp_type'
p63533
S'unsigned int'
p63534
sS'default'
p63535
S'0'
p63536
sS'name'
p63537
S'seed'
p63538
sS'required'
p63539
I00
sS'group_name'
p63540
S'Advanced'
p63541
sa(dp63542
S'description'
p63543
S'The temperature\n'
p63544
sS'cpp_type'
p63545
S'std::vector<VariableName>'
p63546
sS'default'
p63547
g3
sS'name'
p63548
S'temp'
p63549
sS'required'
p63550
I00
sS'group_name'
p63551
Nsa(dp63552
S'description'
p63553
g3
sS'cpp_type'
p63554
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63555
sS'default'
p63556
S'StressDivergence'
p63557
sS'name'
p63558
S'type'
p63559
sS'required'
p63560
I00
sS'group_name'
p63561
Nsa(dp63562
S'description'
p63563
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63564
sS'cpp_type'
p63565
S'bool'
p63566
sS'default'
p63567
S'1'
p63568
sS'name'
p63569
S'use_displaced_mesh'
p63570
sS'required'
p63571
I00
sS'group_name'
p63572
S'Advanced'
p63573
sa(dp63574
S'description'
p63575
S'The name of the variable that this Kernel operates on\n'
p63576
sS'cpp_type'
p63577
S'NonlinearVariableName'
p63578
sS'default'
p63579
g3
sS'name'
p63580
S'variable'
p63581
sS'required'
p63582
I01
sS'group_name'
p63583
Nsa(dp63584
S'description'
p63585
S'Stiffness dependent Rayleigh damping coefficient\n'
p63586
sS'cpp_type'
p63587
S'double'
p63588
sS'default'
p63589
S'0'
p63590
sS'name'
p63591
S'zeta'
p63592
sS'required'
p63593
I00
sS'group_name'
p63594
NsasS'name'
p63595
S'/Kernels/StressDivergence'
p63596
sa(dp63597
S'description'
p63598
S'Stress divergence kernel for phase-field fracture: Additionally computes off diagonal damage dependent Jacobian components\n'
p63599
sS'subblocks'
p63600
NsS'parameters'
p63601
(lp63602
(dp63603
S'description'
p63604
S'Material property base name\n'
p63605
sS'cpp_type'
p63606
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63607
sS'default'
p63608
g3
sS'name'
p63609
S'base_name'
p63610
sS'required'
p63611
I00
sS'group_name'
p63612
Nsa(dp63613
S'description'
p63614
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63615
sS'cpp_type'
p63616
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63617
sS'default'
p63618
g3
sS'name'
p63619
S'block'
p63620
sS'required'
p63621
I00
sS'group_name'
p63622
Nsa(dp63623
S'description'
p63624
S'Phase field damage variable: Used to indicate calculation of Off Diagonal Jacobian term\n'
p63625
sS'cpp_type'
p63626
S'std::vector<VariableName>'
p63627
sS'default'
p63628
g3
sS'name'
p63629
S'c'
p63630
sS'required'
p63631
I00
sS'group_name'
p63632
Nsa(dp63633
S'description'
p63634
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p63635
sS'cpp_type'
p63636
S'unsigned int'
p63637
sS'default'
p63638
g3
sS'name'
p63639
S'component'
p63640
sS'required'
p63641
I01
sS'group_name'
p63642
Nsa(dp63643
S'description'
p63644
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63645
sS'cpp_type'
p63646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63647
sS'default'
p63648
g3
sS'name'
p63649
S'control_tags'
p63650
sS'required'
p63651
I00
sS'group_name'
p63652
Nsa(dp63653
S'description'
p63654
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63655
sS'cpp_type'
p63656
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63657
sS'default'
p63658
g3
sS'name'
p63659
S'diag_save_in'
p63660
sS'required'
p63661
I00
sS'group_name'
p63662
S'Advanced'
p63663
sa(dp63664
S'description'
p63665
S'Depricated: the x displacement\n'
p63666
sS'cpp_type'
p63667
S'std::vector<VariableName>'
p63668
sS'default'
p63669
g3
sS'name'
p63670
S'disp_x'
p63671
sS'required'
p63672
I00
sS'group_name'
p63673
Nsa(dp63674
S'description'
p63675
S'Depricated: the y displacement\n'
p63676
sS'cpp_type'
p63677
S'std::vector<VariableName>'
p63678
sS'default'
p63679
g3
sS'name'
p63680
S'disp_y'
p63681
sS'required'
p63682
I00
sS'group_name'
p63683
Nsa(dp63684
S'description'
p63685
S'Depricated: the z displacement\n'
p63686
sS'cpp_type'
p63687
S'std::vector<VariableName>'
p63688
sS'default'
p63689
g3
sS'name'
p63690
S'disp_z'
p63691
sS'required'
p63692
I00
sS'group_name'
p63693
Nsa(dp63694
S'description'
p63695
S'The string of displacements suitable for the problem statement\n'
p63696
sS'cpp_type'
p63697
S'std::vector<VariableName>'
p63698
sS'default'
p63699
g3
sS'name'
p63700
S'displacements'
p63701
sS'required'
p63702
I00
sS'group_name'
p63703
Nsa(dp63704
S'description'
p63705
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63706
sS'cpp_type'
p63707
S'bool'
p63708
sS'default'
p63709
S'1'
p63710
sS'name'
p63711
S'implicit'
p63712
sS'required'
p63713
I00
sS'group_name'
p63714
S'Advanced'
p63715
sa(dp63716
S'description'
p63717
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63718
sS'cpp_type'
p63719
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63720
sS'default'
p63721
g3
sS'name'
p63722
S'save_in'
p63723
sS'required'
p63724
I00
sS'group_name'
p63725
S'Advanced'
p63726
sa(dp63727
S'description'
p63728
S'The seed for the master random number generator\n'
p63729
sS'cpp_type'
p63730
S'unsigned int'
p63731
sS'default'
p63732
S'0'
p63733
sS'name'
p63734
S'seed'
p63735
sS'required'
p63736
I00
sS'group_name'
p63737
S'Advanced'
p63738
sa(dp63739
S'description'
p63740
S'The temperature\n'
p63741
sS'cpp_type'
p63742
S'std::vector<VariableName>'
p63743
sS'default'
p63744
g3
sS'name'
p63745
S'temp'
p63746
sS'required'
p63747
I00
sS'group_name'
p63748
Nsa(dp63749
S'description'
p63750
g3
sS'cpp_type'
p63751
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63752
sS'default'
p63753
S'StressDivergencePFFracTensors'
p63754
sS'name'
p63755
S'type'
p63756
sS'required'
p63757
I00
sS'group_name'
p63758
Nsa(dp63759
S'description'
p63760
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63761
sS'cpp_type'
p63762
S'bool'
p63763
sS'default'
p63764
S'0'
p63765
sS'name'
p63766
S'use_displaced_mesh'
p63767
sS'required'
p63768
I00
sS'group_name'
p63769
S'Advanced'
p63770
sa(dp63771
S'description'
p63772
S'The name of the variable that this Kernel operates on\n'
p63773
sS'cpp_type'
p63774
S'NonlinearVariableName'
p63775
sS'default'
p63776
g3
sS'name'
p63777
S'variable'
p63778
sS'required'
p63779
I01
sS'group_name'
p63780
NsasS'name'
p63781
S'/Kernels/StressDivergencePFFracTensors'
p63782
sa(dp63783
S'description'
p63784
g3
sS'subblocks'
p63785
NsS'parameters'
p63786
(lp63787
(dp63788
S'description'
p63789
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63790
sS'cpp_type'
p63791
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63792
sS'default'
p63793
g3
sS'name'
p63794
S'block'
p63795
sS'required'
p63796
I00
sS'group_name'
p63797
Nsa(dp63798
S'description'
p63799
S'An integer corresponding to the direction the variable this kernel acts in. (0 for r, 1 for z)\n'
p63800
sS'cpp_type'
p63801
S'unsigned int'
p63802
sS'default'
p63803
g3
sS'name'
p63804
S'component'
p63805
sS'required'
p63806
I01
sS'group_name'
p63807
Nsa(dp63808
S'description'
p63809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63810
sS'cpp_type'
p63811
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63812
sS'default'
p63813
g3
sS'name'
p63814
S'control_tags'
p63815
sS'required'
p63816
I00
sS'group_name'
p63817
Nsa(dp63818
S'description'
p63819
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63820
sS'cpp_type'
p63821
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63822
sS'default'
p63823
g3
sS'name'
p63824
S'diag_save_in'
p63825
sS'required'
p63826
I00
sS'group_name'
p63827
S'Advanced'
p63828
sa(dp63829
S'description'
p63830
S'The r displacement\n'
p63831
sS'cpp_type'
p63832
S'std::vector<VariableName>'
p63833
sS'default'
p63834
g3
sS'name'
p63835
S'disp_r'
p63836
sS'required'
p63837
I00
sS'group_name'
p63838
Nsa(dp63839
S'description'
p63840
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63841
sS'cpp_type'
p63842
S'bool'
p63843
sS'default'
p63844
S'1'
p63845
sS'name'
p63846
S'implicit'
p63847
sS'required'
p63848
I00
sS'group_name'
p63849
S'Advanced'
p63850
sa(dp63851
S'description'
p63852
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63853
sS'cpp_type'
p63854
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63855
sS'default'
p63856
g3
sS'name'
p63857
S'save_in'
p63858
sS'required'
p63859
I00
sS'group_name'
p63860
S'Advanced'
p63861
sa(dp63862
S'description'
p63863
S'The seed for the master random number generator\n'
p63864
sS'cpp_type'
p63865
S'unsigned int'
p63866
sS'default'
p63867
S'0'
p63868
sS'name'
p63869
S'seed'
p63870
sS'required'
p63871
I00
sS'group_name'
p63872
S'Advanced'
p63873
sa(dp63874
S'description'
p63875
S'The temperature\n'
p63876
sS'cpp_type'
p63877
S'std::vector<VariableName>'
p63878
sS'default'
p63879
g3
sS'name'
p63880
S'temp'
p63881
sS'required'
p63882
I00
sS'group_name'
p63883
Nsa(dp63884
S'description'
p63885
g3
sS'cpp_type'
p63886
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p63887
sS'default'
p63888
S'StressDivergenceRSpherical'
p63889
sS'name'
p63890
S'type'
p63891
sS'required'
p63892
I00
sS'group_name'
p63893
Nsa(dp63894
S'description'
p63895
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p63896
sS'cpp_type'
p63897
S'bool'
p63898
sS'default'
p63899
S'1'
p63900
sS'name'
p63901
S'use_displaced_mesh'
p63902
sS'required'
p63903
I00
sS'group_name'
p63904
S'Advanced'
p63905
sa(dp63906
S'description'
p63907
S'The name of the variable that this Kernel operates on\n'
p63908
sS'cpp_type'
p63909
S'NonlinearVariableName'
p63910
sS'default'
p63911
g3
sS'name'
p63912
S'variable'
p63913
sS'required'
p63914
I01
sS'group_name'
p63915
NsasS'name'
p63916
S'/Kernels/StressDivergenceRSpherical'
p63917
sa(dp63918
S'description'
p63919
g3
sS'subblocks'
p63920
NsS'parameters'
p63921
(lp63922
(dp63923
S'description'
p63924
S'The list of block ids (SubdomainID) that this object will be applied\n'
p63925
sS'cpp_type'
p63926
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p63927
sS'default'
p63928
g3
sS'name'
p63929
S'block'
p63930
sS'required'
p63931
I00
sS'group_name'
p63932
Nsa(dp63933
S'description'
p63934
S'An integer corresponding to the direction the variable this kernel acts in. (0 for r, 1 for z)\n'
p63935
sS'cpp_type'
p63936
S'unsigned int'
p63937
sS'default'
p63938
g3
sS'name'
p63939
S'component'
p63940
sS'required'
p63941
I01
sS'group_name'
p63942
Nsa(dp63943
S'description'
p63944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p63945
sS'cpp_type'
p63946
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p63947
sS'default'
p63948
g3
sS'name'
p63949
S'control_tags'
p63950
sS'required'
p63951
I00
sS'group_name'
p63952
Nsa(dp63953
S'description'
p63954
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63955
sS'cpp_type'
p63956
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p63957
sS'default'
p63958
g3
sS'name'
p63959
S'diag_save_in'
p63960
sS'required'
p63961
I00
sS'group_name'
p63962
S'Advanced'
p63963
sa(dp63964
S'description'
p63965
S'The r displacement\n'
p63966
sS'cpp_type'
p63967
S'std::vector<VariableName>'
p63968
sS'default'
p63969
g3
sS'name'
p63970
S'disp_r'
p63971
sS'required'
p63972
I00
sS'group_name'
p63973
Nsa(dp63974
S'description'
p63975
S'The z displacement\n'
p63976
sS'cpp_type'
p63977
S'std::vector<VariableName>'
p63978
sS'default'
p63979
g3
sS'name'
p63980
S'disp_z'
p63981
sS'required'
p63982
I00
sS'group_name'
p63983
Nsa(dp63984
S'description'
p63985
S'Determines whether this object is calculated using an implicit or explicit form\n'
p63986
sS'cpp_type'
p63987
S'bool'
p63988
sS'default'
p63989
S'1'
p63990
sS'name'
p63991
S'implicit'
p63992
sS'required'
p63993
I00
sS'group_name'
p63994
S'Advanced'
p63995
sa(dp63996
S'description'
p63997
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p63998
sS'cpp_type'
p63999
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64000
sS'default'
p64001
g3
sS'name'
p64002
S'save_in'
p64003
sS'required'
p64004
I00
sS'group_name'
p64005
S'Advanced'
p64006
sa(dp64007
S'description'
p64008
S'The seed for the master random number generator\n'
p64009
sS'cpp_type'
p64010
S'unsigned int'
p64011
sS'default'
p64012
S'0'
p64013
sS'name'
p64014
S'seed'
p64015
sS'required'
p64016
I00
sS'group_name'
p64017
S'Advanced'
p64018
sa(dp64019
S'description'
p64020
S'The temperature\n'
p64021
sS'cpp_type'
p64022
S'std::vector<VariableName>'
p64023
sS'default'
p64024
g3
sS'name'
p64025
S'temp'
p64026
sS'required'
p64027
I00
sS'group_name'
p64028
Nsa(dp64029
S'description'
p64030
g3
sS'cpp_type'
p64031
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64032
sS'default'
p64033
S'StressDivergenceRZ'
p64034
sS'name'
p64035
S'type'
p64036
sS'required'
p64037
I00
sS'group_name'
p64038
Nsa(dp64039
S'description'
p64040
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64041
sS'cpp_type'
p64042
S'bool'
p64043
sS'default'
p64044
S'1'
p64045
sS'name'
p64046
S'use_displaced_mesh'
p64047
sS'required'
p64048
I00
sS'group_name'
p64049
S'Advanced'
p64050
sa(dp64051
S'description'
p64052
S'The name of the variable that this Kernel operates on\n'
p64053
sS'cpp_type'
p64054
S'NonlinearVariableName'
p64055
sS'default'
p64056
g3
sS'name'
p64057
S'variable'
p64058
sS'required'
p64059
I01
sS'group_name'
p64060
NsasS'name'
p64061
S'/Kernels/StressDivergenceRZ'
p64062
sa(dp64063
S'description'
p64064
S'Calculate stress divergence for an axisymmetric problem in cylinderical coordinates.\n'
p64065
sS'subblocks'
p64066
NsS'parameters'
p64067
(lp64068
(dp64069
S'description'
p64070
S'Material property base name\n'
p64071
sS'cpp_type'
p64072
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64073
sS'default'
p64074
g3
sS'name'
p64075
S'base_name'
p64076
sS'required'
p64077
I00
sS'group_name'
p64078
Nsa(dp64079
S'description'
p64080
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64081
sS'cpp_type'
p64082
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64083
sS'default'
p64084
g3
sS'name'
p64085
S'block'
p64086
sS'required'
p64087
I00
sS'group_name'
p64088
Nsa(dp64089
S'description'
p64090
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n'
p64091
sS'cpp_type'
p64092
S'unsigned int'
p64093
sS'default'
p64094
g3
sS'name'
p64095
S'component'
p64096
sS'required'
p64097
I01
sS'group_name'
p64098
Nsa(dp64099
S'description'
p64100
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64101
sS'cpp_type'
p64102
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64103
sS'default'
p64104
g3
sS'name'
p64105
S'control_tags'
p64106
sS'required'
p64107
I00
sS'group_name'
p64108
Nsa(dp64109
S'description'
p64110
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64111
sS'cpp_type'
p64112
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64113
sS'default'
p64114
g3
sS'name'
p64115
S'diag_save_in'
p64116
sS'required'
p64117
I00
sS'group_name'
p64118
S'Advanced'
p64119
sa(dp64120
S'description'
p64121
S'Depricated: the x displacement\n'
p64122
sS'cpp_type'
p64123
S'std::vector<VariableName>'
p64124
sS'default'
p64125
g3
sS'name'
p64126
S'disp_x'
p64127
sS'required'
p64128
I00
sS'group_name'
p64129
Nsa(dp64130
S'description'
p64131
S'Depricated: the y displacement\n'
p64132
sS'cpp_type'
p64133
S'std::vector<VariableName>'
p64134
sS'default'
p64135
g3
sS'name'
p64136
S'disp_y'
p64137
sS'required'
p64138
I00
sS'group_name'
p64139
Nsa(dp64140
S'description'
p64141
S'Depricated: the z displacement\n'
p64142
sS'cpp_type'
p64143
S'std::vector<VariableName>'
p64144
sS'default'
p64145
g3
sS'name'
p64146
S'disp_z'
p64147
sS'required'
p64148
I00
sS'group_name'
p64149
Nsa(dp64150
S'description'
p64151
S'The string of displacements suitable for the problem statement\n'
p64152
sS'cpp_type'
p64153
S'std::vector<VariableName>'
p64154
sS'default'
p64155
g3
sS'name'
p64156
S'displacements'
p64157
sS'required'
p64158
I00
sS'group_name'
p64159
Nsa(dp64160
S'description'
p64161
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64162
sS'cpp_type'
p64163
S'bool'
p64164
sS'default'
p64165
S'1'
p64166
sS'name'
p64167
S'implicit'
p64168
sS'required'
p64169
I00
sS'group_name'
p64170
S'Advanced'
p64171
sa(dp64172
S'description'
p64173
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64174
sS'cpp_type'
p64175
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64176
sS'default'
p64177
g3
sS'name'
p64178
S'save_in'
p64179
sS'required'
p64180
I00
sS'group_name'
p64181
S'Advanced'
p64182
sa(dp64183
S'description'
p64184
S'The seed for the master random number generator\n'
p64185
sS'cpp_type'
p64186
S'unsigned int'
p64187
sS'default'
p64188
S'0'
p64189
sS'name'
p64190
S'seed'
p64191
sS'required'
p64192
I00
sS'group_name'
p64193
S'Advanced'
p64194
sa(dp64195
S'description'
p64196
S'The temperature\n'
p64197
sS'cpp_type'
p64198
S'std::vector<VariableName>'
p64199
sS'default'
p64200
g3
sS'name'
p64201
S'temp'
p64202
sS'required'
p64203
I00
sS'group_name'
p64204
Nsa(dp64205
S'description'
p64206
g3
sS'cpp_type'
p64207
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64208
sS'default'
p64209
S'StressDivergenceRZTensors'
p64210
sS'name'
p64211
S'type'
p64212
sS'required'
p64213
I00
sS'group_name'
p64214
Nsa(dp64215
S'description'
p64216
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64217
sS'cpp_type'
p64218
S'bool'
p64219
sS'default'
p64220
S'1'
p64221
sS'name'
p64222
S'use_displaced_mesh'
p64223
sS'required'
p64224
I00
sS'group_name'
p64225
S'Advanced'
p64226
sa(dp64227
S'description'
p64228
S'The name of the variable that this Kernel operates on\n'
p64229
sS'cpp_type'
p64230
S'NonlinearVariableName'
p64231
sS'default'
p64232
g3
sS'name'
p64233
S'variable'
p64234
sS'required'
p64235
I01
sS'group_name'
p64236
NsasS'name'
p64237
S'/Kernels/StressDivergenceRZTensors'
p64238
sa(dp64239
S'description'
p64240
S'Stress divergence kernel (used by the TensorMechanics action)\n'
p64241
sS'subblocks'
p64242
NsS'parameters'
p64243
(lp64244
(dp64245
S'description'
p64246
S'Material property base name\n'
p64247
sS'cpp_type'
p64248
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64249
sS'default'
p64250
g3
sS'name'
p64251
S'base_name'
p64252
sS'required'
p64253
I00
sS'group_name'
p64254
Nsa(dp64255
S'description'
p64256
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64257
sS'cpp_type'
p64258
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64259
sS'default'
p64260
g3
sS'name'
p64261
S'block'
p64262
sS'required'
p64263
I00
sS'group_name'
p64264
Nsa(dp64265
S'description'
p64266
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p64267
sS'cpp_type'
p64268
S'unsigned int'
p64269
sS'default'
p64270
g3
sS'name'
p64271
S'component'
p64272
sS'required'
p64273
I01
sS'group_name'
p64274
Nsa(dp64275
S'description'
p64276
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64277
sS'cpp_type'
p64278
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64279
sS'default'
p64280
g3
sS'name'
p64281
S'control_tags'
p64282
sS'required'
p64283
I00
sS'group_name'
p64284
Nsa(dp64285
S'description'
p64286
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64287
sS'cpp_type'
p64288
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64289
sS'default'
p64290
g3
sS'name'
p64291
S'diag_save_in'
p64292
sS'required'
p64293
I00
sS'group_name'
p64294
S'Advanced'
p64295
sa(dp64296
S'description'
p64297
S'Depricated: the x displacement\n'
p64298
sS'cpp_type'
p64299
S'std::vector<VariableName>'
p64300
sS'default'
p64301
g3
sS'name'
p64302
S'disp_x'
p64303
sS'required'
p64304
I00
sS'group_name'
p64305
Nsa(dp64306
S'description'
p64307
S'Depricated: the y displacement\n'
p64308
sS'cpp_type'
p64309
S'std::vector<VariableName>'
p64310
sS'default'
p64311
g3
sS'name'
p64312
S'disp_y'
p64313
sS'required'
p64314
I00
sS'group_name'
p64315
Nsa(dp64316
S'description'
p64317
S'Depricated: the z displacement\n'
p64318
sS'cpp_type'
p64319
S'std::vector<VariableName>'
p64320
sS'default'
p64321
g3
sS'name'
p64322
S'disp_z'
p64323
sS'required'
p64324
I00
sS'group_name'
p64325
Nsa(dp64326
S'description'
p64327
S'The string of displacements suitable for the problem statement\n'
p64328
sS'cpp_type'
p64329
S'std::vector<VariableName>'
p64330
sS'default'
p64331
g3
sS'name'
p64332
S'displacements'
p64333
sS'required'
p64334
I00
sS'group_name'
p64335
Nsa(dp64336
S'description'
p64337
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64338
sS'cpp_type'
p64339
S'bool'
p64340
sS'default'
p64341
S'1'
p64342
sS'name'
p64343
S'implicit'
p64344
sS'required'
p64345
I00
sS'group_name'
p64346
S'Advanced'
p64347
sa(dp64348
S'description'
p64349
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64350
sS'cpp_type'
p64351
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64352
sS'default'
p64353
g3
sS'name'
p64354
S'save_in'
p64355
sS'required'
p64356
I00
sS'group_name'
p64357
S'Advanced'
p64358
sa(dp64359
S'description'
p64360
S'The seed for the master random number generator\n'
p64361
sS'cpp_type'
p64362
S'unsigned int'
p64363
sS'default'
p64364
S'0'
p64365
sS'name'
p64366
S'seed'
p64367
sS'required'
p64368
I00
sS'group_name'
p64369
S'Advanced'
p64370
sa(dp64371
S'description'
p64372
S'The temperature\n'
p64373
sS'cpp_type'
p64374
S'std::vector<VariableName>'
p64375
sS'default'
p64376
g3
sS'name'
p64377
S'temp'
p64378
sS'required'
p64379
I00
sS'group_name'
p64380
Nsa(dp64381
S'description'
p64382
g3
sS'cpp_type'
p64383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64384
sS'default'
p64385
S'StressDivergenceTensors'
p64386
sS'name'
p64387
S'type'
p64388
sS'required'
p64389
I00
sS'group_name'
p64390
Nsa(dp64391
S'description'
p64392
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64393
sS'cpp_type'
p64394
S'bool'
p64395
sS'default'
p64396
S'0'
p64397
sS'name'
p64398
S'use_displaced_mesh'
p64399
sS'required'
p64400
I00
sS'group_name'
p64401
S'Advanced'
p64402
sa(dp64403
S'description'
p64404
S'The name of the variable that this Kernel operates on\n'
p64405
sS'cpp_type'
p64406
S'NonlinearVariableName'
p64407
sS'default'
p64408
g3
sS'name'
p64409
S'variable'
p64410
sS'required'
p64411
I01
sS'group_name'
p64412
NsasS'name'
p64413
S'/Kernels/StressDivergenceTensors'
p64414
sa(dp64415
S'description'
p64416
g3
sS'subblocks'
p64417
NsS'parameters'
p64418
(lp64419
(dp64420
S'description'
p64421
S'Name appended to material properties to make them unique\n'
p64422
sS'cpp_type'
p64423
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64424
sS'default'
p64425
g3
sS'name'
p64426
S'appended_property_name'
p64427
sS'required'
p64428
I00
sS'group_name'
p64429
Nsa(dp64430
S'description'
p64431
S'Cross-sectional area of truss element\n'
p64432
sS'cpp_type'
p64433
S'std::vector<VariableName>'
p64434
sS'default'
p64435
g3
sS'name'
p64436
S'area'
p64437
sS'required'
p64438
I00
sS'group_name'
p64439
Nsa(dp64440
S'description'
p64441
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64442
sS'cpp_type'
p64443
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64444
sS'default'
p64445
g3
sS'name'
p64446
S'block'
p64447
sS'required'
p64448
I00
sS'group_name'
p64449
Nsa(dp64450
S'description'
p64451
S'An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n'
p64452
sS'cpp_type'
p64453
S'unsigned int'
p64454
sS'default'
p64455
g3
sS'name'
p64456
S'component'
p64457
sS'required'
p64458
I01
sS'group_name'
p64459
Nsa(dp64460
S'description'
p64461
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64462
sS'cpp_type'
p64463
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64464
sS'default'
p64465
g3
sS'name'
p64466
S'control_tags'
p64467
sS'required'
p64468
I00
sS'group_name'
p64469
Nsa(dp64470
S'description'
p64471
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64472
sS'cpp_type'
p64473
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64474
sS'default'
p64475
g3
sS'name'
p64476
S'diag_save_in'
p64477
sS'required'
p64478
I00
sS'group_name'
p64479
S'Advanced'
p64480
sa(dp64481
S'description'
p64482
S'The x displacement\n'
p64483
sS'cpp_type'
p64484
S'std::vector<VariableName>'
p64485
sS'default'
p64486
g3
sS'name'
p64487
S'disp_x'
p64488
sS'required'
p64489
I00
sS'group_name'
p64490
Nsa(dp64491
S'description'
p64492
S'The y displacement\n'
p64493
sS'cpp_type'
p64494
S'std::vector<VariableName>'
p64495
sS'default'
p64496
g3
sS'name'
p64497
S'disp_y'
p64498
sS'required'
p64499
I00
sS'group_name'
p64500
Nsa(dp64501
S'description'
p64502
S'The z displacement\n'
p64503
sS'cpp_type'
p64504
S'std::vector<VariableName>'
p64505
sS'default'
p64506
g3
sS'name'
p64507
S'disp_z'
p64508
sS'required'
p64509
I00
sS'group_name'
p64510
Nsa(dp64511
S'description'
p64512
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64513
sS'cpp_type'
p64514
S'bool'
p64515
sS'default'
p64516
S'1'
p64517
sS'name'
p64518
S'implicit'
p64519
sS'required'
p64520
I00
sS'group_name'
p64521
S'Advanced'
p64522
sa(dp64523
S'description'
p64524
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64525
sS'cpp_type'
p64526
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64527
sS'default'
p64528
g3
sS'name'
p64529
S'save_in'
p64530
sS'required'
p64531
I00
sS'group_name'
p64532
S'Advanced'
p64533
sa(dp64534
S'description'
p64535
S'The seed for the master random number generator\n'
p64536
sS'cpp_type'
p64537
S'unsigned int'
p64538
sS'default'
p64539
S'0'
p64540
sS'name'
p64541
S'seed'
p64542
sS'required'
p64543
I00
sS'group_name'
p64544
S'Advanced'
p64545
sa(dp64546
S'description'
p64547
S'The temperature\n'
p64548
sS'cpp_type'
p64549
S'std::vector<VariableName>'
p64550
sS'default'
p64551
g3
sS'name'
p64552
S'temp'
p64553
sS'required'
p64554
I00
sS'group_name'
p64555
Nsa(dp64556
S'description'
p64557
g3
sS'cpp_type'
p64558
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64559
sS'default'
p64560
S'StressDivergenceTruss'
p64561
sS'name'
p64562
S'type'
p64563
sS'required'
p64564
I00
sS'group_name'
p64565
Nsa(dp64566
S'description'
p64567
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64568
sS'cpp_type'
p64569
S'bool'
p64570
sS'default'
p64571
S'1'
p64572
sS'name'
p64573
S'use_displaced_mesh'
p64574
sS'required'
p64575
I00
sS'group_name'
p64576
S'Advanced'
p64577
sa(dp64578
S'description'
p64579
S'The name of the variable that this Kernel operates on\n'
p64580
sS'cpp_type'
p64581
S'NonlinearVariableName'
p64582
sS'default'
p64583
g3
sS'name'
p64584
S'variable'
p64585
sS'required'
p64586
I01
sS'group_name'
p64587
NsasS'name'
p64588
S'/Kernels/StressDivergenceTruss'
p64589
sa(dp64590
S'description'
p64591
S'Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on a non-conserved order parameter eta_i.\n'
p64592
sS'subblocks'
p64593
NsS'parameters'
p64594
(lp64595
(dp64596
S'description'
p64597
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64598
sS'cpp_type'
p64599
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64600
sS'default'
p64601
g3
sS'name'
p64602
S'block'
p64603
sS'required'
p64604
I00
sS'group_name'
p64605
Nsa(dp64606
S'description'
p64607
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64608
sS'cpp_type'
p64609
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64610
sS'default'
p64611
g3
sS'name'
p64612
S'control_tags'
p64613
sS'required'
p64614
I00
sS'group_name'
p64615
Nsa(dp64616
S'description'
p64617
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64618
sS'cpp_type'
p64619
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64620
sS'default'
p64621
g3
sS'name'
p64622
S'diag_save_in'
p64623
sS'required'
p64624
I00
sS'group_name'
p64625
S'Advanced'
p64626
sa(dp64627
S'description'
p64628
S'Switching Function Materials that provides h(eta_i)\n'
p64629
sS'cpp_type'
p64630
S'MaterialPropertyName'
p64631
sS'default'
p64632
g3
sS'name'
p64633
S'h_name'
p64634
sS'required'
p64635
I00
sS'group_name'
p64636
Nsa(dp64637
S'description'
p64638
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64639
sS'cpp_type'
p64640
S'bool'
p64641
sS'default'
p64642
S'1'
p64643
sS'name'
p64644
S'implicit'
p64645
sS'required'
p64646
I00
sS'group_name'
p64647
S'Advanced'
p64648
sa(dp64649
S'description'
p64650
S'Lagrange multiplier\n'
p64651
sS'cpp_type'
p64652
S'std::vector<VariableName>'
p64653
sS'default'
p64654
g3
sS'name'
p64655
S'lambda'
p64656
sS'required'
p64657
I01
sS'group_name'
p64658
Nsa(dp64659
S'description'
p64660
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64661
sS'cpp_type'
p64662
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64663
sS'default'
p64664
g3
sS'name'
p64665
S'save_in'
p64666
sS'required'
p64667
I00
sS'group_name'
p64668
S'Advanced'
p64669
sa(dp64670
S'description'
p64671
S'The seed for the master random number generator\n'
p64672
sS'cpp_type'
p64673
S'unsigned int'
p64674
sS'default'
p64675
S'0'
p64676
sS'name'
p64677
S'seed'
p64678
sS'required'
p64679
I00
sS'group_name'
p64680
S'Advanced'
p64681
sa(dp64682
S'description'
p64683
g3
sS'cpp_type'
p64684
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64685
sS'default'
p64686
S'SwitchingFunctionConstraintEta'
p64687
sS'name'
p64688
S'type'
p64689
sS'required'
p64690
I00
sS'group_name'
p64691
Nsa(dp64692
S'description'
p64693
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64694
sS'cpp_type'
p64695
S'bool'
p64696
sS'default'
p64697
S'0'
p64698
sS'name'
p64699
S'use_displaced_mesh'
p64700
sS'required'
p64701
I00
sS'group_name'
p64702
S'Advanced'
p64703
sa(dp64704
S'description'
p64705
S'The name of the variable that this Kernel operates on\n'
p64706
sS'cpp_type'
p64707
S'NonlinearVariableName'
p64708
sS'default'
p64709
g3
sS'name'
p64710
S'variable'
p64711
sS'required'
p64712
I01
sS'group_name'
p64713
NsasS'name'
p64714
S'/Kernels/SwitchingFunctionConstraintEta'
p64715
sa(dp64716
S'description'
p64717
S'Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on the lagrange multiplier variable.\n'
p64718
sS'subblocks'
p64719
NsS'parameters'
p64720
(lp64721
(dp64722
S'description'
p64723
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64724
sS'cpp_type'
p64725
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64726
sS'default'
p64727
g3
sS'name'
p64728
S'block'
p64729
sS'required'
p64730
I00
sS'group_name'
p64731
Nsa(dp64732
S'description'
p64733
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64734
sS'cpp_type'
p64735
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64736
sS'default'
p64737
g3
sS'name'
p64738
S'control_tags'
p64739
sS'required'
p64740
I00
sS'group_name'
p64741
Nsa(dp64742
S'description'
p64743
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64744
sS'cpp_type'
p64745
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64746
sS'default'
p64747
g3
sS'name'
p64748
S'diag_save_in'
p64749
sS'required'
p64750
I00
sS'group_name'
p64751
S'Advanced'
p64752
sa(dp64753
S'description'
p64754
S'Shift factor to avoid a zero pivot\n'
p64755
sS'cpp_type'
p64756
S'double'
p64757
sS'default'
p64758
S'1e-09'
p64759
sS'name'
p64760
S'epsilon'
p64761
sS'required'
p64762
I00
sS'group_name'
p64763
Nsa(dp64764
S'description'
p64765
S'eta_i order parameters, one for each h\n'
p64766
sS'cpp_type'
p64767
S'std::vector<VariableName>'
p64768
sS'default'
p64769
g3
sS'name'
p64770
S'etas'
p64771
sS'required'
p64772
I01
sS'group_name'
p64773
Nsa(dp64774
S'description'
p64775
S'Switching Function Materials that provide h(eta_i)\n'
p64776
sS'cpp_type'
p64777
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p64778
sS'default'
p64779
g3
sS'name'
p64780
S'h_names'
p64781
sS'required'
p64782
I00
sS'group_name'
p64783
Nsa(dp64784
S'description'
p64785
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64786
sS'cpp_type'
p64787
S'bool'
p64788
sS'default'
p64789
S'1'
p64790
sS'name'
p64791
S'implicit'
p64792
sS'required'
p64793
I00
sS'group_name'
p64794
S'Advanced'
p64795
sa(dp64796
S'description'
p64797
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64798
sS'cpp_type'
p64799
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64800
sS'default'
p64801
g3
sS'name'
p64802
S'save_in'
p64803
sS'required'
p64804
I00
sS'group_name'
p64805
S'Advanced'
p64806
sa(dp64807
S'description'
p64808
S'The seed for the master random number generator\n'
p64809
sS'cpp_type'
p64810
S'unsigned int'
p64811
sS'default'
p64812
S'0'
p64813
sS'name'
p64814
S'seed'
p64815
sS'required'
p64816
I00
sS'group_name'
p64817
S'Advanced'
p64818
sa(dp64819
S'description'
p64820
g3
sS'cpp_type'
p64821
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64822
sS'default'
p64823
S'SwitchingFunctionConstraintLagrange'
p64824
sS'name'
p64825
S'type'
p64826
sS'required'
p64827
I00
sS'group_name'
p64828
Nsa(dp64829
S'description'
p64830
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64831
sS'cpp_type'
p64832
S'bool'
p64833
sS'default'
p64834
S'0'
p64835
sS'name'
p64836
S'use_displaced_mesh'
p64837
sS'required'
p64838
I00
sS'group_name'
p64839
S'Advanced'
p64840
sa(dp64841
S'description'
p64842
S'The name of the variable that this Kernel operates on\n'
p64843
sS'cpp_type'
p64844
S'NonlinearVariableName'
p64845
sS'default'
p64846
g3
sS'name'
p64847
S'variable'
p64848
sS'required'
p64849
I01
sS'group_name'
p64850
NsasS'name'
p64851
S'/Kernels/SwitchingFunctionConstraintLagrange'
p64852
sa(dp64853
S'description'
p64854
S'Penalty kernel to constrain the sum of all switching functions in a multiphase system.\n'
p64855
sS'subblocks'
p64856
NsS'parameters'
p64857
(lp64858
(dp64859
S'description'
p64860
S'The list of block ids (SubdomainID) that this object will be applied\n'
p64861
sS'cpp_type'
p64862
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p64863
sS'default'
p64864
g3
sS'name'
p64865
S'block'
p64866
sS'required'
p64867
I00
sS'group_name'
p64868
Nsa(dp64869
S'description'
p64870
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p64871
sS'cpp_type'
p64872
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p64873
sS'default'
p64874
g3
sS'name'
p64875
S'control_tags'
p64876
sS'required'
p64877
I00
sS'group_name'
p64878
Nsa(dp64879
S'description'
p64880
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64881
sS'cpp_type'
p64882
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64883
sS'default'
p64884
g3
sS'name'
p64885
S'diag_save_in'
p64886
sS'required'
p64887
I00
sS'group_name'
p64888
S'Advanced'
p64889
sa(dp64890
S'description'
p64891
S'eta_i order parameters, one for each h\n'
p64892
sS'cpp_type'
p64893
S'std::vector<VariableName>'
p64894
sS'default'
p64895
g3
sS'name'
p64896
S'etas'
p64897
sS'required'
p64898
I01
sS'group_name'
p64899
Nsa(dp64900
S'description'
p64901
S'Switching Function Materials that provide h(eta_i)\n'
p64902
sS'cpp_type'
p64903
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p64904
sS'default'
p64905
g3
sS'name'
p64906
S'h_names'
p64907
sS'required'
p64908
I00
sS'group_name'
p64909
Nsa(dp64910
S'description'
p64911
S'Determines whether this object is calculated using an implicit or explicit form\n'
p64912
sS'cpp_type'
p64913
S'bool'
p64914
sS'default'
p64915
S'1'
p64916
sS'name'
p64917
S'implicit'
p64918
sS'required'
p64919
I00
sS'group_name'
p64920
S'Advanced'
p64921
sa(dp64922
S'description'
p64923
S'Penalty scaling factor\n'
p64924
sS'cpp_type'
p64925
S'double'
p64926
sS'default'
p64927
S'1'
p64928
sS'name'
p64929
S'penalty'
p64930
sS'required'
p64931
I00
sS'group_name'
p64932
Nsa(dp64933
S'description'
p64934
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p64935
sS'cpp_type'
p64936
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p64937
sS'default'
p64938
g3
sS'name'
p64939
S'save_in'
p64940
sS'required'
p64941
I00
sS'group_name'
p64942
S'Advanced'
p64943
sa(dp64944
S'description'
p64945
S'The seed for the master random number generator\n'
p64946
sS'cpp_type'
p64947
S'unsigned int'
p64948
sS'default'
p64949
S'0'
p64950
sS'name'
p64951
S'seed'
p64952
sS'required'
p64953
I00
sS'group_name'
p64954
S'Advanced'
p64955
sa(dp64956
S'description'
p64957
g3
sS'cpp_type'
p64958
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64959
sS'default'
p64960
S'SwitchingFunctionPenalty'
p64961
sS'name'
p64962
S'type'
p64963
sS'required'
p64964
I00
sS'group_name'
p64965
Nsa(dp64966
S'description'
p64967
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p64968
sS'cpp_type'
p64969
S'bool'
p64970
sS'default'
p64971
S'0'
p64972
sS'name'
p64973
S'use_displaced_mesh'
p64974
sS'required'
p64975
I00
sS'group_name'
p64976
S'Advanced'
p64977
sa(dp64978
S'description'
p64979
S'The name of the variable that this Kernel operates on\n'
p64980
sS'cpp_type'
p64981
S'NonlinearVariableName'
p64982
sS'default'
p64983
g3
sS'name'
p64984
S'variable'
p64985
sS'required'
p64986
I01
sS'group_name'
p64987
NsasS'name'
p64988
S'/Kernels/SwitchingFunctionPenalty'
p64989
sa(dp64990
S'description'
p64991
g3
sS'subblocks'
p64992
NsS'parameters'
p64993
(lp64994
(dp64995
S'description'
p64996
S'Material property base name\n'
p64997
sS'cpp_type'
p64998
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p64999
sS'default'
p65000
g3
sS'name'
p65001
S'base_name'
p65002
sS'required'
p65003
I00
sS'group_name'
p65004
Nsa(dp65005
S'description'
p65006
S'The x displacement\n'
p65007
sS'cpp_type'
p65008
S'NonlinearVariableName'
p65009
sS'default'
p65010
g3
sS'name'
p65011
S'disp_x'
p65012
sS'required'
p65013
I00
sS'group_name'
p65014
Nsa(dp65015
S'description'
p65016
S'The y displacement\n'
p65017
sS'cpp_type'
p65018
S'NonlinearVariableName'
p65019
sS'default'
p65020
g3
sS'name'
p65021
S'disp_y'
p65022
sS'required'
p65023
I00
sS'group_name'
p65024
Nsa(dp65025
S'description'
p65026
S'The z displacement\n'
p65027
sS'cpp_type'
p65028
S'NonlinearVariableName'
p65029
sS'default'
p65030
g3
sS'name'
p65031
S'disp_z'
p65032
sS'required'
p65033
I00
sS'group_name'
p65034
Nsa(dp65035
S'description'
p65036
S'The nonlinear displacement variables for the problem\n'
p65037
sS'cpp_type'
p65038
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p65039
sS'default'
p65040
g3
sS'name'
p65041
S'displacements'
p65042
sS'required'
p65043
I00
sS'group_name'
p65044
Nsa(dp65045
S'description'
p65046
S'Auxiliary variables to save the x displacement residuals.\n'
p65047
sS'cpp_type'
p65048
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65049
sS'default'
p65050
g3
sS'name'
p65051
S'save_in_disp_x'
p65052
sS'required'
p65053
I00
sS'group_name'
p65054
Nsa(dp65055
S'description'
p65056
S'Auxiliary variables to save the y displacement residuals.\n'
p65057
sS'cpp_type'
p65058
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65059
sS'default'
p65060
g3
sS'name'
p65061
S'save_in_disp_y'
p65062
sS'required'
p65063
I00
sS'group_name'
p65064
Nsa(dp65065
S'description'
p65066
S'Auxiliary variables to save the z displacement residuals.\n'
p65067
sS'cpp_type'
p65068
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65069
sS'default'
p65070
g3
sS'name'
p65071
S'save_in_disp_z'
p65072
sS'required'
p65073
I00
sS'group_name'
p65074
Nsa(dp65075
S'description'
p65076
S'The temperature\n'
p65077
sS'cpp_type'
p65078
S'NonlinearVariableName'
p65079
sS'default'
p65080
g3
sS'name'
p65081
S'temp'
p65082
sS'required'
p65083
I00
sS'group_name'
p65084
Nsa(dp65085
S'description'
p65086
S'Whether to use displaced mesh in the kernels\n'
p65087
sS'cpp_type'
p65088
S'bool'
p65089
sS'default'
p65090
S'0'
p65091
sS'name'
p65092
S'use_displaced_mesh'
p65093
sS'required'
p65094
I00
sS'group_name'
p65095
NsasS'name'
p65096
S'/Kernels/TensorMechanics'
p65097
sa(dp65098
S'description'
p65099
S'Kernel for thermo-diffusion (Soret effect, thermophoresis, etc.)\n'
p65100
sS'subblocks'
p65101
NsS'parameters'
p65102
(lp65103
(dp65104
S'description'
p65105
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65106
sS'cpp_type'
p65107
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65108
sS'default'
p65109
g3
sS'name'
p65110
S'block'
p65111
sS'required'
p65112
I00
sS'group_name'
p65113
Nsa(dp65114
S'description'
p65115
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65116
sS'cpp_type'
p65117
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65118
sS'default'
p65119
g3
sS'name'
p65120
S'control_tags'
p65121
sS'required'
p65122
I00
sS'group_name'
p65123
Nsa(dp65124
S'description'
p65125
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p65126
sS'cpp_type'
p65127
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65128
sS'default'
p65129
g3
sS'name'
p65130
S'diag_save_in'
p65131
sS'required'
p65132
I00
sS'group_name'
p65133
S'Advanced'
p65134
sa(dp65135
S'description'
p65136
S'Gas constant\n'
p65137
sS'cpp_type'
p65138
S'double'
p65139
sS'default'
p65140
S'8.31446'
p65141
sS'name'
p65142
S'gas_constant'
p65143
sS'required'
p65144
I00
sS'group_name'
p65145
Nsa(dp65146
S'description'
p65147
S'Property name for the heat of transport.\n'
p65148
sS'cpp_type'
p65149
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65150
sS'default'
p65151
S'heat_of_transport'
p65152
sS'name'
p65153
S'heat_of_transport'
p65154
sS'required'
p65155
I00
sS'group_name'
p65156
Nsa(dp65157
S'description'
p65158
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65159
sS'cpp_type'
p65160
S'bool'
p65161
sS'default'
p65162
S'1'
p65163
sS'name'
p65164
S'implicit'
p65165
sS'required'
p65166
I00
sS'group_name'
p65167
S'Advanced'
p65168
sa(dp65169
S'description'
p65170
S'Property name for the diffusivity.\n'
p65171
sS'cpp_type'
p65172
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65173
sS'default'
p65174
S'mass_diffusivity'
p65175
sS'name'
p65176
S'mass_diffusivity'
p65177
sS'required'
p65178
I00
sS'group_name'
p65179
Nsa(dp65180
S'description'
p65181
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p65182
sS'cpp_type'
p65183
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65184
sS'default'
p65185
g3
sS'name'
p65186
S'save_in'
p65187
sS'required'
p65188
I00
sS'group_name'
p65189
S'Advanced'
p65190
sa(dp65191
S'description'
p65192
S'The seed for the master random number generator\n'
p65193
sS'cpp_type'
p65194
S'unsigned int'
p65195
sS'default'
p65196
S'0'
p65197
sS'name'
p65198
S'seed'
p65199
sS'required'
p65200
I00
sS'group_name'
p65201
S'Advanced'
p65202
sa(dp65203
S'description'
p65204
S'Coupled temperature\n'
p65205
sS'cpp_type'
p65206
S'std::vector<VariableName>'
p65207
sS'default'
p65208
g3
sS'name'
p65209
S'temp'
p65210
sS'required'
p65211
I01
sS'group_name'
p65212
Nsa(dp65213
S'description'
p65214
g3
sS'cpp_type'
p65215
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65216
sS'default'
p65217
S'ThermoDiffusion'
p65218
sS'name'
p65219
S'type'
p65220
sS'required'
p65221
I00
sS'group_name'
p65222
Nsa(dp65223
S'description'
p65224
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p65225
sS'cpp_type'
p65226
S'bool'
p65227
sS'default'
p65228
S'0'
p65229
sS'name'
p65230
S'use_displaced_mesh'
p65231
sS'required'
p65232
I00
sS'group_name'
p65233
S'Advanced'
p65234
sa(dp65235
S'description'
p65236
S'The name of the variable that this Kernel operates on\n'
p65237
sS'cpp_type'
p65238
S'NonlinearVariableName'
p65239
sS'default'
p65240
g3
sS'name'
p65241
S'variable'
p65242
sS'required'
p65243
I01
sS'group_name'
p65244
NsasS'name'
p65245
S'/Kernels/ThermoDiffusion'
p65246
sa(dp65247
S'description'
p65248
g3
sS'subblocks'
p65249
NsS'parameters'
p65250
(lp65251
(dp65252
S'description'
p65253
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65254
sS'cpp_type'
p65255
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65256
sS'default'
p65257
g3
sS'name'
p65258
S'block'
p65259
sS'required'
p65260
I00
sS'group_name'
p65261
Nsa(dp65262
S'description'
p65263
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65264
sS'cpp_type'
p65265
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65266
sS'default'
p65267
g3
sS'name'
p65268
S'control_tags'
p65269
sS'required'
p65270
I00
sS'group_name'
p65271
Nsa(dp65272
S'description'
p65273
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p65274
sS'cpp_type'
p65275
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65276
sS'default'
p65277
g3
sS'name'
p65278
S'diag_save_in'
p65279
sS'required'
p65280
I00
sS'group_name'
p65281
S'Advanced'
p65282
sa(dp65283
S'description'
p65284
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65285
sS'cpp_type'
p65286
S'bool'
p65287
sS'default'
p65288
S'1'
p65289
sS'name'
p65290
S'implicit'
p65291
sS'required'
p65292
I00
sS'group_name'
p65293
S'Advanced'
p65294
sa(dp65295
S'description'
p65296
S'True for mass matrix lumping, false otherwise\n'
p65297
sS'cpp_type'
p65298
S'bool'
p65299
sS'default'
p65300
S'0'
p65301
sS'name'
p65302
S'lumping'
p65303
sS'required'
p65304
I00
sS'group_name'
p65305
Nsa(dp65306
S'description'
p65307
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p65308
sS'cpp_type'
p65309
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65310
sS'default'
p65311
g3
sS'name'
p65312
S'save_in'
p65313
sS'required'
p65314
I00
sS'group_name'
p65315
S'Advanced'
p65316
sa(dp65317
S'description'
p65318
S'The seed for the master random number generator\n'
p65319
sS'cpp_type'
p65320
S'unsigned int'
p65321
sS'default'
p65322
S'0'
p65323
sS'name'
p65324
S'seed'
p65325
sS'required'
p65326
I00
sS'group_name'
p65327
S'Advanced'
p65328
sa(dp65329
S'description'
p65330
g3
sS'cpp_type'
p65331
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65332
sS'default'
p65333
S'TimeDerivative'
p65334
sS'name'
p65335
S'type'
p65336
sS'required'
p65337
I00
sS'group_name'
p65338
Nsa(dp65339
S'description'
p65340
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p65341
sS'cpp_type'
p65342
S'bool'
p65343
sS'default'
p65344
S'0'
p65345
sS'name'
p65346
S'use_displaced_mesh'
p65347
sS'required'
p65348
I00
sS'group_name'
p65349
S'Advanced'
p65350
sa(dp65351
S'description'
p65352
S'The name of the variable that this Kernel operates on\n'
p65353
sS'cpp_type'
p65354
S'NonlinearVariableName'
p65355
sS'default'
p65356
g3
sS'name'
p65357
S'variable'
p65358
sS'required'
p65359
I01
sS'group_name'
p65360
NsasS'name'
p65361
S'/Kernels/TimeDerivative'
p65362
sa(dp65363
S'description'
p65364
g3
sS'subblocks'
p65365
NsS'parameters'
p65366
(lp65367
(dp65368
S'description'
p65369
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65370
sS'cpp_type'
p65371
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65372
sS'default'
p65373
g3
sS'name'
p65374
S'block'
p65375
sS'required'
p65376
I00
sS'group_name'
p65377
Nsa(dp65378
S'description'
p65379
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65380
sS'cpp_type'
p65381
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65382
sS'default'
p65383
g3
sS'name'
p65384
S'control_tags'
p65385
sS'required'
p65386
I00
sS'group_name'
p65387
Nsa(dp65388
S'description'
p65389
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p65390
sS'cpp_type'
p65391
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65392
sS'default'
p65393
g3
sS'name'
p65394
S'diag_save_in'
p65395
sS'required'
p65396
I00
sS'group_name'
p65397
S'Advanced'
p65398
sa(dp65399
S'description'
p65400
S'The forcing function\n'
p65401
sS'cpp_type'
p65402
S'FunctionName'
p65403
sS'default'
p65404
g3
sS'name'
p65405
S'function'
p65406
sS'required'
p65407
I01
sS'group_name'
p65408
Nsa(dp65409
S'description'
p65410
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65411
sS'cpp_type'
p65412
S'bool'
p65413
sS'default'
p65414
S'1'
p65415
sS'name'
p65416
S'implicit'
p65417
sS'required'
p65418
I00
sS'group_name'
p65419
S'Advanced'
p65420
sa(dp65421
S'description'
p65422
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p65423
sS'cpp_type'
p65424
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p65425
sS'default'
p65426
g3
sS'name'
p65427
S'save_in'
p65428
sS'required'
p65429
I00
sS'group_name'
p65430
S'Advanced'
p65431
sa(dp65432
S'description'
p65433
S'The seed for the master random number generator\n'
p65434
sS'cpp_type'
p65435
S'unsigned int'
p65436
sS'default'
p65437
S'0'
p65438
sS'name'
p65439
S'seed'
p65440
sS'required'
p65441
I00
sS'group_name'
p65442
S'Advanced'
p65443
sa(dp65444
S'description'
p65445
g3
sS'cpp_type'
p65446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65447
sS'default'
p65448
S'UserForcingFunction'
p65449
sS'name'
p65450
S'type'
p65451
sS'required'
p65452
I00
sS'group_name'
p65453
Nsa(dp65454
S'description'
p65455
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p65456
sS'cpp_type'
p65457
S'bool'
p65458
sS'default'
p65459
S'0'
p65460
sS'name'
p65461
S'use_displaced_mesh'
p65462
sS'required'
p65463
I00
sS'group_name'
p65464
S'Advanced'
p65465
sa(dp65466
S'description'
p65467
S'The name of the variable that this Kernel operates on\n'
p65468
sS'cpp_type'
p65469
S'NonlinearVariableName'
p65470
sS'default'
p65471
g3
sS'name'
p65472
S'variable'
p65473
sS'required'
p65474
I01
sS'group_name'
p65475
NsasS'name'
p65476
S'/Kernels/UserForcingFunction'
p65477
sasS'parameters'
p65478
NsS'name'
p65479
S'/Kernels'
p65480
sa(dp65481
S'description'
p65482
g3
sS'subblocks'
p65483
(lp65484
(dp65485
S'description'
p65486
g3
sS'subblocks'
p65487
NsS'parameters'
p65488
(lp65489
(dp65490
S'description'
p65491
S'A string representing the Moose Object that will be built by this Action\n'
p65492
sS'cpp_type'
p65493
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65494
sS'default'
p65495
g3
sS'name'
p65496
S'type'
p65497
sS'required'
p65498
I01
sS'group_name'
p65499
NsasS'name'
p65500
S'/Materials/*'
p65501
sa(dp65502
S'description'
p65503
g3
sS'subblocks'
p65504
NsS'parameters'
p65505
(lp65506
(dp65507
S'description'
p65508
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p65509
sS'cpp_type'
p65510
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p65511
sS'default'
p65512
g3
sS'name'
p65513
S'active_crack_planes'
p65514
sS'required'
p65515
I00
sS'group_name'
p65516
Nsa(dp65517
S'description'
p65518
S'Name appended to material properties to make them unique\n'
p65519
sS'cpp_type'
p65520
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65521
sS'default'
p65522
g3
sS'name'
p65523
S'appended_property_name'
p65524
sS'required'
p65525
I00
sS'group_name'
p65526
Nsa(dp65527
S'description'
p65528
S'The list of block ids (SubdomainID) that this object will be applied\n'
p65529
sS'cpp_type'
p65530
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p65531
sS'default'
p65532
g3
sS'name'
p65533
S'block'
p65534
sS'required'
p65535
I00
sS'group_name'
p65536
Nsa(dp65537
S'description'
p65538
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p65539
sS'cpp_type'
p65540
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p65541
sS'default'
p65542
g3
sS'name'
p65543
S'boundary'
p65544
sS'required'
p65545
I00
sS'group_name'
p65546
Nsa(dp65547
S'description'
p65548
S'The bulk modulus for the material.\n'
p65549
sS'cpp_type'
p65550
S'double'
p65551
sS'default'
p65552
g3
sS'name'
p65553
S'bulk_modulus'
p65554
sS'required'
p65555
I00
sS'group_name'
p65556
Nsa(dp65557
S'description'
p65558
S'Whether to compute the J Integral.\n'
p65559
sS'cpp_type'
p65560
S'bool'
p65561
sS'default'
p65562
S'0'
p65563
sS'name'
p65564
S'compute_JIntegral'
p65565
sS'required'
p65566
I00
sS'group_name'
p65567
Nsa(dp65568
S'description'
p65569
S'ConstitutiveModel to use (optional)\n'
p65570
sS'cpp_type'
p65571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65572
sS'default'
p65573
g3
sS'name'
p65574
S'constitutive_model'
p65575
sS'required'
p65576
I00
sS'group_name'
p65577
Nsa(dp65578
S'description'
p65579
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p65580
sS'cpp_type'
p65581
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65582
sS'default'
p65583
g3
sS'name'
p65584
S'control_tags'
p65585
sS'required'
p65586
I00
sS'group_name'
p65587
Nsa(dp65588
S'description'
p65589
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p65590
sS'cpp_type'
p65591
S'double'
p65592
sS'default'
p65593
g3
sS'name'
p65594
S'cracking_neg_fraction'
p65595
sS'required'
p65596
I00
sS'group_name'
p65597
Nsa(dp65598
S'description'
p65599
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p65600
sS'cpp_type'
p65601
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65602
sS'default'
p65603
S'abrupt'
p65604
sS'name'
p65605
S'cracking_release'
p65606
sS'required'
p65607
I00
sS'group_name'
p65608
Nsa(dp65609
S'description'
p65610
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p65611
sS'cpp_type'
p65612
S'double'
p65613
sS'default'
p65614
S'0'
p65615
sS'name'
p65616
S'cracking_residual_stress'
p65617
sS'required'
p65618
I00
sS'group_name'
p65619
Nsa(dp65620
S'description'
p65621
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p65622
sS'cpp_type'
p65623
S'double'
p65624
sS'default'
p65625
S'0'
p65626
sS'name'
p65627
S'cracking_stress'
p65628
sS'required'
p65629
I00
sS'group_name'
p65630
Nsa(dp65631
S'description'
p65632
S'The cracking stress as a function of time and location\n'
p65633
sS'cpp_type'
p65634
S'FunctionName'
p65635
sS'default'
p65636
g3
sS'name'
p65637
S'cracking_stress_function'
p65638
sS'required'
p65639
I00
sS'group_name'
p65640
Nsa(dp65641
S'description'
p65642
S'Names of material properties this material depends on.\n'
p65643
sS'cpp_type'
p65644
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65645
sS'default'
p65646
g3
sS'name'
p65647
S'dep_matl_props'
p65648
sS'required'
p65649
I00
sS'group_name'
p65650
Nsa(dp65651
S'description'
p65652
S'The r displacement\n'
p65653
sS'cpp_type'
p65654
S'std::vector<VariableName>'
p65655
sS'default'
p65656
g3
sS'name'
p65657
S'disp_r'
p65658
sS'required'
p65659
I00
sS'group_name'
p65660
Nsa(dp65661
S'description'
p65662
S'The x displacement\n'
p65663
sS'cpp_type'
p65664
S'std::vector<VariableName>'
p65665
sS'default'
p65666
g3
sS'name'
p65667
S'disp_x'
p65668
sS'required'
p65669
I00
sS'group_name'
p65670
Nsa(dp65671
S'description'
p65672
S'The y displacement\n'
p65673
sS'cpp_type'
p65674
S'std::vector<VariableName>'
p65675
sS'default'
p65676
g3
sS'name'
p65677
S'disp_y'
p65678
sS'required'
p65679
I00
sS'group_name'
p65680
Nsa(dp65681
S'description'
p65682
S'The z displacement\n'
p65683
sS'cpp_type'
p65684
S'std::vector<VariableName>'
p65685
sS'default'
p65686
g3
sS'name'
p65687
S'disp_z'
p65688
sS'required'
p65689
I00
sS'group_name'
p65690
Nsa(dp65691
S'name'
p65692
S'formulation'
p65693
sS'cpp_type'
p65694
S'MooseEnum'
p65695
sS'default'
p65696
g3
sS'description'
p65697
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p65698
sS'required'
p65699
I00
sS'options'
p65700
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p65701
sS'group_name'
p65702
Nsa(dp65703
S'description'
p65704
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p65705
sS'cpp_type'
p65706
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65707
sS'default'
p65708
S'RashidApprox'
p65709
sS'name'
p65710
S'increment_calculation'
p65711
sS'required'
p65712
I00
sS'group_name'
p65713
Nsa(dp65714
S'description'
p65715
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p65716
sS'cpp_type'
p65717
S'std::vector<double, std::allocator<double> >'
p65718
sS'default'
p65719
g3
sS'name'
p65720
S'initial_stress'
p65721
sS'required'
p65722
I00
sS'group_name'
p65723
Nsa(dp65724
S'description'
p65725
S'The creep integration method: Explicit = 0 and Implicit = 1\n'
p65726
sS'cpp_type'
p65727
S'unsigned int'
p65728
sS'default'
p65729
g3
sS'name'
p65730
S'integration_flag'
p65731
sS'required'
p65732
I01
sS'group_name'
p65733
Nsa(dp65734
S'description'
p65735
S"Lame's first parameter for the material.\n"
p65736
sS'cpp_type'
p65737
S'double'
p65738
sS'default'
p65739
g3
sS'name'
p65740
S'lambda'
p65741
sS'required'
p65742
I00
sS'group_name'
p65743
Nsa(dp65744
S'description'
p65745
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p65746
sS'cpp_type'
p65747
S'bool'
p65748
sS'default'
p65749
S'0'
p65750
sS'name'
p65751
S'large_strain'
p65752
sS'required'
p65753
I00
sS'group_name'
p65754
Nsa(dp65755
S'description'
p65756
S'The maximum number of cracks allowed at a material point.\n'
p65757
sS'cpp_type'
p65758
S'unsigned int'
p65759
sS'default'
p65760
S'3'
p65761
sS'name'
p65762
S'max_cracks'
p65763
sS'required'
p65764
I00
sS'group_name'
p65765
Nsa(dp65766
S'description'
p65767
S'The number of state variables this CREEP routine will use\n'
p65768
sS'cpp_type'
p65769
S'double'
p65770
sS'default'
p65771
g3
sS'name'
p65772
S'num_state_vars'
p65773
sS'required'
p65774
I01
sS'group_name'
p65775
Nsa(dp65776
S'description'
p65777
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p65778
sS'cpp_type'
p65779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p65780
sS'default'
p65781
g3
sS'name'
p65782
S'output_properties'
p65783
sS'required'
p65784
I00
sS'group_name'
p65785
S'Outputs'
p65786
sa(dp65787
S'description'
p65788
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p65789
sS'cpp_type'
p65790
S'std::vector<OutputName, std::allocator<OutputName> >'
p65791
sS'default'
p65792
S'none'
p65793
sS'name'
p65794
S'outputs'
p65795
sS'required'
p65796
I00
sS'group_name'
p65797
S'Outputs'
p65798
sa(dp65799
S'description'
p65800
S'The path to the compiled dynamic library for the plugin you want to use (without -opt.plugin or -dbg.plugin)\n'
p65801
sS'cpp_type'
p65802
S'FileName'
p65803
sS'default'
p65804
g3
sS'name'
p65805
S'plugin'
p65806
sS'required'
p65807
I01
sS'group_name'
p65808
Nsa(dp65809
S'description'
p65810
S'Poissons Ratio\n'
p65811
sS'cpp_type'
p65812
S'double'
p65813
sS'default'
p65814
g3
sS'name'
p65815
S'poissons_ratio'
p65816
sS'required'
p65817
I01
sS'group_name'
p65818
Nsa(dp65819
S'description'
p65820
S"Poisson's ratio as a function of temperature.\n"
p65821
sS'cpp_type'
p65822
S'FunctionName'
p65823
sS'default'
p65824
g3
sS'name'
p65825
S'poissons_ratio_function'
p65826
sS'required'
p65827
I00
sS'group_name'
p65828
Nsa(dp65829
S'description'
p65830
S'The flag determining when the routine is called: Start of increment = 0 and End of Increment = 1\n'
p65831
sS'cpp_type'
p65832
S'unsigned int'
p65833
sS'default'
p65834
S'0'
p65835
sS'name'
p65836
S'routine_flag'
p65837
sS'required'
p65838
I00
sS'group_name'
p65839
Nsa(dp65840
S'description'
p65841
S'The zz strain (scalar variable)\n'
p65842
sS'cpp_type'
p65843
S'std::vector<VariableName>'
p65844
sS'default'
p65845
g3
sS'name'
p65846
S'scalar_strain_zz'
p65847
sS'required'
p65848
I00
sS'group_name'
p65849
Nsa(dp65850
S'description'
p65851
S'The seed for the master random number generator\n'
p65852
sS'cpp_type'
p65853
S'unsigned int'
p65854
sS'default'
p65855
S'0'
p65856
sS'name'
p65857
S'seed'
p65858
sS'required'
p65859
I00
sS'group_name'
p65860
S'Advanced'
p65861
sa(dp65862
S'description'
p65863
S'The shear modulus of the material.\n'
p65864
sS'cpp_type'
p65865
S'double'
p65866
sS'default'
p65867
g3
sS'name'
p65868
S'shear_modulus'
p65869
sS'required'
p65870
I00
sS'group_name'
p65871
Nsa(dp65872
S'description'
p65873
S'Creep/Swell Explicit/Implicit Integration Definition to use: 1 - 5\n'
p65874
sS'cpp_type'
p65875
S'unsigned int'
p65876
sS'default'
p65877
g3
sS'name'
p65878
S'solve_definition'
p65879
sS'required'
p65880
I01
sS'group_name'
p65881
Nsa(dp65882
S'description'
p65883
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p65884
sS'cpp_type'
p65885
S'bool'
p65886
sS'default'
p65887
S'0'
p65888
sS'name'
p65889
S'store_stress_older'
p65890
sS'required'
p65891
I00
sS'group_name'
p65892
Nsa(dp65893
S'description'
p65894
S'The zz strain\n'
p65895
sS'cpp_type'
p65896
S'std::vector<VariableName>'
p65897
sS'default'
p65898
g3
sS'name'
p65899
S'strain_zz'
p65900
sS'required'
p65901
I00
sS'group_name'
p65902
Nsa(dp65903
S'description'
p65904
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p65905
sS'cpp_type'
p65906
S'double'
p65907
sS'default'
p65908
g3
sS'name'
p65909
S'stress_free_temperature'
p65910
sS'required'
p65911
I00
sS'group_name'
p65912
Nsa(dp65913
S'description'
p65914
S'Coupled Temperature\n'
p65915
sS'cpp_type'
p65916
S'std::vector<VariableName>'
p65917
sS'default'
p65918
g3
sS'name'
p65919
S'temp'
p65920
sS'required'
p65921
I00
sS'group_name'
p65922
Nsa(dp65923
S'description'
p65924
S'The thermal expansion coefficient.\n'
p65925
sS'cpp_type'
p65926
S'double'
p65927
sS'default'
p65928
g3
sS'name'
p65929
S'thermal_expansion'
p65930
sS'required'
p65931
I00
sS'group_name'
p65932
Nsa(dp65933
S'description'
p65934
S'Thermal expansion coefficient as a function of temperature.\n'
p65935
sS'cpp_type'
p65936
S'FunctionName'
p65937
sS'default'
p65938
g3
sS'name'
p65939
S'thermal_expansion_function'
p65940
sS'required'
p65941
I00
sS'group_name'
p65942
Nsa(dp65943
S'name'
p65944
S'thermal_expansion_function_type'
p65945
sS'cpp_type'
p65946
S'MooseEnum'
p65947
sS'default'
p65948
g3
sS'description'
p65949
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p65950
sS'required'
p65951
I00
sS'options'
p65952
S'instantaneous mean'
p65953
sS'group_name'
p65954
Nsa(dp65955
S'description'
p65956
S'Reference temperature for mean thermal expansion function.\n'
p65957
sS'cpp_type'
p65958
S'double'
p65959
sS'default'
p65960
g3
sS'name'
p65961
S'thermal_expansion_reference_temperature'
p65962
sS'required'
p65963
I00
sS'group_name'
p65964
Nsa(dp65965
S'description'
p65966
g3
sS'cpp_type'
p65967
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p65968
sS'default'
p65969
S'AbaqusCreepMaterial'
p65970
sS'name'
p65971
S'type'
p65972
sS'required'
p65973
I00
sS'group_name'
p65974
Nsa(dp65975
S'description'
p65976
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p65977
sS'cpp_type'
p65978
S'bool'
p65979
sS'default'
p65980
S'0'
p65981
sS'name'
p65982
S'use_displaced_mesh'
p65983
sS'required'
p65984
I00
sS'group_name'
p65985
S'Advanced'
p65986
sa(dp65987
S'description'
p65988
S"Young's Modulus\n"
p65989
sS'cpp_type'
p65990
S'double'
p65991
sS'default'
p65992
g3
sS'name'
p65993
S'youngs_modulus'
p65994
sS'required'
p65995
I01
sS'group_name'
p65996
Nsa(dp65997
S'description'
p65998
S"Young's modulus as a function of temperature.\n"
p65999
sS'cpp_type'
p66000
S'FunctionName'
p66001
sS'default'
p66002
g3
sS'name'
p66003
S'youngs_modulus_function'
p66004
sS'required'
p66005
I00
sS'group_name'
p66006
NsasS'name'
p66007
S'/Materials/AbaqusCreepMaterial'
p66008
sa(dp66009
S'description'
p66010
g3
sS'subblocks'
p66011
NsS'parameters'
p66012
(lp66013
(dp66014
S'description'
p66015
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p66016
sS'cpp_type'
p66017
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p66018
sS'default'
p66019
g3
sS'name'
p66020
S'active_crack_planes'
p66021
sS'required'
p66022
I00
sS'group_name'
p66023
Nsa(dp66024
S'description'
p66025
S'Name appended to material properties to make them unique\n'
p66026
sS'cpp_type'
p66027
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66028
sS'default'
p66029
g3
sS'name'
p66030
S'appended_property_name'
p66031
sS'required'
p66032
I00
sS'group_name'
p66033
Nsa(dp66034
S'description'
p66035
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66036
sS'cpp_type'
p66037
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66038
sS'default'
p66039
g3
sS'name'
p66040
S'block'
p66041
sS'required'
p66042
I00
sS'group_name'
p66043
Nsa(dp66044
S'description'
p66045
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66046
sS'cpp_type'
p66047
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66048
sS'default'
p66049
g3
sS'name'
p66050
S'boundary'
p66051
sS'required'
p66052
I00
sS'group_name'
p66053
Nsa(dp66054
S'description'
p66055
S'The bulk modulus for the material.\n'
p66056
sS'cpp_type'
p66057
S'double'
p66058
sS'default'
p66059
g3
sS'name'
p66060
S'bulk_modulus'
p66061
sS'required'
p66062
I00
sS'group_name'
p66063
Nsa(dp66064
S'description'
p66065
S'Whether to compute the J Integral.\n'
p66066
sS'cpp_type'
p66067
S'bool'
p66068
sS'default'
p66069
S'0'
p66070
sS'name'
p66071
S'compute_JIntegral'
p66072
sS'required'
p66073
I00
sS'group_name'
p66074
Nsa(dp66075
S'description'
p66076
S'ConstitutiveModel to use (optional)\n'
p66077
sS'cpp_type'
p66078
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66079
sS'default'
p66080
g3
sS'name'
p66081
S'constitutive_model'
p66082
sS'required'
p66083
I00
sS'group_name'
p66084
Nsa(dp66085
S'description'
p66086
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66087
sS'cpp_type'
p66088
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66089
sS'default'
p66090
g3
sS'name'
p66091
S'control_tags'
p66092
sS'required'
p66093
I00
sS'group_name'
p66094
Nsa(dp66095
S'description'
p66096
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p66097
sS'cpp_type'
p66098
S'double'
p66099
sS'default'
p66100
g3
sS'name'
p66101
S'cracking_neg_fraction'
p66102
sS'required'
p66103
I00
sS'group_name'
p66104
Nsa(dp66105
S'description'
p66106
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p66107
sS'cpp_type'
p66108
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66109
sS'default'
p66110
S'abrupt'
p66111
sS'name'
p66112
S'cracking_release'
p66113
sS'required'
p66114
I00
sS'group_name'
p66115
Nsa(dp66116
S'description'
p66117
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p66118
sS'cpp_type'
p66119
S'double'
p66120
sS'default'
p66121
S'0'
p66122
sS'name'
p66123
S'cracking_residual_stress'
p66124
sS'required'
p66125
I00
sS'group_name'
p66126
Nsa(dp66127
S'description'
p66128
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p66129
sS'cpp_type'
p66130
S'double'
p66131
sS'default'
p66132
S'0'
p66133
sS'name'
p66134
S'cracking_stress'
p66135
sS'required'
p66136
I00
sS'group_name'
p66137
Nsa(dp66138
S'description'
p66139
S'The cracking stress as a function of time and location\n'
p66140
sS'cpp_type'
p66141
S'FunctionName'
p66142
sS'default'
p66143
g3
sS'name'
p66144
S'cracking_stress_function'
p66145
sS'required'
p66146
I00
sS'group_name'
p66147
Nsa(dp66148
S'description'
p66149
S'Names of material properties this material depends on.\n'
p66150
sS'cpp_type'
p66151
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66152
sS'default'
p66153
g3
sS'name'
p66154
S'dep_matl_props'
p66155
sS'required'
p66156
I00
sS'group_name'
p66157
Nsa(dp66158
S'description'
p66159
S'The r displacement\n'
p66160
sS'cpp_type'
p66161
S'std::vector<VariableName>'
p66162
sS'default'
p66163
g3
sS'name'
p66164
S'disp_r'
p66165
sS'required'
p66166
I00
sS'group_name'
p66167
Nsa(dp66168
S'description'
p66169
S'The x displacement\n'
p66170
sS'cpp_type'
p66171
S'std::vector<VariableName>'
p66172
sS'default'
p66173
g3
sS'name'
p66174
S'disp_x'
p66175
sS'required'
p66176
I00
sS'group_name'
p66177
Nsa(dp66178
S'description'
p66179
S'The y displacement\n'
p66180
sS'cpp_type'
p66181
S'std::vector<VariableName>'
p66182
sS'default'
p66183
g3
sS'name'
p66184
S'disp_y'
p66185
sS'required'
p66186
I00
sS'group_name'
p66187
Nsa(dp66188
S'description'
p66189
S'The z displacement\n'
p66190
sS'cpp_type'
p66191
S'std::vector<VariableName>'
p66192
sS'default'
p66193
g3
sS'name'
p66194
S'disp_z'
p66195
sS'required'
p66196
I00
sS'group_name'
p66197
Nsa(dp66198
S'name'
p66199
S'formulation'
p66200
sS'cpp_type'
p66201
S'MooseEnum'
p66202
sS'default'
p66203
g3
sS'description'
p66204
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p66205
sS'required'
p66206
I00
sS'options'
p66207
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p66208
sS'group_name'
p66209
Nsa(dp66210
S'description'
p66211
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p66212
sS'cpp_type'
p66213
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66214
sS'default'
p66215
S'RashidApprox'
p66216
sS'name'
p66217
S'increment_calculation'
p66218
sS'required'
p66219
I00
sS'group_name'
p66220
Nsa(dp66221
S'description'
p66222
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p66223
sS'cpp_type'
p66224
S'std::vector<double, std::allocator<double> >'
p66225
sS'default'
p66226
g3
sS'name'
p66227
S'initial_stress'
p66228
sS'required'
p66229
I00
sS'group_name'
p66230
Nsa(dp66231
S'description'
p66232
S"Lame's first parameter for the material.\n"
p66233
sS'cpp_type'
p66234
S'double'
p66235
sS'default'
p66236
g3
sS'name'
p66237
S'lambda'
p66238
sS'required'
p66239
I00
sS'group_name'
p66240
Nsa(dp66241
S'description'
p66242
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p66243
sS'cpp_type'
p66244
S'bool'
p66245
sS'default'
p66246
S'0'
p66247
sS'name'
p66248
S'large_strain'
p66249
sS'required'
p66250
I00
sS'group_name'
p66251
Nsa(dp66252
S'description'
p66253
S'The maximum number of cracks allowed at a material point.\n'
p66254
sS'cpp_type'
p66255
S'unsigned int'
p66256
sS'default'
p66257
S'3'
p66258
sS'name'
p66259
S'max_cracks'
p66260
sS'required'
p66261
I00
sS'group_name'
p66262
Nsa(dp66263
S'description'
p66264
S'Mechanical Material Properties\n'
p66265
sS'cpp_type'
p66266
S'std::vector<double, std::allocator<double> >'
p66267
sS'default'
p66268
g3
sS'name'
p66269
S'mechanical_constants'
p66270
sS'required'
p66271
I01
sS'group_name'
p66272
Nsa(dp66273
S'description'
p66274
S'The number of state variables this UMAT is going to use\n'
p66275
sS'cpp_type'
p66276
S'unsigned int'
p66277
sS'default'
p66278
g3
sS'name'
p66279
S'num_state_vars'
p66280
sS'required'
p66281
I01
sS'group_name'
p66282
Nsa(dp66283
S'description'
p66284
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66285
sS'cpp_type'
p66286
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66287
sS'default'
p66288
g3
sS'name'
p66289
S'output_properties'
p66290
sS'required'
p66291
I00
sS'group_name'
p66292
S'Outputs'
p66293
sa(dp66294
S'description'
p66295
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66296
sS'cpp_type'
p66297
S'std::vector<OutputName, std::allocator<OutputName> >'
p66298
sS'default'
p66299
S'none'
p66300
sS'name'
p66301
S'outputs'
p66302
sS'required'
p66303
I00
sS'group_name'
p66304
S'Outputs'
p66305
sa(dp66306
S'description'
p66307
S'The path to the compiled dynamic library for the plugin you want to use\n'
p66308
sS'cpp_type'
p66309
S'FileName'
p66310
sS'default'
p66311
g3
sS'name'
p66312
S'plugin'
p66313
sS'required'
p66314
I01
sS'group_name'
p66315
Nsa(dp66316
S'description'
p66317
S"Poisson's ratio for the material.\n"
p66318
sS'cpp_type'
p66319
S'double'
p66320
sS'default'
p66321
g3
sS'name'
p66322
S'poissons_ratio'
p66323
sS'required'
p66324
I00
sS'group_name'
p66325
Nsa(dp66326
S'description'
p66327
S"Poisson's ratio as a function of temperature.\n"
p66328
sS'cpp_type'
p66329
S'FunctionName'
p66330
sS'default'
p66331
g3
sS'name'
p66332
S'poissons_ratio_function'
p66333
sS'required'
p66334
I00
sS'group_name'
p66335
Nsa(dp66336
S'description'
p66337
S'The zz strain (scalar variable)\n'
p66338
sS'cpp_type'
p66339
S'std::vector<VariableName>'
p66340
sS'default'
p66341
g3
sS'name'
p66342
S'scalar_strain_zz'
p66343
sS'required'
p66344
I00
sS'group_name'
p66345
Nsa(dp66346
S'description'
p66347
S'The seed for the master random number generator\n'
p66348
sS'cpp_type'
p66349
S'unsigned int'
p66350
sS'default'
p66351
S'0'
p66352
sS'name'
p66353
S'seed'
p66354
sS'required'
p66355
I00
sS'group_name'
p66356
S'Advanced'
p66357
sa(dp66358
S'description'
p66359
S'The shear modulus of the material.\n'
p66360
sS'cpp_type'
p66361
S'double'
p66362
sS'default'
p66363
g3
sS'name'
p66364
S'shear_modulus'
p66365
sS'required'
p66366
I00
sS'group_name'
p66367
Nsa(dp66368
S'description'
p66369
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p66370
sS'cpp_type'
p66371
S'bool'
p66372
sS'default'
p66373
S'0'
p66374
sS'name'
p66375
S'store_stress_older'
p66376
sS'required'
p66377
I00
sS'group_name'
p66378
Nsa(dp66379
S'description'
p66380
S'The zz strain\n'
p66381
sS'cpp_type'
p66382
S'std::vector<VariableName>'
p66383
sS'default'
p66384
g3
sS'name'
p66385
S'strain_zz'
p66386
sS'required'
p66387
I00
sS'group_name'
p66388
Nsa(dp66389
S'description'
p66390
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p66391
sS'cpp_type'
p66392
S'double'
p66393
sS'default'
p66394
g3
sS'name'
p66395
S'stress_free_temperature'
p66396
sS'required'
p66397
I00
sS'group_name'
p66398
Nsa(dp66399
S'description'
p66400
S'Coupled Temperature\n'
p66401
sS'cpp_type'
p66402
S'std::vector<VariableName>'
p66403
sS'default'
p66404
g3
sS'name'
p66405
S'temp'
p66406
sS'required'
p66407
I00
sS'group_name'
p66408
Nsa(dp66409
S'description'
p66410
S'Thermal Material Properties\n'
p66411
sS'cpp_type'
p66412
S'std::vector<double, std::allocator<double> >'
p66413
sS'default'
p66414
g3
sS'name'
p66415
S'thermal_constants'
p66416
sS'required'
p66417
I00
sS'group_name'
p66418
Nsa(dp66419
S'description'
p66420
S'The thermal expansion coefficient.\n'
p66421
sS'cpp_type'
p66422
S'double'
p66423
sS'default'
p66424
g3
sS'name'
p66425
S'thermal_expansion'
p66426
sS'required'
p66427
I00
sS'group_name'
p66428
Nsa(dp66429
S'description'
p66430
S'Thermal expansion coefficient as a function of temperature.\n'
p66431
sS'cpp_type'
p66432
S'FunctionName'
p66433
sS'default'
p66434
g3
sS'name'
p66435
S'thermal_expansion_function'
p66436
sS'required'
p66437
I00
sS'group_name'
p66438
Nsa(dp66439
S'name'
p66440
S'thermal_expansion_function_type'
p66441
sS'cpp_type'
p66442
S'MooseEnum'
p66443
sS'default'
p66444
g3
sS'description'
p66445
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p66446
sS'required'
p66447
I00
sS'options'
p66448
S'instantaneous mean'
p66449
sS'group_name'
p66450
Nsa(dp66451
S'description'
p66452
S'Reference temperature for mean thermal expansion function.\n'
p66453
sS'cpp_type'
p66454
S'double'
p66455
sS'default'
p66456
g3
sS'name'
p66457
S'thermal_expansion_reference_temperature'
p66458
sS'required'
p66459
I00
sS'group_name'
p66460
Nsa(dp66461
S'description'
p66462
g3
sS'cpp_type'
p66463
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66464
sS'default'
p66465
S'AbaqusUmatMaterial'
p66466
sS'name'
p66467
S'type'
p66468
sS'required'
p66469
I00
sS'group_name'
p66470
Nsa(dp66471
S'description'
p66472
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p66473
sS'cpp_type'
p66474
S'bool'
p66475
sS'default'
p66476
S'0'
p66477
sS'name'
p66478
S'use_displaced_mesh'
p66479
sS'required'
p66480
I00
sS'group_name'
p66481
S'Advanced'
p66482
sa(dp66483
S'description'
p66484
S"Young's modulus of the material.\n"
p66485
sS'cpp_type'
p66486
S'double'
p66487
sS'default'
p66488
g3
sS'name'
p66489
S'youngs_modulus'
p66490
sS'required'
p66491
I00
sS'group_name'
p66492
Nsa(dp66493
S'description'
p66494
S"Young's modulus as a function of temperature.\n"
p66495
sS'cpp_type'
p66496
S'FunctionName'
p66497
sS'default'
p66498
g3
sS'name'
p66499
S'youngs_modulus_function'
p66500
sS'required'
p66501
I00
sS'group_name'
p66502
NsasS'name'
p66503
S'/Materials/AbaqusUmatMaterial'
p66504
sa(dp66505
S'description'
p66506
g3
sS'subblocks'
p66507
NsS'parameters'
p66508
(lp66509
(dp66510
S'description'
p66511
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66512
sS'cpp_type'
p66513
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66514
sS'default'
p66515
g3
sS'name'
p66516
S'block'
p66517
sS'required'
p66518
I00
sS'group_name'
p66519
Nsa(dp66520
S'description'
p66521
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66522
sS'cpp_type'
p66523
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66524
sS'default'
p66525
g3
sS'name'
p66526
S'boundary'
p66527
sS'required'
p66528
I00
sS'group_name'
p66529
Nsa(dp66530
S'description'
p66531
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66532
sS'cpp_type'
p66533
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66534
sS'default'
p66535
g3
sS'name'
p66536
S'control_tags'
p66537
sS'required'
p66538
I00
sS'group_name'
p66539
Nsa(dp66540
S'description'
p66541
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66542
sS'cpp_type'
p66543
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66544
sS'default'
p66545
g3
sS'name'
p66546
S'output_properties'
p66547
sS'required'
p66548
I00
sS'group_name'
p66549
S'Outputs'
p66550
sa(dp66551
S'description'
p66552
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66553
sS'cpp_type'
p66554
S'std::vector<OutputName, std::allocator<OutputName> >'
p66555
sS'default'
p66556
S'none'
p66557
sS'name'
p66558
S'outputs'
p66559
sS'required'
p66560
I00
sS'group_name'
p66561
S'Outputs'
p66562
sa(dp66563
S'description'
p66564
S'The seed for the master random number generator\n'
p66565
sS'cpp_type'
p66566
S'unsigned int'
p66567
sS'default'
p66568
S'0'
p66569
sS'name'
p66570
S'seed'
p66571
sS'required'
p66572
I00
sS'group_name'
p66573
S'Advanced'
p66574
sa(dp66575
S'description'
p66576
S'The specific heat value\n'
p66577
sS'cpp_type'
p66578
S'double'
p66579
sS'default'
p66580
g3
sS'name'
p66581
S'specific_heat'
p66582
sS'required'
p66583
I00
sS'group_name'
p66584
Nsa(dp66585
S'description'
p66586
S'Specific heat as a function of temperature.\n'
p66587
sS'cpp_type'
p66588
S'FunctionName'
p66589
sS'default'
p66590
g3
sS'name'
p66591
S'specific_heat_temperature_function'
p66592
sS'required'
p66593
I00
sS'group_name'
p66594
Nsa(dp66595
S'description'
p66596
S'Coupled Temperature\n'
p66597
sS'cpp_type'
p66598
S'std::vector<VariableName>'
p66599
sS'default'
p66600
g3
sS'name'
p66601
S'temp'
p66602
sS'required'
p66603
I00
sS'group_name'
p66604
Nsa(dp66605
S'description'
p66606
S'The thermal conductivity in the x direction\n'
p66607
sS'cpp_type'
p66608
S'double'
p66609
sS'default'
p66610
g3
sS'name'
p66611
S'thermal_conductivity_x'
p66612
sS'required'
p66613
I00
sS'group_name'
p66614
Nsa(dp66615
S'description'
p66616
S'The thermal conductivity PP name in the x direction\n'
p66617
sS'cpp_type'
p66618
S'PostprocessorName'
p66619
sS'default'
p66620
g3
sS'name'
p66621
S'thermal_conductivity_x_pp'
p66622
sS'required'
p66623
I00
sS'group_name'
p66624
Nsa(dp66625
S'description'
p66626
S'The thermal conductivity in the y direction\n'
p66627
sS'cpp_type'
p66628
S'double'
p66629
sS'default'
p66630
g3
sS'name'
p66631
S'thermal_conductivity_y'
p66632
sS'required'
p66633
I00
sS'group_name'
p66634
Nsa(dp66635
S'description'
p66636
S'The thermal conductivity PP name in the y direction\n'
p66637
sS'cpp_type'
p66638
S'PostprocessorName'
p66639
sS'default'
p66640
g3
sS'name'
p66641
S'thermal_conductivity_y_pp'
p66642
sS'required'
p66643
I00
sS'group_name'
p66644
Nsa(dp66645
S'description'
p66646
S'The thermal conductivity in the z direction\n'
p66647
sS'cpp_type'
p66648
S'double'
p66649
sS'default'
p66650
g3
sS'name'
p66651
S'thermal_conductivity_z'
p66652
sS'required'
p66653
I00
sS'group_name'
p66654
Nsa(dp66655
S'description'
p66656
S'The thermal conductivity PP name in the z direction\n'
p66657
sS'cpp_type'
p66658
S'PostprocessorName'
p66659
sS'default'
p66660
g3
sS'name'
p66661
S'thermal_conductivity_z_pp'
p66662
sS'required'
p66663
I00
sS'group_name'
p66664
Nsa(dp66665
S'description'
p66666
g3
sS'cpp_type'
p66667
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66668
sS'default'
p66669
S'AnisoHeatConductionMaterial'
p66670
sS'name'
p66671
S'type'
p66672
sS'required'
p66673
I00
sS'group_name'
p66674
Nsa(dp66675
S'description'
p66676
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p66677
sS'cpp_type'
p66678
S'bool'
p66679
sS'default'
p66680
S'0'
p66681
sS'name'
p66682
S'use_displaced_mesh'
p66683
sS'required'
p66684
I00
sS'group_name'
p66685
S'Advanced'
p66686
sasS'name'
p66687
S'/Materials/AnisoHeatConductionMaterial'
p66688
sa(dp66689
S'description'
p66690
S'Helper material to provide g(eta) and its derivative in a polynomial.\\nSIMPLE: eta^2*(1-eta)^2\\nLOW: eta*(1-eta)\n'
p66691
sS'subblocks'
p66692
NsS'parameters'
p66693
(lp66694
(dp66695
S'description'
p66696
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66697
sS'cpp_type'
p66698
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66699
sS'default'
p66700
g3
sS'name'
p66701
S'block'
p66702
sS'required'
p66703
I00
sS'group_name'
p66704
Nsa(dp66705
S'description'
p66706
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66707
sS'cpp_type'
p66708
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66709
sS'default'
p66710
g3
sS'name'
p66711
S'boundary'
p66712
sS'required'
p66713
I00
sS'group_name'
p66714
Nsa(dp66715
S'description'
p66716
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66717
sS'cpp_type'
p66718
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66719
sS'default'
p66720
g3
sS'name'
p66721
S'control_tags'
p66722
sS'required'
p66723
I00
sS'group_name'
p66724
Nsa(dp66725
S'description'
p66726
S'Order parameter variable\n'
p66727
sS'cpp_type'
p66728
S'std::vector<VariableName>'
p66729
sS'default'
p66730
g3
sS'name'
p66731
S'eta'
p66732
sS'required'
p66733
I00
sS'group_name'
p66734
Nsa(dp66735
S'description'
p66736
S"actual name for f(eta), i.e. 'h' or 'g'\n"
p66737
sS'cpp_type'
p66738
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66739
sS'default'
p66740
S'g'
p66741
sS'name'
p66742
S'function_name'
p66743
sS'required'
p66744
I00
sS'group_name'
p66745
Nsa(dp66746
S'name'
p66747
S'g_order'
p66748
sS'cpp_type'
p66749
S'MooseEnum'
p66750
sS'default'
p66751
S'SIMPLE'
p66752
sS'description'
p66753
S'Polynomial order of the barrier function g(eta)\n'
p66754
sS'required'
p66755
I00
sS'options'
p66756
S'SIMPLE LOW'
p66757
sS'group_name'
p66758
Nsa(dp66759
S'description'
p66760
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p66761
sS'cpp_type'
p66762
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66763
sS'default'
p66764
g3
sS'name'
p66765
S'output_properties'
p66766
sS'required'
p66767
I00
sS'group_name'
p66768
S'Outputs'
p66769
sa(dp66770
S'description'
p66771
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p66772
sS'cpp_type'
p66773
S'std::vector<OutputName, std::allocator<OutputName> >'
p66774
sS'default'
p66775
S'none'
p66776
sS'name'
p66777
S'outputs'
p66778
sS'required'
p66779
I00
sS'group_name'
p66780
S'Outputs'
p66781
sa(dp66782
S'description'
p66783
S'The seed for the master random number generator\n'
p66784
sS'cpp_type'
p66785
S'unsigned int'
p66786
sS'default'
p66787
S'0'
p66788
sS'name'
p66789
S'seed'
p66790
sS'required'
p66791
I00
sS'group_name'
p66792
S'Advanced'
p66793
sa(dp66794
S'description'
p66795
g3
sS'cpp_type'
p66796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66797
sS'default'
p66798
S'BarrierFunctionMaterial'
p66799
sS'name'
p66800
S'type'
p66801
sS'required'
p66802
I00
sS'group_name'
p66803
Nsa(dp66804
S'description'
p66805
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p66806
sS'cpp_type'
p66807
S'bool'
p66808
sS'default'
p66809
S'0'
p66810
sS'name'
p66811
S'use_displaced_mesh'
p66812
sS'required'
p66813
I00
sS'group_name'
p66814
S'Advanced'
p66815
sa(dp66816
S'description'
p66817
S'Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n'
p66818
sS'cpp_type'
p66819
S'bool'
p66820
sS'default'
p66821
S'0'
p66822
sS'name'
p66823
S'well_only'
p66824
sS'required'
p66825
I00
sS'group_name'
p66826
NsasS'name'
p66827
S'/Materials/BarrierFunctionMaterial'
p66828
sa(dp66829
S'description'
p66830
g3
sS'subblocks'
p66831
NsS'parameters'
p66832
(lp66833
(dp66834
S'description'
p66835
S'Absolute convergence tolerance for sub-newtion iteration\n'
p66836
sS'cpp_type'
p66837
S'double'
p66838
sS'default'
p66839
S'1e-20'
p66840
sS'name'
p66841
S'absolute_tolerance'
p66842
sS'required'
p66843
I00
sS'group_name'
p66844
Nsa(dp66845
S'description'
p66846
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p66847
sS'cpp_type'
p66848
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p66849
sS'default'
p66850
g3
sS'name'
p66851
S'active_crack_planes'
p66852
sS'required'
p66853
I00
sS'group_name'
p66854
Nsa(dp66855
S'description'
p66856
S'Name appended to material properties to make them unique\n'
p66857
sS'cpp_type'
p66858
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66859
sS'default'
p66860
g3
sS'name'
p66861
S'appended_property_name'
p66862
sS'required'
p66863
I00
sS'group_name'
p66864
Nsa(dp66865
S'description'
p66866
S'The list of block ids (SubdomainID) that this object will be applied\n'
p66867
sS'cpp_type'
p66868
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p66869
sS'default'
p66870
g3
sS'name'
p66871
S'block'
p66872
sS'required'
p66873
I00
sS'group_name'
p66874
Nsa(dp66875
S'description'
p66876
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p66877
sS'cpp_type'
p66878
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p66879
sS'default'
p66880
g3
sS'name'
p66881
S'boundary'
p66882
sS'required'
p66883
I00
sS'group_name'
p66884
Nsa(dp66885
S'description'
p66886
S'The bulk modulus for the material.\n'
p66887
sS'cpp_type'
p66888
S'double'
p66889
sS'default'
p66890
g3
sS'name'
p66891
S'bulk_modulus'
p66892
sS'required'
p66893
I00
sS'group_name'
p66894
Nsa(dp66895
S'description'
p66896
S'creep constant\n'
p66897
sS'cpp_type'
p66898
S'double'
p66899
sS'default'
p66900
g3
sS'name'
p66901
S'c_alpha'
p66902
sS'required'
p66903
I01
sS'group_name'
p66904
Nsa(dp66905
S'description'
p66906
S'creep constant\n'
p66907
sS'cpp_type'
p66908
S'double'
p66909
sS'default'
p66910
g3
sS'name'
p66911
S'c_beta'
p66912
sS'required'
p66913
I01
sS'group_name'
p66914
Nsa(dp66915
S'description'
p66916
S'Whether to compute the J Integral.\n'
p66917
sS'cpp_type'
p66918
S'bool'
p66919
sS'default'
p66920
S'0'
p66921
sS'name'
p66922
S'compute_JIntegral'
p66923
sS'required'
p66924
I00
sS'group_name'
p66925
Nsa(dp66926
S'description'
p66927
S'ConstitutiveModel to use (optional)\n'
p66928
sS'cpp_type'
p66929
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66930
sS'default'
p66931
g3
sS'name'
p66932
S'constitutive_model'
p66933
sS'required'
p66934
I00
sS'group_name'
p66935
Nsa(dp66936
S'description'
p66937
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p66938
sS'cpp_type'
p66939
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p66940
sS'default'
p66941
g3
sS'name'
p66942
S'control_tags'
p66943
sS'required'
p66944
I00
sS'group_name'
p66945
Nsa(dp66946
S'description'
p66947
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p66948
sS'cpp_type'
p66949
S'double'
p66950
sS'default'
p66951
g3
sS'name'
p66952
S'cracking_neg_fraction'
p66953
sS'required'
p66954
I00
sS'group_name'
p66955
Nsa(dp66956
S'description'
p66957
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p66958
sS'cpp_type'
p66959
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p66960
sS'default'
p66961
S'abrupt'
p66962
sS'name'
p66963
S'cracking_release'
p66964
sS'required'
p66965
I00
sS'group_name'
p66966
Nsa(dp66967
S'description'
p66968
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p66969
sS'cpp_type'
p66970
S'double'
p66971
sS'default'
p66972
S'0'
p66973
sS'name'
p66974
S'cracking_residual_stress'
p66975
sS'required'
p66976
I00
sS'group_name'
p66977
Nsa(dp66978
S'description'
p66979
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p66980
sS'cpp_type'
p66981
S'double'
p66982
sS'default'
p66983
S'0'
p66984
sS'name'
p66985
S'cracking_stress'
p66986
sS'required'
p66987
I00
sS'group_name'
p66988
Nsa(dp66989
S'description'
p66990
S'The cracking stress as a function of time and location\n'
p66991
sS'cpp_type'
p66992
S'FunctionName'
p66993
sS'default'
p66994
g3
sS'name'
p66995
S'cracking_stress_function'
p66996
sS'required'
p66997
I00
sS'group_name'
p66998
Nsa(dp66999
S'description'
p67000
S'Names of material properties this material depends on.\n'
p67001
sS'cpp_type'
p67002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67003
sS'default'
p67004
g3
sS'name'
p67005
S'dep_matl_props'
p67006
sS'required'
p67007
I00
sS'group_name'
p67008
Nsa(dp67009
S'description'
p67010
S'The r displacement\n'
p67011
sS'cpp_type'
p67012
S'std::vector<VariableName>'
p67013
sS'default'
p67014
g3
sS'name'
p67015
S'disp_r'
p67016
sS'required'
p67017
I00
sS'group_name'
p67018
Nsa(dp67019
S'description'
p67020
S'The x displacement\n'
p67021
sS'cpp_type'
p67022
S'std::vector<VariableName>'
p67023
sS'default'
p67024
g3
sS'name'
p67025
S'disp_x'
p67026
sS'required'
p67027
I00
sS'group_name'
p67028
Nsa(dp67029
S'description'
p67030
S'The y displacement\n'
p67031
sS'cpp_type'
p67032
S'std::vector<VariableName>'
p67033
sS'default'
p67034
g3
sS'name'
p67035
S'disp_y'
p67036
sS'required'
p67037
I00
sS'group_name'
p67038
Nsa(dp67039
S'description'
p67040
S'The z displacement\n'
p67041
sS'cpp_type'
p67042
S'std::vector<VariableName>'
p67043
sS'default'
p67044
g3
sS'name'
p67045
S'disp_z'
p67046
sS'required'
p67047
I00
sS'group_name'
p67048
Nsa(dp67049
S'name'
p67050
S'formulation'
p67051
sS'cpp_type'
p67052
S'MooseEnum'
p67053
sS'default'
p67054
g3
sS'description'
p67055
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p67056
sS'required'
p67057
I00
sS'options'
p67058
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p67059
sS'group_name'
p67060
Nsa(dp67061
S'description'
p67062
S'Hardening slope\n'
p67063
sS'cpp_type'
p67064
S'double'
p67065
sS'default'
p67066
g3
sS'name'
p67067
S'hardening_constant'
p67068
sS'required'
p67069
I01
sS'group_name'
p67070
Nsa(dp67071
S'description'
p67072
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p67073
sS'cpp_type'
p67074
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67075
sS'default'
p67076
S'RashidApprox'
p67077
sS'name'
p67078
S'increment_calculation'
p67079
sS'required'
p67080
I00
sS'group_name'
p67081
Nsa(dp67082
S'description'
p67083
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p67084
sS'cpp_type'
p67085
S'std::vector<double, std::allocator<double> >'
p67086
sS'default'
p67087
g3
sS'name'
p67088
S'initial_stress'
p67089
sS'required'
p67090
I00
sS'group_name'
p67091
Nsa(dp67092
S'description'
p67093
S"Lame's first parameter for the material.\n"
p67094
sS'cpp_type'
p67095
S'double'
p67096
sS'default'
p67097
g3
sS'name'
p67098
S'lambda'
p67099
sS'required'
p67100
I00
sS'group_name'
p67101
Nsa(dp67102
S'description'
p67103
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p67104
sS'cpp_type'
p67105
S'bool'
p67106
sS'default'
p67107
S'0'
p67108
sS'name'
p67109
S'large_strain'
p67110
sS'required'
p67111
I00
sS'group_name'
p67112
Nsa(dp67113
S'description'
p67114
S'The maximum number of cracks allowed at a material point.\n'
p67115
sS'cpp_type'
p67116
S'unsigned int'
p67117
sS'default'
p67118
S'3'
p67119
sS'name'
p67120
S'max_cracks'
p67121
sS'required'
p67122
I00
sS'group_name'
p67123
Nsa(dp67124
S'description'
p67125
S'Maximum number of sub-newton iterations\n'
p67126
sS'cpp_type'
p67127
S'unsigned int'
p67128
sS'default'
p67129
S'30'
p67130
sS'name'
p67131
S'max_its'
p67132
sS'required'
p67133
I00
sS'group_name'
p67134
Nsa(dp67135
S'description'
p67136
S'Set true to output sub-newton iteration information\n'
p67137
sS'cpp_type'
p67138
S'bool'
p67139
sS'default'
p67140
S'0'
p67141
sS'name'
p67142
S'output_iteration_info'
p67143
sS'required'
p67144
I00
sS'group_name'
p67145
Nsa(dp67146
S'description'
p67147
S'Set true to output sub-newton iteration information when a step fails\n'
p67148
sS'cpp_type'
p67149
S'bool'
p67150
sS'default'
p67151
S'0'
p67152
sS'name'
p67153
S'output_iteration_info_on_error'
p67154
sS'required'
p67155
I00
sS'group_name'
p67156
Nsa(dp67157
S'description'
p67158
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67159
sS'cpp_type'
p67160
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67161
sS'default'
p67162
g3
sS'name'
p67163
S'output_properties'
p67164
sS'required'
p67165
I00
sS'group_name'
p67166
S'Outputs'
p67167
sa(dp67168
S'description'
p67169
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67170
sS'cpp_type'
p67171
S'std::vector<OutputName, std::allocator<OutputName> >'
p67172
sS'default'
p67173
S'none'
p67174
sS'name'
p67175
S'outputs'
p67176
sS'required'
p67177
I00
sS'group_name'
p67178
S'Outputs'
p67179
sa(dp67180
S'description'
p67181
S"Poisson's ratio for the material.\n"
p67182
sS'cpp_type'
p67183
S'double'
p67184
sS'default'
p67185
g3
sS'name'
p67186
S'poissons_ratio'
p67187
sS'required'
p67188
I00
sS'group_name'
p67189
Nsa(dp67190
S'description'
p67191
S"Poisson's ratio as a function of temperature.\n"
p67192
sS'cpp_type'
p67193
S'FunctionName'
p67194
sS'default'
p67195
g3
sS'name'
p67196
S'poissons_ratio_function'
p67197
sS'required'
p67198
I00
sS'group_name'
p67199
Nsa(dp67200
S'description'
p67201
S'Relative convergence tolerance for sub-newtion iteration\n'
p67202
sS'cpp_type'
p67203
S'double'
p67204
sS'default'
p67205
S'1e-05'
p67206
sS'name'
p67207
S'relative_tolerance'
p67208
sS'required'
p67209
I00
sS'group_name'
p67210
Nsa(dp67211
S'description'
p67212
S'The zz strain (scalar variable)\n'
p67213
sS'cpp_type'
p67214
S'std::vector<VariableName>'
p67215
sS'default'
p67216
g3
sS'name'
p67217
S'scalar_strain_zz'
p67218
sS'required'
p67219
I00
sS'group_name'
p67220
Nsa(dp67221
S'description'
p67222
S'The seed for the master random number generator\n'
p67223
sS'cpp_type'
p67224
S'unsigned int'
p67225
sS'default'
p67226
S'0'
p67227
sS'name'
p67228
S'seed'
p67229
sS'required'
p67230
I00
sS'group_name'
p67231
S'Advanced'
p67232
sa(dp67233
S'description'
p67234
S'The shear modulus of the material.\n'
p67235
sS'cpp_type'
p67236
S'double'
p67237
sS'default'
p67238
g3
sS'name'
p67239
S'shear_modulus'
p67240
sS'required'
p67241
I00
sS'group_name'
p67242
Nsa(dp67243
S'description'
p67244
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p67245
sS'cpp_type'
p67246
S'bool'
p67247
sS'default'
p67248
S'0'
p67249
sS'name'
p67250
S'store_stress_older'
p67251
sS'required'
p67252
I00
sS'group_name'
p67253
Nsa(dp67254
S'description'
p67255
S'The zz strain\n'
p67256
sS'cpp_type'
p67257
S'std::vector<VariableName>'
p67258
sS'default'
p67259
g3
sS'name'
p67260
S'strain_zz'
p67261
sS'required'
p67262
I00
sS'group_name'
p67263
Nsa(dp67264
S'description'
p67265
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p67266
sS'cpp_type'
p67267
S'double'
p67268
sS'default'
p67269
g3
sS'name'
p67270
S'stress_free_temperature'
p67271
sS'required'
p67272
I00
sS'group_name'
p67273
Nsa(dp67274
S'description'
p67275
S'Coupled Temperature\n'
p67276
sS'cpp_type'
p67277
S'std::vector<VariableName>'
p67278
sS'default'
p67279
g3
sS'name'
p67280
S'temp'
p67281
sS'required'
p67282
I00
sS'group_name'
p67283
Nsa(dp67284
S'description'
p67285
S'The thermal expansion coefficient.\n'
p67286
sS'cpp_type'
p67287
S'double'
p67288
sS'default'
p67289
g3
sS'name'
p67290
S'thermal_expansion'
p67291
sS'required'
p67292
I00
sS'group_name'
p67293
Nsa(dp67294
S'description'
p67295
S'Thermal expansion coefficient as a function of temperature.\n'
p67296
sS'cpp_type'
p67297
S'FunctionName'
p67298
sS'default'
p67299
g3
sS'name'
p67300
S'thermal_expansion_function'
p67301
sS'required'
p67302
I00
sS'group_name'
p67303
Nsa(dp67304
S'name'
p67305
S'thermal_expansion_function_type'
p67306
sS'cpp_type'
p67307
S'MooseEnum'
p67308
sS'default'
p67309
g3
sS'description'
p67310
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p67311
sS'required'
p67312
I00
sS'options'
p67313
S'instantaneous mean'
p67314
sS'group_name'
p67315
Nsa(dp67316
S'description'
p67317
S'Reference temperature for mean thermal expansion function.\n'
p67318
sS'cpp_type'
p67319
S'double'
p67320
sS'default'
p67321
g3
sS'name'
p67322
S'thermal_expansion_reference_temperature'
p67323
sS'required'
p67324
I00
sS'group_name'
p67325
Nsa(dp67326
S'description'
p67327
g3
sS'cpp_type'
p67328
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67329
sS'default'
p67330
S'CLSHPlasticMaterial'
p67331
sS'name'
p67332
S'type'
p67333
sS'required'
p67334
I00
sS'group_name'
p67335
Nsa(dp67336
S'description'
p67337
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p67338
sS'cpp_type'
p67339
S'bool'
p67340
sS'default'
p67341
S'0'
p67342
sS'name'
p67343
S'use_displaced_mesh'
p67344
sS'required'
p67345
I00
sS'group_name'
p67346
S'Advanced'
p67347
sa(dp67348
S'description'
p67349
S'The point at which plastic strain begins accumulating\n'
p67350
sS'cpp_type'
p67351
S'double'
p67352
sS'default'
p67353
g3
sS'name'
p67354
S'yield_stress'
p67355
sS'required'
p67356
I01
sS'group_name'
p67357
Nsa(dp67358
S'description'
p67359
S"Young's modulus of the material.\n"
p67360
sS'cpp_type'
p67361
S'double'
p67362
sS'default'
p67363
g3
sS'name'
p67364
S'youngs_modulus'
p67365
sS'required'
p67366
I00
sS'group_name'
p67367
Nsa(dp67368
S'description'
p67369
S"Young's modulus as a function of temperature.\n"
p67370
sS'cpp_type'
p67371
S'FunctionName'
p67372
sS'default'
p67373
g3
sS'name'
p67374
S'youngs_modulus_function'
p67375
sS'required'
p67376
I00
sS'group_name'
p67377
NsasS'name'
p67378
S'/Materials/CLSHPlasticMaterial'
p67379
sa(dp67380
S'description'
p67381
g3
sS'subblocks'
p67382
NsS'parameters'
p67383
(lp67384
(dp67385
S'description'
p67386
S'Absolute convergence tolerance for sub-newtion iteration\n'
p67387
sS'cpp_type'
p67388
S'double'
p67389
sS'default'
p67390
S'1e-20'
p67391
sS'name'
p67392
S'absolute_tolerance'
p67393
sS'required'
p67394
I00
sS'group_name'
p67395
Nsa(dp67396
S'description'
p67397
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67398
sS'cpp_type'
p67399
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67400
sS'default'
p67401
g3
sS'name'
p67402
S'block'
p67403
sS'required'
p67404
I00
sS'group_name'
p67405
Nsa(dp67406
S'description'
p67407
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67408
sS'cpp_type'
p67409
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67410
sS'default'
p67411
g3
sS'name'
p67412
S'boundary'
p67413
sS'required'
p67414
I00
sS'group_name'
p67415
Nsa(dp67416
S'description'
p67417
S'creep constant\n'
p67418
sS'cpp_type'
p67419
S'double'
p67420
sS'default'
p67421
g3
sS'name'
p67422
S'c_alpha'
p67423
sS'required'
p67424
I01
sS'group_name'
p67425
Nsa(dp67426
S'description'
p67427
S'creep constant\n'
p67428
sS'cpp_type'
p67429
S'double'
p67430
sS'default'
p67431
g3
sS'name'
p67432
S'c_beta'
p67433
sS'required'
p67434
I01
sS'group_name'
p67435
Nsa(dp67436
S'description'
p67437
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67438
sS'cpp_type'
p67439
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67440
sS'default'
p67441
g3
sS'name'
p67442
S'control_tags'
p67443
sS'required'
p67444
I00
sS'group_name'
p67445
Nsa(dp67446
S'description'
p67447
S'Hardening slope\n'
p67448
sS'cpp_type'
p67449
S'double'
p67450
sS'default'
p67451
g3
sS'name'
p67452
S'hardening_constant'
p67453
sS'required'
p67454
I01
sS'group_name'
p67455
Nsa(dp67456
S'description'
p67457
S'Maximum number of sub-newton iterations\n'
p67458
sS'cpp_type'
p67459
S'unsigned int'
p67460
sS'default'
p67461
S'30'
p67462
sS'name'
p67463
S'max_its'
p67464
sS'required'
p67465
I00
sS'group_name'
p67466
Nsa(dp67467
S'description'
p67468
S'Set true to output sub-newton iteration information\n'
p67469
sS'cpp_type'
p67470
S'bool'
p67471
sS'default'
p67472
S'0'
p67473
sS'name'
p67474
S'output_iteration_info'
p67475
sS'required'
p67476
I00
sS'group_name'
p67477
Nsa(dp67478
S'description'
p67479
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67480
sS'cpp_type'
p67481
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67482
sS'default'
p67483
g3
sS'name'
p67484
S'output_properties'
p67485
sS'required'
p67486
I00
sS'group_name'
p67487
S'Outputs'
p67488
sa(dp67489
S'description'
p67490
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67491
sS'cpp_type'
p67492
S'std::vector<OutputName, std::allocator<OutputName> >'
p67493
sS'default'
p67494
S'none'
p67495
sS'name'
p67496
S'outputs'
p67497
sS'required'
p67498
I00
sS'group_name'
p67499
S'Outputs'
p67500
sa(dp67501
S'description'
p67502
S'Relative convergence tolerance for sub-newtion iteration\n'
p67503
sS'cpp_type'
p67504
S'double'
p67505
sS'default'
p67506
S'1e-05'
p67507
sS'name'
p67508
S'relative_tolerance'
p67509
sS'required'
p67510
I00
sS'group_name'
p67511
Nsa(dp67512
S'description'
p67513
S'The seed for the master random number generator\n'
p67514
sS'cpp_type'
p67515
S'unsigned int'
p67516
sS'default'
p67517
S'0'
p67518
sS'name'
p67519
S'seed'
p67520
sS'required'
p67521
I00
sS'group_name'
p67522
S'Advanced'
p67523
sa(dp67524
S'description'
p67525
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p67526
sS'cpp_type'
p67527
S'double'
p67528
sS'default'
p67529
g3
sS'name'
p67530
S'stress_free_temperature'
p67531
sS'required'
p67532
I00
sS'group_name'
p67533
Nsa(dp67534
S'description'
p67535
S'Coupled Temperature\n'
p67536
sS'cpp_type'
p67537
S'std::vector<VariableName>'
p67538
sS'default'
p67539
g3
sS'name'
p67540
S'temp'
p67541
sS'required'
p67542
I00
sS'group_name'
p67543
Nsa(dp67544
S'description'
p67545
S'The thermal expansion coefficient.\n'
p67546
sS'cpp_type'
p67547
S'double'
p67548
sS'default'
p67549
g3
sS'name'
p67550
S'thermal_expansion'
p67551
sS'required'
p67552
I00
sS'group_name'
p67553
Nsa(dp67554
S'description'
p67555
S'Thermal expansion coefficient as a function of temperature.\n'
p67556
sS'cpp_type'
p67557
S'FunctionName'
p67558
sS'default'
p67559
g3
sS'name'
p67560
S'thermal_expansion_function'
p67561
sS'required'
p67562
I00
sS'group_name'
p67563
Nsa(dp67564
S'name'
p67565
S'thermal_expansion_function_type'
p67566
sS'cpp_type'
p67567
S'MooseEnum'
p67568
sS'default'
p67569
g3
sS'description'
p67570
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p67571
sS'required'
p67572
I00
sS'options'
p67573
S'instantaneous mean'
p67574
sS'group_name'
p67575
Nsa(dp67576
S'description'
p67577
S'Reference temperature for mean thermal expansion function.\n'
p67578
sS'cpp_type'
p67579
S'double'
p67580
sS'default'
p67581
g3
sS'name'
p67582
S'thermal_expansion_reference_temperature'
p67583
sS'required'
p67584
I00
sS'group_name'
p67585
Nsa(dp67586
S'description'
p67587
g3
sS'cpp_type'
p67588
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67589
sS'default'
p67590
S'CLSHPlasticModel'
p67591
sS'name'
p67592
S'type'
p67593
sS'required'
p67594
I00
sS'group_name'
p67595
Nsa(dp67596
S'description'
p67597
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p67598
sS'cpp_type'
p67599
S'bool'
p67600
sS'default'
p67601
S'0'
p67602
sS'name'
p67603
S'use_displaced_mesh'
p67604
sS'required'
p67605
I00
sS'group_name'
p67606
S'Advanced'
p67607
sa(dp67608
S'description'
p67609
S'The point at which plastic strain begins accumulating\n'
p67610
sS'cpp_type'
p67611
S'double'
p67612
sS'default'
p67613
g3
sS'name'
p67614
S'yield_stress'
p67615
sS'required'
p67616
I01
sS'group_name'
p67617
NsasS'name'
p67618
S'/Materials/CLSHPlasticModel'
p67619
sa(dp67620
S'description'
p67621
g3
sS'subblocks'
p67622
NsS'parameters'
p67623
(lp67624
(dp67625
S'description'
p67626
S'Absolute convergence tolerance for combined submodel iteration\n'
p67627
sS'cpp_type'
p67628
S'double'
p67629
sS'default'
p67630
S'1e-05'
p67631
sS'name'
p67632
S'absolute_tolerance'
p67633
sS'required'
p67634
I00
sS'group_name'
p67635
Nsa(dp67636
S'description'
p67637
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67638
sS'cpp_type'
p67639
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67640
sS'default'
p67641
g3
sS'name'
p67642
S'block'
p67643
sS'required'
p67644
I00
sS'group_name'
p67645
Nsa(dp67646
S'description'
p67647
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67648
sS'cpp_type'
p67649
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67650
sS'default'
p67651
g3
sS'name'
p67652
S'boundary'
p67653
sS'required'
p67654
I00
sS'group_name'
p67655
Nsa(dp67656
S'description'
p67657
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67658
sS'cpp_type'
p67659
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67660
sS'default'
p67661
g3
sS'name'
p67662
S'control_tags'
p67663
sS'required'
p67664
I00
sS'group_name'
p67665
Nsa(dp67666
S'description'
p67667
S'Maximum number of submodel iterations\n'
p67668
sS'cpp_type'
p67669
S'unsigned int'
p67670
sS'default'
p67671
S'30'
p67672
sS'name'
p67673
S'max_its'
p67674
sS'required'
p67675
I00
sS'group_name'
p67676
Nsa(dp67677
S'description'
p67678
S'Set true to output submodel iteration information\n'
p67679
sS'cpp_type'
p67680
S'bool'
p67681
sS'default'
p67682
S'0'
p67683
sS'name'
p67684
S'output_iteration_info'
p67685
sS'required'
p67686
I00
sS'group_name'
p67687
Nsa(dp67688
S'description'
p67689
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67690
sS'cpp_type'
p67691
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67692
sS'default'
p67693
g3
sS'name'
p67694
S'output_properties'
p67695
sS'required'
p67696
I00
sS'group_name'
p67697
S'Outputs'
p67698
sa(dp67699
S'description'
p67700
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67701
sS'cpp_type'
p67702
S'std::vector<OutputName, std::allocator<OutputName> >'
p67703
sS'default'
p67704
S'none'
p67705
sS'name'
p67706
S'outputs'
p67707
sS'required'
p67708
I00
sS'group_name'
p67709
S'Outputs'
p67710
sa(dp67711
S'description'
p67712
S'Relative convergence tolerance for combined submodel iteration\n'
p67713
sS'cpp_type'
p67714
S'double'
p67715
sS'default'
p67716
S'1e-05'
p67717
sS'name'
p67718
S'relative_tolerance'
p67719
sS'required'
p67720
I00
sS'group_name'
p67721
Nsa(dp67722
S'description'
p67723
S'The seed for the master random number generator\n'
p67724
sS'cpp_type'
p67725
S'unsigned int'
p67726
sS'default'
p67727
S'0'
p67728
sS'name'
p67729
S'seed'
p67730
sS'required'
p67731
I00
sS'group_name'
p67732
S'Advanced'
p67733
sa(dp67734
S'description'
p67735
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p67736
sS'cpp_type'
p67737
S'double'
p67738
sS'default'
p67739
g3
sS'name'
p67740
S'stress_free_temperature'
p67741
sS'required'
p67742
I00
sS'group_name'
p67743
Nsa(dp67744
S'description'
p67745
S'List of submodel ConstitutiveModels\n'
p67746
sS'cpp_type'
p67747
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67748
sS'default'
p67749
g3
sS'name'
p67750
S'submodels'
p67751
sS'required'
p67752
I01
sS'group_name'
p67753
Nsa(dp67754
S'description'
p67755
S'Coupled Temperature\n'
p67756
sS'cpp_type'
p67757
S'std::vector<VariableName>'
p67758
sS'default'
p67759
g3
sS'name'
p67760
S'temp'
p67761
sS'required'
p67762
I00
sS'group_name'
p67763
Nsa(dp67764
S'description'
p67765
S'The thermal expansion coefficient.\n'
p67766
sS'cpp_type'
p67767
S'double'
p67768
sS'default'
p67769
g3
sS'name'
p67770
S'thermal_expansion'
p67771
sS'required'
p67772
I00
sS'group_name'
p67773
Nsa(dp67774
S'description'
p67775
S'Thermal expansion coefficient as a function of temperature.\n'
p67776
sS'cpp_type'
p67777
S'FunctionName'
p67778
sS'default'
p67779
g3
sS'name'
p67780
S'thermal_expansion_function'
p67781
sS'required'
p67782
I00
sS'group_name'
p67783
Nsa(dp67784
S'name'
p67785
S'thermal_expansion_function_type'
p67786
sS'cpp_type'
p67787
S'MooseEnum'
p67788
sS'default'
p67789
g3
sS'description'
p67790
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p67791
sS'required'
p67792
I00
sS'options'
p67793
S'instantaneous mean'
p67794
sS'group_name'
p67795
Nsa(dp67796
S'description'
p67797
S'Reference temperature for mean thermal expansion function.\n'
p67798
sS'cpp_type'
p67799
S'double'
p67800
sS'default'
p67801
g3
sS'name'
p67802
S'thermal_expansion_reference_temperature'
p67803
sS'required'
p67804
I00
sS'group_name'
p67805
Nsa(dp67806
S'description'
p67807
g3
sS'cpp_type'
p67808
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67809
sS'default'
p67810
S'CombinedCreepPlasticity'
p67811
sS'name'
p67812
S'type'
p67813
sS'required'
p67814
I00
sS'group_name'
p67815
Nsa(dp67816
S'description'
p67817
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p67818
sS'cpp_type'
p67819
S'bool'
p67820
sS'default'
p67821
S'0'
p67822
sS'name'
p67823
S'use_displaced_mesh'
p67824
sS'required'
p67825
I00
sS'group_name'
p67826
S'Advanced'
p67827
sasS'name'
p67828
S'/Materials/CombinedCreepPlasticity'
p67829
sa(dp67830
S'description'
p67831
S'Assemble an elasticity tensor from multiple tensor contributions weighted by material properties\n'
p67832
sS'subblocks'
p67833
NsS'parameters'
p67834
(lp67835
(dp67836
S'description'
p67837
S'variable dependencies for the prefactor\n'
p67838
sS'cpp_type'
p67839
S'std::vector<VariableName>'
p67840
sS'default'
p67841
g3
sS'name'
p67842
S'args'
p67843
sS'required'
p67844
I01
sS'group_name'
p67845
Nsa(dp67846
S'description'
p67847
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p67848
sS'cpp_type'
p67849
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67850
sS'default'
p67851
g3
sS'name'
p67852
S'base_name'
p67853
sS'required'
p67854
I00
sS'group_name'
p67855
Nsa(dp67856
S'description'
p67857
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67858
sS'cpp_type'
p67859
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67860
sS'default'
p67861
g3
sS'name'
p67862
S'block'
p67863
sS'required'
p67864
I00
sS'group_name'
p67865
Nsa(dp67866
S'description'
p67867
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p67868
sS'cpp_type'
p67869
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p67870
sS'default'
p67871
g3
sS'name'
p67872
S'boundary'
p67873
sS'required'
p67874
I00
sS'group_name'
p67875
Nsa(dp67876
S'description'
p67877
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p67878
sS'cpp_type'
p67879
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67880
sS'default'
p67881
g3
sS'name'
p67882
S'control_tags'
p67883
sS'required'
p67884
I00
sS'group_name'
p67885
Nsa(dp67886
S'description'
p67887
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p67888
sS'cpp_type'
p67889
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p67890
sS'default'
p67891
g3
sS'name'
p67892
S'output_properties'
p67893
sS'required'
p67894
I00
sS'group_name'
p67895
S'Outputs'
p67896
sa(dp67897
S'description'
p67898
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p67899
sS'cpp_type'
p67900
S'std::vector<OutputName, std::allocator<OutputName> >'
p67901
sS'default'
p67902
S'none'
p67903
sS'name'
p67904
S'outputs'
p67905
sS'required'
p67906
I00
sS'group_name'
p67907
S'Outputs'
p67908
sa(dp67909
S'description'
p67910
S'The seed for the master random number generator\n'
p67911
sS'cpp_type'
p67912
S'unsigned int'
p67913
sS'default'
p67914
S'0'
p67915
sS'name'
p67916
S'seed'
p67917
sS'required'
p67918
I00
sS'group_name'
p67919
S'Advanced'
p67920
sa(dp67921
S'description'
p67922
S'Component tensors\n'
p67923
sS'cpp_type'
p67924
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67925
sS'default'
p67926
g3
sS'name'
p67927
S'tensors'
p67928
sS'required'
p67929
I01
sS'group_name'
p67930
Nsa(dp67931
S'description'
p67932
g3
sS'cpp_type'
p67933
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p67934
sS'default'
p67935
S'CompositeElasticityTensor'
p67936
sS'name'
p67937
S'type'
p67938
sS'required'
p67939
I00
sS'group_name'
p67940
Nsa(dp67941
S'description'
p67942
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p67943
sS'cpp_type'
p67944
S'bool'
p67945
sS'default'
p67946
S'0'
p67947
sS'name'
p67948
S'use_displaced_mesh'
p67949
sS'required'
p67950
I00
sS'group_name'
p67951
S'Advanced'
p67952
sa(dp67953
S'description'
p67954
S'Component weights\n'
p67955
sS'cpp_type'
p67956
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p67957
sS'default'
p67958
g3
sS'name'
p67959
S'weights'
p67960
sS'required'
p67961
I01
sS'group_name'
p67962
NsasS'name'
p67963
S'/Materials/CompositeElasticityTensor'
p67964
sa(dp67965
S'description'
p67966
S'Assemble a mobility tensor from multiple tensor contributions weighted by material properties\n'
p67967
sS'subblocks'
p67968
NsS'parameters'
p67969
(lp67970
(dp67971
S'description'
p67972
S'Name of the mobility tensor property to generate\n'
p67973
sS'cpp_type'
p67974
S'MaterialPropertyName'
p67975
sS'default'
p67976
g3
sS'name'
p67977
S'M_name'
p67978
sS'required'
p67979
I01
sS'group_name'
p67980
Nsa(dp67981
S'description'
p67982
S'variable dependencies for the prefactor\n'
p67983
sS'cpp_type'
p67984
S'std::vector<VariableName>'
p67985
sS'default'
p67986
g3
sS'name'
p67987
S'args'
p67988
sS'required'
p67989
I01
sS'group_name'
p67990
Nsa(dp67991
S'description'
p67992
S'The list of block ids (SubdomainID) that this object will be applied\n'
p67993
sS'cpp_type'
p67994
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p67995
sS'default'
p67996
g3
sS'name'
p67997
S'block'
p67998
sS'required'
p67999
I00
sS'group_name'
p68000
Nsa(dp68001
S'description'
p68002
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68003
sS'cpp_type'
p68004
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68005
sS'default'
p68006
g3
sS'name'
p68007
S'boundary'
p68008
sS'required'
p68009
I00
sS'group_name'
p68010
Nsa(dp68011
S'description'
p68012
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68013
sS'cpp_type'
p68014
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68015
sS'default'
p68016
g3
sS'name'
p68017
S'control_tags'
p68018
sS'required'
p68019
I00
sS'group_name'
p68020
Nsa(dp68021
S'description'
p68022
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68023
sS'cpp_type'
p68024
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68025
sS'default'
p68026
g3
sS'name'
p68027
S'output_properties'
p68028
sS'required'
p68029
I00
sS'group_name'
p68030
S'Outputs'
p68031
sa(dp68032
S'description'
p68033
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68034
sS'cpp_type'
p68035
S'std::vector<OutputName, std::allocator<OutputName> >'
p68036
sS'default'
p68037
S'none'
p68038
sS'name'
p68039
S'outputs'
p68040
sS'required'
p68041
I00
sS'group_name'
p68042
S'Outputs'
p68043
sa(dp68044
S'description'
p68045
S'The seed for the master random number generator\n'
p68046
sS'cpp_type'
p68047
S'unsigned int'
p68048
sS'default'
p68049
S'0'
p68050
sS'name'
p68051
S'seed'
p68052
sS'required'
p68053
I00
sS'group_name'
p68054
S'Advanced'
p68055
sa(dp68056
S'description'
p68057
S'Component tensors\n'
p68058
sS'cpp_type'
p68059
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p68060
sS'default'
p68061
g3
sS'name'
p68062
S'tensors'
p68063
sS'required'
p68064
I01
sS'group_name'
p68065
Nsa(dp68066
S'description'
p68067
g3
sS'cpp_type'
p68068
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68069
sS'default'
p68070
S'CompositeMobilityTensor'
p68071
sS'name'
p68072
S'type'
p68073
sS'required'
p68074
I00
sS'group_name'
p68075
Nsa(dp68076
S'description'
p68077
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68078
sS'cpp_type'
p68079
S'bool'
p68080
sS'default'
p68081
S'0'
p68082
sS'name'
p68083
S'use_displaced_mesh'
p68084
sS'required'
p68085
I00
sS'group_name'
p68086
S'Advanced'
p68087
sa(dp68088
S'description'
p68089
S'Component weights\n'
p68090
sS'cpp_type'
p68091
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p68092
sS'default'
p68093
g3
sS'name'
p68094
S'weights'
p68095
sS'required'
p68096
I01
sS'group_name'
p68097
NsasS'name'
p68098
S'/Materials/CompositeMobilityTensor'
p68099
sa(dp68100
S'description'
p68101
S'Compute a strain increment and rotation increment for finite strains under axisymmetric assumptions.\n'
p68102
sS'subblocks'
p68103
NsS'parameters'
p68104
(lp68105
(dp68106
S'description'
p68107
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68108
sS'cpp_type'
p68109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68110
sS'default'
p68111
g3
sS'name'
p68112
S'base_name'
p68113
sS'required'
p68114
I00
sS'group_name'
p68115
Nsa(dp68116
S'description'
p68117
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68118
sS'cpp_type'
p68119
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68120
sS'default'
p68121
g3
sS'name'
p68122
S'block'
p68123
sS'required'
p68124
I00
sS'group_name'
p68125
Nsa(dp68126
S'description'
p68127
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68128
sS'cpp_type'
p68129
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68130
sS'default'
p68131
g3
sS'name'
p68132
S'boundary'
p68133
sS'required'
p68134
I00
sS'group_name'
p68135
Nsa(dp68136
S'description'
p68137
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68138
sS'cpp_type'
p68139
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68140
sS'default'
p68141
g3
sS'name'
p68142
S'control_tags'
p68143
sS'required'
p68144
I00
sS'group_name'
p68145
Nsa(dp68146
S'description'
p68147
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p68148
sS'cpp_type'
p68149
S'std::vector<VariableName>'
p68150
sS'default'
p68151
g3
sS'name'
p68152
S'displacements'
p68153
sS'required'
p68154
I01
sS'group_name'
p68155
Nsa(dp68156
S'description'
p68157
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68158
sS'cpp_type'
p68159
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68160
sS'default'
p68161
g3
sS'name'
p68162
S'output_properties'
p68163
sS'required'
p68164
I00
sS'group_name'
p68165
S'Outputs'
p68166
sa(dp68167
S'description'
p68168
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68169
sS'cpp_type'
p68170
S'std::vector<OutputName, std::allocator<OutputName> >'
p68171
sS'default'
p68172
S'none'
p68173
sS'name'
p68174
S'outputs'
p68175
sS'required'
p68176
I00
sS'group_name'
p68177
S'Outputs'
p68178
sa(dp68179
S'description'
p68180
S'The seed for the master random number generator\n'
p68181
sS'cpp_type'
p68182
S'unsigned int'
p68183
sS'default'
p68184
S'0'
p68185
sS'name'
p68186
S'seed'
p68187
sS'required'
p68188
I00
sS'group_name'
p68189
S'Advanced'
p68190
sa(dp68191
S'description'
p68192
S'temperature in Kelvin\n'
p68193
sS'cpp_type'
p68194
S'std::vector<VariableName>'
p68195
sS'default'
p68196
S'273'
p68197
sS'name'
p68198
S'temperature'
p68199
sS'required'
p68200
I00
sS'group_name'
p68201
Nsa(dp68202
S'description'
p68203
S'Reference temperature for thermal expansion in K\n'
p68204
sS'cpp_type'
p68205
S'double'
p68206
sS'default'
p68207
S'273'
p68208
sS'name'
p68209
S'temperature_ref'
p68210
sS'required'
p68211
I00
sS'group_name'
p68212
Nsa(dp68213
S'description'
p68214
S'Thermal expansion coefficient in 1/K\n'
p68215
sS'cpp_type'
p68216
S'double'
p68217
sS'default'
p68218
S'0'
p68219
sS'name'
p68220
S'thermal_expansion_coeff'
p68221
sS'required'
p68222
I00
sS'group_name'
p68223
Nsa(dp68224
S'description'
p68225
g3
sS'cpp_type'
p68226
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68227
sS'default'
p68228
S'ComputeAxisymmetricRZFiniteStrain'
p68229
sS'name'
p68230
S'type'
p68231
sS'required'
p68232
I00
sS'group_name'
p68233
Nsa(dp68234
S'description'
p68235
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68236
sS'cpp_type'
p68237
S'bool'
p68238
sS'default'
p68239
S'0'
p68240
sS'name'
p68241
S'use_displaced_mesh'
p68242
sS'required'
p68243
I00
sS'group_name'
p68244
S'Advanced'
p68245
sasS'name'
p68246
S'/Materials/ComputeAxisymmetricRZFiniteStrain'
p68247
sa(dp68248
S'description'
p68249
S'Compute a small strain in an Axisymmetric geometry\n'
p68250
sS'subblocks'
p68251
NsS'parameters'
p68252
(lp68253
(dp68254
S'description'
p68255
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68256
sS'cpp_type'
p68257
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68258
sS'default'
p68259
g3
sS'name'
p68260
S'base_name'
p68261
sS'required'
p68262
I00
sS'group_name'
p68263
Nsa(dp68264
S'description'
p68265
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68266
sS'cpp_type'
p68267
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68268
sS'default'
p68269
g3
sS'name'
p68270
S'block'
p68271
sS'required'
p68272
I00
sS'group_name'
p68273
Nsa(dp68274
S'description'
p68275
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68276
sS'cpp_type'
p68277
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68278
sS'default'
p68279
g3
sS'name'
p68280
S'boundary'
p68281
sS'required'
p68282
I00
sS'group_name'
p68283
Nsa(dp68284
S'description'
p68285
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68286
sS'cpp_type'
p68287
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68288
sS'default'
p68289
g3
sS'name'
p68290
S'control_tags'
p68291
sS'required'
p68292
I00
sS'group_name'
p68293
Nsa(dp68294
S'description'
p68295
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p68296
sS'cpp_type'
p68297
S'std::vector<VariableName>'
p68298
sS'default'
p68299
g3
sS'name'
p68300
S'displacements'
p68301
sS'required'
p68302
I01
sS'group_name'
p68303
Nsa(dp68304
S'description'
p68305
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68306
sS'cpp_type'
p68307
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68308
sS'default'
p68309
g3
sS'name'
p68310
S'output_properties'
p68311
sS'required'
p68312
I00
sS'group_name'
p68313
S'Outputs'
p68314
sa(dp68315
S'description'
p68316
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68317
sS'cpp_type'
p68318
S'std::vector<OutputName, std::allocator<OutputName> >'
p68319
sS'default'
p68320
S'none'
p68321
sS'name'
p68322
S'outputs'
p68323
sS'required'
p68324
I00
sS'group_name'
p68325
S'Outputs'
p68326
sa(dp68327
S'description'
p68328
S'The seed for the master random number generator\n'
p68329
sS'cpp_type'
p68330
S'unsigned int'
p68331
sS'default'
p68332
S'0'
p68333
sS'name'
p68334
S'seed'
p68335
sS'required'
p68336
I00
sS'group_name'
p68337
S'Advanced'
p68338
sa(dp68339
S'description'
p68340
S'temperature in Kelvin\n'
p68341
sS'cpp_type'
p68342
S'std::vector<VariableName>'
p68343
sS'default'
p68344
S'273'
p68345
sS'name'
p68346
S'temperature'
p68347
sS'required'
p68348
I00
sS'group_name'
p68349
Nsa(dp68350
S'description'
p68351
S'Reference temperature for thermal expansion in K\n'
p68352
sS'cpp_type'
p68353
S'double'
p68354
sS'default'
p68355
S'273'
p68356
sS'name'
p68357
S'temperature_ref'
p68358
sS'required'
p68359
I00
sS'group_name'
p68360
Nsa(dp68361
S'description'
p68362
S'Thermal expansion coefficient in 1/K\n'
p68363
sS'cpp_type'
p68364
S'double'
p68365
sS'default'
p68366
S'0'
p68367
sS'name'
p68368
S'thermal_expansion_coeff'
p68369
sS'required'
p68370
I00
sS'group_name'
p68371
Nsa(dp68372
S'description'
p68373
g3
sS'cpp_type'
p68374
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68375
sS'default'
p68376
S'ComputeAxisymmetricRZSmallStrain'
p68377
sS'name'
p68378
S'type'
p68379
sS'required'
p68380
I00
sS'group_name'
p68381
Nsa(dp68382
S'description'
p68383
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68384
sS'cpp_type'
p68385
S'bool'
p68386
sS'default'
p68387
S'0'
p68388
sS'name'
p68389
S'use_displaced_mesh'
p68390
sS'required'
p68391
I00
sS'group_name'
p68392
S'Advanced'
p68393
sasS'name'
p68394
S'/Materials/ComputeAxisymmetricRZSmallStrain'
p68395
sa(dp68396
S'description'
p68397
S'Compute concentration dependent elasticity tensor.\n'
p68398
sS'subblocks'
p68399
NsS'parameters'
p68400
(lp68401
(dp68402
S'description'
p68403
S'Stiffness tensor for zero concentration phase\n'
p68404
sS'cpp_type'
p68405
S'std::vector<double, std::allocator<double> >'
p68406
sS'default'
p68407
g3
sS'name'
p68408
S'C0_ijkl'
p68409
sS'required'
p68410
I01
sS'group_name'
p68411
Nsa(dp68412
S'description'
p68413
S'Stiffness tensor for phase having concentration 1.0\n'
p68414
sS'cpp_type'
p68415
S'std::vector<double, std::allocator<double> >'
p68416
sS'default'
p68417
g3
sS'name'
p68418
S'C1_ijkl'
p68419
sS'required'
p68420
I01
sS'group_name'
p68421
Nsa(dp68422
S'description'
p68423
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68424
sS'cpp_type'
p68425
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68426
sS'default'
p68427
g3
sS'name'
p68428
S'base_name'
p68429
sS'required'
p68430
I00
sS'group_name'
p68431
Nsa(dp68432
S'description'
p68433
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68434
sS'cpp_type'
p68435
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68436
sS'default'
p68437
g3
sS'name'
p68438
S'block'
p68439
sS'required'
p68440
I00
sS'group_name'
p68441
Nsa(dp68442
S'description'
p68443
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68444
sS'cpp_type'
p68445
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68446
sS'default'
p68447
g3
sS'name'
p68448
S'boundary'
p68449
sS'required'
p68450
I00
sS'group_name'
p68451
Nsa(dp68452
S'description'
p68453
S'Concentration\n'
p68454
sS'cpp_type'
p68455
S'std::vector<VariableName>'
p68456
sS'default'
p68457
g3
sS'name'
p68458
S'c'
p68459
sS'required'
p68460
I01
sS'group_name'
p68461
Nsa(dp68462
S'description'
p68463
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68464
sS'cpp_type'
p68465
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68466
sS'default'
p68467
g3
sS'name'
p68468
S'control_tags'
p68469
sS'required'
p68470
I00
sS'group_name'
p68471
Nsa(dp68472
S'description'
p68473
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p68474
sS'cpp_type'
p68475
S'FunctionName'
p68476
sS'default'
p68477
g3
sS'name'
p68478
S'elasticity_tensor_prefactor'
p68479
sS'required'
p68480
I00
sS'group_name'
p68481
Nsa(dp68482
S'description'
p68483
S'Euler angle in direction 1\n'
p68484
sS'cpp_type'
p68485
S'double'
p68486
sS'default'
p68487
S'0'
p68488
sS'name'
p68489
S'euler_angle_1'
p68490
sS'required'
p68491
I00
sS'group_name'
p68492
Nsa(dp68493
S'description'
p68494
S'Euler angle in direction 2\n'
p68495
sS'cpp_type'
p68496
S'double'
p68497
sS'default'
p68498
S'0'
p68499
sS'name'
p68500
S'euler_angle_2'
p68501
sS'required'
p68502
I00
sS'group_name'
p68503
Nsa(dp68504
S'description'
p68505
S'Euler angle in direction 3\n'
p68506
sS'cpp_type'
p68507
S'double'
p68508
sS'default'
p68509
S'0'
p68510
sS'name'
p68511
S'euler_angle_3'
p68512
sS'required'
p68513
I00
sS'group_name'
p68514
Nsa(dp68515
S'name'
p68516
S'fill_method0'
p68517
sS'cpp_type'
p68518
S'MooseEnum'
p68519
sS'default'
p68520
S'symmetric9'
p68521
sS'description'
p68522
S'The fill method\n'
p68523
sS'required'
p68524
I00
sS'options'
p68525
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p68526
sS'group_name'
p68527
Nsa(dp68528
S'name'
p68529
S'fill_method1'
p68530
sS'cpp_type'
p68531
S'MooseEnum'
p68532
sS'default'
p68533
S'symmetric9'
p68534
sS'description'
p68535
S'The fill method\n'
p68536
sS'required'
p68537
I00
sS'options'
p68538
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p68539
sS'group_name'
p68540
Nsa(dp68541
S'description'
p68542
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68543
sS'cpp_type'
p68544
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68545
sS'default'
p68546
g3
sS'name'
p68547
S'output_properties'
p68548
sS'required'
p68549
I00
sS'group_name'
p68550
S'Outputs'
p68551
sa(dp68552
S'description'
p68553
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68554
sS'cpp_type'
p68555
S'std::vector<OutputName, std::allocator<OutputName> >'
p68556
sS'default'
p68557
S'none'
p68558
sS'name'
p68559
S'outputs'
p68560
sS'required'
p68561
I00
sS'group_name'
p68562
S'Outputs'
p68563
sa(dp68564
S'description'
p68565
S'The seed for the master random number generator\n'
p68566
sS'cpp_type'
p68567
S'unsigned int'
p68568
sS'default'
p68569
S'0'
p68570
sS'name'
p68571
S'seed'
p68572
sS'required'
p68573
I00
sS'group_name'
p68574
S'Advanced'
p68575
sa(dp68576
S'description'
p68577
g3
sS'cpp_type'
p68578
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68579
sS'default'
p68580
S'ComputeConcentrationDependentElasticityTensor'
p68581
sS'name'
p68582
S'type'
p68583
sS'required'
p68584
I00
sS'group_name'
p68585
Nsa(dp68586
S'description'
p68587
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68588
sS'cpp_type'
p68589
S'bool'
p68590
sS'default'
p68591
S'0'
p68592
sS'name'
p68593
S'use_displaced_mesh'
p68594
sS'required'
p68595
I00
sS'group_name'
p68596
S'Advanced'
p68597
sasS'name'
p68598
S'/Materials/ComputeConcentrationDependentElasticityTensor'
p68599
sa(dp68600
S'description'
p68601
S'Computes a constant Eigenstrain\n'
p68602
sS'subblocks'
p68603
NsS'parameters'
p68604
(lp68605
(dp68606
S'description'
p68607
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68608
sS'cpp_type'
p68609
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68610
sS'default'
p68611
g3
sS'name'
p68612
S'base_name'
p68613
sS'required'
p68614
I00
sS'group_name'
p68615
Nsa(dp68616
S'description'
p68617
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68618
sS'cpp_type'
p68619
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68620
sS'default'
p68621
g3
sS'name'
p68622
S'block'
p68623
sS'required'
p68624
I00
sS'group_name'
p68625
Nsa(dp68626
S'description'
p68627
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68628
sS'cpp_type'
p68629
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68630
sS'default'
p68631
g3
sS'name'
p68632
S'boundary'
p68633
sS'required'
p68634
I00
sS'group_name'
p68635
Nsa(dp68636
S'description'
p68637
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68638
sS'cpp_type'
p68639
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68640
sS'default'
p68641
g3
sS'name'
p68642
S'control_tags'
p68643
sS'required'
p68644
I00
sS'group_name'
p68645
Nsa(dp68646
S'description'
p68647
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p68648
sS'cpp_type'
p68649
S'std::vector<double, std::allocator<double> >'
p68650
sS'default'
p68651
g3
sS'name'
p68652
S'eigen_base'
p68653
sS'required'
p68654
I01
sS'group_name'
p68655
Nsa(dp68656
S'description'
p68657
S'Should the StressFreestrain be in incremental form for finite strain methods?\n'
p68658
sS'cpp_type'
p68659
S'bool'
p68660
sS'default'
p68661
S'0'
p68662
sS'name'
p68663
S'incremental_form'
p68664
sS'required'
p68665
I00
sS'group_name'
p68666
Nsa(dp68667
S'description'
p68668
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68669
sS'cpp_type'
p68670
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68671
sS'default'
p68672
g3
sS'name'
p68673
S'output_properties'
p68674
sS'required'
p68675
I00
sS'group_name'
p68676
S'Outputs'
p68677
sa(dp68678
S'description'
p68679
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68680
sS'cpp_type'
p68681
S'std::vector<OutputName, std::allocator<OutputName> >'
p68682
sS'default'
p68683
S'none'
p68684
sS'name'
p68685
S'outputs'
p68686
sS'required'
p68687
I00
sS'group_name'
p68688
S'Outputs'
p68689
sa(dp68690
S'description'
p68691
S'Name of material defining the variable dependence\n'
p68692
sS'cpp_type'
p68693
S'MaterialPropertyName'
p68694
sS'default'
p68695
S'1'
p68696
sS'name'
p68697
S'prefactor'
p68698
sS'required'
p68699
I00
sS'group_name'
p68700
Nsa(dp68701
S'description'
p68702
S'The seed for the master random number generator\n'
p68703
sS'cpp_type'
p68704
S'unsigned int'
p68705
sS'default'
p68706
S'0'
p68707
sS'name'
p68708
S'seed'
p68709
sS'required'
p68710
I00
sS'group_name'
p68711
S'Advanced'
p68712
sa(dp68713
S'description'
p68714
g3
sS'cpp_type'
p68715
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68716
sS'default'
p68717
S'ComputeEigenstrain'
p68718
sS'name'
p68719
S'type'
p68720
sS'required'
p68721
I00
sS'group_name'
p68722
Nsa(dp68723
S'description'
p68724
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68725
sS'cpp_type'
p68726
S'bool'
p68727
sS'default'
p68728
S'0'
p68729
sS'name'
p68730
S'use_displaced_mesh'
p68731
sS'required'
p68732
I00
sS'group_name'
p68733
S'Advanced'
p68734
sasS'name'
p68735
S'/Materials/ComputeEigenstrain'
p68736
sa(dp68737
S'description'
p68738
S'Compute an elasticity tensor.\n'
p68739
sS'subblocks'
p68740
NsS'parameters'
p68741
(lp68742
(dp68743
S'description'
p68744
S'Stiffness tensor for material\n'
p68745
sS'cpp_type'
p68746
S'std::vector<double, std::allocator<double> >'
p68747
sS'default'
p68748
g3
sS'name'
p68749
S'C_ijkl'
p68750
sS'required'
p68751
I01
sS'group_name'
p68752
Nsa(dp68753
S'description'
p68754
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68755
sS'cpp_type'
p68756
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68757
sS'default'
p68758
g3
sS'name'
p68759
S'base_name'
p68760
sS'required'
p68761
I00
sS'group_name'
p68762
Nsa(dp68763
S'description'
p68764
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68765
sS'cpp_type'
p68766
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68767
sS'default'
p68768
g3
sS'name'
p68769
S'block'
p68770
sS'required'
p68771
I00
sS'group_name'
p68772
Nsa(dp68773
S'description'
p68774
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68775
sS'cpp_type'
p68776
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68777
sS'default'
p68778
g3
sS'name'
p68779
S'boundary'
p68780
sS'required'
p68781
I00
sS'group_name'
p68782
Nsa(dp68783
S'description'
p68784
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68785
sS'cpp_type'
p68786
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68787
sS'default'
p68788
g3
sS'name'
p68789
S'control_tags'
p68790
sS'required'
p68791
I00
sS'group_name'
p68792
Nsa(dp68793
S'description'
p68794
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p68795
sS'cpp_type'
p68796
S'FunctionName'
p68797
sS'default'
p68798
g3
sS'name'
p68799
S'elasticity_tensor_prefactor'
p68800
sS'required'
p68801
I00
sS'group_name'
p68802
Nsa(dp68803
S'description'
p68804
S'Euler angle in direction 1\n'
p68805
sS'cpp_type'
p68806
S'double'
p68807
sS'default'
p68808
S'0'
p68809
sS'name'
p68810
S'euler_angle_1'
p68811
sS'required'
p68812
I00
sS'group_name'
p68813
Nsa(dp68814
S'description'
p68815
S'Euler angle in direction 2\n'
p68816
sS'cpp_type'
p68817
S'double'
p68818
sS'default'
p68819
S'0'
p68820
sS'name'
p68821
S'euler_angle_2'
p68822
sS'required'
p68823
I00
sS'group_name'
p68824
Nsa(dp68825
S'description'
p68826
S'Euler angle in direction 3\n'
p68827
sS'cpp_type'
p68828
S'double'
p68829
sS'default'
p68830
S'0'
p68831
sS'name'
p68832
S'euler_angle_3'
p68833
sS'required'
p68834
I00
sS'group_name'
p68835
Nsa(dp68836
S'name'
p68837
S'fill_method'
p68838
sS'cpp_type'
p68839
S'MooseEnum'
p68840
sS'default'
p68841
S'symmetric9'
p68842
sS'description'
p68843
S'The fill method\n'
p68844
sS'required'
p68845
I00
sS'options'
p68846
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p68847
sS'group_name'
p68848
Nsa(dp68849
S'description'
p68850
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68851
sS'cpp_type'
p68852
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68853
sS'default'
p68854
g3
sS'name'
p68855
S'output_properties'
p68856
sS'required'
p68857
I00
sS'group_name'
p68858
S'Outputs'
p68859
sa(dp68860
S'description'
p68861
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68862
sS'cpp_type'
p68863
S'std::vector<OutputName, std::allocator<OutputName> >'
p68864
sS'default'
p68865
S'none'
p68866
sS'name'
p68867
S'outputs'
p68868
sS'required'
p68869
I00
sS'group_name'
p68870
S'Outputs'
p68871
sa(dp68872
S'description'
p68873
S'The seed for the master random number generator\n'
p68874
sS'cpp_type'
p68875
S'unsigned int'
p68876
sS'default'
p68877
S'0'
p68878
sS'name'
p68879
S'seed'
p68880
sS'required'
p68881
I00
sS'group_name'
p68882
S'Advanced'
p68883
sa(dp68884
S'description'
p68885
g3
sS'cpp_type'
p68886
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68887
sS'default'
p68888
S'ComputeElasticityTensor'
p68889
sS'name'
p68890
S'type'
p68891
sS'required'
p68892
I00
sS'group_name'
p68893
Nsa(dp68894
S'description'
p68895
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p68896
sS'cpp_type'
p68897
S'bool'
p68898
sS'default'
p68899
S'0'
p68900
sS'name'
p68901
S'use_displaced_mesh'
p68902
sS'required'
p68903
I00
sS'group_name'
p68904
S'Advanced'
p68905
sasS'name'
p68906
S'/Materials/ComputeElasticityTensor'
p68907
sa(dp68908
S'description'
p68909
S'Compute a strain increment and rotation increment for finite strains.\n'
p68910
sS'subblocks'
p68911
NsS'parameters'
p68912
(lp68913
(dp68914
S'description'
p68915
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p68916
sS'cpp_type'
p68917
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p68918
sS'default'
p68919
g3
sS'name'
p68920
S'base_name'
p68921
sS'required'
p68922
I00
sS'group_name'
p68923
Nsa(dp68924
S'description'
p68925
S'The list of block ids (SubdomainID) that this object will be applied\n'
p68926
sS'cpp_type'
p68927
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p68928
sS'default'
p68929
g3
sS'name'
p68930
S'block'
p68931
sS'required'
p68932
I00
sS'group_name'
p68933
Nsa(dp68934
S'description'
p68935
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p68936
sS'cpp_type'
p68937
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p68938
sS'default'
p68939
g3
sS'name'
p68940
S'boundary'
p68941
sS'required'
p68942
I00
sS'group_name'
p68943
Nsa(dp68944
S'description'
p68945
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p68946
sS'cpp_type'
p68947
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68948
sS'default'
p68949
g3
sS'name'
p68950
S'control_tags'
p68951
sS'required'
p68952
I00
sS'group_name'
p68953
Nsa(dp68954
S'description'
p68955
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p68956
sS'cpp_type'
p68957
S'std::vector<VariableName>'
p68958
sS'default'
p68959
g3
sS'name'
p68960
S'displacements'
p68961
sS'required'
p68962
I01
sS'group_name'
p68963
Nsa(dp68964
S'description'
p68965
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p68966
sS'cpp_type'
p68967
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p68968
sS'default'
p68969
g3
sS'name'
p68970
S'output_properties'
p68971
sS'required'
p68972
I00
sS'group_name'
p68973
S'Outputs'
p68974
sa(dp68975
S'description'
p68976
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p68977
sS'cpp_type'
p68978
S'std::vector<OutputName, std::allocator<OutputName> >'
p68979
sS'default'
p68980
S'none'
p68981
sS'name'
p68982
S'outputs'
p68983
sS'required'
p68984
I00
sS'group_name'
p68985
S'Outputs'
p68986
sa(dp68987
S'description'
p68988
S'The seed for the master random number generator\n'
p68989
sS'cpp_type'
p68990
S'unsigned int'
p68991
sS'default'
p68992
S'0'
p68993
sS'name'
p68994
S'seed'
p68995
sS'required'
p68996
I00
sS'group_name'
p68997
S'Advanced'
p68998
sa(dp68999
S'description'
p69000
S'temperature in Kelvin\n'
p69001
sS'cpp_type'
p69002
S'std::vector<VariableName>'
p69003
sS'default'
p69004
S'273'
p69005
sS'name'
p69006
S'temperature'
p69007
sS'required'
p69008
I00
sS'group_name'
p69009
Nsa(dp69010
S'description'
p69011
S'Reference temperature for thermal expansion in K\n'
p69012
sS'cpp_type'
p69013
S'double'
p69014
sS'default'
p69015
S'273'
p69016
sS'name'
p69017
S'temperature_ref'
p69018
sS'required'
p69019
I00
sS'group_name'
p69020
Nsa(dp69021
S'description'
p69022
S'Thermal expansion coefficient in 1/K\n'
p69023
sS'cpp_type'
p69024
S'double'
p69025
sS'default'
p69026
S'0'
p69027
sS'name'
p69028
S'thermal_expansion_coeff'
p69029
sS'required'
p69030
I00
sS'group_name'
p69031
Nsa(dp69032
S'description'
p69033
g3
sS'cpp_type'
p69034
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69035
sS'default'
p69036
S'ComputeFiniteStrain'
p69037
sS'name'
p69038
S'type'
p69039
sS'required'
p69040
I00
sS'group_name'
p69041
Nsa(dp69042
S'description'
p69043
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69044
sS'cpp_type'
p69045
S'bool'
p69046
sS'default'
p69047
S'0'
p69048
sS'name'
p69049
S'use_displaced_mesh'
p69050
sS'required'
p69051
I00
sS'group_name'
p69052
S'Advanced'
p69053
sasS'name'
p69054
S'/Materials/ComputeFiniteStrain'
p69055
sa(dp69056
S'description'
p69057
S'Compute stress using elasticity for finite strains\n'
p69058
sS'subblocks'
p69059
NsS'parameters'
p69060
(lp69061
(dp69062
S'description'
p69063
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69064
sS'cpp_type'
p69065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69066
sS'default'
p69067
g3
sS'name'
p69068
S'base_name'
p69069
sS'required'
p69070
I00
sS'group_name'
p69071
Nsa(dp69072
S'description'
p69073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69074
sS'cpp_type'
p69075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69076
sS'default'
p69077
g3
sS'name'
p69078
S'block'
p69079
sS'required'
p69080
I00
sS'group_name'
p69081
Nsa(dp69082
S'description'
p69083
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69084
sS'cpp_type'
p69085
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69086
sS'default'
p69087
g3
sS'name'
p69088
S'boundary'
p69089
sS'required'
p69090
I00
sS'group_name'
p69091
Nsa(dp69092
S'description'
p69093
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69094
sS'cpp_type'
p69095
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69096
sS'default'
p69097
g3
sS'name'
p69098
S'control_tags'
p69099
sS'required'
p69100
I00
sS'group_name'
p69101
Nsa(dp69102
S'description'
p69103
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p69104
sS'cpp_type'
p69105
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p69106
sS'default'
p69107
g3
sS'name'
p69108
S'initial_stress'
p69109
sS'required'
p69110
I00
sS'group_name'
p69111
Nsa(dp69112
S'description'
p69113
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69114
sS'cpp_type'
p69115
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69116
sS'default'
p69117
g3
sS'name'
p69118
S'output_properties'
p69119
sS'required'
p69120
I00
sS'group_name'
p69121
S'Outputs'
p69122
sa(dp69123
S'description'
p69124
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69125
sS'cpp_type'
p69126
S'std::vector<OutputName, std::allocator<OutputName> >'
p69127
sS'default'
p69128
S'none'
p69129
sS'name'
p69130
S'outputs'
p69131
sS'required'
p69132
I00
sS'group_name'
p69133
S'Outputs'
p69134
sa(dp69135
S'description'
p69136
S'The seed for the master random number generator\n'
p69137
sS'cpp_type'
p69138
S'unsigned int'
p69139
sS'default'
p69140
S'0'
p69141
sS'name'
p69142
S'seed'
p69143
sS'required'
p69144
I00
sS'group_name'
p69145
S'Advanced'
p69146
sa(dp69147
S'description'
p69148
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p69149
sS'cpp_type'
p69150
S'bool'
p69151
sS'default'
p69152
S'0'
p69153
sS'name'
p69154
S'store_stress_old'
p69155
sS'required'
p69156
I00
sS'group_name'
p69157
Nsa(dp69158
S'description'
p69159
g3
sS'cpp_type'
p69160
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69161
sS'default'
p69162
S'ComputeFiniteStrainElasticStress'
p69163
sS'name'
p69164
S'type'
p69165
sS'required'
p69166
I00
sS'group_name'
p69167
Nsa(dp69168
S'description'
p69169
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69170
sS'cpp_type'
p69171
S'bool'
p69172
sS'default'
p69173
S'0'
p69174
sS'name'
p69175
S'use_displaced_mesh'
p69176
sS'required'
p69177
I00
sS'group_name'
p69178
S'Advanced'
p69179
sasS'name'
p69180
S'/Materials/ComputeFiniteStrainElasticStress'
p69181
sa(dp69182
S'description'
p69183
S'Compute a strain increment and rotation increment for small strains.\n'
p69184
sS'subblocks'
p69185
NsS'parameters'
p69186
(lp69187
(dp69188
S'description'
p69189
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69190
sS'cpp_type'
p69191
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69192
sS'default'
p69193
g3
sS'name'
p69194
S'base_name'
p69195
sS'required'
p69196
I00
sS'group_name'
p69197
Nsa(dp69198
S'description'
p69199
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69200
sS'cpp_type'
p69201
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69202
sS'default'
p69203
g3
sS'name'
p69204
S'block'
p69205
sS'required'
p69206
I00
sS'group_name'
p69207
Nsa(dp69208
S'description'
p69209
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69210
sS'cpp_type'
p69211
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69212
sS'default'
p69213
g3
sS'name'
p69214
S'boundary'
p69215
sS'required'
p69216
I00
sS'group_name'
p69217
Nsa(dp69218
S'description'
p69219
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69220
sS'cpp_type'
p69221
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69222
sS'default'
p69223
g3
sS'name'
p69224
S'control_tags'
p69225
sS'required'
p69226
I00
sS'group_name'
p69227
Nsa(dp69228
S'description'
p69229
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p69230
sS'cpp_type'
p69231
S'std::vector<VariableName>'
p69232
sS'default'
p69233
g3
sS'name'
p69234
S'displacements'
p69235
sS'required'
p69236
I01
sS'group_name'
p69237
Nsa(dp69238
S'description'
p69239
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69240
sS'cpp_type'
p69241
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69242
sS'default'
p69243
g3
sS'name'
p69244
S'output_properties'
p69245
sS'required'
p69246
I00
sS'group_name'
p69247
S'Outputs'
p69248
sa(dp69249
S'description'
p69250
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69251
sS'cpp_type'
p69252
S'std::vector<OutputName, std::allocator<OutputName> >'
p69253
sS'default'
p69254
S'none'
p69255
sS'name'
p69256
S'outputs'
p69257
sS'required'
p69258
I00
sS'group_name'
p69259
S'Outputs'
p69260
sa(dp69261
S'description'
p69262
S'The seed for the master random number generator\n'
p69263
sS'cpp_type'
p69264
S'unsigned int'
p69265
sS'default'
p69266
S'0'
p69267
sS'name'
p69268
S'seed'
p69269
sS'required'
p69270
I00
sS'group_name'
p69271
S'Advanced'
p69272
sa(dp69273
S'description'
p69274
S'temperature in Kelvin\n'
p69275
sS'cpp_type'
p69276
S'std::vector<VariableName>'
p69277
sS'default'
p69278
S'273'
p69279
sS'name'
p69280
S'temperature'
p69281
sS'required'
p69282
I00
sS'group_name'
p69283
Nsa(dp69284
S'description'
p69285
S'Reference temperature for thermal expansion in K\n'
p69286
sS'cpp_type'
p69287
S'double'
p69288
sS'default'
p69289
S'273'
p69290
sS'name'
p69291
S'temperature_ref'
p69292
sS'required'
p69293
I00
sS'group_name'
p69294
Nsa(dp69295
S'description'
p69296
S'Thermal expansion coefficient in 1/K\n'
p69297
sS'cpp_type'
p69298
S'double'
p69299
sS'default'
p69300
S'0'
p69301
sS'name'
p69302
S'thermal_expansion_coeff'
p69303
sS'required'
p69304
I00
sS'group_name'
p69305
Nsa(dp69306
S'description'
p69307
g3
sS'cpp_type'
p69308
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69309
sS'default'
p69310
S'ComputeIncrementalSmallStrain'
p69311
sS'name'
p69312
S'type'
p69313
sS'required'
p69314
I00
sS'group_name'
p69315
Nsa(dp69316
S'description'
p69317
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69318
sS'cpp_type'
p69319
S'bool'
p69320
sS'default'
p69321
S'0'
p69322
sS'name'
p69323
S'use_displaced_mesh'
p69324
sS'required'
p69325
I00
sS'group_name'
p69326
S'Advanced'
p69327
sasS'name'
p69328
S'/Materials/ComputeIncrementalSmallStrain'
p69329
sa(dp69330
S'description'
p69331
S'Compute an isotropic elasticity tensor.\n'
p69332
sS'subblocks'
p69333
NsS'parameters'
p69334
(lp69335
(dp69336
S'description'
p69337
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69338
sS'cpp_type'
p69339
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69340
sS'default'
p69341
g3
sS'name'
p69342
S'base_name'
p69343
sS'required'
p69344
I00
sS'group_name'
p69345
Nsa(dp69346
S'description'
p69347
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69348
sS'cpp_type'
p69349
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69350
sS'default'
p69351
g3
sS'name'
p69352
S'block'
p69353
sS'required'
p69354
I00
sS'group_name'
p69355
Nsa(dp69356
S'description'
p69357
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69358
sS'cpp_type'
p69359
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69360
sS'default'
p69361
g3
sS'name'
p69362
S'boundary'
p69363
sS'required'
p69364
I00
sS'group_name'
p69365
Nsa(dp69366
S'description'
p69367
S'The bulk modulus for the material.\n'
p69368
sS'cpp_type'
p69369
S'double'
p69370
sS'default'
p69371
g3
sS'name'
p69372
S'bulk_modulus'
p69373
sS'required'
p69374
I00
sS'group_name'
p69375
Nsa(dp69376
S'description'
p69377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69378
sS'cpp_type'
p69379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69380
sS'default'
p69381
g3
sS'name'
p69382
S'control_tags'
p69383
sS'required'
p69384
I00
sS'group_name'
p69385
Nsa(dp69386
S'description'
p69387
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p69388
sS'cpp_type'
p69389
S'FunctionName'
p69390
sS'default'
p69391
g3
sS'name'
p69392
S'elasticity_tensor_prefactor'
p69393
sS'required'
p69394
I00
sS'group_name'
p69395
Nsa(dp69396
S'description'
p69397
S"Lame's first constant for the material.\n"
p69398
sS'cpp_type'
p69399
S'double'
p69400
sS'default'
p69401
g3
sS'name'
p69402
S'lambda'
p69403
sS'required'
p69404
I00
sS'group_name'
p69405
Nsa(dp69406
S'description'
p69407
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69408
sS'cpp_type'
p69409
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69410
sS'default'
p69411
g3
sS'name'
p69412
S'output_properties'
p69413
sS'required'
p69414
I00
sS'group_name'
p69415
S'Outputs'
p69416
sa(dp69417
S'description'
p69418
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69419
sS'cpp_type'
p69420
S'std::vector<OutputName, std::allocator<OutputName> >'
p69421
sS'default'
p69422
S'none'
p69423
sS'name'
p69424
S'outputs'
p69425
sS'required'
p69426
I00
sS'group_name'
p69427
S'Outputs'
p69428
sa(dp69429
S'description'
p69430
S"Poisson's ratio for the material.\n"
p69431
sS'cpp_type'
p69432
S'double'
p69433
sS'default'
p69434
g3
sS'name'
p69435
S'poissons_ratio'
p69436
sS'required'
p69437
I00
sS'group_name'
p69438
Nsa(dp69439
S'description'
p69440
S'The seed for the master random number generator\n'
p69441
sS'cpp_type'
p69442
S'unsigned int'
p69443
sS'default'
p69444
S'0'
p69445
sS'name'
p69446
S'seed'
p69447
sS'required'
p69448
I00
sS'group_name'
p69449
S'Advanced'
p69450
sa(dp69451
S'description'
p69452
S'The shear modulus of the material.\n'
p69453
sS'cpp_type'
p69454
S'double'
p69455
sS'default'
p69456
g3
sS'name'
p69457
S'shear_modulus'
p69458
sS'required'
p69459
I00
sS'group_name'
p69460
Nsa(dp69461
S'description'
p69462
g3
sS'cpp_type'
p69463
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69464
sS'default'
p69465
S'ComputeIsotropicElasticityTensor'
p69466
sS'name'
p69467
S'type'
p69468
sS'required'
p69469
I00
sS'group_name'
p69470
Nsa(dp69471
S'description'
p69472
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69473
sS'cpp_type'
p69474
S'bool'
p69475
sS'default'
p69476
S'0'
p69477
sS'name'
p69478
S'use_displaced_mesh'
p69479
sS'required'
p69480
I00
sS'group_name'
p69481
S'Advanced'
p69482
sa(dp69483
S'description'
p69484
S"Young's modulus of the material.\n"
p69485
sS'cpp_type'
p69486
S'double'
p69487
sS'default'
p69488
g3
sS'name'
p69489
S'youngs_modulus'
p69490
sS'required'
p69491
I00
sS'group_name'
p69492
NsasS'name'
p69493
S'/Materials/ComputeIsotropicElasticityTensor'
p69494
sa(dp69495
S'description'
p69496
S'Compute stress using elasticity for small strains\n'
p69497
sS'subblocks'
p69498
NsS'parameters'
p69499
(lp69500
(dp69501
S'description'
p69502
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69503
sS'cpp_type'
p69504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69505
sS'default'
p69506
g3
sS'name'
p69507
S'base_name'
p69508
sS'required'
p69509
I00
sS'group_name'
p69510
Nsa(dp69511
S'description'
p69512
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69513
sS'cpp_type'
p69514
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69515
sS'default'
p69516
g3
sS'name'
p69517
S'block'
p69518
sS'required'
p69519
I00
sS'group_name'
p69520
Nsa(dp69521
S'description'
p69522
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69523
sS'cpp_type'
p69524
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69525
sS'default'
p69526
g3
sS'name'
p69527
S'boundary'
p69528
sS'required'
p69529
I00
sS'group_name'
p69530
Nsa(dp69531
S'description'
p69532
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69533
sS'cpp_type'
p69534
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69535
sS'default'
p69536
g3
sS'name'
p69537
S'control_tags'
p69538
sS'required'
p69539
I00
sS'group_name'
p69540
Nsa(dp69541
S'description'
p69542
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p69543
sS'cpp_type'
p69544
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p69545
sS'default'
p69546
g3
sS'name'
p69547
S'initial_stress'
p69548
sS'required'
p69549
I00
sS'group_name'
p69550
Nsa(dp69551
S'description'
p69552
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69553
sS'cpp_type'
p69554
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69555
sS'default'
p69556
g3
sS'name'
p69557
S'output_properties'
p69558
sS'required'
p69559
I00
sS'group_name'
p69560
S'Outputs'
p69561
sa(dp69562
S'description'
p69563
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69564
sS'cpp_type'
p69565
S'std::vector<OutputName, std::allocator<OutputName> >'
p69566
sS'default'
p69567
S'none'
p69568
sS'name'
p69569
S'outputs'
p69570
sS'required'
p69571
I00
sS'group_name'
p69572
S'Outputs'
p69573
sa(dp69574
S'description'
p69575
S'The seed for the master random number generator\n'
p69576
sS'cpp_type'
p69577
S'unsigned int'
p69578
sS'default'
p69579
S'0'
p69580
sS'name'
p69581
S'seed'
p69582
sS'required'
p69583
I00
sS'group_name'
p69584
S'Advanced'
p69585
sa(dp69586
S'description'
p69587
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p69588
sS'cpp_type'
p69589
S'bool'
p69590
sS'default'
p69591
S'0'
p69592
sS'name'
p69593
S'store_stress_old'
p69594
sS'required'
p69595
I00
sS'group_name'
p69596
Nsa(dp69597
S'description'
p69598
g3
sS'cpp_type'
p69599
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69600
sS'default'
p69601
S'ComputeLinearElasticStress'
p69602
sS'name'
p69603
S'type'
p69604
sS'required'
p69605
I00
sS'group_name'
p69606
Nsa(dp69607
S'description'
p69608
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69609
sS'cpp_type'
p69610
S'bool'
p69611
sS'default'
p69612
S'0'
p69613
sS'name'
p69614
S'use_displaced_mesh'
p69615
sS'required'
p69616
I00
sS'group_name'
p69617
S'Advanced'
p69618
sasS'name'
p69619
S'/Materials/ComputeLinearElasticStress'
p69620
sa(dp69621
S'description'
p69622
S'Material for multi-surface finite-strain plasticity\n'
p69623
sS'subblocks'
p69624
NsS'parameters'
p69625
(lp69626
(dp69627
S'description'
p69628
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69629
sS'cpp_type'
p69630
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69631
sS'default'
p69632
g3
sS'name'
p69633
S'base_name'
p69634
sS'required'
p69635
I00
sS'group_name'
p69636
Nsa(dp69637
S'description'
p69638
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69639
sS'cpp_type'
p69640
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69641
sS'default'
p69642
g3
sS'name'
p69643
S'block'
p69644
sS'required'
p69645
I00
sS'group_name'
p69646
Nsa(dp69647
S'description'
p69648
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69649
sS'cpp_type'
p69650
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69651
sS'default'
p69652
g3
sS'name'
p69653
S'boundary'
p69654
sS'required'
p69655
I00
sS'group_name'
p69656
Nsa(dp69657
S'description'
p69658
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69659
sS'cpp_type'
p69660
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69661
sS'default'
p69662
g3
sS'name'
p69663
S'control_tags'
p69664
sS'required'
p69665
I00
sS'group_name'
p69666
Nsa(dp69667
S'name'
p69668
S'deactivation_scheme'
p69669
sS'cpp_type'
p69670
S'MooseEnum'
p69671
sS'default'
p69672
S'optimized'
p69673
sS'description'
p69674
S"Scheme by which constraints are deactivated.  (NOTE: This is irrelevant if there is only one yield surface.)  safe: return to the yield surface and then deactivate constraints with negative plasticity multipliers.  optimized: deactivate a constraint as soon as its plasticity multiplier becomes negative.  dumb: iteratively try all combinations of active constraints until the solution is found.  You may specify fall-back options.  Eg optimized_to_safe: first use 'optimized', and if that fails, try the return with 'safe'.\n"
p69675
sS'required'
p69676
I00
sS'options'
p69677
S'optimized safe dumb optimized_to_safe safe_to_dumb optimized_to_safe_to_dumb optimized_to_dumb'
p69678
sS'group_name'
p69679
Nsa(dp69680
S'description'
p69681
S'Debug parameter for use by developers when creating new plasticity models, not for general use.  2 = debug Jacobian entries, 3 = check the entire Jacobian, and check Ax=b\n'
p69682
sS'cpp_type'
p69683
S'int'
p69684
sS'default'
p69685
S'0'
p69686
sS'name'
p69687
S'debug_fspb'
p69688
sS'required'
p69689
I00
sS'group_name'
p69690
Nsa(dp69691
S'description'
p69692
S'Debug finite differencing parameters for the internal parameters\n'
p69693
sS'cpp_type'
p69694
S'std::vector<double, std::allocator<double> >'
p69695
sS'default'
p69696
g3
sS'name'
p69697
S'debug_intnl_change'
p69698
sS'required'
p69699
I00
sS'group_name'
p69700
Nsa(dp69701
S'description'
p69702
S'Debug Jacobian entries at these internal parameters\n'
p69703
sS'cpp_type'
p69704
S'std::vector<double, std::allocator<double> >'
p69705
sS'default'
p69706
g3
sS'name'
p69707
S'debug_jac_at_intnl'
p69708
sS'required'
p69709
I00
sS'group_name'
p69710
Nsa(dp69711
S'description'
p69712
S'Debug Jacobian entries at these plastic multipliers\n'
p69713
sS'cpp_type'
p69714
S'std::vector<double, std::allocator<double> >'
p69715
sS'default'
p69716
g3
sS'name'
p69717
S'debug_jac_at_pm'
p69718
sS'required'
p69719
I00
sS'group_name'
p69720
Nsa(dp69721
S'description'
p69722
S'Debug Jacobian entries at this stress.  For use by developers\n'
p69723
sS'cpp_type'
p69724
S'libMesh::TensorValue<double>'
p69725
sS'default'
p69726
S'(xx,xy,xz)=(       0,        0,        0) (yx,yy,yz)=(       0,        0,        0) (zx,zy,zz)=(       0,        0,        0)'
p69727
sS'name'
p69728
S'debug_jac_at_stress'
p69729
sS'required'
p69730
I00
sS'group_name'
p69731
Nsa(dp69732
S'description'
p69733
S'Debug finite differencing parameters for the plastic multipliers\n'
p69734
sS'cpp_type'
p69735
S'std::vector<double, std::allocator<double> >'
p69736
sS'default'
p69737
g3
sS'name'
p69738
S'debug_pm_change'
p69739
sS'required'
p69740
I00
sS'group_name'
p69741
Nsa(dp69742
S'description'
p69743
S'Debug finite differencing parameter for the stress\n'
p69744
sS'cpp_type'
p69745
S'double'
p69746
sS'default'
p69747
S'1'
p69748
sS'name'
p69749
S'debug_stress_change'
p69750
sS'required'
p69751
I00
sS'group_name'
p69752
Nsa(dp69753
S'description'
p69754
S'The Newton-Raphson process is only deemed converged if the plastic strain increment constraints have L2 norm less than this.\n'
p69755
sS'cpp_type'
p69756
S'double'
p69757
sS'default'
p69758
g3
sS'name'
p69759
S'ep_plastic_tolerance'
p69760
sS'required'
p69761
I01
sS'group_name'
p69762
Nsa(dp69763
S'description'
p69764
S"The return-map algorithm will return with the best admissible stresses and internal parameters that it can, even if they don't fully correspond to the applied strain increment.  To speed computations, this flag can be set to true, the max_NR_iterations set small, and the min_stepsize large.\n"
p69765
sS'cpp_type'
p69766
S'bool'
p69767
sS'default'
p69768
S'0'
p69769
sS'name'
p69770
S'ignore_failures'
p69771
sS'required'
p69772
I00
sS'group_name'
p69773
Nsa(dp69774
S'description'
p69775
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p69776
sS'cpp_type'
p69777
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p69778
sS'default'
p69779
g3
sS'name'
p69780
S'initial_stress'
p69781
sS'required'
p69782
I00
sS'group_name'
p69783
Nsa(dp69784
S'description'
p69785
S'Flow directions are considered linearly dependent if the smallest singular value is less than linear_dependent times the largest singular value\n'
p69786
sS'cpp_type'
p69787
S'double'
p69788
sS'default'
p69789
S'0.0001'
p69790
sS'name'
p69791
S'linear_dependent'
p69792
sS'required'
p69793
I00
sS'group_name'
p69794
Nsa(dp69795
S'description'
p69796
S'Maximum number of Newton-Raphson iterations allowed\n'
p69797
sS'cpp_type'
p69798
S'unsigned int'
p69799
sS'default'
p69800
S'20'
p69801
sS'name'
p69802
S'max_NR_iterations'
p69803
sS'required'
p69804
I00
sS'group_name'
p69805
Nsa(dp69806
S'description'
p69807
S"If your deactivation_scheme is 'something_to_dumb', then 'dumb' will only be used if the stepsize falls below this value.  This parameter is useful because the 'dumb' scheme is computationally expensive\n"
p69808
sS'cpp_type'
p69809
S'double'
p69810
sS'default'
p69811
S'0.01'
p69812
sS'name'
p69813
S'max_stepsize_for_dumb'
p69814
sS'required'
p69815
I00
sS'group_name'
p69816
Nsa(dp69817
S'description'
p69818
S'If ordinary Newton-Raphson + line-search fails, then the applied strain increment is subdivided, and the return-map is tried again.  This parameter is the minimum fraction of applied strain increment that may be applied before the algorithm gives up entirely\n'
p69819
sS'cpp_type'
p69820
S'double'
p69821
sS'default'
p69822
S'0.01'
p69823
sS'name'
p69824
S'min_stepsize'
p69825
sS'required'
p69826
I00
sS'group_name'
p69827
Nsa(dp69828
S'description'
p69829
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p69830
sS'cpp_type'
p69831
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69832
sS'default'
p69833
g3
sS'name'
p69834
S'output_properties'
p69835
sS'required'
p69836
I00
sS'group_name'
p69837
S'Outputs'
p69838
sa(dp69839
S'description'
p69840
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p69841
sS'cpp_type'
p69842
S'std::vector<OutputName, std::allocator<OutputName> >'
p69843
sS'default'
p69844
S'none'
p69845
sS'name'
p69846
S'outputs'
p69847
sS'required'
p69848
I00
sS'group_name'
p69849
S'Outputs'
p69850
sa(dp69851
S'description'
p69852
S'List of names of user objects that define the plastic models that could be active for this material.\n'
p69853
sS'cpp_type'
p69854
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p69855
sS'default'
p69856
g3
sS'name'
p69857
S'plastic_models'
p69858
sS'required'
p69859
I01
sS'group_name'
p69860
Nsa(dp69861
S'description'
p69862
S'The seed for the master random number generator\n'
p69863
sS'cpp_type'
p69864
S'unsigned int'
p69865
sS'default'
p69866
S'0'
p69867
sS'name'
p69868
S'seed'
p69869
sS'required'
p69870
I00
sS'group_name'
p69871
S'Advanced'
p69872
sa(dp69873
S'name'
p69874
S'specialIC'
p69875
sS'cpp_type'
p69876
S'MooseEnum'
p69877
sS'default'
p69878
S'none'
p69879
sS'description'
p69880
S"For certain combinations of plastic models, the set of active constraints can be initialized optimally.  'none': no special initialization is performed.  For all other choices, the plastic_models must be chosen to have the following types.  'rock': 'TensileMulti MohrCoulombMulti'.  'joint': 'WeakPlaneTensile WeakPlaneShear'.\n"
p69881
sS'required'
p69882
I00
sS'options'
p69883
S'none rock joint'
p69884
sS'group_name'
p69885
Nsa(dp69886
S'description'
p69887
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p69888
sS'cpp_type'
p69889
S'bool'
p69890
sS'default'
p69891
S'0'
p69892
sS'name'
p69893
S'store_stress_old'
p69894
sS'required'
p69895
I00
sS'group_name'
p69896
Nsa(dp69897
S'name'
p69898
S'tangent_operator'
p69899
sS'cpp_type'
p69900
S'MooseEnum'
p69901
sS'default'
p69902
S'nonlinear'
p69903
sS'description'
p69904
S"Type of tangent operator to return.  'elastic': return the elasticity tensor.  'linear': return the consistent tangent operator that is correct for plasticity with yield functions linear in stress.  'nonlinear': return the full, general consistent tangent operator.  The calculations assume the hardening potentials are independent of stress and hardening parameters.\n"
p69905
sS'required'
p69906
I00
sS'options'
p69907
S'elastic linear nonlinear'
p69908
sS'group_name'
p69909
Nsa(dp69910
S'description'
p69911
S"If this parameter is provided, before the return-map algorithm is called a rotation is performed so that the 'z' axis in the new frame lies along the transverse_direction in the original frame.  After returning, the inverse rotation is performed.  The transverse_direction will itself rotate with large strains.  This is so that transversely-isotropic plasticity models may be easily defined in the frame where the isotropy holds in the x-y plane.\n"
p69912
sS'cpp_type'
p69913
S'libMesh::VectorValue<double>'
p69914
sS'default'
p69915
g3
sS'name'
p69916
S'transverse_direction'
p69917
sS'required'
p69918
I00
sS'group_name'
p69919
Nsa(dp69920
S'description'
p69921
g3
sS'cpp_type'
p69922
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69923
sS'default'
p69924
S'ComputeMultiPlasticityStress'
p69925
sS'name'
p69926
S'type'
p69927
sS'required'
p69928
I00
sS'group_name'
p69929
Nsa(dp69930
S'description'
p69931
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p69932
sS'cpp_type'
p69933
S'bool'
p69934
sS'default'
p69935
S'0'
p69936
sS'name'
p69937
S'use_displaced_mesh'
p69938
sS'required'
p69939
I00
sS'group_name'
p69940
S'Advanced'
p69941
sasS'name'
p69942
S'/Materials/ComputeMultiPlasticityStress'
p69943
sa(dp69944
S'description'
p69945
S'Compute a strain increment and rotation increment for finite strains under axisymmetric assumptions.\n'
p69946
sS'subblocks'
p69947
NsS'parameters'
p69948
(lp69949
(dp69950
S'description'
p69951
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p69952
sS'cpp_type'
p69953
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p69954
sS'default'
p69955
g3
sS'name'
p69956
S'base_name'
p69957
sS'required'
p69958
I00
sS'group_name'
p69959
Nsa(dp69960
S'description'
p69961
S'The list of block ids (SubdomainID) that this object will be applied\n'
p69962
sS'cpp_type'
p69963
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p69964
sS'default'
p69965
g3
sS'name'
p69966
S'block'
p69967
sS'required'
p69968
I00
sS'group_name'
p69969
Nsa(dp69970
S'description'
p69971
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p69972
sS'cpp_type'
p69973
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p69974
sS'default'
p69975
g3
sS'name'
p69976
S'boundary'
p69977
sS'required'
p69978
I00
sS'group_name'
p69979
Nsa(dp69980
S'description'
p69981
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p69982
sS'cpp_type'
p69983
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p69984
sS'default'
p69985
g3
sS'name'
p69986
S'control_tags'
p69987
sS'required'
p69988
I00
sS'group_name'
p69989
Nsa(dp69990
S'description'
p69991
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p69992
sS'cpp_type'
p69993
S'std::vector<VariableName>'
p69994
sS'default'
p69995
g3
sS'name'
p69996
S'displacements'
p69997
sS'required'
p69998
I01
sS'group_name'
p69999
Nsa(dp70000
S'description'
p70001
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70002
sS'cpp_type'
p70003
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70004
sS'default'
p70005
g3
sS'name'
p70006
S'output_properties'
p70007
sS'required'
p70008
I00
sS'group_name'
p70009
S'Outputs'
p70010
sa(dp70011
S'description'
p70012
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70013
sS'cpp_type'
p70014
S'std::vector<OutputName, std::allocator<OutputName> >'
p70015
sS'default'
p70016
S'none'
p70017
sS'name'
p70018
S'outputs'
p70019
sS'required'
p70020
I00
sS'group_name'
p70021
S'Outputs'
p70022
sa(dp70023
S'description'
p70024
S'The seed for the master random number generator\n'
p70025
sS'cpp_type'
p70026
S'unsigned int'
p70027
sS'default'
p70028
S'0'
p70029
sS'name'
p70030
S'seed'
p70031
sS'required'
p70032
I00
sS'group_name'
p70033
S'Advanced'
p70034
sa(dp70035
S'description'
p70036
S'temperature in Kelvin\n'
p70037
sS'cpp_type'
p70038
S'std::vector<VariableName>'
p70039
sS'default'
p70040
S'273'
p70041
sS'name'
p70042
S'temperature'
p70043
sS'required'
p70044
I00
sS'group_name'
p70045
Nsa(dp70046
S'description'
p70047
S'Reference temperature for thermal expansion in K\n'
p70048
sS'cpp_type'
p70049
S'double'
p70050
sS'default'
p70051
S'273'
p70052
sS'name'
p70053
S'temperature_ref'
p70054
sS'required'
p70055
I00
sS'group_name'
p70056
Nsa(dp70057
S'description'
p70058
S'Thermal expansion coefficient in 1/K\n'
p70059
sS'cpp_type'
p70060
S'double'
p70061
sS'default'
p70062
S'0'
p70063
sS'name'
p70064
S'thermal_expansion_coeff'
p70065
sS'required'
p70066
I00
sS'group_name'
p70067
Nsa(dp70068
S'description'
p70069
g3
sS'cpp_type'
p70070
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70071
sS'default'
p70072
S'ComputePlaneFiniteStrain'
p70073
sS'name'
p70074
S'type'
p70075
sS'required'
p70076
I00
sS'group_name'
p70077
Nsa(dp70078
S'description'
p70079
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70080
sS'cpp_type'
p70081
S'bool'
p70082
sS'default'
p70083
S'0'
p70084
sS'name'
p70085
S'use_displaced_mesh'
p70086
sS'required'
p70087
I00
sS'group_name'
p70088
S'Advanced'
p70089
sasS'name'
p70090
S'/Materials/ComputePlaneFiniteStrain'
p70091
sa(dp70092
S'description'
p70093
S'Compute a small strain under traditional plane strain assumptions where the out of plane strain is zero.\n'
p70094
sS'subblocks'
p70095
NsS'parameters'
p70096
(lp70097
(dp70098
S'description'
p70099
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p70100
sS'cpp_type'
p70101
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70102
sS'default'
p70103
g3
sS'name'
p70104
S'base_name'
p70105
sS'required'
p70106
I00
sS'group_name'
p70107
Nsa(dp70108
S'description'
p70109
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70110
sS'cpp_type'
p70111
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70112
sS'default'
p70113
g3
sS'name'
p70114
S'block'
p70115
sS'required'
p70116
I00
sS'group_name'
p70117
Nsa(dp70118
S'description'
p70119
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70120
sS'cpp_type'
p70121
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70122
sS'default'
p70123
g3
sS'name'
p70124
S'boundary'
p70125
sS'required'
p70126
I00
sS'group_name'
p70127
Nsa(dp70128
S'description'
p70129
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70130
sS'cpp_type'
p70131
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70132
sS'default'
p70133
g3
sS'name'
p70134
S'control_tags'
p70135
sS'required'
p70136
I00
sS'group_name'
p70137
Nsa(dp70138
S'description'
p70139
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p70140
sS'cpp_type'
p70141
S'std::vector<VariableName>'
p70142
sS'default'
p70143
g3
sS'name'
p70144
S'displacements'
p70145
sS'required'
p70146
I01
sS'group_name'
p70147
Nsa(dp70148
S'description'
p70149
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70150
sS'cpp_type'
p70151
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70152
sS'default'
p70153
g3
sS'name'
p70154
S'output_properties'
p70155
sS'required'
p70156
I00
sS'group_name'
p70157
S'Outputs'
p70158
sa(dp70159
S'description'
p70160
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70161
sS'cpp_type'
p70162
S'std::vector<OutputName, std::allocator<OutputName> >'
p70163
sS'default'
p70164
S'none'
p70165
sS'name'
p70166
S'outputs'
p70167
sS'required'
p70168
I00
sS'group_name'
p70169
S'Outputs'
p70170
sa(dp70171
S'description'
p70172
S'The seed for the master random number generator\n'
p70173
sS'cpp_type'
p70174
S'unsigned int'
p70175
sS'default'
p70176
S'0'
p70177
sS'name'
p70178
S'seed'
p70179
sS'required'
p70180
I00
sS'group_name'
p70181
S'Advanced'
p70182
sa(dp70183
S'description'
p70184
S'temperature in Kelvin\n'
p70185
sS'cpp_type'
p70186
S'std::vector<VariableName>'
p70187
sS'default'
p70188
S'273'
p70189
sS'name'
p70190
S'temperature'
p70191
sS'required'
p70192
I00
sS'group_name'
p70193
Nsa(dp70194
S'description'
p70195
S'Reference temperature for thermal expansion in K\n'
p70196
sS'cpp_type'
p70197
S'double'
p70198
sS'default'
p70199
S'273'
p70200
sS'name'
p70201
S'temperature_ref'
p70202
sS'required'
p70203
I00
sS'group_name'
p70204
Nsa(dp70205
S'description'
p70206
S'Thermal expansion coefficient in 1/K\n'
p70207
sS'cpp_type'
p70208
S'double'
p70209
sS'default'
p70210
S'0'
p70211
sS'name'
p70212
S'thermal_expansion_coeff'
p70213
sS'required'
p70214
I00
sS'group_name'
p70215
Nsa(dp70216
S'description'
p70217
g3
sS'cpp_type'
p70218
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70219
sS'default'
p70220
S'ComputePlaneSmallStrain'
p70221
sS'name'
p70222
S'type'
p70223
sS'required'
p70224
I00
sS'group_name'
p70225
Nsa(dp70226
S'description'
p70227
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70228
sS'cpp_type'
p70229
S'bool'
p70230
sS'default'
p70231
S'0'
p70232
sS'name'
p70233
S'use_displaced_mesh'
p70234
sS'required'
p70235
I00
sS'group_name'
p70236
S'Advanced'
p70237
sasS'name'
p70238
S'/Materials/ComputePlaneSmallStrain'
p70239
sa(dp70240
S'description'
p70241
S'Compute an evolving elasticity tensor coupled to a grain growth phase field model.\n'
p70242
sS'subblocks'
p70243
NsS'parameters'
p70244
(lp70245
(dp70246
S'description'
p70247
S'Vector containing elastic constants for fill method\n'
p70248
sS'cpp_type'
p70249
S'std::vector<double, std::allocator<double> >'
p70250
sS'default'
p70251
g3
sS'name'
p70252
S'Elastic_constants'
p70253
sS'required'
p70254
I01
sS'group_name'
p70255
Nsa(dp70256
S'description'
p70257
S'The GrainTracker UserObject to get values from.\n'
p70258
sS'cpp_type'
p70259
S'UserObjectName'
p70260
sS'default'
p70261
g3
sS'name'
p70262
S'GrainTracker_object'
p70263
sS'required'
p70264
I01
sS'group_name'
p70265
Nsa(dp70266
S'description'
p70267
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p70268
sS'cpp_type'
p70269
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70270
sS'default'
p70271
g3
sS'name'
p70272
S'base_name'
p70273
sS'required'
p70274
I00
sS'group_name'
p70275
Nsa(dp70276
S'description'
p70277
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70278
sS'cpp_type'
p70279
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70280
sS'default'
p70281
g3
sS'name'
p70282
S'block'
p70283
sS'required'
p70284
I00
sS'group_name'
p70285
Nsa(dp70286
S'description'
p70287
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70288
sS'cpp_type'
p70289
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70290
sS'default'
p70291
g3
sS'name'
p70292
S'boundary'
p70293
sS'required'
p70294
I00
sS'group_name'
p70295
Nsa(dp70296
S'description'
p70297
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70298
sS'cpp_type'
p70299
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70300
sS'default'
p70301
g3
sS'name'
p70302
S'control_tags'
p70303
sS'required'
p70304
I00
sS'group_name'
p70305
Nsa(dp70306
S'description'
p70307
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p70308
sS'cpp_type'
p70309
S'FunctionName'
p70310
sS'default'
p70311
g3
sS'name'
p70312
S'elasticity_tensor_prefactor'
p70313
sS'required'
p70314
I00
sS'group_name'
p70315
Nsa(dp70316
S'description'
p70317
S'Name of Euler angle provider user object\n'
p70318
sS'cpp_type'
p70319
S'UserObjectName'
p70320
sS'default'
p70321
g3
sS'name'
p70322
S'euler_angle_provider'
p70323
sS'required'
p70324
I01
sS'group_name'
p70325
Nsa(dp70326
S'name'
p70327
S'fill_method'
p70328
sS'cpp_type'
p70329
S'MooseEnum'
p70330
sS'default'
p70331
S'symmetric9'
p70332
sS'description'
p70333
S'The fill method\n'
p70334
sS'required'
p70335
I00
sS'options'
p70336
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p70337
sS'group_name'
p70338
Nsa(dp70339
S'description'
p70340
S'Number of initial grains that will be modeled\n'
p70341
sS'cpp_type'
p70342
S'unsigned int'
p70343
sS'default'
p70344
g3
sS'name'
p70345
S'grain_num'
p70346
sS'required'
p70347
I01
sS'group_name'
p70348
Nsa(dp70349
S'description'
p70350
S'Lengthscale of the problem, in meters\n'
p70351
sS'cpp_type'
p70352
S'double'
p70353
sS'default'
p70354
S'1e-09'
p70355
sS'name'
p70356
S'length_scale'
p70357
sS'required'
p70358
I00
sS'group_name'
p70359
Nsa(dp70360
S'description'
p70361
S'Array of coupled variables (num_name)\n'
p70362
sS'cpp_type'
p70363
S'unsigned int'
p70364
sS'default'
p70365
g3
sS'name'
p70366
S'op_num'
p70367
sS'required'
p70368
I00
sS'group_name'
p70369
Nsa(dp70370
S'description'
p70371
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70372
sS'cpp_type'
p70373
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70374
sS'default'
p70375
g3
sS'name'
p70376
S'output_properties'
p70377
sS'required'
p70378
I00
sS'group_name'
p70379
S'Outputs'
p70380
sa(dp70381
S'description'
p70382
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70383
sS'cpp_type'
p70384
S'std::vector<OutputName, std::allocator<OutputName> >'
p70385
sS'default'
p70386
S'none'
p70387
sS'name'
p70388
S'outputs'
p70389
sS'required'
p70390
I00
sS'group_name'
p70391
S'Outputs'
p70392
sa(dp70393
S'description'
p70394
S'Pressure scale of the problem, in pa\n'
p70395
sS'cpp_type'
p70396
S'double'
p70397
sS'default'
p70398
S'1e+06'
p70399
sS'name'
p70400
S'pressure_scale'
p70401
sS'required'
p70402
I00
sS'group_name'
p70403
Nsa(dp70404
S'description'
p70405
S'The seed for the master random number generator\n'
p70406
sS'cpp_type'
p70407
S'unsigned int'
p70408
sS'default'
p70409
S'0'
p70410
sS'name'
p70411
S'seed'
p70412
sS'required'
p70413
I00
sS'group_name'
p70414
S'Advanced'
p70415
sa(dp70416
S'description'
p70417
S'Number of extra elastic stiffnesses that are created to handle new grains\n'
p70418
sS'cpp_type'
p70419
S'unsigned int'
p70420
sS'default'
p70421
S'10'
p70422
sS'name'
p70423
S'stiffness_buffer'
p70424
sS'required'
p70425
I00
sS'group_name'
p70426
Nsa(dp70427
S'description'
p70428
g3
sS'cpp_type'
p70429
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70430
sS'default'
p70431
S'ComputePolycrystalElasticityTensor'
p70432
sS'name'
p70433
S'type'
p70434
sS'required'
p70435
I00
sS'group_name'
p70436
Nsa(dp70437
S'description'
p70438
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70439
sS'cpp_type'
p70440
S'bool'
p70441
sS'default'
p70442
S'0'
p70443
sS'name'
p70444
S'use_displaced_mesh'
p70445
sS'required'
p70446
I00
sS'group_name'
p70447
S'Advanced'
p70448
sa(dp70449
S'description'
p70450
S'Array of coupled variables\n'
p70451
sS'cpp_type'
p70452
S'std::vector<VariableName>'
p70453
sS'default'
p70454
g3
sS'name'
p70455
S'v'
p70456
sS'required'
p70457
I01
sS'group_name'
p70458
Nsa(dp70459
S'description'
p70460
S'Array of coupled variables (base_name)\n'
p70461
sS'cpp_type'
p70462
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70463
sS'default'
p70464
g3
sS'name'
p70465
S'var_name_base'
p70466
sS'required'
p70467
I00
sS'group_name'
p70468
NsasS'name'
p70469
S'/Materials/ComputePolycrystalElasticityTensor'
p70470
sa(dp70471
S'description'
p70472
S'Compute a small strain.\n'
p70473
sS'subblocks'
p70474
NsS'parameters'
p70475
(lp70476
(dp70477
S'description'
p70478
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p70479
sS'cpp_type'
p70480
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70481
sS'default'
p70482
g3
sS'name'
p70483
S'base_name'
p70484
sS'required'
p70485
I00
sS'group_name'
p70486
Nsa(dp70487
S'description'
p70488
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70489
sS'cpp_type'
p70490
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70491
sS'default'
p70492
g3
sS'name'
p70493
S'block'
p70494
sS'required'
p70495
I00
sS'group_name'
p70496
Nsa(dp70497
S'description'
p70498
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70499
sS'cpp_type'
p70500
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70501
sS'default'
p70502
g3
sS'name'
p70503
S'boundary'
p70504
sS'required'
p70505
I00
sS'group_name'
p70506
Nsa(dp70507
S'description'
p70508
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70509
sS'cpp_type'
p70510
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70511
sS'default'
p70512
g3
sS'name'
p70513
S'control_tags'
p70514
sS'required'
p70515
I00
sS'group_name'
p70516
Nsa(dp70517
S'description'
p70518
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p70519
sS'cpp_type'
p70520
S'std::vector<VariableName>'
p70521
sS'default'
p70522
g3
sS'name'
p70523
S'displacements'
p70524
sS'required'
p70525
I01
sS'group_name'
p70526
Nsa(dp70527
S'description'
p70528
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70529
sS'cpp_type'
p70530
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70531
sS'default'
p70532
g3
sS'name'
p70533
S'output_properties'
p70534
sS'required'
p70535
I00
sS'group_name'
p70536
S'Outputs'
p70537
sa(dp70538
S'description'
p70539
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70540
sS'cpp_type'
p70541
S'std::vector<OutputName, std::allocator<OutputName> >'
p70542
sS'default'
p70543
S'none'
p70544
sS'name'
p70545
S'outputs'
p70546
sS'required'
p70547
I00
sS'group_name'
p70548
S'Outputs'
p70549
sa(dp70550
S'description'
p70551
S'The seed for the master random number generator\n'
p70552
sS'cpp_type'
p70553
S'unsigned int'
p70554
sS'default'
p70555
S'0'
p70556
sS'name'
p70557
S'seed'
p70558
sS'required'
p70559
I00
sS'group_name'
p70560
S'Advanced'
p70561
sa(dp70562
S'description'
p70563
S'temperature in Kelvin\n'
p70564
sS'cpp_type'
p70565
S'std::vector<VariableName>'
p70566
sS'default'
p70567
S'273'
p70568
sS'name'
p70569
S'temperature'
p70570
sS'required'
p70571
I00
sS'group_name'
p70572
Nsa(dp70573
S'description'
p70574
S'Reference temperature for thermal expansion in K\n'
p70575
sS'cpp_type'
p70576
S'double'
p70577
sS'default'
p70578
S'273'
p70579
sS'name'
p70580
S'temperature_ref'
p70581
sS'required'
p70582
I00
sS'group_name'
p70583
Nsa(dp70584
S'description'
p70585
S'Thermal expansion coefficient in 1/K\n'
p70586
sS'cpp_type'
p70587
S'double'
p70588
sS'default'
p70589
S'0'
p70590
sS'name'
p70591
S'thermal_expansion_coeff'
p70592
sS'required'
p70593
I00
sS'group_name'
p70594
Nsa(dp70595
S'description'
p70596
g3
sS'cpp_type'
p70597
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70598
sS'default'
p70599
S'ComputeSmallStrain'
p70600
sS'name'
p70601
S'type'
p70602
sS'required'
p70603
I00
sS'group_name'
p70604
Nsa(dp70605
S'description'
p70606
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70607
sS'cpp_type'
p70608
S'bool'
p70609
sS'default'
p70610
S'0'
p70611
sS'name'
p70612
S'use_displaced_mesh'
p70613
sS'required'
p70614
I00
sS'group_name'
p70615
S'Advanced'
p70616
sasS'name'
p70617
S'/Materials/ComputeSmallStrain'
p70618
sa(dp70619
S'description'
p70620
S'Computes an Eigenstrain and its derivatives that is a function of multiple variables, where the prefactor is defined in a derivative material\n'
p70621
sS'subblocks'
p70622
NsS'parameters'
p70623
(lp70624
(dp70625
S'description'
p70626
S'variable dependencies for the prefactor\n'
p70627
sS'cpp_type'
p70628
S'std::vector<VariableName>'
p70629
sS'default'
p70630
g3
sS'name'
p70631
S'args'
p70632
sS'required'
p70633
I01
sS'group_name'
p70634
Nsa(dp70635
S'description'
p70636
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p70637
sS'cpp_type'
p70638
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70639
sS'default'
p70640
g3
sS'name'
p70641
S'base_name'
p70642
sS'required'
p70643
I00
sS'group_name'
p70644
Nsa(dp70645
S'description'
p70646
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70647
sS'cpp_type'
p70648
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70649
sS'default'
p70650
g3
sS'name'
p70651
S'block'
p70652
sS'required'
p70653
I00
sS'group_name'
p70654
Nsa(dp70655
S'description'
p70656
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70657
sS'cpp_type'
p70658
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70659
sS'default'
p70660
g3
sS'name'
p70661
S'boundary'
p70662
sS'required'
p70663
I00
sS'group_name'
p70664
Nsa(dp70665
S'description'
p70666
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70667
sS'cpp_type'
p70668
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70669
sS'default'
p70670
g3
sS'name'
p70671
S'control_tags'
p70672
sS'required'
p70673
I00
sS'group_name'
p70674
Nsa(dp70675
S'description'
p70676
S'Vector of values defining the constant base tensor for the Eigenstrain\n'
p70677
sS'cpp_type'
p70678
S'std::vector<double, std::allocator<double> >'
p70679
sS'default'
p70680
g3
sS'name'
p70681
S'eigen_base'
p70682
sS'required'
p70683
I01
sS'group_name'
p70684
Nsa(dp70685
S'description'
p70686
S'Should the StressFreestrain be in incremental form for finite strain methods?\n'
p70687
sS'cpp_type'
p70688
S'bool'
p70689
sS'default'
p70690
S'0'
p70691
sS'name'
p70692
S'incremental_form'
p70693
sS'required'
p70694
I00
sS'group_name'
p70695
Nsa(dp70696
S'description'
p70697
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70698
sS'cpp_type'
p70699
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70700
sS'default'
p70701
g3
sS'name'
p70702
S'output_properties'
p70703
sS'required'
p70704
I00
sS'group_name'
p70705
S'Outputs'
p70706
sa(dp70707
S'description'
p70708
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70709
sS'cpp_type'
p70710
S'std::vector<OutputName, std::allocator<OutputName> >'
p70711
sS'default'
p70712
S'none'
p70713
sS'name'
p70714
S'outputs'
p70715
sS'required'
p70716
I00
sS'group_name'
p70717
S'Outputs'
p70718
sa(dp70719
S'description'
p70720
S'Name of material defining the variable dependence\n'
p70721
sS'cpp_type'
p70722
S'MaterialPropertyName'
p70723
sS'default'
p70724
S'1'
p70725
sS'name'
p70726
S'prefactor'
p70727
sS'required'
p70728
I00
sS'group_name'
p70729
Nsa(dp70730
S'description'
p70731
S'The seed for the master random number generator\n'
p70732
sS'cpp_type'
p70733
S'unsigned int'
p70734
sS'default'
p70735
S'0'
p70736
sS'name'
p70737
S'seed'
p70738
sS'required'
p70739
I00
sS'group_name'
p70740
S'Advanced'
p70741
sa(dp70742
S'description'
p70743
g3
sS'cpp_type'
p70744
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70745
sS'default'
p70746
S'ComputeVariableEigenstrain'
p70747
sS'name'
p70748
S'type'
p70749
sS'required'
p70750
I00
sS'group_name'
p70751
Nsa(dp70752
S'description'
p70753
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70754
sS'cpp_type'
p70755
S'bool'
p70756
sS'default'
p70757
S'0'
p70758
sS'name'
p70759
S'use_displaced_mesh'
p70760
sS'required'
p70761
I00
sS'group_name'
p70762
S'Advanced'
p70763
sasS'name'
p70764
S'/Materials/ComputeVariableEigenstrain'
p70765
sa(dp70766
S'description'
p70767
S'Provide a constant mobility tensor value\n'
p70768
sS'subblocks'
p70769
NsS'parameters'
p70770
(lp70771
(dp70772
S'description'
p70773
S'Name of the mobility tensor porperty to generate\n'
p70774
sS'cpp_type'
p70775
S'MaterialPropertyName'
p70776
sS'default'
p70777
g3
sS'name'
p70778
S'M_name'
p70779
sS'required'
p70780
I01
sS'group_name'
p70781
Nsa(dp70782
S'description'
p70783
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70784
sS'cpp_type'
p70785
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70786
sS'default'
p70787
g3
sS'name'
p70788
S'block'
p70789
sS'required'
p70790
I00
sS'group_name'
p70791
Nsa(dp70792
S'description'
p70793
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70794
sS'cpp_type'
p70795
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70796
sS'default'
p70797
g3
sS'name'
p70798
S'boundary'
p70799
sS'required'
p70800
I00
sS'group_name'
p70801
Nsa(dp70802
S'description'
p70803
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70804
sS'cpp_type'
p70805
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70806
sS'default'
p70807
g3
sS'name'
p70808
S'control_tags'
p70809
sS'required'
p70810
I00
sS'group_name'
p70811
Nsa(dp70812
S'description'
p70813
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p70814
sS'cpp_type'
p70815
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70816
sS'default'
p70817
g3
sS'name'
p70818
S'output_properties'
p70819
sS'required'
p70820
I00
sS'group_name'
p70821
S'Outputs'
p70822
sa(dp70823
S'description'
p70824
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p70825
sS'cpp_type'
p70826
S'std::vector<OutputName, std::allocator<OutputName> >'
p70827
sS'default'
p70828
S'none'
p70829
sS'name'
p70830
S'outputs'
p70831
sS'required'
p70832
I00
sS'group_name'
p70833
S'Outputs'
p70834
sa(dp70835
S'description'
p70836
S'The seed for the master random number generator\n'
p70837
sS'cpp_type'
p70838
S'unsigned int'
p70839
sS'default'
p70840
S'0'
p70841
sS'name'
p70842
S'seed'
p70843
sS'required'
p70844
I00
sS'group_name'
p70845
S'Advanced'
p70846
sa(dp70847
S'description'
p70848
S'Tensor values\n'
p70849
sS'cpp_type'
p70850
S'std::vector<double, std::allocator<double> >'
p70851
sS'default'
p70852
g3
sS'name'
p70853
S'tensor'
p70854
sS'required'
p70855
I01
sS'group_name'
p70856
Nsa(dp70857
S'description'
p70858
g3
sS'cpp_type'
p70859
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70860
sS'default'
p70861
S'ConstantAnisotropicMobility'
p70862
sS'name'
p70863
S'type'
p70864
sS'required'
p70865
I00
sS'group_name'
p70866
Nsa(dp70867
S'description'
p70868
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p70869
sS'cpp_type'
p70870
S'bool'
p70871
sS'default'
p70872
S'0'
p70873
sS'name'
p70874
S'use_displaced_mesh'
p70875
sS'required'
p70876
I00
sS'group_name'
p70877
S'Advanced'
p70878
sasS'name'
p70879
S'/Materials/ConstantAnisotropicMobility'
p70880
sa(dp70881
S'description'
p70882
g3
sS'subblocks'
p70883
NsS'parameters'
p70884
(lp70885
(dp70886
S'description'
p70887
S'Flexural bending rigidity tensor.  Should have 9 entries.\n'
p70888
sS'cpp_type'
p70889
S'std::vector<double, std::allocator<double> >'
p70890
sS'default'
p70891
g3
sS'name'
p70892
S'B_ijkl'
p70893
sS'required'
p70894
I01
sS'group_name'
p70895
Nsa(dp70896
S'description'
p70897
S'Stiffness tensor for material\n'
p70898
sS'cpp_type'
p70899
S'std::vector<double, std::allocator<double> >'
p70900
sS'default'
p70901
g3
sS'name'
p70902
S'C_ijkl'
p70903
sS'required'
p70904
I01
sS'group_name'
p70905
Nsa(dp70906
S'description'
p70907
S'Temperature in Kelvin\n'
p70908
sS'cpp_type'
p70909
S'std::vector<VariableName>'
p70910
sS'default'
p70911
S'300'
p70912
sS'name'
p70913
S'T'
p70914
sS'required'
p70915
I00
sS'group_name'
p70916
Nsa(dp70917
S'description'
p70918
S'Reference temperature for thermal expansion in K\n'
p70919
sS'cpp_type'
p70920
S'double'
p70921
sS'default'
p70922
S'300'
p70923
sS'name'
p70924
S'T0'
p70925
sS'required'
p70926
I00
sS'group_name'
p70927
Nsa(dp70928
S'description'
p70929
S'Applied strain: e11, e22, e33, e23, e13, e12\n'
p70930
sS'cpp_type'
p70931
S'std::vector<double, std::allocator<double> >'
p70932
sS'default'
p70933
g3
sS'name'
p70934
S'applied_strain_vector'
p70935
sS'required'
p70936
I00
sS'group_name'
p70937
Nsa(dp70938
S'description'
p70939
S'Material property base name\n'
p70940
sS'cpp_type'
p70941
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p70942
sS'default'
p70943
g3
sS'name'
p70944
S'base_name'
p70945
sS'required'
p70946
I00
sS'group_name'
p70947
Nsa(dp70948
S'description'
p70949
S'The list of block ids (SubdomainID) that this object will be applied\n'
p70950
sS'cpp_type'
p70951
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p70952
sS'default'
p70953
g3
sS'name'
p70954
S'block'
p70955
sS'required'
p70956
I00
sS'group_name'
p70957
Nsa(dp70958
S'description'
p70959
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p70960
sS'cpp_type'
p70961
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p70962
sS'default'
p70963
g3
sS'name'
p70964
S'boundary'
p70965
sS'required'
p70966
I00
sS'group_name'
p70967
Nsa(dp70968
S'description'
p70969
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p70970
sS'cpp_type'
p70971
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p70972
sS'default'
p70973
g3
sS'name'
p70974
S'control_tags'
p70975
sS'required'
p70976
I00
sS'group_name'
p70977
Nsa(dp70978
S'description'
p70979
S'The x displacement\n'
p70980
sS'cpp_type'
p70981
S'std::vector<VariableName>'
p70982
sS'default'
p70983
g3
sS'name'
p70984
S'disp_x'
p70985
sS'required'
p70986
I01
sS'group_name'
p70987
Nsa(dp70988
S'description'
p70989
S'The y displacement\n'
p70990
sS'cpp_type'
p70991
S'std::vector<VariableName>'
p70992
sS'default'
p70993
g3
sS'name'
p70994
S'disp_y'
p70995
sS'required'
p70996
I01
sS'group_name'
p70997
Nsa(dp70998
S'description'
p70999
S'The z displacement\n'
p71000
sS'cpp_type'
p71001
S'std::vector<VariableName>'
p71002
sS'default'
p71003
g3
sS'name'
p71004
S'disp_z'
p71005
sS'required'
p71006
I00
sS'group_name'
p71007
Nsa(dp71008
S'description'
p71009
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p71010
sS'cpp_type'
p71011
S'FunctionName'
p71012
sS'default'
p71013
g3
sS'name'
p71014
S'elasticity_tensor_prefactor'
p71015
sS'required'
p71016
I00
sS'group_name'
p71017
Nsa(dp71018
S'description'
p71019
S'Euler angle in direction 1\n'
p71020
sS'cpp_type'
p71021
S'double'
p71022
sS'default'
p71023
S'0'
p71024
sS'name'
p71025
S'euler_angle_1'
p71026
sS'required'
p71027
I00
sS'group_name'
p71028
Nsa(dp71029
S'description'
p71030
S'Euler angle in direction 2\n'
p71031
sS'cpp_type'
p71032
S'double'
p71033
sS'default'
p71034
S'0'
p71035
sS'name'
p71036
S'euler_angle_2'
p71037
sS'required'
p71038
I00
sS'group_name'
p71039
Nsa(dp71040
S'description'
p71041
S'Euler angle in direction 3\n'
p71042
sS'cpp_type'
p71043
S'double'
p71044
sS'default'
p71045
S'0'
p71046
sS'name'
p71047
S'euler_angle_3'
p71048
sS'required'
p71049
I00
sS'group_name'
p71050
Nsa(dp71051
S'name'
p71052
S'fill_method'
p71053
sS'cpp_type'
p71054
S'MooseEnum'
p71055
sS'default'
p71056
S'symmetric9'
p71057
sS'description'
p71058
S'The fill method\n'
p71059
sS'required'
p71060
I00
sS'options'
p71061
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p71062
sS'group_name'
p71063
Nsa(dp71064
S'name'
p71065
S'fill_method_bending'
p71066
sS'cpp_type'
p71067
S'MooseEnum'
p71068
sS'default'
p71069
S'antisymmetric_isotropic'
p71070
sS'description'
p71071
S"The fill method for the 'bending' tensor.\n"
p71072
sS'required'
p71073
I00
sS'options'
p71074
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p71075
sS'group_name'
p71076
Nsa(dp71077
S'description'
p71078
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p71079
sS'cpp_type'
p71080
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p71081
sS'default'
p71082
g3
sS'name'
p71083
S'initial_stress'
p71084
sS'required'
p71085
I00
sS'group_name'
p71086
Nsa(dp71087
S'description'
p71088
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71089
sS'cpp_type'
p71090
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71091
sS'default'
p71092
g3
sS'name'
p71093
S'output_properties'
p71094
sS'required'
p71095
I00
sS'group_name'
p71096
S'Outputs'
p71097
sa(dp71098
S'description'
p71099
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71100
sS'cpp_type'
p71101
S'std::vector<OutputName, std::allocator<OutputName> >'
p71102
sS'default'
p71103
S'none'
p71104
sS'name'
p71105
S'outputs'
p71106
sS'required'
p71107
I00
sS'group_name'
p71108
S'Outputs'
p71109
sa(dp71110
S'description'
p71111
S'The seed for the master random number generator\n'
p71112
sS'cpp_type'
p71113
S'unsigned int'
p71114
sS'default'
p71115
S'0'
p71116
sS'name'
p71117
S'seed'
p71118
sS'required'
p71119
I00
sS'group_name'
p71120
S'Advanced'
p71121
sa(dp71122
S'description'
p71123
S'temperature variable\n'
p71124
sS'cpp_type'
p71125
S'std::vector<VariableName>'
p71126
sS'default'
p71127
g3
sS'name'
p71128
S'temperature'
p71129
sS'required'
p71130
I00
sS'group_name'
p71131
Nsa(dp71132
S'description'
p71133
S'Thermal expansion coefficient in 1/K\n'
p71134
sS'cpp_type'
p71135
S'double'
p71136
sS'default'
p71137
S'0'
p71138
sS'name'
p71139
S'thermal_expansion_coeff'
p71140
sS'required'
p71141
I00
sS'group_name'
p71142
Nsa(dp71143
S'description'
p71144
g3
sS'cpp_type'
p71145
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71146
sS'default'
p71147
S'CosseratLinearElasticMaterial'
p71148
sS'name'
p71149
S'type'
p71150
sS'required'
p71151
I00
sS'group_name'
p71152
Nsa(dp71153
S'description'
p71154
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71155
sS'cpp_type'
p71156
S'bool'
p71157
sS'default'
p71158
S'0'
p71159
sS'name'
p71160
S'use_displaced_mesh'
p71161
sS'required'
p71162
I00
sS'group_name'
p71163
S'Advanced'
p71164
sa(dp71165
S'description'
p71166
S'Cosserat rotation around x axis\n'
p71167
sS'cpp_type'
p71168
S'std::vector<VariableName>'
p71169
sS'default'
p71170
S'0'
p71171
sS'name'
p71172
S'wc_x'
p71173
sS'required'
p71174
I00
sS'group_name'
p71175
Nsa(dp71176
S'description'
p71177
S'Cosserat rotation around y axis\n'
p71178
sS'cpp_type'
p71179
S'std::vector<VariableName>'
p71180
sS'default'
p71181
S'0'
p71182
sS'name'
p71183
S'wc_y'
p71184
sS'required'
p71185
I00
sS'group_name'
p71186
Nsa(dp71187
S'description'
p71188
S'Cosserat rotation around z axis\n'
p71189
sS'cpp_type'
p71190
S'std::vector<VariableName>'
p71191
sS'default'
p71192
S'0'
p71193
sS'name'
p71194
S'wc_z'
p71195
sS'required'
p71196
I00
sS'group_name'
p71197
NsasS'name'
p71198
S'/Materials/CosseratLinearElasticMaterial'
p71199
sa(dp71200
S'description'
p71201
g3
sS'subblocks'
p71202
NsS'parameters'
p71203
(lp71204
(dp71205
S'description'
p71206
S'Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n'
p71207
sS'cpp_type'
p71208
S'std::vector<double, std::allocator<double> >'
p71209
sS'default'
p71210
g3
sS'name'
p71211
S'W_ij'
p71212
sS'required'
p71213
I01
sS'group_name'
p71214
Nsa(dp71215
S'description'
p71216
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71217
sS'cpp_type'
p71218
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71219
sS'default'
p71220
g3
sS'name'
p71221
S'block'
p71222
sS'required'
p71223
I00
sS'group_name'
p71224
Nsa(dp71225
S'description'
p71226
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71227
sS'cpp_type'
p71228
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71229
sS'default'
p71230
g3
sS'name'
p71231
S'boundary'
p71232
sS'required'
p71233
I00
sS'group_name'
p71234
Nsa(dp71235
S'description'
p71236
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71237
sS'cpp_type'
p71238
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71239
sS'default'
p71240
g3
sS'name'
p71241
S'control_tags'
p71242
sS'required'
p71243
I00
sS'group_name'
p71244
Nsa(dp71245
S'description'
p71246
S'eta_i order parameters, one for each h\n'
p71247
sS'cpp_type'
p71248
S'std::vector<VariableName>'
p71249
sS'default'
p71250
g3
sS'name'
p71251
S'etas'
p71252
sS'required'
p71253
I01
sS'group_name'
p71254
Nsa(dp71255
S'description'
p71256
S'actual name for g(eta_i)\n'
p71257
sS'cpp_type'
p71258
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71259
sS'default'
p71260
S'g'
p71261
sS'name'
p71262
S'function_name'
p71263
sS'required'
p71264
I00
sS'group_name'
p71265
Nsa(dp71266
S'name'
p71267
S'g_order'
p71268
sS'cpp_type'
p71269
S'MooseEnum'
p71270
sS'default'
p71271
S'SIMPLE'
p71272
sS'description'
p71273
S'Polynomial order of the switching function h(eta)\n'
p71274
sS'required'
p71275
I00
sS'options'
p71276
S'SIMPLE'
p71277
sS'group_name'
p71278
Nsa(dp71279
S'description'
p71280
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71281
sS'cpp_type'
p71282
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71283
sS'default'
p71284
g3
sS'name'
p71285
S'output_properties'
p71286
sS'required'
p71287
I00
sS'group_name'
p71288
S'Outputs'
p71289
sa(dp71290
S'description'
p71291
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71292
sS'cpp_type'
p71293
S'std::vector<OutputName, std::allocator<OutputName> >'
p71294
sS'default'
p71295
S'none'
p71296
sS'name'
p71297
S'outputs'
p71298
sS'required'
p71299
I00
sS'group_name'
p71300
S'Outputs'
p71301
sa(dp71302
S'description'
p71303
S'The seed for the master random number generator\n'
p71304
sS'cpp_type'
p71305
S'unsigned int'
p71306
sS'default'
p71307
S'0'
p71308
sS'name'
p71309
S'seed'
p71310
sS'required'
p71311
I00
sS'group_name'
p71312
S'Advanced'
p71313
sa(dp71314
S'description'
p71315
g3
sS'cpp_type'
p71316
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71317
sS'default'
p71318
S'CrossTermBarrierFunctionMaterial'
p71319
sS'name'
p71320
S'type'
p71321
sS'required'
p71322
I00
sS'group_name'
p71323
Nsa(dp71324
S'description'
p71325
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71326
sS'cpp_type'
p71327
S'bool'
p71328
sS'default'
p71329
S'0'
p71330
sS'name'
p71331
S'use_displaced_mesh'
p71332
sS'required'
p71333
I00
sS'group_name'
p71334
S'Advanced'
p71335
sasS'name'
p71336
S'/Materials/CrossTermBarrierFunctionMaterial'
p71337
sa(dp71338
S'description'
p71339
S'Material that holds the permeability tensor used in Darcy flow\n'
p71340
sS'subblocks'
p71341
NsS'parameters'
p71342
(lp71343
(dp71344
S'description'
p71345
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71346
sS'cpp_type'
p71347
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71348
sS'default'
p71349
g3
sS'name'
p71350
S'block'
p71351
sS'required'
p71352
I00
sS'group_name'
p71353
Nsa(dp71354
S'description'
p71355
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71356
sS'cpp_type'
p71357
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71358
sS'default'
p71359
g3
sS'name'
p71360
S'boundary'
p71361
sS'required'
p71362
I00
sS'group_name'
p71363
Nsa(dp71364
S'description'
p71365
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71366
sS'cpp_type'
p71367
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71368
sS'default'
p71369
g3
sS'name'
p71370
S'control_tags'
p71371
sS'required'
p71372
I00
sS'group_name'
p71373
Nsa(dp71374
S'description'
p71375
S'The permeability tensor (usually in m^2).\n'
p71376
sS'cpp_type'
p71377
S'libMesh::TensorValue<double>'
p71378
sS'default'
p71379
g3
sS'name'
p71380
S'mat_permeability'
p71381
sS'required'
p71382
I01
sS'group_name'
p71383
Nsa(dp71384
S'description'
p71385
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71386
sS'cpp_type'
p71387
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71388
sS'default'
p71389
g3
sS'name'
p71390
S'output_properties'
p71391
sS'required'
p71392
I00
sS'group_name'
p71393
S'Outputs'
p71394
sa(dp71395
S'description'
p71396
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71397
sS'cpp_type'
p71398
S'std::vector<OutputName, std::allocator<OutputName> >'
p71399
sS'default'
p71400
S'none'
p71401
sS'name'
p71402
S'outputs'
p71403
sS'required'
p71404
I00
sS'group_name'
p71405
S'Outputs'
p71406
sa(dp71407
S'description'
p71408
S'The seed for the master random number generator\n'
p71409
sS'cpp_type'
p71410
S'unsigned int'
p71411
sS'default'
p71412
S'0'
p71413
sS'name'
p71414
S'seed'
p71415
sS'required'
p71416
I00
sS'group_name'
p71417
S'Advanced'
p71418
sa(dp71419
S'description'
p71420
g3
sS'cpp_type'
p71421
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71422
sS'default'
p71423
S'DarcyMaterial'
p71424
sS'name'
p71425
S'type'
p71426
sS'required'
p71427
I00
sS'group_name'
p71428
Nsa(dp71429
S'description'
p71430
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71431
sS'cpp_type'
p71432
S'bool'
p71433
sS'default'
p71434
S'0'
p71435
sS'name'
p71436
S'use_displaced_mesh'
p71437
sS'required'
p71438
I00
sS'group_name'
p71439
S'Advanced'
p71440
sasS'name'
p71441
S'/Materials/DarcyMaterial'
p71442
sa(dp71443
S'description'
p71444
g3
sS'subblocks'
p71445
NsS'parameters'
p71446
(lp71447
(dp71448
S'description'
p71449
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71450
sS'cpp_type'
p71451
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71452
sS'default'
p71453
g3
sS'name'
p71454
S'block'
p71455
sS'required'
p71456
I00
sS'group_name'
p71457
Nsa(dp71458
S'description'
p71459
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71460
sS'cpp_type'
p71461
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71462
sS'default'
p71463
g3
sS'name'
p71464
S'boundary'
p71465
sS'required'
p71466
I00
sS'group_name'
p71467
Nsa(dp71468
S'description'
p71469
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71470
sS'cpp_type'
p71471
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71472
sS'default'
p71473
g3
sS'name'
p71474
S'control_tags'
p71475
sS'required'
p71476
I00
sS'group_name'
p71477
Nsa(dp71478
S'description'
p71479
S'Density\n'
p71480
sS'cpp_type'
p71481
S'double'
p71482
sS'default'
p71483
g3
sS'name'
p71484
S'density'
p71485
sS'required'
p71486
I01
sS'group_name'
p71487
Nsa(dp71488
S'description'
p71489
S'The r displacement\n'
p71490
sS'cpp_type'
p71491
S'std::vector<VariableName>'
p71492
sS'default'
p71493
g3
sS'name'
p71494
S'disp_r'
p71495
sS'required'
p71496
I00
sS'group_name'
p71497
Nsa(dp71498
S'description'
p71499
S'The x displacement\n'
p71500
sS'cpp_type'
p71501
S'std::vector<VariableName>'
p71502
sS'default'
p71503
g3
sS'name'
p71504
S'disp_x'
p71505
sS'required'
p71506
I00
sS'group_name'
p71507
Nsa(dp71508
S'description'
p71509
S'The y displacement\n'
p71510
sS'cpp_type'
p71511
S'std::vector<VariableName>'
p71512
sS'default'
p71513
g3
sS'name'
p71514
S'disp_y'
p71515
sS'required'
p71516
I00
sS'group_name'
p71517
Nsa(dp71518
S'description'
p71519
S'The z displacement\n'
p71520
sS'cpp_type'
p71521
S'std::vector<VariableName>'
p71522
sS'default'
p71523
g3
sS'name'
p71524
S'disp_z'
p71525
sS'required'
p71526
I00
sS'group_name'
p71527
Nsa(dp71528
S'description'
p71529
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71530
sS'cpp_type'
p71531
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71532
sS'default'
p71533
g3
sS'name'
p71534
S'output_properties'
p71535
sS'required'
p71536
I00
sS'group_name'
p71537
S'Outputs'
p71538
sa(dp71539
S'description'
p71540
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71541
sS'cpp_type'
p71542
S'std::vector<OutputName, std::allocator<OutputName> >'
p71543
sS'default'
p71544
S'none'
p71545
sS'name'
p71546
S'outputs'
p71547
sS'required'
p71548
I00
sS'group_name'
p71549
S'Outputs'
p71550
sa(dp71551
S'description'
p71552
S'The seed for the master random number generator\n'
p71553
sS'cpp_type'
p71554
S'unsigned int'
p71555
sS'default'
p71556
S'0'
p71557
sS'name'
p71558
S'seed'
p71559
sS'required'
p71560
I00
sS'group_name'
p71561
S'Advanced'
p71562
sa(dp71563
S'description'
p71564
g3
sS'cpp_type'
p71565
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71566
sS'default'
p71567
S'Density'
p71568
sS'name'
p71569
S'type'
p71570
sS'required'
p71571
I00
sS'group_name'
p71572
Nsa(dp71573
S'description'
p71574
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71575
sS'cpp_type'
p71576
S'bool'
p71577
sS'default'
p71578
S'0'
p71579
sS'name'
p71580
S'use_displaced_mesh'
p71581
sS'required'
p71582
I00
sS'group_name'
p71583
S'Advanced'
p71584
sasS'name'
p71585
S'/Materials/Density'
p71586
sa(dp71587
S'description'
p71588
S'Two phase material that combines n phase materials using a switching function with and n nonconserved order parameters (to be used with SwitchingFunctionConstraint*).\n'
p71589
sS'subblocks'
p71590
NsS'parameters'
p71591
(lp71592
(dp71593
S'description'
p71594
S'Energy barrier for the phase transformation from A to B\n'
p71595
sS'cpp_type'
p71596
S'double'
p71597
sS'default'
p71598
S'0'
p71599
sS'name'
p71600
S'W'
p71601
sS'required'
p71602
I00
sS'group_name'
p71603
Nsa(dp71604
S'description'
p71605
S'Arguments of the fi free energies - use vector coupling\n'
p71606
sS'cpp_type'
p71607
S'std::vector<VariableName>'
p71608
sS'default'
p71609
g3
sS'name'
p71610
S'args'
p71611
sS'required'
p71612
I00
sS'group_name'
p71613
Nsa(dp71614
S'description'
p71615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71616
sS'cpp_type'
p71617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71618
sS'default'
p71619
g3
sS'name'
p71620
S'block'
p71621
sS'required'
p71622
I00
sS'group_name'
p71623
Nsa(dp71624
S'description'
p71625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71626
sS'cpp_type'
p71627
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71628
sS'default'
p71629
g3
sS'name'
p71630
S'boundary'
p71631
sS'required'
p71632
I00
sS'group_name'
p71633
Nsa(dp71634
S'description'
p71635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71636
sS'cpp_type'
p71637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71638
sS'default'
p71639
g3
sS'name'
p71640
S'control_tags'
p71641
sS'required'
p71642
I00
sS'group_name'
p71643
Nsa(dp71644
S'description'
p71645
S'Maximum order of derivatives taken (2 or 3)\n'
p71646
sS'cpp_type'
p71647
S'unsigned int'
p71648
sS'default'
p71649
S'3'
p71650
sS'name'
p71651
S'derivative_order'
p71652
sS'required'
p71653
I00
sS'group_name'
p71654
Nsa(dp71655
S'description'
p71656
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p71657
sS'cpp_type'
p71658
S'std::vector<VariableName>'
p71659
sS'default'
p71660
g3
sS'name'
p71661
S'displacement_gradients'
p71662
sS'required'
p71663
I00
sS'group_name'
p71664
Nsa(dp71665
S'description'
p71666
S'Order parameters for all phases.\n'
p71667
sS'cpp_type'
p71668
S'std::vector<VariableName>'
p71669
sS'default'
p71670
g3
sS'name'
p71671
S'etas'
p71672
sS'required'
p71673
I00
sS'group_name'
p71674
Nsa(dp71675
S'description'
p71676
S'Base name of the free energy function (used to name the material properties)\n'
p71677
sS'cpp_type'
p71678
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71679
sS'default'
p71680
S'F'
p71681
sS'name'
p71682
S'f_name'
p71683
sS'required'
p71684
I00
sS'group_name'
p71685
Nsa(dp71686
S'description'
p71687
S'List of free energies for the n phases\n'
p71688
sS'cpp_type'
p71689
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p71690
sS'default'
p71691
g3
sS'name'
p71692
S'fi_names'
p71693
sS'required'
p71694
I01
sS'group_name'
p71695
Nsa(dp71696
S'description'
p71697
S'Barrier Function Material that provides g(eta_i)\n'
p71698
sS'cpp_type'
p71699
S'MaterialPropertyName'
p71700
sS'default'
p71701
S'g'
p71702
sS'name'
p71703
S'g'
p71704
sS'required'
p71705
I00
sS'group_name'
p71706
Nsa(dp71707
S'description'
p71708
S'Switching Function Materials that provide h(eta_i)\n'
p71709
sS'cpp_type'
p71710
S'std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >'
p71711
sS'default'
p71712
g3
sS'name'
p71713
S'hi_names'
p71714
sS'required'
p71715
I00
sS'group_name'
p71716
Nsa(dp71717
S'description'
p71718
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71719
sS'cpp_type'
p71720
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71721
sS'default'
p71722
g3
sS'name'
p71723
S'output_properties'
p71724
sS'required'
p71725
I00
sS'group_name'
p71726
S'Outputs'
p71727
sa(dp71728
S'description'
p71729
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71730
sS'cpp_type'
p71731
S'std::vector<OutputName, std::allocator<OutputName> >'
p71732
sS'default'
p71733
S'none'
p71734
sS'name'
p71735
S'outputs'
p71736
sS'required'
p71737
I00
sS'group_name'
p71738
S'Outputs'
p71739
sa(dp71740
S'description'
p71741
S'The seed for the master random number generator\n'
p71742
sS'cpp_type'
p71743
S'unsigned int'
p71744
sS'default'
p71745
S'0'
p71746
sS'name'
p71747
S'seed'
p71748
sS'required'
p71749
I00
sS'group_name'
p71750
S'Advanced'
p71751
sa(dp71752
S'description'
p71753
S'Flag to indicate if third derivatives are needed\n'
p71754
sS'cpp_type'
p71755
S'bool'
p71756
sS'default'
p71757
g3
sS'name'
p71758
S'third_derivatives'
p71759
sS'required'
p71760
I00
sS'group_name'
p71761
Nsa(dp71762
S'description'
p71763
g3
sS'cpp_type'
p71764
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71765
sS'default'
p71766
S'DerivativeMultiPhaseMaterial'
p71767
sS'name'
p71768
S'type'
p71769
sS'required'
p71770
I00
sS'group_name'
p71771
Nsa(dp71772
S'description'
p71773
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p71774
sS'cpp_type'
p71775
S'bool'
p71776
sS'default'
p71777
S'0'
p71778
sS'name'
p71779
S'use_displaced_mesh'
p71780
sS'required'
p71781
I00
sS'group_name'
p71782
S'Advanced'
p71783
sasS'name'
p71784
S'/Materials/DerivativeMultiPhaseMaterial'
p71785
sa(dp71786
S'description'
p71787
S'Parsed Function Material with automatic derivatives.\n'
p71788
sS'subblocks'
p71789
NsS'parameters'
p71790
(lp71791
(dp71792
S'description'
p71793
S'Arguments of F() - use vector coupling\n'
p71794
sS'cpp_type'
p71795
S'std::vector<VariableName>'
p71796
sS'default'
p71797
g3
sS'name'
p71798
S'args'
p71799
sS'required'
p71800
I00
sS'group_name'
p71801
Nsa(dp71802
S'description'
p71803
S'The list of block ids (SubdomainID) that this object will be applied\n'
p71804
sS'cpp_type'
p71805
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p71806
sS'default'
p71807
g3
sS'name'
p71808
S'block'
p71809
sS'required'
p71810
I00
sS'group_name'
p71811
Nsa(dp71812
S'description'
p71813
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p71814
sS'cpp_type'
p71815
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p71816
sS'default'
p71817
g3
sS'name'
p71818
S'boundary'
p71819
sS'required'
p71820
I00
sS'group_name'
p71821
Nsa(dp71822
S'description'
p71823
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p71824
sS'cpp_type'
p71825
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71826
sS'default'
p71827
g3
sS'name'
p71828
S'constant_expressions'
p71829
sS'required'
p71830
I00
sS'group_name'
p71831
Nsa(dp71832
S'description'
p71833
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p71834
sS'cpp_type'
p71835
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71836
sS'default'
p71837
g3
sS'name'
p71838
S'constant_names'
p71839
sS'required'
p71840
I00
sS'group_name'
p71841
Nsa(dp71842
S'description'
p71843
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p71844
sS'cpp_type'
p71845
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71846
sS'default'
p71847
g3
sS'name'
p71848
S'control_tags'
p71849
sS'required'
p71850
I00
sS'group_name'
p71851
Nsa(dp71852
S'description'
p71853
S'Maximum order of derivatives taken\n'
p71854
sS'cpp_type'
p71855
S'unsigned int'
p71856
sS'default'
p71857
S'3'
p71858
sS'name'
p71859
S'derivative_order'
p71860
sS'required'
p71861
I00
sS'group_name'
p71862
Nsa(dp71863
S'description'
p71864
S'Disable the function parser algebraic optimizer\n'
p71865
sS'cpp_type'
p71866
S'bool'
p71867
sS'default'
p71868
S'0'
p71869
sS'name'
p71870
S'disable_fpoptimizer'
p71871
sS'required'
p71872
I00
sS'group_name'
p71873
Nsa(dp71874
S'description'
p71875
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p71876
sS'cpp_type'
p71877
S'bool'
p71878
sS'default'
p71879
S'1'
p71880
sS'name'
p71881
S'enable_jit'
p71882
sS'required'
p71883
I00
sS'group_name'
p71884
Nsa(dp71885
S'description'
p71886
S'Base name of the free energy function (used to name the material properties)\n'
p71887
sS'cpp_type'
p71888
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71889
sS'default'
p71890
S'F'
p71891
sS'name'
p71892
S'f_name'
p71893
sS'required'
p71894
I00
sS'group_name'
p71895
Nsa(dp71896
S'description'
p71897
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p71898
sS'cpp_type'
p71899
S'bool'
p71900
sS'default'
p71901
S'0'
p71902
sS'name'
p71903
S'fail_on_evalerror'
p71904
sS'required'
p71905
I00
sS'group_name'
p71906
Nsa(dp71907
S'description'
p71908
S'FParser function expression for the phase free energy\n'
p71909
sS'cpp_type'
p71910
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71911
sS'default'
p71912
g3
sS'name'
p71913
S'function'
p71914
sS'required'
p71915
I01
sS'group_name'
p71916
Nsa(dp71917
S'description'
p71918
S'Vector of material properties used in the parsed function\n'
p71919
sS'cpp_type'
p71920
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71921
sS'default'
p71922
g3
sS'name'
p71923
S'material_property_names'
p71924
sS'required'
p71925
I00
sS'group_name'
p71926
Nsa(dp71927
S'description'
p71928
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p71929
sS'cpp_type'
p71930
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71931
sS'default'
p71932
g3
sS'name'
p71933
S'output_properties'
p71934
sS'required'
p71935
I00
sS'group_name'
p71936
S'Outputs'
p71937
sa(dp71938
S'description'
p71939
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p71940
sS'cpp_type'
p71941
S'std::vector<OutputName, std::allocator<OutputName> >'
p71942
sS'default'
p71943
S'none'
p71944
sS'name'
p71945
S'outputs'
p71946
sS'required'
p71947
I00
sS'group_name'
p71948
S'Outputs'
p71949
sa(dp71950
S'description'
p71951
S'The seed for the master random number generator\n'
p71952
sS'cpp_type'
p71953
S'unsigned int'
p71954
sS'default'
p71955
S'0'
p71956
sS'name'
p71957
S'seed'
p71958
sS'required'
p71959
I00
sS'group_name'
p71960
S'Advanced'
p71961
sa(dp71962
S'description'
p71963
S'Flag to indicate if third derivatives are needed\n'
p71964
sS'cpp_type'
p71965
S'bool'
p71966
sS'default'
p71967
g3
sS'name'
p71968
S'third_derivatives'
p71969
sS'required'
p71970
I00
sS'group_name'
p71971
Nsa(dp71972
S'description'
p71973
S'Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n'
p71974
sS'cpp_type'
p71975
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p71976
sS'default'
p71977
g3
sS'name'
p71978
S'tol_names'
p71979
sS'required'
p71980
I00
sS'group_name'
p71981
Nsa(dp71982
S'description'
p71983
S'Vector of tolerance values for the variables in tol_names\n'
p71984
sS'cpp_type'
p71985
S'std::vector<double, std::allocator<double> >'
p71986
sS'default'
p71987
g3
sS'name'
p71988
S'tol_values'
p71989
sS'required'
p71990
I00
sS'group_name'
p71991
Nsa(dp71992
S'description'
p71993
g3
sS'cpp_type'
p71994
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p71995
sS'default'
p71996
S'DerivativeParsedMaterial'
p71997
sS'name'
p71998
S'type'
p71999
sS'required'
p72000
I00
sS'group_name'
p72001
Nsa(dp72002
S'description'
p72003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p72004
sS'cpp_type'
p72005
S'bool'
p72006
sS'default'
p72007
S'0'
p72008
sS'name'
p72009
S'use_displaced_mesh'
p72010
sS'required'
p72011
I00
sS'group_name'
p72012
S'Advanced'
p72013
sasS'name'
p72014
S'/Materials/DerivativeParsedMaterial'
p72015
sa(dp72016
S'description'
p72017
S'Meta-material to sum up multiple derivative materials\n'
p72018
sS'subblocks'
p72019
NsS'parameters'
p72020
(lp72021
(dp72022
S'description'
p72023
S'Arguments of the free energy functions being summed - use vector coupling\n'
p72024
sS'cpp_type'
p72025
S'std::vector<VariableName>'
p72026
sS'default'
p72027
g3
sS'name'
p72028
S'args'
p72029
sS'required'
p72030
I01
sS'group_name'
p72031
Nsa(dp72032
S'description'
p72033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72034
sS'cpp_type'
p72035
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72036
sS'default'
p72037
g3
sS'name'
p72038
S'block'
p72039
sS'required'
p72040
I00
sS'group_name'
p72041
Nsa(dp72042
S'description'
p72043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72044
sS'cpp_type'
p72045
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72046
sS'default'
p72047
g3
sS'name'
p72048
S'boundary'
p72049
sS'required'
p72050
I00
sS'group_name'
p72051
Nsa(dp72052
S'description'
p72053
S'Constant to be added to the prefactor multiplied sum.\n'
p72054
sS'cpp_type'
p72055
S'double'
p72056
sS'default'
p72057
S'0'
p72058
sS'name'
p72059
S'constant'
p72060
sS'required'
p72061
I00
sS'group_name'
p72062
S'Advanced'
p72063
sa(dp72064
S'description'
p72065
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72066
sS'cpp_type'
p72067
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72068
sS'default'
p72069
g3
sS'name'
p72070
S'control_tags'
p72071
sS'required'
p72072
I00
sS'group_name'
p72073
Nsa(dp72074
S'description'
p72075
S'Maximum order of derivatives taken (2 or 3)\n'
p72076
sS'cpp_type'
p72077
S'unsigned int'
p72078
sS'default'
p72079
S'3'
p72080
sS'name'
p72081
S'derivative_order'
p72082
sS'required'
p72083
I00
sS'group_name'
p72084
Nsa(dp72085
S'description'
p72086
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p72087
sS'cpp_type'
p72088
S'std::vector<VariableName>'
p72089
sS'default'
p72090
g3
sS'name'
p72091
S'displacement_gradients'
p72092
sS'required'
p72093
I00
sS'group_name'
p72094
Nsa(dp72095
S'description'
p72096
S'Base name of the free energy function (used to name the material properties)\n'
p72097
sS'cpp_type'
p72098
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72099
sS'default'
p72100
S'F'
p72101
sS'name'
p72102
S'f_name'
p72103
sS'required'
p72104
I00
sS'group_name'
p72105
Nsa(dp72106
S'description'
p72107
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72108
sS'cpp_type'
p72109
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72110
sS'default'
p72111
g3
sS'name'
p72112
S'output_properties'
p72113
sS'required'
p72114
I00
sS'group_name'
p72115
S'Outputs'
p72116
sa(dp72117
S'description'
p72118
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72119
sS'cpp_type'
p72120
S'std::vector<OutputName, std::allocator<OutputName> >'
p72121
sS'default'
p72122
S'none'
p72123
sS'name'
p72124
S'outputs'
p72125
sS'required'
p72126
I00
sS'group_name'
p72127
S'Outputs'
p72128
sa(dp72129
S'description'
p72130
S'Prefactor to multiply the sum term with.\n'
p72131
sS'cpp_type'
p72132
S'std::vector<double, std::allocator<double> >'
p72133
sS'default'
p72134
g3
sS'name'
p72135
S'prefactor'
p72136
sS'required'
p72137
I00
sS'group_name'
p72138
S'Advanced'
p72139
sa(dp72140
S'description'
p72141
S'The seed for the master random number generator\n'
p72142
sS'cpp_type'
p72143
S'unsigned int'
p72144
sS'default'
p72145
S'0'
p72146
sS'name'
p72147
S'seed'
p72148
sS'required'
p72149
I00
sS'group_name'
p72150
S'Advanced'
p72151
sa(dp72152
S'description'
p72153
S'Base name of the free energy function (used to name the material properties)\n'
p72154
sS'cpp_type'
p72155
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72156
sS'default'
p72157
g3
sS'name'
p72158
S'sum_materials'
p72159
sS'required'
p72160
I00
sS'group_name'
p72161
Nsa(dp72162
S'description'
p72163
S'Flag to indicate if third derivatives are needed\n'
p72164
sS'cpp_type'
p72165
S'bool'
p72166
sS'default'
p72167
g3
sS'name'
p72168
S'third_derivatives'
p72169
sS'required'
p72170
I00
sS'group_name'
p72171
Nsa(dp72172
S'description'
p72173
g3
sS'cpp_type'
p72174
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72175
sS'default'
p72176
S'DerivativeSumMaterial'
p72177
sS'name'
p72178
S'type'
p72179
sS'required'
p72180
I00
sS'group_name'
p72181
Nsa(dp72182
S'description'
p72183
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p72184
sS'cpp_type'
p72185
S'bool'
p72186
sS'default'
p72187
S'0'
p72188
sS'name'
p72189
S'use_displaced_mesh'
p72190
sS'required'
p72191
I00
sS'group_name'
p72192
S'Advanced'
p72193
sasS'name'
p72194
S'/Materials/DerivativeSumMaterial'
p72195
sa(dp72196
S'description'
p72197
S'Two phase material that combines two single phase materials using a switching function.\n'
p72198
sS'subblocks'
p72199
NsS'parameters'
p72200
(lp72201
(dp72202
S'description'
p72203
S'Energy barrier for the phase transformation from A to B\n'
p72204
sS'cpp_type'
p72205
S'double'
p72206
sS'default'
p72207
S'0'
p72208
sS'name'
p72209
S'W'
p72210
sS'required'
p72211
I00
sS'group_name'
p72212
Nsa(dp72213
S'description'
p72214
S'Arguments of fa and fb - use vector coupling\n'
p72215
sS'cpp_type'
p72216
S'std::vector<VariableName>'
p72217
sS'default'
p72218
g3
sS'name'
p72219
S'args'
p72220
sS'required'
p72221
I00
sS'group_name'
p72222
Nsa(dp72223
S'description'
p72224
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72225
sS'cpp_type'
p72226
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72227
sS'default'
p72228
g3
sS'name'
p72229
S'block'
p72230
sS'required'
p72231
I00
sS'group_name'
p72232
Nsa(dp72233
S'description'
p72234
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72235
sS'cpp_type'
p72236
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72237
sS'default'
p72238
g3
sS'name'
p72239
S'boundary'
p72240
sS'required'
p72241
I00
sS'group_name'
p72242
Nsa(dp72243
S'description'
p72244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72245
sS'cpp_type'
p72246
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72247
sS'default'
p72248
g3
sS'name'
p72249
S'control_tags'
p72250
sS'required'
p72251
I00
sS'group_name'
p72252
Nsa(dp72253
S'description'
p72254
S'Maximum order of derivatives taken (2 or 3)\n'
p72255
sS'cpp_type'
p72256
S'unsigned int'
p72257
sS'default'
p72258
S'3'
p72259
sS'name'
p72260
S'derivative_order'
p72261
sS'required'
p72262
I00
sS'group_name'
p72263
Nsa(dp72264
S'description'
p72265
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p72266
sS'cpp_type'
p72267
S'std::vector<VariableName>'
p72268
sS'default'
p72269
g3
sS'name'
p72270
S'displacement_gradients'
p72271
sS'required'
p72272
I00
sS'group_name'
p72273
Nsa(dp72274
S'description'
p72275
S'Order parameter\n'
p72276
sS'cpp_type'
p72277
S'std::vector<VariableName>'
p72278
sS'default'
p72279
g3
sS'name'
p72280
S'eta'
p72281
sS'required'
p72282
I01
sS'group_name'
p72283
Nsa(dp72284
S'description'
p72285
S'Base name of the free energy function (used to name the material properties)\n'
p72286
sS'cpp_type'
p72287
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72288
sS'default'
p72289
S'F'
p72290
sS'name'
p72291
S'f_name'
p72292
sS'required'
p72293
I00
sS'group_name'
p72294
Nsa(dp72295
S'description'
p72296
S'Phase A material (at eta=0)\n'
p72297
sS'cpp_type'
p72298
S'MaterialPropertyName'
p72299
sS'default'
p72300
g3
sS'name'
p72301
S'fa_name'
p72302
sS'required'
p72303
I01
sS'group_name'
p72304
Nsa(dp72305
S'description'
p72306
S'Phase A material (at eta=1)\n'
p72307
sS'cpp_type'
p72308
S'MaterialPropertyName'
p72309
sS'default'
p72310
g3
sS'name'
p72311
S'fb_name'
p72312
sS'required'
p72313
I01
sS'group_name'
p72314
Nsa(dp72315
S'description'
p72316
S'Barrier Function Material that provides g(eta)\n'
p72317
sS'cpp_type'
p72318
S'MaterialPropertyName'
p72319
sS'default'
p72320
S'g'
p72321
sS'name'
p72322
S'g'
p72323
sS'required'
p72324
I00
sS'group_name'
p72325
Nsa(dp72326
S'description'
p72327
S'Switching Function Material that provides h(eta)\n'
p72328
sS'cpp_type'
p72329
S'MaterialPropertyName'
p72330
sS'default'
p72331
S'h'
p72332
sS'name'
p72333
S'h'
p72334
sS'required'
p72335
I00
sS'group_name'
p72336
Nsa(dp72337
S'description'
p72338
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72339
sS'cpp_type'
p72340
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72341
sS'default'
p72342
g3
sS'name'
p72343
S'output_properties'
p72344
sS'required'
p72345
I00
sS'group_name'
p72346
S'Outputs'
p72347
sa(dp72348
S'description'
p72349
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72350
sS'cpp_type'
p72351
S'std::vector<OutputName, std::allocator<OutputName> >'
p72352
sS'default'
p72353
S'none'
p72354
sS'name'
p72355
S'outputs'
p72356
sS'required'
p72357
I00
sS'group_name'
p72358
S'Outputs'
p72359
sa(dp72360
S'description'
p72361
S'The seed for the master random number generator\n'
p72362
sS'cpp_type'
p72363
S'unsigned int'
p72364
sS'default'
p72365
S'0'
p72366
sS'name'
p72367
S'seed'
p72368
sS'required'
p72369
I00
sS'group_name'
p72370
S'Advanced'
p72371
sa(dp72372
S'description'
p72373
S'Flag to indicate if third derivatives are needed\n'
p72374
sS'cpp_type'
p72375
S'bool'
p72376
sS'default'
p72377
g3
sS'name'
p72378
S'third_derivatives'
p72379
sS'required'
p72380
I00
sS'group_name'
p72381
Nsa(dp72382
S'description'
p72383
g3
sS'cpp_type'
p72384
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72385
sS'default'
p72386
S'DerivativeTwoPhaseMaterial'
p72387
sS'name'
p72388
S'type'
p72389
sS'required'
p72390
I00
sS'group_name'
p72391
Nsa(dp72392
S'description'
p72393
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p72394
sS'cpp_type'
p72395
S'bool'
p72396
sS'default'
p72397
S'0'
p72398
sS'name'
p72399
S'use_displaced_mesh'
p72400
sS'required'
p72401
I00
sS'group_name'
p72402
S'Advanced'
p72403
sasS'name'
p72404
S'/Materials/DerivativeTwoPhaseMaterial'
p72405
sa(dp72406
S'description'
p72407
S'Free energy contribution for nucleating discrete particles\n'
p72408
sS'subblocks'
p72409
NsS'parameters'
p72410
(lp72411
(dp72412
S'description'
p72413
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72414
sS'cpp_type'
p72415
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72416
sS'default'
p72417
g3
sS'name'
p72418
S'block'
p72419
sS'required'
p72420
I00
sS'group_name'
p72421
Nsa(dp72422
S'description'
p72423
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72424
sS'cpp_type'
p72425
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72426
sS'default'
p72427
g3
sS'name'
p72428
S'boundary'
p72429
sS'required'
p72430
I00
sS'group_name'
p72431
Nsa(dp72432
S'description'
p72433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72434
sS'cpp_type'
p72435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72436
sS'default'
p72437
g3
sS'name'
p72438
S'control_tags'
p72439
sS'required'
p72440
I00
sS'group_name'
p72441
Nsa(dp72442
S'description'
p72443
S'Maximum order of derivatives taken (2 or 3)\n'
p72444
sS'cpp_type'
p72445
S'unsigned int'
p72446
sS'default'
p72447
S'3'
p72448
sS'name'
p72449
S'derivative_order'
p72450
sS'required'
p72451
I00
sS'group_name'
p72452
Nsa(dp72453
S'description'
p72454
S'Base name of the free energy function (used to name the material properties)\n'
p72455
sS'cpp_type'
p72456
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72457
sS'default'
p72458
S'F'
p72459
sS'name'
p72460
S'f_name'
p72461
sS'required'
p72462
I00
sS'group_name'
p72463
Nsa(dp72464
S'description'
p72465
S'DiscreteNucleationMap user object\n'
p72466
sS'cpp_type'
p72467
S'UserObjectName'
p72468
sS'default'
p72469
g3
sS'name'
p72470
S'map'
p72471
sS'required'
p72472
I01
sS'group_name'
p72473
Nsa(dp72474
S'description'
p72475
S'List of variables to force to a target concentration value\n'
p72476
sS'cpp_type'
p72477
S'std::vector<VariableName>'
p72478
sS'default'
p72479
g3
sS'name'
p72480
S'op_names'
p72481
sS'required'
p72482
I01
sS'group_name'
p72483
Nsa(dp72484
S'description'
p72485
S'List of target concentration values\n'
p72486
sS'cpp_type'
p72487
S'std::vector<double, std::allocator<double> >'
p72488
sS'default'
p72489
g3
sS'name'
p72490
S'op_values'
p72491
sS'required'
p72492
I01
sS'group_name'
p72493
Nsa(dp72494
S'description'
p72495
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72496
sS'cpp_type'
p72497
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72498
sS'default'
p72499
g3
sS'name'
p72500
S'output_properties'
p72501
sS'required'
p72502
I00
sS'group_name'
p72503
S'Outputs'
p72504
sa(dp72505
S'description'
p72506
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72507
sS'cpp_type'
p72508
S'std::vector<OutputName, std::allocator<OutputName> >'
p72509
sS'default'
p72510
S'none'
p72511
sS'name'
p72512
S'outputs'
p72513
sS'required'
p72514
I00
sS'group_name'
p72515
S'Outputs'
p72516
sa(dp72517
S'description'
p72518
S'Penalty factor for enforcing the target concentrations\n'
p72519
sS'cpp_type'
p72520
S'double'
p72521
sS'default'
p72522
S'20'
p72523
sS'name'
p72524
S'penalty'
p72525
sS'required'
p72526
I00
sS'group_name'
p72527
Nsa(dp72528
S'name'
p72529
S'penalty_mode'
p72530
sS'cpp_type'
p72531
S'MooseEnum'
p72532
sS'default'
p72533
S'MATCH'
p72534
sS'description'
p72535
S'Match the target concentration or take it as a minimum or maximum concentration target\n'
p72536
sS'required'
p72537
I00
sS'options'
p72538
S'MATCH MIN MAX'
p72539
sS'group_name'
p72540
Nsa(dp72541
S'description'
p72542
S'The seed for the master random number generator\n'
p72543
sS'cpp_type'
p72544
S'unsigned int'
p72545
sS'default'
p72546
S'0'
p72547
sS'name'
p72548
S'seed'
p72549
sS'required'
p72550
I00
sS'group_name'
p72551
S'Advanced'
p72552
sa(dp72553
S'description'
p72554
S'Flag to indicate if third derivatives are needed\n'
p72555
sS'cpp_type'
p72556
S'bool'
p72557
sS'default'
p72558
g3
sS'name'
p72559
S'third_derivatives'
p72560
sS'required'
p72561
I00
sS'group_name'
p72562
Nsa(dp72563
S'description'
p72564
g3
sS'cpp_type'
p72565
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72566
sS'default'
p72567
S'DiscreteNucleation'
p72568
sS'name'
p72569
S'type'
p72570
sS'required'
p72571
I00
sS'group_name'
p72572
Nsa(dp72573
S'description'
p72574
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p72575
sS'cpp_type'
p72576
S'bool'
p72577
sS'default'
p72578
S'0'
p72579
sS'name'
p72580
S'use_displaced_mesh'
p72581
sS'required'
p72582
I00
sS'group_name'
p72583
S'Advanced'
p72584
sasS'name'
p72585
S'/Materials/DiscreteNucleation'
p72586
sa(dp72587
S'description'
p72588
g3
sS'subblocks'
p72589
NsS'parameters'
p72590
(lp72591
(dp72592
S'description'
p72593
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p72594
sS'cpp_type'
p72595
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p72596
sS'default'
p72597
g3
sS'name'
p72598
S'active_crack_planes'
p72599
sS'required'
p72600
I00
sS'group_name'
p72601
Nsa(dp72602
S'description'
p72603
S'Name appended to material properties to make them unique\n'
p72604
sS'cpp_type'
p72605
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72606
sS'default'
p72607
g3
sS'name'
p72608
S'appended_property_name'
p72609
sS'required'
p72610
I00
sS'group_name'
p72611
Nsa(dp72612
S'description'
p72613
S'The list of block ids (SubdomainID) that this object will be applied\n'
p72614
sS'cpp_type'
p72615
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p72616
sS'default'
p72617
g3
sS'name'
p72618
S'block'
p72619
sS'required'
p72620
I00
sS'group_name'
p72621
Nsa(dp72622
S'description'
p72623
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p72624
sS'cpp_type'
p72625
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p72626
sS'default'
p72627
g3
sS'name'
p72628
S'boundary'
p72629
sS'required'
p72630
I00
sS'group_name'
p72631
Nsa(dp72632
S'description'
p72633
S'The bulk modulus for the material.\n'
p72634
sS'cpp_type'
p72635
S'double'
p72636
sS'default'
p72637
g3
sS'name'
p72638
S'bulk_modulus'
p72639
sS'required'
p72640
I00
sS'group_name'
p72641
Nsa(dp72642
S'description'
p72643
S'Whether to compute the J Integral.\n'
p72644
sS'cpp_type'
p72645
S'bool'
p72646
sS'default'
p72647
S'0'
p72648
sS'name'
p72649
S'compute_JIntegral'
p72650
sS'required'
p72651
I00
sS'group_name'
p72652
Nsa(dp72653
S'description'
p72654
S'ConstitutiveModel to use (optional)\n'
p72655
sS'cpp_type'
p72656
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72657
sS'default'
p72658
g3
sS'name'
p72659
S'constitutive_model'
p72660
sS'required'
p72661
I00
sS'group_name'
p72662
Nsa(dp72663
S'description'
p72664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p72665
sS'cpp_type'
p72666
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72667
sS'default'
p72668
g3
sS'name'
p72669
S'control_tags'
p72670
sS'required'
p72671
I00
sS'group_name'
p72672
Nsa(dp72673
S'description'
p72674
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p72675
sS'cpp_type'
p72676
S'double'
p72677
sS'default'
p72678
g3
sS'name'
p72679
S'cracking_neg_fraction'
p72680
sS'required'
p72681
I00
sS'group_name'
p72682
Nsa(dp72683
S'description'
p72684
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p72685
sS'cpp_type'
p72686
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72687
sS'default'
p72688
S'abrupt'
p72689
sS'name'
p72690
S'cracking_release'
p72691
sS'required'
p72692
I00
sS'group_name'
p72693
Nsa(dp72694
S'description'
p72695
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p72696
sS'cpp_type'
p72697
S'double'
p72698
sS'default'
p72699
S'0'
p72700
sS'name'
p72701
S'cracking_residual_stress'
p72702
sS'required'
p72703
I00
sS'group_name'
p72704
Nsa(dp72705
S'description'
p72706
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p72707
sS'cpp_type'
p72708
S'double'
p72709
sS'default'
p72710
S'0'
p72711
sS'name'
p72712
S'cracking_stress'
p72713
sS'required'
p72714
I00
sS'group_name'
p72715
Nsa(dp72716
S'description'
p72717
S'The cracking stress as a function of time and location\n'
p72718
sS'cpp_type'
p72719
S'FunctionName'
p72720
sS'default'
p72721
g3
sS'name'
p72722
S'cracking_stress_function'
p72723
sS'required'
p72724
I00
sS'group_name'
p72725
Nsa(dp72726
S'description'
p72727
S'Names of material properties this material depends on.\n'
p72728
sS'cpp_type'
p72729
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72730
sS'default'
p72731
g3
sS'name'
p72732
S'dep_matl_props'
p72733
sS'required'
p72734
I00
sS'group_name'
p72735
Nsa(dp72736
S'description'
p72737
S'The r displacement\n'
p72738
sS'cpp_type'
p72739
S'std::vector<VariableName>'
p72740
sS'default'
p72741
g3
sS'name'
p72742
S'disp_r'
p72743
sS'required'
p72744
I00
sS'group_name'
p72745
Nsa(dp72746
S'description'
p72747
S'The x displacement\n'
p72748
sS'cpp_type'
p72749
S'std::vector<VariableName>'
p72750
sS'default'
p72751
g3
sS'name'
p72752
S'disp_x'
p72753
sS'required'
p72754
I00
sS'group_name'
p72755
Nsa(dp72756
S'description'
p72757
S'The y displacement\n'
p72758
sS'cpp_type'
p72759
S'std::vector<VariableName>'
p72760
sS'default'
p72761
g3
sS'name'
p72762
S'disp_y'
p72763
sS'required'
p72764
I00
sS'group_name'
p72765
Nsa(dp72766
S'description'
p72767
S'The z displacement\n'
p72768
sS'cpp_type'
p72769
S'std::vector<VariableName>'
p72770
sS'default'
p72771
g3
sS'name'
p72772
S'disp_z'
p72773
sS'required'
p72774
I00
sS'group_name'
p72775
Nsa(dp72776
S'name'
p72777
S'formulation'
p72778
sS'cpp_type'
p72779
S'MooseEnum'
p72780
sS'default'
p72781
g3
sS'description'
p72782
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p72783
sS'required'
p72784
I00
sS'options'
p72785
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p72786
sS'group_name'
p72787
Nsa(dp72788
S'description'
p72789
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p72790
sS'cpp_type'
p72791
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p72792
sS'default'
p72793
S'RashidApprox'
p72794
sS'name'
p72795
S'increment_calculation'
p72796
sS'required'
p72797
I00
sS'group_name'
p72798
Nsa(dp72799
S'description'
p72800
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p72801
sS'cpp_type'
p72802
S'std::vector<double, std::allocator<double> >'
p72803
sS'default'
p72804
g3
sS'name'
p72805
S'initial_stress'
p72806
sS'required'
p72807
I00
sS'group_name'
p72808
Nsa(dp72809
S'description'
p72810
S"Lame's first parameter for the material.\n"
p72811
sS'cpp_type'
p72812
S'double'
p72813
sS'default'
p72814
g3
sS'name'
p72815
S'lambda'
p72816
sS'required'
p72817
I00
sS'group_name'
p72818
Nsa(dp72819
S'description'
p72820
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p72821
sS'cpp_type'
p72822
S'bool'
p72823
sS'default'
p72824
S'0'
p72825
sS'name'
p72826
S'large_strain'
p72827
sS'required'
p72828
I00
sS'group_name'
p72829
Nsa(dp72830
S'description'
p72831
S'The maximum number of cracks allowed at a material point.\n'
p72832
sS'cpp_type'
p72833
S'unsigned int'
p72834
sS'default'
p72835
S'3'
p72836
sS'name'
p72837
S'max_cracks'
p72838
sS'required'
p72839
I00
sS'group_name'
p72840
Nsa(dp72841
S'description'
p72842
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p72843
sS'cpp_type'
p72844
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p72845
sS'default'
p72846
g3
sS'name'
p72847
S'output_properties'
p72848
sS'required'
p72849
I00
sS'group_name'
p72850
S'Outputs'
p72851
sa(dp72852
S'description'
p72853
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p72854
sS'cpp_type'
p72855
S'std::vector<OutputName, std::allocator<OutputName> >'
p72856
sS'default'
p72857
S'none'
p72858
sS'name'
p72859
S'outputs'
p72860
sS'required'
p72861
I00
sS'group_name'
p72862
S'Outputs'
p72863
sa(dp72864
S'description'
p72865
S"Poisson's ratio for the material.\n"
p72866
sS'cpp_type'
p72867
S'double'
p72868
sS'default'
p72869
g3
sS'name'
p72870
S'poissons_ratio'
p72871
sS'required'
p72872
I00
sS'group_name'
p72873
Nsa(dp72874
S'description'
p72875
S"Poisson's ratio as a function of temperature.\n"
p72876
sS'cpp_type'
p72877
S'FunctionName'
p72878
sS'default'
p72879
g3
sS'name'
p72880
S'poissons_ratio_function'
p72881
sS'required'
p72882
I00
sS'group_name'
p72883
Nsa(dp72884
S'description'
p72885
S'The zz strain (scalar variable)\n'
p72886
sS'cpp_type'
p72887
S'std::vector<VariableName>'
p72888
sS'default'
p72889
g3
sS'name'
p72890
S'scalar_strain_zz'
p72891
sS'required'
p72892
I00
sS'group_name'
p72893
Nsa(dp72894
S'description'
p72895
S'The seed for the master random number generator\n'
p72896
sS'cpp_type'
p72897
S'unsigned int'
p72898
sS'default'
p72899
S'0'
p72900
sS'name'
p72901
S'seed'
p72902
sS'required'
p72903
I00
sS'group_name'
p72904
S'Advanced'
p72905
sa(dp72906
S'description'
p72907
S'The shear modulus of the material.\n'
p72908
sS'cpp_type'
p72909
S'double'
p72910
sS'default'
p72911
g3
sS'name'
p72912
S'shear_modulus'
p72913
sS'required'
p72914
I00
sS'group_name'
p72915
Nsa(dp72916
S'description'
p72917
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p72918
sS'cpp_type'
p72919
S'bool'
p72920
sS'default'
p72921
S'0'
p72922
sS'name'
p72923
S'store_stress_older'
p72924
sS'required'
p72925
I00
sS'group_name'
p72926
Nsa(dp72927
S'description'
p72928
S'The zz strain\n'
p72929
sS'cpp_type'
p72930
S'std::vector<VariableName>'
p72931
sS'default'
p72932
g3
sS'name'
p72933
S'strain_zz'
p72934
sS'required'
p72935
I00
sS'group_name'
p72936
Nsa(dp72937
S'description'
p72938
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p72939
sS'cpp_type'
p72940
S'double'
p72941
sS'default'
p72942
g3
sS'name'
p72943
S'stress_free_temperature'
p72944
sS'required'
p72945
I00
sS'group_name'
p72946
Nsa(dp72947
S'description'
p72948
S'Coupled Temperature\n'
p72949
sS'cpp_type'
p72950
S'std::vector<VariableName>'
p72951
sS'default'
p72952
g3
sS'name'
p72953
S'temp'
p72954
sS'required'
p72955
I00
sS'group_name'
p72956
Nsa(dp72957
S'description'
p72958
S'The thermal expansion coefficient.\n'
p72959
sS'cpp_type'
p72960
S'double'
p72961
sS'default'
p72962
g3
sS'name'
p72963
S'thermal_expansion'
p72964
sS'required'
p72965
I00
sS'group_name'
p72966
Nsa(dp72967
S'description'
p72968
S'Thermal expansion coefficient as a function of temperature.\n'
p72969
sS'cpp_type'
p72970
S'FunctionName'
p72971
sS'default'
p72972
g3
sS'name'
p72973
S'thermal_expansion_function'
p72974
sS'required'
p72975
I00
sS'group_name'
p72976
Nsa(dp72977
S'name'
p72978
S'thermal_expansion_function_type'
p72979
sS'cpp_type'
p72980
S'MooseEnum'
p72981
sS'default'
p72982
g3
sS'description'
p72983
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p72984
sS'required'
p72985
I00
sS'options'
p72986
S'instantaneous mean'
p72987
sS'group_name'
p72988
Nsa(dp72989
S'description'
p72990
S'Reference temperature for mean thermal expansion function.\n'
p72991
sS'cpp_type'
p72992
S'double'
p72993
sS'default'
p72994
g3
sS'name'
p72995
S'thermal_expansion_reference_temperature'
p72996
sS'required'
p72997
I00
sS'group_name'
p72998
Nsa(dp72999
S'description'
p73000
g3
sS'cpp_type'
p73001
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73002
sS'default'
p73003
S'Elastic'
p73004
sS'name'
p73005
S'type'
p73006
sS'required'
p73007
I00
sS'group_name'
p73008
Nsa(dp73009
S'description'
p73010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73011
sS'cpp_type'
p73012
S'bool'
p73013
sS'default'
p73014
S'0'
p73015
sS'name'
p73016
S'use_displaced_mesh'
p73017
sS'required'
p73018
I00
sS'group_name'
p73019
S'Advanced'
p73020
sa(dp73021
S'description'
p73022
S"Young's modulus of the material.\n"
p73023
sS'cpp_type'
p73024
S'double'
p73025
sS'default'
p73026
g3
sS'name'
p73027
S'youngs_modulus'
p73028
sS'required'
p73029
I00
sS'group_name'
p73030
Nsa(dp73031
S'description'
p73032
S"Young's modulus as a function of temperature.\n"
p73033
sS'cpp_type'
p73034
S'FunctionName'
p73035
sS'default'
p73036
g3
sS'name'
p73037
S'youngs_modulus_function'
p73038
sS'required'
p73039
I00
sS'group_name'
p73040
NsasS'name'
p73041
S'/Materials/Elastic'
p73042
sa(dp73043
S'description'
p73044
S'Free energy material for the elastic energy contributions.\n'
p73045
sS'subblocks'
p73046
NsS'parameters'
p73047
(lp73048
(dp73049
S'description'
p73050
S'Arguments of F() - use vector coupling\n'
p73051
sS'cpp_type'
p73052
S'std::vector<VariableName>'
p73053
sS'default'
p73054
g3
sS'name'
p73055
S'args'
p73056
sS'required'
p73057
I01
sS'group_name'
p73058
Nsa(dp73059
S'description'
p73060
S'Material property base name\n'
p73061
sS'cpp_type'
p73062
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73063
sS'default'
p73064
g3
sS'name'
p73065
S'base_name'
p73066
sS'required'
p73067
I00
sS'group_name'
p73068
Nsa(dp73069
S'description'
p73070
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73071
sS'cpp_type'
p73072
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73073
sS'default'
p73074
g3
sS'name'
p73075
S'block'
p73076
sS'required'
p73077
I00
sS'group_name'
p73078
Nsa(dp73079
S'description'
p73080
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73081
sS'cpp_type'
p73082
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73083
sS'default'
p73084
g3
sS'name'
p73085
S'boundary'
p73086
sS'required'
p73087
I00
sS'group_name'
p73088
Nsa(dp73089
S'description'
p73090
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73091
sS'cpp_type'
p73092
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73093
sS'default'
p73094
g3
sS'name'
p73095
S'control_tags'
p73096
sS'required'
p73097
I00
sS'group_name'
p73098
Nsa(dp73099
S'description'
p73100
S'Maximum order of derivatives taken (2 or 3)\n'
p73101
sS'cpp_type'
p73102
S'unsigned int'
p73103
sS'default'
p73104
S'3'
p73105
sS'name'
p73106
S'derivative_order'
p73107
sS'required'
p73108
I00
sS'group_name'
p73109
Nsa(dp73110
S'description'
p73111
S'Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n'
p73112
sS'cpp_type'
p73113
S'std::vector<VariableName>'
p73114
sS'default'
p73115
g3
sS'name'
p73116
S'displacement_gradients'
p73117
sS'required'
p73118
I00
sS'group_name'
p73119
Nsa(dp73120
S'description'
p73121
S'Base name of the free energy function (used to name the material properties)\n'
p73122
sS'cpp_type'
p73123
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73124
sS'default'
p73125
S'F'
p73126
sS'name'
p73127
S'f_name'
p73128
sS'required'
p73129
I00
sS'group_name'
p73130
Nsa(dp73131
S'description'
p73132
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73133
sS'cpp_type'
p73134
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73135
sS'default'
p73136
g3
sS'name'
p73137
S'output_properties'
p73138
sS'required'
p73139
I00
sS'group_name'
p73140
S'Outputs'
p73141
sa(dp73142
S'description'
p73143
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73144
sS'cpp_type'
p73145
S'std::vector<OutputName, std::allocator<OutputName> >'
p73146
sS'default'
p73147
S'none'
p73148
sS'name'
p73149
S'outputs'
p73150
sS'required'
p73151
I00
sS'group_name'
p73152
S'Outputs'
p73153
sa(dp73154
S'description'
p73155
S'The seed for the master random number generator\n'
p73156
sS'cpp_type'
p73157
S'unsigned int'
p73158
sS'default'
p73159
S'0'
p73160
sS'name'
p73161
S'seed'
p73162
sS'required'
p73163
I00
sS'group_name'
p73164
S'Advanced'
p73165
sa(dp73166
S'description'
p73167
S'Flag to indicate if third derivatives are needed\n'
p73168
sS'cpp_type'
p73169
S'bool'
p73170
sS'default'
p73171
g3
sS'name'
p73172
S'third_derivatives'
p73173
sS'required'
p73174
I00
sS'group_name'
p73175
Nsa(dp73176
S'description'
p73177
g3
sS'cpp_type'
p73178
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73179
sS'default'
p73180
S'ElasticEnergyMaterial'
p73181
sS'name'
p73182
S'type'
p73183
sS'required'
p73184
I00
sS'group_name'
p73185
Nsa(dp73186
S'description'
p73187
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73188
sS'cpp_type'
p73189
S'bool'
p73190
sS'default'
p73191
S'0'
p73192
sS'name'
p73193
S'use_displaced_mesh'
p73194
sS'required'
p73195
I00
sS'group_name'
p73196
S'Advanced'
p73197
sasS'name'
p73198
S'/Materials/ElasticEnergyMaterial'
p73199
sa(dp73200
S'description'
p73201
g3
sS'subblocks'
p73202
NsS'parameters'
p73203
(lp73204
(dp73205
S'description'
p73206
S'Absolute convergence tolerance for sub-newtion iteration\n'
p73207
sS'cpp_type'
p73208
S'double'
p73209
sS'default'
p73210
S'1e-20'
p73211
sS'name'
p73212
S'absolute_tolerance'
p73213
sS'required'
p73214
I00
sS'group_name'
p73215
Nsa(dp73216
S'description'
p73217
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73218
sS'cpp_type'
p73219
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73220
sS'default'
p73221
g3
sS'name'
p73222
S'block'
p73223
sS'required'
p73224
I00
sS'group_name'
p73225
Nsa(dp73226
S'description'
p73227
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73228
sS'cpp_type'
p73229
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73230
sS'default'
p73231
g3
sS'name'
p73232
S'boundary'
p73233
sS'required'
p73234
I00
sS'group_name'
p73235
Nsa(dp73236
S'description'
p73237
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73238
sS'cpp_type'
p73239
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73240
sS'default'
p73241
g3
sS'name'
p73242
S'control_tags'
p73243
sS'required'
p73244
I00
sS'group_name'
p73245
Nsa(dp73246
S'description'
p73247
S'Maximum number of sub-newton iterations\n'
p73248
sS'cpp_type'
p73249
S'unsigned int'
p73250
sS'default'
p73251
S'30'
p73252
sS'name'
p73253
S'max_its'
p73254
sS'required'
p73255
I00
sS'group_name'
p73256
Nsa(dp73257
S'description'
p73258
S'Set true to output sub-newton iteration information\n'
p73259
sS'cpp_type'
p73260
S'bool'
p73261
sS'default'
p73262
S'0'
p73263
sS'name'
p73264
S'output_iteration_info'
p73265
sS'required'
p73266
I00
sS'group_name'
p73267
Nsa(dp73268
S'description'
p73269
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73270
sS'cpp_type'
p73271
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73272
sS'default'
p73273
g3
sS'name'
p73274
S'output_properties'
p73275
sS'required'
p73276
I00
sS'group_name'
p73277
S'Outputs'
p73278
sa(dp73279
S'description'
p73280
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73281
sS'cpp_type'
p73282
S'std::vector<OutputName, std::allocator<OutputName> >'
p73283
sS'default'
p73284
S'none'
p73285
sS'name'
p73286
S'outputs'
p73287
sS'required'
p73288
I00
sS'group_name'
p73289
S'Outputs'
p73290
sa(dp73291
S'description'
p73292
S'Relative convergence tolerance for sub-newtion iteration\n'
p73293
sS'cpp_type'
p73294
S'double'
p73295
sS'default'
p73296
S'1e-05'
p73297
sS'name'
p73298
S'relative_tolerance'
p73299
sS'required'
p73300
I00
sS'group_name'
p73301
Nsa(dp73302
S'description'
p73303
S'The seed for the master random number generator\n'
p73304
sS'cpp_type'
p73305
S'unsigned int'
p73306
sS'default'
p73307
S'0'
p73308
sS'name'
p73309
S'seed'
p73310
sS'required'
p73311
I00
sS'group_name'
p73312
S'Advanced'
p73313
sa(dp73314
S'description'
p73315
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p73316
sS'cpp_type'
p73317
S'double'
p73318
sS'default'
p73319
g3
sS'name'
p73320
S'stress_free_temperature'
p73321
sS'required'
p73322
I00
sS'group_name'
p73323
Nsa(dp73324
S'description'
p73325
S'Coupled Temperature\n'
p73326
sS'cpp_type'
p73327
S'std::vector<VariableName>'
p73328
sS'default'
p73329
g3
sS'name'
p73330
S'temp'
p73331
sS'required'
p73332
I00
sS'group_name'
p73333
Nsa(dp73334
S'description'
p73335
S'The thermal expansion coefficient.\n'
p73336
sS'cpp_type'
p73337
S'double'
p73338
sS'default'
p73339
g3
sS'name'
p73340
S'thermal_expansion'
p73341
sS'required'
p73342
I00
sS'group_name'
p73343
Nsa(dp73344
S'description'
p73345
S'Thermal expansion coefficient as a function of temperature.\n'
p73346
sS'cpp_type'
p73347
S'FunctionName'
p73348
sS'default'
p73349
g3
sS'name'
p73350
S'thermal_expansion_function'
p73351
sS'required'
p73352
I00
sS'group_name'
p73353
Nsa(dp73354
S'name'
p73355
S'thermal_expansion_function_type'
p73356
sS'cpp_type'
p73357
S'MooseEnum'
p73358
sS'default'
p73359
g3
sS'description'
p73360
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p73361
sS'required'
p73362
I00
sS'options'
p73363
S'instantaneous mean'
p73364
sS'group_name'
p73365
Nsa(dp73366
S'description'
p73367
S'Reference temperature for mean thermal expansion function.\n'
p73368
sS'cpp_type'
p73369
S'double'
p73370
sS'default'
p73371
g3
sS'name'
p73372
S'thermal_expansion_reference_temperature'
p73373
sS'required'
p73374
I00
sS'group_name'
p73375
Nsa(dp73376
S'description'
p73377
g3
sS'cpp_type'
p73378
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73379
sS'default'
p73380
S'ElasticModel'
p73381
sS'name'
p73382
S'type'
p73383
sS'required'
p73384
I00
sS'group_name'
p73385
Nsa(dp73386
S'description'
p73387
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73388
sS'cpp_type'
p73389
S'bool'
p73390
sS'default'
p73391
S'0'
p73392
sS'name'
p73393
S'use_displaced_mesh'
p73394
sS'required'
p73395
I00
sS'group_name'
p73396
S'Advanced'
p73397
sasS'name'
p73398
S'/Materials/ElasticModel'
p73399
sa(dp73400
S'description'
p73401
S'Material class to test ElementPropertyReadFile User Object\n'
p73402
sS'subblocks'
p73403
NsS'parameters'
p73404
(lp73405
(dp73406
S'description'
p73407
S'Stiffness tensor for material\n'
p73408
sS'cpp_type'
p73409
S'std::vector<double, std::allocator<double> >'
p73410
sS'default'
p73411
g3
sS'name'
p73412
S'C_ijkl'
p73413
sS'required'
p73414
I01
sS'group_name'
p73415
Nsa(dp73416
S'description'
p73417
S'Material property base name\n'
p73418
sS'cpp_type'
p73419
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73420
sS'default'
p73421
g3
sS'name'
p73422
S'base_name'
p73423
sS'required'
p73424
I00
sS'group_name'
p73425
Nsa(dp73426
S'description'
p73427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73428
sS'cpp_type'
p73429
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73430
sS'default'
p73431
g3
sS'name'
p73432
S'block'
p73433
sS'required'
p73434
I00
sS'group_name'
p73435
Nsa(dp73436
S'description'
p73437
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73438
sS'cpp_type'
p73439
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73440
sS'default'
p73441
g3
sS'name'
p73442
S'boundary'
p73443
sS'required'
p73444
I00
sS'group_name'
p73445
Nsa(dp73446
S'description'
p73447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73448
sS'cpp_type'
p73449
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73450
sS'default'
p73451
g3
sS'name'
p73452
S'control_tags'
p73453
sS'required'
p73454
I00
sS'group_name'
p73455
Nsa(dp73456
S'description'
p73457
S'The x displacement\n'
p73458
sS'cpp_type'
p73459
S'std::vector<VariableName>'
p73460
sS'default'
p73461
g3
sS'name'
p73462
S'disp_x'
p73463
sS'required'
p73464
I01
sS'group_name'
p73465
Nsa(dp73466
S'description'
p73467
S'The y displacement\n'
p73468
sS'cpp_type'
p73469
S'std::vector<VariableName>'
p73470
sS'default'
p73471
g3
sS'name'
p73472
S'disp_y'
p73473
sS'required'
p73474
I01
sS'group_name'
p73475
Nsa(dp73476
S'description'
p73477
S'The z displacement\n'
p73478
sS'cpp_type'
p73479
S'std::vector<VariableName>'
p73480
sS'default'
p73481
g3
sS'name'
p73482
S'disp_z'
p73483
sS'required'
p73484
I00
sS'group_name'
p73485
Nsa(dp73486
S'description'
p73487
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p73488
sS'cpp_type'
p73489
S'FunctionName'
p73490
sS'default'
p73491
g3
sS'name'
p73492
S'elasticity_tensor_prefactor'
p73493
sS'required'
p73494
I00
sS'group_name'
p73495
Nsa(dp73496
S'description'
p73497
S'Euler angle in direction 1\n'
p73498
sS'cpp_type'
p73499
S'double'
p73500
sS'default'
p73501
S'0'
p73502
sS'name'
p73503
S'euler_angle_1'
p73504
sS'required'
p73505
I00
sS'group_name'
p73506
Nsa(dp73507
S'description'
p73508
S'Euler angle in direction 2\n'
p73509
sS'cpp_type'
p73510
S'double'
p73511
sS'default'
p73512
S'0'
p73513
sS'name'
p73514
S'euler_angle_2'
p73515
sS'required'
p73516
I00
sS'group_name'
p73517
Nsa(dp73518
S'description'
p73519
S'Euler angle in direction 3\n'
p73520
sS'cpp_type'
p73521
S'double'
p73522
sS'default'
p73523
S'0'
p73524
sS'name'
p73525
S'euler_angle_3'
p73526
sS'required'
p73527
I00
sS'group_name'
p73528
Nsa(dp73529
S'name'
p73530
S'fill_method'
p73531
sS'cpp_type'
p73532
S'MooseEnum'
p73533
sS'default'
p73534
S'symmetric9'
p73535
sS'description'
p73536
S'The fill method\n'
p73537
sS'required'
p73538
I00
sS'options'
p73539
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p73540
sS'group_name'
p73541
Nsa(dp73542
S'description'
p73543
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p73544
sS'cpp_type'
p73545
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p73546
sS'default'
p73547
g3
sS'name'
p73548
S'initial_stress'
p73549
sS'required'
p73550
I00
sS'group_name'
p73551
Nsa(dp73552
S'description'
p73553
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73554
sS'cpp_type'
p73555
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73556
sS'default'
p73557
g3
sS'name'
p73558
S'output_properties'
p73559
sS'required'
p73560
I00
sS'group_name'
p73561
S'Outputs'
p73562
sa(dp73563
S'description'
p73564
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73565
sS'cpp_type'
p73566
S'std::vector<OutputName, std::allocator<OutputName> >'
p73567
sS'default'
p73568
S'none'
p73569
sS'name'
p73570
S'outputs'
p73571
sS'required'
p73572
I00
sS'group_name'
p73573
S'Outputs'
p73574
sa(dp73575
S'description'
p73576
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p73577
sS'cpp_type'
p73578
S'UserObjectName'
p73579
sS'default'
p73580
g3
sS'name'
p73581
S'read_prop_user_object'
p73582
sS'required'
p73583
I00
sS'group_name'
p73584
Nsa(dp73585
S'description'
p73586
S'The seed for the master random number generator\n'
p73587
sS'cpp_type'
p73588
S'unsigned int'
p73589
sS'default'
p73590
S'0'
p73591
sS'name'
p73592
S'seed'
p73593
sS'required'
p73594
I00
sS'group_name'
p73595
S'Advanced'
p73596
sa(dp73597
S'description'
p73598
S'temperature variable\n'
p73599
sS'cpp_type'
p73600
S'std::vector<VariableName>'
p73601
sS'default'
p73602
g3
sS'name'
p73603
S'temperature'
p73604
sS'required'
p73605
I00
sS'group_name'
p73606
Nsa(dp73607
S'description'
p73608
g3
sS'cpp_type'
p73609
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73610
sS'default'
p73611
S'ElementPropertyReadFileTest'
p73612
sS'name'
p73613
S'type'
p73614
sS'required'
p73615
I00
sS'group_name'
p73616
Nsa(dp73617
S'description'
p73618
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73619
sS'cpp_type'
p73620
S'bool'
p73621
sS'default'
p73622
S'0'
p73623
sS'name'
p73624
S'use_displaced_mesh'
p73625
sS'required'
p73626
I00
sS'group_name'
p73627
S'Advanced'
p73628
sasS'name'
p73629
S'/Materials/ElementPropertyReadFileTest'
p73630
sa(dp73631
S'description'
p73632
S'Providing external applied force density to grains\n'
p73633
sS'subblocks'
p73634
NsS'parameters'
p73635
(lp73636
(dp73637
S'description'
p73638
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73639
sS'cpp_type'
p73640
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73641
sS'default'
p73642
g3
sS'name'
p73643
S'block'
p73644
sS'required'
p73645
I00
sS'group_name'
p73646
Nsa(dp73647
S'description'
p73648
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73649
sS'cpp_type'
p73650
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73651
sS'default'
p73652
g3
sS'name'
p73653
S'boundary'
p73654
sS'required'
p73655
I00
sS'group_name'
p73656
Nsa(dp73657
S'description'
p73658
S'Concentration field\n'
p73659
sS'cpp_type'
p73660
S'std::vector<VariableName>'
p73661
sS'default'
p73662
g3
sS'name'
p73663
S'c'
p73664
sS'required'
p73665
I00
sS'group_name'
p73666
Nsa(dp73667
S'description'
p73668
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73669
sS'cpp_type'
p73670
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73671
sS'default'
p73672
g3
sS'name'
p73673
S'control_tags'
p73674
sS'required'
p73675
I00
sS'group_name'
p73676
Nsa(dp73677
S'description'
p73678
S'Array of coupled order parameters\n'
p73679
sS'cpp_type'
p73680
S'std::vector<VariableName>'
p73681
sS'default'
p73682
g3
sS'name'
p73683
S'etas'
p73684
sS'required'
p73685
I00
sS'group_name'
p73686
Nsa(dp73687
S'description'
p73688
S'The forcing function in x direction.\n'
p73689
sS'cpp_type'
p73690
S'FunctionName'
p73691
sS'default'
p73692
S'0'
p73693
sS'name'
p73694
S'force_x'
p73695
sS'required'
p73696
I00
sS'group_name'
p73697
Nsa(dp73698
S'description'
p73699
S'The forcing function in y direction.\n'
p73700
sS'cpp_type'
p73701
S'FunctionName'
p73702
sS'default'
p73703
S'0'
p73704
sS'name'
p73705
S'force_y'
p73706
sS'required'
p73707
I00
sS'group_name'
p73708
Nsa(dp73709
S'description'
p73710
S'The forcing function in z direction.\n'
p73711
sS'cpp_type'
p73712
S'FunctionName'
p73713
sS'default'
p73714
S'0'
p73715
sS'name'
p73716
S'force_z'
p73717
sS'required'
p73718
I00
sS'group_name'
p73719
Nsa(dp73720
S'description'
p73721
S'stiffness constant multiplier\n'
p73722
sS'cpp_type'
p73723
S'double'
p73724
sS'default'
p73725
S'1'
p73726
sS'name'
p73727
S'k'
p73728
sS'required'
p73729
I00
sS'group_name'
p73730
Nsa(dp73731
S'description'
p73732
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p73733
sS'cpp_type'
p73734
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73735
sS'default'
p73736
g3
sS'name'
p73737
S'output_properties'
p73738
sS'required'
p73739
I00
sS'group_name'
p73740
S'Outputs'
p73741
sa(dp73742
S'description'
p73743
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p73744
sS'cpp_type'
p73745
S'std::vector<OutputName, std::allocator<OutputName> >'
p73746
sS'default'
p73747
S'none'
p73748
sS'name'
p73749
S'outputs'
p73750
sS'required'
p73751
I00
sS'group_name'
p73752
S'Outputs'
p73753
sa(dp73754
S'description'
p73755
S'The seed for the master random number generator\n'
p73756
sS'cpp_type'
p73757
S'unsigned int'
p73758
sS'default'
p73759
S'0'
p73760
sS'name'
p73761
S'seed'
p73762
sS'required'
p73763
I00
sS'group_name'
p73764
S'Advanced'
p73765
sa(dp73766
S'description'
p73767
g3
sS'cpp_type'
p73768
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73769
sS'default'
p73770
S'ExternalForceDensityMaterial'
p73771
sS'name'
p73772
S'type'
p73773
sS'required'
p73774
I00
sS'group_name'
p73775
Nsa(dp73776
S'description'
p73777
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p73778
sS'cpp_type'
p73779
S'bool'
p73780
sS'default'
p73781
S'0'
p73782
sS'name'
p73783
S'use_displaced_mesh'
p73784
sS'required'
p73785
I00
sS'group_name'
p73786
S'Advanced'
p73787
sasS'name'
p73788
S'/Materials/ExternalForceDensityMaterial'
p73789
sa(dp73790
S'description'
p73791
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p73792
sS'subblocks'
p73793
NsS'parameters'
p73794
(lp73795
(dp73796
S'description'
p73797
S'Stiffness tensor for material\n'
p73798
sS'cpp_type'
p73799
S'std::vector<double, std::allocator<double> >'
p73800
sS'default'
p73801
g3
sS'name'
p73802
S'C_ijkl'
p73803
sS'required'
p73804
I01
sS'group_name'
p73805
Nsa(dp73806
S'description'
p73807
S'Constitutive stress residue absolute tolerance\n'
p73808
sS'cpp_type'
p73809
S'double'
p73810
sS'default'
p73811
S'1e-06'
p73812
sS'name'
p73813
S'abs_tol'
p73814
sS'required'
p73815
I00
sS'group_name'
p73816
Nsa(dp73817
S'description'
p73818
S'Material property base name\n'
p73819
sS'cpp_type'
p73820
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p73821
sS'default'
p73822
g3
sS'name'
p73823
S'base_name'
p73824
sS'required'
p73825
I00
sS'group_name'
p73826
Nsa(dp73827
S'description'
p73828
S'The list of block ids (SubdomainID) that this object will be applied\n'
p73829
sS'cpp_type'
p73830
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p73831
sS'default'
p73832
g3
sS'name'
p73833
S'block'
p73834
sS'required'
p73835
I00
sS'group_name'
p73836
Nsa(dp73837
S'description'
p73838
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p73839
sS'cpp_type'
p73840
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p73841
sS'default'
p73842
g3
sS'name'
p73843
S'boundary'
p73844
sS'required'
p73845
I00
sS'group_name'
p73846
Nsa(dp73847
S'description'
p73848
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p73849
sS'cpp_type'
p73850
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p73851
sS'default'
p73852
g3
sS'name'
p73853
S'control_tags'
p73854
sS'required'
p73855
I00
sS'group_name'
p73856
Nsa(dp73857
S'description'
p73858
S'The x displacement\n'
p73859
sS'cpp_type'
p73860
S'std::vector<VariableName>'
p73861
sS'default'
p73862
g3
sS'name'
p73863
S'disp_x'
p73864
sS'required'
p73865
I01
sS'group_name'
p73866
Nsa(dp73867
S'description'
p73868
S'The y displacement\n'
p73869
sS'cpp_type'
p73870
S'std::vector<VariableName>'
p73871
sS'default'
p73872
g3
sS'name'
p73873
S'disp_y'
p73874
sS'required'
p73875
I01
sS'group_name'
p73876
Nsa(dp73877
S'description'
p73878
S'The z displacement\n'
p73879
sS'cpp_type'
p73880
S'std::vector<VariableName>'
p73881
sS'default'
p73882
g3
sS'name'
p73883
S'disp_z'
p73884
sS'required'
p73885
I00
sS'group_name'
p73886
Nsa(dp73887
S'description'
p73888
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p73889
sS'cpp_type'
p73890
S'FunctionName'
p73891
sS'default'
p73892
g3
sS'name'
p73893
S'elasticity_tensor_prefactor'
p73894
sS'required'
p73895
I00
sS'group_name'
p73896
Nsa(dp73897
S'description'
p73898
S'Euler angle in direction 1\n'
p73899
sS'cpp_type'
p73900
S'double'
p73901
sS'default'
p73902
S'0'
p73903
sS'name'
p73904
S'euler_angle_1'
p73905
sS'required'
p73906
I00
sS'group_name'
p73907
Nsa(dp73908
S'description'
p73909
S'Euler angle in direction 2\n'
p73910
sS'cpp_type'
p73911
S'double'
p73912
sS'default'
p73913
S'0'
p73914
sS'name'
p73915
S'euler_angle_2'
p73916
sS'required'
p73917
I00
sS'group_name'
p73918
Nsa(dp73919
S'description'
p73920
S'Euler angle in direction 3\n'
p73921
sS'cpp_type'
p73922
S'double'
p73923
sS'default'
p73924
S'0'
p73925
sS'name'
p73926
S'euler_angle_3'
p73927
sS'required'
p73928
I00
sS'group_name'
p73929
Nsa(dp73930
S'name'
p73931
S'fill_method'
p73932
sS'cpp_type'
p73933
S'MooseEnum'
p73934
sS'default'
p73935
S'symmetric9'
p73936
sS'description'
p73937
S'The fill method\n'
p73938
sS'required'
p73939
I00
sS'options'
p73940
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p73941
sS'group_name'
p73942
Nsa(dp73943
S'description'
p73944
S'Parameters used in slip rate equations\n'
p73945
sS'cpp_type'
p73946
S'std::vector<double, std::allocator<double> >'
p73947
sS'default'
p73948
g3
sS'name'
p73949
S'flowprops'
p73950
sS'required'
p73951
I00
sS'group_name'
p73952
Nsa(dp73953
S'description'
p73954
S'Flag to generate random stress to perform time cutback on constitutive failure\n'
p73955
sS'cpp_type'
p73956
S'bool'
p73957
sS'default'
p73958
S'0'
p73959
sS'name'
p73960
S'gen_random_stress_flag'
p73961
sS'required'
p73962
I00
sS'group_name'
p73963
Nsa(dp73964
S'description'
p73965
S'Initial values of slip system resistances\n'
p73966
sS'cpp_type'
p73967
S'std::vector<double, std::allocator<double> >'
p73968
sS'default'
p73969
g3
sS'name'
p73970
S'gprops'
p73971
sS'required'
p73972
I00
sS'group_name'
p73973
Nsa(dp73974
S'description'
p73975
S'Constitutive slip system resistance residual tolerance\n'
p73976
sS'cpp_type'
p73977
S'double'
p73978
sS'default'
p73979
S'100'
p73980
sS'name'
p73981
S'gtol'
p73982
sS'required'
p73983
I00
sS'group_name'
p73984
Nsa(dp73985
S'description'
p73986
S'Hardening properties\n'
p73987
sS'cpp_type'
p73988
S'std::vector<double, std::allocator<double> >'
p73989
sS'default'
p73990
g3
sS'name'
p73991
S'hprops'
p73992
sS'required'
p73993
I00
sS'group_name'
p73994
Nsa(dp73995
S'description'
p73996
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p73997
sS'cpp_type'
p73998
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p73999
sS'default'
p74000
g3
sS'name'
p74001
S'initial_stress'
p74002
sS'required'
p74003
I00
sS'group_name'
p74004
Nsa(dp74005
S'description'
p74006
S'Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n'
p74007
sS'cpp_type'
p74008
S'bool'
p74009
sS'default'
p74010
S'0'
p74011
sS'name'
p74012
S'input_random_scaling_var'
p74013
sS'required'
p74014
I00
sS'group_name'
p74015
Nsa(dp74016
S'name'
p74017
S'intvar_read_type'
p74018
sS'cpp_type'
p74019
S'MooseEnum'
p74020
sS'default'
p74021
S'none'
p74022
sS'description'
p74023
S'Read from options for initial value of internal variables: Default from .i file\n'
p74024
sS'required'
p74025
I00
sS'options'
p74026
S'slip_sys_file slip_sys_res_file none'
p74027
sS'group_name'
p74028
Nsa(dp74029
S'description'
p74030
S'Line search bisection method maximum number of iteration\n'
p74031
sS'cpp_type'
p74032
S'unsigned int'
p74033
sS'default'
p74034
S'20'
p74035
sS'name'
p74036
S'line_search_maxiter'
p74037
sS'required'
p74038
I00
sS'group_name'
p74039
Nsa(dp74040
S'name'
p74041
S'line_search_method'
p74042
sS'cpp_type'
p74043
S'MooseEnum'
p74044
sS'default'
p74045
S'CUT_HALF'
p74046
sS'description'
p74047
S'The method used in line search\n'
p74048
sS'required'
p74049
I00
sS'options'
p74050
S'CUT_HALF BISECTION'
p74051
sS'group_name'
p74052
Nsa(dp74053
S'description'
p74054
S'Line search bisection method tolerance\n'
p74055
sS'cpp_type'
p74056
S'double'
p74057
sS'default'
p74058
S'0.5'
p74059
sS'name'
p74060
S'line_search_tol'
p74061
sS'required'
p74062
I00
sS'group_name'
p74063
Nsa(dp74064
S'description'
p74065
S'Maximum number of substep iteration\n'
p74066
sS'cpp_type'
p74067
S'unsigned int'
p74068
sS'default'
p74069
S'1'
p74070
sS'name'
p74071
S'maximum_substep_iteration'
p74072
sS'required'
p74073
I00
sS'group_name'
p74074
Nsa(dp74075
S'description'
p74076
S'Maximum number of iterations for stress update\n'
p74077
sS'cpp_type'
p74078
S'unsigned int'
p74079
sS'default'
p74080
S'100'
p74081
sS'name'
p74082
S'maxiter'
p74083
sS'required'
p74084
I00
sS'group_name'
p74085
Nsa(dp74086
S'description'
p74087
S'Maximum number of iterations for slip system resistance update\n'
p74088
sS'cpp_type'
p74089
S'unsigned int'
p74090
sS'default'
p74091
S'100'
p74092
sS'name'
p74093
S'maxitergss'
p74094
sS'required'
p74095
I00
sS'group_name'
p74096
Nsa(dp74097
S'description'
p74098
S'Minimum line search step size\n'
p74099
sS'cpp_type'
p74100
S'double'
p74101
sS'default'
p74102
S'0.01'
p74103
sS'name'
p74104
S'min_line_search_step_size'
p74105
sS'required'
p74106
I00
sS'group_name'
p74107
Nsa(dp74108
S'description'
p74109
S'Number of slip systems\n'
p74110
sS'cpp_type'
p74111
S'int'
p74112
sS'default'
p74113
g3
sS'name'
p74114
S'nss'
p74115
sS'required'
p74116
I01
sS'group_name'
p74117
Nsa(dp74118
S'description'
p74119
S'Number of flow rate properties for a slip system\n'
p74120
sS'cpp_type'
p74121
S'unsigned int'
p74122
sS'default'
p74123
S'2'
p74124
sS'name'
p74125
S'num_slip_sys_flowrate_props'
p74126
sS'required'
p74127
I00
sS'group_name'
p74128
Nsa(dp74129
S'description'
p74130
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p74131
sS'cpp_type'
p74132
S'unsigned int'
p74133
sS'default'
p74134
S'0'
p74135
sS'name'
p74136
S'num_slip_sys_props'
p74137
sS'required'
p74138
I00
sS'group_name'
p74139
Nsa(dp74140
S'description'
p74141
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74142
sS'cpp_type'
p74143
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74144
sS'default'
p74145
g3
sS'name'
p74146
S'output_properties'
p74147
sS'required'
p74148
I00
sS'group_name'
p74149
S'Outputs'
p74150
sa(dp74151
S'description'
p74152
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74153
sS'cpp_type'
p74154
S'std::vector<OutputName, std::allocator<OutputName> >'
p74155
sS'default'
p74156
S'none'
p74157
sS'name'
p74158
S'outputs'
p74159
sS'required'
p74160
I00
sS'group_name'
p74161
S'Outputs'
p74162
sa(dp74163
S'description'
p74164
S'Random scaling variable: Large value can cause non-positive definiteness\n'
p74165
sS'cpp_type'
p74166
S'double'
p74167
sS'default'
p74168
S'1e+09'
p74169
sS'name'
p74170
S'random_scaling_var'
p74171
sS'required'
p74172
I00
sS'group_name'
p74173
Nsa(dp74174
S'description'
p74175
S'Random integer used to generate random stress when constitutive failure occurs\n'
p74176
sS'cpp_type'
p74177
S'unsigned int'
p74178
sS'default'
p74179
S'2000'
p74180
sS'name'
p74181
S'random_seed'
p74182
sS'required'
p74183
I00
sS'group_name'
p74184
Nsa(dp74185
S'description'
p74186
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p74187
sS'cpp_type'
p74188
S'UserObjectName'
p74189
sS'default'
p74190
g3
sS'name'
p74191
S'read_prop_user_object'
p74192
sS'required'
p74193
I00
sS'group_name'
p74194
Nsa(dp74195
S'description'
p74196
S'Constitutive stress residue relative tolerance\n'
p74197
sS'cpp_type'
p74198
S'double'
p74199
sS'default'
p74200
S'1e-06'
p74201
sS'name'
p74202
S'rtol'
p74203
sS'required'
p74204
I00
sS'group_name'
p74205
Nsa(dp74206
S'description'
p74207
S'Saves the Euler angles as Material Property if true\n'
p74208
sS'cpp_type'
p74209
S'bool'
p74210
sS'default'
p74211
S'0'
p74212
sS'name'
p74213
S'save_euler_angle'
p74214
sS'required'
p74215
I00
sS'group_name'
p74216
Nsa(dp74217
S'description'
p74218
S'The seed for the master random number generator\n'
p74219
sS'cpp_type'
p74220
S'unsigned int'
p74221
sS'default'
p74222
S'0'
p74223
sS'name'
p74224
S'seed'
p74225
sS'required'
p74226
I00
sS'group_name'
p74227
S'Advanced'
p74228
sa(dp74229
S'description'
p74230
S'Maximum allowable slip in an increment\n'
p74231
sS'cpp_type'
p74232
S'double'
p74233
sS'default'
p74234
S'0.02'
p74235
sS'name'
p74236
S'slip_incr_tol'
p74237
sS'required'
p74238
I00
sS'group_name'
p74239
Nsa(dp74240
S'description'
p74241
S'Name of the file containing the slip system\n'
p74242
sS'cpp_type'
p74243
S'FileName'
p74244
sS'default'
p74245
g3
sS'name'
p74246
S'slip_sys_file_name'
p74247
sS'required'
p74248
I01
sS'group_name'
p74249
Nsa(dp74250
S'description'
p74251
S'Name of the file containing the values of slip rate equation parameters\n'
p74252
sS'cpp_type'
p74253
S'FileName'
p74254
sS'default'
p74255
g3
sS'name'
p74256
S'slip_sys_flow_prop_file_name'
p74257
sS'required'
p74258
I00
sS'group_name'
p74259
Nsa(dp74260
S'description'
p74261
S'Name of the file containing the values of hardness evolution parameters\n'
p74262
sS'cpp_type'
p74263
S'FileName'
p74264
sS'default'
p74265
g3
sS'name'
p74266
S'slip_sys_hard_prop_file_name'
p74267
sS'required'
p74268
I00
sS'group_name'
p74269
Nsa(dp74270
S'description'
p74271
S'Name of the file containing the initial values of slip system resistances\n'
p74272
sS'cpp_type'
p74273
S'FileName'
p74274
sS'default'
p74275
g3
sS'name'
p74276
S'slip_sys_res_prop_file_name'
p74277
sS'required'
p74278
I00
sS'group_name'
p74279
Nsa(dp74280
S'name'
p74281
S'tan_mod_type'
p74282
sS'cpp_type'
p74283
S'MooseEnum'
p74284
sS'default'
p74285
S'none'
p74286
sS'description'
p74287
S'Type of tangent moduli for preconditioner: default elastic\n'
p74288
sS'required'
p74289
I00
sS'options'
p74290
S'exact none'
p74291
sS'group_name'
p74292
Nsa(dp74293
S'description'
p74294
S'temperature variable\n'
p74295
sS'cpp_type'
p74296
S'std::vector<VariableName>'
p74297
sS'default'
p74298
g3
sS'name'
p74299
S'temperature'
p74300
sS'required'
p74301
I00
sS'group_name'
p74302
Nsa(dp74303
S'description'
p74304
g3
sS'cpp_type'
p74305
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74306
sS'default'
p74307
S'FiniteStrainCPSlipRateRes'
p74308
sS'name'
p74309
S'type'
p74310
sS'required'
p74311
I00
sS'group_name'
p74312
Nsa(dp74313
S'description'
p74314
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74315
sS'cpp_type'
p74316
S'bool'
p74317
sS'default'
p74318
S'0'
p74319
sS'name'
p74320
S'use_displaced_mesh'
p74321
sS'required'
p74322
I00
sS'group_name'
p74323
S'Advanced'
p74324
sa(dp74325
S'description'
p74326
S'Use line search in constitutive update\n'
p74327
sS'cpp_type'
p74328
S'bool'
p74329
sS'default'
p74330
S'0'
p74331
sS'name'
p74332
S'use_line_search'
p74333
sS'required'
p74334
I00
sS'group_name'
p74335
NsasS'name'
p74336
S'/Materials/FiniteStrainCPSlipRateRes'
p74337
sa(dp74338
S'description'
p74339
S'Crystal Plasticity base class: FCC system with power law flow rule implemented\n'
p74340
sS'subblocks'
p74341
NsS'parameters'
p74342
(lp74343
(dp74344
S'description'
p74345
S'Stiffness tensor for material\n'
p74346
sS'cpp_type'
p74347
S'std::vector<double, std::allocator<double> >'
p74348
sS'default'
p74349
g3
sS'name'
p74350
S'C_ijkl'
p74351
sS'required'
p74352
I01
sS'group_name'
p74353
Nsa(dp74354
S'description'
p74355
S'Constitutive stress residue absolute tolerance\n'
p74356
sS'cpp_type'
p74357
S'double'
p74358
sS'default'
p74359
S'1e-06'
p74360
sS'name'
p74361
S'abs_tol'
p74362
sS'required'
p74363
I00
sS'group_name'
p74364
Nsa(dp74365
S'description'
p74366
S'Material property base name\n'
p74367
sS'cpp_type'
p74368
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74369
sS'default'
p74370
g3
sS'name'
p74371
S'base_name'
p74372
sS'required'
p74373
I00
sS'group_name'
p74374
Nsa(dp74375
S'description'
p74376
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74377
sS'cpp_type'
p74378
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74379
sS'default'
p74380
g3
sS'name'
p74381
S'block'
p74382
sS'required'
p74383
I00
sS'group_name'
p74384
Nsa(dp74385
S'description'
p74386
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74387
sS'cpp_type'
p74388
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74389
sS'default'
p74390
g3
sS'name'
p74391
S'boundary'
p74392
sS'required'
p74393
I00
sS'group_name'
p74394
Nsa(dp74395
S'description'
p74396
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74397
sS'cpp_type'
p74398
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74399
sS'default'
p74400
g3
sS'name'
p74401
S'control_tags'
p74402
sS'required'
p74403
I00
sS'group_name'
p74404
Nsa(dp74405
S'description'
p74406
S'The x displacement\n'
p74407
sS'cpp_type'
p74408
S'std::vector<VariableName>'
p74409
sS'default'
p74410
g3
sS'name'
p74411
S'disp_x'
p74412
sS'required'
p74413
I01
sS'group_name'
p74414
Nsa(dp74415
S'description'
p74416
S'The y displacement\n'
p74417
sS'cpp_type'
p74418
S'std::vector<VariableName>'
p74419
sS'default'
p74420
g3
sS'name'
p74421
S'disp_y'
p74422
sS'required'
p74423
I01
sS'group_name'
p74424
Nsa(dp74425
S'description'
p74426
S'The z displacement\n'
p74427
sS'cpp_type'
p74428
S'std::vector<VariableName>'
p74429
sS'default'
p74430
g3
sS'name'
p74431
S'disp_z'
p74432
sS'required'
p74433
I00
sS'group_name'
p74434
Nsa(dp74435
S'description'
p74436
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p74437
sS'cpp_type'
p74438
S'FunctionName'
p74439
sS'default'
p74440
g3
sS'name'
p74441
S'elasticity_tensor_prefactor'
p74442
sS'required'
p74443
I00
sS'group_name'
p74444
Nsa(dp74445
S'description'
p74446
S'Euler angle in direction 1\n'
p74447
sS'cpp_type'
p74448
S'double'
p74449
sS'default'
p74450
S'0'
p74451
sS'name'
p74452
S'euler_angle_1'
p74453
sS'required'
p74454
I00
sS'group_name'
p74455
Nsa(dp74456
S'description'
p74457
S'Euler angle in direction 2\n'
p74458
sS'cpp_type'
p74459
S'double'
p74460
sS'default'
p74461
S'0'
p74462
sS'name'
p74463
S'euler_angle_2'
p74464
sS'required'
p74465
I00
sS'group_name'
p74466
Nsa(dp74467
S'description'
p74468
S'Euler angle in direction 3\n'
p74469
sS'cpp_type'
p74470
S'double'
p74471
sS'default'
p74472
S'0'
p74473
sS'name'
p74474
S'euler_angle_3'
p74475
sS'required'
p74476
I00
sS'group_name'
p74477
Nsa(dp74478
S'name'
p74479
S'fill_method'
p74480
sS'cpp_type'
p74481
S'MooseEnum'
p74482
sS'default'
p74483
S'symmetric9'
p74484
sS'description'
p74485
S'The fill method\n'
p74486
sS'required'
p74487
I00
sS'options'
p74488
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p74489
sS'group_name'
p74490
Nsa(dp74491
S'description'
p74492
S'Parameters used in slip rate equations\n'
p74493
sS'cpp_type'
p74494
S'std::vector<double, std::allocator<double> >'
p74495
sS'default'
p74496
g3
sS'name'
p74497
S'flowprops'
p74498
sS'required'
p74499
I00
sS'group_name'
p74500
Nsa(dp74501
S'description'
p74502
S'Flag to generate random stress to perform time cutback on constitutive failure\n'
p74503
sS'cpp_type'
p74504
S'bool'
p74505
sS'default'
p74506
S'0'
p74507
sS'name'
p74508
S'gen_random_stress_flag'
p74509
sS'required'
p74510
I00
sS'group_name'
p74511
Nsa(dp74512
S'description'
p74513
S'Initial values of slip system resistances\n'
p74514
sS'cpp_type'
p74515
S'std::vector<double, std::allocator<double> >'
p74516
sS'default'
p74517
g3
sS'name'
p74518
S'gprops'
p74519
sS'required'
p74520
I00
sS'group_name'
p74521
Nsa(dp74522
S'description'
p74523
S'Constitutive slip system resistance residual tolerance\n'
p74524
sS'cpp_type'
p74525
S'double'
p74526
sS'default'
p74527
S'100'
p74528
sS'name'
p74529
S'gtol'
p74530
sS'required'
p74531
I00
sS'group_name'
p74532
Nsa(dp74533
S'description'
p74534
S'Hardening properties\n'
p74535
sS'cpp_type'
p74536
S'std::vector<double, std::allocator<double> >'
p74537
sS'default'
p74538
g3
sS'name'
p74539
S'hprops'
p74540
sS'required'
p74541
I00
sS'group_name'
p74542
Nsa(dp74543
S'description'
p74544
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p74545
sS'cpp_type'
p74546
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p74547
sS'default'
p74548
g3
sS'name'
p74549
S'initial_stress'
p74550
sS'required'
p74551
I00
sS'group_name'
p74552
Nsa(dp74553
S'description'
p74554
S'Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n'
p74555
sS'cpp_type'
p74556
S'bool'
p74557
sS'default'
p74558
S'0'
p74559
sS'name'
p74560
S'input_random_scaling_var'
p74561
sS'required'
p74562
I00
sS'group_name'
p74563
Nsa(dp74564
S'name'
p74565
S'intvar_read_type'
p74566
sS'cpp_type'
p74567
S'MooseEnum'
p74568
sS'default'
p74569
S'none'
p74570
sS'description'
p74571
S'Read from options for initial value of internal variables: Default from .i file\n'
p74572
sS'required'
p74573
I00
sS'options'
p74574
S'slip_sys_file slip_sys_res_file none'
p74575
sS'group_name'
p74576
Nsa(dp74577
S'description'
p74578
S'Line search bisection method maximum number of iteration\n'
p74579
sS'cpp_type'
p74580
S'unsigned int'
p74581
sS'default'
p74582
S'20'
p74583
sS'name'
p74584
S'line_search_maxiter'
p74585
sS'required'
p74586
I00
sS'group_name'
p74587
Nsa(dp74588
S'name'
p74589
S'line_search_method'
p74590
sS'cpp_type'
p74591
S'MooseEnum'
p74592
sS'default'
p74593
S'CUT_HALF'
p74594
sS'description'
p74595
S'The method used in line search\n'
p74596
sS'required'
p74597
I00
sS'options'
p74598
S'CUT_HALF BISECTION'
p74599
sS'group_name'
p74600
Nsa(dp74601
S'description'
p74602
S'Line search bisection method tolerance\n'
p74603
sS'cpp_type'
p74604
S'double'
p74605
sS'default'
p74606
S'0.5'
p74607
sS'name'
p74608
S'line_search_tol'
p74609
sS'required'
p74610
I00
sS'group_name'
p74611
Nsa(dp74612
S'description'
p74613
S'Maximum number of substep iteration\n'
p74614
sS'cpp_type'
p74615
S'unsigned int'
p74616
sS'default'
p74617
S'1'
p74618
sS'name'
p74619
S'maximum_substep_iteration'
p74620
sS'required'
p74621
I00
sS'group_name'
p74622
Nsa(dp74623
S'description'
p74624
S'Maximum number of iterations for stress update\n'
p74625
sS'cpp_type'
p74626
S'unsigned int'
p74627
sS'default'
p74628
S'100'
p74629
sS'name'
p74630
S'maxiter'
p74631
sS'required'
p74632
I00
sS'group_name'
p74633
Nsa(dp74634
S'description'
p74635
S'Maximum number of iterations for slip system resistance update\n'
p74636
sS'cpp_type'
p74637
S'unsigned int'
p74638
sS'default'
p74639
S'100'
p74640
sS'name'
p74641
S'maxitergss'
p74642
sS'required'
p74643
I00
sS'group_name'
p74644
Nsa(dp74645
S'description'
p74646
S'Minimum line search step size\n'
p74647
sS'cpp_type'
p74648
S'double'
p74649
sS'default'
p74650
S'0.01'
p74651
sS'name'
p74652
S'min_line_search_step_size'
p74653
sS'required'
p74654
I00
sS'group_name'
p74655
Nsa(dp74656
S'description'
p74657
S'Number of slip systems\n'
p74658
sS'cpp_type'
p74659
S'int'
p74660
sS'default'
p74661
g3
sS'name'
p74662
S'nss'
p74663
sS'required'
p74664
I01
sS'group_name'
p74665
Nsa(dp74666
S'description'
p74667
S'Number of flow rate properties for a slip system\n'
p74668
sS'cpp_type'
p74669
S'unsigned int'
p74670
sS'default'
p74671
S'2'
p74672
sS'name'
p74673
S'num_slip_sys_flowrate_props'
p74674
sS'required'
p74675
I00
sS'group_name'
p74676
Nsa(dp74677
S'description'
p74678
S'Number of slip system specific properties provided in the file containing slip system normals and directions\n'
p74679
sS'cpp_type'
p74680
S'unsigned int'
p74681
sS'default'
p74682
S'0'
p74683
sS'name'
p74684
S'num_slip_sys_props'
p74685
sS'required'
p74686
I00
sS'group_name'
p74687
Nsa(dp74688
S'description'
p74689
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p74690
sS'cpp_type'
p74691
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74692
sS'default'
p74693
g3
sS'name'
p74694
S'output_properties'
p74695
sS'required'
p74696
I00
sS'group_name'
p74697
S'Outputs'
p74698
sa(dp74699
S'description'
p74700
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p74701
sS'cpp_type'
p74702
S'std::vector<OutputName, std::allocator<OutputName> >'
p74703
sS'default'
p74704
S'none'
p74705
sS'name'
p74706
S'outputs'
p74707
sS'required'
p74708
I00
sS'group_name'
p74709
S'Outputs'
p74710
sa(dp74711
S'description'
p74712
S'Random scaling variable: Large value can cause non-positive definiteness\n'
p74713
sS'cpp_type'
p74714
S'double'
p74715
sS'default'
p74716
S'1e+09'
p74717
sS'name'
p74718
S'random_scaling_var'
p74719
sS'required'
p74720
I00
sS'group_name'
p74721
Nsa(dp74722
S'description'
p74723
S'Random integer used to generate random stress when constitutive failure occurs\n'
p74724
sS'cpp_type'
p74725
S'unsigned int'
p74726
sS'default'
p74727
S'2000'
p74728
sS'name'
p74729
S'random_seed'
p74730
sS'required'
p74731
I00
sS'group_name'
p74732
Nsa(dp74733
S'description'
p74734
S'The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n'
p74735
sS'cpp_type'
p74736
S'UserObjectName'
p74737
sS'default'
p74738
g3
sS'name'
p74739
S'read_prop_user_object'
p74740
sS'required'
p74741
I00
sS'group_name'
p74742
Nsa(dp74743
S'description'
p74744
S'Constitutive stress residue relative tolerance\n'
p74745
sS'cpp_type'
p74746
S'double'
p74747
sS'default'
p74748
S'1e-06'
p74749
sS'name'
p74750
S'rtol'
p74751
sS'required'
p74752
I00
sS'group_name'
p74753
Nsa(dp74754
S'description'
p74755
S'Saves the Euler angles as Material Property if true\n'
p74756
sS'cpp_type'
p74757
S'bool'
p74758
sS'default'
p74759
S'0'
p74760
sS'name'
p74761
S'save_euler_angle'
p74762
sS'required'
p74763
I00
sS'group_name'
p74764
Nsa(dp74765
S'description'
p74766
S'The seed for the master random number generator\n'
p74767
sS'cpp_type'
p74768
S'unsigned int'
p74769
sS'default'
p74770
S'0'
p74771
sS'name'
p74772
S'seed'
p74773
sS'required'
p74774
I00
sS'group_name'
p74775
S'Advanced'
p74776
sa(dp74777
S'description'
p74778
S'Maximum allowable slip in an increment\n'
p74779
sS'cpp_type'
p74780
S'double'
p74781
sS'default'
p74782
S'0.02'
p74783
sS'name'
p74784
S'slip_incr_tol'
p74785
sS'required'
p74786
I00
sS'group_name'
p74787
Nsa(dp74788
S'description'
p74789
S'Name of the file containing the slip system\n'
p74790
sS'cpp_type'
p74791
S'FileName'
p74792
sS'default'
p74793
g3
sS'name'
p74794
S'slip_sys_file_name'
p74795
sS'required'
p74796
I01
sS'group_name'
p74797
Nsa(dp74798
S'description'
p74799
S'Name of the file containing the values of slip rate equation parameters\n'
p74800
sS'cpp_type'
p74801
S'FileName'
p74802
sS'default'
p74803
g3
sS'name'
p74804
S'slip_sys_flow_prop_file_name'
p74805
sS'required'
p74806
I00
sS'group_name'
p74807
Nsa(dp74808
S'description'
p74809
S'Name of the file containing the values of hardness evolution parameters\n'
p74810
sS'cpp_type'
p74811
S'FileName'
p74812
sS'default'
p74813
g3
sS'name'
p74814
S'slip_sys_hard_prop_file_name'
p74815
sS'required'
p74816
I00
sS'group_name'
p74817
Nsa(dp74818
S'description'
p74819
S'Name of the file containing the initial values of slip system resistances\n'
p74820
sS'cpp_type'
p74821
S'FileName'
p74822
sS'default'
p74823
g3
sS'name'
p74824
S'slip_sys_res_prop_file_name'
p74825
sS'required'
p74826
I00
sS'group_name'
p74827
Nsa(dp74828
S'name'
p74829
S'tan_mod_type'
p74830
sS'cpp_type'
p74831
S'MooseEnum'
p74832
sS'default'
p74833
S'none'
p74834
sS'description'
p74835
S'Type of tangent moduli for preconditioner: default elastic\n'
p74836
sS'required'
p74837
I00
sS'options'
p74838
S'exact none'
p74839
sS'group_name'
p74840
Nsa(dp74841
S'description'
p74842
S'temperature variable\n'
p74843
sS'cpp_type'
p74844
S'std::vector<VariableName>'
p74845
sS'default'
p74846
g3
sS'name'
p74847
S'temperature'
p74848
sS'required'
p74849
I00
sS'group_name'
p74850
Nsa(dp74851
S'description'
p74852
g3
sS'cpp_type'
p74853
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74854
sS'default'
p74855
S'FiniteStrainCrystalPlasticity'
p74856
sS'name'
p74857
S'type'
p74858
sS'required'
p74859
I00
sS'group_name'
p74860
Nsa(dp74861
S'description'
p74862
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p74863
sS'cpp_type'
p74864
S'bool'
p74865
sS'default'
p74866
S'0'
p74867
sS'name'
p74868
S'use_displaced_mesh'
p74869
sS'required'
p74870
I00
sS'group_name'
p74871
S'Advanced'
p74872
sa(dp74873
S'description'
p74874
S'Use line search in constitutive update\n'
p74875
sS'cpp_type'
p74876
S'bool'
p74877
sS'default'
p74878
S'0'
p74879
sS'name'
p74880
S'use_line_search'
p74881
sS'required'
p74882
I00
sS'group_name'
p74883
NsasS'name'
p74884
S'/Materials/FiniteStrainCrystalPlasticity'
p74885
sa(dp74886
S'description'
p74887
S'Computes incremental strain and deformation gradient for finite deformation\n'
p74888
sS'subblocks'
p74889
NsS'parameters'
p74890
(lp74891
(dp74892
S'description'
p74893
S'Stiffness tensor for material\n'
p74894
sS'cpp_type'
p74895
S'std::vector<double, std::allocator<double> >'
p74896
sS'default'
p74897
g3
sS'name'
p74898
S'C_ijkl'
p74899
sS'required'
p74900
I01
sS'group_name'
p74901
Nsa(dp74902
S'description'
p74903
S'Material property base name\n'
p74904
sS'cpp_type'
p74905
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p74906
sS'default'
p74907
g3
sS'name'
p74908
S'base_name'
p74909
sS'required'
p74910
I00
sS'group_name'
p74911
Nsa(dp74912
S'description'
p74913
S'The list of block ids (SubdomainID) that this object will be applied\n'
p74914
sS'cpp_type'
p74915
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p74916
sS'default'
p74917
g3
sS'name'
p74918
S'block'
p74919
sS'required'
p74920
I00
sS'group_name'
p74921
Nsa(dp74922
S'description'
p74923
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p74924
sS'cpp_type'
p74925
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p74926
sS'default'
p74927
g3
sS'name'
p74928
S'boundary'
p74929
sS'required'
p74930
I00
sS'group_name'
p74931
Nsa(dp74932
S'description'
p74933
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p74934
sS'cpp_type'
p74935
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p74936
sS'default'
p74937
g3
sS'name'
p74938
S'control_tags'
p74939
sS'required'
p74940
I00
sS'group_name'
p74941
Nsa(dp74942
S'description'
p74943
S'The x displacement\n'
p74944
sS'cpp_type'
p74945
S'std::vector<VariableName>'
p74946
sS'default'
p74947
g3
sS'name'
p74948
S'disp_x'
p74949
sS'required'
p74950
I01
sS'group_name'
p74951
Nsa(dp74952
S'description'
p74953
S'The y displacement\n'
p74954
sS'cpp_type'
p74955
S'std::vector<VariableName>'
p74956
sS'default'
p74957
g3
sS'name'
p74958
S'disp_y'
p74959
sS'required'
p74960
I01
sS'group_name'
p74961
Nsa(dp74962
S'description'
p74963
S'The z displacement\n'
p74964
sS'cpp_type'
p74965
S'std::vector<VariableName>'
p74966
sS'default'
p74967
g3
sS'name'
p74968
S'disp_z'
p74969
sS'required'
p74970
I00
sS'group_name'
p74971
Nsa(dp74972
S'description'
p74973
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p74974
sS'cpp_type'
p74975
S'FunctionName'
p74976
sS'default'
p74977
g3
sS'name'
p74978
S'elasticity_tensor_prefactor'
p74979
sS'required'
p74980
I00
sS'group_name'
p74981
Nsa(dp74982
S'description'
p74983
S'Euler angle in direction 1\n'
p74984
sS'cpp_type'
p74985
S'double'
p74986
sS'default'
p74987
S'0'
p74988
sS'name'
p74989
S'euler_angle_1'
p74990
sS'required'
p74991
I00
sS'group_name'
p74992
Nsa(dp74993
S'description'
p74994
S'Euler angle in direction 2\n'
p74995
sS'cpp_type'
p74996
S'double'
p74997
sS'default'
p74998
S'0'
p74999
sS'name'
p75000
S'euler_angle_2'
p75001
sS'required'
p75002
I00
sS'group_name'
p75003
Nsa(dp75004
S'description'
p75005
S'Euler angle in direction 3\n'
p75006
sS'cpp_type'
p75007
S'double'
p75008
sS'default'
p75009
S'0'
p75010
sS'name'
p75011
S'euler_angle_3'
p75012
sS'required'
p75013
I00
sS'group_name'
p75014
Nsa(dp75015
S'name'
p75016
S'fill_method'
p75017
sS'cpp_type'
p75018
S'MooseEnum'
p75019
sS'default'
p75020
S'symmetric9'
p75021
sS'description'
p75022
S'The fill method\n'
p75023
sS'required'
p75024
I00
sS'options'
p75025
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p75026
sS'group_name'
p75027
Nsa(dp75028
S'description'
p75029
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p75030
sS'cpp_type'
p75031
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p75032
sS'default'
p75033
g3
sS'name'
p75034
S'initial_stress'
p75035
sS'required'
p75036
I00
sS'group_name'
p75037
Nsa(dp75038
S'description'
p75039
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75040
sS'cpp_type'
p75041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75042
sS'default'
p75043
g3
sS'name'
p75044
S'output_properties'
p75045
sS'required'
p75046
I00
sS'group_name'
p75047
S'Outputs'
p75048
sa(dp75049
S'description'
p75050
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75051
sS'cpp_type'
p75052
S'std::vector<OutputName, std::allocator<OutputName> >'
p75053
sS'default'
p75054
S'none'
p75055
sS'name'
p75056
S'outputs'
p75057
sS'required'
p75058
I00
sS'group_name'
p75059
S'Outputs'
p75060
sa(dp75061
S'description'
p75062
S'The seed for the master random number generator\n'
p75063
sS'cpp_type'
p75064
S'unsigned int'
p75065
sS'default'
p75066
S'0'
p75067
sS'name'
p75068
S'seed'
p75069
sS'required'
p75070
I00
sS'group_name'
p75071
S'Advanced'
p75072
sa(dp75073
S'description'
p75074
S'temperature variable\n'
p75075
sS'cpp_type'
p75076
S'std::vector<VariableName>'
p75077
sS'default'
p75078
g3
sS'name'
p75079
S'temperature'
p75080
sS'required'
p75081
I00
sS'group_name'
p75082
Nsa(dp75083
S'description'
p75084
g3
sS'cpp_type'
p75085
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75086
sS'default'
p75087
S'FiniteStrainElasticMaterial'
p75088
sS'name'
p75089
S'type'
p75090
sS'required'
p75091
I00
sS'group_name'
p75092
Nsa(dp75093
S'description'
p75094
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75095
sS'cpp_type'
p75096
S'bool'
p75097
sS'default'
p75098
S'0'
p75099
sS'name'
p75100
S'use_displaced_mesh'
p75101
sS'required'
p75102
I00
sS'group_name'
p75103
S'Advanced'
p75104
sasS'name'
p75105
S'/Materials/FiniteStrainElasticMaterial'
p75106
sa(dp75107
S'description'
p75108
S'Material class for hyper-elastic visco-platic flow: Can handle multiple flow models defined by flowratemodel type user objects\n'
p75109
sS'subblocks'
p75110
NsS'parameters'
p75111
(lp75112
(dp75113
S'description'
p75114
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p75115
sS'cpp_type'
p75116
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75117
sS'default'
p75118
g3
sS'name'
p75119
S'base_name'
p75120
sS'required'
p75121
I00
sS'group_name'
p75122
Nsa(dp75123
S'description'
p75124
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75125
sS'cpp_type'
p75126
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75127
sS'default'
p75128
g3
sS'name'
p75129
S'block'
p75130
sS'required'
p75131
I00
sS'group_name'
p75132
Nsa(dp75133
S'description'
p75134
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75135
sS'cpp_type'
p75136
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75137
sS'default'
p75138
g3
sS'name'
p75139
S'boundary'
p75140
sS'required'
p75141
I00
sS'group_name'
p75142
Nsa(dp75143
S'description'
p75144
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75145
sS'cpp_type'
p75146
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75147
sS'default'
p75148
g3
sS'name'
p75149
S'control_tags'
p75150
sS'required'
p75151
I00
sS'group_name'
p75152
Nsa(dp75153
S'description'
p75154
S'List of User object names that computes flow rate and derivatives\n'
p75155
sS'cpp_type'
p75156
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75157
sS'default'
p75158
g3
sS'name'
p75159
S'flow_rate_user_objects'
p75160
sS'required'
p75161
I00
sS'group_name'
p75162
Nsa(dp75163
S'description'
p75164
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p75165
sS'cpp_type'
p75166
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p75167
sS'default'
p75168
g3
sS'name'
p75169
S'initial_stress'
p75170
sS'required'
p75171
I00
sS'group_name'
p75172
Nsa(dp75173
S'description'
p75174
S'List of User object names that computes internal variable rates and derivatives\n'
p75175
sS'cpp_type'
p75176
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75177
sS'default'
p75178
g3
sS'name'
p75179
S'internal_var_rate_user_objects'
p75180
sS'required'
p75181
I00
sS'group_name'
p75182
Nsa(dp75183
S'description'
p75184
S'List of User object names that integrates internal variables and computes derivatives\n'
p75185
sS'cpp_type'
p75186
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75187
sS'default'
p75188
g3
sS'name'
p75189
S'internal_var_user_objects'
p75190
sS'required'
p75191
I00
sS'group_name'
p75192
Nsa(dp75193
S'description'
p75194
S'Maximum number of substep iteration\n'
p75195
sS'cpp_type'
p75196
S'unsigned int'
p75197
sS'default'
p75198
S'1'
p75199
sS'name'
p75200
S'max_substep_iteration'
p75201
sS'required'
p75202
I00
sS'group_name'
p75203
Nsa(dp75204
S'description'
p75205
S'Maximum iteration for flow rate update\n'
p75206
sS'cpp_type'
p75207
S'unsigned int'
p75208
sS'default'
p75209
S'50'
p75210
sS'name'
p75211
S'maxiters'
p75212
sS'required'
p75213
I00
sS'group_name'
p75214
Nsa(dp75215
S'description'
p75216
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75217
sS'cpp_type'
p75218
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75219
sS'default'
p75220
g3
sS'name'
p75221
S'output_properties'
p75222
sS'required'
p75223
I00
sS'group_name'
p75224
S'Outputs'
p75225
sa(dp75226
S'description'
p75227
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75228
sS'cpp_type'
p75229
S'std::vector<OutputName, std::allocator<OutputName> >'
p75230
sS'default'
p75231
S'none'
p75232
sS'name'
p75233
S'outputs'
p75234
sS'required'
p75235
I00
sS'group_name'
p75236
S'Outputs'
p75237
sa(dp75238
S'description'
p75239
S'Absolute Tolerance for flow rate residual equation\n'
p75240
sS'cpp_type'
p75241
S'double'
p75242
sS'default'
p75243
S'1e-10'
p75244
sS'name'
p75245
S'resid_abs_tol'
p75246
sS'required'
p75247
I00
sS'group_name'
p75248
Nsa(dp75249
S'description'
p75250
S'Relative Tolerance for flow rate residual equation\n'
p75251
sS'cpp_type'
p75252
S'double'
p75253
sS'default'
p75254
S'1e-06'
p75255
sS'name'
p75256
S'resid_rel_tol'
p75257
sS'required'
p75258
I00
sS'group_name'
p75259
Nsa(dp75260
S'description'
p75261
S'The seed for the master random number generator\n'
p75262
sS'cpp_type'
p75263
S'unsigned int'
p75264
sS'default'
p75265
S'0'
p75266
sS'name'
p75267
S'seed'
p75268
sS'required'
p75269
I00
sS'group_name'
p75270
S'Advanced'
p75271
sa(dp75272
S'description'
p75273
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p75274
sS'cpp_type'
p75275
S'bool'
p75276
sS'default'
p75277
S'0'
p75278
sS'name'
p75279
S'store_stress_old'
p75280
sS'required'
p75281
I00
sS'group_name'
p75282
Nsa(dp75283
S'description'
p75284
S'List of User object names that computes strength variables and derivatives\n'
p75285
sS'cpp_type'
p75286
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p75287
sS'default'
p75288
g3
sS'name'
p75289
S'strength_user_objects'
p75290
sS'required'
p75291
I00
sS'group_name'
p75292
Nsa(dp75293
S'description'
p75294
g3
sS'cpp_type'
p75295
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75296
sS'default'
p75297
S'FiniteStrainHyperElasticViscoPlastic'
p75298
sS'name'
p75299
S'type'
p75300
sS'required'
p75301
I00
sS'group_name'
p75302
Nsa(dp75303
S'description'
p75304
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75305
sS'cpp_type'
p75306
S'bool'
p75307
sS'default'
p75308
S'0'
p75309
sS'name'
p75310
S'use_displaced_mesh'
p75311
sS'required'
p75312
I00
sS'group_name'
p75313
S'Advanced'
p75314
sasS'name'
p75315
S'/Materials/FiniteStrainHyperElasticViscoPlastic'
p75316
sa(dp75317
S'description'
p75318
S'Non-associative Mohr-Coulomb plasticity with hardening/softening\n'
p75319
sS'subblocks'
p75320
NsS'parameters'
p75321
(lp75322
(dp75323
S'description'
p75324
S'Stiffness tensor for material\n'
p75325
sS'cpp_type'
p75326
S'std::vector<double, std::allocator<double> >'
p75327
sS'default'
p75328
g3
sS'name'
p75329
S'C_ijkl'
p75330
sS'required'
p75331
I01
sS'group_name'
p75332
Nsa(dp75333
S'description'
p75334
S'Material property base name\n'
p75335
sS'cpp_type'
p75336
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75337
sS'default'
p75338
g3
sS'name'
p75339
S'base_name'
p75340
sS'required'
p75341
I00
sS'group_name'
p75342
Nsa(dp75343
S'description'
p75344
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75345
sS'cpp_type'
p75346
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75347
sS'default'
p75348
g3
sS'name'
p75349
S'block'
p75350
sS'required'
p75351
I00
sS'group_name'
p75352
Nsa(dp75353
S'description'
p75354
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75355
sS'cpp_type'
p75356
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75357
sS'default'
p75358
g3
sS'name'
p75359
S'boundary'
p75360
sS'required'
p75361
I00
sS'group_name'
p75362
Nsa(dp75363
S'description'
p75364
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75365
sS'cpp_type'
p75366
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75367
sS'default'
p75368
g3
sS'name'
p75369
S'control_tags'
p75370
sS'required'
p75371
I00
sS'group_name'
p75372
Nsa(dp75373
S'description'
p75374
S'Debug parameter for use by developers when creating new plasticity models, not for general use.  2 = debug Jacobian entries, 3 = check the entire Jacobian\n'
p75375
sS'cpp_type'
p75376
S'int'
p75377
sS'default'
p75378
S'0'
p75379
sS'name'
p75380
S'debug_fspb'
p75381
sS'required'
p75382
I00
sS'group_name'
p75383
Nsa(dp75384
S'description'
p75385
S'Debug finite differencing parameters for the internal parameters\n'
p75386
sS'cpp_type'
p75387
S'std::vector<double, std::allocator<double> >'
p75388
sS'default'
p75389
g3
sS'name'
p75390
S'debug_intnl_change'
p75391
sS'required'
p75392
I00
sS'group_name'
p75393
Nsa(dp75394
S'description'
p75395
S'Debug Jacobian entries at these internal parameters\n'
p75396
sS'cpp_type'
p75397
S'std::vector<double, std::allocator<double> >'
p75398
sS'default'
p75399
g3
sS'name'
p75400
S'debug_jac_at_intnl'
p75401
sS'required'
p75402
I00
sS'group_name'
p75403
Nsa(dp75404
S'description'
p75405
S'Debug Jacobian entries at these plastic multipliers\n'
p75406
sS'cpp_type'
p75407
S'std::vector<double, std::allocator<double> >'
p75408
sS'default'
p75409
g3
sS'name'
p75410
S'debug_jac_at_pm'
p75411
sS'required'
p75412
I00
sS'group_name'
p75413
Nsa(dp75414
S'description'
p75415
S'Debug Jacobian entries at this stress.  For use by developers\n'
p75416
sS'cpp_type'
p75417
S'libMesh::TensorValue<double>'
p75418
sS'default'
p75419
S'(xx,xy,xz)=(       0,        0,        0) (yx,yy,yz)=(       0,        0,        0) (zx,zy,zz)=(       0,        0,        0)'
p75420
sS'name'
p75421
S'debug_jac_at_stress'
p75422
sS'required'
p75423
I00
sS'group_name'
p75424
Nsa(dp75425
S'description'
p75426
S'Debug finite differencing parameters for the plastic multipliers\n'
p75427
sS'cpp_type'
p75428
S'std::vector<double, std::allocator<double> >'
p75429
sS'default'
p75430
g3
sS'name'
p75431
S'debug_pm_change'
p75432
sS'required'
p75433
I00
sS'group_name'
p75434
Nsa(dp75435
S'description'
p75436
S'Debug finite differencing parameter for the stress\n'
p75437
sS'cpp_type'
p75438
S'double'
p75439
sS'default'
p75440
S'1'
p75441
sS'name'
p75442
S'debug_stress_change'
p75443
sS'required'
p75444
I00
sS'group_name'
p75445
Nsa(dp75446
S'description'
p75447
S'The x displacement\n'
p75448
sS'cpp_type'
p75449
S'std::vector<VariableName>'
p75450
sS'default'
p75451
g3
sS'name'
p75452
S'disp_x'
p75453
sS'required'
p75454
I01
sS'group_name'
p75455
Nsa(dp75456
S'description'
p75457
S'The y displacement\n'
p75458
sS'cpp_type'
p75459
S'std::vector<VariableName>'
p75460
sS'default'
p75461
g3
sS'name'
p75462
S'disp_y'
p75463
sS'required'
p75464
I01
sS'group_name'
p75465
Nsa(dp75466
S'description'
p75467
S'The z displacement\n'
p75468
sS'cpp_type'
p75469
S'std::vector<VariableName>'
p75470
sS'default'
p75471
g3
sS'name'
p75472
S'disp_z'
p75473
sS'required'
p75474
I00
sS'group_name'
p75475
Nsa(dp75476
S'description'
p75477
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p75478
sS'cpp_type'
p75479
S'FunctionName'
p75480
sS'default'
p75481
g3
sS'name'
p75482
S'elasticity_tensor_prefactor'
p75483
sS'required'
p75484
I00
sS'group_name'
p75485
Nsa(dp75486
S'description'
p75487
S'The Newton-Raphson process is only deemed converged if the plastic strain increment constraints have L2 norm less than this.\n'
p75488
sS'cpp_type'
p75489
S'double'
p75490
sS'default'
p75491
g3
sS'name'
p75492
S'ep_plastic_tolerance'
p75493
sS'required'
p75494
I01
sS'group_name'
p75495
Nsa(dp75496
S'description'
p75497
S'Euler angle in direction 1\n'
p75498
sS'cpp_type'
p75499
S'double'
p75500
sS'default'
p75501
S'0'
p75502
sS'name'
p75503
S'euler_angle_1'
p75504
sS'required'
p75505
I00
sS'group_name'
p75506
Nsa(dp75507
S'description'
p75508
S'Euler angle in direction 2\n'
p75509
sS'cpp_type'
p75510
S'double'
p75511
sS'default'
p75512
S'0'
p75513
sS'name'
p75514
S'euler_angle_2'
p75515
sS'required'
p75516
I00
sS'group_name'
p75517
Nsa(dp75518
S'description'
p75519
S'Euler angle in direction 3\n'
p75520
sS'cpp_type'
p75521
S'double'
p75522
sS'default'
p75523
S'0'
p75524
sS'name'
p75525
S'euler_angle_3'
p75526
sS'required'
p75527
I00
sS'group_name'
p75528
Nsa(dp75529
S'name'
p75530
S'fill_method'
p75531
sS'cpp_type'
p75532
S'MooseEnum'
p75533
sS'default'
p75534
S'symmetric9'
p75535
sS'description'
p75536
S'The fill method\n'
p75537
sS'required'
p75538
I00
sS'options'
p75539
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p75540
sS'group_name'
p75541
Nsa(dp75542
S'description'
p75543
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p75544
sS'cpp_type'
p75545
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p75546
sS'default'
p75547
g3
sS'name'
p75548
S'initial_stress'
p75549
sS'required'
p75550
I00
sS'group_name'
p75551
Nsa(dp75552
S'description'
p75553
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.  A vector of tolerances must be entered for the case with more than one internal parameter\n'
p75554
sS'cpp_type'
p75555
S'std::vector<double, std::allocator<double> >'
p75556
sS'default'
p75557
g3
sS'name'
p75558
S'internal_constraint_tolerance'
p75559
sS'required'
p75560
I00
sS'group_name'
p75561
Nsa(dp75562
S'description'
p75563
S'Maximum number of Newton-Raphson iterations allowed\n'
p75564
sS'cpp_type'
p75565
S'unsigned int'
p75566
sS'default'
p75567
S'20'
p75568
sS'name'
p75569
S'max_NR_iterations'
p75570
sS'required'
p75571
I00
sS'group_name'
p75572
Nsa(dp75573
S'description'
p75574
S'If ordinary Newton-Raphson + line-search fails, then the applied strain increment is subdivided, and the return-map is tried again.  This parameter is the maximum number of subdivisions allowed.  The number of subdivisions tried increases exponentially, first 1, then 2, then 4, then 8, etc\n'
p75575
sS'cpp_type'
p75576
S'unsigned int'
p75577
sS'default'
p75578
S'4096'
p75579
sS'name'
p75580
S'max_subdivisions'
p75581
sS'required'
p75582
I00
sS'group_name'
p75583
Nsa(dp75584
S'description'
p75585
S'Mohr-Coulomb cohesion\n'
p75586
sS'cpp_type'
p75587
S'double'
p75588
sS'default'
p75589
g3
sS'name'
p75590
S'mc_cohesion'
p75591
sS'required'
p75592
I01
sS'group_name'
p75593
Nsa(dp75594
S'description'
p75595
S'Cohesion = mc_cohesion_residual + (mc_cohesion - mc_cohesion_residual)*exp(-mc_cohesion_rate*plasticstrain).  Set to zero for perfect plasticity\n'
p75596
sS'cpp_type'
p75597
S'double'
p75598
sS'default'
p75599
S'0'
p75600
sS'name'
p75601
S'mc_cohesion_rate'
p75602
sS'required'
p75603
I00
sS'group_name'
p75604
Nsa(dp75605
S'description'
p75606
S'Mohr-Coulomb cohesion at infinite hardening.  If not given, this defaults to mc_cohesion, ie, perfect plasticity\n'
p75607
sS'cpp_type'
p75608
S'double'
p75609
sS'default'
p75610
g3
sS'name'
p75611
S'mc_cohesion_residual'
p75612
sS'required'
p75613
I00
sS'group_name'
p75614
Nsa(dp75615
S'description'
p75616
S'Mohr-Coulomb dilation angle in degrees.  For associative flow use dilation_angle = friction_angle.  Should not be less than friction angle.\n'
p75617
sS'cpp_type'
p75618
S'double'
p75619
sS'default'
p75620
g3
sS'name'
p75621
S'mc_dilation_angle'
p75622
sS'required'
p75623
I01
sS'group_name'
p75624
Nsa(dp75625
S'description'
p75626
S'dilation_angle = mc_dilation_angle_residual + (mc_dilation_angle - mc_dilation_angle_residual)*exp(-mc_dilation_angle_rate*plasticstrain).  Set to zero for perfect plasticity\n'
p75627
sS'cpp_type'
p75628
S'double'
p75629
sS'default'
p75630
S'0'
p75631
sS'name'
p75632
S'mc_dilation_angle_rate'
p75633
sS'required'
p75634
I00
sS'group_name'
p75635
Nsa(dp75636
S'description'
p75637
S'Mohr-Coulomb dilation angle in degrees at infinite hardening.  If not given, this defaults to mc_dilation_angle, ie, perfect plasticity\n'
p75638
sS'cpp_type'
p75639
S'double'
p75640
sS'default'
p75641
g3
sS'name'
p75642
S'mc_dilation_angle_residual'
p75643
sS'required'
p75644
I00
sS'group_name'
p75645
Nsa(dp75646
S'description'
p75647
S'Smoothing parameter: the edges of the cone are smoothed by the given amount.\n'
p75648
sS'cpp_type'
p75649
S'double'
p75650
sS'default'
p75651
S'25'
p75652
sS'name'
p75653
S'mc_edge_smoother'
p75654
sS'required'
p75655
I00
sS'group_name'
p75656
Nsa(dp75657
S'description'
p75658
S'Mohr-Coulomb friction angle in degrees\n'
p75659
sS'cpp_type'
p75660
S'double'
p75661
sS'default'
p75662
g3
sS'name'
p75663
S'mc_friction_angle'
p75664
sS'required'
p75665
I01
sS'group_name'
p75666
Nsa(dp75667
S'description'
p75668
S'friction_angle = mc_friction_angle_residual + (mc_friction_angle - mc_friction_angle_residual)*exp(-mc_friction_angle_rate*plasticstrain).  Set to zero for perfect plasticity\n'
p75669
sS'cpp_type'
p75670
S'double'
p75671
sS'default'
p75672
S'0'
p75673
sS'name'
p75674
S'mc_friction_angle_rate'
p75675
sS'required'
p75676
I00
sS'group_name'
p75677
Nsa(dp75678
S'description'
p75679
S'Mohr-Coulomb friction angle in degrees at infinite hardening.  If not given, this defaults to mc_friction_angle, ie, perfect plasticity\n'
p75680
sS'cpp_type'
p75681
S'double'
p75682
sS'default'
p75683
g3
sS'name'
p75684
S'mc_friction_angle_residual'
p75685
sS'required'
p75686
I00
sS'group_name'
p75687
Nsa(dp75688
S'description'
p75689
S'If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n'
p75690
sS'cpp_type'
p75691
S'double'
p75692
sS'default'
p75693
g3
sS'name'
p75694
S'mc_lode_cutoff'
p75695
sS'required'
p75696
I00
sS'group_name'
p75697
Nsa(dp75698
S'description'
p75699
S'Smoothing parameter: the cone vertex at mean = cohesion*cot(friction_angle), will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p75700
sS'cpp_type'
p75701
S'double'
p75702
sS'default'
p75703
g3
sS'name'
p75704
S'mc_tip_smoother'
p75705
sS'required'
p75706
I01
sS'group_name'
p75707
Nsa(dp75708
S'description'
p75709
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75710
sS'cpp_type'
p75711
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75712
sS'default'
p75713
g3
sS'name'
p75714
S'output_properties'
p75715
sS'required'
p75716
I00
sS'group_name'
p75717
S'Outputs'
p75718
sa(dp75719
S'description'
p75720
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75721
sS'cpp_type'
p75722
S'std::vector<OutputName, std::allocator<OutputName> >'
p75723
sS'default'
p75724
S'none'
p75725
sS'name'
p75726
S'outputs'
p75727
sS'required'
p75728
I00
sS'group_name'
p75729
S'Outputs'
p75730
sa(dp75731
S'description'
p75732
S'The seed for the master random number generator\n'
p75733
sS'cpp_type'
p75734
S'unsigned int'
p75735
sS'default'
p75736
S'0'
p75737
sS'name'
p75738
S'seed'
p75739
sS'required'
p75740
I00
sS'group_name'
p75741
S'Advanced'
p75742
sa(dp75743
S'description'
p75744
S'temperature variable\n'
p75745
sS'cpp_type'
p75746
S'std::vector<VariableName>'
p75747
sS'default'
p75748
g3
sS'name'
p75749
S'temperature'
p75750
sS'required'
p75751
I00
sS'group_name'
p75752
Nsa(dp75753
S'description'
p75754
g3
sS'cpp_type'
p75755
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75756
sS'default'
p75757
S'FiniteStrainMohrCoulomb'
p75758
sS'name'
p75759
S'type'
p75760
sS'required'
p75761
I00
sS'group_name'
p75762
Nsa(dp75763
S'description'
p75764
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p75765
sS'cpp_type'
p75766
S'bool'
p75767
sS'default'
p75768
S'0'
p75769
sS'name'
p75770
S'use_displaced_mesh'
p75771
sS'required'
p75772
I00
sS'group_name'
p75773
S'Advanced'
p75774
sa(dp75775
S'description'
p75776
S'If the yield function is less than this amount, the (stress, internal parameters) are deemed admissible.  A vector of tolerances must be entered for the multi-surface case\n'
p75777
sS'cpp_type'
p75778
S'std::vector<double, std::allocator<double> >'
p75779
sS'default'
p75780
g3
sS'name'
p75781
S'yield_function_tolerance'
p75782
sS'required'
p75783
I01
sS'group_name'
p75784
NsasS'name'
p75785
S'/Materials/FiniteStrainMohrCoulomb'
p75786
sa(dp75787
S'description'
p75788
S'Associative J2 plasticity with isotropic hardening.\n'
p75789
sS'subblocks'
p75790
NsS'parameters'
p75791
(lp75792
(dp75793
S'description'
p75794
S'Stiffness tensor for material\n'
p75795
sS'cpp_type'
p75796
S'std::vector<double, std::allocator<double> >'
p75797
sS'default'
p75798
g3
sS'name'
p75799
S'C_ijkl'
p75800
sS'required'
p75801
I01
sS'group_name'
p75802
Nsa(dp75803
S'description'
p75804
S'Material property base name\n'
p75805
sS'cpp_type'
p75806
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p75807
sS'default'
p75808
g3
sS'name'
p75809
S'base_name'
p75810
sS'required'
p75811
I00
sS'group_name'
p75812
Nsa(dp75813
S'description'
p75814
S'The list of block ids (SubdomainID) that this object will be applied\n'
p75815
sS'cpp_type'
p75816
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p75817
sS'default'
p75818
g3
sS'name'
p75819
S'block'
p75820
sS'required'
p75821
I00
sS'group_name'
p75822
Nsa(dp75823
S'description'
p75824
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p75825
sS'cpp_type'
p75826
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p75827
sS'default'
p75828
g3
sS'name'
p75829
S'boundary'
p75830
sS'required'
p75831
I00
sS'group_name'
p75832
Nsa(dp75833
S'description'
p75834
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p75835
sS'cpp_type'
p75836
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75837
sS'default'
p75838
g3
sS'name'
p75839
S'control_tags'
p75840
sS'required'
p75841
I00
sS'group_name'
p75842
Nsa(dp75843
S'description'
p75844
S'The x displacement\n'
p75845
sS'cpp_type'
p75846
S'std::vector<VariableName>'
p75847
sS'default'
p75848
g3
sS'name'
p75849
S'disp_x'
p75850
sS'required'
p75851
I01
sS'group_name'
p75852
Nsa(dp75853
S'description'
p75854
S'The y displacement\n'
p75855
sS'cpp_type'
p75856
S'std::vector<VariableName>'
p75857
sS'default'
p75858
g3
sS'name'
p75859
S'disp_y'
p75860
sS'required'
p75861
I01
sS'group_name'
p75862
Nsa(dp75863
S'description'
p75864
S'The z displacement\n'
p75865
sS'cpp_type'
p75866
S'std::vector<VariableName>'
p75867
sS'default'
p75868
g3
sS'name'
p75869
S'disp_z'
p75870
sS'required'
p75871
I00
sS'group_name'
p75872
Nsa(dp75873
S'description'
p75874
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p75875
sS'cpp_type'
p75876
S'FunctionName'
p75877
sS'default'
p75878
g3
sS'name'
p75879
S'elasticity_tensor_prefactor'
p75880
sS'required'
p75881
I00
sS'group_name'
p75882
Nsa(dp75883
S'description'
p75884
S'Equivalent plastic strain NR tolerance\n'
p75885
sS'cpp_type'
p75886
S'double'
p75887
sS'default'
p75888
S'1e-07'
p75889
sS'name'
p75890
S'eptol'
p75891
sS'required'
p75892
I00
sS'group_name'
p75893
Nsa(dp75894
S'description'
p75895
S'Euler angle in direction 1\n'
p75896
sS'cpp_type'
p75897
S'double'
p75898
sS'default'
p75899
S'0'
p75900
sS'name'
p75901
S'euler_angle_1'
p75902
sS'required'
p75903
I00
sS'group_name'
p75904
Nsa(dp75905
S'description'
p75906
S'Euler angle in direction 2\n'
p75907
sS'cpp_type'
p75908
S'double'
p75909
sS'default'
p75910
S'0'
p75911
sS'name'
p75912
S'euler_angle_2'
p75913
sS'required'
p75914
I00
sS'group_name'
p75915
Nsa(dp75916
S'description'
p75917
S'Euler angle in direction 3\n'
p75918
sS'cpp_type'
p75919
S'double'
p75920
sS'default'
p75921
S'0'
p75922
sS'name'
p75923
S'euler_angle_3'
p75924
sS'required'
p75925
I00
sS'group_name'
p75926
Nsa(dp75927
S'name'
p75928
S'fill_method'
p75929
sS'cpp_type'
p75930
S'MooseEnum'
p75931
sS'default'
p75932
S'symmetric9'
p75933
sS'description'
p75934
S'The fill method\n'
p75935
sS'required'
p75936
I00
sS'options'
p75937
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p75938
sS'group_name'
p75939
Nsa(dp75940
S'description'
p75941
S'Consistency condition NR tolerance\n'
p75942
sS'cpp_type'
p75943
S'double'
p75944
sS'default'
p75945
S'0.0001'
p75946
sS'name'
p75947
S'ftol'
p75948
sS'required'
p75949
I00
sS'group_name'
p75950
Nsa(dp75951
S'description'
p75952
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p75953
sS'cpp_type'
p75954
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p75955
sS'default'
p75956
g3
sS'name'
p75957
S'initial_stress'
p75958
sS'required'
p75959
I00
sS'group_name'
p75960
Nsa(dp75961
S'description'
p75962
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p75963
sS'cpp_type'
p75964
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p75965
sS'default'
p75966
g3
sS'name'
p75967
S'output_properties'
p75968
sS'required'
p75969
I00
sS'group_name'
p75970
S'Outputs'
p75971
sa(dp75972
S'description'
p75973
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p75974
sS'cpp_type'
p75975
S'std::vector<OutputName, std::allocator<OutputName> >'
p75976
sS'default'
p75977
S'none'
p75978
sS'name'
p75979
S'outputs'
p75980
sS'required'
p75981
I00
sS'group_name'
p75982
S'Outputs'
p75983
sa(dp75984
S'description'
p75985
S'Plastic strain NR tolerance\n'
p75986
sS'cpp_type'
p75987
S'double'
p75988
sS'default'
p75989
S'1e-08'
p75990
sS'name'
p75991
S'rtol'
p75992
sS'required'
p75993
I00
sS'group_name'
p75994
Nsa(dp75995
S'description'
p75996
S'The seed for the master random number generator\n'
p75997
sS'cpp_type'
p75998
S'unsigned int'
p75999
sS'default'
p76000
S'0'
p76001
sS'name'
p76002
S'seed'
p76003
sS'required'
p76004
I00
sS'group_name'
p76005
S'Advanced'
p76006
sa(dp76007
S'description'
p76008
S'temperature variable\n'
p76009
sS'cpp_type'
p76010
S'std::vector<VariableName>'
p76011
sS'default'
p76012
g3
sS'name'
p76013
S'temperature'
p76014
sS'required'
p76015
I00
sS'group_name'
p76016
Nsa(dp76017
S'description'
p76018
g3
sS'cpp_type'
p76019
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76020
sS'default'
p76021
S'FiniteStrainPlasticMaterial'
p76022
sS'name'
p76023
S'type'
p76024
sS'required'
p76025
I00
sS'group_name'
p76026
Nsa(dp76027
S'description'
p76028
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76029
sS'cpp_type'
p76030
S'bool'
p76031
sS'default'
p76032
S'0'
p76033
sS'name'
p76034
S'use_displaced_mesh'
p76035
sS'required'
p76036
I00
sS'group_name'
p76037
S'Advanced'
p76038
sa(dp76039
S'description'
p76040
S'Input data as pairs of equivalent plastic strain and yield stress: Should start with equivalent plastic strain 0\n'
p76041
sS'cpp_type'
p76042
S'std::vector<double, std::allocator<double> >'
p76043
sS'default'
p76044
g3
sS'name'
p76045
S'yield_stress'
p76046
sS'required'
p76047
I01
sS'group_name'
p76048
NsasS'name'
p76049
S'/Materials/FiniteStrainPlasticMaterial'
p76050
sa(dp76051
S'description'
p76052
S'Associative rate dependent J2 plasticity with isotropic hardening: Overstress based on Perzyna model\n'
p76053
sS'subblocks'
p76054
NsS'parameters'
p76055
(lp76056
(dp76057
S'description'
p76058
S'Stiffness tensor for material\n'
p76059
sS'cpp_type'
p76060
S'std::vector<double, std::allocator<double> >'
p76061
sS'default'
p76062
g3
sS'name'
p76063
S'C_ijkl'
p76064
sS'required'
p76065
I01
sS'group_name'
p76066
Nsa(dp76067
S'description'
p76068
S'Material property base name\n'
p76069
sS'cpp_type'
p76070
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76071
sS'default'
p76072
g3
sS'name'
p76073
S'base_name'
p76074
sS'required'
p76075
I00
sS'group_name'
p76076
Nsa(dp76077
S'description'
p76078
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76079
sS'cpp_type'
p76080
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76081
sS'default'
p76082
g3
sS'name'
p76083
S'block'
p76084
sS'required'
p76085
I00
sS'group_name'
p76086
Nsa(dp76087
S'description'
p76088
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76089
sS'cpp_type'
p76090
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76091
sS'default'
p76092
g3
sS'name'
p76093
S'boundary'
p76094
sS'required'
p76095
I00
sS'group_name'
p76096
Nsa(dp76097
S'description'
p76098
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76099
sS'cpp_type'
p76100
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76101
sS'default'
p76102
g3
sS'name'
p76103
S'control_tags'
p76104
sS'required'
p76105
I00
sS'group_name'
p76106
Nsa(dp76107
S'description'
p76108
S'The x displacement\n'
p76109
sS'cpp_type'
p76110
S'std::vector<VariableName>'
p76111
sS'default'
p76112
g3
sS'name'
p76113
S'disp_x'
p76114
sS'required'
p76115
I01
sS'group_name'
p76116
Nsa(dp76117
S'description'
p76118
S'The y displacement\n'
p76119
sS'cpp_type'
p76120
S'std::vector<VariableName>'
p76121
sS'default'
p76122
g3
sS'name'
p76123
S'disp_y'
p76124
sS'required'
p76125
I01
sS'group_name'
p76126
Nsa(dp76127
S'description'
p76128
S'The z displacement\n'
p76129
sS'cpp_type'
p76130
S'std::vector<VariableName>'
p76131
sS'default'
p76132
g3
sS'name'
p76133
S'disp_z'
p76134
sS'required'
p76135
I00
sS'group_name'
p76136
Nsa(dp76137
S'description'
p76138
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p76139
sS'cpp_type'
p76140
S'FunctionName'
p76141
sS'default'
p76142
g3
sS'name'
p76143
S'elasticity_tensor_prefactor'
p76144
sS'required'
p76145
I00
sS'group_name'
p76146
Nsa(dp76147
S'description'
p76148
S'Equivalent plastic strain NR tolerance\n'
p76149
sS'cpp_type'
p76150
S'double'
p76151
sS'default'
p76152
S'1e-07'
p76153
sS'name'
p76154
S'eptol'
p76155
sS'required'
p76156
I00
sS'group_name'
p76157
Nsa(dp76158
S'description'
p76159
S'Euler angle in direction 1\n'
p76160
sS'cpp_type'
p76161
S'double'
p76162
sS'default'
p76163
S'0'
p76164
sS'name'
p76165
S'euler_angle_1'
p76166
sS'required'
p76167
I00
sS'group_name'
p76168
Nsa(dp76169
S'description'
p76170
S'Euler angle in direction 2\n'
p76171
sS'cpp_type'
p76172
S'double'
p76173
sS'default'
p76174
S'0'
p76175
sS'name'
p76176
S'euler_angle_2'
p76177
sS'required'
p76178
I00
sS'group_name'
p76179
Nsa(dp76180
S'description'
p76181
S'Euler angle in direction 3\n'
p76182
sS'cpp_type'
p76183
S'double'
p76184
sS'default'
p76185
S'0'
p76186
sS'name'
p76187
S'euler_angle_3'
p76188
sS'required'
p76189
I00
sS'group_name'
p76190
Nsa(dp76191
S'description'
p76192
S'Exponent for rate dependent plasticity (Perzyna)\n'
p76193
sS'cpp_type'
p76194
S'double'
p76195
sS'default'
p76196
g3
sS'name'
p76197
S'exponent'
p76198
sS'required'
p76199
I01
sS'group_name'
p76200
Nsa(dp76201
S'name'
p76202
S'fill_method'
p76203
sS'cpp_type'
p76204
S'MooseEnum'
p76205
sS'default'
p76206
S'symmetric9'
p76207
sS'description'
p76208
S'The fill method\n'
p76209
sS'required'
p76210
I00
sS'options'
p76211
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p76212
sS'group_name'
p76213
Nsa(dp76214
S'description'
p76215
S'Consistency condition NR tolerance\n'
p76216
sS'cpp_type'
p76217
S'double'
p76218
sS'default'
p76219
S'0.0001'
p76220
sS'name'
p76221
S'ftol'
p76222
sS'required'
p76223
I00
sS'group_name'
p76224
Nsa(dp76225
S'description'
p76226
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p76227
sS'cpp_type'
p76228
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p76229
sS'default'
p76230
g3
sS'name'
p76231
S'initial_stress'
p76232
sS'required'
p76233
I00
sS'group_name'
p76234
Nsa(dp76235
S'description'
p76236
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76237
sS'cpp_type'
p76238
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76239
sS'default'
p76240
g3
sS'name'
p76241
S'output_properties'
p76242
sS'required'
p76243
I00
sS'group_name'
p76244
S'Outputs'
p76245
sa(dp76246
S'description'
p76247
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76248
sS'cpp_type'
p76249
S'std::vector<OutputName, std::allocator<OutputName> >'
p76250
sS'default'
p76251
S'none'
p76252
sS'name'
p76253
S'outputs'
p76254
sS'required'
p76255
I00
sS'group_name'
p76256
S'Outputs'
p76257
sa(dp76258
S'description'
p76259
S'Reference plastic strain rate parameter for rate dependent plasticity (Overstress model)\n'
p76260
sS'cpp_type'
p76261
S'double'
p76262
sS'default'
p76263
g3
sS'name'
p76264
S'ref_pe_rate'
p76265
sS'required'
p76266
I01
sS'group_name'
p76267
Nsa(dp76268
S'description'
p76269
S'Plastic strain NR tolerance\n'
p76270
sS'cpp_type'
p76271
S'double'
p76272
sS'default'
p76273
S'1e-08'
p76274
sS'name'
p76275
S'rtol'
p76276
sS'required'
p76277
I00
sS'group_name'
p76278
Nsa(dp76279
S'description'
p76280
S'The seed for the master random number generator\n'
p76281
sS'cpp_type'
p76282
S'unsigned int'
p76283
sS'default'
p76284
S'0'
p76285
sS'name'
p76286
S'seed'
p76287
sS'required'
p76288
I00
sS'group_name'
p76289
S'Advanced'
p76290
sa(dp76291
S'description'
p76292
S'temperature variable\n'
p76293
sS'cpp_type'
p76294
S'std::vector<VariableName>'
p76295
sS'default'
p76296
g3
sS'name'
p76297
S'temperature'
p76298
sS'required'
p76299
I00
sS'group_name'
p76300
Nsa(dp76301
S'description'
p76302
g3
sS'cpp_type'
p76303
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76304
sS'default'
p76305
S'FiniteStrainRatePlasticMaterial'
p76306
sS'name'
p76307
S'type'
p76308
sS'required'
p76309
I00
sS'group_name'
p76310
Nsa(dp76311
S'description'
p76312
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76313
sS'cpp_type'
p76314
S'bool'
p76315
sS'default'
p76316
S'0'
p76317
sS'name'
p76318
S'use_displaced_mesh'
p76319
sS'required'
p76320
I00
sS'group_name'
p76321
S'Advanced'
p76322
sa(dp76323
S'description'
p76324
S'Input data as pairs of equivalent plastic strain and yield stress: Should start with equivalent plastic strain 0\n'
p76325
sS'cpp_type'
p76326
S'std::vector<double, std::allocator<double> >'
p76327
sS'default'
p76328
g3
sS'name'
p76329
S'yield_stress'
p76330
sS'required'
p76331
I01
sS'group_name'
p76332
NsasS'name'
p76333
S'/Materials/FiniteStrainRatePlasticMaterial'
p76334
sa(dp76335
S'description'
p76336
S'Calculating the force density acting on a grain\n'
p76337
sS'subblocks'
p76338
NsS'parameters'
p76339
(lp76340
(dp76341
S'description'
p76342
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76343
sS'cpp_type'
p76344
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76345
sS'default'
p76346
g3
sS'name'
p76347
S'block'
p76348
sS'required'
p76349
I00
sS'group_name'
p76350
Nsa(dp76351
S'description'
p76352
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76353
sS'cpp_type'
p76354
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76355
sS'default'
p76356
g3
sS'name'
p76357
S'boundary'
p76358
sS'required'
p76359
I00
sS'group_name'
p76360
Nsa(dp76361
S'description'
p76362
S'Concentration field\n'
p76363
sS'cpp_type'
p76364
S'std::vector<VariableName>'
p76365
sS'default'
p76366
g3
sS'name'
p76367
S'c'
p76368
sS'required'
p76369
I00
sS'group_name'
p76370
Nsa(dp76371
S'description'
p76372
S'Equilibrium density\n'
p76373
sS'cpp_type'
p76374
S'double'
p76375
sS'default'
p76376
S'0.9816'
p76377
sS'name'
p76378
S'ceq'
p76379
sS'required'
p76380
I00
sS'group_name'
p76381
Nsa(dp76382
S'description'
p76383
S'Thresold Concentration for GB\n'
p76384
sS'cpp_type'
p76385
S'double'
p76386
sS'default'
p76387
S'0.25'
p76388
sS'name'
p76389
S'cgb'
p76390
sS'required'
p76391
I00
sS'group_name'
p76392
Nsa(dp76393
S'description'
p76394
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76395
sS'cpp_type'
p76396
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76397
sS'default'
p76398
g3
sS'name'
p76399
S'control_tags'
p76400
sS'required'
p76401
I00
sS'group_name'
p76402
Nsa(dp76403
S'description'
p76404
S'Array of coupled order parameters\n'
p76405
sS'cpp_type'
p76406
S'std::vector<VariableName>'
p76407
sS'default'
p76408
g3
sS'name'
p76409
S'etas'
p76410
sS'required'
p76411
I00
sS'group_name'
p76412
Nsa(dp76413
S'description'
p76414
S'stiffness constant\n'
p76415
sS'cpp_type'
p76416
S'double'
p76417
sS'default'
p76418
S'100'
p76419
sS'name'
p76420
S'k'
p76421
sS'required'
p76422
I00
sS'group_name'
p76423
Nsa(dp76424
S'description'
p76425
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76426
sS'cpp_type'
p76427
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76428
sS'default'
p76429
g3
sS'name'
p76430
S'output_properties'
p76431
sS'required'
p76432
I00
sS'group_name'
p76433
S'Outputs'
p76434
sa(dp76435
S'description'
p76436
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76437
sS'cpp_type'
p76438
S'std::vector<OutputName, std::allocator<OutputName> >'
p76439
sS'default'
p76440
S'none'
p76441
sS'name'
p76442
S'outputs'
p76443
sS'required'
p76444
I00
sS'group_name'
p76445
S'Outputs'
p76446
sa(dp76447
S'description'
p76448
S'The seed for the master random number generator\n'
p76449
sS'cpp_type'
p76450
S'unsigned int'
p76451
sS'default'
p76452
S'0'
p76453
sS'name'
p76454
S'seed'
p76455
sS'required'
p76456
I00
sS'group_name'
p76457
S'Advanced'
p76458
sa(dp76459
S'description'
p76460
g3
sS'cpp_type'
p76461
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76462
sS'default'
p76463
S'ForceDensityMaterial'
p76464
sS'name'
p76465
S'type'
p76466
sS'required'
p76467
I00
sS'group_name'
p76468
Nsa(dp76469
S'description'
p76470
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76471
sS'cpp_type'
p76472
S'bool'
p76473
sS'default'
p76474
S'0'
p76475
sS'name'
p76476
S'use_displaced_mesh'
p76477
sS'required'
p76478
I00
sS'group_name'
p76479
S'Advanced'
p76480
sasS'name'
p76481
S'/Materials/ForceDensityMaterial'
p76482
sa(dp76483
S'description'
p76484
g3
sS'subblocks'
p76485
NsS'parameters'
p76486
(lp76487
(dp76488
S'description'
p76489
S'Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n'
p76490
sS'cpp_type'
p76491
S'FileName'
p76492
sS'default'
p76493
g3
sS'name'
p76494
S'Anisotropic_GB_file_name'
p76495
sS'required'
p76496
I01
sS'group_name'
p76497
Nsa(dp76498
S'description'
p76499
S'Temperature in Kelvin\n'
p76500
sS'cpp_type'
p76501
S'std::vector<VariableName>'
p76502
sS'default'
p76503
S'300'
p76504
sS'name'
p76505
S'T'
p76506
sS'required'
p76507
I00
sS'group_name'
p76508
Nsa(dp76509
S'description'
p76510
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76511
sS'cpp_type'
p76512
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76513
sS'default'
p76514
g3
sS'name'
p76515
S'block'
p76516
sS'required'
p76517
I00
sS'group_name'
p76518
Nsa(dp76519
S'description'
p76520
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76521
sS'cpp_type'
p76522
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76523
sS'default'
p76524
g3
sS'name'
p76525
S'boundary'
p76526
sS'required'
p76527
I00
sS'group_name'
p76528
Nsa(dp76529
S'description'
p76530
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76531
sS'cpp_type'
p76532
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76533
sS'default'
p76534
g3
sS'name'
p76535
S'control_tags'
p76536
sS'required'
p76537
I00
sS'group_name'
p76538
Nsa(dp76539
S'description'
p76540
S'factor determining inclination dependence of GB mobility\n'
p76541
sS'cpp_type'
p76542
S'double'
p76543
sS'default'
p76544
S'0.1'
p76545
sS'name'
p76546
S'delta_mob'
p76547
sS'required'
p76548
I00
sS'group_name'
p76549
Nsa(dp76550
S'description'
p76551
S'factor determining inclination dependence of GB energy\n'
p76552
sS'cpp_type'
p76553
S'double'
p76554
sS'default'
p76555
S'0.1'
p76556
sS'name'
p76557
S'delta_sigma'
p76558
sS'required'
p76559
I00
sS'group_name'
p76560
Nsa(dp76561
S'description'
p76562
S'The GB anisotropy ininclination would be considered if true\n'
p76563
sS'cpp_type'
p76564
S'bool'
p76565
sS'default'
p76566
g3
sS'name'
p76567
S'inclination_anisotropy'
p76568
sS'required'
p76569
I01
sS'group_name'
p76570
Nsa(dp76571
S'description'
p76572
S'Length scale in m, where default is nm\n'
p76573
sS'cpp_type'
p76574
S'double'
p76575
sS'default'
p76576
S'1e-09'
p76577
sS'name'
p76578
S'length_scale'
p76579
sS'required'
p76580
I00
sS'group_name'
p76581
Nsa(dp76582
S'description'
p76583
S"molar volume of material in m^3/mol, by defaults it's the value of copper\n"
p76584
sS'cpp_type'
p76585
S'double'
p76586
sS'default'
p76587
S'7.11e-06'
p76588
sS'name'
p76589
S'molar_volume_value'
p76590
sS'required'
p76591
I00
sS'group_name'
p76592
Nsa(dp76593
S'description'
p76594
S'Array of coupled variables (num_name)\n'
p76595
sS'cpp_type'
p76596
S'unsigned int'
p76597
sS'default'
p76598
g3
sS'name'
p76599
S'op_num'
p76600
sS'required'
p76601
I00
sS'group_name'
p76602
Nsa(dp76603
S'description'
p76604
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76605
sS'cpp_type'
p76606
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76607
sS'default'
p76608
g3
sS'name'
p76609
S'output_properties'
p76610
sS'required'
p76611
I00
sS'group_name'
p76612
S'Outputs'
p76613
sa(dp76614
S'description'
p76615
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76616
sS'cpp_type'
p76617
S'std::vector<OutputName, std::allocator<OutputName> >'
p76618
sS'default'
p76619
S'none'
p76620
sS'name'
p76621
S'outputs'
p76622
sS'required'
p76623
I00
sS'group_name'
p76624
S'Outputs'
p76625
sa(dp76626
S'description'
p76627
S'The seed for the master random number generator\n'
p76628
sS'cpp_type'
p76629
S'unsigned int'
p76630
sS'default'
p76631
S'0'
p76632
sS'name'
p76633
S'seed'
p76634
sS'required'
p76635
I00
sS'group_name'
p76636
S'Advanced'
p76637
sa(dp76638
S'description'
p76639
S'Time scale in s, where default is ns\n'
p76640
sS'cpp_type'
p76641
S'double'
p76642
sS'default'
p76643
S'1e-09'
p76644
sS'name'
p76645
S'time_scale'
p76646
sS'required'
p76647
I00
sS'group_name'
p76648
Nsa(dp76649
S'description'
p76650
g3
sS'cpp_type'
p76651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76652
sS'default'
p76653
S'GBAnisotropy'
p76654
sS'name'
p76655
S'type'
p76656
sS'required'
p76657
I00
sS'group_name'
p76658
Nsa(dp76659
S'description'
p76660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76661
sS'cpp_type'
p76662
S'bool'
p76663
sS'default'
p76664
S'0'
p76665
sS'name'
p76666
S'use_displaced_mesh'
p76667
sS'required'
p76668
I00
sS'group_name'
p76669
S'Advanced'
p76670
sa(dp76671
S'description'
p76672
S'Array of coupled variables\n'
p76673
sS'cpp_type'
p76674
S'std::vector<VariableName>'
p76675
sS'default'
p76676
g3
sS'name'
p76677
S'v'
p76678
sS'required'
p76679
I01
sS'group_name'
p76680
Nsa(dp76681
S'description'
p76682
S'Array of coupled variables (base_name)\n'
p76683
sS'cpp_type'
p76684
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76685
sS'default'
p76686
g3
sS'name'
p76687
S'var_name_base'
p76688
sS'required'
p76689
I00
sS'group_name'
p76690
Nsa(dp76691
S'description'
p76692
S'Diffuse GB width in nm \n'
p76693
sS'cpp_type'
p76694
S'double'
p76695
sS'default'
p76696
g3
sS'name'
p76697
S'wGB'
p76698
sS'required'
p76699
I01
sS'group_name'
p76700
NsasS'name'
p76701
S'/Materials/GBAnisotropy'
p76702
sa(dp76703
S'description'
p76704
g3
sS'subblocks'
p76705
NsS'parameters'
p76706
(lp76707
(dp76708
S'description'
p76709
S'GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n'
p76710
sS'cpp_type'
p76711
S'double'
p76712
sS'default'
p76713
S'-1'
p76714
sS'name'
p76715
S'GBMobility'
p76716
sS'required'
p76717
I00
sS'group_name'
p76718
Nsa(dp76719
S'description'
p76720
S'Grain boundary energy in J/m^2\n'
p76721
sS'cpp_type'
p76722
S'double'
p76723
sS'default'
p76724
g3
sS'name'
p76725
S'GBenergy'
p76726
sS'required'
p76727
I01
sS'group_name'
p76728
Nsa(dp76729
S'description'
p76730
S'Grain boundary mobility prefactor in m^4/(J*s)\n'
p76731
sS'cpp_type'
p76732
S'double'
p76733
sS'default'
p76734
S'0'
p76735
sS'name'
p76736
S'GBmob0'
p76737
sS'required'
p76738
I00
sS'group_name'
p76739
Nsa(dp76740
S'description'
p76741
S'Grain boundary migration activation energy in eV\n'
p76742
sS'cpp_type'
p76743
S'double'
p76744
sS'default'
p76745
S'0'
p76746
sS'name'
p76747
S'Q'
p76748
sS'required'
p76749
I00
sS'group_name'
p76750
Nsa(dp76751
S'description'
p76752
S'Temperature in Kelvin\n'
p76753
sS'cpp_type'
p76754
S'std::vector<VariableName>'
p76755
sS'default'
p76756
g3
sS'name'
p76757
S'T'
p76758
sS'required'
p76759
I01
sS'group_name'
p76760
Nsa(dp76761
S'description'
p76762
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76763
sS'cpp_type'
p76764
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76765
sS'default'
p76766
g3
sS'name'
p76767
S'block'
p76768
sS'required'
p76769
I00
sS'group_name'
p76770
Nsa(dp76771
S'description'
p76772
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76773
sS'cpp_type'
p76774
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76775
sS'default'
p76776
g3
sS'name'
p76777
S'boundary'
p76778
sS'required'
p76779
I00
sS'group_name'
p76780
Nsa(dp76781
S'description'
p76782
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76783
sS'cpp_type'
p76784
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76785
sS'default'
p76786
g3
sS'name'
p76787
S'control_tags'
p76788
sS'required'
p76789
I00
sS'group_name'
p76790
Nsa(dp76791
S'description'
p76792
S'The GB energy constant \n'
p76793
sS'cpp_type'
p76794
S'double'
p76795
sS'default'
p76796
S'0.125'
p76797
sS'name'
p76798
S'f0s'
p76799
sS'required'
p76800
I00
sS'group_name'
p76801
Nsa(dp76802
S'description'
p76803
S'Length scale in m, where default is nm\n'
p76804
sS'cpp_type'
p76805
S'double'
p76806
sS'default'
p76807
S'1e-09'
p76808
sS'name'
p76809
S'length_scale'
p76810
sS'required'
p76811
I00
sS'group_name'
p76812
Nsa(dp76813
S'description'
p76814
S'Molar volume in m^3/mol, needed for temperature gradient driving force\n'
p76815
sS'cpp_type'
p76816
S'double'
p76817
sS'default'
p76818
S'2.462e-05'
p76819
sS'name'
p76820
S'molar_volume'
p76821
sS'required'
p76822
I00
sS'group_name'
p76823
Nsa(dp76824
S'description'
p76825
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p76826
sS'cpp_type'
p76827
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76828
sS'default'
p76829
g3
sS'name'
p76830
S'output_properties'
p76831
sS'required'
p76832
I00
sS'group_name'
p76833
S'Outputs'
p76834
sa(dp76835
S'description'
p76836
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p76837
sS'cpp_type'
p76838
S'std::vector<OutputName, std::allocator<OutputName> >'
p76839
sS'default'
p76840
S'none'
p76841
sS'name'
p76842
S'outputs'
p76843
sS'required'
p76844
I00
sS'group_name'
p76845
S'Outputs'
p76846
sa(dp76847
S'description'
p76848
S'The seed for the master random number generator\n'
p76849
sS'cpp_type'
p76850
S'unsigned int'
p76851
sS'default'
p76852
S'0'
p76853
sS'name'
p76854
S'seed'
p76855
sS'required'
p76856
I00
sS'group_name'
p76857
S'Advanced'
p76858
sa(dp76859
S'description'
p76860
S'Time scale in s, where default is ns\n'
p76861
sS'cpp_type'
p76862
S'double'
p76863
sS'default'
p76864
S'1e-09'
p76865
sS'name'
p76866
S'time_scale'
p76867
sS'required'
p76868
I00
sS'group_name'
p76869
Nsa(dp76870
S'description'
p76871
g3
sS'cpp_type'
p76872
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76873
sS'default'
p76874
S'GBEvolution'
p76875
sS'name'
p76876
S'type'
p76877
sS'required'
p76878
I00
sS'group_name'
p76879
Nsa(dp76880
S'description'
p76881
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p76882
sS'cpp_type'
p76883
S'bool'
p76884
sS'default'
p76885
S'0'
p76886
sS'name'
p76887
S'use_displaced_mesh'
p76888
sS'required'
p76889
I00
sS'group_name'
p76890
S'Advanced'
p76891
sa(dp76892
S'description'
p76893
S'Diffuse GB width in nm \n'
p76894
sS'cpp_type'
p76895
S'double'
p76896
sS'default'
p76897
g3
sS'name'
p76898
S'wGB'
p76899
sS'required'
p76900
I01
sS'group_name'
p76901
NsasS'name'
p76902
S'/Materials/GBEvolution'
p76903
sa(dp76904
S'description'
p76905
g3
sS'subblocks'
p76906
NsS'parameters'
p76907
(lp76908
(dp76909
S'description'
p76910
S'Name appended to material properties to make them unique\n'
p76911
sS'cpp_type'
p76912
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p76913
sS'default'
p76914
g3
sS'name'
p76915
S'appended_property_name'
p76916
sS'required'
p76917
I00
sS'group_name'
p76918
Nsa(dp76919
S'description'
p76920
S'The list of block ids (SubdomainID) that this object will be applied\n'
p76921
sS'cpp_type'
p76922
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p76923
sS'default'
p76924
g3
sS'name'
p76925
S'block'
p76926
sS'required'
p76927
I00
sS'group_name'
p76928
Nsa(dp76929
S'description'
p76930
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p76931
sS'cpp_type'
p76932
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p76933
sS'default'
p76934
g3
sS'name'
p76935
S'boundary'
p76936
sS'required'
p76937
I00
sS'group_name'
p76938
Nsa(dp76939
S'description'
p76940
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p76941
sS'cpp_type'
p76942
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p76943
sS'default'
p76944
g3
sS'name'
p76945
S'control_tags'
p76946
sS'required'
p76947
I00
sS'group_name'
p76948
Nsa(dp76949
S'name'
p76950
S'coord_type'
p76951
sS'cpp_type'
p76952
S'MooseEnum'
p76953
sS'default'
p76954
S'default'
p76955
sS'description'
p76956
S'Gap calculation type (default or XYZ).\n'
p76957
sS'required'
p76958
I00
sS'options'
p76959
S'default XYZ'
p76960
sS'group_name'
p76961
Nsa(dp76962
S'description'
p76963
S'The emissivity of the fuel surface\n'
p76964
sS'cpp_type'
p76965
S'double'
p76966
sS'default'
p76967
S'0'
p76968
sS'name'
p76969
S'emissivity_1'
p76970
sS'required'
p76971
I00
sS'group_name'
p76972
Nsa(dp76973
S'description'
p76974
S'The emissivity of the cladding surface\n'
p76975
sS'cpp_type'
p76976
S'double'
p76977
sS'default'
p76978
S'0'
p76979
sS'name'
p76980
S'emissivity_2'
p76981
sS'required'
p76982
I00
sS'group_name'
p76983
Nsa(dp76984
S'description'
p76985
S'The thermal conductivity of the gap material\n'
p76986
sS'cpp_type'
p76987
S'double'
p76988
sS'default'
p76989
S'1'
p76990
sS'name'
p76991
S'gap_conductivity'
p76992
sS'required'
p76993
I00
sS'group_name'
p76994
Nsa(dp76995
S'description'
p76996
S'Thermal conductivity of the gap material as a function.  Multiplied by gap_conductivity.\n'
p76997
sS'cpp_type'
p76998
S'FunctionName'
p76999
sS'default'
p77000
g3
sS'name'
p77001
S'gap_conductivity_function'
p77002
sS'required'
p77003
I00
sS'group_name'
p77004
Nsa(dp77005
S'description'
p77006
S'Variable to be used in the gap_conductivity_function in place of time\n'
p77007
sS'cpp_type'
p77008
S'std::vector<VariableName>'
p77009
sS'default'
p77010
g3
sS'name'
p77011
S'gap_conductivity_function_variable'
p77012
sS'required'
p77013
I00
sS'group_name'
p77014
Nsa(dp77015
S'description'
p77016
S'Distance across the gap\n'
p77017
sS'cpp_type'
p77018
S'std::vector<VariableName>'
p77019
sS'default'
p77020
g3
sS'name'
p77021
S'gap_distance'
p77022
sS'required'
p77023
I00
sS'group_name'
p77024
Nsa(dp77025
S'description'
p77026
S'Temperature on the other side of the gap\n'
p77027
sS'cpp_type'
p77028
S'std::vector<VariableName>'
p77029
sS'default'
p77030
g3
sS'name'
p77031
S'gap_temp'
p77032
sS'required'
p77033
I00
sS'group_name'
p77034
Nsa(dp77035
S'description'
p77036
S'A maximum gap (denominator) size\n'
p77037
sS'cpp_type'
p77038
S'double'
p77039
sS'default'
p77040
S'1e+06'
p77041
sS'name'
p77042
S'max_gap'
p77043
sS'required'
p77044
I00
sS'group_name'
p77045
Nsa(dp77046
S'description'
p77047
S'A minimum gap (denominator) size\n'
p77048
sS'cpp_type'
p77049
S'double'
p77050
sS'default'
p77051
S'1e-06'
p77052
sS'name'
p77053
S'min_gap'
p77054
sS'required'
p77055
I00
sS'group_name'
p77056
Nsa(dp77057
S'name'
p77058
S'order'
p77059
sS'cpp_type'
p77060
S'MooseEnum'
p77061
sS'default'
p77062
S'FIRST'
p77063
sS'description'
p77064
S'The finite element order\n'
p77065
sS'required'
p77066
I00
sS'options'
p77067
S'FIRST SECOND THIRD FOURTH'
p77068
sS'group_name'
p77069
Nsa(dp77070
S'description'
p77071
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77072
sS'cpp_type'
p77073
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77074
sS'default'
p77075
g3
sS'name'
p77076
S'output_properties'
p77077
sS'required'
p77078
I00
sS'group_name'
p77079
S'Outputs'
p77080
sa(dp77081
S'description'
p77082
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77083
sS'cpp_type'
p77084
S'std::vector<OutputName, std::allocator<OutputName> >'
p77085
sS'default'
p77086
S'none'
p77087
sS'name'
p77088
S'outputs'
p77089
sS'required'
p77090
I00
sS'group_name'
p77091
S'Outputs'
p77092
sa(dp77093
S'description'
p77094
S'The boundary to be penetrated\n'
p77095
sS'cpp_type'
p77096
S'BoundaryName'
p77097
sS'default'
p77098
g3
sS'name'
p77099
S'paired_boundary'
p77100
sS'required'
p77101
I00
sS'group_name'
p77102
Nsa(dp77103
S'description'
p77104
S'Whether or not to do quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp should NOT be provided (and will be ignored); however, paired_boundary and variable are then required.\n'
p77105
sS'cpp_type'
p77106
S'bool'
p77107
sS'default'
p77108
S'0'
p77109
sS'name'
p77110
S'quadrature'
p77111
sS'required'
p77112
I00
sS'group_name'
p77113
Nsa(dp77114
S'description'
p77115
S'The seed for the master random number generator\n'
p77116
sS'cpp_type'
p77117
S'unsigned int'
p77118
sS'default'
p77119
S'0'
p77120
sS'name'
p77121
S'seed'
p77122
sS'required'
p77123
I00
sS'group_name'
p77124
S'Advanced'
p77125
sa(dp77126
S'description'
p77127
S'The Stefan-Boltzmann constant\n'
p77128
sS'cpp_type'
p77129
S'double'
p77130
sS'default'
p77131
S'5.669e-08'
p77132
sS'name'
p77133
S'stefan_boltzmann'
p77134
sS'required'
p77135
I00
sS'group_name'
p77136
Nsa(dp77137
S'description'
p77138
g3
sS'cpp_type'
p77139
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77140
sS'default'
p77141
S'GapConductance'
p77142
sS'name'
p77143
S'type'
p77144
sS'required'
p77145
I00
sS'group_name'
p77146
Nsa(dp77147
S'description'
p77148
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77149
sS'cpp_type'
p77150
S'bool'
p77151
sS'default'
p77152
S'1'
p77153
sS'name'
p77154
S'use_displaced_mesh'
p77155
sS'required'
p77156
I00
sS'group_name'
p77157
S'Advanced'
p77158
sa(dp77159
S'description'
p77160
S'Temperature variable\n'
p77161
sS'cpp_type'
p77162
S'std::vector<VariableName>'
p77163
sS'default'
p77164
g3
sS'name'
p77165
S'variable'
p77166
sS'required'
p77167
I01
sS'group_name'
p77168
Nsa(dp77169
S'description'
p77170
S'Whether to output warning messages concerning nodes not being found\n'
p77171
sS'cpp_type'
p77172
S'bool'
p77173
sS'default'
p77174
S'0'
p77175
sS'name'
p77176
S'warnings'
p77177
sS'required'
p77178
I00
sS'group_name'
p77179
NsasS'name'
p77180
S'/Materials/GapConductance'
p77181
sa(dp77182
S'description'
p77183
g3
sS'subblocks'
p77184
NsS'parameters'
p77185
(lp77186
(dp77187
S'description'
p77188
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77189
sS'cpp_type'
p77190
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77191
sS'default'
p77192
g3
sS'name'
p77193
S'block'
p77194
sS'required'
p77195
I00
sS'group_name'
p77196
Nsa(dp77197
S'description'
p77198
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77199
sS'cpp_type'
p77200
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77201
sS'default'
p77202
g3
sS'name'
p77203
S'boundary'
p77204
sS'required'
p77205
I00
sS'group_name'
p77206
Nsa(dp77207
S'description'
p77208
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77209
sS'cpp_type'
p77210
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77211
sS'default'
p77212
g3
sS'name'
p77213
S'control_tags'
p77214
sS'required'
p77215
I00
sS'group_name'
p77216
Nsa(dp77217
S'description'
p77218
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77219
sS'cpp_type'
p77220
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77221
sS'default'
p77222
g3
sS'name'
p77223
S'output_properties'
p77224
sS'required'
p77225
I00
sS'group_name'
p77226
S'Outputs'
p77227
sa(dp77228
S'description'
p77229
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77230
sS'cpp_type'
p77231
S'std::vector<OutputName, std::allocator<OutputName> >'
p77232
sS'default'
p77233
S'none'
p77234
sS'name'
p77235
S'outputs'
p77236
sS'required'
p77237
I00
sS'group_name'
p77238
S'Outputs'
p77239
sa(dp77240
S'description'
p77241
S'The names of the properties this material will have\n'
p77242
sS'cpp_type'
p77243
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77244
sS'default'
p77245
g3
sS'name'
p77246
S'prop_names'
p77247
sS'required'
p77248
I00
sS'group_name'
p77249
Nsa(dp77250
S'description'
p77251
S'The values associated with the named properties\n'
p77252
sS'cpp_type'
p77253
S'std::vector<double, std::allocator<double> >'
p77254
sS'default'
p77255
g3
sS'name'
p77256
S'prop_values'
p77257
sS'required'
p77258
I00
sS'group_name'
p77259
Nsa(dp77260
S'description'
p77261
S'The seed for the master random number generator\n'
p77262
sS'cpp_type'
p77263
S'unsigned int'
p77264
sS'default'
p77265
S'0'
p77266
sS'name'
p77267
S'seed'
p77268
sS'required'
p77269
I00
sS'group_name'
p77270
S'Advanced'
p77271
sa(dp77272
S'description'
p77273
g3
sS'cpp_type'
p77274
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77275
sS'default'
p77276
S'GenericConstantMaterial'
p77277
sS'name'
p77278
S'type'
p77279
sS'required'
p77280
I00
sS'group_name'
p77281
Nsa(dp77282
S'description'
p77283
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77284
sS'cpp_type'
p77285
S'bool'
p77286
sS'default'
p77287
S'0'
p77288
sS'name'
p77289
S'use_displaced_mesh'
p77290
sS'required'
p77291
I00
sS'group_name'
p77292
S'Advanced'
p77293
sasS'name'
p77294
S'/Materials/GenericConstantMaterial'
p77295
sa(dp77296
S'description'
p77297
g3
sS'subblocks'
p77298
NsS'parameters'
p77299
(lp77300
(dp77301
S'description'
p77302
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77303
sS'cpp_type'
p77304
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77305
sS'default'
p77306
g3
sS'name'
p77307
S'block'
p77308
sS'required'
p77309
I00
sS'group_name'
p77310
Nsa(dp77311
S'description'
p77312
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77313
sS'cpp_type'
p77314
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77315
sS'default'
p77316
g3
sS'name'
p77317
S'boundary'
p77318
sS'required'
p77319
I00
sS'group_name'
p77320
Nsa(dp77321
S'description'
p77322
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77323
sS'cpp_type'
p77324
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77325
sS'default'
p77326
g3
sS'name'
p77327
S'control_tags'
p77328
sS'required'
p77329
I00
sS'group_name'
p77330
Nsa(dp77331
S'description'
p77332
S'Enable the declaration of old and older values\n'
p77333
sS'cpp_type'
p77334
S'bool'
p77335
sS'default'
p77336
S'0'
p77337
sS'name'
p77338
S'enable_stateful'
p77339
sS'required'
p77340
I00
sS'group_name'
p77341
Nsa(dp77342
S'description'
p77343
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77344
sS'cpp_type'
p77345
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77346
sS'default'
p77347
g3
sS'name'
p77348
S'output_properties'
p77349
sS'required'
p77350
I00
sS'group_name'
p77351
S'Outputs'
p77352
sa(dp77353
S'description'
p77354
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77355
sS'cpp_type'
p77356
S'std::vector<OutputName, std::allocator<OutputName> >'
p77357
sS'default'
p77358
S'none'
p77359
sS'name'
p77360
S'outputs'
p77361
sS'required'
p77362
I00
sS'group_name'
p77363
S'Outputs'
p77364
sa(dp77365
S'description'
p77366
S'The names of the properties this material will have\n'
p77367
sS'cpp_type'
p77368
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77369
sS'default'
p77370
g3
sS'name'
p77371
S'prop_names'
p77372
sS'required'
p77373
I00
sS'group_name'
p77374
Nsa(dp77375
S'description'
p77376
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p77377
sS'cpp_type'
p77378
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p77379
sS'default'
p77380
g3
sS'name'
p77381
S'prop_values'
p77382
sS'required'
p77383
I00
sS'group_name'
p77384
Nsa(dp77385
S'description'
p77386
S'The seed for the master random number generator\n'
p77387
sS'cpp_type'
p77388
S'unsigned int'
p77389
sS'default'
p77390
S'0'
p77391
sS'name'
p77392
S'seed'
p77393
sS'required'
p77394
I00
sS'group_name'
p77395
S'Advanced'
p77396
sa(dp77397
S'description'
p77398
g3
sS'cpp_type'
p77399
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77400
sS'default'
p77401
S'GenericFunctionMaterial'
p77402
sS'name'
p77403
S'type'
p77404
sS'required'
p77405
I00
sS'group_name'
p77406
Nsa(dp77407
S'description'
p77408
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77409
sS'cpp_type'
p77410
S'bool'
p77411
sS'default'
p77412
S'0'
p77413
sS'name'
p77414
S'use_displaced_mesh'
p77415
sS'required'
p77416
I00
sS'group_name'
p77417
S'Advanced'
p77418
sasS'name'
p77419
S'/Materials/GenericFunctionMaterial'
p77420
sa(dp77421
S'description'
p77422
S'Calculation the advection velocity of grain due to rigid vody translation and rotation\n'
p77423
sS'subblocks'
p77424
NsS'parameters'
p77425
(lp77426
(dp77427
S'description'
p77428
S'Optional parameter that allows the user to define type of force density under consideration\n'
p77429
sS'cpp_type'
p77430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77431
sS'default'
p77432
g3
sS'name'
p77433
S'base_name'
p77434
sS'required'
p77435
I00
sS'group_name'
p77436
Nsa(dp77437
S'description'
p77438
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77439
sS'cpp_type'
p77440
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77441
sS'default'
p77442
g3
sS'name'
p77443
S'block'
p77444
sS'required'
p77445
I00
sS'group_name'
p77446
Nsa(dp77447
S'description'
p77448
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77449
sS'cpp_type'
p77450
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77451
sS'default'
p77452
g3
sS'name'
p77453
S'boundary'
p77454
sS'required'
p77455
I00
sS'group_name'
p77456
Nsa(dp77457
S'description'
p77458
S'Concentration field\n'
p77459
sS'cpp_type'
p77460
S'std::vector<VariableName>'
p77461
sS'default'
p77462
g3
sS'name'
p77463
S'c'
p77464
sS'required'
p77465
I00
sS'group_name'
p77466
Nsa(dp77467
S'description'
p77468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77469
sS'cpp_type'
p77470
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77471
sS'default'
p77472
g3
sS'name'
p77473
S'control_tags'
p77474
sS'required'
p77475
I00
sS'group_name'
p77476
Nsa(dp77477
S'description'
p77478
S'Array of other coupled order parameters\n'
p77479
sS'cpp_type'
p77480
S'std::vector<VariableName>'
p77481
sS'default'
p77482
g3
sS'name'
p77483
S'etas'
p77484
sS'required'
p77485
I00
sS'group_name'
p77486
Nsa(dp77487
S'description'
p77488
S'userobject for getting volume and center of mass of grains\n'
p77489
sS'cpp_type'
p77490
S'UserObjectName'
p77491
sS'default'
p77492
g3
sS'name'
p77493
S'grain_data'
p77494
sS'required'
p77495
I00
sS'group_name'
p77496
Nsa(dp77497
S'description'
p77498
S'userobject for getting force and torque acting on grains\n'
p77499
sS'cpp_type'
p77500
S'UserObjectName'
p77501
sS'default'
p77502
g3
sS'name'
p77503
S'grain_force'
p77504
sS'required'
p77505
I00
sS'group_name'
p77506
Nsa(dp77507
S'description'
p77508
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77509
sS'cpp_type'
p77510
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77511
sS'default'
p77512
g3
sS'name'
p77513
S'output_properties'
p77514
sS'required'
p77515
I00
sS'group_name'
p77516
S'Outputs'
p77517
sa(dp77518
S'description'
p77519
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77520
sS'cpp_type'
p77521
S'std::vector<OutputName, std::allocator<OutputName> >'
p77522
sS'default'
p77523
S'none'
p77524
sS'name'
p77525
S'outputs'
p77526
sS'required'
p77527
I00
sS'group_name'
p77528
S'Outputs'
p77529
sa(dp77530
S'description'
p77531
S'constant value characterizing grain rotation\n'
p77532
sS'cpp_type'
p77533
S'double'
p77534
sS'default'
p77535
S'1'
p77536
sS'name'
p77537
S'rotation_constant'
p77538
sS'required'
p77539
I00
sS'group_name'
p77540
Nsa(dp77541
S'description'
p77542
S'The seed for the master random number generator\n'
p77543
sS'cpp_type'
p77544
S'unsigned int'
p77545
sS'default'
p77546
S'0'
p77547
sS'name'
p77548
S'seed'
p77549
sS'required'
p77550
I00
sS'group_name'
p77551
S'Advanced'
p77552
sa(dp77553
S'description'
p77554
S'constant value characterizing grain translation\n'
p77555
sS'cpp_type'
p77556
S'double'
p77557
sS'default'
p77558
S'500'
p77559
sS'name'
p77560
S'translation_constant'
p77561
sS'required'
p77562
I00
sS'group_name'
p77563
Nsa(dp77564
S'description'
p77565
g3
sS'cpp_type'
p77566
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77567
sS'default'
p77568
S'GrainAdvectionVelocity'
p77569
sS'name'
p77570
S'type'
p77571
sS'required'
p77572
I00
sS'group_name'
p77573
Nsa(dp77574
S'description'
p77575
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77576
sS'cpp_type'
p77577
S'bool'
p77578
sS'default'
p77579
S'0'
p77580
sS'name'
p77581
S'use_displaced_mesh'
p77582
sS'required'
p77583
I00
sS'group_name'
p77584
S'Advanced'
p77585
sasS'name'
p77586
S'/Materials/GrainAdvectionVelocity'
p77587
sa(dp77588
S'description'
p77589
g3
sS'subblocks'
p77590
NsS'parameters'
p77591
(lp77592
(dp77593
S'description'
p77594
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77595
sS'cpp_type'
p77596
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77597
sS'default'
p77598
g3
sS'name'
p77599
S'block'
p77600
sS'required'
p77601
I00
sS'group_name'
p77602
Nsa(dp77603
S'description'
p77604
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77605
sS'cpp_type'
p77606
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77607
sS'default'
p77608
g3
sS'name'
p77609
S'boundary'
p77610
sS'required'
p77611
I00
sS'group_name'
p77612
Nsa(dp77613
S'description'
p77614
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77615
sS'cpp_type'
p77616
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77617
sS'default'
p77618
g3
sS'name'
p77619
S'control_tags'
p77620
sS'required'
p77621
I00
sS'group_name'
p77622
Nsa(dp77623
S'description'
p77624
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77625
sS'cpp_type'
p77626
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77627
sS'default'
p77628
g3
sS'name'
p77629
S'output_properties'
p77630
sS'required'
p77631
I00
sS'group_name'
p77632
S'Outputs'
p77633
sa(dp77634
S'description'
p77635
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77636
sS'cpp_type'
p77637
S'std::vector<OutputName, std::allocator<OutputName> >'
p77638
sS'default'
p77639
S'none'
p77640
sS'name'
p77641
S'outputs'
p77642
sS'required'
p77643
I00
sS'group_name'
p77644
S'Outputs'
p77645
sa(dp77646
S'description'
p77647
S'The seed for the master random number generator\n'
p77648
sS'cpp_type'
p77649
S'unsigned int'
p77650
sS'default'
p77651
S'0'
p77652
sS'name'
p77653
S'seed'
p77654
sS'required'
p77655
I00
sS'group_name'
p77656
S'Advanced'
p77657
sa(dp77658
S'description'
p77659
S'The specific heat value\n'
p77660
sS'cpp_type'
p77661
S'double'
p77662
sS'default'
p77663
g3
sS'name'
p77664
S'specific_heat'
p77665
sS'required'
p77666
I00
sS'group_name'
p77667
Nsa(dp77668
S'description'
p77669
S'Specific heat as a function of temperature.\n'
p77670
sS'cpp_type'
p77671
S'FunctionName'
p77672
sS'default'
p77673
g3
sS'name'
p77674
S'specific_heat_temperature_function'
p77675
sS'required'
p77676
I00
sS'group_name'
p77677
Nsa(dp77678
S'description'
p77679
S'Coupled Temperature\n'
p77680
sS'cpp_type'
p77681
S'std::vector<VariableName>'
p77682
sS'default'
p77683
g3
sS'name'
p77684
S'temp'
p77685
sS'required'
p77686
I00
sS'group_name'
p77687
Nsa(dp77688
S'description'
p77689
S'The thermal conductivity value\n'
p77690
sS'cpp_type'
p77691
S'double'
p77692
sS'default'
p77693
g3
sS'name'
p77694
S'thermal_conductivity'
p77695
sS'required'
p77696
I00
sS'group_name'
p77697
Nsa(dp77698
S'description'
p77699
S'Thermal conductivity as a function of temperature.\n'
p77700
sS'cpp_type'
p77701
S'FunctionName'
p77702
sS'default'
p77703
g3
sS'name'
p77704
S'thermal_conductivity_temperature_function'
p77705
sS'required'
p77706
I00
sS'group_name'
p77707
Nsa(dp77708
S'description'
p77709
g3
sS'cpp_type'
p77710
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77711
sS'default'
p77712
S'HeatConductionMaterial'
p77713
sS'name'
p77714
S'type'
p77715
sS'required'
p77716
I00
sS'group_name'
p77717
Nsa(dp77718
S'description'
p77719
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77720
sS'cpp_type'
p77721
S'bool'
p77722
sS'default'
p77723
S'0'
p77724
sS'name'
p77725
S'use_displaced_mesh'
p77726
sS'required'
p77727
I00
sS'group_name'
p77728
S'Advanced'
p77729
sasS'name'
p77730
S'/Materials/HeatConductionMaterial'
p77731
sa(dp77732
S'description'
p77733
g3
sS'subblocks'
p77734
NsS'parameters'
p77735
(lp77736
(dp77737
S'description'
p77738
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77739
sS'cpp_type'
p77740
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77741
sS'default'
p77742
g3
sS'name'
p77743
S'block'
p77744
sS'required'
p77745
I00
sS'group_name'
p77746
Nsa(dp77747
S'description'
p77748
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77749
sS'cpp_type'
p77750
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77751
sS'default'
p77752
g3
sS'name'
p77753
S'boundary'
p77754
sS'required'
p77755
I00
sS'group_name'
p77756
Nsa(dp77757
S'description'
p77758
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77759
sS'cpp_type'
p77760
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77761
sS'default'
p77762
g3
sS'name'
p77763
S'control_tags'
p77764
sS'required'
p77765
I00
sS'group_name'
p77766
Nsa(dp77767
S'description'
p77768
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77769
sS'cpp_type'
p77770
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77771
sS'default'
p77772
g3
sS'name'
p77773
S'output_properties'
p77774
sS'required'
p77775
I00
sS'group_name'
p77776
S'Outputs'
p77777
sa(dp77778
S'description'
p77779
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77780
sS'cpp_type'
p77781
S'std::vector<OutputName, std::allocator<OutputName> >'
p77782
sS'default'
p77783
S'none'
p77784
sS'name'
p77785
S'outputs'
p77786
sS'required'
p77787
I00
sS'group_name'
p77788
S'Outputs'
p77789
sa(dp77790
S'description'
p77791
S'The seed for the master random number generator\n'
p77792
sS'cpp_type'
p77793
S'unsigned int'
p77794
sS'default'
p77795
S'0'
p77796
sS'name'
p77797
S'seed'
p77798
sS'required'
p77799
I00
sS'group_name'
p77800
S'Advanced'
p77801
sa(dp77802
S'description'
p77803
S'temperature\n'
p77804
sS'cpp_type'
p77805
S'std::vector<VariableName>'
p77806
sS'default'
p77807
g3
sS'name'
p77808
S'temperature'
p77809
sS'required'
p77810
I00
sS'group_name'
p77811
Nsa(dp77812
S'description'
p77813
g3
sS'cpp_type'
p77814
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77815
sS'default'
p77816
S'HfAlBulkMaterial'
p77817
sS'name'
p77818
S'type'
p77819
sS'required'
p77820
I00
sS'group_name'
p77821
Nsa(dp77822
S'description'
p77823
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77824
sS'cpp_type'
p77825
S'bool'
p77826
sS'default'
p77827
S'0'
p77828
sS'name'
p77829
S'use_displaced_mesh'
p77830
sS'required'
p77831
I00
sS'group_name'
p77832
S'Advanced'
p77833
sasS'name'
p77834
S'/Materials/HfAlBulkMaterial'
p77835
sa(dp77836
S'description'
p77837
g3
sS'subblocks'
p77838
NsS'parameters'
p77839
(lp77840
(dp77841
S'description'
p77842
S'RGB_aux_variable\n'
p77843
sS'cpp_type'
p77844
S'std::vector<VariableName>'
p77845
sS'default'
p77846
g3
sS'name'
p77847
S'RGB_aux_variable'
p77848
sS'required'
p77849
I00
sS'group_name'
p77850
Nsa(dp77851
S'description'
p77852
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77853
sS'cpp_type'
p77854
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77855
sS'default'
p77856
g3
sS'name'
p77857
S'block'
p77858
sS'required'
p77859
I00
sS'group_name'
p77860
Nsa(dp77861
S'description'
p77862
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77863
sS'cpp_type'
p77864
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77865
sS'default'
p77866
g3
sS'name'
p77867
S'boundary'
p77868
sS'required'
p77869
I00
sS'group_name'
p77870
Nsa(dp77871
S'description'
p77872
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77873
sS'cpp_type'
p77874
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77875
sS'default'
p77876
g3
sS'name'
p77877
S'control_tags'
p77878
sS'required'
p77879
I00
sS'group_name'
p77880
Nsa(dp77881
S'description'
p77882
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p77883
sS'cpp_type'
p77884
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77885
sS'default'
p77886
g3
sS'name'
p77887
S'output_properties'
p77888
sS'required'
p77889
I00
sS'group_name'
p77890
S'Outputs'
p77891
sa(dp77892
S'description'
p77893
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77894
sS'cpp_type'
p77895
S'std::vector<OutputName, std::allocator<OutputName> >'
p77896
sS'default'
p77897
S'none'
p77898
sS'name'
p77899
S'outputs'
p77900
sS'required'
p77901
I00
sS'group_name'
p77902
S'Outputs'
p77903
sa(dp77904
S'description'
p77905
S'The seed for the master random number generator\n'
p77906
sS'cpp_type'
p77907
S'unsigned int'
p77908
sS'default'
p77909
S'0'
p77910
sS'name'
p77911
S'seed'
p77912
sS'required'
p77913
I00
sS'group_name'
p77914
S'Advanced'
p77915
sa(dp77916
S'description'
p77917
S'temperature\n'
p77918
sS'cpp_type'
p77919
S'std::vector<VariableName>'
p77920
sS'default'
p77921
g3
sS'name'
p77922
S'temperature'
p77923
sS'required'
p77924
I00
sS'group_name'
p77925
Nsa(dp77926
S'description'
p77927
g3
sS'cpp_type'
p77928
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p77929
sS'default'
p77930
S'HfAlMaterial'
p77931
sS'name'
p77932
S'type'
p77933
sS'required'
p77934
I00
sS'group_name'
p77935
Nsa(dp77936
S'description'
p77937
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p77938
sS'cpp_type'
p77939
S'bool'
p77940
sS'default'
p77941
S'0'
p77942
sS'name'
p77943
S'use_displaced_mesh'
p77944
sS'required'
p77945
I00
sS'group_name'
p77946
S'Advanced'
p77947
sasS'name'
p77948
S'/Materials/HfAlMaterial'
p77949
sa(dp77950
S'description'
p77951
g3
sS'subblocks'
p77952
NsS'parameters'
p77953
(lp77954
(dp77955
S'description'
p77956
S'The list of block ids (SubdomainID) that this object will be applied\n'
p77957
sS'cpp_type'
p77958
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p77959
sS'default'
p77960
g3
sS'name'
p77961
S'block'
p77962
sS'required'
p77963
I00
sS'group_name'
p77964
Nsa(dp77965
S'description'
p77966
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p77967
sS'cpp_type'
p77968
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p77969
sS'default'
p77970
g3
sS'name'
p77971
S'boundary'
p77972
sS'required'
p77973
I00
sS'group_name'
p77974
Nsa(dp77975
S'description'
p77976
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p77977
sS'cpp_type'
p77978
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p77979
sS'default'
p77980
g3
sS'name'
p77981
S'control_tags'
p77982
sS'required'
p77983
I00
sS'group_name'
p77984
Nsa(dp77985
S'description'
p77986
S'The CrackFrontDefinition user object name\n'
p77987
sS'cpp_type'
p77988
S'UserObjectName'
p77989
sS'default'
p77990
g3
sS'name'
p77991
S'crack_front_definition'
p77992
sS'required'
p77993
I01
sS'group_name'
p77994
Nsa(dp77995
S'description'
p77996
S'The index of the point on the crack front to calculate auxiliary fields at\n'
p77997
sS'cpp_type'
p77998
S'unsigned int'
p77999
sS'default'
p78000
g3
sS'name'
p78001
S'crack_front_point_index'
p78002
sS'required'
p78003
I01
sS'group_name'
p78004
Nsa(dp78005
S'description'
p78006
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78007
sS'cpp_type'
p78008
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78009
sS'default'
p78010
g3
sS'name'
p78011
S'output_properties'
p78012
sS'required'
p78013
I00
sS'group_name'
p78014
S'Outputs'
p78015
sa(dp78016
S'description'
p78017
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78018
sS'cpp_type'
p78019
S'std::vector<OutputName, std::allocator<OutputName> >'
p78020
sS'default'
p78021
S'none'
p78022
sS'name'
p78023
S'outputs'
p78024
sS'required'
p78025
I00
sS'group_name'
p78026
S'Outputs'
p78027
sa(dp78028
S'description'
p78029
S"Poisson's ratio for the material.\n"
p78030
sS'cpp_type'
p78031
S'double'
p78032
sS'default'
p78033
g3
sS'name'
p78034
S'poissons_ratio'
p78035
sS'required'
p78036
I00
sS'group_name'
p78037
Nsa(dp78038
S'description'
p78039
S'The seed for the master random number generator\n'
p78040
sS'cpp_type'
p78041
S'unsigned int'
p78042
sS'default'
p78043
S'0'
p78044
sS'name'
p78045
S'seed'
p78046
sS'required'
p78047
I00
sS'group_name'
p78048
S'Advanced'
p78049
sa(dp78050
S'name'
p78051
S'sif_modes'
p78052
sS'cpp_type'
p78053
S'std::vector<MooseEnum, std::allocator<MooseEnum> >'
p78054
sS'default'
p78055
S'KI'
p78056
sS'description'
p78057
S'Stress intensity factor to calculate. Choices are: KI KII KIII T\n'
p78058
sS'required'
p78059
I01
sS'options'
p78060
S'KI KII KIII T'
p78061
sS'group_name'
p78062
Nsa(dp78063
S'description'
p78064
g3
sS'cpp_type'
p78065
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78066
sS'default'
p78067
S'InteractionIntegralAuxFields'
p78068
sS'name'
p78069
S'type'
p78070
sS'required'
p78071
I00
sS'group_name'
p78072
Nsa(dp78073
S'description'
p78074
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78075
sS'cpp_type'
p78076
S'bool'
p78077
sS'default'
p78078
S'0'
p78079
sS'name'
p78080
S'use_displaced_mesh'
p78081
sS'required'
p78082
I00
sS'group_name'
p78083
S'Advanced'
p78084
sa(dp78085
S'description'
p78086
S"Young's modulus of the material.\n"
p78087
sS'cpp_type'
p78088
S'double'
p78089
sS'default'
p78090
g3
sS'name'
p78091
S'youngs_modulus'
p78092
sS'required'
p78093
I00
sS'group_name'
p78094
NsasS'name'
p78095
S'/Materials/InteractionIntegralAuxFields'
p78096
sa(dp78097
S'description'
p78098
g3
sS'subblocks'
p78099
NsS'parameters'
p78100
(lp78101
(dp78102
S'description'
p78103
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78104
sS'cpp_type'
p78105
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78106
sS'default'
p78107
g3
sS'name'
p78108
S'block'
p78109
sS'required'
p78110
I00
sS'group_name'
p78111
Nsa(dp78112
S'description'
p78113
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78114
sS'cpp_type'
p78115
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78116
sS'default'
p78117
g3
sS'name'
p78118
S'boundary'
p78119
sS'required'
p78120
I00
sS'group_name'
p78121
Nsa(dp78122
S'description'
p78123
S'variable\n'
p78124
sS'cpp_type'
p78125
S'std::vector<VariableName>'
p78126
sS'default'
p78127
g3
sS'name'
p78128
S'c'
p78129
sS'required'
p78130
I01
sS'group_name'
p78131
Nsa(dp78132
S'description'
p78133
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78134
sS'cpp_type'
p78135
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78136
sS'default'
p78137
g3
sS'name'
p78138
S'control_tags'
p78139
sS'required'
p78140
I00
sS'group_name'
p78141
Nsa(dp78142
S'description'
p78143
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78144
sS'cpp_type'
p78145
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78146
sS'default'
p78147
g3
sS'name'
p78148
S'output_properties'
p78149
sS'required'
p78150
I00
sS'group_name'
p78151
S'Outputs'
p78152
sa(dp78153
S'description'
p78154
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78155
sS'cpp_type'
p78156
S'std::vector<OutputName, std::allocator<OutputName> >'
p78157
sS'default'
p78158
S'none'
p78159
sS'name'
p78160
S'outputs'
p78161
sS'required'
p78162
I00
sS'group_name'
p78163
S'Outputs'
p78164
sa(dp78165
S'description'
p78166
S'The seed for the master random number generator\n'
p78167
sS'cpp_type'
p78168
S'unsigned int'
p78169
sS'default'
p78170
S'0'
p78171
sS'name'
p78172
S'seed'
p78173
sS'required'
p78174
I00
sS'group_name'
p78175
S'Advanced'
p78176
sa(dp78177
S'description'
p78178
g3
sS'cpp_type'
p78179
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78180
sS'default'
p78181
S'InterfaceOrientationMaterial'
p78182
sS'name'
p78183
S'type'
p78184
sS'required'
p78185
I00
sS'group_name'
p78186
Nsa(dp78187
S'description'
p78188
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78189
sS'cpp_type'
p78190
S'bool'
p78191
sS'default'
p78192
S'0'
p78193
sS'name'
p78194
S'use_displaced_mesh'
p78195
sS'required'
p78196
I00
sS'group_name'
p78197
S'Advanced'
p78198
sasS'name'
p78199
S'/Materials/InterfaceOrientationMaterial'
p78200
sa(dp78201
S'description'
p78202
g3
sS'subblocks'
p78203
NsS'parameters'
p78204
(lp78205
(dp78206
S'description'
p78207
S'Absolute convergence tolerance for sub-newtion iteration\n'
p78208
sS'cpp_type'
p78209
S'double'
p78210
sS'default'
p78211
S'1e-20'
p78212
sS'name'
p78213
S'absolute_tolerance'
p78214
sS'required'
p78215
I00
sS'group_name'
p78216
Nsa(dp78217
S'description'
p78218
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78219
sS'cpp_type'
p78220
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78221
sS'default'
p78222
g3
sS'name'
p78223
S'block'
p78224
sS'required'
p78225
I00
sS'group_name'
p78226
Nsa(dp78227
S'description'
p78228
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78229
sS'cpp_type'
p78230
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78231
sS'default'
p78232
g3
sS'name'
p78233
S'boundary'
p78234
sS'required'
p78235
I00
sS'group_name'
p78236
Nsa(dp78237
S'description'
p78238
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78239
sS'cpp_type'
p78240
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78241
sS'default'
p78242
g3
sS'name'
p78243
S'control_tags'
p78244
sS'required'
p78245
I00
sS'group_name'
p78246
Nsa(dp78247
S'description'
p78248
S'Hardening slope\n'
p78249
sS'cpp_type'
p78250
S'double'
p78251
sS'default'
p78252
g3
sS'name'
p78253
S'hardening_constant'
p78254
sS'required'
p78255
I00
sS'group_name'
p78256
Nsa(dp78257
S'description'
p78258
S'True stress as a function of plastic strain\n'
p78259
sS'cpp_type'
p78260
S'FunctionName'
p78261
sS'default'
p78262
g3
sS'name'
p78263
S'hardening_function'
p78264
sS'required'
p78265
I00
sS'group_name'
p78266
Nsa(dp78267
S'description'
p78268
S'Maximum number of sub-newton iterations\n'
p78269
sS'cpp_type'
p78270
S'unsigned int'
p78271
sS'default'
p78272
S'30'
p78273
sS'name'
p78274
S'max_its'
p78275
sS'required'
p78276
I00
sS'group_name'
p78277
Nsa(dp78278
S'description'
p78279
S'Set true to output sub-newton iteration information\n'
p78280
sS'cpp_type'
p78281
S'bool'
p78282
sS'default'
p78283
S'0'
p78284
sS'name'
p78285
S'output_iteration_info'
p78286
sS'required'
p78287
I00
sS'group_name'
p78288
Nsa(dp78289
S'description'
p78290
S'Set true to output sub-newton iteration information when a step fails\n'
p78291
sS'cpp_type'
p78292
S'bool'
p78293
sS'default'
p78294
S'0'
p78295
sS'name'
p78296
S'output_iteration_info_on_error'
p78297
sS'required'
p78298
I00
sS'group_name'
p78299
Nsa(dp78300
S'description'
p78301
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78302
sS'cpp_type'
p78303
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78304
sS'default'
p78305
g3
sS'name'
p78306
S'output_properties'
p78307
sS'required'
p78308
I00
sS'group_name'
p78309
S'Outputs'
p78310
sa(dp78311
S'description'
p78312
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78313
sS'cpp_type'
p78314
S'std::vector<OutputName, std::allocator<OutputName> >'
p78315
sS'default'
p78316
S'none'
p78317
sS'name'
p78318
S'outputs'
p78319
sS'required'
p78320
I00
sS'group_name'
p78321
S'Outputs'
p78322
sa(dp78323
S'description'
p78324
S'Relative convergence tolerance for sub-newtion iteration\n'
p78325
sS'cpp_type'
p78326
S'double'
p78327
sS'default'
p78328
S'1e-05'
p78329
sS'name'
p78330
S'relative_tolerance'
p78331
sS'required'
p78332
I00
sS'group_name'
p78333
Nsa(dp78334
S'description'
p78335
S'The seed for the master random number generator\n'
p78336
sS'cpp_type'
p78337
S'unsigned int'
p78338
sS'default'
p78339
S'0'
p78340
sS'name'
p78341
S'seed'
p78342
sS'required'
p78343
I00
sS'group_name'
p78344
S'Advanced'
p78345
sa(dp78346
S'description'
p78347
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p78348
sS'cpp_type'
p78349
S'double'
p78350
sS'default'
p78351
g3
sS'name'
p78352
S'stress_free_temperature'
p78353
sS'required'
p78354
I00
sS'group_name'
p78355
Nsa(dp78356
S'description'
p78357
S'Coupled Temperature\n'
p78358
sS'cpp_type'
p78359
S'std::vector<VariableName>'
p78360
sS'default'
p78361
g3
sS'name'
p78362
S'temp'
p78363
sS'required'
p78364
I00
sS'group_name'
p78365
Nsa(dp78366
S'description'
p78367
S'The thermal expansion coefficient.\n'
p78368
sS'cpp_type'
p78369
S'double'
p78370
sS'default'
p78371
g3
sS'name'
p78372
S'thermal_expansion'
p78373
sS'required'
p78374
I00
sS'group_name'
p78375
Nsa(dp78376
S'description'
p78377
S'Thermal expansion coefficient as a function of temperature.\n'
p78378
sS'cpp_type'
p78379
S'FunctionName'
p78380
sS'default'
p78381
g3
sS'name'
p78382
S'thermal_expansion_function'
p78383
sS'required'
p78384
I00
sS'group_name'
p78385
Nsa(dp78386
S'name'
p78387
S'thermal_expansion_function_type'
p78388
sS'cpp_type'
p78389
S'MooseEnum'
p78390
sS'default'
p78391
g3
sS'description'
p78392
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p78393
sS'required'
p78394
I00
sS'options'
p78395
S'instantaneous mean'
p78396
sS'group_name'
p78397
Nsa(dp78398
S'description'
p78399
S'Reference temperature for mean thermal expansion function.\n'
p78400
sS'cpp_type'
p78401
S'double'
p78402
sS'default'
p78403
g3
sS'name'
p78404
S'thermal_expansion_reference_temperature'
p78405
sS'required'
p78406
I00
sS'group_name'
p78407
Nsa(dp78408
S'description'
p78409
g3
sS'cpp_type'
p78410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78411
sS'default'
p78412
S'IsotropicPlasticity'
p78413
sS'name'
p78414
S'type'
p78415
sS'required'
p78416
I00
sS'group_name'
p78417
Nsa(dp78418
S'description'
p78419
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78420
sS'cpp_type'
p78421
S'bool'
p78422
sS'default'
p78423
S'0'
p78424
sS'name'
p78425
S'use_displaced_mesh'
p78426
sS'required'
p78427
I00
sS'group_name'
p78428
S'Advanced'
p78429
sa(dp78430
S'description'
p78431
S'The point at which plastic strain begins accumulating\n'
p78432
sS'cpp_type'
p78433
S'double'
p78434
sS'default'
p78435
g3
sS'name'
p78436
S'yield_stress'
p78437
sS'required'
p78438
I01
sS'group_name'
p78439
NsasS'name'
p78440
S'/Materials/IsotropicPlasticity'
p78441
sa(dp78442
S'description'
p78443
S'KKS Solid phase free energy for Xe,Vac in UO2.  Fm(cmg,cmv)\n'
p78444
sS'subblocks'
p78445
NsS'parameters'
p78446
(lp78447
(dp78448
S'description'
p78449
S'Temperature in [K]\n'
p78450
sS'cpp_type'
p78451
S'double'
p78452
sS'default'
p78453
g3
sS'name'
p78454
S'T'
p78455
sS'required'
p78456
I01
sS'group_name'
p78457
Nsa(dp78458
S'description'
p78459
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78460
sS'cpp_type'
p78461
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78462
sS'default'
p78463
g3
sS'name'
p78464
S'block'
p78465
sS'required'
p78466
I00
sS'group_name'
p78467
Nsa(dp78468
S'description'
p78469
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78470
sS'cpp_type'
p78471
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78472
sS'default'
p78473
g3
sS'name'
p78474
S'boundary'
p78475
sS'required'
p78476
I00
sS'group_name'
p78477
Nsa(dp78478
S'description'
p78479
S'Gas concnetration\n'
p78480
sS'cpp_type'
p78481
S'std::vector<VariableName>'
p78482
sS'default'
p78483
g3
sS'name'
p78484
S'cmg'
p78485
sS'required'
p78486
I01
sS'group_name'
p78487
Nsa(dp78488
S'description'
p78489
S'Vacancy concnetration\n'
p78490
sS'cpp_type'
p78491
S'std::vector<VariableName>'
p78492
sS'default'
p78493
g3
sS'name'
p78494
S'cmv'
p78495
sS'required'
p78496
I01
sS'group_name'
p78497
Nsa(dp78498
S'description'
p78499
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78500
sS'cpp_type'
p78501
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78502
sS'default'
p78503
g3
sS'name'
p78504
S'control_tags'
p78505
sS'required'
p78506
I00
sS'group_name'
p78507
Nsa(dp78508
S'description'
p78509
S'Maximum order of derivatives taken (2 or 3)\n'
p78510
sS'cpp_type'
p78511
S'unsigned int'
p78512
sS'default'
p78513
S'3'
p78514
sS'name'
p78515
S'derivative_order'
p78516
sS'required'
p78517
I00
sS'group_name'
p78518
Nsa(dp78519
S'description'
p78520
S'Base name of the free energy function (used to name the material properties)\n'
p78521
sS'cpp_type'
p78522
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78523
sS'default'
p78524
S'F'
p78525
sS'name'
p78526
S'f_name'
p78527
sS'required'
p78528
I00
sS'group_name'
p78529
Nsa(dp78530
S'description'
p78531
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78532
sS'cpp_type'
p78533
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78534
sS'default'
p78535
g3
sS'name'
p78536
S'output_properties'
p78537
sS'required'
p78538
I00
sS'group_name'
p78539
S'Outputs'
p78540
sa(dp78541
S'description'
p78542
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78543
sS'cpp_type'
p78544
S'std::vector<OutputName, std::allocator<OutputName> >'
p78545
sS'default'
p78546
S'none'
p78547
sS'name'
p78548
S'outputs'
p78549
sS'required'
p78550
I00
sS'group_name'
p78551
S'Outputs'
p78552
sa(dp78553
S'description'
p78554
S'The seed for the master random number generator\n'
p78555
sS'cpp_type'
p78556
S'unsigned int'
p78557
sS'default'
p78558
S'0'
p78559
sS'name'
p78560
S'seed'
p78561
sS'required'
p78562
I00
sS'group_name'
p78563
S'Advanced'
p78564
sa(dp78565
S'description'
p78566
S'Flag to indicate if third derivatives are needed\n'
p78567
sS'cpp_type'
p78568
S'bool'
p78569
sS'default'
p78570
g3
sS'name'
p78571
S'third_derivatives'
p78572
sS'required'
p78573
I00
sS'group_name'
p78574
Nsa(dp78575
S'description'
p78576
g3
sS'cpp_type'
p78577
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78578
sS'default'
p78579
S'KKSXeVacSolidMaterial'
p78580
sS'name'
p78581
S'type'
p78582
sS'required'
p78583
I00
sS'group_name'
p78584
Nsa(dp78585
S'description'
p78586
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78587
sS'cpp_type'
p78588
S'bool'
p78589
sS'default'
p78590
S'0'
p78591
sS'name'
p78592
S'use_displaced_mesh'
p78593
sS'required'
p78594
I00
sS'group_name'
p78595
S'Advanced'
p78596
sasS'name'
p78597
S'/Materials/KKSXeVacSolidMaterial'
p78598
sa(dp78599
S'description'
p78600
S'Material type that holds info regarding Langmuir desorption from matrix to porespace and viceversa\n'
p78601
sS'subblocks'
p78602
NsS'parameters'
p78603
(lp78604
(dp78605
S'description'
p78606
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78607
sS'cpp_type'
p78608
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78609
sS'default'
p78610
g3
sS'name'
p78611
S'block'
p78612
sS'required'
p78613
I00
sS'group_name'
p78614
Nsa(dp78615
S'description'
p78616
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78617
sS'cpp_type'
p78618
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78619
sS'default'
p78620
g3
sS'name'
p78621
S'boundary'
p78622
sS'required'
p78623
I00
sS'group_name'
p78624
Nsa(dp78625
S'description'
p78626
S'The concentration of gas variable\n'
p78627
sS'cpp_type'
p78628
S'std::vector<VariableName>'
p78629
sS'default'
p78630
g3
sS'name'
p78631
S'conc_var'
p78632
sS'required'
p78633
I01
sS'group_name'
p78634
Nsa(dp78635
S'description'
p78636
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78637
sS'cpp_type'
p78638
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78639
sS'default'
p78640
g3
sS'name'
p78641
S'control_tags'
p78642
sS'required'
p78643
I00
sS'group_name'
p78644
Nsa(dp78645
S'description'
p78646
S'This is (Langmuir volume)*(density of gas at standard temp and pressure).  Langmuir volume is measured in (gas volume)/(matrix volume).  (Methane density(101kPa, 20degC) = 0.655kg/m^3.  Methane density(101kPa, 0degC) = 0.715kg/m^3.)  Units [kg/m^3]\n'
p78647
sS'cpp_type'
p78648
S'double'
p78649
sS'default'
p78650
g3
sS'name'
p78651
S'langmuir_density'
p78652
sS'required'
p78653
I01
sS'group_name'
p78654
Nsa(dp78655
S'description'
p78656
S'Langmuir pressure.  Units Pa\n'
p78657
sS'cpp_type'
p78658
S'double'
p78659
sS'default'
p78660
g3
sS'name'
p78661
S'langmuir_pressure'
p78662
sS'required'
p78663
I01
sS'group_name'
p78664
Nsa(dp78665
S'description'
p78666
S'Time constant for Langmuir adsorption (gas moving from porespace to matrix).  Units [s].\n'
p78667
sS'cpp_type'
p78668
S'std::vector<VariableName>'
p78669
sS'default'
p78670
g3
sS'name'
p78671
S'one_over_adsorption_time_const'
p78672
sS'required'
p78673
I01
sS'group_name'
p78674
Nsa(dp78675
S'description'
p78676
S'Time constant for Langmuir desorption (gas moving from matrix to porespace).  Units [s]\n'
p78677
sS'cpp_type'
p78678
S'std::vector<VariableName>'
p78679
sS'default'
p78680
g3
sS'name'
p78681
S'one_over_desorption_time_const'
p78682
sS'required'
p78683
I01
sS'group_name'
p78684
Nsa(dp78685
S'description'
p78686
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78687
sS'cpp_type'
p78688
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78689
sS'default'
p78690
g3
sS'name'
p78691
S'output_properties'
p78692
sS'required'
p78693
I00
sS'group_name'
p78694
S'Outputs'
p78695
sa(dp78696
S'description'
p78697
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78698
sS'cpp_type'
p78699
S'std::vector<OutputName, std::allocator<OutputName> >'
p78700
sS'default'
p78701
S'none'
p78702
sS'name'
p78703
S'outputs'
p78704
sS'required'
p78705
I00
sS'group_name'
p78706
S'Outputs'
p78707
sa(dp78708
S'description'
p78709
S'The gas porepressure variable\n'
p78710
sS'cpp_type'
p78711
S'std::vector<VariableName>'
p78712
sS'default'
p78713
g3
sS'name'
p78714
S'pressure_var'
p78715
sS'required'
p78716
I01
sS'group_name'
p78717
Nsa(dp78718
S'description'
p78719
S'The seed for the master random number generator\n'
p78720
sS'cpp_type'
p78721
S'unsigned int'
p78722
sS'default'
p78723
S'0'
p78724
sS'name'
p78725
S'seed'
p78726
sS'required'
p78727
I00
sS'group_name'
p78728
S'Advanced'
p78729
sa(dp78730
S'description'
p78731
g3
sS'cpp_type'
p78732
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78733
sS'default'
p78734
S'LangmuirMaterial'
p78735
sS'name'
p78736
S'type'
p78737
sS'required'
p78738
I00
sS'group_name'
p78739
Nsa(dp78740
S'description'
p78741
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78742
sS'cpp_type'
p78743
S'bool'
p78744
sS'default'
p78745
S'0'
p78746
sS'name'
p78747
S'use_displaced_mesh'
p78748
sS'required'
p78749
I00
sS'group_name'
p78750
S'Advanced'
p78751
sasS'name'
p78752
S'/Materials/LangmuirMaterial'
p78753
sa(dp78754
S'description'
p78755
g3
sS'subblocks'
p78756
NsS'parameters'
p78757
(lp78758
(dp78759
S'description'
p78760
S'Name appended to material properties to make them unique\n'
p78761
sS'cpp_type'
p78762
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78763
sS'default'
p78764
g3
sS'name'
p78765
S'appended_property_name'
p78766
sS'required'
p78767
I00
sS'group_name'
p78768
Nsa(dp78769
S'description'
p78770
S'The list of block ids (SubdomainID) that this object will be applied\n'
p78771
sS'cpp_type'
p78772
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p78773
sS'default'
p78774
g3
sS'name'
p78775
S'block'
p78776
sS'required'
p78777
I00
sS'group_name'
p78778
Nsa(dp78779
S'description'
p78780
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p78781
sS'cpp_type'
p78782
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p78783
sS'default'
p78784
g3
sS'name'
p78785
S'boundary'
p78786
sS'required'
p78787
I00
sS'group_name'
p78788
Nsa(dp78789
S'description'
p78790
S'variable that zeros out the stiffness\n'
p78791
sS'cpp_type'
p78792
S'std::vector<VariableName>'
p78793
sS'default'
p78794
g3
sS'name'
p78795
S'c'
p78796
sS'required'
p78797
I00
sS'group_name'
p78798
Nsa(dp78799
S'description'
p78800
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p78801
sS'cpp_type'
p78802
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78803
sS'default'
p78804
g3
sS'name'
p78805
S'control_tags'
p78806
sS'required'
p78807
I00
sS'group_name'
p78808
Nsa(dp78809
S'description'
p78810
S'The x displacement\n'
p78811
sS'cpp_type'
p78812
S'std::vector<VariableName>'
p78813
sS'default'
p78814
g3
sS'name'
p78815
S'disp_x'
p78816
sS'required'
p78817
I01
sS'group_name'
p78818
Nsa(dp78819
S'description'
p78820
S'The y displacement\n'
p78821
sS'cpp_type'
p78822
S'std::vector<VariableName>'
p78823
sS'default'
p78824
g3
sS'name'
p78825
S'disp_y'
p78826
sS'required'
p78827
I01
sS'group_name'
p78828
Nsa(dp78829
S'description'
p78830
S'The z displacement\n'
p78831
sS'cpp_type'
p78832
S'std::vector<VariableName>'
p78833
sS'default'
p78834
g3
sS'name'
p78835
S'disp_z'
p78836
sS'required'
p78837
I00
sS'group_name'
p78838
Nsa(dp78839
S'description'
p78840
S'Euler angle in direction 1\n'
p78841
sS'cpp_type'
p78842
S'double'
p78843
sS'default'
p78844
S'0'
p78845
sS'name'
p78846
S'euler_angle_1'
p78847
sS'required'
p78848
I00
sS'group_name'
p78849
Nsa(dp78850
S'description'
p78851
S'Euler angle in direction 2\n'
p78852
sS'cpp_type'
p78853
S'double'
p78854
sS'default'
p78855
S'0'
p78856
sS'name'
p78857
S'euler_angle_2'
p78858
sS'required'
p78859
I00
sS'group_name'
p78860
Nsa(dp78861
S'description'
p78862
S'Euler angle in direction 3\n'
p78863
sS'cpp_type'
p78864
S'double'
p78865
sS'default'
p78866
S'0'
p78867
sS'name'
p78868
S'euler_angle_3'
p78869
sS'required'
p78870
I00
sS'group_name'
p78871
Nsa(dp78872
S'description'
p78873
S'Material modulus C11\n'
p78874
sS'cpp_type'
p78875
S'double'
p78876
sS'default'
p78877
g3
sS'name'
p78878
S'material_constant_c11'
p78879
sS'required'
p78880
I01
sS'group_name'
p78881
Nsa(dp78882
S'description'
p78883
S'Material modulus C12\n'
p78884
sS'cpp_type'
p78885
S'double'
p78886
sS'default'
p78887
g3
sS'name'
p78888
S'material_constant_c12'
p78889
sS'required'
p78890
I01
sS'group_name'
p78891
Nsa(dp78892
S'description'
p78893
S'Material modulus C44\n'
p78894
sS'cpp_type'
p78895
S'double'
p78896
sS'default'
p78897
g3
sS'name'
p78898
S'material_constant_c44'
p78899
sS'required'
p78900
I01
sS'group_name'
p78901
Nsa(dp78902
S'description'
p78903
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p78904
sS'cpp_type'
p78905
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p78906
sS'default'
p78907
g3
sS'name'
p78908
S'output_properties'
p78909
sS'required'
p78910
I00
sS'group_name'
p78911
S'Outputs'
p78912
sa(dp78913
S'description'
p78914
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p78915
sS'cpp_type'
p78916
S'std::vector<OutputName, std::allocator<OutputName> >'
p78917
sS'default'
p78918
S'none'
p78919
sS'name'
p78920
S'outputs'
p78921
sS'required'
p78922
I00
sS'group_name'
p78923
S'Outputs'
p78924
sa(dp78925
S'description'
p78926
S"Poisson's Ratio\n"
p78927
sS'cpp_type'
p78928
S'double'
p78929
sS'default'
p78930
g3
sS'name'
p78931
S'poissons_ratio'
p78932
sS'required'
p78933
I01
sS'group_name'
p78934
Nsa(dp78935
S'description'
p78936
S'The seed for the master random number generator\n'
p78937
sS'cpp_type'
p78938
S'unsigned int'
p78939
sS'default'
p78940
S'0'
p78941
sS'name'
p78942
S'seed'
p78943
sS'required'
p78944
I00
sS'group_name'
p78945
S'Advanced'
p78946
sa(dp78947
S'description'
p78948
S'The reference temperature at which this material has zero strain.\n'
p78949
sS'cpp_type'
p78950
S'double'
p78951
sS'default'
p78952
S'0'
p78953
sS'name'
p78954
S't_ref'
p78955
sS'required'
p78956
I00
sS'group_name'
p78957
Nsa(dp78958
S'description'
p78959
S'The temperature if you want thermal expansion.\n'
p78960
sS'cpp_type'
p78961
S'std::vector<VariableName>'
p78962
sS'default'
p78963
g3
sS'name'
p78964
S'temp'
p78965
sS'required'
p78966
I00
sS'group_name'
p78967
Nsa(dp78968
S'description'
p78969
S'The thermal expansion coefficient.\n'
p78970
sS'cpp_type'
p78971
S'double'
p78972
sS'default'
p78973
S'0'
p78974
sS'name'
p78975
S'thermal_expansion'
p78976
sS'required'
p78977
I00
sS'group_name'
p78978
Nsa(dp78979
S'description'
p78980
g3
sS'cpp_type'
p78981
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p78982
sS'default'
p78983
S'LinearAnisotropicMaterial'
p78984
sS'name'
p78985
S'type'
p78986
sS'required'
p78987
I00
sS'group_name'
p78988
Nsa(dp78989
S'description'
p78990
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p78991
sS'cpp_type'
p78992
S'bool'
p78993
sS'default'
p78994
S'0'
p78995
sS'name'
p78996
S'use_displaced_mesh'
p78997
sS'required'
p78998
I00
sS'group_name'
p78999
S'Advanced'
p79000
sa(dp79001
S'description'
p79002
S"Young's Modulus\n"
p79003
sS'cpp_type'
p79004
S'double'
p79005
sS'default'
p79006
g3
sS'name'
p79007
S'youngs_modulus'
p79008
sS'required'
p79009
I01
sS'group_name'
p79010
NsasS'name'
p79011
S'/Materials/LinearAnisotropicMaterial'
p79012
sa(dp79013
S'description'
p79014
g3
sS'subblocks'
p79015
NsS'parameters'
p79016
(lp79017
(dp79018
S'description'
p79019
S'Stiffness tensor for material\n'
p79020
sS'cpp_type'
p79021
S'std::vector<double, std::allocator<double> >'
p79022
sS'default'
p79023
g3
sS'name'
p79024
S'C_ijkl'
p79025
sS'required'
p79026
I01
sS'group_name'
p79027
Nsa(dp79028
S'description'
p79029
S'Temperature in Kelvin\n'
p79030
sS'cpp_type'
p79031
S'std::vector<VariableName>'
p79032
sS'default'
p79033
S'300'
p79034
sS'name'
p79035
S'T'
p79036
sS'required'
p79037
I00
sS'group_name'
p79038
Nsa(dp79039
S'description'
p79040
S'Reference temperature for thermal expansion in K\n'
p79041
sS'cpp_type'
p79042
S'double'
p79043
sS'default'
p79044
S'300'
p79045
sS'name'
p79046
S'T0'
p79047
sS'required'
p79048
I00
sS'group_name'
p79049
Nsa(dp79050
S'description'
p79051
S'Applied strain: e11, e22, e33, e23, e13, e12\n'
p79052
sS'cpp_type'
p79053
S'std::vector<double, std::allocator<double> >'
p79054
sS'default'
p79055
g3
sS'name'
p79056
S'applied_strain_vector'
p79057
sS'required'
p79058
I00
sS'group_name'
p79059
Nsa(dp79060
S'description'
p79061
S'Material property base name\n'
p79062
sS'cpp_type'
p79063
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79064
sS'default'
p79065
g3
sS'name'
p79066
S'base_name'
p79067
sS'required'
p79068
I00
sS'group_name'
p79069
Nsa(dp79070
S'description'
p79071
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79072
sS'cpp_type'
p79073
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79074
sS'default'
p79075
g3
sS'name'
p79076
S'block'
p79077
sS'required'
p79078
I00
sS'group_name'
p79079
Nsa(dp79080
S'description'
p79081
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79082
sS'cpp_type'
p79083
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79084
sS'default'
p79085
g3
sS'name'
p79086
S'boundary'
p79087
sS'required'
p79088
I00
sS'group_name'
p79089
Nsa(dp79090
S'description'
p79091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79092
sS'cpp_type'
p79093
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79094
sS'default'
p79095
g3
sS'name'
p79096
S'control_tags'
p79097
sS'required'
p79098
I00
sS'group_name'
p79099
Nsa(dp79100
S'description'
p79101
S'The x displacement\n'
p79102
sS'cpp_type'
p79103
S'std::vector<VariableName>'
p79104
sS'default'
p79105
g3
sS'name'
p79106
S'disp_x'
p79107
sS'required'
p79108
I01
sS'group_name'
p79109
Nsa(dp79110
S'description'
p79111
S'The y displacement\n'
p79112
sS'cpp_type'
p79113
S'std::vector<VariableName>'
p79114
sS'default'
p79115
g3
sS'name'
p79116
S'disp_y'
p79117
sS'required'
p79118
I01
sS'group_name'
p79119
Nsa(dp79120
S'description'
p79121
S'The z displacement\n'
p79122
sS'cpp_type'
p79123
S'std::vector<VariableName>'
p79124
sS'default'
p79125
g3
sS'name'
p79126
S'disp_z'
p79127
sS'required'
p79128
I00
sS'group_name'
p79129
Nsa(dp79130
S'description'
p79131
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p79132
sS'cpp_type'
p79133
S'FunctionName'
p79134
sS'default'
p79135
g3
sS'name'
p79136
S'elasticity_tensor_prefactor'
p79137
sS'required'
p79138
I00
sS'group_name'
p79139
Nsa(dp79140
S'description'
p79141
S'Euler angle in direction 1\n'
p79142
sS'cpp_type'
p79143
S'double'
p79144
sS'default'
p79145
S'0'
p79146
sS'name'
p79147
S'euler_angle_1'
p79148
sS'required'
p79149
I00
sS'group_name'
p79150
Nsa(dp79151
S'description'
p79152
S'Euler angle in direction 2\n'
p79153
sS'cpp_type'
p79154
S'double'
p79155
sS'default'
p79156
S'0'
p79157
sS'name'
p79158
S'euler_angle_2'
p79159
sS'required'
p79160
I00
sS'group_name'
p79161
Nsa(dp79162
S'description'
p79163
S'Euler angle in direction 3\n'
p79164
sS'cpp_type'
p79165
S'double'
p79166
sS'default'
p79167
S'0'
p79168
sS'name'
p79169
S'euler_angle_3'
p79170
sS'required'
p79171
I00
sS'group_name'
p79172
Nsa(dp79173
S'name'
p79174
S'fill_method'
p79175
sS'cpp_type'
p79176
S'MooseEnum'
p79177
sS'default'
p79178
S'symmetric9'
p79179
sS'description'
p79180
S'The fill method\n'
p79181
sS'required'
p79182
I00
sS'options'
p79183
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p79184
sS'group_name'
p79185
Nsa(dp79186
S'description'
p79187
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p79188
sS'cpp_type'
p79189
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p79190
sS'default'
p79191
g3
sS'name'
p79192
S'initial_stress'
p79193
sS'required'
p79194
I00
sS'group_name'
p79195
Nsa(dp79196
S'description'
p79197
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79198
sS'cpp_type'
p79199
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79200
sS'default'
p79201
g3
sS'name'
p79202
S'output_properties'
p79203
sS'required'
p79204
I00
sS'group_name'
p79205
S'Outputs'
p79206
sa(dp79207
S'description'
p79208
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79209
sS'cpp_type'
p79210
S'std::vector<OutputName, std::allocator<OutputName> >'
p79211
sS'default'
p79212
S'none'
p79213
sS'name'
p79214
S'outputs'
p79215
sS'required'
p79216
I00
sS'group_name'
p79217
S'Outputs'
p79218
sa(dp79219
S'description'
p79220
S'The seed for the master random number generator\n'
p79221
sS'cpp_type'
p79222
S'unsigned int'
p79223
sS'default'
p79224
S'0'
p79225
sS'name'
p79226
S'seed'
p79227
sS'required'
p79228
I00
sS'group_name'
p79229
S'Advanced'
p79230
sa(dp79231
S'description'
p79232
S'temperature variable\n'
p79233
sS'cpp_type'
p79234
S'std::vector<VariableName>'
p79235
sS'default'
p79236
g3
sS'name'
p79237
S'temperature'
p79238
sS'required'
p79239
I00
sS'group_name'
p79240
Nsa(dp79241
S'description'
p79242
S'Thermal expansion coefficient in 1/K\n'
p79243
sS'cpp_type'
p79244
S'double'
p79245
sS'default'
p79246
S'0'
p79247
sS'name'
p79248
S'thermal_expansion_coeff'
p79249
sS'required'
p79250
I00
sS'group_name'
p79251
Nsa(dp79252
S'description'
p79253
g3
sS'cpp_type'
p79254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79255
sS'default'
p79256
S'LinearElasticMaterial'
p79257
sS'name'
p79258
S'type'
p79259
sS'required'
p79260
I00
sS'group_name'
p79261
Nsa(dp79262
S'description'
p79263
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79264
sS'cpp_type'
p79265
S'bool'
p79266
sS'default'
p79267
S'0'
p79268
sS'name'
p79269
S'use_displaced_mesh'
p79270
sS'required'
p79271
I00
sS'group_name'
p79272
S'Advanced'
p79273
sasS'name'
p79274
S'/Materials/LinearElasticMaterial'
p79275
sa(dp79276
S'description'
p79277
g3
sS'subblocks'
p79278
NsS'parameters'
p79279
(lp79280
(dp79281
S'description'
p79282
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79283
sS'cpp_type'
p79284
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79285
sS'default'
p79286
g3
sS'name'
p79287
S'block'
p79288
sS'required'
p79289
I00
sS'group_name'
p79290
Nsa(dp79291
S'description'
p79292
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79293
sS'cpp_type'
p79294
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79295
sS'default'
p79296
g3
sS'name'
p79297
S'boundary'
p79298
sS'required'
p79299
I00
sS'group_name'
p79300
Nsa(dp79301
S'description'
p79302
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79303
sS'cpp_type'
p79304
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79305
sS'default'
p79306
g3
sS'name'
p79307
S'control_tags'
p79308
sS'required'
p79309
I00
sS'group_name'
p79310
Nsa(dp79311
S'description'
p79312
g3
sS'cpp_type'
p79313
S'double'
p79314
sS'default'
p79315
S'1'
p79316
sS'name'
p79317
S'lambda'
p79318
sS'required'
p79319
I00
sS'group_name'
p79320
Nsa(dp79321
S'description'
p79322
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79323
sS'cpp_type'
p79324
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79325
sS'default'
p79326
g3
sS'name'
p79327
S'output_properties'
p79328
sS'required'
p79329
I00
sS'group_name'
p79330
S'Outputs'
p79331
sa(dp79332
S'description'
p79333
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79334
sS'cpp_type'
p79335
S'std::vector<OutputName, std::allocator<OutputName> >'
p79336
sS'default'
p79337
S'none'
p79338
sS'name'
p79339
S'outputs'
p79340
sS'required'
p79341
I00
sS'group_name'
p79342
S'Outputs'
p79343
sa(dp79344
S'description'
p79345
g3
sS'cpp_type'
p79346
S'double'
p79347
sS'default'
p79348
S'1'
p79349
sS'name'
p79350
S'poissons_ratio'
p79351
sS'required'
p79352
I00
sS'group_name'
p79353
Nsa(dp79354
S'description'
p79355
S'The seed for the master random number generator\n'
p79356
sS'cpp_type'
p79357
S'unsigned int'
p79358
sS'default'
p79359
S'0'
p79360
sS'name'
p79361
S'seed'
p79362
sS'required'
p79363
I00
sS'group_name'
p79364
S'Advanced'
p79365
sa(dp79366
S'description'
p79367
g3
sS'cpp_type'
p79368
S'double'
p79369
sS'default'
p79370
S'300'
p79371
sS'name'
p79372
S't_ref'
p79373
sS'required'
p79374
I00
sS'group_name'
p79375
Nsa(dp79376
S'description'
p79377
S'Coupled Temperature\n'
p79378
sS'cpp_type'
p79379
S'std::vector<VariableName>'
p79380
sS'default'
p79381
g3
sS'name'
p79382
S'temp'
p79383
sS'required'
p79384
I00
sS'group_name'
p79385
Nsa(dp79386
S'description'
p79387
g3
sS'cpp_type'
p79388
S'double'
p79389
sS'default'
p79390
S'1'
p79391
sS'name'
p79392
S'thermal_expansion'
p79393
sS'required'
p79394
I00
sS'group_name'
p79395
Nsa(dp79396
S'description'
p79397
g3
sS'cpp_type'
p79398
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79399
sS'default'
p79400
S'LinearElasticityMaterial'
p79401
sS'name'
p79402
S'type'
p79403
sS'required'
p79404
I00
sS'group_name'
p79405
Nsa(dp79406
S'description'
p79407
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79408
sS'cpp_type'
p79409
S'bool'
p79410
sS'default'
p79411
S'0'
p79412
sS'name'
p79413
S'use_displaced_mesh'
p79414
sS'required'
p79415
I00
sS'group_name'
p79416
S'Advanced'
p79417
sa(dp79418
S'description'
p79419
g3
sS'cpp_type'
p79420
S'double'
p79421
sS'default'
p79422
S'1'
p79423
sS'name'
p79424
S'youngs_modulus'
p79425
sS'required'
p79426
I00
sS'group_name'
p79427
NsasS'name'
p79428
S'/Materials/LinearElasticityMaterial'
p79429
sa(dp79430
S'description'
p79431
g3
sS'subblocks'
p79432
NsS'parameters'
p79433
(lp79434
(dp79435
S'description'
p79436
S'Stiffness tensor for matrix\n'
p79437
sS'cpp_type'
p79438
S'std::vector<double, std::allocator<double> >'
p79439
sS'default'
p79440
g3
sS'name'
p79441
S'C_matrix'
p79442
sS'required'
p79443
I01
sS'group_name'
p79444
Nsa(dp79445
S'description'
p79446
S'True if all 21 independent values are given; else false indicates only 9 values given (C11, C12, C13, C22, C23, C33, C44, C55, C66.\n'
p79447
sS'cpp_type'
p79448
S'bool'
p79449
sS'default'
p79450
g3
sS'name'
p79451
S'all_21'
p79452
sS'required'
p79453
I01
sS'group_name'
p79454
Nsa(dp79455
S'description'
p79456
S'Name appended to material properties to make them unique\n'
p79457
sS'cpp_type'
p79458
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79459
sS'default'
p79460
g3
sS'name'
p79461
S'appended_property_name'
p79462
sS'required'
p79463
I00
sS'group_name'
p79464
Nsa(dp79465
S'description'
p79466
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79467
sS'cpp_type'
p79468
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79469
sS'default'
p79470
g3
sS'name'
p79471
S'block'
p79472
sS'required'
p79473
I00
sS'group_name'
p79474
Nsa(dp79475
S'description'
p79476
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79477
sS'cpp_type'
p79478
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79479
sS'default'
p79480
g3
sS'name'
p79481
S'boundary'
p79482
sS'required'
p79483
I00
sS'group_name'
p79484
Nsa(dp79485
S'description'
p79486
S'variable that zeros out the stiffness\n'
p79487
sS'cpp_type'
p79488
S'std::vector<VariableName>'
p79489
sS'default'
p79490
g3
sS'name'
p79491
S'c'
p79492
sS'required'
p79493
I00
sS'group_name'
p79494
Nsa(dp79495
S'description'
p79496
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79497
sS'cpp_type'
p79498
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79499
sS'default'
p79500
g3
sS'name'
p79501
S'control_tags'
p79502
sS'required'
p79503
I00
sS'group_name'
p79504
Nsa(dp79505
S'description'
p79506
S'The x displacement\n'
p79507
sS'cpp_type'
p79508
S'std::vector<VariableName>'
p79509
sS'default'
p79510
g3
sS'name'
p79511
S'disp_x'
p79512
sS'required'
p79513
I01
sS'group_name'
p79514
Nsa(dp79515
S'description'
p79516
S'The y displacement\n'
p79517
sS'cpp_type'
p79518
S'std::vector<VariableName>'
p79519
sS'default'
p79520
g3
sS'name'
p79521
S'disp_y'
p79522
sS'required'
p79523
I01
sS'group_name'
p79524
Nsa(dp79525
S'description'
p79526
S'The z displacement\n'
p79527
sS'cpp_type'
p79528
S'std::vector<VariableName>'
p79529
sS'default'
p79530
g3
sS'name'
p79531
S'disp_z'
p79532
sS'required'
p79533
I00
sS'group_name'
p79534
Nsa(dp79535
S'description'
p79536
S'Euler angle in direction 1\n'
p79537
sS'cpp_type'
p79538
S'double'
p79539
sS'default'
p79540
S'0'
p79541
sS'name'
p79542
S'euler_angle_1'
p79543
sS'required'
p79544
I00
sS'group_name'
p79545
Nsa(dp79546
S'description'
p79547
S'Euler angle in direction 2\n'
p79548
sS'cpp_type'
p79549
S'double'
p79550
sS'default'
p79551
S'0'
p79552
sS'name'
p79553
S'euler_angle_2'
p79554
sS'required'
p79555
I00
sS'group_name'
p79556
Nsa(dp79557
S'description'
p79558
S'Euler angle in direction 3\n'
p79559
sS'cpp_type'
p79560
S'double'
p79561
sS'default'
p79562
S'0'
p79563
sS'name'
p79564
S'euler_angle_3'
p79565
sS'required'
p79566
I00
sS'group_name'
p79567
Nsa(dp79568
S'description'
p79569
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79570
sS'cpp_type'
p79571
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79572
sS'default'
p79573
g3
sS'name'
p79574
S'output_properties'
p79575
sS'required'
p79576
I00
sS'group_name'
p79577
S'Outputs'
p79578
sa(dp79579
S'description'
p79580
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79581
sS'cpp_type'
p79582
S'std::vector<OutputName, std::allocator<OutputName> >'
p79583
sS'default'
p79584
S'none'
p79585
sS'name'
p79586
S'outputs'
p79587
sS'required'
p79588
I00
sS'group_name'
p79589
S'Outputs'
p79590
sa(dp79591
S'description'
p79592
S'The seed for the master random number generator\n'
p79593
sS'cpp_type'
p79594
S'unsigned int'
p79595
sS'default'
p79596
S'0'
p79597
sS'name'
p79598
S'seed'
p79599
sS'required'
p79600
I00
sS'group_name'
p79601
S'Advanced'
p79602
sa(dp79603
S'description'
p79604
S'The temperature if you want thermal expansion.\n'
p79605
sS'cpp_type'
p79606
S'std::vector<VariableName>'
p79607
sS'default'
p79608
g3
sS'name'
p79609
S'temp'
p79610
sS'required'
p79611
I00
sS'group_name'
p79612
Nsa(dp79613
S'description'
p79614
g3
sS'cpp_type'
p79615
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79616
sS'default'
p79617
S'LinearGeneralAnisotropicMaterial'
p79618
sS'name'
p79619
S'type'
p79620
sS'required'
p79621
I00
sS'group_name'
p79622
Nsa(dp79623
S'description'
p79624
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79625
sS'cpp_type'
p79626
S'bool'
p79627
sS'default'
p79628
S'0'
p79629
sS'name'
p79630
S'use_displaced_mesh'
p79631
sS'required'
p79632
I00
sS'group_name'
p79633
S'Advanced'
p79634
sasS'name'
p79635
S'/Materials/LinearGeneralAnisotropicMaterial'
p79636
sa(dp79637
S'description'
p79638
S'Phase-field fracture model energy contribution to damage growth-isotropic elasticity and undamaged stress under compressive strain\n'
p79639
sS'subblocks'
p79640
NsS'parameters'
p79641
(lp79642
(dp79643
S'description'
p79644
S'Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n'
p79645
sS'cpp_type'
p79646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79647
sS'default'
p79648
g3
sS'name'
p79649
S'base_name'
p79650
sS'required'
p79651
I00
sS'group_name'
p79652
Nsa(dp79653
S'description'
p79654
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79655
sS'cpp_type'
p79656
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79657
sS'default'
p79658
g3
sS'name'
p79659
S'block'
p79660
sS'required'
p79661
I00
sS'group_name'
p79662
Nsa(dp79663
S'description'
p79664
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79665
sS'cpp_type'
p79666
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79667
sS'default'
p79668
g3
sS'name'
p79669
S'boundary'
p79670
sS'required'
p79671
I00
sS'group_name'
p79672
Nsa(dp79673
S'description'
p79674
S'Order parameter for damage\n'
p79675
sS'cpp_type'
p79676
S'std::vector<VariableName>'
p79677
sS'default'
p79678
g3
sS'name'
p79679
S'c'
p79680
sS'required'
p79681
I01
sS'group_name'
p79682
Nsa(dp79683
S'description'
p79684
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79685
sS'cpp_type'
p79686
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79687
sS'default'
p79688
g3
sS'name'
p79689
S'control_tags'
p79690
sS'required'
p79691
I00
sS'group_name'
p79692
Nsa(dp79693
S'description'
p79694
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p79695
sS'cpp_type'
p79696
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p79697
sS'default'
p79698
g3
sS'name'
p79699
S'initial_stress'
p79700
sS'required'
p79701
I00
sS'group_name'
p79702
Nsa(dp79703
S'description'
p79704
S'Stiffness of damaged matrix\n'
p79705
sS'cpp_type'
p79706
S'double'
p79707
sS'default'
p79708
S'1e-06'
p79709
sS'name'
p79710
S'kdamage'
p79711
sS'required'
p79712
I00
sS'group_name'
p79713
Nsa(dp79714
S'description'
p79715
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79716
sS'cpp_type'
p79717
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79718
sS'default'
p79719
g3
sS'name'
p79720
S'output_properties'
p79721
sS'required'
p79722
I00
sS'group_name'
p79723
S'Outputs'
p79724
sa(dp79725
S'description'
p79726
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79727
sS'cpp_type'
p79728
S'std::vector<OutputName, std::allocator<OutputName> >'
p79729
sS'default'
p79730
S'none'
p79731
sS'name'
p79732
S'outputs'
p79733
sS'required'
p79734
I00
sS'group_name'
p79735
S'Outputs'
p79736
sa(dp79737
S'description'
p79738
S'The seed for the master random number generator\n'
p79739
sS'cpp_type'
p79740
S'unsigned int'
p79741
sS'default'
p79742
S'0'
p79743
sS'name'
p79744
S'seed'
p79745
sS'required'
p79746
I00
sS'group_name'
p79747
S'Advanced'
p79748
sa(dp79749
S'description'
p79750
S'Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n'
p79751
sS'cpp_type'
p79752
S'bool'
p79753
sS'default'
p79754
S'0'
p79755
sS'name'
p79756
S'store_stress_old'
p79757
sS'required'
p79758
I00
sS'group_name'
p79759
Nsa(dp79760
S'description'
p79761
g3
sS'cpp_type'
p79762
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79763
sS'default'
p79764
S'LinearIsoElasticPFDamage'
p79765
sS'name'
p79766
S'type'
p79767
sS'required'
p79768
I00
sS'group_name'
p79769
Nsa(dp79770
S'description'
p79771
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79772
sS'cpp_type'
p79773
S'bool'
p79774
sS'default'
p79775
S'0'
p79776
sS'name'
p79777
S'use_displaced_mesh'
p79778
sS'required'
p79779
I00
sS'group_name'
p79780
S'Advanced'
p79781
sasS'name'
p79782
S'/Materials/LinearIsoElasticPFDamage'
p79783
sa(dp79784
S'description'
p79785
g3
sS'subblocks'
p79786
NsS'parameters'
p79787
(lp79788
(dp79789
S'description'
p79790
S'Name appended to material properties to make them unique\n'
p79791
sS'cpp_type'
p79792
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79793
sS'default'
p79794
g3
sS'name'
p79795
S'appended_property_name'
p79796
sS'required'
p79797
I00
sS'group_name'
p79798
Nsa(dp79799
S'description'
p79800
S'The list of block ids (SubdomainID) that this object will be applied\n'
p79801
sS'cpp_type'
p79802
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p79803
sS'default'
p79804
g3
sS'name'
p79805
S'block'
p79806
sS'required'
p79807
I00
sS'group_name'
p79808
Nsa(dp79809
S'description'
p79810
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p79811
sS'cpp_type'
p79812
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p79813
sS'default'
p79814
g3
sS'name'
p79815
S'boundary'
p79816
sS'required'
p79817
I00
sS'group_name'
p79818
Nsa(dp79819
S'description'
p79820
S'variable that zeros out the stiffness\n'
p79821
sS'cpp_type'
p79822
S'std::vector<VariableName>'
p79823
sS'default'
p79824
g3
sS'name'
p79825
S'c'
p79826
sS'required'
p79827
I00
sS'group_name'
p79828
Nsa(dp79829
S'description'
p79830
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p79831
sS'cpp_type'
p79832
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79833
sS'default'
p79834
g3
sS'name'
p79835
S'control_tags'
p79836
sS'required'
p79837
I00
sS'group_name'
p79838
Nsa(dp79839
S'description'
p79840
S'The x displacement\n'
p79841
sS'cpp_type'
p79842
S'std::vector<VariableName>'
p79843
sS'default'
p79844
g3
sS'name'
p79845
S'disp_x'
p79846
sS'required'
p79847
I01
sS'group_name'
p79848
Nsa(dp79849
S'description'
p79850
S'The y displacement\n'
p79851
sS'cpp_type'
p79852
S'std::vector<VariableName>'
p79853
sS'default'
p79854
g3
sS'name'
p79855
S'disp_y'
p79856
sS'required'
p79857
I01
sS'group_name'
p79858
Nsa(dp79859
S'description'
p79860
S'The z displacement\n'
p79861
sS'cpp_type'
p79862
S'std::vector<VariableName>'
p79863
sS'default'
p79864
g3
sS'name'
p79865
S'disp_z'
p79866
sS'required'
p79867
I00
sS'group_name'
p79868
Nsa(dp79869
S'description'
p79870
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p79871
sS'cpp_type'
p79872
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p79873
sS'default'
p79874
g3
sS'name'
p79875
S'output_properties'
p79876
sS'required'
p79877
I00
sS'group_name'
p79878
S'Outputs'
p79879
sa(dp79880
S'description'
p79881
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p79882
sS'cpp_type'
p79883
S'std::vector<OutputName, std::allocator<OutputName> >'
p79884
sS'default'
p79885
S'none'
p79886
sS'name'
p79887
S'outputs'
p79888
sS'required'
p79889
I00
sS'group_name'
p79890
S'Outputs'
p79891
sa(dp79892
S'description'
p79893
S"Poisson's Ratio\n"
p79894
sS'cpp_type'
p79895
S'double'
p79896
sS'default'
p79897
g3
sS'name'
p79898
S'poissons_ratio'
p79899
sS'required'
p79900
I01
sS'group_name'
p79901
Nsa(dp79902
S'description'
p79903
S'The seed for the master random number generator\n'
p79904
sS'cpp_type'
p79905
S'unsigned int'
p79906
sS'default'
p79907
S'0'
p79908
sS'name'
p79909
S'seed'
p79910
sS'required'
p79911
I00
sS'group_name'
p79912
S'Advanced'
p79913
sa(dp79914
S'description'
p79915
S'The reference temperature at which this material has zero strain.\n'
p79916
sS'cpp_type'
p79917
S'double'
p79918
sS'default'
p79919
S'0'
p79920
sS'name'
p79921
S't_ref'
p79922
sS'required'
p79923
I00
sS'group_name'
p79924
Nsa(dp79925
S'description'
p79926
S'The temperature if you want thermal expansion.\n'
p79927
sS'cpp_type'
p79928
S'std::vector<VariableName>'
p79929
sS'default'
p79930
g3
sS'name'
p79931
S'temp'
p79932
sS'required'
p79933
I00
sS'group_name'
p79934
Nsa(dp79935
S'description'
p79936
S'The thermal expansion coefficient.\n'
p79937
sS'cpp_type'
p79938
S'double'
p79939
sS'default'
p79940
S'0'
p79941
sS'name'
p79942
S'thermal_expansion'
p79943
sS'required'
p79944
I00
sS'group_name'
p79945
Nsa(dp79946
S'description'
p79947
g3
sS'cpp_type'
p79948
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p79949
sS'default'
p79950
S'LinearIsotropicMaterial'
p79951
sS'name'
p79952
S'type'
p79953
sS'required'
p79954
I00
sS'group_name'
p79955
Nsa(dp79956
S'description'
p79957
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79958
sS'cpp_type'
p79959
S'bool'
p79960
sS'default'
p79961
S'0'
p79962
sS'name'
p79963
S'use_displaced_mesh'
p79964
sS'required'
p79965
I00
sS'group_name'
p79966
S'Advanced'
p79967
sa(dp79968
S'description'
p79969
S"Young's Modulus\n"
p79970
sS'cpp_type'
p79971
S'double'
p79972
sS'default'
p79973
g3
sS'name'
p79974
S'youngs_modulus'
p79975
sS'required'
p79976
I01
sS'group_name'
p79977
NsasS'name'
p79978
S'/Materials/LinearIsotropicMaterial'
p79979
sa(dp79980
S'description'
p79981
g3
sS'subblocks'
p79982
NsS'parameters'
p79983
(lp79984
(dp79985
S'description'
p79986
S'Absolute convergence tolerance for sub-newtion iteration\n'
p79987
sS'cpp_type'
p79988
S'double'
p79989
sS'default'
p79990
S'1e-20'
p79991
sS'name'
p79992
S'absolute_tolerance'
p79993
sS'required'
p79994
I00
sS'group_name'
p79995
Nsa(dp79996
S'description'
p79997
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p79998
sS'cpp_type'
p79999
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p80000
sS'default'
p80001
g3
sS'name'
p80002
S'active_crack_planes'
p80003
sS'required'
p80004
I00
sS'group_name'
p80005
Nsa(dp80006
S'description'
p80007
S'Name appended to material properties to make them unique\n'
p80008
sS'cpp_type'
p80009
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80010
sS'default'
p80011
g3
sS'name'
p80012
S'appended_property_name'
p80013
sS'required'
p80014
I00
sS'group_name'
p80015
Nsa(dp80016
S'description'
p80017
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80018
sS'cpp_type'
p80019
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80020
sS'default'
p80021
g3
sS'name'
p80022
S'block'
p80023
sS'required'
p80024
I00
sS'group_name'
p80025
Nsa(dp80026
S'description'
p80027
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80028
sS'cpp_type'
p80029
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80030
sS'default'
p80031
g3
sS'name'
p80032
S'boundary'
p80033
sS'required'
p80034
I00
sS'group_name'
p80035
Nsa(dp80036
S'description'
p80037
S'The bulk modulus for the material.\n'
p80038
sS'cpp_type'
p80039
S'double'
p80040
sS'default'
p80041
g3
sS'name'
p80042
S'bulk_modulus'
p80043
sS'required'
p80044
I00
sS'group_name'
p80045
Nsa(dp80046
S'description'
p80047
S'Whether to compute the J Integral.\n'
p80048
sS'cpp_type'
p80049
S'bool'
p80050
sS'default'
p80051
S'0'
p80052
sS'name'
p80053
S'compute_JIntegral'
p80054
sS'required'
p80055
I00
sS'group_name'
p80056
Nsa(dp80057
S'description'
p80058
S'ConstitutiveModel to use (optional)\n'
p80059
sS'cpp_type'
p80060
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80061
sS'default'
p80062
g3
sS'name'
p80063
S'constitutive_model'
p80064
sS'required'
p80065
I00
sS'group_name'
p80066
Nsa(dp80067
S'description'
p80068
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80069
sS'cpp_type'
p80070
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80071
sS'default'
p80072
g3
sS'name'
p80073
S'control_tags'
p80074
sS'required'
p80075
I00
sS'group_name'
p80076
Nsa(dp80077
S'description'
p80078
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p80079
sS'cpp_type'
p80080
S'double'
p80081
sS'default'
p80082
g3
sS'name'
p80083
S'cracking_neg_fraction'
p80084
sS'required'
p80085
I00
sS'group_name'
p80086
Nsa(dp80087
S'description'
p80088
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p80089
sS'cpp_type'
p80090
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80091
sS'default'
p80092
S'abrupt'
p80093
sS'name'
p80094
S'cracking_release'
p80095
sS'required'
p80096
I00
sS'group_name'
p80097
Nsa(dp80098
S'description'
p80099
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p80100
sS'cpp_type'
p80101
S'double'
p80102
sS'default'
p80103
S'0'
p80104
sS'name'
p80105
S'cracking_residual_stress'
p80106
sS'required'
p80107
I00
sS'group_name'
p80108
Nsa(dp80109
S'description'
p80110
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p80111
sS'cpp_type'
p80112
S'double'
p80113
sS'default'
p80114
S'0'
p80115
sS'name'
p80116
S'cracking_stress'
p80117
sS'required'
p80118
I00
sS'group_name'
p80119
Nsa(dp80120
S'description'
p80121
S'The cracking stress as a function of time and location\n'
p80122
sS'cpp_type'
p80123
S'FunctionName'
p80124
sS'default'
p80125
g3
sS'name'
p80126
S'cracking_stress_function'
p80127
sS'required'
p80128
I00
sS'group_name'
p80129
Nsa(dp80130
S'description'
p80131
S'Names of material properties this material depends on.\n'
p80132
sS'cpp_type'
p80133
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80134
sS'default'
p80135
g3
sS'name'
p80136
S'dep_matl_props'
p80137
sS'required'
p80138
I00
sS'group_name'
p80139
Nsa(dp80140
S'description'
p80141
S'The r displacement\n'
p80142
sS'cpp_type'
p80143
S'std::vector<VariableName>'
p80144
sS'default'
p80145
g3
sS'name'
p80146
S'disp_r'
p80147
sS'required'
p80148
I00
sS'group_name'
p80149
Nsa(dp80150
S'description'
p80151
S'The x displacement\n'
p80152
sS'cpp_type'
p80153
S'std::vector<VariableName>'
p80154
sS'default'
p80155
g3
sS'name'
p80156
S'disp_x'
p80157
sS'required'
p80158
I00
sS'group_name'
p80159
Nsa(dp80160
S'description'
p80161
S'The y displacement\n'
p80162
sS'cpp_type'
p80163
S'std::vector<VariableName>'
p80164
sS'default'
p80165
g3
sS'name'
p80166
S'disp_y'
p80167
sS'required'
p80168
I00
sS'group_name'
p80169
Nsa(dp80170
S'description'
p80171
S'The z displacement\n'
p80172
sS'cpp_type'
p80173
S'std::vector<VariableName>'
p80174
sS'default'
p80175
g3
sS'name'
p80176
S'disp_z'
p80177
sS'required'
p80178
I00
sS'group_name'
p80179
Nsa(dp80180
S'name'
p80181
S'formulation'
p80182
sS'cpp_type'
p80183
S'MooseEnum'
p80184
sS'default'
p80185
g3
sS'description'
p80186
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p80187
sS'required'
p80188
I00
sS'options'
p80189
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p80190
sS'group_name'
p80191
Nsa(dp80192
S'description'
p80193
S'Hardening slope\n'
p80194
sS'cpp_type'
p80195
S'double'
p80196
sS'default'
p80197
g3
sS'name'
p80198
S'hardening_constant'
p80199
sS'required'
p80200
I01
sS'group_name'
p80201
Nsa(dp80202
S'description'
p80203
S'True stress as a function of plastic strain\n'
p80204
sS'cpp_type'
p80205
S'FunctionName'
p80206
sS'default'
p80207
g3
sS'name'
p80208
S'hardening_function'
p80209
sS'required'
p80210
I00
sS'group_name'
p80211
Nsa(dp80212
S'description'
p80213
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p80214
sS'cpp_type'
p80215
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80216
sS'default'
p80217
S'RashidApprox'
p80218
sS'name'
p80219
S'increment_calculation'
p80220
sS'required'
p80221
I00
sS'group_name'
p80222
Nsa(dp80223
S'description'
p80224
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p80225
sS'cpp_type'
p80226
S'std::vector<double, std::allocator<double> >'
p80227
sS'default'
p80228
g3
sS'name'
p80229
S'initial_stress'
p80230
sS'required'
p80231
I00
sS'group_name'
p80232
Nsa(dp80233
S'description'
p80234
S"Lame's first parameter for the material.\n"
p80235
sS'cpp_type'
p80236
S'double'
p80237
sS'default'
p80238
g3
sS'name'
p80239
S'lambda'
p80240
sS'required'
p80241
I00
sS'group_name'
p80242
Nsa(dp80243
S'description'
p80244
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p80245
sS'cpp_type'
p80246
S'bool'
p80247
sS'default'
p80248
S'0'
p80249
sS'name'
p80250
S'large_strain'
p80251
sS'required'
p80252
I00
sS'group_name'
p80253
Nsa(dp80254
S'description'
p80255
S'The maximum number of cracks allowed at a material point.\n'
p80256
sS'cpp_type'
p80257
S'unsigned int'
p80258
sS'default'
p80259
S'3'
p80260
sS'name'
p80261
S'max_cracks'
p80262
sS'required'
p80263
I00
sS'group_name'
p80264
Nsa(dp80265
S'description'
p80266
S'Maximum number of sub-newton iterations\n'
p80267
sS'cpp_type'
p80268
S'unsigned int'
p80269
sS'default'
p80270
S'10'
p80271
sS'name'
p80272
S'max_its'
p80273
sS'required'
p80274
I00
sS'group_name'
p80275
Nsa(dp80276
S'description'
p80277
S'Set true to output sub-newton iteration information\n'
p80278
sS'cpp_type'
p80279
S'bool'
p80280
sS'default'
p80281
S'0'
p80282
sS'name'
p80283
S'output_iteration_info'
p80284
sS'required'
p80285
I00
sS'group_name'
p80286
Nsa(dp80287
S'description'
p80288
S'Set true to output sub-newton iteration information when a step fails\n'
p80289
sS'cpp_type'
p80290
S'bool'
p80291
sS'default'
p80292
S'0'
p80293
sS'name'
p80294
S'output_iteration_info_on_error'
p80295
sS'required'
p80296
I00
sS'group_name'
p80297
Nsa(dp80298
S'description'
p80299
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80300
sS'cpp_type'
p80301
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80302
sS'default'
p80303
g3
sS'name'
p80304
S'output_properties'
p80305
sS'required'
p80306
I00
sS'group_name'
p80307
S'Outputs'
p80308
sa(dp80309
S'description'
p80310
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80311
sS'cpp_type'
p80312
S'std::vector<OutputName, std::allocator<OutputName> >'
p80313
sS'default'
p80314
S'none'
p80315
sS'name'
p80316
S'outputs'
p80317
sS'required'
p80318
I00
sS'group_name'
p80319
S'Outputs'
p80320
sa(dp80321
S'description'
p80322
S"Poisson's ratio for the material.\n"
p80323
sS'cpp_type'
p80324
S'double'
p80325
sS'default'
p80326
g3
sS'name'
p80327
S'poissons_ratio'
p80328
sS'required'
p80329
I00
sS'group_name'
p80330
Nsa(dp80331
S'description'
p80332
S"Poisson's ratio as a function of temperature.\n"
p80333
sS'cpp_type'
p80334
S'FunctionName'
p80335
sS'default'
p80336
g3
sS'name'
p80337
S'poissons_ratio_function'
p80338
sS'required'
p80339
I00
sS'group_name'
p80340
Nsa(dp80341
S'description'
p80342
S'Relative convergence tolerance for sub-newtion iteration\n'
p80343
sS'cpp_type'
p80344
S'double'
p80345
sS'default'
p80346
S'1e-05'
p80347
sS'name'
p80348
S'relative_tolerance'
p80349
sS'required'
p80350
I00
sS'group_name'
p80351
Nsa(dp80352
S'description'
p80353
S'The zz strain (scalar variable)\n'
p80354
sS'cpp_type'
p80355
S'std::vector<VariableName>'
p80356
sS'default'
p80357
g3
sS'name'
p80358
S'scalar_strain_zz'
p80359
sS'required'
p80360
I00
sS'group_name'
p80361
Nsa(dp80362
S'description'
p80363
S'The seed for the master random number generator\n'
p80364
sS'cpp_type'
p80365
S'unsigned int'
p80366
sS'default'
p80367
S'0'
p80368
sS'name'
p80369
S'seed'
p80370
sS'required'
p80371
I00
sS'group_name'
p80372
S'Advanced'
p80373
sa(dp80374
S'description'
p80375
S'The shear modulus of the material.\n'
p80376
sS'cpp_type'
p80377
S'double'
p80378
sS'default'
p80379
g3
sS'name'
p80380
S'shear_modulus'
p80381
sS'required'
p80382
I00
sS'group_name'
p80383
Nsa(dp80384
S'description'
p80385
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p80386
sS'cpp_type'
p80387
S'bool'
p80388
sS'default'
p80389
S'0'
p80390
sS'name'
p80391
S'store_stress_older'
p80392
sS'required'
p80393
I00
sS'group_name'
p80394
Nsa(dp80395
S'description'
p80396
S'The zz strain\n'
p80397
sS'cpp_type'
p80398
S'std::vector<VariableName>'
p80399
sS'default'
p80400
g3
sS'name'
p80401
S'strain_zz'
p80402
sS'required'
p80403
I00
sS'group_name'
p80404
Nsa(dp80405
S'description'
p80406
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p80407
sS'cpp_type'
p80408
S'double'
p80409
sS'default'
p80410
g3
sS'name'
p80411
S'stress_free_temperature'
p80412
sS'required'
p80413
I00
sS'group_name'
p80414
Nsa(dp80415
S'description'
p80416
S'Coupled Temperature\n'
p80417
sS'cpp_type'
p80418
S'std::vector<VariableName>'
p80419
sS'default'
p80420
g3
sS'name'
p80421
S'temp'
p80422
sS'required'
p80423
I00
sS'group_name'
p80424
Nsa(dp80425
S'description'
p80426
S'The thermal expansion coefficient.\n'
p80427
sS'cpp_type'
p80428
S'double'
p80429
sS'default'
p80430
g3
sS'name'
p80431
S'thermal_expansion'
p80432
sS'required'
p80433
I00
sS'group_name'
p80434
Nsa(dp80435
S'description'
p80436
S'Thermal expansion coefficient as a function of temperature.\n'
p80437
sS'cpp_type'
p80438
S'FunctionName'
p80439
sS'default'
p80440
g3
sS'name'
p80441
S'thermal_expansion_function'
p80442
sS'required'
p80443
I00
sS'group_name'
p80444
Nsa(dp80445
S'name'
p80446
S'thermal_expansion_function_type'
p80447
sS'cpp_type'
p80448
S'MooseEnum'
p80449
sS'default'
p80450
g3
sS'description'
p80451
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p80452
sS'required'
p80453
I00
sS'options'
p80454
S'instantaneous mean'
p80455
sS'group_name'
p80456
Nsa(dp80457
S'description'
p80458
S'Reference temperature for mean thermal expansion function.\n'
p80459
sS'cpp_type'
p80460
S'double'
p80461
sS'default'
p80462
g3
sS'name'
p80463
S'thermal_expansion_reference_temperature'
p80464
sS'required'
p80465
I00
sS'group_name'
p80466
Nsa(dp80467
S'description'
p80468
g3
sS'cpp_type'
p80469
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80470
sS'default'
p80471
S'LinearStrainHardening'
p80472
sS'name'
p80473
S'type'
p80474
sS'required'
p80475
I00
sS'group_name'
p80476
Nsa(dp80477
S'description'
p80478
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p80479
sS'cpp_type'
p80480
S'bool'
p80481
sS'default'
p80482
S'0'
p80483
sS'name'
p80484
S'use_displaced_mesh'
p80485
sS'required'
p80486
I00
sS'group_name'
p80487
S'Advanced'
p80488
sa(dp80489
S'description'
p80490
S'The point at which plastic strain begins accumulating\n'
p80491
sS'cpp_type'
p80492
S'double'
p80493
sS'default'
p80494
g3
sS'name'
p80495
S'yield_stress'
p80496
sS'required'
p80497
I01
sS'group_name'
p80498
Nsa(dp80499
S'description'
p80500
S"Young's modulus of the material.\n"
p80501
sS'cpp_type'
p80502
S'double'
p80503
sS'default'
p80504
g3
sS'name'
p80505
S'youngs_modulus'
p80506
sS'required'
p80507
I00
sS'group_name'
p80508
Nsa(dp80509
S'description'
p80510
S"Young's modulus as a function of temperature.\n"
p80511
sS'cpp_type'
p80512
S'FunctionName'
p80513
sS'default'
p80514
g3
sS'name'
p80515
S'youngs_modulus_function'
p80516
sS'required'
p80517
I00
sS'group_name'
p80518
NsasS'name'
p80519
S'/Materials/LinearStrainHardening'
p80520
sa(dp80521
S'description'
p80522
g3
sS'subblocks'
p80523
NsS'parameters'
p80524
(lp80525
(dp80526
S'description'
p80527
S'The postprocessor associated with the C1111 value\n'
p80528
sS'cpp_type'
p80529
S'PostprocessorName'
p80530
sS'default'
p80531
g3
sS'name'
p80532
S'C1111'
p80533
sS'required'
p80534
I01
sS'group_name'
p80535
Nsa(dp80536
S'description'
p80537
S'The postprocessor associated with the C1122 value\n'
p80538
sS'cpp_type'
p80539
S'PostprocessorName'
p80540
sS'default'
p80541
g3
sS'name'
p80542
S'C1122'
p80543
sS'required'
p80544
I01
sS'group_name'
p80545
Nsa(dp80546
S'description'
p80547
S'The postprocessor associated with the C1133 value\n'
p80548
sS'cpp_type'
p80549
S'PostprocessorName'
p80550
sS'default'
p80551
g3
sS'name'
p80552
S'C1133'
p80553
sS'required'
p80554
I01
sS'group_name'
p80555
Nsa(dp80556
S'description'
p80557
S'The postprocessor associated with the C1212 value\n'
p80558
sS'cpp_type'
p80559
S'PostprocessorName'
p80560
sS'default'
p80561
g3
sS'name'
p80562
S'C1212'
p80563
sS'required'
p80564
I01
sS'group_name'
p80565
Nsa(dp80566
S'description'
p80567
S'The postprocessor associated with the C2222 value\n'
p80568
sS'cpp_type'
p80569
S'PostprocessorName'
p80570
sS'default'
p80571
g3
sS'name'
p80572
S'C2222'
p80573
sS'required'
p80574
I01
sS'group_name'
p80575
Nsa(dp80576
S'description'
p80577
S'The postprocessor associated with the C2233 value\n'
p80578
sS'cpp_type'
p80579
S'PostprocessorName'
p80580
sS'default'
p80581
g3
sS'name'
p80582
S'C2233'
p80583
sS'required'
p80584
I01
sS'group_name'
p80585
Nsa(dp80586
S'description'
p80587
S'The postprocessor associated with the C2323 value\n'
p80588
sS'cpp_type'
p80589
S'PostprocessorName'
p80590
sS'default'
p80591
g3
sS'name'
p80592
S'C2323'
p80593
sS'required'
p80594
I01
sS'group_name'
p80595
Nsa(dp80596
S'description'
p80597
S'The postprocessor associated with the C3131 value\n'
p80598
sS'cpp_type'
p80599
S'PostprocessorName'
p80600
sS'default'
p80601
g3
sS'name'
p80602
S'C3131'
p80603
sS'required'
p80604
I01
sS'group_name'
p80605
Nsa(dp80606
S'description'
p80607
S'The postprocessor associated with the C3333 value\n'
p80608
sS'cpp_type'
p80609
S'PostprocessorName'
p80610
sS'default'
p80611
g3
sS'name'
p80612
S'C3333'
p80613
sS'required'
p80614
I01
sS'group_name'
p80615
Nsa(dp80616
S'description'
p80617
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p80618
sS'cpp_type'
p80619
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p80620
sS'default'
p80621
g3
sS'name'
p80622
S'active_crack_planes'
p80623
sS'required'
p80624
I00
sS'group_name'
p80625
Nsa(dp80626
S'description'
p80627
S'Name appended to material properties to make them unique\n'
p80628
sS'cpp_type'
p80629
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80630
sS'default'
p80631
g3
sS'name'
p80632
S'appended_property_name'
p80633
sS'required'
p80634
I00
sS'group_name'
p80635
Nsa(dp80636
S'description'
p80637
S'The list of block ids (SubdomainID) that this object will be applied\n'
p80638
sS'cpp_type'
p80639
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p80640
sS'default'
p80641
g3
sS'name'
p80642
S'block'
p80643
sS'required'
p80644
I00
sS'group_name'
p80645
Nsa(dp80646
S'description'
p80647
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p80648
sS'cpp_type'
p80649
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p80650
sS'default'
p80651
g3
sS'name'
p80652
S'boundary'
p80653
sS'required'
p80654
I00
sS'group_name'
p80655
Nsa(dp80656
S'description'
p80657
S'The bulk modulus for the material.\n'
p80658
sS'cpp_type'
p80659
S'double'
p80660
sS'default'
p80661
g3
sS'name'
p80662
S'bulk_modulus'
p80663
sS'required'
p80664
I00
sS'group_name'
p80665
Nsa(dp80666
S'description'
p80667
S'Whether to compute the J Integral.\n'
p80668
sS'cpp_type'
p80669
S'bool'
p80670
sS'default'
p80671
S'0'
p80672
sS'name'
p80673
S'compute_JIntegral'
p80674
sS'required'
p80675
I00
sS'group_name'
p80676
Nsa(dp80677
S'description'
p80678
S'ConstitutiveModel to use (optional)\n'
p80679
sS'cpp_type'
p80680
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80681
sS'default'
p80682
g3
sS'name'
p80683
S'constitutive_model'
p80684
sS'required'
p80685
I00
sS'group_name'
p80686
Nsa(dp80687
S'description'
p80688
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p80689
sS'cpp_type'
p80690
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80691
sS'default'
p80692
g3
sS'name'
p80693
S'control_tags'
p80694
sS'required'
p80695
I00
sS'group_name'
p80696
Nsa(dp80697
S'description'
p80698
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p80699
sS'cpp_type'
p80700
S'double'
p80701
sS'default'
p80702
g3
sS'name'
p80703
S'cracking_neg_fraction'
p80704
sS'required'
p80705
I00
sS'group_name'
p80706
Nsa(dp80707
S'description'
p80708
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p80709
sS'cpp_type'
p80710
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80711
sS'default'
p80712
S'abrupt'
p80713
sS'name'
p80714
S'cracking_release'
p80715
sS'required'
p80716
I00
sS'group_name'
p80717
Nsa(dp80718
S'description'
p80719
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p80720
sS'cpp_type'
p80721
S'double'
p80722
sS'default'
p80723
S'0'
p80724
sS'name'
p80725
S'cracking_residual_stress'
p80726
sS'required'
p80727
I00
sS'group_name'
p80728
Nsa(dp80729
S'description'
p80730
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p80731
sS'cpp_type'
p80732
S'double'
p80733
sS'default'
p80734
S'0'
p80735
sS'name'
p80736
S'cracking_stress'
p80737
sS'required'
p80738
I00
sS'group_name'
p80739
Nsa(dp80740
S'description'
p80741
S'The cracking stress as a function of time and location\n'
p80742
sS'cpp_type'
p80743
S'FunctionName'
p80744
sS'default'
p80745
g3
sS'name'
p80746
S'cracking_stress_function'
p80747
sS'required'
p80748
I00
sS'group_name'
p80749
Nsa(dp80750
S'description'
p80751
S'Names of material properties this material depends on.\n'
p80752
sS'cpp_type'
p80753
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80754
sS'default'
p80755
g3
sS'name'
p80756
S'dep_matl_props'
p80757
sS'required'
p80758
I00
sS'group_name'
p80759
Nsa(dp80760
S'description'
p80761
S'The r displacement\n'
p80762
sS'cpp_type'
p80763
S'std::vector<VariableName>'
p80764
sS'default'
p80765
g3
sS'name'
p80766
S'disp_r'
p80767
sS'required'
p80768
I00
sS'group_name'
p80769
Nsa(dp80770
S'description'
p80771
S'The x displacement\n'
p80772
sS'cpp_type'
p80773
S'std::vector<VariableName>'
p80774
sS'default'
p80775
g3
sS'name'
p80776
S'disp_x'
p80777
sS'required'
p80778
I00
sS'group_name'
p80779
Nsa(dp80780
S'description'
p80781
S'The y displacement\n'
p80782
sS'cpp_type'
p80783
S'std::vector<VariableName>'
p80784
sS'default'
p80785
g3
sS'name'
p80786
S'disp_y'
p80787
sS'required'
p80788
I00
sS'group_name'
p80789
Nsa(dp80790
S'description'
p80791
S'The z displacement\n'
p80792
sS'cpp_type'
p80793
S'std::vector<VariableName>'
p80794
sS'default'
p80795
g3
sS'name'
p80796
S'disp_z'
p80797
sS'required'
p80798
I00
sS'group_name'
p80799
Nsa(dp80800
S'name'
p80801
S'formulation'
p80802
sS'cpp_type'
p80803
S'MooseEnum'
p80804
sS'default'
p80805
g3
sS'description'
p80806
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p80807
sS'required'
p80808
I00
sS'options'
p80809
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p80810
sS'group_name'
p80811
Nsa(dp80812
S'description'
p80813
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p80814
sS'cpp_type'
p80815
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p80816
sS'default'
p80817
S'RashidApprox'
p80818
sS'name'
p80819
S'increment_calculation'
p80820
sS'required'
p80821
I00
sS'group_name'
p80822
Nsa(dp80823
S'description'
p80824
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p80825
sS'cpp_type'
p80826
S'std::vector<double, std::allocator<double> >'
p80827
sS'default'
p80828
g3
sS'name'
p80829
S'initial_stress'
p80830
sS'required'
p80831
I00
sS'group_name'
p80832
Nsa(dp80833
S'description'
p80834
S"Lame's first parameter for the material.\n"
p80835
sS'cpp_type'
p80836
S'double'
p80837
sS'default'
p80838
g3
sS'name'
p80839
S'lambda'
p80840
sS'required'
p80841
I00
sS'group_name'
p80842
Nsa(dp80843
S'description'
p80844
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p80845
sS'cpp_type'
p80846
S'bool'
p80847
sS'default'
p80848
S'0'
p80849
sS'name'
p80850
S'large_strain'
p80851
sS'required'
p80852
I00
sS'group_name'
p80853
Nsa(dp80854
S'description'
p80855
S'The maximum number of cracks allowed at a material point.\n'
p80856
sS'cpp_type'
p80857
S'unsigned int'
p80858
sS'default'
p80859
S'3'
p80860
sS'name'
p80861
S'max_cracks'
p80862
sS'required'
p80863
I00
sS'group_name'
p80864
Nsa(dp80865
S'description'
p80866
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p80867
sS'cpp_type'
p80868
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p80869
sS'default'
p80870
g3
sS'name'
p80871
S'output_properties'
p80872
sS'required'
p80873
I00
sS'group_name'
p80874
S'Outputs'
p80875
sa(dp80876
S'description'
p80877
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p80878
sS'cpp_type'
p80879
S'std::vector<OutputName, std::allocator<OutputName> >'
p80880
sS'default'
p80881
S'none'
p80882
sS'name'
p80883
S'outputs'
p80884
sS'required'
p80885
I00
sS'group_name'
p80886
S'Outputs'
p80887
sa(dp80888
S'description'
p80889
S"Poisson's ratio for the material.\n"
p80890
sS'cpp_type'
p80891
S'double'
p80892
sS'default'
p80893
g3
sS'name'
p80894
S'poissons_ratio'
p80895
sS'required'
p80896
I00
sS'group_name'
p80897
Nsa(dp80898
S'description'
p80899
S"Poisson's ratio as a function of temperature.\n"
p80900
sS'cpp_type'
p80901
S'FunctionName'
p80902
sS'default'
p80903
g3
sS'name'
p80904
S'poissons_ratio_function'
p80905
sS'required'
p80906
I00
sS'group_name'
p80907
Nsa(dp80908
S'description'
p80909
S'The zz strain (scalar variable)\n'
p80910
sS'cpp_type'
p80911
S'std::vector<VariableName>'
p80912
sS'default'
p80913
g3
sS'name'
p80914
S'scalar_strain_zz'
p80915
sS'required'
p80916
I00
sS'group_name'
p80917
Nsa(dp80918
S'description'
p80919
S'The seed for the master random number generator\n'
p80920
sS'cpp_type'
p80921
S'unsigned int'
p80922
sS'default'
p80923
S'0'
p80924
sS'name'
p80925
S'seed'
p80926
sS'required'
p80927
I00
sS'group_name'
p80928
S'Advanced'
p80929
sa(dp80930
S'description'
p80931
S'The shear modulus of the material.\n'
p80932
sS'cpp_type'
p80933
S'double'
p80934
sS'default'
p80935
g3
sS'name'
p80936
S'shear_modulus'
p80937
sS'required'
p80938
I00
sS'group_name'
p80939
Nsa(dp80940
S'description'
p80941
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p80942
sS'cpp_type'
p80943
S'bool'
p80944
sS'default'
p80945
S'0'
p80946
sS'name'
p80947
S'store_stress_older'
p80948
sS'required'
p80949
I00
sS'group_name'
p80950
Nsa(dp80951
S'description'
p80952
S'The zz strain\n'
p80953
sS'cpp_type'
p80954
S'std::vector<VariableName>'
p80955
sS'default'
p80956
g3
sS'name'
p80957
S'strain_zz'
p80958
sS'required'
p80959
I00
sS'group_name'
p80960
Nsa(dp80961
S'description'
p80962
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p80963
sS'cpp_type'
p80964
S'double'
p80965
sS'default'
p80966
g3
sS'name'
p80967
S'stress_free_temperature'
p80968
sS'required'
p80969
I00
sS'group_name'
p80970
Nsa(dp80971
S'description'
p80972
S'Coupled Temperature\n'
p80973
sS'cpp_type'
p80974
S'std::vector<VariableName>'
p80975
sS'default'
p80976
g3
sS'name'
p80977
S'temp'
p80978
sS'required'
p80979
I00
sS'group_name'
p80980
Nsa(dp80981
S'description'
p80982
S'The thermal expansion coefficient.\n'
p80983
sS'cpp_type'
p80984
S'double'
p80985
sS'default'
p80986
g3
sS'name'
p80987
S'thermal_expansion'
p80988
sS'required'
p80989
I00
sS'group_name'
p80990
Nsa(dp80991
S'description'
p80992
S'Thermal expansion coefficient as a function of temperature.\n'
p80993
sS'cpp_type'
p80994
S'FunctionName'
p80995
sS'default'
p80996
g3
sS'name'
p80997
S'thermal_expansion_function'
p80998
sS'required'
p80999
I00
sS'group_name'
p81000
Nsa(dp81001
S'name'
p81002
S'thermal_expansion_function_type'
p81003
sS'cpp_type'
p81004
S'MooseEnum'
p81005
sS'default'
p81006
g3
sS'description'
p81007
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p81008
sS'required'
p81009
I00
sS'options'
p81010
S'instantaneous mean'
p81011
sS'group_name'
p81012
Nsa(dp81013
S'description'
p81014
S'Reference temperature for mean thermal expansion function.\n'
p81015
sS'cpp_type'
p81016
S'double'
p81017
sS'default'
p81018
g3
sS'name'
p81019
S'thermal_expansion_reference_temperature'
p81020
sS'required'
p81021
I00
sS'group_name'
p81022
Nsa(dp81023
S'description'
p81024
g3
sS'cpp_type'
p81025
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81026
sS'default'
p81027
S'MacroElastic'
p81028
sS'name'
p81029
S'type'
p81030
sS'required'
p81031
I00
sS'group_name'
p81032
Nsa(dp81033
S'description'
p81034
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81035
sS'cpp_type'
p81036
S'bool'
p81037
sS'default'
p81038
S'0'
p81039
sS'name'
p81040
S'use_displaced_mesh'
p81041
sS'required'
p81042
I00
sS'group_name'
p81043
S'Advanced'
p81044
sa(dp81045
S'description'
p81046
S"Young's modulus of the material.\n"
p81047
sS'cpp_type'
p81048
S'double'
p81049
sS'default'
p81050
g3
sS'name'
p81051
S'youngs_modulus'
p81052
sS'required'
p81053
I00
sS'group_name'
p81054
Nsa(dp81055
S'description'
p81056
S"Young's modulus as a function of temperature.\n"
p81057
sS'cpp_type'
p81058
S'FunctionName'
p81059
sS'default'
p81060
g3
sS'name'
p81061
S'youngs_modulus_function'
p81062
sS'required'
p81063
I00
sS'group_name'
p81064
NsasS'name'
p81065
S'/Materials/MacroElastic'
p81066
sa(dp81067
S'description'
p81068
S'Material that implements the math free energy using the expression builder and automatric differentiation\n'
p81069
sS'subblocks'
p81070
NsS'parameters'
p81071
(lp81072
(dp81073
S'description'
p81074
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81075
sS'cpp_type'
p81076
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81077
sS'default'
p81078
g3
sS'name'
p81079
S'block'
p81080
sS'required'
p81081
I00
sS'group_name'
p81082
Nsa(dp81083
S'description'
p81084
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81085
sS'cpp_type'
p81086
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81087
sS'default'
p81088
g3
sS'name'
p81089
S'boundary'
p81090
sS'required'
p81091
I00
sS'group_name'
p81092
Nsa(dp81093
S'description'
p81094
S'Concentration variable\n'
p81095
sS'cpp_type'
p81096
S'std::vector<VariableName>'
p81097
sS'default'
p81098
g3
sS'name'
p81099
S'c'
p81100
sS'required'
p81101
I01
sS'group_name'
p81102
Nsa(dp81103
S'description'
p81104
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81105
sS'cpp_type'
p81106
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81107
sS'default'
p81108
g3
sS'name'
p81109
S'control_tags'
p81110
sS'required'
p81111
I00
sS'group_name'
p81112
Nsa(dp81113
S'description'
p81114
S'Maximum order of derivatives taken\n'
p81115
sS'cpp_type'
p81116
S'unsigned int'
p81117
sS'default'
p81118
S'3'
p81119
sS'name'
p81120
S'derivative_order'
p81121
sS'required'
p81122
I00
sS'group_name'
p81123
Nsa(dp81124
S'description'
p81125
S'Disable the function parser algebraic optimizer\n'
p81126
sS'cpp_type'
p81127
S'bool'
p81128
sS'default'
p81129
S'0'
p81130
sS'name'
p81131
S'disable_fpoptimizer'
p81132
sS'required'
p81133
I00
sS'group_name'
p81134
Nsa(dp81135
S'description'
p81136
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p81137
sS'cpp_type'
p81138
S'bool'
p81139
sS'default'
p81140
S'1'
p81141
sS'name'
p81142
S'enable_jit'
p81143
sS'required'
p81144
I00
sS'group_name'
p81145
Nsa(dp81146
S'description'
p81147
S'Base name of the free energy function (used to name the material properties)\n'
p81148
sS'cpp_type'
p81149
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81150
sS'default'
p81151
S'F'
p81152
sS'name'
p81153
S'f_name'
p81154
sS'required'
p81155
I00
sS'group_name'
p81156
Nsa(dp81157
S'description'
p81158
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p81159
sS'cpp_type'
p81160
S'bool'
p81161
sS'default'
p81162
S'0'
p81163
sS'name'
p81164
S'fail_on_evalerror'
p81165
sS'required'
p81166
I00
sS'group_name'
p81167
Nsa(dp81168
S'description'
p81169
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81170
sS'cpp_type'
p81171
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81172
sS'default'
p81173
g3
sS'name'
p81174
S'output_properties'
p81175
sS'required'
p81176
I00
sS'group_name'
p81177
S'Outputs'
p81178
sa(dp81179
S'description'
p81180
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81181
sS'cpp_type'
p81182
S'std::vector<OutputName, std::allocator<OutputName> >'
p81183
sS'default'
p81184
S'none'
p81185
sS'name'
p81186
S'outputs'
p81187
sS'required'
p81188
I00
sS'group_name'
p81189
S'Outputs'
p81190
sa(dp81191
S'description'
p81192
S'The seed for the master random number generator\n'
p81193
sS'cpp_type'
p81194
S'unsigned int'
p81195
sS'default'
p81196
S'0'
p81197
sS'name'
p81198
S'seed'
p81199
sS'required'
p81200
I00
sS'group_name'
p81201
S'Advanced'
p81202
sa(dp81203
S'description'
p81204
S'Flag to indicate if third derivatives are needed\n'
p81205
sS'cpp_type'
p81206
S'bool'
p81207
sS'default'
p81208
g3
sS'name'
p81209
S'third_derivatives'
p81210
sS'required'
p81211
I00
sS'group_name'
p81212
Nsa(dp81213
S'description'
p81214
g3
sS'cpp_type'
p81215
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81216
sS'default'
p81217
S'MathEBFreeEnergy'
p81218
sS'name'
p81219
S'type'
p81220
sS'required'
p81221
I00
sS'group_name'
p81222
Nsa(dp81223
S'description'
p81224
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81225
sS'cpp_type'
p81226
S'bool'
p81227
sS'default'
p81228
S'0'
p81229
sS'name'
p81230
S'use_displaced_mesh'
p81231
sS'required'
p81232
I00
sS'group_name'
p81233
S'Advanced'
p81234
sasS'name'
p81235
S'/Materials/MathEBFreeEnergy'
p81236
sa(dp81237
S'description'
p81238
S'Material that implements the math free energy and its derivatives: \\nF = 1/4(1 + c)^2*(1 - c)^2\n'
p81239
sS'subblocks'
p81240
NsS'parameters'
p81241
(lp81242
(dp81243
S'description'
p81244
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81245
sS'cpp_type'
p81246
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81247
sS'default'
p81248
g3
sS'name'
p81249
S'block'
p81250
sS'required'
p81251
I00
sS'group_name'
p81252
Nsa(dp81253
S'description'
p81254
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81255
sS'cpp_type'
p81256
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81257
sS'default'
p81258
g3
sS'name'
p81259
S'boundary'
p81260
sS'required'
p81261
I00
sS'group_name'
p81262
Nsa(dp81263
S'description'
p81264
S'Concentration variable\n'
p81265
sS'cpp_type'
p81266
S'std::vector<VariableName>'
p81267
sS'default'
p81268
g3
sS'name'
p81269
S'c'
p81270
sS'required'
p81271
I01
sS'group_name'
p81272
Nsa(dp81273
S'description'
p81274
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81275
sS'cpp_type'
p81276
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81277
sS'default'
p81278
g3
sS'name'
p81279
S'control_tags'
p81280
sS'required'
p81281
I00
sS'group_name'
p81282
Nsa(dp81283
S'description'
p81284
S'Maximum order of derivatives taken (2 or 3)\n'
p81285
sS'cpp_type'
p81286
S'unsigned int'
p81287
sS'default'
p81288
S'3'
p81289
sS'name'
p81290
S'derivative_order'
p81291
sS'required'
p81292
I00
sS'group_name'
p81293
Nsa(dp81294
S'description'
p81295
S'Base name of the free energy function (used to name the material properties)\n'
p81296
sS'cpp_type'
p81297
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81298
sS'default'
p81299
S'F'
p81300
sS'name'
p81301
S'f_name'
p81302
sS'required'
p81303
I00
sS'group_name'
p81304
Nsa(dp81305
S'description'
p81306
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81307
sS'cpp_type'
p81308
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81309
sS'default'
p81310
g3
sS'name'
p81311
S'output_properties'
p81312
sS'required'
p81313
I00
sS'group_name'
p81314
S'Outputs'
p81315
sa(dp81316
S'description'
p81317
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81318
sS'cpp_type'
p81319
S'std::vector<OutputName, std::allocator<OutputName> >'
p81320
sS'default'
p81321
S'none'
p81322
sS'name'
p81323
S'outputs'
p81324
sS'required'
p81325
I00
sS'group_name'
p81326
S'Outputs'
p81327
sa(dp81328
S'description'
p81329
S'The seed for the master random number generator\n'
p81330
sS'cpp_type'
p81331
S'unsigned int'
p81332
sS'default'
p81333
S'0'
p81334
sS'name'
p81335
S'seed'
p81336
sS'required'
p81337
I00
sS'group_name'
p81338
S'Advanced'
p81339
sa(dp81340
S'description'
p81341
S'Flag to indicate if third derivatives are needed\n'
p81342
sS'cpp_type'
p81343
S'bool'
p81344
sS'default'
p81345
g3
sS'name'
p81346
S'third_derivatives'
p81347
sS'required'
p81348
I00
sS'group_name'
p81349
Nsa(dp81350
S'description'
p81351
g3
sS'cpp_type'
p81352
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81353
sS'default'
p81354
S'MathFreeEnergy'
p81355
sS'name'
p81356
S'type'
p81357
sS'required'
p81358
I00
sS'group_name'
p81359
Nsa(dp81360
S'description'
p81361
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81362
sS'cpp_type'
p81363
S'bool'
p81364
sS'default'
p81365
S'0'
p81366
sS'name'
p81367
S'use_displaced_mesh'
p81368
sS'required'
p81369
I00
sS'group_name'
p81370
S'Advanced'
p81371
sasS'name'
p81372
S'/Materials/MathFreeEnergy'
p81373
sa(dp81374
S'description'
p81375
S'Material type that holds info regarding MollifiedLangmuir desorption from matrix to porespace and viceversa\n'
p81376
sS'subblocks'
p81377
NsS'parameters'
p81378
(lp81379
(dp81380
S'description'
p81381
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81382
sS'cpp_type'
p81383
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81384
sS'default'
p81385
g3
sS'name'
p81386
S'block'
p81387
sS'required'
p81388
I00
sS'group_name'
p81389
Nsa(dp81390
S'description'
p81391
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81392
sS'cpp_type'
p81393
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81394
sS'default'
p81395
g3
sS'name'
p81396
S'boundary'
p81397
sS'required'
p81398
I00
sS'group_name'
p81399
Nsa(dp81400
S'description'
p81401
S'The concentration of gas variable\n'
p81402
sS'cpp_type'
p81403
S'std::vector<VariableName>'
p81404
sS'default'
p81405
g3
sS'name'
p81406
S'conc_var'
p81407
sS'required'
p81408
I01
sS'group_name'
p81409
Nsa(dp81410
S'description'
p81411
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81412
sS'cpp_type'
p81413
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81414
sS'default'
p81415
g3
sS'name'
p81416
S'control_tags'
p81417
sS'required'
p81418
I00
sS'group_name'
p81419
Nsa(dp81420
S'description'
p81421
S'This is (Langmuir volume)*(density of gas at standard temp and pressure).  Langmuir volume is measured in (gas volume)/(matrix volume).  (Methane density(101kPa, 20degC) = 0.655kg/m^3.  Methane density(101kPa, 0degC) = 0.715kg/m^3.)  Units [kg/m^3]\n'
p81422
sS'cpp_type'
p81423
S'double'
p81424
sS'default'
p81425
g3
sS'name'
p81426
S'langmuir_density'
p81427
sS'required'
p81428
I01
sS'group_name'
p81429
Nsa(dp81430
S'description'
p81431
S'Langmuir pressure.  Units Pa\n'
p81432
sS'cpp_type'
p81433
S'double'
p81434
sS'default'
p81435
g3
sS'name'
p81436
S'langmuir_pressure'
p81437
sS'required'
p81438
I01
sS'group_name'
p81439
Nsa(dp81440
S'description'
p81441
S'The reciprocal of time constants will be one_over_time_const*tanh( |conc_var - equilib_conc|/(mollifier*langmuir_density)).  So for mollifier very small you will get a stepchange between desorption and adsorption, but for mollifier bigger you will be a gradual change\n'
p81442
sS'cpp_type'
p81443
S'double'
p81444
sS'default'
p81445
S'0.1'
p81446
sS'name'
p81447
S'mollifier'
p81448
sS'required'
p81449
I00
sS'group_name'
p81450
Nsa(dp81451
S'description'
p81452
S'Time constant for Langmuir adsorption (gas moving from porespace to matrix).  Units [s].\n'
p81453
sS'cpp_type'
p81454
S'std::vector<VariableName>'
p81455
sS'default'
p81456
g3
sS'name'
p81457
S'one_over_adsorption_time_const'
p81458
sS'required'
p81459
I01
sS'group_name'
p81460
Nsa(dp81461
S'description'
p81462
S'Time constant for Langmuir desorption (gas moving from matrix to porespace).  Units [s]\n'
p81463
sS'cpp_type'
p81464
S'std::vector<VariableName>'
p81465
sS'default'
p81466
g3
sS'name'
p81467
S'one_over_desorption_time_const'
p81468
sS'required'
p81469
I01
sS'group_name'
p81470
Nsa(dp81471
S'description'
p81472
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81473
sS'cpp_type'
p81474
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81475
sS'default'
p81476
g3
sS'name'
p81477
S'output_properties'
p81478
sS'required'
p81479
I00
sS'group_name'
p81480
S'Outputs'
p81481
sa(dp81482
S'description'
p81483
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81484
sS'cpp_type'
p81485
S'std::vector<OutputName, std::allocator<OutputName> >'
p81486
sS'default'
p81487
S'none'
p81488
sS'name'
p81489
S'outputs'
p81490
sS'required'
p81491
I00
sS'group_name'
p81492
S'Outputs'
p81493
sa(dp81494
S'description'
p81495
S'The gas porepressure variable\n'
p81496
sS'cpp_type'
p81497
S'std::vector<VariableName>'
p81498
sS'default'
p81499
g3
sS'name'
p81500
S'pressure_var'
p81501
sS'required'
p81502
I01
sS'group_name'
p81503
Nsa(dp81504
S'description'
p81505
S'The seed for the master random number generator\n'
p81506
sS'cpp_type'
p81507
S'unsigned int'
p81508
sS'default'
p81509
S'0'
p81510
sS'name'
p81511
S'seed'
p81512
sS'required'
p81513
I00
sS'group_name'
p81514
S'Advanced'
p81515
sa(dp81516
S'description'
p81517
g3
sS'cpp_type'
p81518
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81519
sS'default'
p81520
S'MollifiedLangmuirMaterial'
p81521
sS'name'
p81522
S'type'
p81523
sS'required'
p81524
I00
sS'group_name'
p81525
Nsa(dp81526
S'description'
p81527
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81528
sS'cpp_type'
p81529
S'bool'
p81530
sS'default'
p81531
S'0'
p81532
sS'name'
p81533
S'use_displaced_mesh'
p81534
sS'required'
p81535
I00
sS'group_name'
p81536
S'Advanced'
p81537
sasS'name'
p81538
S'/Materials/MollifiedLangmuirMaterial'
p81539
sa(dp81540
S'description'
p81541
g3
sS'subblocks'
p81542
NsS'parameters'
p81543
(lp81544
(dp81545
S'description'
p81546
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81547
sS'cpp_type'
p81548
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81549
sS'default'
p81550
g3
sS'name'
p81551
S'block'
p81552
sS'required'
p81553
I00
sS'group_name'
p81554
Nsa(dp81555
S'description'
p81556
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81557
sS'cpp_type'
p81558
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81559
sS'default'
p81560
g3
sS'name'
p81561
S'boundary'
p81562
sS'required'
p81563
I00
sS'group_name'
p81564
Nsa(dp81565
S'description'
p81566
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81567
sS'cpp_type'
p81568
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81569
sS'default'
p81570
g3
sS'name'
p81571
S'control_tags'
p81572
sS'required'
p81573
I00
sS'group_name'
p81574
Nsa(dp81575
S'description'
p81576
S'eta_i order parameters, one for each h\n'
p81577
sS'cpp_type'
p81578
S'std::vector<VariableName>'
p81579
sS'default'
p81580
g3
sS'name'
p81581
S'etas'
p81582
sS'required'
p81583
I01
sS'group_name'
p81584
Nsa(dp81585
S'description'
p81586
S'actual name for g(eta_i)\n'
p81587
sS'cpp_type'
p81588
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81589
sS'default'
p81590
S'g'
p81591
sS'name'
p81592
S'function_name'
p81593
sS'required'
p81594
I00
sS'group_name'
p81595
Nsa(dp81596
S'name'
p81597
S'g_order'
p81598
sS'cpp_type'
p81599
S'MooseEnum'
p81600
sS'default'
p81601
S'SIMPLE'
p81602
sS'description'
p81603
S'Polynomial order of the switching function h(eta)\n'
p81604
sS'required'
p81605
I00
sS'options'
p81606
S'SIMPLE'
p81607
sS'group_name'
p81608
Nsa(dp81609
S'description'
p81610
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81611
sS'cpp_type'
p81612
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81613
sS'default'
p81614
g3
sS'name'
p81615
S'output_properties'
p81616
sS'required'
p81617
I00
sS'group_name'
p81618
S'Outputs'
p81619
sa(dp81620
S'description'
p81621
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81622
sS'cpp_type'
p81623
S'std::vector<OutputName, std::allocator<OutputName> >'
p81624
sS'default'
p81625
S'none'
p81626
sS'name'
p81627
S'outputs'
p81628
sS'required'
p81629
I00
sS'group_name'
p81630
S'Outputs'
p81631
sa(dp81632
S'description'
p81633
S'The seed for the master random number generator\n'
p81634
sS'cpp_type'
p81635
S'unsigned int'
p81636
sS'default'
p81637
S'0'
p81638
sS'name'
p81639
S'seed'
p81640
sS'required'
p81641
I00
sS'group_name'
p81642
S'Advanced'
p81643
sa(dp81644
S'description'
p81645
g3
sS'cpp_type'
p81646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81647
sS'default'
p81648
S'MultiBarrierFunctionMaterial'
p81649
sS'name'
p81650
S'type'
p81651
sS'required'
p81652
I00
sS'group_name'
p81653
Nsa(dp81654
S'description'
p81655
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81656
sS'cpp_type'
p81657
S'bool'
p81658
sS'default'
p81659
S'0'
p81660
sS'name'
p81661
S'use_displaced_mesh'
p81662
sS'required'
p81663
I00
sS'group_name'
p81664
S'Advanced'
p81665
sa(dp81666
S'description'
p81667
S'Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n'
p81668
sS'cpp_type'
p81669
S'bool'
p81670
sS'default'
p81671
S'0'
p81672
sS'name'
p81673
S'well_only'
p81674
sS'required'
p81675
I00
sS'group_name'
p81676
NsasS'name'
p81677
S'/Materials/MultiBarrierFunctionMaterial'
p81678
sa(dp81679
S'description'
p81680
S'Compute a global stress form multiple phase stresses\n'
p81681
sS'subblocks'
p81682
NsS'parameters'
p81683
(lp81684
(dp81685
S'description'
p81686
S'Base name for the computed global stress (optional)\n'
p81687
sS'cpp_type'
p81688
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81689
sS'default'
p81690
g3
sS'name'
p81691
S'base_name'
p81692
sS'required'
p81693
I00
sS'group_name'
p81694
Nsa(dp81695
S'description'
p81696
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81697
sS'cpp_type'
p81698
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81699
sS'default'
p81700
g3
sS'name'
p81701
S'block'
p81702
sS'required'
p81703
I00
sS'group_name'
p81704
Nsa(dp81705
S'description'
p81706
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81707
sS'cpp_type'
p81708
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81709
sS'default'
p81710
g3
sS'name'
p81711
S'boundary'
p81712
sS'required'
p81713
I00
sS'group_name'
p81714
Nsa(dp81715
S'description'
p81716
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81717
sS'cpp_type'
p81718
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81719
sS'default'
p81720
g3
sS'name'
p81721
S'control_tags'
p81722
sS'required'
p81723
I00
sS'group_name'
p81724
Nsa(dp81725
S'description'
p81726
S'Switching Function Materials that provide h(eta_i)\n'
p81727
sS'cpp_type'
p81728
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81729
sS'default'
p81730
g3
sS'name'
p81731
S'h'
p81732
sS'required'
p81733
I00
sS'group_name'
p81734
Nsa(dp81735
S'description'
p81736
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81737
sS'cpp_type'
p81738
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81739
sS'default'
p81740
g3
sS'name'
p81741
S'output_properties'
p81742
sS'required'
p81743
I00
sS'group_name'
p81744
S'Outputs'
p81745
sa(dp81746
S'description'
p81747
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81748
sS'cpp_type'
p81749
S'std::vector<OutputName, std::allocator<OutputName> >'
p81750
sS'default'
p81751
S'none'
p81752
sS'name'
p81753
S'outputs'
p81754
sS'required'
p81755
I00
sS'group_name'
p81756
S'Outputs'
p81757
sa(dp81758
S'description'
p81759
S'Base names for the Phase strains\n'
p81760
sS'cpp_type'
p81761
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81762
sS'default'
p81763
g3
sS'name'
p81764
S'phase_base'
p81765
sS'required'
p81766
I01
sS'group_name'
p81767
Nsa(dp81768
S'description'
p81769
S'The seed for the master random number generator\n'
p81770
sS'cpp_type'
p81771
S'unsigned int'
p81772
sS'default'
p81773
S'0'
p81774
sS'name'
p81775
S'seed'
p81776
sS'required'
p81777
I00
sS'group_name'
p81778
S'Advanced'
p81779
sa(dp81780
S'description'
p81781
g3
sS'cpp_type'
p81782
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81783
sS'default'
p81784
S'MultiPhaseStressMaterial'
p81785
sS'name'
p81786
S'type'
p81787
sS'required'
p81788
I00
sS'group_name'
p81789
Nsa(dp81790
S'description'
p81791
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81792
sS'cpp_type'
p81793
S'bool'
p81794
sS'default'
p81795
S'0'
p81796
sS'name'
p81797
S'use_displaced_mesh'
p81798
sS'required'
p81799
I00
sS'group_name'
p81800
S'Advanced'
p81801
sasS'name'
p81802
S'/Materials/MultiPhaseStressMaterial'
p81803
sa(dp81804
S'description'
p81805
g3
sS'subblocks'
p81806
NsS'parameters'
p81807
(lp81808
(dp81809
S'description'
p81810
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81811
sS'cpp_type'
p81812
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81813
sS'default'
p81814
g3
sS'name'
p81815
S'block'
p81816
sS'required'
p81817
I00
sS'group_name'
p81818
Nsa(dp81819
S'description'
p81820
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81821
sS'cpp_type'
p81822
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81823
sS'default'
p81824
g3
sS'name'
p81825
S'boundary'
p81826
sS'required'
p81827
I00
sS'group_name'
p81828
Nsa(dp81829
S'description'
p81830
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81831
sS'cpp_type'
p81832
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81833
sS'default'
p81834
g3
sS'name'
p81835
S'control_tags'
p81836
sS'required'
p81837
I00
sS'group_name'
p81838
Nsa(dp81839
S'description'
p81840
S'specifies the number of complex L variables will be solved for\n'
p81841
sS'cpp_type'
p81842
S'unsigned int'
p81843
sS'default'
p81844
g3
sS'name'
p81845
S'num_L'
p81846
sS'required'
p81847
I01
sS'group_name'
p81848
Nsa(dp81849
S'description'
p81850
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81851
sS'cpp_type'
p81852
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81853
sS'default'
p81854
g3
sS'name'
p81855
S'output_properties'
p81856
sS'required'
p81857
I00
sS'group_name'
p81858
S'Outputs'
p81859
sa(dp81860
S'description'
p81861
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81862
sS'cpp_type'
p81863
S'std::vector<OutputName, std::allocator<OutputName> >'
p81864
sS'default'
p81865
S'none'
p81866
sS'name'
p81867
S'outputs'
p81868
sS'required'
p81869
I00
sS'group_name'
p81870
S'Outputs'
p81871
sa(dp81872
S'description'
p81873
S'The seed for the master random number generator\n'
p81874
sS'cpp_type'
p81875
S'unsigned int'
p81876
sS'default'
p81877
S'0'
p81878
sS'name'
p81879
S'seed'
p81880
sS'required'
p81881
I00
sS'group_name'
p81882
S'Advanced'
p81883
sa(dp81884
S'description'
p81885
g3
sS'cpp_type'
p81886
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81887
sS'default'
p81888
S'PFCRFFMaterial'
p81889
sS'name'
p81890
S'type'
p81891
sS'required'
p81892
I00
sS'group_name'
p81893
Nsa(dp81894
S'description'
p81895
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p81896
sS'cpp_type'
p81897
S'bool'
p81898
sS'default'
p81899
S'0'
p81900
sS'name'
p81901
S'use_displaced_mesh'
p81902
sS'required'
p81903
I00
sS'group_name'
p81904
S'Advanced'
p81905
sasS'name'
p81906
S'/Materials/PFCRFFMaterial'
p81907
sa(dp81908
S'description'
p81909
g3
sS'subblocks'
p81910
NsS'parameters'
p81911
(lp81912
(dp81913
S'description'
p81914
S'The list of block ids (SubdomainID) that this object will be applied\n'
p81915
sS'cpp_type'
p81916
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p81917
sS'default'
p81918
g3
sS'name'
p81919
S'block'
p81920
sS'required'
p81921
I00
sS'group_name'
p81922
Nsa(dp81923
S'description'
p81924
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p81925
sS'cpp_type'
p81926
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p81927
sS'default'
p81928
g3
sS'name'
p81929
S'boundary'
p81930
sS'required'
p81931
I00
sS'group_name'
p81932
Nsa(dp81933
S'description'
p81934
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p81935
sS'cpp_type'
p81936
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81937
sS'default'
p81938
g3
sS'name'
p81939
S'control_tags'
p81940
sS'required'
p81941
I00
sS'group_name'
p81942
Nsa(dp81943
S'description'
p81944
S'This is the order of the polynomial used for correlation function\n'
p81945
sS'cpp_type'
p81946
S'unsigned int'
p81947
sS'default'
p81948
g3
sS'name'
p81949
S'order'
p81950
sS'required'
p81951
I01
sS'group_name'
p81952
Nsa(dp81953
S'description'
p81954
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p81955
sS'cpp_type'
p81956
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p81957
sS'default'
p81958
g3
sS'name'
p81959
S'output_properties'
p81960
sS'required'
p81961
I00
sS'group_name'
p81962
S'Outputs'
p81963
sa(dp81964
S'description'
p81965
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p81966
sS'cpp_type'
p81967
S'std::vector<OutputName, std::allocator<OutputName> >'
p81968
sS'default'
p81969
S'none'
p81970
sS'name'
p81971
S'outputs'
p81972
sS'required'
p81973
I00
sS'group_name'
p81974
S'Outputs'
p81975
sa(dp81976
S'description'
p81977
S'The seed for the master random number generator\n'
p81978
sS'cpp_type'
p81979
S'unsigned int'
p81980
sS'default'
p81981
S'0'
p81982
sS'name'
p81983
S'seed'
p81984
sS'required'
p81985
I00
sS'group_name'
p81986
S'Advanced'
p81987
sa(dp81988
S'description'
p81989
g3
sS'cpp_type'
p81990
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p81991
sS'default'
p81992
S'PFCTradMaterial'
p81993
sS'name'
p81994
S'type'
p81995
sS'required'
p81996
I00
sS'group_name'
p81997
Nsa(dp81998
S'description'
p81999
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82000
sS'cpp_type'
p82001
S'bool'
p82002
sS'default'
p82003
S'0'
p82004
sS'name'
p82005
S'use_displaced_mesh'
p82006
sS'required'
p82007
I00
sS'group_name'
p82008
S'Advanced'
p82009
sasS'name'
p82010
S'/Materials/PFCTradMaterial'
p82011
sa(dp82012
S'description'
p82013
S'Material properties used in phase-field fracture damage evolution kernel\n'
p82014
sS'subblocks'
p82015
NsS'parameters'
p82016
(lp82017
(dp82018
S'description'
p82019
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82020
sS'cpp_type'
p82021
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82022
sS'default'
p82023
g3
sS'name'
p82024
S'block'
p82025
sS'required'
p82026
I00
sS'group_name'
p82027
Nsa(dp82028
S'description'
p82029
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82030
sS'cpp_type'
p82031
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82032
sS'default'
p82033
g3
sS'name'
p82034
S'boundary'
p82035
sS'required'
p82036
I00
sS'group_name'
p82037
Nsa(dp82038
S'description'
p82039
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82040
sS'cpp_type'
p82041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82042
sS'default'
p82043
g3
sS'name'
p82044
S'control_tags'
p82045
sS'required'
p82046
I00
sS'group_name'
p82047
Nsa(dp82048
S'description'
p82049
S'Function describing energy release rate type parameter distribution\n'
p82050
sS'cpp_type'
p82051
S'FunctionName'
p82052
sS'default'
p82053
g3
sS'name'
p82054
S'function'
p82055
sS'required'
p82056
I00
sS'group_name'
p82057
Nsa(dp82058
S'description'
p82059
S'Energy release rate type parameter\n'
p82060
sS'cpp_type'
p82061
S'double'
p82062
sS'default'
p82063
S'1'
p82064
sS'name'
p82065
S'gc'
p82066
sS'required'
p82067
I00
sS'group_name'
p82068
Nsa(dp82069
S'description'
p82070
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82071
sS'cpp_type'
p82072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82073
sS'default'
p82074
g3
sS'name'
p82075
S'output_properties'
p82076
sS'required'
p82077
I00
sS'group_name'
p82078
S'Outputs'
p82079
sa(dp82080
S'description'
p82081
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82082
sS'cpp_type'
p82083
S'std::vector<OutputName, std::allocator<OutputName> >'
p82084
sS'default'
p82085
S'none'
p82086
sS'name'
p82087
S'outputs'
p82088
sS'required'
p82089
I00
sS'group_name'
p82090
S'Outputs'
p82091
sa(dp82092
S'description'
p82093
S'The seed for the master random number generator\n'
p82094
sS'cpp_type'
p82095
S'unsigned int'
p82096
sS'default'
p82097
S'0'
p82098
sS'name'
p82099
S'seed'
p82100
sS'required'
p82101
I00
sS'group_name'
p82102
S'Advanced'
p82103
sa(dp82104
S'description'
p82105
g3
sS'cpp_type'
p82106
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82107
sS'default'
p82108
S'PFFracBulkRateMaterial'
p82109
sS'name'
p82110
S'type'
p82111
sS'required'
p82112
I00
sS'group_name'
p82113
Nsa(dp82114
S'description'
p82115
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82116
sS'cpp_type'
p82117
S'bool'
p82118
sS'default'
p82119
S'0'
p82120
sS'name'
p82121
S'use_displaced_mesh'
p82122
sS'required'
p82123
I00
sS'group_name'
p82124
S'Advanced'
p82125
sasS'name'
p82126
S'/Materials/PFFracBulkRateMaterial'
p82127
sa(dp82128
S'description'
p82129
S'Phase field parameters for polynomial free energy for single component systems\n'
p82130
sS'subblocks'
p82131
NsS'parameters'
p82132
(lp82133
(dp82134
S'description'
p82135
S'Diffusivity prefactor for vacancies in m^2/s\n'
p82136
sS'cpp_type'
p82137
S'double'
p82138
sS'default'
p82139
g3
sS'name'
p82140
S'D0'
p82141
sS'required'
p82142
I01
sS'group_name'
p82143
Nsa(dp82144
S'description'
p82145
S'Formation energy in eV\n'
p82146
sS'cpp_type'
p82147
S'double'
p82148
sS'default'
p82149
g3
sS'name'
p82150
S'Ef'
p82151
sS'required'
p82152
I01
sS'group_name'
p82153
Nsa(dp82154
S'description'
p82155
S'Migration energy in eV\n'
p82156
sS'cpp_type'
p82157
S'double'
p82158
sS'default'
p82159
g3
sS'name'
p82160
S'Em'
p82161
sS'required'
p82162
I01
sS'group_name'
p82163
Nsa(dp82164
S'description'
p82165
S'Temperature variable in Kelvin\n'
p82166
sS'cpp_type'
p82167
S'std::vector<VariableName>'
p82168
sS'default'
p82169
g3
sS'name'
p82170
S'T'
p82171
sS'required'
p82172
I00
sS'group_name'
p82173
Nsa(dp82174
S'description'
p82175
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82176
sS'cpp_type'
p82177
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82178
sS'default'
p82179
g3
sS'name'
p82180
S'block'
p82181
sS'required'
p82182
I00
sS'group_name'
p82183
Nsa(dp82184
S'description'
p82185
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82186
sS'cpp_type'
p82187
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82188
sS'default'
p82189
g3
sS'name'
p82190
S'boundary'
p82191
sS'required'
p82192
I00
sS'group_name'
p82193
Nsa(dp82194
S'description'
p82195
S'Concentration\n'
p82196
sS'cpp_type'
p82197
S'std::vector<VariableName>'
p82198
sS'default'
p82199
g3
sS'name'
p82200
S'c'
p82201
sS'required'
p82202
I01
sS'group_name'
p82203
Nsa(dp82204
S'description'
p82205
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82206
sS'cpp_type'
p82207
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82208
sS'default'
p82209
g3
sS'name'
p82210
S'control_tags'
p82211
sS'required'
p82212
I00
sS'group_name'
p82213
Nsa(dp82214
S'description'
p82215
S'The interfacial width of void surface in the lengthscale of the problem\n'
p82216
sS'cpp_type'
p82217
S'double'
p82218
sS'default'
p82219
g3
sS'name'
p82220
S'int_width'
p82221
sS'required'
p82222
I01
sS'group_name'
p82223
Nsa(dp82224
S'description'
p82225
S'defines the base length scale of the problem in m\n'
p82226
sS'cpp_type'
p82227
S'double'
p82228
sS'default'
p82229
S'1e-09'
p82230
sS'name'
p82231
S'length_scale'
p82232
sS'required'
p82233
I00
sS'group_name'
p82234
Nsa(dp82235
S'description'
p82236
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82237
sS'cpp_type'
p82238
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82239
sS'default'
p82240
g3
sS'name'
p82241
S'output_properties'
p82242
sS'required'
p82243
I00
sS'group_name'
p82244
S'Outputs'
p82245
sa(dp82246
S'description'
p82247
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82248
sS'cpp_type'
p82249
S'std::vector<OutputName, std::allocator<OutputName> >'
p82250
sS'default'
p82251
S'none'
p82252
sS'name'
p82253
S'outputs'
p82254
sS'required'
p82255
I00
sS'group_name'
p82256
S'Outputs'
p82257
sa(dp82258
S'name'
p82259
S'polynomial_order'
p82260
sS'cpp_type'
p82261
S'MooseEnum'
p82262
sS'default'
p82263
g3
sS'description'
p82264
S'Order of polynomial free energy\n'
p82265
sS'required'
p82266
I01
sS'options'
p82267
S'4 6 8'
p82268
sS'group_name'
p82269
Nsa(dp82270
S'description'
p82271
S'The seed for the master random number generator\n'
p82272
sS'cpp_type'
p82273
S'unsigned int'
p82274
sS'default'
p82275
S'0'
p82276
sS'name'
p82277
S'seed'
p82278
sS'required'
p82279
I00
sS'group_name'
p82280
S'Advanced'
p82281
sa(dp82282
S'description'
p82283
S'Surface energy in J/m2\n'
p82284
sS'cpp_type'
p82285
S'double'
p82286
sS'default'
p82287
g3
sS'name'
p82288
S'surface_energy'
p82289
sS'required'
p82290
I01
sS'group_name'
p82291
Nsa(dp82292
S'description'
p82293
S'defines the base time scale of the problem\n'
p82294
sS'cpp_type'
p82295
S'double'
p82296
sS'default'
p82297
S'1e-09'
p82298
sS'name'
p82299
S'time_scale'
p82300
sS'required'
p82301
I00
sS'group_name'
p82302
Nsa(dp82303
S'description'
p82304
g3
sS'cpp_type'
p82305
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82306
sS'default'
p82307
S'PFParamsPolyFreeEnergy'
p82308
sS'name'
p82309
S'type'
p82310
sS'required'
p82311
I00
sS'group_name'
p82312
Nsa(dp82313
S'description'
p82314
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82315
sS'cpp_type'
p82316
S'bool'
p82317
sS'default'
p82318
S'0'
p82319
sS'name'
p82320
S'use_displaced_mesh'
p82321
sS'required'
p82322
I00
sS'group_name'
p82323
S'Advanced'
p82324
sasS'name'
p82325
S'/Materials/PFParamsPolyFreeEnergy'
p82326
sa(dp82327
S'description'
p82328
g3
sS'subblocks'
p82329
NsS'parameters'
p82330
(lp82331
(dp82332
S'description'
p82333
S'Convergence tolerance for combined plasticity-creep stress iteration\n'
p82334
sS'cpp_type'
p82335
S'double'
p82336
sS'default'
p82337
S'1e-05'
p82338
sS'name'
p82339
S'absolute_stress_tolerance'
p82340
sS'required'
p82341
I00
sS'group_name'
p82342
Nsa(dp82343
S'description'
p82344
S'Absolute convergence tolerance for sub-newtion iteration\n'
p82345
sS'cpp_type'
p82346
S'double'
p82347
sS'default'
p82348
S'1e-20'
p82349
sS'name'
p82350
S'absolute_tolerance'
p82351
sS'required'
p82352
I00
sS'group_name'
p82353
Nsa(dp82354
S'description'
p82355
S'Activation energy\n'
p82356
sS'cpp_type'
p82357
S'double'
p82358
sS'default'
p82359
g3
sS'name'
p82360
S'activation_energy'
p82361
sS'required'
p82362
I01
sS'group_name'
p82363
Nsa(dp82364
S'description'
p82365
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p82366
sS'cpp_type'
p82367
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p82368
sS'default'
p82369
g3
sS'name'
p82370
S'active_crack_planes'
p82371
sS'required'
p82372
I00
sS'group_name'
p82373
Nsa(dp82374
S'description'
p82375
S'Name appended to material properties to make them unique\n'
p82376
sS'cpp_type'
p82377
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82378
sS'default'
p82379
g3
sS'name'
p82380
S'appended_property_name'
p82381
sS'required'
p82382
I00
sS'group_name'
p82383
Nsa(dp82384
S'description'
p82385
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82386
sS'cpp_type'
p82387
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82388
sS'default'
p82389
g3
sS'name'
p82390
S'block'
p82391
sS'required'
p82392
I00
sS'group_name'
p82393
Nsa(dp82394
S'description'
p82395
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82396
sS'cpp_type'
p82397
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82398
sS'default'
p82399
g3
sS'name'
p82400
S'boundary'
p82401
sS'required'
p82402
I00
sS'group_name'
p82403
Nsa(dp82404
S'description'
p82405
S'The bulk modulus for the material.\n'
p82406
sS'cpp_type'
p82407
S'double'
p82408
sS'default'
p82409
g3
sS'name'
p82410
S'bulk_modulus'
p82411
sS'required'
p82412
I00
sS'group_name'
p82413
Nsa(dp82414
S'description'
p82415
S'Leading coefficent in power-law equation\n'
p82416
sS'cpp_type'
p82417
S'double'
p82418
sS'default'
p82419
g3
sS'name'
p82420
S'coefficient'
p82421
sS'required'
p82422
I01
sS'group_name'
p82423
Nsa(dp82424
S'description'
p82425
S'Whether to compute the J Integral.\n'
p82426
sS'cpp_type'
p82427
S'bool'
p82428
sS'default'
p82429
S'0'
p82430
sS'name'
p82431
S'compute_JIntegral'
p82432
sS'required'
p82433
I00
sS'group_name'
p82434
Nsa(dp82435
S'description'
p82436
S'ConstitutiveModel to use (optional)\n'
p82437
sS'cpp_type'
p82438
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82439
sS'default'
p82440
g3
sS'name'
p82441
S'constitutive_model'
p82442
sS'required'
p82443
I00
sS'group_name'
p82444
Nsa(dp82445
S'description'
p82446
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82447
sS'cpp_type'
p82448
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82449
sS'default'
p82450
g3
sS'name'
p82451
S'control_tags'
p82452
sS'required'
p82453
I00
sS'group_name'
p82454
Nsa(dp82455
S'description'
p82456
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p82457
sS'cpp_type'
p82458
S'double'
p82459
sS'default'
p82460
g3
sS'name'
p82461
S'cracking_neg_fraction'
p82462
sS'required'
p82463
I00
sS'group_name'
p82464
Nsa(dp82465
S'description'
p82466
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p82467
sS'cpp_type'
p82468
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82469
sS'default'
p82470
S'abrupt'
p82471
sS'name'
p82472
S'cracking_release'
p82473
sS'required'
p82474
I00
sS'group_name'
p82475
Nsa(dp82476
S'description'
p82477
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p82478
sS'cpp_type'
p82479
S'double'
p82480
sS'default'
p82481
S'0'
p82482
sS'name'
p82483
S'cracking_residual_stress'
p82484
sS'required'
p82485
I00
sS'group_name'
p82486
Nsa(dp82487
S'description'
p82488
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p82489
sS'cpp_type'
p82490
S'double'
p82491
sS'default'
p82492
S'0'
p82493
sS'name'
p82494
S'cracking_stress'
p82495
sS'required'
p82496
I00
sS'group_name'
p82497
Nsa(dp82498
S'description'
p82499
S'The cracking stress as a function of time and location\n'
p82500
sS'cpp_type'
p82501
S'FunctionName'
p82502
sS'default'
p82503
g3
sS'name'
p82504
S'cracking_stress_function'
p82505
sS'required'
p82506
I00
sS'group_name'
p82507
Nsa(dp82508
S'description'
p82509
S'Names of material properties this material depends on.\n'
p82510
sS'cpp_type'
p82511
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82512
sS'default'
p82513
g3
sS'name'
p82514
S'dep_matl_props'
p82515
sS'required'
p82516
I00
sS'group_name'
p82517
Nsa(dp82518
S'description'
p82519
S'The r displacement\n'
p82520
sS'cpp_type'
p82521
S'std::vector<VariableName>'
p82522
sS'default'
p82523
g3
sS'name'
p82524
S'disp_r'
p82525
sS'required'
p82526
I00
sS'group_name'
p82527
Nsa(dp82528
S'description'
p82529
S'The x displacement\n'
p82530
sS'cpp_type'
p82531
S'std::vector<VariableName>'
p82532
sS'default'
p82533
g3
sS'name'
p82534
S'disp_x'
p82535
sS'required'
p82536
I00
sS'group_name'
p82537
Nsa(dp82538
S'description'
p82539
S'The y displacement\n'
p82540
sS'cpp_type'
p82541
S'std::vector<VariableName>'
p82542
sS'default'
p82543
g3
sS'name'
p82544
S'disp_y'
p82545
sS'required'
p82546
I00
sS'group_name'
p82547
Nsa(dp82548
S'description'
p82549
S'The z displacement\n'
p82550
sS'cpp_type'
p82551
S'std::vector<VariableName>'
p82552
sS'default'
p82553
g3
sS'name'
p82554
S'disp_z'
p82555
sS'required'
p82556
I00
sS'group_name'
p82557
Nsa(dp82558
S'name'
p82559
S'formulation'
p82560
sS'cpp_type'
p82561
S'MooseEnum'
p82562
sS'default'
p82563
g3
sS'description'
p82564
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p82565
sS'required'
p82566
I00
sS'options'
p82567
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p82568
sS'group_name'
p82569
Nsa(dp82570
S'description'
p82571
S'Universal gas constant\n'
p82572
sS'cpp_type'
p82573
S'double'
p82574
sS'default'
p82575
S'8.3143'
p82576
sS'name'
p82577
S'gas_constant'
p82578
sS'required'
p82579
I00
sS'group_name'
p82580
Nsa(dp82581
S'description'
p82582
S'Hardening slope\n'
p82583
sS'cpp_type'
p82584
S'double'
p82585
sS'default'
p82586
g3
sS'name'
p82587
S'hardening_constant'
p82588
sS'required'
p82589
I01
sS'group_name'
p82590
Nsa(dp82591
S'description'
p82592
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p82593
sS'cpp_type'
p82594
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82595
sS'default'
p82596
S'RashidApprox'
p82597
sS'name'
p82598
S'increment_calculation'
p82599
sS'required'
p82600
I00
sS'group_name'
p82601
Nsa(dp82602
S'description'
p82603
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p82604
sS'cpp_type'
p82605
S'std::vector<double, std::allocator<double> >'
p82606
sS'default'
p82607
g3
sS'name'
p82608
S'initial_stress'
p82609
sS'required'
p82610
I00
sS'group_name'
p82611
Nsa(dp82612
S'description'
p82613
S"Lame's first parameter for the material.\n"
p82614
sS'cpp_type'
p82615
S'double'
p82616
sS'default'
p82617
g3
sS'name'
p82618
S'lambda'
p82619
sS'required'
p82620
I00
sS'group_name'
p82621
Nsa(dp82622
S'description'
p82623
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p82624
sS'cpp_type'
p82625
S'bool'
p82626
sS'default'
p82627
S'0'
p82628
sS'name'
p82629
S'large_strain'
p82630
sS'required'
p82631
I00
sS'group_name'
p82632
Nsa(dp82633
S'description'
p82634
S'Exponent on time in power-law equation\n'
p82635
sS'cpp_type'
p82636
S'double'
p82637
sS'default'
p82638
S'0'
p82639
sS'name'
p82640
S'm_exponent'
p82641
sS'required'
p82642
I00
sS'group_name'
p82643
Nsa(dp82644
S'description'
p82645
S'The maximum number of cracks allowed at a material point.\n'
p82646
sS'cpp_type'
p82647
S'unsigned int'
p82648
sS'default'
p82649
S'3'
p82650
sS'name'
p82651
S'max_cracks'
p82652
sS'required'
p82653
I00
sS'group_name'
p82654
Nsa(dp82655
S'description'
p82656
S'Maximum number of sub-newton iterations\n'
p82657
sS'cpp_type'
p82658
S'unsigned int'
p82659
sS'default'
p82660
S'30'
p82661
sS'name'
p82662
S'max_its'
p82663
sS'required'
p82664
I00
sS'group_name'
p82665
Nsa(dp82666
S'description'
p82667
S'Exponent on effective stress in power-law equation\n'
p82668
sS'cpp_type'
p82669
S'double'
p82670
sS'default'
p82671
g3
sS'name'
p82672
S'n_exponent'
p82673
sS'required'
p82674
I01
sS'group_name'
p82675
Nsa(dp82676
S'description'
p82677
S'The reporting postprocessor to use for the max_iterations value.\n'
p82678
sS'cpp_type'
p82679
S'PostprocessorName'
p82680
sS'default'
p82681
g3
sS'name'
p82682
S'output'
p82683
sS'required'
p82684
I00
sS'group_name'
p82685
Nsa(dp82686
S'description'
p82687
S'Set true to output sub-newton iteration information\n'
p82688
sS'cpp_type'
p82689
S'bool'
p82690
sS'default'
p82691
S'0'
p82692
sS'name'
p82693
S'output_iteration_info'
p82694
sS'required'
p82695
I00
sS'group_name'
p82696
Nsa(dp82697
S'description'
p82698
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p82699
sS'cpp_type'
p82700
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82701
sS'default'
p82702
g3
sS'name'
p82703
S'output_properties'
p82704
sS'required'
p82705
I00
sS'group_name'
p82706
S'Outputs'
p82707
sa(dp82708
S'description'
p82709
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p82710
sS'cpp_type'
p82711
S'std::vector<OutputName, std::allocator<OutputName> >'
p82712
sS'default'
p82713
S'none'
p82714
sS'name'
p82715
S'outputs'
p82716
sS'required'
p82717
I00
sS'group_name'
p82718
S'Outputs'
p82719
sa(dp82720
S'description'
p82721
S"Poisson's ratio for the material.\n"
p82722
sS'cpp_type'
p82723
S'double'
p82724
sS'default'
p82725
g3
sS'name'
p82726
S'poissons_ratio'
p82727
sS'required'
p82728
I00
sS'group_name'
p82729
Nsa(dp82730
S'description'
p82731
S"Poisson's ratio as a function of temperature.\n"
p82732
sS'cpp_type'
p82733
S'FunctionName'
p82734
sS'default'
p82735
g3
sS'name'
p82736
S'poissons_ratio_function'
p82737
sS'required'
p82738
I00
sS'group_name'
p82739
Nsa(dp82740
S'description'
p82741
S'Relative convergence tolerance for sub-newtion iteration\n'
p82742
sS'cpp_type'
p82743
S'double'
p82744
sS'default'
p82745
S'1e-05'
p82746
sS'name'
p82747
S'relative_tolerance'
p82748
sS'required'
p82749
I00
sS'group_name'
p82750
Nsa(dp82751
S'description'
p82752
S'The zz strain (scalar variable)\n'
p82753
sS'cpp_type'
p82754
S'std::vector<VariableName>'
p82755
sS'default'
p82756
g3
sS'name'
p82757
S'scalar_strain_zz'
p82758
sS'required'
p82759
I00
sS'group_name'
p82760
Nsa(dp82761
S'description'
p82762
S'The seed for the master random number generator\n'
p82763
sS'cpp_type'
p82764
S'unsigned int'
p82765
sS'default'
p82766
S'0'
p82767
sS'name'
p82768
S'seed'
p82769
sS'required'
p82770
I00
sS'group_name'
p82771
S'Advanced'
p82772
sa(dp82773
S'description'
p82774
S'The shear modulus of the material.\n'
p82775
sS'cpp_type'
p82776
S'double'
p82777
sS'default'
p82778
g3
sS'name'
p82779
S'shear_modulus'
p82780
sS'required'
p82781
I00
sS'group_name'
p82782
Nsa(dp82783
S'description'
p82784
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p82785
sS'cpp_type'
p82786
S'bool'
p82787
sS'default'
p82788
S'0'
p82789
sS'name'
p82790
S'store_stress_older'
p82791
sS'required'
p82792
I00
sS'group_name'
p82793
Nsa(dp82794
S'description'
p82795
S'The zz strain\n'
p82796
sS'cpp_type'
p82797
S'std::vector<VariableName>'
p82798
sS'default'
p82799
g3
sS'name'
p82800
S'strain_zz'
p82801
sS'required'
p82802
I00
sS'group_name'
p82803
Nsa(dp82804
S'description'
p82805
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p82806
sS'cpp_type'
p82807
S'double'
p82808
sS'default'
p82809
g3
sS'name'
p82810
S'stress_free_temperature'
p82811
sS'required'
p82812
I00
sS'group_name'
p82813
Nsa(dp82814
S'description'
p82815
S'Coupled Temperature\n'
p82816
sS'cpp_type'
p82817
S'std::vector<VariableName>'
p82818
sS'default'
p82819
g3
sS'name'
p82820
S'temp'
p82821
sS'required'
p82822
I00
sS'group_name'
p82823
Nsa(dp82824
S'description'
p82825
S'The thermal expansion coefficient.\n'
p82826
sS'cpp_type'
p82827
S'double'
p82828
sS'default'
p82829
g3
sS'name'
p82830
S'thermal_expansion'
p82831
sS'required'
p82832
I00
sS'group_name'
p82833
Nsa(dp82834
S'description'
p82835
S'Thermal expansion coefficient as a function of temperature.\n'
p82836
sS'cpp_type'
p82837
S'FunctionName'
p82838
sS'default'
p82839
g3
sS'name'
p82840
S'thermal_expansion_function'
p82841
sS'required'
p82842
I00
sS'group_name'
p82843
Nsa(dp82844
S'name'
p82845
S'thermal_expansion_function_type'
p82846
sS'cpp_type'
p82847
S'MooseEnum'
p82848
sS'default'
p82849
g3
sS'description'
p82850
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p82851
sS'required'
p82852
I00
sS'options'
p82853
S'instantaneous mean'
p82854
sS'group_name'
p82855
Nsa(dp82856
S'description'
p82857
S'Reference temperature for mean thermal expansion function.\n'
p82858
sS'cpp_type'
p82859
S'double'
p82860
sS'default'
p82861
g3
sS'name'
p82862
S'thermal_expansion_reference_temperature'
p82863
sS'required'
p82864
I00
sS'group_name'
p82865
Nsa(dp82866
S'description'
p82867
g3
sS'cpp_type'
p82868
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p82869
sS'default'
p82870
S'PLC_LSH'
p82871
sS'name'
p82872
S'type'
p82873
sS'required'
p82874
I00
sS'group_name'
p82875
Nsa(dp82876
S'description'
p82877
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p82878
sS'cpp_type'
p82879
S'bool'
p82880
sS'default'
p82881
S'0'
p82882
sS'name'
p82883
S'use_displaced_mesh'
p82884
sS'required'
p82885
I00
sS'group_name'
p82886
S'Advanced'
p82887
sa(dp82888
S'description'
p82889
S'The point at which plastic strain begins accumulating\n'
p82890
sS'cpp_type'
p82891
S'double'
p82892
sS'default'
p82893
g3
sS'name'
p82894
S'yield_stress'
p82895
sS'required'
p82896
I01
sS'group_name'
p82897
Nsa(dp82898
S'description'
p82899
S"Young's modulus of the material.\n"
p82900
sS'cpp_type'
p82901
S'double'
p82902
sS'default'
p82903
g3
sS'name'
p82904
S'youngs_modulus'
p82905
sS'required'
p82906
I00
sS'group_name'
p82907
Nsa(dp82908
S'description'
p82909
S"Young's modulus as a function of temperature.\n"
p82910
sS'cpp_type'
p82911
S'FunctionName'
p82912
sS'default'
p82913
g3
sS'name'
p82914
S'youngs_modulus_function'
p82915
sS'required'
p82916
I00
sS'group_name'
p82917
NsasS'name'
p82918
S'/Materials/PLC_LSH'
p82919
sa(dp82920
S'description'
p82921
S'Parsed Function Material.\n'
p82922
sS'subblocks'
p82923
NsS'parameters'
p82924
(lp82925
(dp82926
S'description'
p82927
S'Arguments of F() - use vector coupling\n'
p82928
sS'cpp_type'
p82929
S'std::vector<VariableName>'
p82930
sS'default'
p82931
g3
sS'name'
p82932
S'args'
p82933
sS'required'
p82934
I00
sS'group_name'
p82935
Nsa(dp82936
S'description'
p82937
S'The list of block ids (SubdomainID) that this object will be applied\n'
p82938
sS'cpp_type'
p82939
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p82940
sS'default'
p82941
g3
sS'name'
p82942
S'block'
p82943
sS'required'
p82944
I00
sS'group_name'
p82945
Nsa(dp82946
S'description'
p82947
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p82948
sS'cpp_type'
p82949
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p82950
sS'default'
p82951
g3
sS'name'
p82952
S'boundary'
p82953
sS'required'
p82954
I00
sS'group_name'
p82955
Nsa(dp82956
S'description'
p82957
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p82958
sS'cpp_type'
p82959
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82960
sS'default'
p82961
g3
sS'name'
p82962
S'constant_expressions'
p82963
sS'required'
p82964
I00
sS'group_name'
p82965
Nsa(dp82966
S'description'
p82967
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p82968
sS'cpp_type'
p82969
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82970
sS'default'
p82971
g3
sS'name'
p82972
S'constant_names'
p82973
sS'required'
p82974
I00
sS'group_name'
p82975
Nsa(dp82976
S'description'
p82977
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p82978
sS'cpp_type'
p82979
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p82980
sS'default'
p82981
g3
sS'name'
p82982
S'control_tags'
p82983
sS'required'
p82984
I00
sS'group_name'
p82985
Nsa(dp82986
S'description'
p82987
S'Disable the function parser algebraic optimizer\n'
p82988
sS'cpp_type'
p82989
S'bool'
p82990
sS'default'
p82991
S'0'
p82992
sS'name'
p82993
S'disable_fpoptimizer'
p82994
sS'required'
p82995
I00
sS'group_name'
p82996
Nsa(dp82997
S'description'
p82998
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p82999
sS'cpp_type'
p83000
S'bool'
p83001
sS'default'
p83002
S'1'
p83003
sS'name'
p83004
S'enable_jit'
p83005
sS'required'
p83006
I00
sS'group_name'
p83007
Nsa(dp83008
S'description'
p83009
S'Base name of the free energy function (used to name the material properties)\n'
p83010
sS'cpp_type'
p83011
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83012
sS'default'
p83013
S'F'
p83014
sS'name'
p83015
S'f_name'
p83016
sS'required'
p83017
I00
sS'group_name'
p83018
Nsa(dp83019
S'description'
p83020
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p83021
sS'cpp_type'
p83022
S'bool'
p83023
sS'default'
p83024
S'0'
p83025
sS'name'
p83026
S'fail_on_evalerror'
p83027
sS'required'
p83028
I00
sS'group_name'
p83029
Nsa(dp83030
S'description'
p83031
S'FParser function expression for the phase free energy\n'
p83032
sS'cpp_type'
p83033
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83034
sS'default'
p83035
g3
sS'name'
p83036
S'function'
p83037
sS'required'
p83038
I01
sS'group_name'
p83039
Nsa(dp83040
S'description'
p83041
S'Vector of material properties used in the parsed function\n'
p83042
sS'cpp_type'
p83043
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83044
sS'default'
p83045
g3
sS'name'
p83046
S'material_property_names'
p83047
sS'required'
p83048
I00
sS'group_name'
p83049
Nsa(dp83050
S'description'
p83051
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83052
sS'cpp_type'
p83053
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83054
sS'default'
p83055
g3
sS'name'
p83056
S'output_properties'
p83057
sS'required'
p83058
I00
sS'group_name'
p83059
S'Outputs'
p83060
sa(dp83061
S'description'
p83062
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83063
sS'cpp_type'
p83064
S'std::vector<OutputName, std::allocator<OutputName> >'
p83065
sS'default'
p83066
S'none'
p83067
sS'name'
p83068
S'outputs'
p83069
sS'required'
p83070
I00
sS'group_name'
p83071
S'Outputs'
p83072
sa(dp83073
S'description'
p83074
S'The seed for the master random number generator\n'
p83075
sS'cpp_type'
p83076
S'unsigned int'
p83077
sS'default'
p83078
S'0'
p83079
sS'name'
p83080
S'seed'
p83081
sS'required'
p83082
I00
sS'group_name'
p83083
S'Advanced'
p83084
sa(dp83085
S'description'
p83086
S'Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n'
p83087
sS'cpp_type'
p83088
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83089
sS'default'
p83090
g3
sS'name'
p83091
S'tol_names'
p83092
sS'required'
p83093
I00
sS'group_name'
p83094
Nsa(dp83095
S'description'
p83096
S'Vector of tolerance values for the variables in tol_names\n'
p83097
sS'cpp_type'
p83098
S'std::vector<double, std::allocator<double> >'
p83099
sS'default'
p83100
g3
sS'name'
p83101
S'tol_values'
p83102
sS'required'
p83103
I00
sS'group_name'
p83104
Nsa(dp83105
S'description'
p83106
g3
sS'cpp_type'
p83107
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83108
sS'default'
p83109
S'ParsedMaterial'
p83110
sS'name'
p83111
S'type'
p83112
sS'required'
p83113
I00
sS'group_name'
p83114
Nsa(dp83115
S'description'
p83116
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83117
sS'cpp_type'
p83118
S'bool'
p83119
sS'default'
p83120
S'0'
p83121
sS'name'
p83122
S'use_displaced_mesh'
p83123
sS'required'
p83124
I00
sS'group_name'
p83125
S'Advanced'
p83126
sasS'name'
p83127
S'/Materials/ParsedMaterial'
p83128
sa(dp83129
S'description'
p83130
S'Polynomial free energy for single component systems\n'
p83131
sS'subblocks'
p83132
NsS'parameters'
p83133
(lp83134
(dp83135
S'description'
p83136
S'Name of the material property storing the barrier height\n'
p83137
sS'cpp_type'
p83138
S'MaterialPropertyName'
p83139
sS'default'
p83140
S'barr_height'
p83141
sS'name'
p83142
S'W_name'
p83143
sS'required'
p83144
I00
sS'group_name'
p83145
Nsa(dp83146
S'description'
p83147
S'The list of block ids (SubdomainID) that this object will be applied\n'
p83148
sS'cpp_type'
p83149
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p83150
sS'default'
p83151
g3
sS'name'
p83152
S'block'
p83153
sS'required'
p83154
I00
sS'group_name'
p83155
Nsa(dp83156
S'description'
p83157
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p83158
sS'cpp_type'
p83159
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p83160
sS'default'
p83161
g3
sS'name'
p83162
S'boundary'
p83163
sS'required'
p83164
I00
sS'group_name'
p83165
Nsa(dp83166
S'description'
p83167
S'Concentration\n'
p83168
sS'cpp_type'
p83169
S'std::vector<VariableName>'
p83170
sS'default'
p83171
g3
sS'name'
p83172
S'c'
p83173
sS'required'
p83174
I01
sS'group_name'
p83175
Nsa(dp83176
S'description'
p83177
S'Name of material property storing the equilibrium concentration\n'
p83178
sS'cpp_type'
p83179
S'MaterialPropertyName'
p83180
sS'default'
p83181
S'c_eq'
p83182
sS'name'
p83183
S'c_eq_name'
p83184
sS'required'
p83185
I00
sS'group_name'
p83186
Nsa(dp83187
S'description'
p83188
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83189
sS'cpp_type'
p83190
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83191
sS'default'
p83192
g3
sS'name'
p83193
S'control_tags'
p83194
sS'required'
p83195
I00
sS'group_name'
p83196
Nsa(dp83197
S'description'
p83198
S'Maximum order of derivatives taken\n'
p83199
sS'cpp_type'
p83200
S'unsigned int'
p83201
sS'default'
p83202
S'3'
p83203
sS'name'
p83204
S'derivative_order'
p83205
sS'required'
p83206
I00
sS'group_name'
p83207
Nsa(dp83208
S'description'
p83209
S'Disable the function parser algebraic optimizer\n'
p83210
sS'cpp_type'
p83211
S'bool'
p83212
sS'default'
p83213
S'0'
p83214
sS'name'
p83215
S'disable_fpoptimizer'
p83216
sS'required'
p83217
I00
sS'group_name'
p83218
Nsa(dp83219
S'description'
p83220
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p83221
sS'cpp_type'
p83222
S'bool'
p83223
sS'default'
p83224
S'1'
p83225
sS'name'
p83226
S'enable_jit'
p83227
sS'required'
p83228
I00
sS'group_name'
p83229
Nsa(dp83230
S'description'
p83231
S'Base name of the free energy function (used to name the material properties)\n'
p83232
sS'cpp_type'
p83233
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83234
sS'default'
p83235
S'F'
p83236
sS'name'
p83237
S'f_name'
p83238
sS'required'
p83239
I00
sS'group_name'
p83240
Nsa(dp83241
S'description'
p83242
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p83243
sS'cpp_type'
p83244
S'bool'
p83245
sS'default'
p83246
S'0'
p83247
sS'name'
p83248
S'fail_on_evalerror'
p83249
sS'required'
p83250
I00
sS'group_name'
p83251
Nsa(dp83252
S'description'
p83253
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83254
sS'cpp_type'
p83255
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83256
sS'default'
p83257
g3
sS'name'
p83258
S'output_properties'
p83259
sS'required'
p83260
I00
sS'group_name'
p83261
S'Outputs'
p83262
sa(dp83263
S'description'
p83264
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83265
sS'cpp_type'
p83266
S'std::vector<OutputName, std::allocator<OutputName> >'
p83267
sS'default'
p83268
S'none'
p83269
sS'name'
p83270
S'outputs'
p83271
sS'required'
p83272
I00
sS'group_name'
p83273
S'Outputs'
p83274
sa(dp83275
S'name'
p83276
S'polynomial_order'
p83277
sS'cpp_type'
p83278
S'MooseEnum'
p83279
sS'default'
p83280
g3
sS'description'
p83281
S'Order of polynomial free energy\n'
p83282
sS'required'
p83283
I01
sS'options'
p83284
S'4 6 8'
p83285
sS'group_name'
p83286
Nsa(dp83287
S'description'
p83288
S'The seed for the master random number generator\n'
p83289
sS'cpp_type'
p83290
S'unsigned int'
p83291
sS'default'
p83292
S'0'
p83293
sS'name'
p83294
S'seed'
p83295
sS'required'
p83296
I00
sS'group_name'
p83297
S'Advanced'
p83298
sa(dp83299
S'description'
p83300
S'Flag to indicate if third derivatives are needed\n'
p83301
sS'cpp_type'
p83302
S'bool'
p83303
sS'default'
p83304
g3
sS'name'
p83305
S'third_derivatives'
p83306
sS'required'
p83307
I00
sS'group_name'
p83308
Nsa(dp83309
S'description'
p83310
g3
sS'cpp_type'
p83311
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83312
sS'default'
p83313
S'PolynomialFreeEnergy'
p83314
sS'name'
p83315
S'type'
p83316
sS'required'
p83317
I00
sS'group_name'
p83318
Nsa(dp83319
S'description'
p83320
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83321
sS'cpp_type'
p83322
S'bool'
p83323
sS'default'
p83324
S'0'
p83325
sS'name'
p83326
S'use_displaced_mesh'
p83327
sS'required'
p83328
I00
sS'group_name'
p83329
S'Advanced'
p83330
sasS'name'
p83331
S'/Materials/PolynomialFreeEnergy'
p83332
sa(dp83333
S'description'
p83334
S'This Material is designed to calculate and store all the quantities needed for the fluid-flow part of poromechanics, assuming a fully-saturated, single-phase fluid with constant bulk modulus\n'
p83335
sS'subblocks'
p83336
NsS'parameters'
p83337
(lp83338
(dp83339
S'description'
p83340
S'The Biot coefficient.  Eg, 0.9\n'
p83341
sS'cpp_type'
p83342
S'double'
p83343
sS'default'
p83344
g3
sS'name'
p83345
S'biot_coefficient'
p83346
sS'required'
p83347
I01
sS'group_name'
p83348
Nsa(dp83349
S'description'
p83350
S'The list of block ids (SubdomainID) that this object will be applied\n'
p83351
sS'cpp_type'
p83352
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p83353
sS'default'
p83354
g3
sS'name'
p83355
S'block'
p83356
sS'required'
p83357
I00
sS'group_name'
p83358
Nsa(dp83359
S'description'
p83360
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p83361
sS'cpp_type'
p83362
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p83363
sS'default'
p83364
g3
sS'name'
p83365
S'boundary'
p83366
sS'required'
p83367
I00
sS'group_name'
p83368
Nsa(dp83369
S'description'
p83370
S'Set the porosity equal to porosity0 always\n'
p83371
sS'cpp_type'
p83372
S'bool'
p83373
sS'default'
p83374
S'0'
p83375
sS'name'
p83376
S'constant_porosity'
p83377
sS'required'
p83378
I00
sS'group_name'
p83379
Nsa(dp83380
S'description'
p83381
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83382
sS'cpp_type'
p83383
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83384
sS'default'
p83385
g3
sS'name'
p83386
S'control_tags'
p83387
sS'required'
p83388
I00
sS'group_name'
p83389
Nsa(dp83390
S'description'
p83391
S'The displacements appropriate for the simulation geometry and coordinate system\n'
p83392
sS'cpp_type'
p83393
S'std::vector<VariableName>'
p83394
sS'default'
p83395
g3
sS'name'
p83396
S'displacements'
p83397
sS'required'
p83398
I01
sS'group_name'
p83399
Nsa(dp83400
S'description'
p83401
S'The fluid bulk compliance (the reciprocal of the fluid bulk modulus)\n'
p83402
sS'cpp_type'
p83403
S'double'
p83404
sS'default'
p83405
g3
sS'name'
p83406
S'fluid_bulk_compliance'
p83407
sS'required'
p83408
I01
sS'group_name'
p83409
Nsa(dp83410
S'description'
p83411
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83412
sS'cpp_type'
p83413
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83414
sS'default'
p83415
g3
sS'name'
p83416
S'output_properties'
p83417
sS'required'
p83418
I00
sS'group_name'
p83419
S'Outputs'
p83420
sa(dp83421
S'description'
p83422
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83423
sS'cpp_type'
p83424
S'std::vector<OutputName, std::allocator<OutputName> >'
p83425
sS'default'
p83426
S'none'
p83427
sS'name'
p83428
S'outputs'
p83429
sS'required'
p83430
I00
sS'group_name'
p83431
S'Outputs'
p83432
sa(dp83433
S'description'
p83434
S'The porepressure\n'
p83435
sS'cpp_type'
p83436
S'std::vector<VariableName>'
p83437
sS'default'
p83438
g3
sS'name'
p83439
S'porepressure'
p83440
sS'required'
p83441
I01
sS'group_name'
p83442
Nsa(dp83443
S'description'
p83444
S'The porosity of the material when porepressure and volumetric strain are zero.  Eg, 0.1\n'
p83445
sS'cpp_type'
p83446
S'double'
p83447
sS'default'
p83448
g3
sS'name'
p83449
S'porosity0'
p83450
sS'required'
p83451
I01
sS'group_name'
p83452
Nsa(dp83453
S'description'
p83454
S'The seed for the master random number generator\n'
p83455
sS'cpp_type'
p83456
S'unsigned int'
p83457
sS'default'
p83458
S'0'
p83459
sS'name'
p83460
S'seed'
p83461
sS'required'
p83462
I00
sS'group_name'
p83463
S'Advanced'
p83464
sa(dp83465
S'description'
p83466
S'The solid bulk compliance (the reciprocal of the solid bulk modulus)\n'
p83467
sS'cpp_type'
p83468
S'double'
p83469
sS'default'
p83470
g3
sS'name'
p83471
S'solid_bulk_compliance'
p83472
sS'required'
p83473
I01
sS'group_name'
p83474
Nsa(dp83475
S'description'
p83476
g3
sS'cpp_type'
p83477
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83478
sS'default'
p83479
S'PoroFullSatMaterial'
p83480
sS'name'
p83481
S'type'
p83482
sS'required'
p83483
I00
sS'group_name'
p83484
Nsa(dp83485
S'description'
p83486
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p83487
sS'cpp_type'
p83488
S'bool'
p83489
sS'default'
p83490
S'0'
p83491
sS'name'
p83492
S'use_displaced_mesh'
p83493
sS'required'
p83494
I00
sS'group_name'
p83495
S'Advanced'
p83496
sasS'name'
p83497
S'/Materials/PoroFullSatMaterial'
p83498
sa(dp83499
S'description'
p83500
g3
sS'subblocks'
p83501
NsS'parameters'
p83502
(lp83503
(dp83504
S'description'
p83505
S'Absolute convergence tolerance for sub-newtion iteration\n'
p83506
sS'cpp_type'
p83507
S'double'
p83508
sS'default'
p83509
S'1e-20'
p83510
sS'name'
p83511
S'absolute_tolerance'
p83512
sS'required'
p83513
I00
sS'group_name'
p83514
Nsa(dp83515
S'description'
p83516
S'Activation energy\n'
p83517
sS'cpp_type'
p83518
S'double'
p83519
sS'default'
p83520
g3
sS'name'
p83521
S'activation_energy'
p83522
sS'required'
p83523
I01
sS'group_name'
p83524
Nsa(dp83525
S'description'
p83526
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p83527
sS'cpp_type'
p83528
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p83529
sS'default'
p83530
g3
sS'name'
p83531
S'active_crack_planes'
p83532
sS'required'
p83533
I00
sS'group_name'
p83534
Nsa(dp83535
S'description'
p83536
S'Name appended to material properties to make them unique\n'
p83537
sS'cpp_type'
p83538
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83539
sS'default'
p83540
g3
sS'name'
p83541
S'appended_property_name'
p83542
sS'required'
p83543
I00
sS'group_name'
p83544
Nsa(dp83545
S'description'
p83546
S'The list of block ids (SubdomainID) that this object will be applied\n'
p83547
sS'cpp_type'
p83548
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p83549
sS'default'
p83550
g3
sS'name'
p83551
S'block'
p83552
sS'required'
p83553
I00
sS'group_name'
p83554
Nsa(dp83555
S'description'
p83556
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p83557
sS'cpp_type'
p83558
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p83559
sS'default'
p83560
g3
sS'name'
p83561
S'boundary'
p83562
sS'required'
p83563
I00
sS'group_name'
p83564
Nsa(dp83565
S'description'
p83566
S'The bulk modulus for the material.\n'
p83567
sS'cpp_type'
p83568
S'double'
p83569
sS'default'
p83570
g3
sS'name'
p83571
S'bulk_modulus'
p83572
sS'required'
p83573
I00
sS'group_name'
p83574
Nsa(dp83575
S'description'
p83576
S'Leading coefficent in power-law equation\n'
p83577
sS'cpp_type'
p83578
S'double'
p83579
sS'default'
p83580
g3
sS'name'
p83581
S'coefficient'
p83582
sS'required'
p83583
I01
sS'group_name'
p83584
Nsa(dp83585
S'description'
p83586
S'Whether to compute the J Integral.\n'
p83587
sS'cpp_type'
p83588
S'bool'
p83589
sS'default'
p83590
S'0'
p83591
sS'name'
p83592
S'compute_JIntegral'
p83593
sS'required'
p83594
I00
sS'group_name'
p83595
Nsa(dp83596
S'description'
p83597
S'ConstitutiveModel to use (optional)\n'
p83598
sS'cpp_type'
p83599
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83600
sS'default'
p83601
g3
sS'name'
p83602
S'constitutive_model'
p83603
sS'required'
p83604
I00
sS'group_name'
p83605
Nsa(dp83606
S'description'
p83607
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p83608
sS'cpp_type'
p83609
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83610
sS'default'
p83611
g3
sS'name'
p83612
S'control_tags'
p83613
sS'required'
p83614
I00
sS'group_name'
p83615
Nsa(dp83616
S'description'
p83617
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p83618
sS'cpp_type'
p83619
S'double'
p83620
sS'default'
p83621
g3
sS'name'
p83622
S'cracking_neg_fraction'
p83623
sS'required'
p83624
I00
sS'group_name'
p83625
Nsa(dp83626
S'description'
p83627
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p83628
sS'cpp_type'
p83629
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83630
sS'default'
p83631
S'abrupt'
p83632
sS'name'
p83633
S'cracking_release'
p83634
sS'required'
p83635
I00
sS'group_name'
p83636
Nsa(dp83637
S'description'
p83638
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p83639
sS'cpp_type'
p83640
S'double'
p83641
sS'default'
p83642
S'0'
p83643
sS'name'
p83644
S'cracking_residual_stress'
p83645
sS'required'
p83646
I00
sS'group_name'
p83647
Nsa(dp83648
S'description'
p83649
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p83650
sS'cpp_type'
p83651
S'double'
p83652
sS'default'
p83653
S'0'
p83654
sS'name'
p83655
S'cracking_stress'
p83656
sS'required'
p83657
I00
sS'group_name'
p83658
Nsa(dp83659
S'description'
p83660
S'The cracking stress as a function of time and location\n'
p83661
sS'cpp_type'
p83662
S'FunctionName'
p83663
sS'default'
p83664
g3
sS'name'
p83665
S'cracking_stress_function'
p83666
sS'required'
p83667
I00
sS'group_name'
p83668
Nsa(dp83669
S'description'
p83670
S'Names of material properties this material depends on.\n'
p83671
sS'cpp_type'
p83672
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83673
sS'default'
p83674
g3
sS'name'
p83675
S'dep_matl_props'
p83676
sS'required'
p83677
I00
sS'group_name'
p83678
Nsa(dp83679
S'description'
p83680
S'The r displacement\n'
p83681
sS'cpp_type'
p83682
S'std::vector<VariableName>'
p83683
sS'default'
p83684
g3
sS'name'
p83685
S'disp_r'
p83686
sS'required'
p83687
I00
sS'group_name'
p83688
Nsa(dp83689
S'description'
p83690
S'The x displacement\n'
p83691
sS'cpp_type'
p83692
S'std::vector<VariableName>'
p83693
sS'default'
p83694
g3
sS'name'
p83695
S'disp_x'
p83696
sS'required'
p83697
I00
sS'group_name'
p83698
Nsa(dp83699
S'description'
p83700
S'The y displacement\n'
p83701
sS'cpp_type'
p83702
S'std::vector<VariableName>'
p83703
sS'default'
p83704
g3
sS'name'
p83705
S'disp_y'
p83706
sS'required'
p83707
I00
sS'group_name'
p83708
Nsa(dp83709
S'description'
p83710
S'The z displacement\n'
p83711
sS'cpp_type'
p83712
S'std::vector<VariableName>'
p83713
sS'default'
p83714
g3
sS'name'
p83715
S'disp_z'
p83716
sS'required'
p83717
I00
sS'group_name'
p83718
Nsa(dp83719
S'name'
p83720
S'formulation'
p83721
sS'cpp_type'
p83722
S'MooseEnum'
p83723
sS'default'
p83724
g3
sS'description'
p83725
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p83726
sS'required'
p83727
I00
sS'options'
p83728
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p83729
sS'group_name'
p83730
Nsa(dp83731
S'description'
p83732
S'Universal gas constant\n'
p83733
sS'cpp_type'
p83734
S'double'
p83735
sS'default'
p83736
S'8.3143'
p83737
sS'name'
p83738
S'gas_constant'
p83739
sS'required'
p83740
I00
sS'group_name'
p83741
Nsa(dp83742
S'description'
p83743
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p83744
sS'cpp_type'
p83745
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p83746
sS'default'
p83747
S'RashidApprox'
p83748
sS'name'
p83749
S'increment_calculation'
p83750
sS'required'
p83751
I00
sS'group_name'
p83752
Nsa(dp83753
S'description'
p83754
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p83755
sS'cpp_type'
p83756
S'std::vector<double, std::allocator<double> >'
p83757
sS'default'
p83758
g3
sS'name'
p83759
S'initial_stress'
p83760
sS'required'
p83761
I00
sS'group_name'
p83762
Nsa(dp83763
S'description'
p83764
S"Lame's first parameter for the material.\n"
p83765
sS'cpp_type'
p83766
S'double'
p83767
sS'default'
p83768
g3
sS'name'
p83769
S'lambda'
p83770
sS'required'
p83771
I00
sS'group_name'
p83772
Nsa(dp83773
S'description'
p83774
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p83775
sS'cpp_type'
p83776
S'bool'
p83777
sS'default'
p83778
S'0'
p83779
sS'name'
p83780
S'large_strain'
p83781
sS'required'
p83782
I00
sS'group_name'
p83783
Nsa(dp83784
S'description'
p83785
S'Exponent on time in power-law equation\n'
p83786
sS'cpp_type'
p83787
S'double'
p83788
sS'default'
p83789
S'0'
p83790
sS'name'
p83791
S'm_exponent'
p83792
sS'required'
p83793
I00
sS'group_name'
p83794
Nsa(dp83795
S'description'
p83796
S'The maximum number of cracks allowed at a material point.\n'
p83797
sS'cpp_type'
p83798
S'unsigned int'
p83799
sS'default'
p83800
S'3'
p83801
sS'name'
p83802
S'max_cracks'
p83803
sS'required'
p83804
I00
sS'group_name'
p83805
Nsa(dp83806
S'description'
p83807
S'Maximum number of sub-newton iterations\n'
p83808
sS'cpp_type'
p83809
S'unsigned int'
p83810
sS'default'
p83811
S'10'
p83812
sS'name'
p83813
S'max_its'
p83814
sS'required'
p83815
I00
sS'group_name'
p83816
Nsa(dp83817
S'description'
p83818
S'Exponent on effective stress in power-law equation\n'
p83819
sS'cpp_type'
p83820
S'double'
p83821
sS'default'
p83822
g3
sS'name'
p83823
S'n_exponent'
p83824
sS'required'
p83825
I01
sS'group_name'
p83826
Nsa(dp83827
S'description'
p83828
S'Set true to output sub-newton iteration information\n'
p83829
sS'cpp_type'
p83830
S'bool'
p83831
sS'default'
p83832
S'0'
p83833
sS'name'
p83834
S'output_iteration_info'
p83835
sS'required'
p83836
I00
sS'group_name'
p83837
Nsa(dp83838
S'description'
p83839
S'Set true to output sub-newton iteration information when a step fails\n'
p83840
sS'cpp_type'
p83841
S'bool'
p83842
sS'default'
p83843
S'0'
p83844
sS'name'
p83845
S'output_iteration_info_on_error'
p83846
sS'required'
p83847
I00
sS'group_name'
p83848
Nsa(dp83849
S'description'
p83850
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p83851
sS'cpp_type'
p83852
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p83853
sS'default'
p83854
g3
sS'name'
p83855
S'output_properties'
p83856
sS'required'
p83857
I00
sS'group_name'
p83858
S'Outputs'
p83859
sa(dp83860
S'description'
p83861
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p83862
sS'cpp_type'
p83863
S'std::vector<OutputName, std::allocator<OutputName> >'
p83864
sS'default'
p83865
S'none'
p83866
sS'name'
p83867
S'outputs'
p83868
sS'required'
p83869
I00
sS'group_name'
p83870
S'Outputs'
p83871
sa(dp83872
S'description'
p83873
S"Poisson's ratio for the material.\n"
p83874
sS'cpp_type'
p83875
S'double'
p83876
sS'default'
p83877
g3
sS'name'
p83878
S'poissons_ratio'
p83879
sS'required'
p83880
I00
sS'group_name'
p83881
Nsa(dp83882
S'description'
p83883
S"Poisson's ratio as a function of temperature.\n"
p83884
sS'cpp_type'
p83885
S'FunctionName'
p83886
sS'default'
p83887
g3
sS'name'
p83888
S'poissons_ratio_function'
p83889
sS'required'
p83890
I00
sS'group_name'
p83891
Nsa(dp83892
S'description'
p83893
S'Relative convergence tolerance for sub-newtion iteration\n'
p83894
sS'cpp_type'
p83895
S'double'
p83896
sS'default'
p83897
S'1e-05'
p83898
sS'name'
p83899
S'relative_tolerance'
p83900
sS'required'
p83901
I00
sS'group_name'
p83902
Nsa(dp83903
S'description'
p83904
S'The zz strain (scalar variable)\n'
p83905
sS'cpp_type'
p83906
S'std::vector<VariableName>'
p83907
sS'default'
p83908
g3
sS'name'
p83909
S'scalar_strain_zz'
p83910
sS'required'
p83911
I00
sS'group_name'
p83912
Nsa(dp83913
S'description'
p83914
S'The seed for the master random number generator\n'
p83915
sS'cpp_type'
p83916
S'unsigned int'
p83917
sS'default'
p83918
S'0'
p83919
sS'name'
p83920
S'seed'
p83921
sS'required'
p83922
I00
sS'group_name'
p83923
S'Advanced'
p83924
sa(dp83925
S'description'
p83926
S'The shear modulus of the material.\n'
p83927
sS'cpp_type'
p83928
S'double'
p83929
sS'default'
p83930
g3
sS'name'
p83931
S'shear_modulus'
p83932
sS'required'
p83933
I00
sS'group_name'
p83934
Nsa(dp83935
S'description'
p83936
S'Start time (if not zero)\n'
p83937
sS'cpp_type'
p83938
S'double'
p83939
sS'default'
p83940
S'0'
p83941
sS'name'
p83942
S'start_time'
p83943
sS'required'
p83944
I00
sS'group_name'
p83945
Nsa(dp83946
S'description'
p83947
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p83948
sS'cpp_type'
p83949
S'bool'
p83950
sS'default'
p83951
S'0'
p83952
sS'name'
p83953
S'store_stress_older'
p83954
sS'required'
p83955
I00
sS'group_name'
p83956
Nsa(dp83957
S'description'
p83958
S'The zz strain\n'
p83959
sS'cpp_type'
p83960
S'std::vector<VariableName>'
p83961
sS'default'
p83962
g3
sS'name'
p83963
S'strain_zz'
p83964
sS'required'
p83965
I00
sS'group_name'
p83966
Nsa(dp83967
S'description'
p83968
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p83969
sS'cpp_type'
p83970
S'double'
p83971
sS'default'
p83972
g3
sS'name'
p83973
S'stress_free_temperature'
p83974
sS'required'
p83975
I00
sS'group_name'
p83976
Nsa(dp83977
S'description'
p83978
S'Coupled Temperature\n'
p83979
sS'cpp_type'
p83980
S'std::vector<VariableName>'
p83981
sS'default'
p83982
g3
sS'name'
p83983
S'temp'
p83984
sS'required'
p83985
I00
sS'group_name'
p83986
Nsa(dp83987
S'description'
p83988
S'The thermal expansion coefficient.\n'
p83989
sS'cpp_type'
p83990
S'double'
p83991
sS'default'
p83992
g3
sS'name'
p83993
S'thermal_expansion'
p83994
sS'required'
p83995
I00
sS'group_name'
p83996
Nsa(dp83997
S'description'
p83998
S'Thermal expansion coefficient as a function of temperature.\n'
p83999
sS'cpp_type'
p84000
S'FunctionName'
p84001
sS'default'
p84002
g3
sS'name'
p84003
S'thermal_expansion_function'
p84004
sS'required'
p84005
I00
sS'group_name'
p84006
Nsa(dp84007
S'name'
p84008
S'thermal_expansion_function_type'
p84009
sS'cpp_type'
p84010
S'MooseEnum'
p84011
sS'default'
p84012
g3
sS'description'
p84013
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p84014
sS'required'
p84015
I00
sS'options'
p84016
S'instantaneous mean'
p84017
sS'group_name'
p84018
Nsa(dp84019
S'description'
p84020
S'Reference temperature for mean thermal expansion function.\n'
p84021
sS'cpp_type'
p84022
S'double'
p84023
sS'default'
p84024
g3
sS'name'
p84025
S'thermal_expansion_reference_temperature'
p84026
sS'required'
p84027
I00
sS'group_name'
p84028
Nsa(dp84029
S'description'
p84030
g3
sS'cpp_type'
p84031
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84032
sS'default'
p84033
S'PowerLawCreep'
p84034
sS'name'
p84035
S'type'
p84036
sS'required'
p84037
I00
sS'group_name'
p84038
Nsa(dp84039
S'description'
p84040
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p84041
sS'cpp_type'
p84042
S'bool'
p84043
sS'default'
p84044
S'0'
p84045
sS'name'
p84046
S'use_displaced_mesh'
p84047
sS'required'
p84048
I00
sS'group_name'
p84049
S'Advanced'
p84050
sa(dp84051
S'description'
p84052
S"Young's modulus of the material.\n"
p84053
sS'cpp_type'
p84054
S'double'
p84055
sS'default'
p84056
g3
sS'name'
p84057
S'youngs_modulus'
p84058
sS'required'
p84059
I00
sS'group_name'
p84060
Nsa(dp84061
S'description'
p84062
S"Young's modulus as a function of temperature.\n"
p84063
sS'cpp_type'
p84064
S'FunctionName'
p84065
sS'default'
p84066
g3
sS'name'
p84067
S'youngs_modulus_function'
p84068
sS'required'
p84069
I00
sS'group_name'
p84070
NsasS'name'
p84071
S'/Materials/PowerLawCreep'
p84072
sa(dp84073
S'description'
p84074
g3
sS'subblocks'
p84075
NsS'parameters'
p84076
(lp84077
(dp84078
S'description'
p84079
S'Absolute convergence tolerance for sub-newtion iteration\n'
p84080
sS'cpp_type'
p84081
S'double'
p84082
sS'default'
p84083
S'1e-20'
p84084
sS'name'
p84085
S'absolute_tolerance'
p84086
sS'required'
p84087
I00
sS'group_name'
p84088
Nsa(dp84089
S'description'
p84090
S'Activation energy\n'
p84091
sS'cpp_type'
p84092
S'double'
p84093
sS'default'
p84094
g3
sS'name'
p84095
S'activation_energy'
p84096
sS'required'
p84097
I01
sS'group_name'
p84098
Nsa(dp84099
S'description'
p84100
S'The list of block ids (SubdomainID) that this object will be applied\n'
p84101
sS'cpp_type'
p84102
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p84103
sS'default'
p84104
g3
sS'name'
p84105
S'block'
p84106
sS'required'
p84107
I00
sS'group_name'
p84108
Nsa(dp84109
S'description'
p84110
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p84111
sS'cpp_type'
p84112
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p84113
sS'default'
p84114
g3
sS'name'
p84115
S'boundary'
p84116
sS'required'
p84117
I00
sS'group_name'
p84118
Nsa(dp84119
S'description'
p84120
S'Leading coefficent in power-law equation\n'
p84121
sS'cpp_type'
p84122
S'double'
p84123
sS'default'
p84124
g3
sS'name'
p84125
S'coefficient'
p84126
sS'required'
p84127
I01
sS'group_name'
p84128
Nsa(dp84129
S'description'
p84130
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84131
sS'cpp_type'
p84132
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84133
sS'default'
p84134
g3
sS'name'
p84135
S'control_tags'
p84136
sS'required'
p84137
I00
sS'group_name'
p84138
Nsa(dp84139
S'description'
p84140
S'Universal gas constant\n'
p84141
sS'cpp_type'
p84142
S'double'
p84143
sS'default'
p84144
S'8.3143'
p84145
sS'name'
p84146
S'gas_constant'
p84147
sS'required'
p84148
I00
sS'group_name'
p84149
Nsa(dp84150
S'description'
p84151
S'Exponent on time in power-law equation\n'
p84152
sS'cpp_type'
p84153
S'double'
p84154
sS'default'
p84155
S'0'
p84156
sS'name'
p84157
S'm_exponent'
p84158
sS'required'
p84159
I00
sS'group_name'
p84160
Nsa(dp84161
S'description'
p84162
S'Maximum number of sub-newton iterations\n'
p84163
sS'cpp_type'
p84164
S'unsigned int'
p84165
sS'default'
p84166
S'30'
p84167
sS'name'
p84168
S'max_its'
p84169
sS'required'
p84170
I00
sS'group_name'
p84171
Nsa(dp84172
S'description'
p84173
S'Exponent on effective stress in power-law equation\n'
p84174
sS'cpp_type'
p84175
S'double'
p84176
sS'default'
p84177
g3
sS'name'
p84178
S'n_exponent'
p84179
sS'required'
p84180
I01
sS'group_name'
p84181
Nsa(dp84182
S'description'
p84183
S'Set true to output sub-newton iteration information\n'
p84184
sS'cpp_type'
p84185
S'bool'
p84186
sS'default'
p84187
S'0'
p84188
sS'name'
p84189
S'output_iteration_info'
p84190
sS'required'
p84191
I00
sS'group_name'
p84192
Nsa(dp84193
S'description'
p84194
S'Set true to output sub-newton iteration information when a step fails\n'
p84195
sS'cpp_type'
p84196
S'bool'
p84197
sS'default'
p84198
S'0'
p84199
sS'name'
p84200
S'output_iteration_info_on_error'
p84201
sS'required'
p84202
I00
sS'group_name'
p84203
Nsa(dp84204
S'description'
p84205
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p84206
sS'cpp_type'
p84207
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84208
sS'default'
p84209
g3
sS'name'
p84210
S'output_properties'
p84211
sS'required'
p84212
I00
sS'group_name'
p84213
S'Outputs'
p84214
sa(dp84215
S'description'
p84216
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p84217
sS'cpp_type'
p84218
S'std::vector<OutputName, std::allocator<OutputName> >'
p84219
sS'default'
p84220
S'none'
p84221
sS'name'
p84222
S'outputs'
p84223
sS'required'
p84224
I00
sS'group_name'
p84225
S'Outputs'
p84226
sa(dp84227
S'description'
p84228
S'Relative convergence tolerance for sub-newtion iteration\n'
p84229
sS'cpp_type'
p84230
S'double'
p84231
sS'default'
p84232
S'1e-05'
p84233
sS'name'
p84234
S'relative_tolerance'
p84235
sS'required'
p84236
I00
sS'group_name'
p84237
Nsa(dp84238
S'description'
p84239
S'The seed for the master random number generator\n'
p84240
sS'cpp_type'
p84241
S'unsigned int'
p84242
sS'default'
p84243
S'0'
p84244
sS'name'
p84245
S'seed'
p84246
sS'required'
p84247
I00
sS'group_name'
p84248
S'Advanced'
p84249
sa(dp84250
S'description'
p84251
S'Start time (if not zero)\n'
p84252
sS'cpp_type'
p84253
S'double'
p84254
sS'default'
p84255
S'0'
p84256
sS'name'
p84257
S'start_time'
p84258
sS'required'
p84259
I00
sS'group_name'
p84260
Nsa(dp84261
S'description'
p84262
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p84263
sS'cpp_type'
p84264
S'double'
p84265
sS'default'
p84266
g3
sS'name'
p84267
S'stress_free_temperature'
p84268
sS'required'
p84269
I00
sS'group_name'
p84270
Nsa(dp84271
S'description'
p84272
S'Coupled Temperature\n'
p84273
sS'cpp_type'
p84274
S'std::vector<VariableName>'
p84275
sS'default'
p84276
g3
sS'name'
p84277
S'temp'
p84278
sS'required'
p84279
I00
sS'group_name'
p84280
Nsa(dp84281
S'description'
p84282
S'The thermal expansion coefficient.\n'
p84283
sS'cpp_type'
p84284
S'double'
p84285
sS'default'
p84286
g3
sS'name'
p84287
S'thermal_expansion'
p84288
sS'required'
p84289
I00
sS'group_name'
p84290
Nsa(dp84291
S'description'
p84292
S'Thermal expansion coefficient as a function of temperature.\n'
p84293
sS'cpp_type'
p84294
S'FunctionName'
p84295
sS'default'
p84296
g3
sS'name'
p84297
S'thermal_expansion_function'
p84298
sS'required'
p84299
I00
sS'group_name'
p84300
Nsa(dp84301
S'name'
p84302
S'thermal_expansion_function_type'
p84303
sS'cpp_type'
p84304
S'MooseEnum'
p84305
sS'default'
p84306
g3
sS'description'
p84307
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p84308
sS'required'
p84309
I00
sS'options'
p84310
S'instantaneous mean'
p84311
sS'group_name'
p84312
Nsa(dp84313
S'description'
p84314
S'Reference temperature for mean thermal expansion function.\n'
p84315
sS'cpp_type'
p84316
S'double'
p84317
sS'default'
p84318
g3
sS'name'
p84319
S'thermal_expansion_reference_temperature'
p84320
sS'required'
p84321
I00
sS'group_name'
p84322
Nsa(dp84323
S'description'
p84324
g3
sS'cpp_type'
p84325
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84326
sS'default'
p84327
S'PowerLawCreepModel'
p84328
sS'name'
p84329
S'type'
p84330
sS'required'
p84331
I00
sS'group_name'
p84332
Nsa(dp84333
S'description'
p84334
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p84335
sS'cpp_type'
p84336
S'bool'
p84337
sS'default'
p84338
S'0'
p84339
sS'name'
p84340
S'use_displaced_mesh'
p84341
sS'required'
p84342
I00
sS'group_name'
p84343
S'Advanced'
p84344
sasS'name'
p84345
S'/Materials/PowerLawCreepModel'
p84346
sa(dp84347
S'description'
p84348
g3
sS'subblocks'
p84349
NsS'parameters'
p84350
(lp84351
(dp84352
S'description'
p84353
S'Absolute convergence tolerance for sub-newtion iteration\n'
p84354
sS'cpp_type'
p84355
S'double'
p84356
sS'default'
p84357
S'1e-20'
p84358
sS'name'
p84359
S'absolute_tolerance'
p84360
sS'required'
p84361
I00
sS'group_name'
p84362
Nsa(dp84363
S'description'
p84364
S'The list of block ids (SubdomainID) that this object will be applied\n'
p84365
sS'cpp_type'
p84366
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p84367
sS'default'
p84368
g3
sS'name'
p84369
S'block'
p84370
sS'required'
p84371
I00
sS'group_name'
p84372
Nsa(dp84373
S'description'
p84374
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p84375
sS'cpp_type'
p84376
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p84377
sS'default'
p84378
g3
sS'name'
p84379
S'boundary'
p84380
sS'required'
p84381
I00
sS'group_name'
p84382
Nsa(dp84383
S'description'
p84384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84385
sS'cpp_type'
p84386
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84387
sS'default'
p84388
g3
sS'name'
p84389
S'control_tags'
p84390
sS'required'
p84391
I00
sS'group_name'
p84392
Nsa(dp84393
S'description'
p84394
S'Power law exponent\n'
p84395
sS'cpp_type'
p84396
S'double'
p84397
sS'default'
p84398
S'1'
p84399
sS'name'
p84400
S'exponent'
p84401
sS'required'
p84402
I00
sS'group_name'
p84403
Nsa(dp84404
S'description'
p84405
S'Flag to specify scaling parameter to generate random stress\n'
p84406
sS'cpp_type'
p84407
S'bool'
p84408
sS'default'
p84409
S'0'
p84410
sS'name'
p84411
S'input_random_scaling_var'
p84412
sS'required'
p84413
I00
sS'group_name'
p84414
Nsa(dp84415
S'description'
p84416
S'Allowable relative increment size for state variables\n'
p84417
sS'cpp_type'
p84418
S'double'
p84419
sS'default'
p84420
S'0.1'
p84421
sS'name'
p84422
S'intvar_incr_tol'
p84423
sS'required'
p84424
I00
sS'group_name'
p84425
Nsa(dp84426
S'description'
p84427
S'Maximum number of sub-newton iterations\n'
p84428
sS'cpp_type'
p84429
S'unsigned int'
p84430
sS'default'
p84431
S'30'
p84432
sS'name'
p84433
S'max_its'
p84434
sS'required'
p84435
I00
sS'group_name'
p84436
Nsa(dp84437
S'description'
p84438
S'Constitutive update iteration\n'
p84439
sS'cpp_type'
p84440
S'unsigned int'
p84441
sS'default'
p84442
S'20'
p84443
sS'name'
p84444
S'maxiter'
p84445
sS'required'
p84446
I00
sS'group_name'
p84447
Nsa(dp84448
S'description'
p84449
S'Number of state variables\n'
p84450
sS'cpp_type'
p84451
S'unsigned int'
p84452
sS'default'
p84453
g3
sS'name'
p84454
S'nstate'
p84455
sS'required'
p84456
I01
sS'group_name'
p84457
Nsa(dp84458
S'description'
p84459
S'Set true to output sub-newton iteration information\n'
p84460
sS'cpp_type'
p84461
S'bool'
p84462
sS'default'
p84463
S'0'
p84464
sS'name'
p84465
S'output_iteration_info'
p84466
sS'required'
p84467
I00
sS'group_name'
p84468
Nsa(dp84469
S'description'
p84470
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p84471
sS'cpp_type'
p84472
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84473
sS'default'
p84474
g3
sS'name'
p84475
S'output_properties'
p84476
sS'required'
p84477
I00
sS'group_name'
p84478
S'Outputs'
p84479
sa(dp84480
S'description'
p84481
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p84482
sS'cpp_type'
p84483
S'std::vector<OutputName, std::allocator<OutputName> >'
p84484
sS'default'
p84485
S'none'
p84486
sS'name'
p84487
S'outputs'
p84488
sS'required'
p84489
I00
sS'group_name'
p84490
S'Outputs'
p84491
sa(dp84492
S'description'
p84493
S"Scaling value: Too large a value can cause non-positive definiteness - use 0.1 of young's modulus\n"
p84494
sS'cpp_type'
p84495
S'double'
p84496
sS'default'
p84497
S'1e+09'
p84498
sS'name'
p84499
S'random_scaling_var'
p84500
sS'required'
p84501
I00
sS'group_name'
p84502
Nsa(dp84503
S'description'
p84504
S'Reference damage rate\n'
p84505
sS'cpp_type'
p84506
S'double'
p84507
sS'default'
p84508
g3
sS'name'
p84509
S'ref_damage_rate'
p84510
sS'required'
p84511
I01
sS'group_name'
p84512
Nsa(dp84513
S'description'
p84514
S'Relative convergence tolerance for sub-newtion iteration\n'
p84515
sS'cpp_type'
p84516
S'double'
p84517
sS'default'
p84518
S'1e-05'
p84519
sS'name'
p84520
S'relative_tolerance'
p84521
sS'required'
p84522
I00
sS'group_name'
p84523
Nsa(dp84524
S'description'
p84525
S'The seed for the master random number generator\n'
p84526
sS'cpp_type'
p84527
S'unsigned int'
p84528
sS'default'
p84529
S'0'
p84530
sS'name'
p84531
S'seed'
p84532
sS'required'
p84533
I00
sS'group_name'
p84534
S'Advanced'
p84535
sa(dp84536
S'description'
p84537
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p84538
sS'cpp_type'
p84539
S'double'
p84540
sS'default'
p84541
g3
sS'name'
p84542
S'stress_free_temperature'
p84543
sS'required'
p84544
I00
sS'group_name'
p84545
Nsa(dp84546
S'description'
p84547
S'Coupled Temperature\n'
p84548
sS'cpp_type'
p84549
S'std::vector<VariableName>'
p84550
sS'default'
p84551
g3
sS'name'
p84552
S'temp'
p84553
sS'required'
p84554
I00
sS'group_name'
p84555
Nsa(dp84556
S'description'
p84557
S'The thermal expansion coefficient.\n'
p84558
sS'cpp_type'
p84559
S'double'
p84560
sS'default'
p84561
g3
sS'name'
p84562
S'thermal_expansion'
p84563
sS'required'
p84564
I00
sS'group_name'
p84565
Nsa(dp84566
S'description'
p84567
S'Thermal expansion coefficient as a function of temperature.\n'
p84568
sS'cpp_type'
p84569
S'FunctionName'
p84570
sS'default'
p84571
g3
sS'name'
p84572
S'thermal_expansion_function'
p84573
sS'required'
p84574
I00
sS'group_name'
p84575
Nsa(dp84576
S'name'
p84577
S'thermal_expansion_function_type'
p84578
sS'cpp_type'
p84579
S'MooseEnum'
p84580
sS'default'
p84581
g3
sS'description'
p84582
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p84583
sS'required'
p84584
I00
sS'options'
p84585
S'instantaneous mean'
p84586
sS'group_name'
p84587
Nsa(dp84588
S'description'
p84589
S'Reference temperature for mean thermal expansion function.\n'
p84590
sS'cpp_type'
p84591
S'double'
p84592
sS'default'
p84593
g3
sS'name'
p84594
S'thermal_expansion_reference_temperature'
p84595
sS'required'
p84596
I00
sS'group_name'
p84597
Nsa(dp84598
S'description'
p84599
S'Constitutive update tolerance\n'
p84600
sS'cpp_type'
p84601
S'double'
p84602
sS'default'
p84603
S'1e-05'
p84604
sS'name'
p84605
S'tol'
p84606
sS'required'
p84607
I00
sS'group_name'
p84608
Nsa(dp84609
S'description'
p84610
g3
sS'cpp_type'
p84611
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84612
sS'default'
p84613
S'RateDepSmearCrackModel'
p84614
sS'name'
p84615
S'type'
p84616
sS'required'
p84617
I00
sS'group_name'
p84618
Nsa(dp84619
S'description'
p84620
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p84621
sS'cpp_type'
p84622
S'bool'
p84623
sS'default'
p84624
S'0'
p84625
sS'name'
p84626
S'use_displaced_mesh'
p84627
sS'required'
p84628
I00
sS'group_name'
p84629
S'Advanced'
p84630
sa(dp84631
S'description'
p84632
S'Tolerance for zero\n'
p84633
sS'cpp_type'
p84634
S'double'
p84635
sS'default'
p84636
S'1e-08'
p84637
sS'name'
p84638
S'zero_tol'
p84639
sS'required'
p84640
I00
sS'group_name'
p84641
NsasS'name'
p84642
S'/Materials/RateDepSmearCrackModel'
p84643
sa(dp84644
S'description'
p84645
g3
sS'subblocks'
p84646
NsS'parameters'
p84647
(lp84648
(dp84649
S'description'
p84650
S'Absolute convergence tolerance for sub-newtion iteration\n'
p84651
sS'cpp_type'
p84652
S'double'
p84653
sS'default'
p84654
S'1e-20'
p84655
sS'name'
p84656
S'absolute_tolerance'
p84657
sS'required'
p84658
I00
sS'group_name'
p84659
Nsa(dp84660
S'description'
p84661
S'The list of block ids (SubdomainID) that this object will be applied\n'
p84662
sS'cpp_type'
p84663
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p84664
sS'default'
p84665
g3
sS'name'
p84666
S'block'
p84667
sS'required'
p84668
I00
sS'group_name'
p84669
Nsa(dp84670
S'description'
p84671
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p84672
sS'cpp_type'
p84673
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p84674
sS'default'
p84675
g3
sS'name'
p84676
S'boundary'
p84677
sS'required'
p84678
I00
sS'group_name'
p84679
Nsa(dp84680
S'description'
p84681
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p84682
sS'cpp_type'
p84683
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84684
sS'default'
p84685
g3
sS'name'
p84686
S'control_tags'
p84687
sS'required'
p84688
I00
sS'group_name'
p84689
Nsa(dp84690
S'description'
p84691
S'Critical Energy\n'
p84692
sS'cpp_type'
p84693
S'double'
p84694
sS'default'
p84695
g3
sS'name'
p84696
S'critical_energy'
p84697
sS'required'
p84698
I01
sS'group_name'
p84699
Nsa(dp84700
S'description'
p84701
S'Power law exponent\n'
p84702
sS'cpp_type'
p84703
S'double'
p84704
sS'default'
p84705
S'1'
p84706
sS'name'
p84707
S'exponent'
p84708
sS'required'
p84709
I00
sS'group_name'
p84710
Nsa(dp84711
S'description'
p84712
S'Flag to specify scaling parameter to generate random stress\n'
p84713
sS'cpp_type'
p84714
S'bool'
p84715
sS'default'
p84716
S'0'
p84717
sS'name'
p84718
S'input_random_scaling_var'
p84719
sS'required'
p84720
I00
sS'group_name'
p84721
Nsa(dp84722
S'description'
p84723
S'Allowable relative increment size for state variables\n'
p84724
sS'cpp_type'
p84725
S'double'
p84726
sS'default'
p84727
S'0.1'
p84728
sS'name'
p84729
S'intvar_incr_tol'
p84730
sS'required'
p84731
I00
sS'group_name'
p84732
Nsa(dp84733
S'description'
p84734
S'Post failure stiffness\n'
p84735
sS'cpp_type'
p84736
S'double'
p84737
sS'default'
p84738
S'1e-06'
p84739
sS'name'
p84740
S'k_fail'
p84741
sS'required'
p84742
I00
sS'group_name'
p84743
Nsa(dp84744
S'description'
p84745
S'Maximum number of sub-newton iterations\n'
p84746
sS'cpp_type'
p84747
S'unsigned int'
p84748
sS'default'
p84749
S'30'
p84750
sS'name'
p84751
S'max_its'
p84752
sS'required'
p84753
I00
sS'group_name'
p84754
Nsa(dp84755
S'description'
p84756
S'Constitutive update iteration\n'
p84757
sS'cpp_type'
p84758
S'unsigned int'
p84759
sS'default'
p84760
S'20'
p84761
sS'name'
p84762
S'maxiter'
p84763
sS'required'
p84764
I00
sS'group_name'
p84765
Nsa(dp84766
S'description'
p84767
S'Number of state variables\n'
p84768
sS'cpp_type'
p84769
S'unsigned int'
p84770
sS'default'
p84771
g3
sS'name'
p84772
S'nstate'
p84773
sS'required'
p84774
I01
sS'group_name'
p84775
Nsa(dp84776
S'description'
p84777
S'Set true to output sub-newton iteration information\n'
p84778
sS'cpp_type'
p84779
S'bool'
p84780
sS'default'
p84781
S'0'
p84782
sS'name'
p84783
S'output_iteration_info'
p84784
sS'required'
p84785
I00
sS'group_name'
p84786
Nsa(dp84787
S'description'
p84788
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p84789
sS'cpp_type'
p84790
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p84791
sS'default'
p84792
g3
sS'name'
p84793
S'output_properties'
p84794
sS'required'
p84795
I00
sS'group_name'
p84796
S'Outputs'
p84797
sa(dp84798
S'description'
p84799
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p84800
sS'cpp_type'
p84801
S'std::vector<OutputName, std::allocator<OutputName> >'
p84802
sS'default'
p84803
S'none'
p84804
sS'name'
p84805
S'outputs'
p84806
sS'required'
p84807
I00
sS'group_name'
p84808
S'Outputs'
p84809
sa(dp84810
S'description'
p84811
S"Scaling value: Too large a value can cause non-positive definiteness - use 0.1 of young's modulus\n"
p84812
sS'cpp_type'
p84813
S'double'
p84814
sS'default'
p84815
S'1e+09'
p84816
sS'name'
p84817
S'random_scaling_var'
p84818
sS'required'
p84819
I00
sS'group_name'
p84820
Nsa(dp84821
S'description'
p84822
S'Reference damage rate\n'
p84823
sS'cpp_type'
p84824
S'double'
p84825
sS'default'
p84826
g3
sS'name'
p84827
S'ref_damage_rate'
p84828
sS'required'
p84829
I01
sS'group_name'
p84830
Nsa(dp84831
S'description'
p84832
S'Relative convergence tolerance for sub-newtion iteration\n'
p84833
sS'cpp_type'
p84834
S'double'
p84835
sS'default'
p84836
S'1e-05'
p84837
sS'name'
p84838
S'relative_tolerance'
p84839
sS'required'
p84840
I00
sS'group_name'
p84841
Nsa(dp84842
S'description'
p84843
S'The seed for the master random number generator\n'
p84844
sS'cpp_type'
p84845
S'unsigned int'
p84846
sS'default'
p84847
S'0'
p84848
sS'name'
p84849
S'seed'
p84850
sS'required'
p84851
I00
sS'group_name'
p84852
S'Advanced'
p84853
sa(dp84854
S'description'
p84855
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p84856
sS'cpp_type'
p84857
S'double'
p84858
sS'default'
p84859
g3
sS'name'
p84860
S'stress_free_temperature'
p84861
sS'required'
p84862
I00
sS'group_name'
p84863
Nsa(dp84864
S'description'
p84865
S'Coupled Temperature\n'
p84866
sS'cpp_type'
p84867
S'std::vector<VariableName>'
p84868
sS'default'
p84869
g3
sS'name'
p84870
S'temp'
p84871
sS'required'
p84872
I00
sS'group_name'
p84873
Nsa(dp84874
S'description'
p84875
S'The thermal expansion coefficient.\n'
p84876
sS'cpp_type'
p84877
S'double'
p84878
sS'default'
p84879
g3
sS'name'
p84880
S'thermal_expansion'
p84881
sS'required'
p84882
I00
sS'group_name'
p84883
Nsa(dp84884
S'description'
p84885
S'Thermal expansion coefficient as a function of temperature.\n'
p84886
sS'cpp_type'
p84887
S'FunctionName'
p84888
sS'default'
p84889
g3
sS'name'
p84890
S'thermal_expansion_function'
p84891
sS'required'
p84892
I00
sS'group_name'
p84893
Nsa(dp84894
S'name'
p84895
S'thermal_expansion_function_type'
p84896
sS'cpp_type'
p84897
S'MooseEnum'
p84898
sS'default'
p84899
g3
sS'description'
p84900
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p84901
sS'required'
p84902
I00
sS'options'
p84903
S'instantaneous mean'
p84904
sS'group_name'
p84905
Nsa(dp84906
S'description'
p84907
S'Reference temperature for mean thermal expansion function.\n'
p84908
sS'cpp_type'
p84909
S'double'
p84910
sS'default'
p84911
g3
sS'name'
p84912
S'thermal_expansion_reference_temperature'
p84913
sS'required'
p84914
I00
sS'group_name'
p84915
Nsa(dp84916
S'description'
p84917
S'Constitutive update tolerance\n'
p84918
sS'cpp_type'
p84919
S'double'
p84920
sS'default'
p84921
S'1e-05'
p84922
sS'name'
p84923
S'tol'
p84924
sS'required'
p84925
I00
sS'group_name'
p84926
Nsa(dp84927
S'description'
p84928
g3
sS'cpp_type'
p84929
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p84930
sS'default'
p84931
S'RateDepSmearIsoCrackModel'
p84932
sS'name'
p84933
S'type'
p84934
sS'required'
p84935
I00
sS'group_name'
p84936
Nsa(dp84937
S'description'
p84938
S'Upper limit of damage beyond which constitutive check is not performed\n'
p84939
sS'cpp_type'
p84940
S'double'
p84941
sS'default'
p84942
S'5'
p84943
sS'name'
p84944
S'upper_limit_damage'
p84945
sS'required'
p84946
I00
sS'group_name'
p84947
Nsa(dp84948
S'description'
p84949
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p84950
sS'cpp_type'
p84951
S'bool'
p84952
sS'default'
p84953
S'0'
p84954
sS'name'
p84955
S'use_displaced_mesh'
p84956
sS'required'
p84957
I00
sS'group_name'
p84958
S'Advanced'
p84959
sa(dp84960
S'description'
p84961
S'Tolerance for zero\n'
p84962
sS'cpp_type'
p84963
S'double'
p84964
sS'default'
p84965
S'1e-08'
p84966
sS'name'
p84967
S'zero_tol'
p84968
sS'required'
p84969
I00
sS'group_name'
p84970
NsasS'name'
p84971
S'/Materials/RateDepSmearIsoCrackModel'
p84972
sa(dp84973
S'description'
p84974
g3
sS'subblocks'
p84975
NsS'parameters'
p84976
(lp84977
(dp84978
S'description'
p84979
S'List of names of user objects that define the SUPG\n'
p84980
sS'cpp_type'
p84981
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p84982
sS'default'
p84983
g3
sS'name'
p84984
S'SUPG_UO'
p84985
sS'required'
p84986
I01
sS'group_name'
p84987
Nsa(dp84988
S'description'
p84989
S'The list of block ids (SubdomainID) that this object will be applied\n'
p84990
sS'cpp_type'
p84991
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p84992
sS'default'
p84993
g3
sS'name'
p84994
S'block'
p84995
sS'required'
p84996
I00
sS'group_name'
p84997
Nsa(dp84998
S'description'
p84999
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p85000
sS'cpp_type'
p85001
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85002
sS'default'
p85003
g3
sS'name'
p85004
S'boundary'
p85005
sS'required'
p85006
I00
sS'group_name'
p85007
Nsa(dp85008
S'description'
p85009
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85010
sS'cpp_type'
p85011
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85012
sS'default'
p85013
g3
sS'name'
p85014
S'control_tags'
p85015
sS'required'
p85016
I00
sS'group_name'
p85017
Nsa(dp85018
S'description'
p85019
S'List of names of user objects that define the fluid density\n'
p85020
sS'cpp_type'
p85021
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p85022
sS'default'
p85023
g3
sS'name'
p85024
S'density_UO'
p85025
sS'required'
p85026
I01
sS'group_name'
p85027
Nsa(dp85028
S'description'
p85029
S'Gravitational acceleration (m/s^2) as a vector pointing downwards.  Eg (0,0,-10)\n'
p85030
sS'cpp_type'
p85031
S'libMesh::VectorValue<double>'
p85032
sS'default'
p85033
g3
sS'name'
p85034
S'gravity'
p85035
sS'required'
p85036
I01
sS'group_name'
p85037
Nsa(dp85038
S'description'
p85039
S'If you are using second-order Lagrange shape functions you need to set this to false.\n'
p85040
sS'cpp_type'
p85041
S'bool'
p85042
sS'default'
p85043
S'1'
p85044
sS'name'
p85045
S'linear_shape_fcns'
p85046
sS'required'
p85047
I00
sS'group_name'
p85048
Nsa(dp85049
S'description'
p85050
S'The permeability tensor (m^2).\n'
p85051
sS'cpp_type'
p85052
S'libMesh::TensorValue<double>'
p85053
sS'default'
p85054
g3
sS'name'
p85055
S'mat_permeability'
p85056
sS'required'
p85057
I01
sS'group_name'
p85058
Nsa(dp85059
S'description'
p85060
S'The porosity of the material.  Should be between 0 and 1.  Eg, 0.1\n'
p85061
sS'cpp_type'
p85062
S'double'
p85063
sS'default'
p85064
g3
sS'name'
p85065
S'mat_porosity'
p85066
sS'required'
p85067
I01
sS'group_name'
p85068
Nsa(dp85069
S'description'
p85070
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p85071
sS'cpp_type'
p85072
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85073
sS'default'
p85074
g3
sS'name'
p85075
S'output_properties'
p85076
sS'required'
p85077
I00
sS'group_name'
p85078
S'Outputs'
p85079
sa(dp85080
S'description'
p85081
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p85082
sS'cpp_type'
p85083
S'std::vector<OutputName, std::allocator<OutputName> >'
p85084
sS'default'
p85085
S'none'
p85086
sS'name'
p85087
S'outputs'
p85088
sS'required'
p85089
I00
sS'group_name'
p85090
S'Outputs'
p85091
sa(dp85092
S'description'
p85093
S'A list of auxillary variable describing permeability changes.  There must be 9 of these, corresponding to the xx, xy, xz, yx, yy, yz, zx, zy, zz components respectively.  Permeability = mat_permeability*10^(perm_change).\n'
p85094
sS'cpp_type'
p85095
S'std::vector<VariableName>'
p85096
sS'default'
p85097
g3
sS'name'
p85098
S'perm_change'
p85099
sS'required'
p85100
I00
sS'group_name'
p85101
Nsa(dp85102
S'description'
p85103
S'An auxillary variable describing porosity changes.  Porosity = mat_porosity + por_change.  If this is not provided, zero is used.\n'
p85104
sS'cpp_type'
p85105
S'std::vector<VariableName>'
p85106
sS'default'
p85107
g3
sS'name'
p85108
S'por_change'
p85109
sS'required'
p85110
I00
sS'group_name'
p85111
Nsa(dp85112
S'description'
p85113
S'List of names of user objects that define relative permeability\n'
p85114
sS'cpp_type'
p85115
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p85116
sS'default'
p85117
g3
sS'name'
p85118
S'relperm_UO'
p85119
sS'required'
p85120
I01
sS'group_name'
p85121
Nsa(dp85122
S'description'
p85123
S'The UserObject that holds the list of Richards variable names.\n'
p85124
sS'cpp_type'
p85125
S'UserObjectName'
p85126
sS'default'
p85127
g3
sS'name'
p85128
S'richardsVarNames_UO'
p85129
sS'required'
p85130
I01
sS'group_name'
p85131
Nsa(dp85132
S'description'
p85133
S'List of names of user objects that define saturation as a function of effective saturation\n'
p85134
sS'cpp_type'
p85135
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p85136
sS'default'
p85137
g3
sS'name'
p85138
S'sat_UO'
p85139
sS'required'
p85140
I01
sS'group_name'
p85141
Nsa(dp85142
S'description'
p85143
S'The seed for the master random number generator\n'
p85144
sS'cpp_type'
p85145
S'unsigned int'
p85146
sS'default'
p85147
S'0'
p85148
sS'name'
p85149
S'seed'
p85150
sS'required'
p85151
I00
sS'group_name'
p85152
S'Advanced'
p85153
sa(dp85154
S'description'
p85155
S'List of name of user objects that define effective saturation as a function of pressure list\n'
p85156
sS'cpp_type'
p85157
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p85158
sS'default'
p85159
g3
sS'name'
p85160
S'seff_UO'
p85161
sS'required'
p85162
I01
sS'group_name'
p85163
Nsa(dp85164
S'description'
p85165
g3
sS'cpp_type'
p85166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85167
sS'default'
p85168
S'RichardsMaterial'
p85169
sS'name'
p85170
S'type'
p85171
sS'required'
p85172
I00
sS'group_name'
p85173
Nsa(dp85174
S'description'
p85175
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p85176
sS'cpp_type'
p85177
S'bool'
p85178
sS'default'
p85179
S'0'
p85180
sS'name'
p85181
S'use_displaced_mesh'
p85182
sS'required'
p85183
I00
sS'group_name'
p85184
S'Advanced'
p85185
sa(dp85186
S'description'
p85187
S'List of viscosity of fluids (Pa.s).  Typical value for water is=1E-3\n'
p85188
sS'cpp_type'
p85189
S'std::vector<double, std::allocator<double> >'
p85190
sS'default'
p85191
g3
sS'name'
p85192
S'viscosity'
p85193
sS'required'
p85194
I01
sS'group_name'
p85195
NsasS'name'
p85196
S'/Materials/RichardsMaterial'
p85197
sa(dp85198
S'description'
p85199
S'Compute a concentration dependent isotropic Eigenstrain\n'
p85200
sS'subblocks'
p85201
NsS'parameters'
p85202
(lp85203
(dp85204
S'description'
p85205
S'Stiffness tensor for material\n'
p85206
sS'cpp_type'
p85207
S'std::vector<double, std::allocator<double> >'
p85208
sS'default'
p85209
g3
sS'name'
p85210
S'C_ijkl'
p85211
sS'required'
p85212
I01
sS'group_name'
p85213
Nsa(dp85214
S'description'
p85215
S'Temperature in Kelvin\n'
p85216
sS'cpp_type'
p85217
S'std::vector<VariableName>'
p85218
sS'default'
p85219
S'300'
p85220
sS'name'
p85221
S'T'
p85222
sS'required'
p85223
I00
sS'group_name'
p85224
Nsa(dp85225
S'description'
p85226
S'Reference temperature for thermal expansion in K\n'
p85227
sS'cpp_type'
p85228
S'double'
p85229
sS'default'
p85230
S'300'
p85231
sS'name'
p85232
S'T0'
p85233
sS'required'
p85234
I00
sS'group_name'
p85235
Nsa(dp85236
S'description'
p85237
S'Applied strain: e11, e22, e33, e23, e13, e12\n'
p85238
sS'cpp_type'
p85239
S'std::vector<double, std::allocator<double> >'
p85240
sS'default'
p85241
g3
sS'name'
p85242
S'applied_strain_vector'
p85243
sS'required'
p85244
I00
sS'group_name'
p85245
Nsa(dp85246
S'description'
p85247
S'Material property base name\n'
p85248
sS'cpp_type'
p85249
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85250
sS'default'
p85251
g3
sS'name'
p85252
S'base_name'
p85253
sS'required'
p85254
I00
sS'group_name'
p85255
Nsa(dp85256
S'description'
p85257
S'The list of block ids (SubdomainID) that this object will be applied\n'
p85258
sS'cpp_type'
p85259
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p85260
sS'default'
p85261
g3
sS'name'
p85262
S'block'
p85263
sS'required'
p85264
I00
sS'group_name'
p85265
Nsa(dp85266
S'description'
p85267
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p85268
sS'cpp_type'
p85269
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85270
sS'default'
p85271
g3
sS'name'
p85272
S'boundary'
p85273
sS'required'
p85274
I00
sS'group_name'
p85275
Nsa(dp85276
S'description'
p85277
S'Concentration\n'
p85278
sS'cpp_type'
p85279
S'std::vector<VariableName>'
p85280
sS'default'
p85281
g3
sS'name'
p85282
S'c'
p85283
sS'required'
p85284
I01
sS'group_name'
p85285
Nsa(dp85286
S'description'
p85287
S'Initial concentration value\n'
p85288
sS'cpp_type'
p85289
S'double'
p85290
sS'default'
p85291
S'0'
p85292
sS'name'
p85293
S'c0'
p85294
sS'required'
p85295
I00
sS'group_name'
p85296
Nsa(dp85297
S'description'
p85298
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85299
sS'cpp_type'
p85300
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85301
sS'default'
p85302
g3
sS'name'
p85303
S'control_tags'
p85304
sS'required'
p85305
I00
sS'group_name'
p85306
Nsa(dp85307
S'description'
p85308
S'The x displacement\n'
p85309
sS'cpp_type'
p85310
S'std::vector<VariableName>'
p85311
sS'default'
p85312
g3
sS'name'
p85313
S'disp_x'
p85314
sS'required'
p85315
I01
sS'group_name'
p85316
Nsa(dp85317
S'description'
p85318
S'The y displacement\n'
p85319
sS'cpp_type'
p85320
S'std::vector<VariableName>'
p85321
sS'default'
p85322
g3
sS'name'
p85323
S'disp_y'
p85324
sS'required'
p85325
I01
sS'group_name'
p85326
Nsa(dp85327
S'description'
p85328
S'The z displacement\n'
p85329
sS'cpp_type'
p85330
S'std::vector<VariableName>'
p85331
sS'default'
p85332
g3
sS'name'
p85333
S'disp_z'
p85334
sS'required'
p85335
I00
sS'group_name'
p85336
Nsa(dp85337
S'description'
p85338
S'Optional function to use as a scalar prefactor on the elasticity tensor.\n'
p85339
sS'cpp_type'
p85340
S'FunctionName'
p85341
sS'default'
p85342
g3
sS'name'
p85343
S'elasticity_tensor_prefactor'
p85344
sS'required'
p85345
I00
sS'group_name'
p85346
Nsa(dp85347
S'description'
p85348
S'Initial eigen strain value\n'
p85349
sS'cpp_type'
p85350
S'double'
p85351
sS'default'
p85352
g3
sS'name'
p85353
S'epsilon0'
p85354
sS'required'
p85355
I01
sS'group_name'
p85356
Nsa(dp85357
S'description'
p85358
S'Euler angle in direction 1\n'
p85359
sS'cpp_type'
p85360
S'double'
p85361
sS'default'
p85362
S'0'
p85363
sS'name'
p85364
S'euler_angle_1'
p85365
sS'required'
p85366
I00
sS'group_name'
p85367
Nsa(dp85368
S'description'
p85369
S'Euler angle in direction 2\n'
p85370
sS'cpp_type'
p85371
S'double'
p85372
sS'default'
p85373
S'0'
p85374
sS'name'
p85375
S'euler_angle_2'
p85376
sS'required'
p85377
I00
sS'group_name'
p85378
Nsa(dp85379
S'description'
p85380
S'Euler angle in direction 3\n'
p85381
sS'cpp_type'
p85382
S'double'
p85383
sS'default'
p85384
S'0'
p85385
sS'name'
p85386
S'euler_angle_3'
p85387
sS'required'
p85388
I00
sS'group_name'
p85389
Nsa(dp85390
S'name'
p85391
S'fill_method'
p85392
sS'cpp_type'
p85393
S'MooseEnum'
p85394
sS'default'
p85395
S'symmetric9'
p85396
sS'description'
p85397
S'The fill method\n'
p85398
sS'required'
p85399
I00
sS'options'
p85400
S'antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic antisymmetric_isotropic axisymmetric_rz general'
p85401
sS'group_name'
p85402
Nsa(dp85403
S'description'
p85404
S'A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n'
p85405
sS'cpp_type'
p85406
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p85407
sS'default'
p85408
g3
sS'name'
p85409
S'initial_stress'
p85410
sS'required'
p85411
I00
sS'group_name'
p85412
Nsa(dp85413
S'description'
p85414
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p85415
sS'cpp_type'
p85416
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85417
sS'default'
p85418
g3
sS'name'
p85419
S'output_properties'
p85420
sS'required'
p85421
I00
sS'group_name'
p85422
S'Outputs'
p85423
sa(dp85424
S'description'
p85425
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p85426
sS'cpp_type'
p85427
S'std::vector<OutputName, std::allocator<OutputName> >'
p85428
sS'default'
p85429
S'none'
p85430
sS'name'
p85431
S'outputs'
p85432
sS'required'
p85433
I00
sS'group_name'
p85434
S'Outputs'
p85435
sa(dp85436
S'description'
p85437
S'The seed for the master random number generator\n'
p85438
sS'cpp_type'
p85439
S'unsigned int'
p85440
sS'default'
p85441
S'0'
p85442
sS'name'
p85443
S'seed'
p85444
sS'required'
p85445
I00
sS'group_name'
p85446
S'Advanced'
p85447
sa(dp85448
S'description'
p85449
S'temperature variable\n'
p85450
sS'cpp_type'
p85451
S'std::vector<VariableName>'
p85452
sS'default'
p85453
g3
sS'name'
p85454
S'temperature'
p85455
sS'required'
p85456
I00
sS'group_name'
p85457
Nsa(dp85458
S'description'
p85459
S'Thermal expansion coefficient in 1/K\n'
p85460
sS'cpp_type'
p85461
S'double'
p85462
sS'default'
p85463
S'0'
p85464
sS'name'
p85465
S'thermal_expansion_coeff'
p85466
sS'required'
p85467
I00
sS'group_name'
p85468
Nsa(dp85469
S'description'
p85470
g3
sS'cpp_type'
p85471
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85472
sS'default'
p85473
S'SimpleEigenStrainMaterial'
p85474
sS'name'
p85475
S'type'
p85476
sS'required'
p85477
I00
sS'group_name'
p85478
Nsa(dp85479
S'description'
p85480
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p85481
sS'cpp_type'
p85482
S'bool'
p85483
sS'default'
p85484
S'0'
p85485
sS'name'
p85486
S'use_displaced_mesh'
p85487
sS'required'
p85488
I00
sS'group_name'
p85489
S'Advanced'
p85490
sasS'name'
p85491
S'/Materials/SimpleEigenStrainMaterial'
p85492
sa(dp85493
S'description'
p85494
g3
sS'subblocks'
p85495
NsS'parameters'
p85496
(lp85497
(dp85498
S'description'
p85499
S'Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n'
p85500
sS'cpp_type'
p85501
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p85502
sS'default'
p85503
g3
sS'name'
p85504
S'active_crack_planes'
p85505
sS'required'
p85506
I00
sS'group_name'
p85507
Nsa(dp85508
S'description'
p85509
S'Name appended to material properties to make them unique\n'
p85510
sS'cpp_type'
p85511
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85512
sS'default'
p85513
g3
sS'name'
p85514
S'appended_property_name'
p85515
sS'required'
p85516
I00
sS'group_name'
p85517
Nsa(dp85518
S'description'
p85519
S'The list of block ids (SubdomainID) that this object will be applied\n'
p85520
sS'cpp_type'
p85521
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p85522
sS'default'
p85523
g3
sS'name'
p85524
S'block'
p85525
sS'required'
p85526
I00
sS'group_name'
p85527
Nsa(dp85528
S'description'
p85529
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p85530
sS'cpp_type'
p85531
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85532
sS'default'
p85533
g3
sS'name'
p85534
S'boundary'
p85535
sS'required'
p85536
I00
sS'group_name'
p85537
Nsa(dp85538
S'description'
p85539
S'The bulk modulus for the material.\n'
p85540
sS'cpp_type'
p85541
S'double'
p85542
sS'default'
p85543
g3
sS'name'
p85544
S'bulk_modulus'
p85545
sS'required'
p85546
I00
sS'group_name'
p85547
Nsa(dp85548
S'description'
p85549
S'Whether to compute the J Integral.\n'
p85550
sS'cpp_type'
p85551
S'bool'
p85552
sS'default'
p85553
S'0'
p85554
sS'name'
p85555
S'compute_JIntegral'
p85556
sS'required'
p85557
I00
sS'group_name'
p85558
Nsa(dp85559
S'description'
p85560
S'ConstitutiveModel to use (optional)\n'
p85561
sS'cpp_type'
p85562
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85563
sS'default'
p85564
g3
sS'name'
p85565
S'constitutive_model'
p85566
sS'required'
p85567
I00
sS'group_name'
p85568
Nsa(dp85569
S'description'
p85570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85571
sS'cpp_type'
p85572
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85573
sS'default'
p85574
g3
sS'name'
p85575
S'control_tags'
p85576
sS'required'
p85577
I00
sS'group_name'
p85578
Nsa(dp85579
S'description'
p85580
S'The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n'
p85581
sS'cpp_type'
p85582
S'double'
p85583
sS'default'
p85584
g3
sS'name'
p85585
S'cracking_neg_fraction'
p85586
sS'required'
p85587
I00
sS'group_name'
p85588
Nsa(dp85589
S'description'
p85590
S'The cracking release type.  Choices are abrupt (default) and exponential.\n'
p85591
sS'cpp_type'
p85592
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85593
sS'default'
p85594
S'abrupt'
p85595
sS'name'
p85596
S'cracking_release'
p85597
sS'required'
p85598
I00
sS'group_name'
p85599
Nsa(dp85600
S'description'
p85601
S'The fraction of the cracking stress allowed to be maintained following a crack.\n'
p85602
sS'cpp_type'
p85603
S'double'
p85604
sS'default'
p85605
S'0'
p85606
sS'name'
p85607
S'cracking_residual_stress'
p85608
sS'required'
p85609
I00
sS'group_name'
p85610
Nsa(dp85611
S'description'
p85612
S'The stress threshold beyond which cracking occurs.  Must be positive.\n'
p85613
sS'cpp_type'
p85614
S'double'
p85615
sS'default'
p85616
S'0'
p85617
sS'name'
p85618
S'cracking_stress'
p85619
sS'required'
p85620
I00
sS'group_name'
p85621
Nsa(dp85622
S'description'
p85623
S'The cracking stress as a function of time and location\n'
p85624
sS'cpp_type'
p85625
S'FunctionName'
p85626
sS'default'
p85627
g3
sS'name'
p85628
S'cracking_stress_function'
p85629
sS'required'
p85630
I00
sS'group_name'
p85631
Nsa(dp85632
S'description'
p85633
S'Names of material properties this material depends on.\n'
p85634
sS'cpp_type'
p85635
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85636
sS'default'
p85637
g3
sS'name'
p85638
S'dep_matl_props'
p85639
sS'required'
p85640
I00
sS'group_name'
p85641
Nsa(dp85642
S'description'
p85643
S'The r displacement\n'
p85644
sS'cpp_type'
p85645
S'std::vector<VariableName>'
p85646
sS'default'
p85647
g3
sS'name'
p85648
S'disp_r'
p85649
sS'required'
p85650
I00
sS'group_name'
p85651
Nsa(dp85652
S'description'
p85653
S'The x displacement\n'
p85654
sS'cpp_type'
p85655
S'std::vector<VariableName>'
p85656
sS'default'
p85657
g3
sS'name'
p85658
S'disp_x'
p85659
sS'required'
p85660
I00
sS'group_name'
p85661
Nsa(dp85662
S'description'
p85663
S'The y displacement\n'
p85664
sS'cpp_type'
p85665
S'std::vector<VariableName>'
p85666
sS'default'
p85667
g3
sS'name'
p85668
S'disp_y'
p85669
sS'required'
p85670
I00
sS'group_name'
p85671
Nsa(dp85672
S'description'
p85673
S'The z displacement\n'
p85674
sS'cpp_type'
p85675
S'std::vector<VariableName>'
p85676
sS'default'
p85677
g3
sS'name'
p85678
S'disp_z'
p85679
sS'required'
p85680
I00
sS'group_name'
p85681
Nsa(dp85682
S'name'
p85683
S'formulation'
p85684
sS'cpp_type'
p85685
S'MooseEnum'
p85686
sS'default'
p85687
g3
sS'description'
p85688
S'Element formulation.  Choices are: Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain\n'
p85689
sS'required'
p85690
I00
sS'options'
p85691
S'Nonlinear3D NonlinearRZ AxisymmetricRZ SphericalR Linear PlaneStrain NonlinearPlaneStrain'
p85692
sS'group_name'
p85693
Nsa(dp85694
S'description'
p85695
S'The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D/RZ formulation.\n'
p85696
sS'cpp_type'
p85697
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85698
sS'default'
p85699
S'RashidApprox'
p85700
sS'name'
p85701
S'increment_calculation'
p85702
sS'required'
p85703
I00
sS'group_name'
p85704
Nsa(dp85705
S'description'
p85706
S'The initial stress tensor (xx, yy, zz, xy, yz, zx)\n'
p85707
sS'cpp_type'
p85708
S'std::vector<double, std::allocator<double> >'
p85709
sS'default'
p85710
g3
sS'name'
p85711
S'initial_stress'
p85712
sS'required'
p85713
I00
sS'group_name'
p85714
Nsa(dp85715
S'description'
p85716
S"Lame's first parameter for the material.\n"
p85717
sS'cpp_type'
p85718
S'double'
p85719
sS'default'
p85720
g3
sS'name'
p85721
S'lambda'
p85722
sS'required'
p85723
I00
sS'group_name'
p85724
Nsa(dp85725
S'description'
p85726
S'Whether to include large strain terms in AxisymmetricRZ, SphericalR, and PlaneStrain formulations.\n'
p85727
sS'cpp_type'
p85728
S'bool'
p85729
sS'default'
p85730
S'0'
p85731
sS'name'
p85732
S'large_strain'
p85733
sS'required'
p85734
I00
sS'group_name'
p85735
Nsa(dp85736
S'description'
p85737
S'The maximum number of cracks allowed at a material point.\n'
p85738
sS'cpp_type'
p85739
S'unsigned int'
p85740
sS'default'
p85741
S'3'
p85742
sS'name'
p85743
S'max_cracks'
p85744
sS'required'
p85745
I00
sS'group_name'
p85746
Nsa(dp85747
S'description'
p85748
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p85749
sS'cpp_type'
p85750
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85751
sS'default'
p85752
g3
sS'name'
p85753
S'output_properties'
p85754
sS'required'
p85755
I00
sS'group_name'
p85756
S'Outputs'
p85757
sa(dp85758
S'description'
p85759
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p85760
sS'cpp_type'
p85761
S'std::vector<OutputName, std::allocator<OutputName> >'
p85762
sS'default'
p85763
S'none'
p85764
sS'name'
p85765
S'outputs'
p85766
sS'required'
p85767
I00
sS'group_name'
p85768
S'Outputs'
p85769
sa(dp85770
S'description'
p85771
S"Poisson's ratio for the material.\n"
p85772
sS'cpp_type'
p85773
S'double'
p85774
sS'default'
p85775
g3
sS'name'
p85776
S'poissons_ratio'
p85777
sS'required'
p85778
I00
sS'group_name'
p85779
Nsa(dp85780
S'description'
p85781
S"Poisson's ratio as a function of temperature.\n"
p85782
sS'cpp_type'
p85783
S'FunctionName'
p85784
sS'default'
p85785
g3
sS'name'
p85786
S'poissons_ratio_function'
p85787
sS'required'
p85788
I00
sS'group_name'
p85789
Nsa(dp85790
S'description'
p85791
S'The zz strain (scalar variable)\n'
p85792
sS'cpp_type'
p85793
S'std::vector<VariableName>'
p85794
sS'default'
p85795
g3
sS'name'
p85796
S'scalar_strain_zz'
p85797
sS'required'
p85798
I00
sS'group_name'
p85799
Nsa(dp85800
S'description'
p85801
S'The seed for the master random number generator\n'
p85802
sS'cpp_type'
p85803
S'unsigned int'
p85804
sS'default'
p85805
S'0'
p85806
sS'name'
p85807
S'seed'
p85808
sS'required'
p85809
I00
sS'group_name'
p85810
S'Advanced'
p85811
sa(dp85812
S'description'
p85813
S'The shear modulus of the material.\n'
p85814
sS'cpp_type'
p85815
S'double'
p85816
sS'default'
p85817
g3
sS'name'
p85818
S'shear_modulus'
p85819
sS'required'
p85820
I00
sS'group_name'
p85821
Nsa(dp85822
S'description'
p85823
S'Parameter which indicates whether the older stress state, required for HHT time integration, needs to be stored\n'
p85824
sS'cpp_type'
p85825
S'bool'
p85826
sS'default'
p85827
S'0'
p85828
sS'name'
p85829
S'store_stress_older'
p85830
sS'required'
p85831
I00
sS'group_name'
p85832
Nsa(dp85833
S'description'
p85834
S'The zz strain\n'
p85835
sS'cpp_type'
p85836
S'std::vector<VariableName>'
p85837
sS'default'
p85838
g3
sS'name'
p85839
S'strain_zz'
p85840
sS'required'
p85841
I00
sS'group_name'
p85842
Nsa(dp85843
S'description'
p85844
S'The stress-free temperature.  If not specified, the initial temperature is used.\n'
p85845
sS'cpp_type'
p85846
S'double'
p85847
sS'default'
p85848
g3
sS'name'
p85849
S'stress_free_temperature'
p85850
sS'required'
p85851
I00
sS'group_name'
p85852
Nsa(dp85853
S'description'
p85854
S'Coupled Temperature\n'
p85855
sS'cpp_type'
p85856
S'std::vector<VariableName>'
p85857
sS'default'
p85858
g3
sS'name'
p85859
S'temp'
p85860
sS'required'
p85861
I00
sS'group_name'
p85862
Nsa(dp85863
S'description'
p85864
S'The thermal expansion coefficient.\n'
p85865
sS'cpp_type'
p85866
S'double'
p85867
sS'default'
p85868
g3
sS'name'
p85869
S'thermal_expansion'
p85870
sS'required'
p85871
I00
sS'group_name'
p85872
Nsa(dp85873
S'description'
p85874
S'Thermal expansion coefficient as a function of temperature.\n'
p85875
sS'cpp_type'
p85876
S'FunctionName'
p85877
sS'default'
p85878
g3
sS'name'
p85879
S'thermal_expansion_function'
p85880
sS'required'
p85881
I00
sS'group_name'
p85882
Nsa(dp85883
S'name'
p85884
S'thermal_expansion_function_type'
p85885
sS'cpp_type'
p85886
S'MooseEnum'
p85887
sS'default'
p85888
g3
sS'description'
p85889
S'Type of thermal expansion function.  Choices are: instantaneous mean\n'
p85890
sS'required'
p85891
I00
sS'options'
p85892
S'instantaneous mean'
p85893
sS'group_name'
p85894
Nsa(dp85895
S'description'
p85896
S'Reference temperature for mean thermal expansion function.\n'
p85897
sS'cpp_type'
p85898
S'double'
p85899
sS'default'
p85900
g3
sS'name'
p85901
S'thermal_expansion_reference_temperature'
p85902
sS'required'
p85903
I00
sS'group_name'
p85904
Nsa(dp85905
S'description'
p85906
g3
sS'cpp_type'
p85907
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p85908
sS'default'
p85909
S'SolidModel'
p85910
sS'name'
p85911
S'type'
p85912
sS'required'
p85913
I00
sS'group_name'
p85914
Nsa(dp85915
S'description'
p85916
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p85917
sS'cpp_type'
p85918
S'bool'
p85919
sS'default'
p85920
S'0'
p85921
sS'name'
p85922
S'use_displaced_mesh'
p85923
sS'required'
p85924
I00
sS'group_name'
p85925
S'Advanced'
p85926
sa(dp85927
S'description'
p85928
S"Young's modulus of the material.\n"
p85929
sS'cpp_type'
p85930
S'double'
p85931
sS'default'
p85932
g3
sS'name'
p85933
S'youngs_modulus'
p85934
sS'required'
p85935
I00
sS'group_name'
p85936
Nsa(dp85937
S'description'
p85938
S"Young's modulus as a function of temperature.\n"
p85939
sS'cpp_type'
p85940
S'FunctionName'
p85941
sS'default'
p85942
g3
sS'name'
p85943
S'youngs_modulus_function'
p85944
sS'required'
p85945
I00
sS'group_name'
p85946
NsasS'name'
p85947
S'/Materials/SolidModel'
p85948
sa(dp85949
S'description'
p85950
S'Provide the constant derivatives of strain w.r.t. the displacement gradient components.\n'
p85951
sS'subblocks'
p85952
NsS'parameters'
p85953
(lp85954
(dp85955
S'description'
p85956
S'The list of block ids (SubdomainID) that this object will be applied\n'
p85957
sS'cpp_type'
p85958
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p85959
sS'default'
p85960
g3
sS'name'
p85961
S'block'
p85962
sS'required'
p85963
I00
sS'group_name'
p85964
Nsa(dp85965
S'description'
p85966
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p85967
sS'cpp_type'
p85968
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p85969
sS'default'
p85970
g3
sS'name'
p85971
S'boundary'
p85972
sS'required'
p85973
I00
sS'group_name'
p85974
Nsa(dp85975
S'description'
p85976
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p85977
sS'cpp_type'
p85978
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85979
sS'default'
p85980
g3
sS'name'
p85981
S'control_tags'
p85982
sS'required'
p85983
I00
sS'group_name'
p85984
Nsa(dp85985
S'description'
p85986
S'List of displacement gradient component variables\n'
p85987
sS'cpp_type'
p85988
S'std::vector<VariableName>'
p85989
sS'default'
p85990
g3
sS'name'
p85991
S'displacement_gradients'
p85992
sS'required'
p85993
I00
sS'group_name'
p85994
Nsa(dp85995
S'description'
p85996
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p85997
sS'cpp_type'
p85998
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p85999
sS'default'
p86000
g3
sS'name'
p86001
S'output_properties'
p86002
sS'required'
p86003
I00
sS'group_name'
p86004
S'Outputs'
p86005
sa(dp86006
S'description'
p86007
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p86008
sS'cpp_type'
p86009
S'std::vector<OutputName, std::allocator<OutputName> >'
p86010
sS'default'
p86011
S'none'
p86012
sS'name'
p86013
S'outputs'
p86014
sS'required'
p86015
I00
sS'group_name'
p86016
S'Outputs'
p86017
sa(dp86018
S'description'
p86019
S'The seed for the master random number generator\n'
p86020
sS'cpp_type'
p86021
S'unsigned int'
p86022
sS'default'
p86023
S'0'
p86024
sS'name'
p86025
S'seed'
p86026
sS'required'
p86027
I00
sS'group_name'
p86028
S'Advanced'
p86029
sa(dp86030
S'description'
p86031
g3
sS'cpp_type'
p86032
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86033
sS'default'
p86034
S'StrainGradDispDerivatives'
p86035
sS'name'
p86036
S'type'
p86037
sS'required'
p86038
I00
sS'group_name'
p86039
Nsa(dp86040
S'description'
p86041
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p86042
sS'cpp_type'
p86043
S'bool'
p86044
sS'default'
p86045
S'0'
p86046
sS'name'
p86047
S'use_displaced_mesh'
p86048
sS'required'
p86049
I00
sS'group_name'
p86050
S'Advanced'
p86051
sasS'name'
p86052
S'/Materials/StrainGradDispDerivatives'
p86053
sa(dp86054
S'description'
p86055
S'Helper material to provide h(eta) and its derivative in one of two polynomial forms.\\nSIMPLE: 3*eta^2-2*eta^3\\nHIGH: eta^3*(6*eta^2-15*eta+10)\n'
p86056
sS'subblocks'
p86057
NsS'parameters'
p86058
(lp86059
(dp86060
S'description'
p86061
S'The list of block ids (SubdomainID) that this object will be applied\n'
p86062
sS'cpp_type'
p86063
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p86064
sS'default'
p86065
g3
sS'name'
p86066
S'block'
p86067
sS'required'
p86068
I00
sS'group_name'
p86069
Nsa(dp86070
S'description'
p86071
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p86072
sS'cpp_type'
p86073
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86074
sS'default'
p86075
g3
sS'name'
p86076
S'boundary'
p86077
sS'required'
p86078
I00
sS'group_name'
p86079
Nsa(dp86080
S'description'
p86081
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86082
sS'cpp_type'
p86083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86084
sS'default'
p86085
g3
sS'name'
p86086
S'control_tags'
p86087
sS'required'
p86088
I00
sS'group_name'
p86089
Nsa(dp86090
S'description'
p86091
S'Order parameter variable\n'
p86092
sS'cpp_type'
p86093
S'std::vector<VariableName>'
p86094
sS'default'
p86095
g3
sS'name'
p86096
S'eta'
p86097
sS'required'
p86098
I00
sS'group_name'
p86099
Nsa(dp86100
S'description'
p86101
S"actual name for f(eta), i.e. 'h' or 'g'\n"
p86102
sS'cpp_type'
p86103
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86104
sS'default'
p86105
S'h'
p86106
sS'name'
p86107
S'function_name'
p86108
sS'required'
p86109
I00
sS'group_name'
p86110
Nsa(dp86111
S'name'
p86112
S'h_order'
p86113
sS'cpp_type'
p86114
S'MooseEnum'
p86115
sS'default'
p86116
S'SIMPLE'
p86117
sS'description'
p86118
S'Polynomial order of the switching function h(eta)\n'
p86119
sS'required'
p86120
I00
sS'options'
p86121
S'SIMPLE HIGH'
p86122
sS'group_name'
p86123
Nsa(dp86124
S'description'
p86125
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p86126
sS'cpp_type'
p86127
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86128
sS'default'
p86129
g3
sS'name'
p86130
S'output_properties'
p86131
sS'required'
p86132
I00
sS'group_name'
p86133
S'Outputs'
p86134
sa(dp86135
S'description'
p86136
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p86137
sS'cpp_type'
p86138
S'std::vector<OutputName, std::allocator<OutputName> >'
p86139
sS'default'
p86140
S'none'
p86141
sS'name'
p86142
S'outputs'
p86143
sS'required'
p86144
I00
sS'group_name'
p86145
S'Outputs'
p86146
sa(dp86147
S'description'
p86148
S'The seed for the master random number generator\n'
p86149
sS'cpp_type'
p86150
S'unsigned int'
p86151
sS'default'
p86152
S'0'
p86153
sS'name'
p86154
S'seed'
p86155
sS'required'
p86156
I00
sS'group_name'
p86157
S'Advanced'
p86158
sa(dp86159
S'description'
p86160
g3
sS'cpp_type'
p86161
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86162
sS'default'
p86163
S'SwitchingFunctionMaterial'
p86164
sS'name'
p86165
S'type'
p86166
sS'required'
p86167
I00
sS'group_name'
p86168
Nsa(dp86169
S'description'
p86170
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p86171
sS'cpp_type'
p86172
S'bool'
p86173
sS'default'
p86174
S'0'
p86175
sS'name'
p86176
S'use_displaced_mesh'
p86177
sS'required'
p86178
I00
sS'group_name'
p86179
S'Advanced'
p86180
sasS'name'
p86181
S'/Materials/SwitchingFunctionMaterial'
p86182
sa(dp86183
S'description'
p86184
g3
sS'subblocks'
p86185
NsS'parameters'
p86186
(lp86187
(dp86188
S'description'
p86189
S'The list of block ids (SubdomainID) that this object will be applied\n'
p86190
sS'cpp_type'
p86191
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p86192
sS'default'
p86193
g3
sS'name'
p86194
S'block'
p86195
sS'required'
p86196
I00
sS'group_name'
p86197
Nsa(dp86198
S'description'
p86199
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p86200
sS'cpp_type'
p86201
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86202
sS'default'
p86203
g3
sS'name'
p86204
S'boundary'
p86205
sS'required'
p86206
I00
sS'group_name'
p86207
Nsa(dp86208
S'description'
p86209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86210
sS'cpp_type'
p86211
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86212
sS'default'
p86213
g3
sS'name'
p86214
S'control_tags'
p86215
sS'required'
p86216
I00
sS'group_name'
p86217
Nsa(dp86218
S'description'
p86219
S'Variable containing the x displacement\n'
p86220
sS'cpp_type'
p86221
S'NonlinearVariableName'
p86222
sS'default'
p86223
g3
sS'name'
p86224
S'disp_x'
p86225
sS'required'
p86226
I01
sS'group_name'
p86227
Nsa(dp86228
S'description'
p86229
S'Variable containing the y displacement\n'
p86230
sS'cpp_type'
p86231
S'NonlinearVariableName'
p86232
sS'default'
p86233
g3
sS'name'
p86234
S'disp_y'
p86235
sS'required'
p86236
I00
sS'group_name'
p86237
Nsa(dp86238
S'description'
p86239
S'Variable containing the z displacement\n'
p86240
sS'cpp_type'
p86241
S'NonlinearVariableName'
p86242
sS'default'
p86243
g3
sS'name'
p86244
S'disp_z'
p86245
sS'required'
p86246
I00
sS'group_name'
p86247
Nsa(dp86248
S'description'
p86249
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p86250
sS'cpp_type'
p86251
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86252
sS'default'
p86253
g3
sS'name'
p86254
S'output_properties'
p86255
sS'required'
p86256
I00
sS'group_name'
p86257
S'Outputs'
p86258
sa(dp86259
S'description'
p86260
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p86261
sS'cpp_type'
p86262
S'std::vector<OutputName, std::allocator<OutputName> >'
p86263
sS'default'
p86264
S'none'
p86265
sS'name'
p86266
S'outputs'
p86267
sS'required'
p86268
I00
sS'group_name'
p86269
S'Outputs'
p86270
sa(dp86271
S'description'
p86272
S'The seed for the master random number generator\n'
p86273
sS'cpp_type'
p86274
S'unsigned int'
p86275
sS'default'
p86276
S'0'
p86277
sS'name'
p86278
S'seed'
p86279
sS'required'
p86280
I00
sS'group_name'
p86281
S'Advanced'
p86282
sa(dp86283
S'description'
p86284
S'The reference temperature at which this material has zero strain.\n'
p86285
sS'cpp_type'
p86286
S'double'
p86287
sS'default'
p86288
S'0'
p86289
sS'name'
p86290
S't_ref'
p86291
sS'required'
p86292
I00
sS'group_name'
p86293
Nsa(dp86294
S'description'
p86295
S'The temperature if you want thermal expansion.\n'
p86296
sS'cpp_type'
p86297
S'std::vector<VariableName>'
p86298
sS'default'
p86299
g3
sS'name'
p86300
S'temp'
p86301
sS'required'
p86302
I00
sS'group_name'
p86303
Nsa(dp86304
S'description'
p86305
S'The thermal expansion coefficient.\n'
p86306
sS'cpp_type'
p86307
S'double'
p86308
sS'default'
p86309
S'0'
p86310
sS'name'
p86311
S'thermal_expansion'
p86312
sS'required'
p86313
I00
sS'group_name'
p86314
Nsa(dp86315
S'description'
p86316
g3
sS'cpp_type'
p86317
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86318
sS'default'
p86319
S'TrussMaterial'
p86320
sS'name'
p86321
S'type'
p86322
sS'required'
p86323
I00
sS'group_name'
p86324
Nsa(dp86325
S'description'
p86326
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p86327
sS'cpp_type'
p86328
S'bool'
p86329
sS'default'
p86330
S'0'
p86331
sS'name'
p86332
S'use_displaced_mesh'
p86333
sS'required'
p86334
I00
sS'group_name'
p86335
S'Advanced'
p86336
sa(dp86337
S'description'
p86338
S"Young's Modulus\n"
p86339
sS'cpp_type'
p86340
S'double'
p86341
sS'default'
p86342
g3
sS'name'
p86343
S'youngs_modulus'
p86344
sS'required'
p86345
I00
sS'group_name'
p86346
Nsa(dp86347
S'description'
p86348
S"Variable containing Young's modulus\n"
p86349
sS'cpp_type'
p86350
S'std::vector<VariableName>'
p86351
sS'default'
p86352
g3
sS'name'
p86353
S'youngs_modulus_var'
p86354
sS'required'
p86355
I00
sS'group_name'
p86356
NsasS'name'
p86357
S'/Materials/TrussMaterial'
p86358
sa(dp86359
S'description'
p86360
S'Compute a global stress in a two phase model\n'
p86361
sS'subblocks'
p86362
NsS'parameters'
p86363
(lp86364
(dp86365
S'description'
p86366
S'Base name for the Phase A strain.\n'
p86367
sS'cpp_type'
p86368
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86369
sS'default'
p86370
g3
sS'name'
p86371
S'base_A'
p86372
sS'required'
p86373
I01
sS'group_name'
p86374
Nsa(dp86375
S'description'
p86376
S'Base name for the Phase B strain.\n'
p86377
sS'cpp_type'
p86378
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86379
sS'default'
p86380
g3
sS'name'
p86381
S'base_B'
p86382
sS'required'
p86383
I01
sS'group_name'
p86384
Nsa(dp86385
S'description'
p86386
S'Base name for the computed global stress (optional).\n'
p86387
sS'cpp_type'
p86388
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86389
sS'default'
p86390
g3
sS'name'
p86391
S'base_name'
p86392
sS'required'
p86393
I00
sS'group_name'
p86394
Nsa(dp86395
S'description'
p86396
S'The list of block ids (SubdomainID) that this object will be applied\n'
p86397
sS'cpp_type'
p86398
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p86399
sS'default'
p86400
g3
sS'name'
p86401
S'block'
p86402
sS'required'
p86403
I00
sS'group_name'
p86404
Nsa(dp86405
S'description'
p86406
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p86407
sS'cpp_type'
p86408
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p86409
sS'default'
p86410
g3
sS'name'
p86411
S'boundary'
p86412
sS'required'
p86413
I00
sS'group_name'
p86414
Nsa(dp86415
S'description'
p86416
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86417
sS'cpp_type'
p86418
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86419
sS'default'
p86420
g3
sS'name'
p86421
S'control_tags'
p86422
sS'required'
p86423
I00
sS'group_name'
p86424
Nsa(dp86425
S'description'
p86426
S'Switching Function Material that provides h(eta)\n'
p86427
sS'cpp_type'
p86428
S'MaterialPropertyName'
p86429
sS'default'
p86430
S'h'
p86431
sS'name'
p86432
S'h'
p86433
sS'required'
p86434
I00
sS'group_name'
p86435
Nsa(dp86436
S'description'
p86437
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p86438
sS'cpp_type'
p86439
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86440
sS'default'
p86441
g3
sS'name'
p86442
S'output_properties'
p86443
sS'required'
p86444
I00
sS'group_name'
p86445
S'Outputs'
p86446
sa(dp86447
S'description'
p86448
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p86449
sS'cpp_type'
p86450
S'std::vector<OutputName, std::allocator<OutputName> >'
p86451
sS'default'
p86452
S'none'
p86453
sS'name'
p86454
S'outputs'
p86455
sS'required'
p86456
I00
sS'group_name'
p86457
S'Outputs'
p86458
sa(dp86459
S'description'
p86460
S'The seed for the master random number generator\n'
p86461
sS'cpp_type'
p86462
S'unsigned int'
p86463
sS'default'
p86464
S'0'
p86465
sS'name'
p86466
S'seed'
p86467
sS'required'
p86468
I00
sS'group_name'
p86469
S'Advanced'
p86470
sa(dp86471
S'description'
p86472
g3
sS'cpp_type'
p86473
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86474
sS'default'
p86475
S'TwoPhaseStressMaterial'
p86476
sS'name'
p86477
S'type'
p86478
sS'required'
p86479
I00
sS'group_name'
p86480
Nsa(dp86481
S'description'
p86482
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p86483
sS'cpp_type'
p86484
S'bool'
p86485
sS'default'
p86486
S'0'
p86487
sS'name'
p86488
S'use_displaced_mesh'
p86489
sS'required'
p86490
I00
sS'group_name'
p86491
S'Advanced'
p86492
sasS'name'
p86493
S'/Materials/TwoPhaseStressMaterial'
p86494
sasS'parameters'
p86495
NsS'name'
p86496
S'/Materials'
p86497
sa(dp86498
S'description'
p86499
g3
sS'subblocks'
p86500
(lp86501
(dp86502
S'description'
p86503
g3
sS'subblocks'
p86504
(lp86505
(dp86506
S'description'
p86507
S'Mesh generated from a specified EBSD data file\n'
p86508
sS'subblocks'
p86509
NsS'parameters'
p86510
(lp86511
(dp86512
S'name'
p86513
S'centroid_partitioner_direction'
p86514
sS'cpp_type'
p86515
S'MooseEnum'
p86516
sS'default'
p86517
g3
sS'description'
p86518
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p86519
sS'required'
p86520
I00
sS'options'
p86521
S'x y z radial'
p86522
sS'group_name'
p86523
S'Partitioning'
p86524
sa(dp86525
S'description'
p86526
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86527
sS'cpp_type'
p86528
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86529
sS'default'
p86530
g3
sS'name'
p86531
S'control_tags'
p86532
sS'required'
p86533
I00
sS'group_name'
p86534
Nsa(dp86535
S'name'
p86536
S'distribution'
p86537
sS'cpp_type'
p86538
S'MooseEnum'
p86539
sS'default'
p86540
S'DEFAULT'
p86541
sS'description'
p86542
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p86543
sS'required'
p86544
I00
sS'options'
p86545
S'PARALLEL SERIAL DEFAULT'
p86546
sS'group_name'
p86547
Nsa(dp86548
S'name'
p86549
S'elem_type'
p86550
sS'cpp_type'
p86551
S'MooseEnum'
p86552
sS'default'
p86553
g3
sS'description'
p86554
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p86555
sS'required'
p86556
I00
sS'options'
p86557
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p86558
sS'group_name'
p86559
Nsa(dp86560
S'description'
p86561
S'The name of the file containing the EBSD data\n'
p86562
sS'cpp_type'
p86563
S'FileName'
p86564
sS'default'
p86565
g3
sS'name'
p86566
S'filename'
p86567
sS'required'
p86568
I01
sS'group_name'
p86569
Nsa(dp86570
S'description'
p86571
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p86572
sS'cpp_type'
p86573
S'bool'
p86574
sS'default'
p86575
S'0'
p86576
sS'name'
p86577
S'nemesis'
p86578
sS'required'
p86579
I00
sS'group_name'
p86580
S'Advanced'
p86581
sa(dp86582
S'name'
p86583
S'partitioner'
p86584
sS'cpp_type'
p86585
S'MooseEnum'
p86586
sS'default'
p86587
S'default'
p86588
sS'description'
p86589
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p86590
sS'required'
p86591
I00
sS'options'
p86592
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p86593
sS'group_name'
p86594
S'Partitioning'
p86595
sa(dp86596
S'name'
p86597
S'patch_update_strategy'
p86598
sS'cpp_type'
p86599
S'MooseEnum'
p86600
sS'default'
p86601
S'never'
p86602
sS'description'
p86603
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p86604
sS'required'
p86605
I00
sS'options'
p86606
S'never always auto'
p86607
sS'group_name'
p86608
S'Advanced'
p86609
sa(dp86610
S'description'
p86611
g3
sS'cpp_type'
p86612
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86613
sS'default'
p86614
S'EBSDMesh'
p86615
sS'name'
p86616
S'type'
p86617
sS'required'
p86618
I00
sS'group_name'
p86619
Nsa(dp86620
S'description'
p86621
S'Number of coarsening levels available in adaptive mesh refinement.\n'
p86622
sS'cpp_type'
p86623
S'unsigned int'
p86624
sS'default'
p86625
S'0'
p86626
sS'name'
p86627
S'uniform_refine'
p86628
sS'required'
p86629
I00
sS'group_name'
p86630
NsasS'name'
p86631
S'/Mesh/<type>/EBSDMesh'
p86632
sa(dp86633
S'description'
p86634
g3
sS'subblocks'
p86635
NsS'parameters'
p86636
(lp86637
(dp86638
S'name'
p86639
S'centroid_partitioner_direction'
p86640
sS'cpp_type'
p86641
S'MooseEnum'
p86642
sS'default'
p86643
g3
sS'description'
p86644
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p86645
sS'required'
p86646
I00
sS'options'
p86647
S'x y z radial'
p86648
sS'group_name'
p86649
S'Partitioning'
p86650
sa(dp86651
S'description'
p86652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86653
sS'cpp_type'
p86654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86655
sS'default'
p86656
g3
sS'name'
p86657
S'control_tags'
p86658
sS'required'
p86659
I00
sS'group_name'
p86660
Nsa(dp86661
S'name'
p86662
S'dim'
p86663
sS'cpp_type'
p86664
S'MooseEnum'
p86665
sS'default'
p86666
S'3'
p86667
sS'description'
p86668
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p86669
sS'required'
p86670
I00
sS'options'
p86671
S'1 2 3'
p86672
sS'group_name'
p86673
S'Advanced'
p86674
sa(dp86675
S'name'
p86676
S'distribution'
p86677
sS'cpp_type'
p86678
S'MooseEnum'
p86679
sS'default'
p86680
S'DEFAULT'
p86681
sS'description'
p86682
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p86683
sS'required'
p86684
I00
sS'options'
p86685
S'PARALLEL SERIAL DEFAULT'
p86686
sS'group_name'
p86687
Nsa(dp86688
S'description'
p86689
S'The name of the mesh file to read\n'
p86690
sS'cpp_type'
p86691
S'MeshFileName'
p86692
sS'default'
p86693
g3
sS'name'
p86694
S'file'
p86695
sS'required'
p86696
I01
sS'group_name'
p86697
Nsa(dp86698
S'description'
p86699
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p86700
sS'cpp_type'
p86701
S'bool'
p86702
sS'default'
p86703
S'0'
p86704
sS'name'
p86705
S'nemesis'
p86706
sS'required'
p86707
I00
sS'group_name'
p86708
S'Advanced'
p86709
sa(dp86710
S'name'
p86711
S'partitioner'
p86712
sS'cpp_type'
p86713
S'MooseEnum'
p86714
sS'default'
p86715
S'default'
p86716
sS'description'
p86717
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p86718
sS'required'
p86719
I00
sS'options'
p86720
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p86721
sS'group_name'
p86722
S'Partitioning'
p86723
sa(dp86724
S'name'
p86725
S'patch_update_strategy'
p86726
sS'cpp_type'
p86727
S'MooseEnum'
p86728
sS'default'
p86729
S'never'
p86730
sS'description'
p86731
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p86732
sS'required'
p86733
I00
sS'options'
p86734
S'never always auto'
p86735
sS'group_name'
p86736
S'Advanced'
p86737
sa(dp86738
S'description'
p86739
g3
sS'cpp_type'
p86740
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86741
sS'default'
p86742
S'FileMesh'
p86743
sS'name'
p86744
S'type'
p86745
sS'required'
p86746
I00
sS'group_name'
p86747
NsasS'name'
p86748
S'/Mesh/<type>/FileMesh'
p86749
sa(dp86750
S'description'
p86751
g3
sS'subblocks'
p86752
NsS'parameters'
p86753
(lp86754
(dp86755
S'name'
p86756
S'centroid_partitioner_direction'
p86757
sS'cpp_type'
p86758
S'MooseEnum'
p86759
sS'default'
p86760
g3
sS'description'
p86761
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p86762
sS'required'
p86763
I00
sS'options'
p86764
S'x y z radial'
p86765
sS'group_name'
p86766
S'Partitioning'
p86767
sa(dp86768
S'description'
p86769
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86770
sS'cpp_type'
p86771
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p86772
sS'default'
p86773
g3
sS'name'
p86774
S'control_tags'
p86775
sS'required'
p86776
I00
sS'group_name'
p86777
Nsa(dp86778
S'name'
p86779
S'dim'
p86780
sS'cpp_type'
p86781
S'MooseEnum'
p86782
sS'default'
p86783
g3
sS'description'
p86784
S'The dimension of the mesh to be generated\n'
p86785
sS'required'
p86786
I01
sS'options'
p86787
S'1 2 3'
p86788
sS'group_name'
p86789
S'Main'
p86790
sa(dp86791
S'name'
p86792
S'distribution'
p86793
sS'cpp_type'
p86794
S'MooseEnum'
p86795
sS'default'
p86796
S'DEFAULT'
p86797
sS'description'
p86798
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p86799
sS'required'
p86800
I00
sS'options'
p86801
S'PARALLEL SERIAL DEFAULT'
p86802
sS'group_name'
p86803
Nsa(dp86804
S'name'
p86805
S'elem_type'
p86806
sS'cpp_type'
p86807
S'MooseEnum'
p86808
sS'default'
p86809
g3
sS'description'
p86810
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p86811
sS'required'
p86812
I00
sS'options'
p86813
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p86814
sS'group_name'
p86815
Nsa(dp86816
S'description'
p86817
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p86818
sS'cpp_type'
p86819
S'bool'
p86820
sS'default'
p86821
S'0'
p86822
sS'name'
p86823
S'nemesis'
p86824
sS'required'
p86825
I00
sS'group_name'
p86826
S'Advanced'
p86827
sa(dp86828
S'description'
p86829
S'Number of elements in the X direction\n'
p86830
sS'cpp_type'
p86831
S'int'
p86832
sS'default'
p86833
S'1'
p86834
sS'name'
p86835
S'nx'
p86836
sS'required'
p86837
I00
sS'group_name'
p86838
Nsa(dp86839
S'description'
p86840
S'Number of elements in the Y direction\n'
p86841
sS'cpp_type'
p86842
S'int'
p86843
sS'default'
p86844
S'1'
p86845
sS'name'
p86846
S'ny'
p86847
sS'required'
p86848
I00
sS'group_name'
p86849
Nsa(dp86850
S'description'
p86851
S'Number of elements in the Z direction\n'
p86852
sS'cpp_type'
p86853
S'int'
p86854
sS'default'
p86855
S'1'
p86856
sS'name'
p86857
S'nz'
p86858
sS'required'
p86859
I00
sS'group_name'
p86860
Nsa(dp86861
S'name'
p86862
S'partitioner'
p86863
sS'cpp_type'
p86864
S'MooseEnum'
p86865
sS'default'
p86866
S'default'
p86867
sS'description'
p86868
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p86869
sS'required'
p86870
I00
sS'options'
p86871
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p86872
sS'group_name'
p86873
S'Partitioning'
p86874
sa(dp86875
S'name'
p86876
S'patch_update_strategy'
p86877
sS'cpp_type'
p86878
S'MooseEnum'
p86879
sS'default'
p86880
S'never'
p86881
sS'description'
p86882
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p86883
sS'required'
p86884
I00
sS'options'
p86885
S'never always auto'
p86886
sS'group_name'
p86887
S'Advanced'
p86888
sa(dp86889
S'description'
p86890
g3
sS'cpp_type'
p86891
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p86892
sS'default'
p86893
S'GeneratedMesh'
p86894
sS'name'
p86895
S'type'
p86896
sS'required'
p86897
I00
sS'group_name'
p86898
Nsa(dp86899
S'description'
p86900
S'Upper X Coordinate of the generated mesh\n'
p86901
sS'cpp_type'
p86902
S'double'
p86903
sS'default'
p86904
S'1'
p86905
sS'name'
p86906
S'xmax'
p86907
sS'required'
p86908
I00
sS'group_name'
p86909
Nsa(dp86910
S'description'
p86911
S'Lower X Coordinate of the generated mesh\n'
p86912
sS'cpp_type'
p86913
S'double'
p86914
sS'default'
p86915
S'0'
p86916
sS'name'
p86917
S'xmin'
p86918
sS'required'
p86919
I00
sS'group_name'
p86920
Nsa(dp86921
S'description'
p86922
S'Upper Y Coordinate of the generated mesh\n'
p86923
sS'cpp_type'
p86924
S'double'
p86925
sS'default'
p86926
S'1'
p86927
sS'name'
p86928
S'ymax'
p86929
sS'required'
p86930
I00
sS'group_name'
p86931
Nsa(dp86932
S'description'
p86933
S'Lower Y Coordinate of the generated mesh\n'
p86934
sS'cpp_type'
p86935
S'double'
p86936
sS'default'
p86937
S'0'
p86938
sS'name'
p86939
S'ymin'
p86940
sS'required'
p86941
I00
sS'group_name'
p86942
Nsa(dp86943
S'description'
p86944
S'Upper Z Coordinate of the generated mesh\n'
p86945
sS'cpp_type'
p86946
S'double'
p86947
sS'default'
p86948
S'1'
p86949
sS'name'
p86950
S'zmax'
p86951
sS'required'
p86952
I00
sS'group_name'
p86953
Nsa(dp86954
S'description'
p86955
S'Lower Z Coordinate of the generated mesh\n'
p86956
sS'cpp_type'
p86957
S'double'
p86958
sS'default'
p86959
S'0'
p86960
sS'name'
p86961
S'zmin'
p86962
sS'required'
p86963
I00
sS'group_name'
p86964
NsasS'name'
p86965
S'/Mesh/<type>/GeneratedMesh'
p86966
sa(dp86967
S'description'
p86968
S'Generated mesh with the aspect ratio of a given image stack\n'
p86969
sS'subblocks'
p86970
NsS'parameters'
p86971
(lp86972
(dp86973
S'description'
p86974
S'The number of mesh cells per pixel, must be <=1 \n'
p86975
sS'cpp_type'
p86976
S'double'
p86977
sS'default'
p86978
S'1'
p86979
sS'name'
p86980
S'cells_per_pixel'
p86981
sS'required'
p86982
I00
sS'group_name'
p86983
Nsa(dp86984
S'name'
p86985
S'centroid_partitioner_direction'
p86986
sS'cpp_type'
p86987
S'MooseEnum'
p86988
sS'default'
p86989
g3
sS'description'
p86990
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p86991
sS'required'
p86992
I00
sS'options'
p86993
S'x y z radial'
p86994
sS'group_name'
p86995
S'Partitioning'
p86996
sa(dp86997
S'description'
p86998
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p86999
sS'cpp_type'
p87000
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87001
sS'default'
p87002
g3
sS'name'
p87003
S'control_tags'
p87004
sS'required'
p87005
I00
sS'group_name'
p87006
Nsa(dp87007
S'name'
p87008
S'dim'
p87009
sS'cpp_type'
p87010
S'MooseEnum'
p87011
sS'default'
p87012
g3
sS'description'
p87013
S'The dimension of the mesh to be generated\n'
p87014
sS'required'
p87015
I01
sS'options'
p87016
S'1 2 3'
p87017
sS'group_name'
p87018
S'Main'
p87019
sa(dp87020
S'name'
p87021
S'distribution'
p87022
sS'cpp_type'
p87023
S'MooseEnum'
p87024
sS'default'
p87025
S'DEFAULT'
p87026
sS'description'
p87027
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p87028
sS'required'
p87029
I00
sS'options'
p87030
S'PARALLEL SERIAL DEFAULT'
p87031
sS'group_name'
p87032
Nsa(dp87033
S'name'
p87034
S'elem_type'
p87035
sS'cpp_type'
p87036
S'MooseEnum'
p87037
sS'default'
p87038
g3
sS'description'
p87039
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p87040
sS'required'
p87041
I00
sS'options'
p87042
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p87043
sS'group_name'
p87044
Nsa(dp87045
S'description'
p87046
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p87047
sS'cpp_type'
p87048
S'FileName'
p87049
sS'default'
p87050
g3
sS'name'
p87051
S'file'
p87052
sS'required'
p87053
I00
sS'group_name'
p87054
Nsa(dp87055
S'description'
p87056
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p87057
sS'cpp_type'
p87058
S'FileNameNoExtension'
p87059
sS'default'
p87060
g3
sS'name'
p87061
S'file_base'
p87062
sS'required'
p87063
I00
sS'group_name'
p87064
Nsa(dp87065
S'description'
p87066
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p87067
sS'cpp_type'
p87068
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p87069
sS'default'
p87070
g3
sS'name'
p87071
S'file_range'
p87072
sS'required'
p87073
I00
sS'group_name'
p87074
Nsa(dp87075
S'description'
p87076
S"Suffix of the file to open, e.g. 'png'\n"
p87077
sS'cpp_type'
p87078
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87079
sS'default'
p87080
g3
sS'name'
p87081
S'file_suffix'
p87082
sS'required'
p87083
I00
sS'group_name'
p87084
Nsa(dp87085
S'description'
p87086
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p87087
sS'cpp_type'
p87088
S'bool'
p87089
sS'default'
p87090
S'0'
p87091
sS'name'
p87092
S'nemesis'
p87093
sS'required'
p87094
I00
sS'group_name'
p87095
S'Advanced'
p87096
sa(dp87097
S'description'
p87098
S'Number of elements in the X direction\n'
p87099
sS'cpp_type'
p87100
S'int'
p87101
sS'default'
p87102
S'1'
p87103
sS'name'
p87104
S'nx'
p87105
sS'required'
p87106
I00
sS'group_name'
p87107
Nsa(dp87108
S'description'
p87109
S'Number of elements in the Y direction\n'
p87110
sS'cpp_type'
p87111
S'int'
p87112
sS'default'
p87113
S'1'
p87114
sS'name'
p87115
S'ny'
p87116
sS'required'
p87117
I00
sS'group_name'
p87118
Nsa(dp87119
S'description'
p87120
S'Number of elements in the Z direction\n'
p87121
sS'cpp_type'
p87122
S'int'
p87123
sS'default'
p87124
S'1'
p87125
sS'name'
p87126
S'nz'
p87127
sS'required'
p87128
I00
sS'group_name'
p87129
Nsa(dp87130
S'name'
p87131
S'partitioner'
p87132
sS'cpp_type'
p87133
S'MooseEnum'
p87134
sS'default'
p87135
S'default'
p87136
sS'description'
p87137
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p87138
sS'required'
p87139
I00
sS'options'
p87140
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p87141
sS'group_name'
p87142
S'Partitioning'
p87143
sa(dp87144
S'name'
p87145
S'patch_update_strategy'
p87146
sS'cpp_type'
p87147
S'MooseEnum'
p87148
sS'default'
p87149
S'never'
p87150
sS'description'
p87151
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p87152
sS'required'
p87153
I00
sS'options'
p87154
S'never always auto'
p87155
sS'group_name'
p87156
S'Advanced'
p87157
sa(dp87158
S'description'
p87159
S'Whether or not to scale the image so its max dimension is 1\n'
p87160
sS'cpp_type'
p87161
S'bool'
p87162
sS'default'
p87163
S'1'
p87164
sS'name'
p87165
S'scale_to_one'
p87166
sS'required'
p87167
I00
sS'group_name'
p87168
Nsa(dp87169
S'description'
p87170
g3
sS'cpp_type'
p87171
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87172
sS'default'
p87173
S'ImageMesh'
p87174
sS'name'
p87175
S'type'
p87176
sS'required'
p87177
I00
sS'group_name'
p87178
Nsa(dp87179
S'description'
p87180
S'Upper X Coordinate of the generated mesh\n'
p87181
sS'cpp_type'
p87182
S'double'
p87183
sS'default'
p87184
S'1'
p87185
sS'name'
p87186
S'xmax'
p87187
sS'required'
p87188
I00
sS'group_name'
p87189
Nsa(dp87190
S'description'
p87191
S'Lower X Coordinate of the generated mesh\n'
p87192
sS'cpp_type'
p87193
S'double'
p87194
sS'default'
p87195
S'0'
p87196
sS'name'
p87197
S'xmin'
p87198
sS'required'
p87199
I00
sS'group_name'
p87200
Nsa(dp87201
S'description'
p87202
S'Upper Y Coordinate of the generated mesh\n'
p87203
sS'cpp_type'
p87204
S'double'
p87205
sS'default'
p87206
S'1'
p87207
sS'name'
p87208
S'ymax'
p87209
sS'required'
p87210
I00
sS'group_name'
p87211
Nsa(dp87212
S'description'
p87213
S'Lower Y Coordinate of the generated mesh\n'
p87214
sS'cpp_type'
p87215
S'double'
p87216
sS'default'
p87217
S'0'
p87218
sS'name'
p87219
S'ymin'
p87220
sS'required'
p87221
I00
sS'group_name'
p87222
Nsa(dp87223
S'description'
p87224
S'Upper Z Coordinate of the generated mesh\n'
p87225
sS'cpp_type'
p87226
S'double'
p87227
sS'default'
p87228
S'1'
p87229
sS'name'
p87230
S'zmax'
p87231
sS'required'
p87232
I00
sS'group_name'
p87233
Nsa(dp87234
S'description'
p87235
S'Lower Z Coordinate of the generated mesh\n'
p87236
sS'cpp_type'
p87237
S'double'
p87238
sS'default'
p87239
S'0'
p87240
sS'name'
p87241
S'zmin'
p87242
sS'required'
p87243
I00
sS'group_name'
p87244
NsasS'name'
p87245
S'/Mesh/<type>/ImageMesh'
p87246
sa(dp87247
S'description'
p87248
g3
sS'subblocks'
p87249
NsS'parameters'
p87250
(lp87251
(dp87252
S'description'
p87253
S'name of the back (z) boundary\n'
p87254
sS'cpp_type'
p87255
S'BoundaryName'
p87256
sS'default'
p87257
S'back_boundary'
p87258
sS'name'
p87259
S'back_boundary'
p87260
sS'required'
p87261
I00
sS'group_name'
p87262
Nsa(dp87263
S'description'
p87264
S'name of the bottom (y) boundary\n'
p87265
sS'cpp_type'
p87266
S'BoundaryName'
p87267
sS'default'
p87268
S'bottom_boundary'
p87269
sS'name'
p87270
S'bottom_boundary'
p87271
sS'required'
p87272
I00
sS'group_name'
p87273
Nsa(dp87274
S'name'
p87275
S'centroid_partitioner_direction'
p87276
sS'cpp_type'
p87277
S'MooseEnum'
p87278
sS'default'
p87279
g3
sS'description'
p87280
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p87281
sS'required'
p87282
I00
sS'options'
p87283
S'x y z radial'
p87284
sS'group_name'
p87285
S'Partitioning'
p87286
sa(dp87287
S'description'
p87288
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87289
sS'cpp_type'
p87290
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87291
sS'default'
p87292
g3
sS'name'
p87293
S'control_tags'
p87294
sS'required'
p87295
I00
sS'group_name'
p87296
Nsa(dp87297
S'name'
p87298
S'dim'
p87299
sS'cpp_type'
p87300
S'MooseEnum'
p87301
sS'default'
p87302
S'3'
p87303
sS'description'
p87304
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p87305
sS'required'
p87306
I00
sS'options'
p87307
S'1 2 3'
p87308
sS'group_name'
p87309
S'Advanced'
p87310
sa(dp87311
S'name'
p87312
S'distribution'
p87313
sS'cpp_type'
p87314
S'MooseEnum'
p87315
sS'default'
p87316
S'DEFAULT'
p87317
sS'description'
p87318
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p87319
sS'required'
p87320
I00
sS'options'
p87321
S'PARALLEL SERIAL DEFAULT'
p87322
sS'group_name'
p87323
Nsa(dp87324
S'description'
p87325
S'The name of the mesh file to read\n'
p87326
sS'cpp_type'
p87327
S'MeshFileName'
p87328
sS'default'
p87329
g3
sS'name'
p87330
S'file'
p87331
sS'required'
p87332
I01
sS'group_name'
p87333
Nsa(dp87334
S'description'
p87335
S'name of the front (z) boundary\n'
p87336
sS'cpp_type'
p87337
S'BoundaryName'
p87338
sS'default'
p87339
S'front_boundary'
p87340
sS'name'
p87341
S'front_boundary'
p87342
sS'required'
p87343
I00
sS'group_name'
p87344
Nsa(dp87345
S'description'
p87346
S'name of the left (x) boundary\n'
p87347
sS'cpp_type'
p87348
S'BoundaryName'
p87349
sS'default'
p87350
S'left_boundary'
p87351
sS'name'
p87352
S'left_boundary'
p87353
sS'required'
p87354
I00
sS'group_name'
p87355
Nsa(dp87356
S'description'
p87357
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p87358
sS'cpp_type'
p87359
S'bool'
p87360
sS'default'
p87361
S'0'
p87362
sS'name'
p87363
S'nemesis'
p87364
sS'required'
p87365
I00
sS'group_name'
p87366
S'Advanced'
p87367
sa(dp87368
S'name'
p87369
S'partitioner'
p87370
sS'cpp_type'
p87371
S'MooseEnum'
p87372
sS'default'
p87373
S'default'
p87374
sS'description'
p87375
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p87376
sS'required'
p87377
I00
sS'options'
p87378
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p87379
sS'group_name'
p87380
S'Partitioning'
p87381
sa(dp87382
S'name'
p87383
S'patch_update_strategy'
p87384
sS'cpp_type'
p87385
S'MooseEnum'
p87386
sS'default'
p87387
S'never'
p87388
sS'description'
p87389
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p87390
sS'required'
p87391
I00
sS'options'
p87392
S'never always auto'
p87393
sS'group_name'
p87394
S'Advanced'
p87395
sa(dp87396
S'description'
p87397
S'name of the right (x) boundary\n'
p87398
sS'cpp_type'
p87399
S'BoundaryName'
p87400
sS'default'
p87401
S'right_boundary'
p87402
sS'name'
p87403
S'right_boundary'
p87404
sS'required'
p87405
I00
sS'group_name'
p87406
Nsa(dp87407
S'description'
p87408
S'name of the top (y) boundary\n'
p87409
sS'cpp_type'
p87410
S'BoundaryName'
p87411
sS'default'
p87412
S'top_boundary'
p87413
sS'name'
p87414
S'top_boundary'
p87415
sS'required'
p87416
I00
sS'group_name'
p87417
Nsa(dp87418
S'description'
p87419
g3
sS'cpp_type'
p87420
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87421
sS'default'
p87422
S'TiledMesh'
p87423
sS'name'
p87424
S'type'
p87425
sS'required'
p87426
I00
sS'group_name'
p87427
Nsa(dp87428
S'description'
p87429
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p87430
sS'cpp_type'
p87431
S'unsigned int'
p87432
sS'default'
p87433
S'1'
p87434
sS'name'
p87435
S'x_tiles'
p87436
sS'required'
p87437
I00
sS'group_name'
p87438
Nsa(dp87439
S'description'
p87440
S'The tile width in the x direction\n'
p87441
sS'cpp_type'
p87442
S'double'
p87443
sS'default'
p87444
S'0'
p87445
sS'name'
p87446
S'x_width'
p87447
sS'required'
p87448
I00
sS'group_name'
p87449
Nsa(dp87450
S'description'
p87451
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p87452
sS'cpp_type'
p87453
S'unsigned int'
p87454
sS'default'
p87455
S'1'
p87456
sS'name'
p87457
S'y_tiles'
p87458
sS'required'
p87459
I00
sS'group_name'
p87460
Nsa(dp87461
S'description'
p87462
S'The tile width in the y direction\n'
p87463
sS'cpp_type'
p87464
S'double'
p87465
sS'default'
p87466
S'0'
p87467
sS'name'
p87468
S'y_width'
p87469
sS'required'
p87470
I00
sS'group_name'
p87471
Nsa(dp87472
S'description'
p87473
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p87474
sS'cpp_type'
p87475
S'unsigned int'
p87476
sS'default'
p87477
S'1'
p87478
sS'name'
p87479
S'z_tiles'
p87480
sS'required'
p87481
I00
sS'group_name'
p87482
Nsa(dp87483
S'description'
p87484
S'The tile width in the z direction\n'
p87485
sS'cpp_type'
p87486
S'double'
p87487
sS'default'
p87488
S'0'
p87489
sS'name'
p87490
S'z_width'
p87491
sS'required'
p87492
I00
sS'group_name'
p87493
NsasS'name'
p87494
S'/Mesh/<type>/TiledMesh'
p87495
sasS'parameters'
p87496
NsS'name'
p87497
S'/Mesh/<type>'
p87498
sa(dp87499
S'description'
p87500
g3
sS'subblocks'
p87501
(lp87502
(dp87503
S'description'
p87504
g3
sS'subblocks'
p87505
NsS'parameters'
p87506
(lp87507
(dp87508
S'description'
p87509
S'Master side ID\n'
p87510
sS'cpp_type'
p87511
S'BoundaryName'
p87512
sS'default'
p87513
g3
sS'name'
p87514
S'master'
p87515
sS'required'
p87516
I01
sS'group_name'
p87517
Nsa(dp87518
S'description'
p87519
S'Slave side ID\n'
p87520
sS'cpp_type'
p87521
S'BoundaryName'
p87522
sS'default'
p87523
g3
sS'name'
p87524
S'slave'
p87525
sS'required'
p87526
I01
sS'group_name'
p87527
Nsa(dp87528
S'description'
p87529
S'Subdomain name that is the mortar interface\n'
p87530
sS'cpp_type'
p87531
S'SubdomainName'
p87532
sS'default'
p87533
g3
sS'name'
p87534
S'subdomain'
p87535
sS'required'
p87536
I01
sS'group_name'
p87537
NsasS'name'
p87538
S'/Mesh/MortarInterfaces/*'
p87539
sasS'parameters'
p87540
NsS'name'
p87541
S'/Mesh/MortarInterfaces'
p87542
sa(dp87543
S'description'
p87544
g3
sS'subblocks'
p87545
(lp87546
(dp87547
S'description'
p87548
g3
sS'subblocks'
p87549
(lp87550
(dp87551
S'description'
p87552
g3
sS'subblocks'
p87553
NsS'parameters'
p87554
(lp87555
(dp87556
S'name'
p87557
S'centroid_partitioner_direction'
p87558
sS'cpp_type'
p87559
S'MooseEnum'
p87560
sS'default'
p87561
g3
sS'description'
p87562
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p87563
sS'required'
p87564
I00
sS'options'
p87565
S'x y z radial'
p87566
sS'group_name'
p87567
Nsa(dp87568
S'description'
p87569
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87570
sS'cpp_type'
p87571
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87572
sS'default'
p87573
g3
sS'name'
p87574
S'control_tags'
p87575
sS'required'
p87576
I00
sS'group_name'
p87577
Nsa(dp87578
S'name'
p87579
S'partitioner'
p87580
sS'cpp_type'
p87581
S'MooseEnum'
p87582
sS'default'
p87583
g3
sS'description'
p87584
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p87585
sS'required'
p87586
I01
sS'options'
p87587
S'metis parmetis linear centroid hilbert_sfc morton_sfc'
p87588
sS'group_name'
p87589
Nsa(dp87590
S'description'
p87591
g3
sS'cpp_type'
p87592
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87593
sS'default'
p87594
S'LibmeshPartitioner'
p87595
sS'name'
p87596
S'type'
p87597
sS'required'
p87598
I00
sS'group_name'
p87599
NsasS'name'
p87600
S'/Mesh/Partitioner/<type>/LibmeshPartitioner'
p87601
sasS'parameters'
p87602
NsS'name'
p87603
S'/Mesh/Partitioner/<type>'
p87604
sasS'parameters'
p87605
(lp87606
(dp87607
S'description'
p87608
S'A string representing the Moose Object that will be built by this Action\n'
p87609
sS'cpp_type'
p87610
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87611
sS'default'
p87612
g3
sS'name'
p87613
S'type'
p87614
sS'required'
p87615
I01
sS'group_name'
p87616
NsasS'name'
p87617
S'/Mesh/Partitioner'
p87618
sasS'parameters'
p87619
(lp87620
(dp87621
S'description'
p87622
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p87623
sS'cpp_type'
p87624
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87625
sS'default'
p87626
g3
sS'name'
p87627
S'displacements'
p87628
sS'required'
p87629
I00
sS'group_name'
p87630
Nsa(dp87631
S'description'
p87632
S'IDs of the block id/name pairs\n'
p87633
sS'cpp_type'
p87634
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87635
sS'default'
p87636
g3
sS'name'
p87637
S'block_id'
p87638
sS'required'
p87639
I00
sS'group_name'
p87640
S'Add Names'
p87641
sa(dp87642
S'description'
p87643
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p87644
sS'cpp_type'
p87645
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p87646
sS'default'
p87647
g3
sS'name'
p87648
S'block_name'
p87649
sS'required'
p87650
I00
sS'group_name'
p87651
S'Add Names'
p87652
sa(dp87653
S'description'
p87654
S'IDs of the boundary id/name pairs\n'
p87655
sS'cpp_type'
p87656
S'std::vector<short, std::allocator<short> >'
p87657
sS'default'
p87658
g3
sS'name'
p87659
S'boundary_id'
p87660
sS'required'
p87661
I00
sS'group_name'
p87662
S'Add Names'
p87663
sa(dp87664
S'description'
p87665
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p87666
sS'cpp_type'
p87667
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87668
sS'default'
p87669
g3
sS'name'
p87670
S'boundary_name'
p87671
sS'required'
p87672
I00
sS'group_name'
p87673
S'Add Names'
p87674
sa(dp87675
S'description'
p87676
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p87677
sS'cpp_type'
p87678
S'bool'
p87679
sS'default'
p87680
S'0'
p87681
sS'name'
p87682
S'construct_side_list_from_node_list'
p87683
sS'required'
p87684
I00
sS'group_name'
p87685
S'Advanced'
p87686
sa(dp87687
S'description'
p87688
S'Boundaries to be ghosted if using Nemesis\n'
p87689
sS'cpp_type'
p87690
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87691
sS'default'
p87692
g3
sS'name'
p87693
S'ghosted_boundaries'
p87694
sS'required'
p87695
I00
sS'group_name'
p87696
S'Advanced'
p87697
sa(dp87698
S'description'
p87699
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p87700
sS'cpp_type'
p87701
S'std::vector<double, std::allocator<double> >'
p87702
sS'default'
p87703
g3
sS'name'
p87704
S'ghosted_boundaries_inflation'
p87705
sS'required'
p87706
I00
sS'group_name'
p87707
S'Advanced'
p87708
sa(dp87709
S'description'
p87710
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p87711
sS'cpp_type'
p87712
S'unsigned int'
p87713
sS'default'
p87714
S'40'
p87715
sS'name'
p87716
S'patch_size'
p87717
sS'required'
p87718
I00
sS'group_name'
p87719
S'Advanced'
p87720
sa(dp87721
S'description'
p87722
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p87723
sS'cpp_type'
p87724
S'bool'
p87725
sS'default'
p87726
S'0'
p87727
sS'name'
p87728
S'second_order'
p87729
sS'required'
p87730
I00
sS'group_name'
p87731
S'Advanced'
p87732
sa(dp87733
S'description'
p87734
S"If true the mesh won't be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n"
p87735
sS'cpp_type'
p87736
S'bool'
p87737
sS'default'
p87738
S'0'
p87739
sS'name'
p87740
S'skip_partitioning'
p87741
sS'required'
p87742
I00
sS'group_name'
p87743
S'Advanced'
p87744
sa(dp87745
S'description'
p87746
S'A string representing the Moose Object that will be built by this Action\n'
p87747
sS'cpp_type'
p87748
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87749
sS'default'
p87750
S'FileMesh'
p87751
sS'name'
p87752
S'type'
p87753
sS'required'
p87754
I01
sS'group_name'
p87755
Nsa(dp87756
S'description'
p87757
S'Specify the level of uniform refinement applied to the initial mesh\n'
p87758
sS'cpp_type'
p87759
S'unsigned int'
p87760
sS'default'
p87761
S'0'
p87762
sS'name'
p87763
S'uniform_refine'
p87764
sS'required'
p87765
I00
sS'group_name'
p87766
NsasS'name'
p87767
S'/Mesh'
p87768
sa(dp87769
S'description'
p87770
g3
sS'subblocks'
p87771
(lp87772
(dp87773
S'description'
p87774
g3
sS'subblocks'
p87775
NsS'parameters'
p87776
(lp87777
(dp87778
S'description'
p87779
S'A string representing the Moose Object that will be built by this Action\n'
p87780
sS'cpp_type'
p87781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87782
sS'default'
p87783
g3
sS'name'
p87784
S'type'
p87785
sS'required'
p87786
I01
sS'group_name'
p87787
NsasS'name'
p87788
S'/MeshModifiers/*'
p87789
sa(dp87790
S'description'
p87791
g3
sS'subblocks'
p87792
NsS'parameters'
p87793
(lp87794
(dp87795
S'description'
p87796
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87797
sS'cpp_type'
p87798
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87799
sS'default'
p87800
g3
sS'name'
p87801
S'control_tags'
p87802
sS'required'
p87803
I00
sS'group_name'
p87804
Nsa(dp87805
S'description'
p87806
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87807
sS'cpp_type'
p87808
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87809
sS'default'
p87810
g3
sS'name'
p87811
S'depends_on'
p87812
sS'required'
p87813
I00
sS'group_name'
p87814
Nsa(dp87815
S'description'
p87816
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p87817
sS'cpp_type'
p87818
S'bool'
p87819
sS'default'
p87820
S'0'
p87821
sS'name'
p87822
S'fixed_normal'
p87823
sS'required'
p87824
I00
sS'group_name'
p87825
Nsa(dp87826
S'description'
p87827
g3
sS'cpp_type'
p87828
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87829
sS'default'
p87830
S'AddAllSideSetsByNormals'
p87831
sS'name'
p87832
S'type'
p87833
sS'required'
p87834
I00
sS'group_name'
p87835
Nsa(dp87836
S'description'
p87837
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p87838
sS'cpp_type'
p87839
S'double'
p87840
sS'default'
p87841
S'0.1'
p87842
sS'name'
p87843
S'variance'
p87844
sS'required'
p87845
I00
sS'group_name'
p87846
NsasS'name'
p87847
S'/MeshModifiers/AddAllSideSetsByNormals'
p87848
sa(dp87849
S'description'
p87850
g3
sS'subblocks'
p87851
NsS'parameters'
p87852
(lp87853
(dp87854
S'description'
p87855
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87856
sS'cpp_type'
p87857
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87858
sS'default'
p87859
g3
sS'name'
p87860
S'control_tags'
p87861
sS'required'
p87862
I00
sS'group_name'
p87863
Nsa(dp87864
S'description'
p87865
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p87866
sS'cpp_type'
p87867
S'std::vector<double, std::allocator<double> >'
p87868
sS'default'
p87869
g3
sS'name'
p87870
S'coord'
p87871
sS'required'
p87872
I00
sS'group_name'
p87873
Nsa(dp87874
S'description'
p87875
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87876
sS'cpp_type'
p87877
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87878
sS'default'
p87879
g3
sS'name'
p87880
S'depends_on'
p87881
sS'required'
p87882
I00
sS'group_name'
p87883
Nsa(dp87884
S'description'
p87885
S'The name of the boundary to create\n'
p87886
sS'cpp_type'
p87887
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p87888
sS'default'
p87889
g3
sS'name'
p87890
S'new_boundary'
p87891
sS'required'
p87892
I01
sS'group_name'
p87893
Nsa(dp87894
S'description'
p87895
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p87896
sS'cpp_type'
p87897
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p87898
sS'default'
p87899
g3
sS'name'
p87900
S'nodes'
p87901
sS'required'
p87902
I00
sS'group_name'
p87903
Nsa(dp87904
S'description'
p87905
S'The tolerance in which two nodes are considered identical\n'
p87906
sS'cpp_type'
p87907
S'double'
p87908
sS'default'
p87909
S'1e-06'
p87910
sS'name'
p87911
S'tolerance'
p87912
sS'required'
p87913
I00
sS'group_name'
p87914
Nsa(dp87915
S'description'
p87916
g3
sS'cpp_type'
p87917
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87918
sS'default'
p87919
S'AddExtraNodeset'
p87920
sS'name'
p87921
S'type'
p87922
sS'required'
p87923
I00
sS'group_name'
p87924
NsasS'name'
p87925
S'/MeshModifiers/AddExtraNodeset'
p87926
sa(dp87927
S'description'
p87928
g3
sS'subblocks'
p87929
NsS'parameters'
p87930
(lp87931
(dp87932
S'description'
p87933
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p87934
sS'cpp_type'
p87935
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87936
sS'default'
p87937
g3
sS'name'
p87938
S'control_tags'
p87939
sS'required'
p87940
I00
sS'group_name'
p87941
Nsa(dp87942
S'description'
p87943
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p87944
sS'cpp_type'
p87945
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p87946
sS'default'
p87947
g3
sS'name'
p87948
S'depends_on'
p87949
sS'required'
p87950
I00
sS'group_name'
p87951
Nsa(dp87952
S'description'
p87953
S'New subdomain IDs of all elements\n'
p87954
sS'cpp_type'
p87955
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p87956
sS'default'
p87957
g3
sS'name'
p87958
S'element_ids'
p87959
sS'required'
p87960
I00
sS'group_name'
p87961
Nsa(dp87962
S'description'
p87963
S'New subdomain IDs of all elements\n'
p87964
sS'cpp_type'
p87965
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p87966
sS'default'
p87967
g3
sS'name'
p87968
S'subdomain_ids'
p87969
sS'required'
p87970
I01
sS'group_name'
p87971
Nsa(dp87972
S'description'
p87973
g3
sS'cpp_type'
p87974
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p87975
sS'default'
p87976
S'AssignElementSubdomainID'
p87977
sS'name'
p87978
S'type'
p87979
sS'required'
p87980
I00
sS'group_name'
p87981
NsasS'name'
p87982
S'/MeshModifiers/AssignElementSubdomainID'
p87983
sa(dp87984
S'description'
p87985
g3
sS'subblocks'
p87986
NsS'parameters'
p87987
(lp87988
(dp87989
S'description'
p87990
S'The bottom left point (in x,y,z with spaces in-between) of the box which contains the centroids of the elements whose nodes will be selected.\n'
p87991
sS'cpp_type'
p87992
S'libMesh::VectorValue<double>'
p87993
sS'default'
p87994
g3
sS'name'
p87995
S'bottom_left'
p87996
sS'required'
p87997
I00
sS'group_name'
p87998
Nsa(dp87999
S'description'
p88000
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88001
sS'cpp_type'
p88002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88003
sS'default'
p88004
g3
sS'name'
p88005
S'control_tags'
p88006
sS'required'
p88007
I00
sS'group_name'
p88008
Nsa(dp88009
S'description'
p88010
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88011
sS'cpp_type'
p88012
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88013
sS'default'
p88014
g3
sS'name'
p88015
S'depends_on'
p88016
sS'required'
p88017
I00
sS'group_name'
p88018
Nsa(dp88019
S'name'
p88020
S'location'
p88021
sS'cpp_type'
p88022
S'MooseEnum'
p88023
sS'default'
p88024
S'INSIDE'
p88025
sS'description'
p88026
S'Control of where the nodeset is to be set\n'
p88027
sS'required'
p88028
I00
sS'options'
p88029
S'INSIDE OUTSIDE'
p88030
sS'group_name'
p88031
Nsa(dp88032
S'description'
p88033
S'The name of the nodeset to create\n'
p88034
sS'cpp_type'
p88035
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88036
sS'default'
p88037
g3
sS'name'
p88038
S'new_boundary'
p88039
sS'required'
p88040
I01
sS'group_name'
p88041
Nsa(dp88042
S'description'
p88043
S'The bottom left point (in x,y,z with spaces in-between) of the box which contains the centroids of the elements whose nodes will be selected.\n'
p88044
sS'cpp_type'
p88045
S'libMesh::VectorValue<double>'
p88046
sS'default'
p88047
g3
sS'name'
p88048
S'top_right'
p88049
sS'required'
p88050
I00
sS'group_name'
p88051
Nsa(dp88052
S'description'
p88053
g3
sS'cpp_type'
p88054
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88055
sS'default'
p88056
S'BoundingBoxNodeSet'
p88057
sS'name'
p88058
S'type'
p88059
sS'required'
p88060
I00
sS'group_name'
p88061
NsasS'name'
p88062
S'/MeshModifiers/BoundingBoxNodeSet'
p88063
sa(dp88064
S'description'
p88065
g3
sS'subblocks'
p88066
NsS'parameters'
p88067
(lp88068
(dp88069
S'description'
p88070
S'The image component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first component of the image\n'
p88071
sS'cpp_type'
p88072
S'unsigned int'
p88073
sS'default'
p88074
g3
sS'name'
p88075
S'component'
p88076
sS'required'
p88077
I00
sS'group_name'
p88078
Nsa(dp88079
S'description'
p88080
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88081
sS'cpp_type'
p88082
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88083
sS'default'
p88084
g3
sS'name'
p88085
S'control_tags'
p88086
sS'required'
p88087
I00
sS'group_name'
p88088
Nsa(dp88089
S'description'
p88090
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88091
sS'cpp_type'
p88092
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88093
sS'default'
p88094
g3
sS'name'
p88095
S'depends_on'
p88096
sS'required'
p88097
I00
sS'group_name'
p88098
Nsa(dp88099
S'description'
p88100
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p88101
sS'cpp_type'
p88102
S'libMesh::Point'
p88103
sS'default'
p88104
g3
sS'name'
p88105
S'dimensions'
p88106
sS'required'
p88107
I00
sS'group_name'
p88108
Nsa(dp88109
S'description'
p88110
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p88111
sS'cpp_type'
p88112
S'FileName'
p88113
sS'default'
p88114
g3
sS'name'
p88115
S'file'
p88116
sS'required'
p88117
I00
sS'group_name'
p88118
Nsa(dp88119
S'description'
p88120
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p88121
sS'cpp_type'
p88122
S'FileNameNoExtension'
p88123
sS'default'
p88124
g3
sS'name'
p88125
S'file_base'
p88126
sS'required'
p88127
I00
sS'group_name'
p88128
Nsa(dp88129
S'description'
p88130
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p88131
sS'cpp_type'
p88132
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p88133
sS'default'
p88134
g3
sS'name'
p88135
S'file_range'
p88136
sS'required'
p88137
I00
sS'group_name'
p88138
Nsa(dp88139
S'description'
p88140
S"Suffix of the file to open, e.g. 'png'\n"
p88141
sS'cpp_type'
p88142
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88143
sS'default'
p88144
g3
sS'name'
p88145
S'file_suffix'
p88146
sS'required'
p88147
I00
sS'group_name'
p88148
Nsa(dp88149
S'description'
p88150
S'Flip the image along the x-axis\n'
p88151
sS'cpp_type'
p88152
S'bool'
p88153
sS'default'
p88154
S'0'
p88155
sS'name'
p88156
S'flip_x'
p88157
sS'required'
p88158
I00
sS'group_name'
p88159
S'Flip'
p88160
sa(dp88161
S'description'
p88162
S'Flip the image along the y-axis\n'
p88163
sS'cpp_type'
p88164
S'bool'
p88165
sS'default'
p88166
S'0'
p88167
sS'name'
p88168
S'flip_y'
p88169
sS'required'
p88170
I00
sS'group_name'
p88171
S'Flip'
p88172
sa(dp88173
S'description'
p88174
S'Flip the image along the z-axis\n'
p88175
sS'cpp_type'
p88176
S'bool'
p88177
sS'default'
p88178
S'0'
p88179
sS'name'
p88180
S'flip_z'
p88181
sS'required'
p88182
I00
sS'group_name'
p88183
S'Flip'
p88184
sa(dp88185
S'description'
p88186
S'The value to set for data less than the threshold value\n'
p88187
sS'cpp_type'
p88188
S'double'
p88189
sS'default'
p88190
S'0'
p88191
sS'name'
p88192
S'lower_value'
p88193
sS'required'
p88194
I00
sS'group_name'
p88195
S'Threshold'
p88196
sa(dp88197
S'description'
p88198
S'Origin of the image (defaults to mesh origin)\n'
p88199
sS'cpp_type'
p88200
S'libMesh::Point'
p88201
sS'default'
p88202
g3
sS'name'
p88203
S'origin'
p88204
sS'required'
p88205
I00
sS'group_name'
p88206
Nsa(dp88207
S'description'
p88208
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p88209
sS'cpp_type'
p88210
S'double'
p88211
sS'default'
p88212
S'1'
p88213
sS'name'
p88214
S'scale'
p88215
sS'required'
p88216
I00
sS'group_name'
p88217
S'Rescale'
p88218
sa(dp88219
S'description'
p88220
S'Value to add to all pixels; occurs prior to scaling\n'
p88221
sS'cpp_type'
p88222
S'double'
p88223
sS'default'
p88224
S'0'
p88225
sS'name'
p88226
S'shift'
p88227
sS'required'
p88228
I00
sS'group_name'
p88229
S'Rescale'
p88230
sa(dp88231
S'description'
p88232
S'The threshold value\n'
p88233
sS'cpp_type'
p88234
S'double'
p88235
sS'default'
p88236
g3
sS'name'
p88237
S'threshold'
p88238
sS'required'
p88239
I00
sS'group_name'
p88240
S'Threshold'
p88241
sa(dp88242
S'description'
p88243
g3
sS'cpp_type'
p88244
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88245
sS'default'
p88246
S'ImageSubdomain'
p88247
sS'name'
p88248
S'type'
p88249
sS'required'
p88250
I00
sS'group_name'
p88251
Nsa(dp88252
S'description'
p88253
S'The value to set for data greater than the threshold value\n'
p88254
sS'cpp_type'
p88255
S'double'
p88256
sS'default'
p88257
S'1'
p88258
sS'name'
p88259
S'upper_value'
p88260
sS'required'
p88261
I00
sS'group_name'
p88262
S'Threshold'
p88263
sasS'name'
p88264
S'/MeshModifiers/ImageSubdomain'
p88265
sa(dp88266
S'description'
p88267
g3
sS'subblocks'
p88268
NsS'parameters'
p88269
(lp88270
(dp88271
S'description'
p88272
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p88273
sS'cpp_type'
p88274
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88275
sS'default'
p88276
g3
sS'name'
p88277
S'bottom_sideset'
p88278
sS'required'
p88279
I00
sS'group_name'
p88280
Nsa(dp88281
S'description'
p88282
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88283
sS'cpp_type'
p88284
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88285
sS'default'
p88286
g3
sS'name'
p88287
S'control_tags'
p88288
sS'required'
p88289
I00
sS'group_name'
p88290
Nsa(dp88291
S'description'
p88292
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88293
sS'cpp_type'
p88294
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88295
sS'default'
p88296
g3
sS'name'
p88297
S'depends_on'
p88298
sS'required'
p88299
I00
sS'group_name'
p88300
Nsa(dp88301
S'description'
p88302
S'The subdomains that will be remapped for specific layers\n'
p88303
sS'cpp_type'
p88304
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p88305
sS'default'
p88306
g3
sS'name'
p88307
S'existing_subdomains'
p88308
sS'required'
p88309
I00
sS'group_name'
p88310
Nsa(dp88311
S'description'
p88312
S'The direction and length of the extrusion\n'
p88313
sS'cpp_type'
p88314
S'libMesh::VectorValue<double>'
p88315
sS'default'
p88316
g3
sS'name'
p88317
S'extrusion_vector'
p88318
sS'required'
p88319
I01
sS'group_name'
p88320
Nsa(dp88321
S'description'
p88322
S'The layers where the "existing_subdomain" will be remapped to new ids\n'
p88323
sS'cpp_type'
p88324
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p88325
sS'default'
p88326
g3
sS'name'
p88327
S'layers'
p88328
sS'required'
p88329
I00
sS'group_name'
p88330
Nsa(dp88331
S'description'
p88332
S'The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n'
p88333
sS'cpp_type'
p88334
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p88335
sS'default'
p88336
g3
sS'name'
p88337
S'new_ids'
p88338
sS'required'
p88339
I00
sS'group_name'
p88340
Nsa(dp88341
S'description'
p88342
S'The number of layers in the extruded mesh\n'
p88343
sS'cpp_type'
p88344
S'unsigned int'
p88345
sS'default'
p88346
g3
sS'name'
p88347
S'num_layers'
p88348
sS'required'
p88349
I01
sS'group_name'
p88350
Nsa(dp88351
S'description'
p88352
S'The boundary that will be to the top of the extruded mesh\n'
p88353
sS'cpp_type'
p88354
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88355
sS'default'
p88356
g3
sS'name'
p88357
S'top_sideset'
p88358
sS'required'
p88359
I00
sS'group_name'
p88360
Nsa(dp88361
S'description'
p88362
g3
sS'cpp_type'
p88363
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88364
sS'default'
p88365
S'MeshExtruder'
p88366
sS'name'
p88367
S'type'
p88368
sS'required'
p88369
I00
sS'group_name'
p88370
NsasS'name'
p88371
S'/MeshModifiers/MeshExtruder'
p88372
sa(dp88373
S'description'
p88374
g3
sS'subblocks'
p88375
NsS'parameters'
p88376
(lp88377
(dp88378
S'description'
p88379
S'Subdomain id to set for inside/outside the bounding box\n'
p88380
sS'cpp_type'
p88381
S'unsigned short'
p88382
sS'default'
p88383
g3
sS'name'
p88384
S'block_id'
p88385
sS'required'
p88386
I01
sS'group_name'
p88387
Nsa(dp88388
S'description'
p88389
S"The center (many people spell this 'center') of the box.\n"
p88390
sS'cpp_type'
p88391
S'libMesh::Point'
p88392
sS'default'
p88393
g3
sS'name'
p88394
S'center'
p88395
sS'required'
p88396
I01
sS'group_name'
p88397
Nsa(dp88398
S'description'
p88399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88400
sS'cpp_type'
p88401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88402
sS'default'
p88403
g3
sS'name'
p88404
S'control_tags'
p88405
sS'required'
p88406
I00
sS'group_name'
p88407
Nsa(dp88408
S'description'
p88409
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88410
sS'cpp_type'
p88411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88412
sS'default'
p88413
g3
sS'name'
p88414
S'depends_on'
p88415
sS'required'
p88416
I00
sS'group_name'
p88417
Nsa(dp88418
S'description'
p88419
S'The height of the box\n'
p88420
sS'cpp_type'
p88421
S'double'
p88422
sS'default'
p88423
g3
sS'name'
p88424
S'height'
p88425
sS'required'
p88426
I01
sS'group_name'
p88427
Nsa(dp88428
S'description'
p88429
S'The length of the box\n'
p88430
sS'cpp_type'
p88431
S'double'
p88432
sS'default'
p88433
g3
sS'name'
p88434
S'length'
p88435
sS'required'
p88436
I01
sS'group_name'
p88437
Nsa(dp88438
S'description'
p88439
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p88440
sS'cpp_type'
p88441
S'libMesh::VectorValue<double>'
p88442
sS'default'
p88443
g3
sS'name'
p88444
S'length_direction'
p88445
sS'required'
p88446
I01
sS'group_name'
p88447
Nsa(dp88448
S'name'
p88449
S'location'
p88450
sS'cpp_type'
p88451
S'MooseEnum'
p88452
sS'default'
p88453
S'INSIDE'
p88454
sS'description'
p88455
S'Control of where the subdomain id is to be set\n'
p88456
sS'required'
p88457
I00
sS'options'
p88458
S'INSIDE OUTSIDE'
p88459
sS'group_name'
p88460
Nsa(dp88461
S'description'
p88462
g3
sS'cpp_type'
p88463
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88464
sS'default'
p88465
S'OrientedSubdomainBoundingBox'
p88466
sS'name'
p88467
S'type'
p88468
sS'required'
p88469
I00
sS'group_name'
p88470
Nsa(dp88471
S'description'
p88472
S'The width of the box\n'
p88473
sS'cpp_type'
p88474
S'double'
p88475
sS'default'
p88476
g3
sS'name'
p88477
S'width'
p88478
sS'required'
p88479
I01
sS'group_name'
p88480
Nsa(dp88481
S'description'
p88482
S'The direction along which the width is oriented.\n'
p88483
sS'cpp_type'
p88484
S'libMesh::VectorValue<double>'
p88485
sS'default'
p88486
g3
sS'name'
p88487
S'width_direction'
p88488
sS'required'
p88489
I01
sS'group_name'
p88490
NsasS'name'
p88491
S'/MeshModifiers/OrientedSubdomainBoundingBox'
p88492
sa(dp88493
S'description'
p88494
S'RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n'
p88495
sS'subblocks'
p88496
NsS'parameters'
p88497
(lp88498
(dp88499
S'description'
p88500
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88501
sS'cpp_type'
p88502
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88503
sS'default'
p88504
g3
sS'name'
p88505
S'control_tags'
p88506
sS'required'
p88507
I00
sS'group_name'
p88508
Nsa(dp88509
S'description'
p88510
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88511
sS'cpp_type'
p88512
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88513
sS'default'
p88514
g3
sS'name'
p88515
S'depends_on'
p88516
sS'required'
p88517
I00
sS'group_name'
p88518
Nsa(dp88519
S'description'
p88520
S'Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p88521
sS'cpp_type'
p88522
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p88523
sS'default'
p88524
g3
sS'name'
p88525
S'new_block_id'
p88526
sS'required'
p88527
I00
sS'group_name'
p88528
Nsa(dp88529
S'description'
p88530
S'Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p88531
sS'cpp_type'
p88532
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88533
sS'default'
p88534
g3
sS'name'
p88535
S'new_block_name'
p88536
sS'required'
p88537
I00
sS'group_name'
p88538
Nsa(dp88539
S'description'
p88540
S'Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n'
p88541
sS'cpp_type'
p88542
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p88543
sS'default'
p88544
g3
sS'name'
p88545
S'old_block_id'
p88546
sS'required'
p88547
I00
sS'group_name'
p88548
Nsa(dp88549
S'description'
p88550
S'Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n'
p88551
sS'cpp_type'
p88552
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88553
sS'default'
p88554
g3
sS'name'
p88555
S'old_block_name'
p88556
sS'required'
p88557
I00
sS'group_name'
p88558
Nsa(dp88559
S'description'
p88560
g3
sS'cpp_type'
p88561
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88562
sS'default'
p88563
S'RenameBlock'
p88564
sS'name'
p88565
S'type'
p88566
sS'required'
p88567
I00
sS'group_name'
p88568
NsasS'name'
p88569
S'/MeshModifiers/RenameBlock'
p88570
sa(dp88571
S'description'
p88572
S'Adds element faces that are on the exterior of the given block to the sidesets specified\n'
p88573
sS'subblocks'
p88574
NsS'parameters'
p88575
(lp88576
(dp88577
S'description'
p88578
S'The list of block ids (SubdomainID) that this object will be applied\n'
p88579
sS'cpp_type'
p88580
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p88581
sS'default'
p88582
g3
sS'name'
p88583
S'block'
p88584
sS'required'
p88585
I00
sS'group_name'
p88586
Nsa(dp88587
S'description'
p88588
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88589
sS'cpp_type'
p88590
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88591
sS'default'
p88592
g3
sS'name'
p88593
S'control_tags'
p88594
sS'required'
p88595
I00
sS'group_name'
p88596
Nsa(dp88597
S'description'
p88598
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88599
sS'cpp_type'
p88600
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88601
sS'default'
p88602
g3
sS'name'
p88603
S'depends_on'
p88604
sS'required'
p88605
I00
sS'group_name'
p88606
Nsa(dp88607
S'description'
p88608
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p88609
sS'cpp_type'
p88610
S'bool'
p88611
sS'default'
p88612
S'0'
p88613
sS'name'
p88614
S'fixed_normal'
p88615
sS'required'
p88616
I00
sS'group_name'
p88617
Nsa(dp88618
S'description'
p88619
S'The list of boundary IDs to create on the supplied subdomain\n'
p88620
sS'cpp_type'
p88621
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88622
sS'default'
p88623
g3
sS'name'
p88624
S'new_boundary'
p88625
sS'required'
p88626
I01
sS'group_name'
p88627
Nsa(dp88628
S'description'
p88629
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p88630
sS'cpp_type'
p88631
S'libMesh::Point'
p88632
sS'default'
p88633
g3
sS'name'
p88634
S'normal'
p88635
sS'required'
p88636
I00
sS'group_name'
p88637
Nsa(dp88638
S'description'
p88639
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p88640
sS'cpp_type'
p88641
S'double'
p88642
sS'default'
p88643
S'0.1'
p88644
sS'name'
p88645
S'normal_tol'
p88646
sS'required'
p88647
I00
sS'group_name'
p88648
Nsa(dp88649
S'description'
p88650
g3
sS'cpp_type'
p88651
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88652
sS'default'
p88653
S'SideSetsAroundSubdomain'
p88654
sS'name'
p88655
S'type'
p88656
sS'required'
p88657
I00
sS'group_name'
p88658
Nsa(dp88659
S'description'
p88660
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p88661
sS'cpp_type'
p88662
S'double'
p88663
sS'default'
p88664
S'0.1'
p88665
sS'name'
p88666
S'variance'
p88667
sS'required'
p88668
I00
sS'group_name'
p88669
NsasS'name'
p88670
S'/MeshModifiers/SideSetsAroundSubdomain'
p88671
sa(dp88672
S'description'
p88673
g3
sS'subblocks'
p88674
NsS'parameters'
p88675
(lp88676
(dp88677
S'description'
p88678
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88679
sS'cpp_type'
p88680
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88681
sS'default'
p88682
g3
sS'name'
p88683
S'control_tags'
p88684
sS'required'
p88685
I00
sS'group_name'
p88686
Nsa(dp88687
S'description'
p88688
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88689
sS'cpp_type'
p88690
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88691
sS'default'
p88692
g3
sS'name'
p88693
S'depends_on'
p88694
sS'required'
p88695
I00
sS'group_name'
p88696
Nsa(dp88697
S'description'
p88698
S'The first block for which to draw a sideset between\n'
p88699
sS'cpp_type'
p88700
S'SubdomainName'
p88701
sS'default'
p88702
g3
sS'name'
p88703
S'master_block'
p88704
sS'required'
p88705
I01
sS'group_name'
p88706
Nsa(dp88707
S'description'
p88708
S'The name of the boundary to create\n'
p88709
sS'cpp_type'
p88710
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88711
sS'default'
p88712
g3
sS'name'
p88713
S'new_boundary'
p88714
sS'required'
p88715
I01
sS'group_name'
p88716
Nsa(dp88717
S'description'
p88718
S'The second block for which to draw a sideset between\n'
p88719
sS'cpp_type'
p88720
S'SubdomainName'
p88721
sS'default'
p88722
g3
sS'name'
p88723
S'paired_block'
p88724
sS'required'
p88725
I01
sS'group_name'
p88726
Nsa(dp88727
S'description'
p88728
g3
sS'cpp_type'
p88729
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88730
sS'default'
p88731
S'SideSetsBetweenSubdomains'
p88732
sS'name'
p88733
S'type'
p88734
sS'required'
p88735
I00
sS'group_name'
p88736
NsasS'name'
p88737
S'/MeshModifiers/SideSetsBetweenSubdomains'
p88738
sa(dp88739
S'description'
p88740
g3
sS'subblocks'
p88741
NsS'parameters'
p88742
(lp88743
(dp88744
S'description'
p88745
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88746
sS'cpp_type'
p88747
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88748
sS'default'
p88749
g3
sS'name'
p88750
S'control_tags'
p88751
sS'required'
p88752
I00
sS'group_name'
p88753
Nsa(dp88754
S'description'
p88755
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88756
sS'cpp_type'
p88757
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88758
sS'default'
p88759
g3
sS'name'
p88760
S'depends_on'
p88761
sS'required'
p88762
I00
sS'group_name'
p88763
Nsa(dp88764
S'description'
p88765
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p88766
sS'cpp_type'
p88767
S'bool'
p88768
sS'default'
p88769
S'0'
p88770
sS'name'
p88771
S'fixed_normal'
p88772
sS'required'
p88773
I00
sS'group_name'
p88774
Nsa(dp88775
S'description'
p88776
S'The name of the boundary to create\n'
p88777
sS'cpp_type'
p88778
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88779
sS'default'
p88780
g3
sS'name'
p88781
S'new_boundary'
p88782
sS'required'
p88783
I01
sS'group_name'
p88784
Nsa(dp88785
S'description'
p88786
S'A list of normals for which to start painting sidesets\n'
p88787
sS'cpp_type'
p88788
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p88789
sS'default'
p88790
g3
sS'name'
p88791
S'normals'
p88792
sS'required'
p88793
I01
sS'group_name'
p88794
Nsa(dp88795
S'description'
p88796
g3
sS'cpp_type'
p88797
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88798
sS'default'
p88799
S'SideSetsFromNormals'
p88800
sS'name'
p88801
S'type'
p88802
sS'required'
p88803
I00
sS'group_name'
p88804
Nsa(dp88805
S'description'
p88806
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p88807
sS'cpp_type'
p88808
S'double'
p88809
sS'default'
p88810
S'0.1'
p88811
sS'name'
p88812
S'variance'
p88813
sS'required'
p88814
I00
sS'group_name'
p88815
NsasS'name'
p88816
S'/MeshModifiers/SideSetsFromNormals'
p88817
sa(dp88818
S'description'
p88819
g3
sS'subblocks'
p88820
NsS'parameters'
p88821
(lp88822
(dp88823
S'description'
p88824
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88825
sS'cpp_type'
p88826
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88827
sS'default'
p88828
g3
sS'name'
p88829
S'control_tags'
p88830
sS'required'
p88831
I00
sS'group_name'
p88832
Nsa(dp88833
S'description'
p88834
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88835
sS'cpp_type'
p88836
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88837
sS'default'
p88838
g3
sS'name'
p88839
S'depends_on'
p88840
sS'required'
p88841
I00
sS'group_name'
p88842
Nsa(dp88843
S'description'
p88844
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p88845
sS'cpp_type'
p88846
S'bool'
p88847
sS'default'
p88848
S'0'
p88849
sS'name'
p88850
S'fixed_normal'
p88851
sS'required'
p88852
I00
sS'group_name'
p88853
Nsa(dp88854
S'description'
p88855
S'The name of the boundary to create\n'
p88856
sS'cpp_type'
p88857
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p88858
sS'default'
p88859
g3
sS'name'
p88860
S'new_boundary'
p88861
sS'required'
p88862
I01
sS'group_name'
p88863
Nsa(dp88864
S'description'
p88865
S'A list of points from which to start painting sidesets\n'
p88866
sS'cpp_type'
p88867
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p88868
sS'default'
p88869
g3
sS'name'
p88870
S'points'
p88871
sS'required'
p88872
I01
sS'group_name'
p88873
Nsa(dp88874
S'description'
p88875
g3
sS'cpp_type'
p88876
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88877
sS'default'
p88878
S'SideSetsFromPoints'
p88879
sS'name'
p88880
S'type'
p88881
sS'required'
p88882
I00
sS'group_name'
p88883
Nsa(dp88884
S'description'
p88885
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p88886
sS'cpp_type'
p88887
S'double'
p88888
sS'default'
p88889
S'0.1'
p88890
sS'name'
p88891
S'variance'
p88892
sS'required'
p88893
I00
sS'group_name'
p88894
NsasS'name'
p88895
S'/MeshModifiers/SideSetsFromPoints'
p88896
sa(dp88897
S'description'
p88898
g3
sS'subblocks'
p88899
NsS'parameters'
p88900
(lp88901
(dp88902
S'description'
p88903
S'Subdomain id to set for inside/outside the bounding box\n'
p88904
sS'cpp_type'
p88905
S'unsigned short'
p88906
sS'default'
p88907
g3
sS'name'
p88908
S'block_id'
p88909
sS'required'
p88910
I01
sS'group_name'
p88911
Nsa(dp88912
S'description'
p88913
S'Subdomain name to set for inside/outside the bounding box (optional)\n'
p88914
sS'cpp_type'
p88915
S'SubdomainName'
p88916
sS'default'
p88917
g3
sS'name'
p88918
S'block_name'
p88919
sS'required'
p88920
I00
sS'group_name'
p88921
Nsa(dp88922
S'description'
p88923
S'The bottom left point (in x,y,z with spaces in-between).\n'
p88924
sS'cpp_type'
p88925
S'libMesh::VectorValue<double>'
p88926
sS'default'
p88927
g3
sS'name'
p88928
S'bottom_left'
p88929
sS'required'
p88930
I01
sS'group_name'
p88931
Nsa(dp88932
S'description'
p88933
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88934
sS'cpp_type'
p88935
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88936
sS'default'
p88937
g3
sS'name'
p88938
S'control_tags'
p88939
sS'required'
p88940
I00
sS'group_name'
p88941
Nsa(dp88942
S'description'
p88943
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p88944
sS'cpp_type'
p88945
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88946
sS'default'
p88947
g3
sS'name'
p88948
S'depends_on'
p88949
sS'required'
p88950
I00
sS'group_name'
p88951
Nsa(dp88952
S'name'
p88953
S'location'
p88954
sS'cpp_type'
p88955
S'MooseEnum'
p88956
sS'default'
p88957
S'INSIDE'
p88958
sS'description'
p88959
S'Control of where the subdomain id is to be set\n'
p88960
sS'required'
p88961
I00
sS'options'
p88962
S'INSIDE OUTSIDE'
p88963
sS'group_name'
p88964
Nsa(dp88965
S'description'
p88966
S'The bottom left point (in x,y,z with spaces in-between).\n'
p88967
sS'cpp_type'
p88968
S'libMesh::VectorValue<double>'
p88969
sS'default'
p88970
g3
sS'name'
p88971
S'top_right'
p88972
sS'required'
p88973
I01
sS'group_name'
p88974
Nsa(dp88975
S'description'
p88976
g3
sS'cpp_type'
p88977
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p88978
sS'default'
p88979
S'SubdomainBoundingBox'
p88980
sS'name'
p88981
S'type'
p88982
sS'required'
p88983
I00
sS'group_name'
p88984
NsasS'name'
p88985
S'/MeshModifiers/SubdomainBoundingBox'
p88986
sa(dp88987
S'description'
p88988
g3
sS'subblocks'
p88989
NsS'parameters'
p88990
(lp88991
(dp88992
S'description'
p88993
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p88994
sS'cpp_type'
p88995
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p88996
sS'default'
p88997
g3
sS'name'
p88998
S'control_tags'
p88999
sS'required'
p89000
I00
sS'group_name'
p89001
Nsa(dp89002
S'description'
p89003
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p89004
sS'cpp_type'
p89005
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89006
sS'default'
p89007
g3
sS'name'
p89008
S'depends_on'
p89009
sS'required'
p89010
I00
sS'group_name'
p89011
Nsa(dp89012
S'name'
p89013
S'transform'
p89014
sS'cpp_type'
p89015
S'MooseEnum'
p89016
sS'default'
p89017
g3
sS'description'
p89018
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p89019
sS'required'
p89020
I01
sS'options'
p89021
S'TRANSLATE ROTATE SCALE'
p89022
sS'group_name'
p89023
Nsa(dp89024
S'description'
p89025
g3
sS'cpp_type'
p89026
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89027
sS'default'
p89028
S'Transform'
p89029
sS'name'
p89030
S'type'
p89031
sS'required'
p89032
I00
sS'group_name'
p89033
Nsa(dp89034
S'description'
p89035
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n'
p89036
sS'cpp_type'
p89037
S'libMesh::VectorValue<double>'
p89038
sS'default'
p89039
g3
sS'name'
p89040
S'vector_value'
p89041
sS'required'
p89042
I01
sS'group_name'
p89043
NsasS'name'
p89044
S'/MeshModifiers/Transform'
p89045
sasS'parameters'
p89046
NsS'name'
p89047
S'/MeshModifiers'
p89048
sa(dp89049
S'description'
p89050
g3
sS'subblocks'
p89051
(lp89052
(dp89053
S'description'
p89054
g3
sS'subblocks'
p89055
(lp89056
(dp89057
S'description'
p89058
g3
sS'subblocks'
p89059
NsS'parameters'
p89060
(lp89061
(dp89062
S'description'
p89063
S'Vector of displacement gradient variables\n'
p89064
sS'cpp_type'
p89065
S'std::vector<VariableName, std::allocator<VariableName> >'
p89066
sS'default'
p89067
g3
sS'name'
p89068
S'displacement_gradients'
p89069
sS'required'
p89070
I01
sS'group_name'
p89071
Nsa(dp89072
S'description'
p89073
S'Vector of displacement variables\n'
p89074
sS'cpp_type'
p89075
S'std::vector<VariableName, std::allocator<VariableName> >'
p89076
sS'default'
p89077
g3
sS'name'
p89078
S'displacements'
p89079
sS'required'
p89080
I01
sS'group_name'
p89081
Nsa(dp89082
S'description'
p89083
S'Specifies a scaling factor to apply to the displacement gradient variables\n'
p89084
sS'cpp_type'
p89085
S'double'
p89086
sS'default'
p89087
S'1'
p89088
sS'name'
p89089
S'scaling'
p89090
sS'required'
p89091
I00
sS'group_name'
p89092
NsasS'name'
p89093
S'/Modules/PhaseField/DisplacementGradients'
p89094
sasS'parameters'
p89095
NsS'name'
p89096
S'/Modules/PhaseField'
p89097
sasS'parameters'
p89098
NsS'name'
p89099
S'/Modules'
p89100
sa(dp89101
S'description'
p89102
g3
sS'subblocks'
p89103
(lp89104
(dp89105
S'description'
p89106
g3
sS'subblocks'
p89107
NsS'parameters'
p89108
(lp89109
(dp89110
S'description'
p89111
S'A string representing the Moose Object that will be built by this Action\n'
p89112
sS'cpp_type'
p89113
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89114
sS'default'
p89115
g3
sS'name'
p89116
S'type'
p89117
sS'required'
p89118
I01
sS'group_name'
p89119
NsasS'name'
p89120
S'/MultiApps/*'
p89121
sa(dp89122
S'description'
p89123
g3
sS'subblocks'
p89124
NsS'parameters'
p89125
(lp89126
(dp89127
S'name'
p89128
S'app_type'
p89129
sS'cpp_type'
p89130
S'MooseEnum'
p89131
sS'default'
p89132
g3
sS'description'
p89133
S'The type of application to build (applications not registered can be loaded with dynamic libraries.\n'
p89134
sS'required'
p89135
I01
sS'options'
p89136
S'TigerApp'
p89137
sS'group_name'
p89138
Nsa(dp89139
S'description'
p89140
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p89141
sS'cpp_type'
p89142
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p89143
sS'default'
p89144
g3
sS'name'
p89145
S'boundary'
p89146
sS'required'
p89147
I00
sS'group_name'
p89148
Nsa(dp89149
S'description'
p89150
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89151
sS'cpp_type'
p89152
S'double'
p89153
sS'default'
p89154
S'0.01'
p89155
sS'name'
p89156
S'bounding_box_inflation'
p89157
sS'required'
p89158
I00
sS'group_name'
p89159
Nsa(dp89160
S'description'
p89161
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p89162
sS'cpp_type'
p89163
S'bool'
p89164
sS'default'
p89165
S'0'
p89166
sS'name'
p89167
S'catch_up'
p89168
sS'required'
p89169
I00
sS'group_name'
p89170
Nsa(dp89171
S'description'
p89172
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89173
sS'cpp_type'
p89174
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89175
sS'default'
p89176
g3
sS'name'
p89177
S'control_tags'
p89178
sS'required'
p89179
I00
sS'group_name'
p89180
Nsa(dp89181
S'description'
p89182
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p89183
sS'cpp_type'
p89184
S'bool'
p89185
sS'default'
p89186
S'0'
p89187
sS'name'
p89188
S'detect_steady_state'
p89189
sS'required'
p89190
I00
sS'group_name'
p89191
Nsa(dp89192
S'name'
p89193
S'execute_on'
p89194
sS'cpp_type'
p89195
S'MultiMooseEnum'
p89196
sS'default'
p89197
S'TIMESTEP_BEGIN'
p89198
sS'description'
p89199
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89200
sS'required'
p89201
I00
sS'options'
p89202
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p89203
sS'group_name'
p89204
Nsa(dp89205
S'description'
p89206
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89207
sS'cpp_type'
p89208
S'bool'
p89209
sS'default'
p89210
S'1'
p89211
sS'name'
p89212
S'implicit'
p89213
sS'required'
p89214
I00
sS'group_name'
p89215
S'Advanced'
p89216
sa(dp89217
S'description'
p89218
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89219
sS'cpp_type'
p89220
S'std::vector<FileName, std::allocator<FileName> >'
p89221
sS'default'
p89222
g3
sS'name'
p89223
S'input_files'
p89224
sS'required'
p89225
I01
sS'group_name'
p89226
Nsa(dp89227
S'description'
p89228
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p89229
sS'cpp_type'
p89230
S'bool'
p89231
sS'default'
p89232
S'0'
p89233
sS'name'
p89234
S'interpolate_transfers'
p89235
sS'required'
p89236
I00
sS'group_name'
p89237
Nsa(dp89238
S'description'
p89239
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89240
sS'cpp_type'
p89241
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89242
sS'default'
p89243
g3
sS'name'
p89244
S'library_path'
p89245
sS'required'
p89246
I00
sS'group_name'
p89247
Nsa(dp89248
S'description'
p89249
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p89250
sS'cpp_type'
p89251
S'double'
p89252
sS'default'
p89253
S'2'
p89254
sS'name'
p89255
S'max_catch_up_steps'
p89256
sS'required'
p89257
I00
sS'group_name'
p89258
Nsa(dp89259
S'description'
p89260
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p89261
sS'cpp_type'
p89262
S'unsigned int'
p89263
sS'default'
p89264
S'0'
p89265
sS'name'
p89266
S'max_failures'
p89267
sS'required'
p89268
I00
sS'group_name'
p89269
Nsa(dp89270
S'description'
p89271
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89272
sS'cpp_type'
p89273
S'unsigned int'
p89274
sS'default'
p89275
S'4294967295'
p89276
sS'name'
p89277
S'max_procs_per_app'
p89278
sS'required'
p89279
I00
sS'group_name'
p89280
Nsa(dp89281
S'description'
p89282
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89283
sS'cpp_type'
p89284
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89285
sS'default'
p89286
g3
sS'name'
p89287
S'move_apps'
p89288
sS'required'
p89289
I00
sS'group_name'
p89290
Nsa(dp89291
S'description'
p89292
S'The positions corresponding to each move_app.\n'
p89293
sS'cpp_type'
p89294
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89295
sS'default'
p89296
g3
sS'name'
p89297
S'move_positions'
p89298
sS'required'
p89299
I00
sS'group_name'
p89300
Nsa(dp89301
S'description'
p89302
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p89303
sS'cpp_type'
p89304
S'double'
p89305
sS'default'
p89306
S'1.79769e+308'
p89307
sS'name'
p89308
S'move_time'
p89309
sS'required'
p89310
I00
sS'group_name'
p89311
Nsa(dp89312
S'description'
p89313
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p89314
sS'cpp_type'
p89315
S'bool'
p89316
sS'default'
p89317
S'0'
p89318
sS'name'
p89319
S'output_in_position'
p89320
sS'required'
p89321
I00
sS'group_name'
p89322
Nsa(dp89323
S'description'
p89324
S'If true then every sub-cycle will be output.\n'
p89325
sS'cpp_type'
p89326
S'bool'
p89327
sS'default'
p89328
S'0'
p89329
sS'name'
p89330
S'output_sub_cycles'
p89331
sS'required'
p89332
I00
sS'group_name'
p89333
Nsa(dp89334
S'description'
p89335
S'Toggle the display of sub-cycles on the screen.\n'
p89336
sS'cpp_type'
p89337
S'bool'
p89338
sS'default'
p89339
S'1'
p89340
sS'name'
p89341
S'print_sub_cycles'
p89342
sS'required'
p89343
I00
sS'group_name'
p89344
Nsa(dp89345
S'description'
p89346
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89347
sS'cpp_type'
p89348
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89349
sS'default'
p89350
g3
sS'name'
p89351
S'reset_apps'
p89352
sS'required'
p89353
I00
sS'group_name'
p89354
Nsa(dp89355
S'description'
p89356
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89357
sS'cpp_type'
p89358
S'double'
p89359
sS'default'
p89360
S'1.79769e+308'
p89361
sS'name'
p89362
S'reset_time'
p89363
sS'required'
p89364
I00
sS'group_name'
p89365
Nsa(dp89366
S'description'
p89367
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p89368
sS'cpp_type'
p89369
S'double'
p89370
sS'default'
p89371
S'1e-08'
p89372
sS'name'
p89373
S'steady_state_tol'
p89374
sS'required'
p89375
I00
sS'group_name'
p89376
Nsa(dp89377
S'description'
p89378
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p89379
sS'cpp_type'
p89380
S'bool'
p89381
sS'default'
p89382
S'0'
p89383
sS'name'
p89384
S'sub_cycling'
p89385
sS'required'
p89386
I00
sS'group_name'
p89387
Nsa(dp89388
S'description'
p89389
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p89390
sS'cpp_type'
p89391
S'bool'
p89392
sS'default'
p89393
S'0'
p89394
sS'name'
p89395
S'tolerate_failure'
p89396
sS'required'
p89397
I00
sS'group_name'
p89398
Nsa(dp89399
S'description'
p89400
g3
sS'cpp_type'
p89401
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89402
sS'default'
p89403
S'AutoPositionsMultiApp'
p89404
sS'name'
p89405
S'type'
p89406
sS'required'
p89407
I00
sS'group_name'
p89408
Nsa(dp89409
S'description'
p89410
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89411
sS'cpp_type'
p89412
S'bool'
p89413
sS'default'
p89414
S'0'
p89415
sS'name'
p89416
S'use_displaced_mesh'
p89417
sS'required'
p89418
I00
sS'group_name'
p89419
S'Advanced'
p89420
sasS'name'
p89421
S'/MultiApps/AutoPositionsMultiApp'
p89422
sa(dp89423
S'description'
p89424
g3
sS'subblocks'
p89425
NsS'parameters'
p89426
(lp89427
(dp89428
S'name'
p89429
S'app_type'
p89430
sS'cpp_type'
p89431
S'MooseEnum'
p89432
sS'default'
p89433
g3
sS'description'
p89434
S'The type of application to build (applications not registered can be loaded with dynamic libraries.\n'
p89435
sS'required'
p89436
I01
sS'options'
p89437
S'TigerApp'
p89438
sS'group_name'
p89439
Nsa(dp89440
S'description'
p89441
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89442
sS'cpp_type'
p89443
S'double'
p89444
sS'default'
p89445
S'0.01'
p89446
sS'name'
p89447
S'bounding_box_inflation'
p89448
sS'required'
p89449
I00
sS'group_name'
p89450
Nsa(dp89451
S'description'
p89452
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89453
sS'cpp_type'
p89454
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89455
sS'default'
p89456
g3
sS'name'
p89457
S'control_tags'
p89458
sS'required'
p89459
I00
sS'group_name'
p89460
Nsa(dp89461
S'name'
p89462
S'execute_on'
p89463
sS'cpp_type'
p89464
S'MultiMooseEnum'
p89465
sS'default'
p89466
S'TIMESTEP_BEGIN'
p89467
sS'description'
p89468
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89469
sS'required'
p89470
I00
sS'options'
p89471
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p89472
sS'group_name'
p89473
Nsa(dp89474
S'description'
p89475
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89476
sS'cpp_type'
p89477
S'std::vector<FileName, std::allocator<FileName> >'
p89478
sS'default'
p89479
g3
sS'name'
p89480
S'input_files'
p89481
sS'required'
p89482
I01
sS'group_name'
p89483
Nsa(dp89484
S'description'
p89485
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89486
sS'cpp_type'
p89487
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89488
sS'default'
p89489
g3
sS'name'
p89490
S'library_path'
p89491
sS'required'
p89492
I00
sS'group_name'
p89493
Nsa(dp89494
S'description'
p89495
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89496
sS'cpp_type'
p89497
S'unsigned int'
p89498
sS'default'
p89499
S'4294967295'
p89500
sS'name'
p89501
S'max_procs_per_app'
p89502
sS'required'
p89503
I00
sS'group_name'
p89504
Nsa(dp89505
S'description'
p89506
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89507
sS'cpp_type'
p89508
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89509
sS'default'
p89510
g3
sS'name'
p89511
S'move_apps'
p89512
sS'required'
p89513
I00
sS'group_name'
p89514
Nsa(dp89515
S'description'
p89516
S'The positions corresponding to each move_app.\n'
p89517
sS'cpp_type'
p89518
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89519
sS'default'
p89520
g3
sS'name'
p89521
S'move_positions'
p89522
sS'required'
p89523
I00
sS'group_name'
p89524
Nsa(dp89525
S'description'
p89526
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p89527
sS'cpp_type'
p89528
S'double'
p89529
sS'default'
p89530
S'1.79769e+308'
p89531
sS'name'
p89532
S'move_time'
p89533
sS'required'
p89534
I00
sS'group_name'
p89535
Nsa(dp89536
S'description'
p89537
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p89538
sS'cpp_type'
p89539
S'bool'
p89540
sS'default'
p89541
S'0'
p89542
sS'name'
p89543
S'output_in_position'
p89544
sS'required'
p89545
I00
sS'group_name'
p89546
Nsa(dp89547
S'description'
p89548
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p89549
sS'cpp_type'
p89550
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89551
sS'default'
p89552
g3
sS'name'
p89553
S'positions'
p89554
sS'required'
p89555
I00
sS'group_name'
p89556
Nsa(dp89557
S'description'
p89558
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p89559
sS'cpp_type'
p89560
S'std::vector<FileName, std::allocator<FileName> >'
p89561
sS'default'
p89562
g3
sS'name'
p89563
S'positions_file'
p89564
sS'required'
p89565
I00
sS'group_name'
p89566
Nsa(dp89567
S'description'
p89568
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89569
sS'cpp_type'
p89570
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89571
sS'default'
p89572
g3
sS'name'
p89573
S'reset_apps'
p89574
sS'required'
p89575
I00
sS'group_name'
p89576
Nsa(dp89577
S'description'
p89578
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89579
sS'cpp_type'
p89580
S'double'
p89581
sS'default'
p89582
S'1.79769e+308'
p89583
sS'name'
p89584
S'reset_time'
p89585
sS'required'
p89586
I00
sS'group_name'
p89587
Nsa(dp89588
S'description'
p89589
g3
sS'cpp_type'
p89590
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89591
sS'default'
p89592
S'FullSolveMultiApp'
p89593
sS'name'
p89594
S'type'
p89595
sS'required'
p89596
I00
sS'group_name'
p89597
Nsa(dp89598
S'description'
p89599
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89600
sS'cpp_type'
p89601
S'bool'
p89602
sS'default'
p89603
S'0'
p89604
sS'name'
p89605
S'use_displaced_mesh'
p89606
sS'required'
p89607
I00
sS'group_name'
p89608
S'Advanced'
p89609
sasS'name'
p89610
S'/MultiApps/FullSolveMultiApp'
p89611
sa(dp89612
S'description'
p89613
g3
sS'subblocks'
p89614
NsS'parameters'
p89615
(lp89616
(dp89617
S'name'
p89618
S'app_type'
p89619
sS'cpp_type'
p89620
S'MooseEnum'
p89621
sS'default'
p89622
g3
sS'description'
p89623
S'The type of application to build (applications not registered can be loaded with dynamic libraries.\n'
p89624
sS'required'
p89625
I01
sS'options'
p89626
S'TigerApp'
p89627
sS'group_name'
p89628
Nsa(dp89629
S'description'
p89630
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p89631
sS'cpp_type'
p89632
S'double'
p89633
sS'default'
p89634
S'0.01'
p89635
sS'name'
p89636
S'bounding_box_inflation'
p89637
sS'required'
p89638
I00
sS'group_name'
p89639
Nsa(dp89640
S'description'
p89641
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p89642
sS'cpp_type'
p89643
S'bool'
p89644
sS'default'
p89645
S'0'
p89646
sS'name'
p89647
S'catch_up'
p89648
sS'required'
p89649
I00
sS'group_name'
p89650
Nsa(dp89651
S'description'
p89652
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89653
sS'cpp_type'
p89654
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89655
sS'default'
p89656
g3
sS'name'
p89657
S'control_tags'
p89658
sS'required'
p89659
I00
sS'group_name'
p89660
Nsa(dp89661
S'description'
p89662
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p89663
sS'cpp_type'
p89664
S'bool'
p89665
sS'default'
p89666
S'0'
p89667
sS'name'
p89668
S'detect_steady_state'
p89669
sS'required'
p89670
I00
sS'group_name'
p89671
Nsa(dp89672
S'name'
p89673
S'execute_on'
p89674
sS'cpp_type'
p89675
S'MultiMooseEnum'
p89676
sS'default'
p89677
S'TIMESTEP_BEGIN'
p89678
sS'description'
p89679
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p89680
sS'required'
p89681
I00
sS'options'
p89682
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p89683
sS'group_name'
p89684
Nsa(dp89685
S'description'
p89686
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89687
sS'cpp_type'
p89688
S'bool'
p89689
sS'default'
p89690
S'1'
p89691
sS'name'
p89692
S'implicit'
p89693
sS'required'
p89694
I00
sS'group_name'
p89695
S'Advanced'
p89696
sa(dp89697
S'description'
p89698
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p89699
sS'cpp_type'
p89700
S'std::vector<FileName, std::allocator<FileName> >'
p89701
sS'default'
p89702
g3
sS'name'
p89703
S'input_files'
p89704
sS'required'
p89705
I01
sS'group_name'
p89706
Nsa(dp89707
S'description'
p89708
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p89709
sS'cpp_type'
p89710
S'bool'
p89711
sS'default'
p89712
S'0'
p89713
sS'name'
p89714
S'interpolate_transfers'
p89715
sS'required'
p89716
I00
sS'group_name'
p89717
Nsa(dp89718
S'description'
p89719
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p89720
sS'cpp_type'
p89721
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89722
sS'default'
p89723
g3
sS'name'
p89724
S'library_path'
p89725
sS'required'
p89726
I00
sS'group_name'
p89727
Nsa(dp89728
S'description'
p89729
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p89730
sS'cpp_type'
p89731
S'double'
p89732
sS'default'
p89733
S'2'
p89734
sS'name'
p89735
S'max_catch_up_steps'
p89736
sS'required'
p89737
I00
sS'group_name'
p89738
Nsa(dp89739
S'description'
p89740
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p89741
sS'cpp_type'
p89742
S'unsigned int'
p89743
sS'default'
p89744
S'0'
p89745
sS'name'
p89746
S'max_failures'
p89747
sS'required'
p89748
I00
sS'group_name'
p89749
Nsa(dp89750
S'description'
p89751
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p89752
sS'cpp_type'
p89753
S'unsigned int'
p89754
sS'default'
p89755
S'4294967295'
p89756
sS'name'
p89757
S'max_procs_per_app'
p89758
sS'required'
p89759
I00
sS'group_name'
p89760
Nsa(dp89761
S'description'
p89762
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p89763
sS'cpp_type'
p89764
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89765
sS'default'
p89766
g3
sS'name'
p89767
S'move_apps'
p89768
sS'required'
p89769
I00
sS'group_name'
p89770
Nsa(dp89771
S'description'
p89772
S'The positions corresponding to each move_app.\n'
p89773
sS'cpp_type'
p89774
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89775
sS'default'
p89776
g3
sS'name'
p89777
S'move_positions'
p89778
sS'required'
p89779
I00
sS'group_name'
p89780
Nsa(dp89781
S'description'
p89782
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p89783
sS'cpp_type'
p89784
S'double'
p89785
sS'default'
p89786
S'1.79769e+308'
p89787
sS'name'
p89788
S'move_time'
p89789
sS'required'
p89790
I00
sS'group_name'
p89791
Nsa(dp89792
S'description'
p89793
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p89794
sS'cpp_type'
p89795
S'bool'
p89796
sS'default'
p89797
S'0'
p89798
sS'name'
p89799
S'output_in_position'
p89800
sS'required'
p89801
I00
sS'group_name'
p89802
Nsa(dp89803
S'description'
p89804
S'If true then every sub-cycle will be output.\n'
p89805
sS'cpp_type'
p89806
S'bool'
p89807
sS'default'
p89808
S'0'
p89809
sS'name'
p89810
S'output_sub_cycles'
p89811
sS'required'
p89812
I00
sS'group_name'
p89813
Nsa(dp89814
S'description'
p89815
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p89816
sS'cpp_type'
p89817
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p89818
sS'default'
p89819
g3
sS'name'
p89820
S'positions'
p89821
sS'required'
p89822
I00
sS'group_name'
p89823
Nsa(dp89824
S'description'
p89825
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p89826
sS'cpp_type'
p89827
S'std::vector<FileName, std::allocator<FileName> >'
p89828
sS'default'
p89829
g3
sS'name'
p89830
S'positions_file'
p89831
sS'required'
p89832
I00
sS'group_name'
p89833
Nsa(dp89834
S'description'
p89835
S'Toggle the display of sub-cycles on the screen.\n'
p89836
sS'cpp_type'
p89837
S'bool'
p89838
sS'default'
p89839
S'1'
p89840
sS'name'
p89841
S'print_sub_cycles'
p89842
sS'required'
p89843
I00
sS'group_name'
p89844
Nsa(dp89845
S'description'
p89846
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89847
sS'cpp_type'
p89848
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p89849
sS'default'
p89850
g3
sS'name'
p89851
S'reset_apps'
p89852
sS'required'
p89853
I00
sS'group_name'
p89854
Nsa(dp89855
S'description'
p89856
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p89857
sS'cpp_type'
p89858
S'double'
p89859
sS'default'
p89860
S'1.79769e+308'
p89861
sS'name'
p89862
S'reset_time'
p89863
sS'required'
p89864
I00
sS'group_name'
p89865
Nsa(dp89866
S'description'
p89867
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p89868
sS'cpp_type'
p89869
S'double'
p89870
sS'default'
p89871
S'1e-08'
p89872
sS'name'
p89873
S'steady_state_tol'
p89874
sS'required'
p89875
I00
sS'group_name'
p89876
Nsa(dp89877
S'description'
p89878
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p89879
sS'cpp_type'
p89880
S'bool'
p89881
sS'default'
p89882
S'0'
p89883
sS'name'
p89884
S'sub_cycling'
p89885
sS'required'
p89886
I00
sS'group_name'
p89887
Nsa(dp89888
S'description'
p89889
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p89890
sS'cpp_type'
p89891
S'bool'
p89892
sS'default'
p89893
S'0'
p89894
sS'name'
p89895
S'tolerate_failure'
p89896
sS'required'
p89897
I00
sS'group_name'
p89898
Nsa(dp89899
S'description'
p89900
g3
sS'cpp_type'
p89901
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89902
sS'default'
p89903
S'TransientMultiApp'
p89904
sS'name'
p89905
S'type'
p89906
sS'required'
p89907
I00
sS'group_name'
p89908
Nsa(dp89909
S'description'
p89910
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p89911
sS'cpp_type'
p89912
S'bool'
p89913
sS'default'
p89914
S'0'
p89915
sS'name'
p89916
S'use_displaced_mesh'
p89917
sS'required'
p89918
I00
sS'group_name'
p89919
S'Advanced'
p89920
sasS'name'
p89921
S'/MultiApps/TransientMultiApp'
p89922
sasS'parameters'
p89923
NsS'name'
p89924
S'/MultiApps'
p89925
sa(dp89926
S'description'
p89927
g3
sS'subblocks'
p89928
(lp89929
(dp89930
S'description'
p89931
g3
sS'subblocks'
p89932
NsS'parameters'
p89933
(lp89934
(dp89935
S'description'
p89936
S'A string representing the Moose Object that will be built by this Action\n'
p89937
sS'cpp_type'
p89938
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p89939
sS'default'
p89940
g3
sS'name'
p89941
S'type'
p89942
sS'required'
p89943
I01
sS'group_name'
p89944
NsasS'name'
p89945
S'/NodalKernels/*'
p89946
sa(dp89947
S'description'
p89948
g3
sS'subblocks'
p89949
NsS'parameters'
p89950
(lp89951
(dp89952
S'description'
p89953
S'The list of block ids (SubdomainID) that this object will be applied\n'
p89954
sS'cpp_type'
p89955
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p89956
sS'default'
p89957
g3
sS'name'
p89958
S'block'
p89959
sS'required'
p89960
I00
sS'group_name'
p89961
Nsa(dp89962
S'description'
p89963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p89964
sS'cpp_type'
p89965
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p89966
sS'default'
p89967
g3
sS'name'
p89968
S'control_tags'
p89969
sS'required'
p89970
I00
sS'group_name'
p89971
Nsa(dp89972
S'description'
p89973
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p89974
sS'cpp_type'
p89975
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p89976
sS'default'
p89977
g3
sS'name'
p89978
S'diag_save_in'
p89979
sS'required'
p89980
I00
sS'group_name'
p89981
Nsa(dp89982
S'description'
p89983
S'Determines whether this object is calculated using an implicit or explicit form\n'
p89984
sS'cpp_type'
p89985
S'bool'
p89986
sS'default'
p89987
S'1'
p89988
sS'name'
p89989
S'implicit'
p89990
sS'required'
p89991
I00
sS'group_name'
p89992
S'Advanced'
p89993
sa(dp89994
S'description'
p89995
S"The constant rate in 'du/dt = rate'\n"
p89996
sS'cpp_type'
p89997
S'double'
p89998
sS'default'
p89999
g3
sS'name'
p90000
S'rate'
p90001
sS'required'
p90002
I01
sS'group_name'
p90003
Nsa(dp90004
S'description'
p90005
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90006
sS'cpp_type'
p90007
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90008
sS'default'
p90009
g3
sS'name'
p90010
S'save_in'
p90011
sS'required'
p90012
I00
sS'group_name'
p90013
Nsa(dp90014
S'description'
p90015
S'The seed for the master random number generator\n'
p90016
sS'cpp_type'
p90017
S'unsigned int'
p90018
sS'default'
p90019
S'0'
p90020
sS'name'
p90021
S'seed'
p90022
sS'required'
p90023
I00
sS'group_name'
p90024
S'Advanced'
p90025
sa(dp90026
S'description'
p90027
g3
sS'cpp_type'
p90028
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90029
sS'default'
p90030
S'ConstantRate'
p90031
sS'name'
p90032
S'type'
p90033
sS'required'
p90034
I00
sS'group_name'
p90035
Nsa(dp90036
S'description'
p90037
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p90038
sS'cpp_type'
p90039
S'bool'
p90040
sS'default'
p90041
S'0'
p90042
sS'name'
p90043
S'use_displaced_mesh'
p90044
sS'required'
p90045
I00
sS'group_name'
p90046
S'Advanced'
p90047
sa(dp90048
S'description'
p90049
S'The name of the variable that this boundary condition applies to\n'
p90050
sS'cpp_type'
p90051
S'NonlinearVariableName'
p90052
sS'default'
p90053
g3
sS'name'
p90054
S'variable'
p90055
sS'required'
p90056
I01
sS'group_name'
p90057
NsasS'name'
p90058
S'/NodalKernels/ConstantRate'
p90059
sa(dp90060
S'description'
p90061
g3
sS'subblocks'
p90062
NsS'parameters'
p90063
(lp90064
(dp90065
S'description'
p90066
S'The list of block ids (SubdomainID) that this object will be applied\n'
p90067
sS'cpp_type'
p90068
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p90069
sS'default'
p90070
g3
sS'name'
p90071
S'block'
p90072
sS'required'
p90073
I00
sS'group_name'
p90074
Nsa(dp90075
S'description'
p90076
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90077
sS'cpp_type'
p90078
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90079
sS'default'
p90080
g3
sS'name'
p90081
S'control_tags'
p90082
sS'required'
p90083
I00
sS'group_name'
p90084
Nsa(dp90085
S'description'
p90086
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90087
sS'cpp_type'
p90088
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90089
sS'default'
p90090
g3
sS'name'
p90091
S'diag_save_in'
p90092
sS'required'
p90093
I00
sS'group_name'
p90094
Nsa(dp90095
S'description'
p90096
S'Determines whether this object is calculated using an implicit or explicit form\n'
p90097
sS'cpp_type'
p90098
S'bool'
p90099
sS'default'
p90100
S'1'
p90101
sS'name'
p90102
S'implicit'
p90103
sS'required'
p90104
I00
sS'group_name'
p90105
S'Advanced'
p90106
sa(dp90107
S'description'
p90108
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90109
sS'cpp_type'
p90110
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90111
sS'default'
p90112
g3
sS'name'
p90113
S'save_in'
p90114
sS'required'
p90115
I00
sS'group_name'
p90116
Nsa(dp90117
S'description'
p90118
S'The seed for the master random number generator\n'
p90119
sS'cpp_type'
p90120
S'unsigned int'
p90121
sS'default'
p90122
S'0'
p90123
sS'name'
p90124
S'seed'
p90125
sS'required'
p90126
I00
sS'group_name'
p90127
S'Advanced'
p90128
sa(dp90129
S'description'
p90130
g3
sS'cpp_type'
p90131
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90132
sS'default'
p90133
S'TimeDerivativeNodalKernel'
p90134
sS'name'
p90135
S'type'
p90136
sS'required'
p90137
I00
sS'group_name'
p90138
Nsa(dp90139
S'description'
p90140
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p90141
sS'cpp_type'
p90142
S'bool'
p90143
sS'default'
p90144
S'0'
p90145
sS'name'
p90146
S'use_displaced_mesh'
p90147
sS'required'
p90148
I00
sS'group_name'
p90149
S'Advanced'
p90150
sa(dp90151
S'description'
p90152
S'The name of the variable that this boundary condition applies to\n'
p90153
sS'cpp_type'
p90154
S'NonlinearVariableName'
p90155
sS'default'
p90156
g3
sS'name'
p90157
S'variable'
p90158
sS'required'
p90159
I01
sS'group_name'
p90160
NsasS'name'
p90161
S'/NodalKernels/TimeDerivativeNodalKernel'
p90162
sa(dp90163
S'description'
p90164
g3
sS'subblocks'
p90165
NsS'parameters'
p90166
(lp90167
(dp90168
S'description'
p90169
S'The list of block ids (SubdomainID) that this object will be applied\n'
p90170
sS'cpp_type'
p90171
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p90172
sS'default'
p90173
g3
sS'name'
p90174
S'block'
p90175
sS'required'
p90176
I00
sS'group_name'
p90177
Nsa(dp90178
S'description'
p90179
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90180
sS'cpp_type'
p90181
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90182
sS'default'
p90183
g3
sS'name'
p90184
S'control_tags'
p90185
sS'required'
p90186
I00
sS'group_name'
p90187
Nsa(dp90188
S'description'
p90189
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90190
sS'cpp_type'
p90191
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90192
sS'default'
p90193
g3
sS'name'
p90194
S'diag_save_in'
p90195
sS'required'
p90196
I00
sS'group_name'
p90197
Nsa(dp90198
S'description'
p90199
S'The forcing function\n'
p90200
sS'cpp_type'
p90201
S'FunctionName'
p90202
sS'default'
p90203
g3
sS'name'
p90204
S'function'
p90205
sS'required'
p90206
I01
sS'group_name'
p90207
Nsa(dp90208
S'description'
p90209
S'Determines whether this object is calculated using an implicit or explicit form\n'
p90210
sS'cpp_type'
p90211
S'bool'
p90212
sS'default'
p90213
S'1'
p90214
sS'name'
p90215
S'implicit'
p90216
sS'required'
p90217
I00
sS'group_name'
p90218
S'Advanced'
p90219
sa(dp90220
S'description'
p90221
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p90222
sS'cpp_type'
p90223
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p90224
sS'default'
p90225
g3
sS'name'
p90226
S'save_in'
p90227
sS'required'
p90228
I00
sS'group_name'
p90229
Nsa(dp90230
S'description'
p90231
S'The seed for the master random number generator\n'
p90232
sS'cpp_type'
p90233
S'unsigned int'
p90234
sS'default'
p90235
S'0'
p90236
sS'name'
p90237
S'seed'
p90238
sS'required'
p90239
I00
sS'group_name'
p90240
S'Advanced'
p90241
sa(dp90242
S'description'
p90243
g3
sS'cpp_type'
p90244
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90245
sS'default'
p90246
S'UserForcingFunctionNodalKernel'
p90247
sS'name'
p90248
S'type'
p90249
sS'required'
p90250
I00
sS'group_name'
p90251
Nsa(dp90252
S'description'
p90253
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p90254
sS'cpp_type'
p90255
S'bool'
p90256
sS'default'
p90257
S'0'
p90258
sS'name'
p90259
S'use_displaced_mesh'
p90260
sS'required'
p90261
I00
sS'group_name'
p90262
S'Advanced'
p90263
sa(dp90264
S'description'
p90265
S'The name of the variable that this boundary condition applies to\n'
p90266
sS'cpp_type'
p90267
S'NonlinearVariableName'
p90268
sS'default'
p90269
g3
sS'name'
p90270
S'variable'
p90271
sS'required'
p90272
I01
sS'group_name'
p90273
NsasS'name'
p90274
S'/NodalKernels/UserForcingFunctionNodalKernel'
p90275
sasS'parameters'
p90276
NsS'name'
p90277
S'/NodalKernels'
p90278
sa(dp90279
S'description'
p90280
g3
sS'subblocks'
p90281
NsS'parameters'
p90282
(lp90283
(dp90284
S'description'
p90285
S'The boundary ID or name where the normals will be computed\n'
p90286
sS'cpp_type'
p90287
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p90288
sS'default'
p90289
S'ANY_BOUNDARY_ID'
p90290
sS'name'
p90291
S'boundary'
p90292
sS'required'
p90293
I00
sS'group_name'
p90294
Nsa(dp90295
S'description'
p90296
S"boundary ID or name with nodes at 'corners'\n"
p90297
sS'cpp_type'
p90298
S'BoundaryName'
p90299
sS'default'
p90300
g3
sS'name'
p90301
S'corner_boundary'
p90302
sS'required'
p90303
I00
sS'group_name'
p90304
Nsa(dp90305
S'name'
p90306
S'order'
p90307
sS'cpp_type'
p90308
S'MooseEnum'
p90309
sS'default'
p90310
S'FIRST'
p90311
sS'description'
p90312
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p90313
sS'required'
p90314
I00
sS'options'
p90315
S'FIRST SECOND'
p90316
sS'group_name'
p90317
NsasS'name'
p90318
S'/NodalNormals'
p90319
sa(dp90320
S'description'
p90321
g3
sS'subblocks'
p90322
(lp90323
(dp90324
S'description'
p90325
g3
sS'subblocks'
p90326
NsS'parameters'
p90327
(lp90328
(dp90329
S'description'
p90330
S'A string representing the Moose Object that will be built by this Action\n'
p90331
sS'cpp_type'
p90332
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90333
sS'default'
p90334
g3
sS'name'
p90335
S'type'
p90336
sS'required'
p90337
I01
sS'group_name'
p90338
NsasS'name'
p90339
S'/Outputs/*'
p90340
sa(dp90341
S'description'
p90342
g3
sS'subblocks'
p90343
NsS'parameters'
p90344
(lp90345
(dp90346
S'name'
p90347
S'additional_execute_on'
p90348
sS'cpp_type'
p90349
S'MultiMooseEnum'
p90350
sS'default'
p90351
g3
sS'description'
p90352
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90353
sS'required'
p90354
I00
sS'options'
p90355
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90356
sS'group_name'
p90357
Nsa(dp90358
S'description'
p90359
S'Align the outputted csv data by padding the numbers with trailing whitespace\n'
p90360
sS'cpp_type'
p90361
S'bool'
p90362
sS'default'
p90363
S'0'
p90364
sS'name'
p90365
S'align'
p90366
sS'required'
p90367
I00
sS'group_name'
p90368
Nsa(dp90369
S'description'
p90370
S'When true the date and time are appended to the output filename.\n'
p90371
sS'cpp_type'
p90372
S'bool'
p90373
sS'default'
p90374
S'0'
p90375
sS'name'
p90376
S'append_date'
p90377
sS'required'
p90378
I00
sS'group_name'
p90379
Nsa(dp90380
S'description'
p90381
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p90382
sS'cpp_type'
p90383
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90384
sS'default'
p90385
g3
sS'name'
p90386
S'append_date_format'
p90387
sS'required'
p90388
I00
sS'group_name'
p90389
Nsa(dp90390
S'description'
p90391
S'Append existing file on restart\n'
p90392
sS'cpp_type'
p90393
S'bool'
p90394
sS'default'
p90395
S'0'
p90396
sS'name'
p90397
S'append_restart'
p90398
sS'required'
p90399
I00
sS'group_name'
p90400
Nsa(dp90401
S'description'
p90402
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90403
sS'cpp_type'
p90404
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90405
sS'default'
p90406
g3
sS'name'
p90407
S'control_tags'
p90408
sS'required'
p90409
I00
sS'group_name'
p90410
Nsa(dp90411
S'description'
p90412
S"Assign the delimiter (default is ','\n"
p90413
sS'cpp_type'
p90414
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90415
sS'default'
p90416
g3
sS'name'
p90417
S'delimiter'
p90418
sS'required'
p90419
I00
sS'group_name'
p90420
Nsa(dp90421
S'description'
p90422
S'Time at which this output object stop operating\n'
p90423
sS'cpp_type'
p90424
S'double'
p90425
sS'default'
p90426
g3
sS'name'
p90427
S'end_time'
p90428
sS'required'
p90429
I00
sS'group_name'
p90430
S'Timing'
p90431
sa(dp90432
S'description'
p90433
S'Enable/disable the output of elemental variables\n'
p90434
sS'cpp_type'
p90435
S'bool'
p90436
sS'default'
p90437
S'1'
p90438
sS'name'
p90439
S'execute_elemental_variables'
p90440
sS'required'
p90441
I00
sS'group_name'
p90442
Nsa(dp90443
S'description'
p90444
S'Enable/disable the output of input file information\n'
p90445
sS'cpp_type'
p90446
S'bool'
p90447
sS'default'
p90448
S'1'
p90449
sS'name'
p90450
S'execute_input'
p90451
sS'required'
p90452
I00
sS'group_name'
p90453
Nsa(dp90454
S'description'
p90455
S'Enable/disable the output of nodal variables\n'
p90456
sS'cpp_type'
p90457
S'bool'
p90458
sS'default'
p90459
S'1'
p90460
sS'name'
p90461
S'execute_nodal_variables'
p90462
sS'required'
p90463
I00
sS'group_name'
p90464
Nsa(dp90465
S'name'
p90466
S'execute_on'
p90467
sS'cpp_type'
p90468
S'MultiMooseEnum'
p90469
sS'default'
p90470
S'INITIAL TIMESTEP_END'
p90471
sS'description'
p90472
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90473
sS'required'
p90474
I00
sS'options'
p90475
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90476
sS'group_name'
p90477
Nsa(dp90478
S'name'
p90479
S'execute_postprocessors_on'
p90480
sS'cpp_type'
p90481
S'MultiMooseEnum'
p90482
sS'default'
p90483
g3
sS'description'
p90484
S'Control of when postprocessors are output\n'
p90485
sS'required'
p90486
I00
sS'options'
p90487
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90488
sS'group_name'
p90489
S'Variables'
p90490
sa(dp90491
S'description'
p90492
S'Enable/disable the output of aux scalar variables\n'
p90493
sS'cpp_type'
p90494
S'bool'
p90495
sS'default'
p90496
S'1'
p90497
sS'name'
p90498
S'execute_scalar_variables'
p90499
sS'required'
p90500
I00
sS'group_name'
p90501
Nsa(dp90502
S'name'
p90503
S'execute_scalars_on'
p90504
sS'cpp_type'
p90505
S'MultiMooseEnum'
p90506
sS'default'
p90507
g3
sS'description'
p90508
S'Control the output of scalar variables\n'
p90509
sS'required'
p90510
I00
sS'options'
p90511
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90512
sS'group_name'
p90513
S'Variables'
p90514
sa(dp90515
S'description'
p90516
S'Enable/disable the output of the simulation information\n'
p90517
sS'cpp_type'
p90518
S'bool'
p90519
sS'default'
p90520
S'1'
p90521
sS'name'
p90522
S'execute_system_information'
p90523
sS'required'
p90524
I00
sS'group_name'
p90525
Nsa(dp90526
S'description'
p90527
S'Enable/disable the output of vector postprocessors\n'
p90528
sS'cpp_type'
p90529
S'bool'
p90530
sS'default'
p90531
S'1'
p90532
sS'name'
p90533
S'execute_vector_postprocessors'
p90534
sS'required'
p90535
I00
sS'group_name'
p90536
Nsa(dp90537
S'name'
p90538
S'execute_vector_postprocessors_on'
p90539
sS'cpp_type'
p90540
S'MultiMooseEnum'
p90541
sS'default'
p90542
g3
sS'description'
p90543
S'Enable/disable the output of VectorPostprocessors\n'
p90544
sS'required'
p90545
I00
sS'options'
p90546
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90547
sS'group_name'
p90548
S'Variables'
p90549
sa(dp90550
S'description'
p90551
S'The desired solution output name without an extension\n'
p90552
sS'cpp_type'
p90553
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90554
sS'default'
p90555
g3
sS'name'
p90556
S'file_base'
p90557
sS'required'
p90558
I00
sS'group_name'
p90559
Nsa(dp90560
S'description'
p90561
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p90562
sS'cpp_type'
p90563
S'std::vector<VariableName, std::allocator<VariableName> >'
p90564
sS'default'
p90565
g3
sS'name'
p90566
S'hide'
p90567
sS'required'
p90568
I00
sS'group_name'
p90569
S'Variables'
p90570
sa(dp90571
S'description'
p90572
S'The interval at which time steps are output to the solution file\n'
p90573
sS'cpp_type'
p90574
S'unsigned int'
p90575
sS'default'
p90576
S'1'
p90577
sS'name'
p90578
S'interval'
p90579
sS'required'
p90580
I00
sS'group_name'
p90581
S'Timing'
p90582
sa(dp90583
S'description'
p90584
S'Number of divisions applied to time step when outputting linear residuals\n'
p90585
sS'cpp_type'
p90586
S'double'
p90587
sS'default'
p90588
S'1000'
p90589
sS'name'
p90590
S'linear_residual_dt_divisor'
p90591
sS'required'
p90592
I00
sS'group_name'
p90593
S'PETSc'
p90594
sa(dp90595
S'description'
p90596
S'Specifies an end time to begin output on each linear residual evaluation\n'
p90597
sS'cpp_type'
p90598
S'double'
p90599
sS'default'
p90600
g3
sS'name'
p90601
S'linear_residual_end_time'
p90602
sS'required'
p90603
I00
sS'group_name'
p90604
S'PETSc'
p90605
sa(dp90606
S'description'
p90607
S'Specifies a start time to begin output on each linear residual evaluation\n'
p90608
sS'cpp_type'
p90609
S'double'
p90610
sS'default'
p90611
g3
sS'name'
p90612
S'linear_residual_start_time'
p90613
sS'required'
p90614
I00
sS'group_name'
p90615
S'PETSc'
p90616
sa(dp90617
S'description'
p90618
S'Specifies whether output occurs on each linear residual evaluation\n'
p90619
sS'cpp_type'
p90620
S'bool'
p90621
sS'default'
p90622
S'0'
p90623
sS'name'
p90624
S'linear_residuals'
p90625
sS'required'
p90626
I00
sS'group_name'
p90627
S'PETSc'
p90628
sa(dp90629
S'description'
p90630
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p90631
sS'cpp_type'
p90632
S'double'
p90633
sS'default'
p90634
S'1000'
p90635
sS'name'
p90636
S'nonlinear_residual_dt_divisor'
p90637
sS'required'
p90638
I00
sS'group_name'
p90639
S'PETSc'
p90640
sa(dp90641
S'description'
p90642
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p90643
sS'cpp_type'
p90644
S'double'
p90645
sS'default'
p90646
g3
sS'name'
p90647
S'nonlinear_residual_end_time'
p90648
sS'required'
p90649
I00
sS'group_name'
p90650
S'PETSc'
p90651
sa(dp90652
S'description'
p90653
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p90654
sS'cpp_type'
p90655
S'double'
p90656
sS'default'
p90657
g3
sS'name'
p90658
S'nonlinear_residual_start_time'
p90659
sS'required'
p90660
I00
sS'group_name'
p90661
S'PETSc'
p90662
sa(dp90663
S'description'
p90664
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90665
sS'cpp_type'
p90666
S'bool'
p90667
sS'default'
p90668
S'0'
p90669
sS'name'
p90670
S'nonlinear_residuals'
p90671
sS'required'
p90672
I00
sS'group_name'
p90673
S'PETSc'
p90674
sa(dp90675
S'description'
p90676
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p90677
sS'cpp_type'
p90678
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90679
sS'default'
p90680
g3
sS'name'
p90681
S'output_if_base_contains'
p90682
sS'required'
p90683
I00
sS'group_name'
p90684
S'Advanced'
p90685
sa(dp90686
S'description'
p90687
S'Specifies whether output occurs on each linear residual evaluation\n'
p90688
sS'cpp_type'
p90689
S'bool'
p90690
sS'default'
p90691
S'0'
p90692
sS'name'
p90693
S'output_linear'
p90694
sS'required'
p90695
I00
sS'group_name'
p90696
Nsa(dp90697
S'description'
p90698
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90699
sS'cpp_type'
p90700
S'bool'
p90701
sS'default'
p90702
S'0'
p90703
sS'name'
p90704
S'output_nonlinear'
p90705
sS'required'
p90706
I00
sS'group_name'
p90707
Nsa(dp90708
S'description'
p90709
S'Enable/disable the output of postprocessors\n'
p90710
sS'cpp_type'
p90711
S'bool'
p90712
sS'default'
p90713
S'1'
p90714
sS'name'
p90715
S'output_postprocessors'
p90716
sS'required'
p90717
I00
sS'group_name'
p90718
Nsa(dp90719
S'description'
p90720
S'Set the output precision\n'
p90721
sS'cpp_type'
p90722
S'unsigned int'
p90723
sS'default'
p90724
S'14'
p90725
sS'name'
p90726
S'precision'
p90727
sS'required'
p90728
I00
sS'group_name'
p90729
Nsa(dp90730
S'description'
p90731
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p90732
sS'cpp_type'
p90733
S'std::vector<VariableName, std::allocator<VariableName> >'
p90734
sS'default'
p90735
g3
sS'name'
p90736
S'show'
p90737
sS'required'
p90738
I00
sS'group_name'
p90739
S'Variables'
p90740
sa(dp90741
S'description'
p90742
S'Time at which this output object begins to operate\n'
p90743
sS'cpp_type'
p90744
S'double'
p90745
sS'default'
p90746
g3
sS'name'
p90747
S'start_time'
p90748
sS'required'
p90749
I00
sS'group_name'
p90750
S'Timing'
p90751
sa(dp90752
S'description'
p90753
S'Only export results at sync times\n'
p90754
sS'cpp_type'
p90755
S'bool'
p90756
sS'default'
p90757
S'0'
p90758
sS'name'
p90759
S'sync_only'
p90760
sS'required'
p90761
I00
sS'group_name'
p90762
S'Timing'
p90763
sa(dp90764
S'description'
p90765
S'Times at which the output and solution is forced to occur\n'
p90766
sS'cpp_type'
p90767
S'std::vector<double, std::allocator<double> >'
p90768
sS'default'
p90769
g3
sS'name'
p90770
S'sync_times'
p90771
sS'required'
p90772
I00
sS'group_name'
p90773
S'Timing'
p90774
sa(dp90775
S'description'
p90776
S'Time tolerance utilized checking start and end times\n'
p90777
sS'cpp_type'
p90778
S'double'
p90779
sS'default'
p90780
S'1e-14'
p90781
sS'name'
p90782
S'time_tolerance'
p90783
sS'required'
p90784
I00
sS'group_name'
p90785
S'Timing'
p90786
sa(dp90787
S'description'
p90788
g3
sS'cpp_type'
p90789
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90790
sS'default'
p90791
S'CSV'
p90792
sS'name'
p90793
S'type'
p90794
sS'required'
p90795
I00
sS'group_name'
p90796
Nsa(dp90797
S'description'
p90798
S'Enable/disable the use of the displaced mesh for outputting\n'
p90799
sS'cpp_type'
p90800
S'bool'
p90801
sS'default'
p90802
S'0'
p90803
sS'name'
p90804
S'use_displaced'
p90805
sS'required'
p90806
I00
sS'group_name'
p90807
NsasS'name'
p90808
S'/Outputs/CSV'
p90809
sa(dp90810
S'description'
p90811
g3
sS'subblocks'
p90812
NsS'parameters'
p90813
(lp90814
(dp90815
S'name'
p90816
S'additional_execute_on'
p90817
sS'cpp_type'
p90818
S'MultiMooseEnum'
p90819
sS'default'
p90820
g3
sS'description'
p90821
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90822
sS'required'
p90823
I00
sS'options'
p90824
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90825
sS'group_name'
p90826
Nsa(dp90827
S'description'
p90828
S'When true the date and time are appended to the output filename.\n'
p90829
sS'cpp_type'
p90830
S'bool'
p90831
sS'default'
p90832
S'0'
p90833
sS'name'
p90834
S'append_date'
p90835
sS'required'
p90836
I00
sS'group_name'
p90837
Nsa(dp90838
S'description'
p90839
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p90840
sS'cpp_type'
p90841
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90842
sS'default'
p90843
g3
sS'name'
p90844
S'append_date_format'
p90845
sS'required'
p90846
I00
sS'group_name'
p90847
Nsa(dp90848
S'description'
p90849
S'Toggle the output of binary files\n'
p90850
sS'cpp_type'
p90851
S'bool'
p90852
sS'default'
p90853
S'1'
p90854
sS'name'
p90855
S'binary'
p90856
sS'required'
p90857
I00
sS'group_name'
p90858
S'Advanced'
p90859
sa(dp90860
S'description'
p90861
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p90862
sS'cpp_type'
p90863
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p90864
sS'default'
p90865
g3
sS'name'
p90866
S'control_tags'
p90867
sS'required'
p90868
I00
sS'group_name'
p90869
Nsa(dp90870
S'description'
p90871
S'Time at which this output object stop operating\n'
p90872
sS'cpp_type'
p90873
S'double'
p90874
sS'default'
p90875
g3
sS'name'
p90876
S'end_time'
p90877
sS'required'
p90878
I00
sS'group_name'
p90879
S'Timing'
p90880
sa(dp90881
S'name'
p90882
S'execute_on'
p90883
sS'cpp_type'
p90884
S'MultiMooseEnum'
p90885
sS'default'
p90886
S'INITIAL TIMESTEP_END'
p90887
sS'description'
p90888
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p90889
sS'required'
p90890
I00
sS'options'
p90891
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p90892
sS'group_name'
p90893
Nsa(dp90894
S'description'
p90895
S'The desired solution output name without an extension\n'
p90896
sS'cpp_type'
p90897
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p90898
sS'default'
p90899
g3
sS'name'
p90900
S'file_base'
p90901
sS'required'
p90902
I00
sS'group_name'
p90903
Nsa(dp90904
S'description'
p90905
S'The interval at which time steps are output to the solution file\n'
p90906
sS'cpp_type'
p90907
S'unsigned int'
p90908
sS'default'
p90909
S'1'
p90910
sS'name'
p90911
S'interval'
p90912
sS'required'
p90913
I00
sS'group_name'
p90914
S'Timing'
p90915
sa(dp90916
S'description'
p90917
S'Number of divisions applied to time step when outputting linear residuals\n'
p90918
sS'cpp_type'
p90919
S'double'
p90920
sS'default'
p90921
S'1000'
p90922
sS'name'
p90923
S'linear_residual_dt_divisor'
p90924
sS'required'
p90925
I00
sS'group_name'
p90926
S'PETSc'
p90927
sa(dp90928
S'description'
p90929
S'Specifies an end time to begin output on each linear residual evaluation\n'
p90930
sS'cpp_type'
p90931
S'double'
p90932
sS'default'
p90933
g3
sS'name'
p90934
S'linear_residual_end_time'
p90935
sS'required'
p90936
I00
sS'group_name'
p90937
S'PETSc'
p90938
sa(dp90939
S'description'
p90940
S'Specifies a start time to begin output on each linear residual evaluation\n'
p90941
sS'cpp_type'
p90942
S'double'
p90943
sS'default'
p90944
g3
sS'name'
p90945
S'linear_residual_start_time'
p90946
sS'required'
p90947
I00
sS'group_name'
p90948
S'PETSc'
p90949
sa(dp90950
S'description'
p90951
S'Specifies whether output occurs on each linear residual evaluation\n'
p90952
sS'cpp_type'
p90953
S'bool'
p90954
sS'default'
p90955
S'0'
p90956
sS'name'
p90957
S'linear_residuals'
p90958
sS'required'
p90959
I00
sS'group_name'
p90960
S'PETSc'
p90961
sa(dp90962
S'description'
p90963
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p90964
sS'cpp_type'
p90965
S'double'
p90966
sS'default'
p90967
S'1000'
p90968
sS'name'
p90969
S'nonlinear_residual_dt_divisor'
p90970
sS'required'
p90971
I00
sS'group_name'
p90972
S'PETSc'
p90973
sa(dp90974
S'description'
p90975
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p90976
sS'cpp_type'
p90977
S'double'
p90978
sS'default'
p90979
g3
sS'name'
p90980
S'nonlinear_residual_end_time'
p90981
sS'required'
p90982
I00
sS'group_name'
p90983
S'PETSc'
p90984
sa(dp90985
S'description'
p90986
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p90987
sS'cpp_type'
p90988
S'double'
p90989
sS'default'
p90990
g3
sS'name'
p90991
S'nonlinear_residual_start_time'
p90992
sS'required'
p90993
I00
sS'group_name'
p90994
S'PETSc'
p90995
sa(dp90996
S'description'
p90997
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p90998
sS'cpp_type'
p90999
S'bool'
p91000
sS'default'
p91001
S'0'
p91002
sS'name'
p91003
S'nonlinear_residuals'
p91004
sS'required'
p91005
I00
sS'group_name'
p91006
S'PETSc'
p91007
sa(dp91008
S'description'
p91009
S'Number of the restart files to save\n'
p91010
sS'cpp_type'
p91011
S'unsigned int'
p91012
sS'default'
p91013
S'2'
p91014
sS'name'
p91015
S'num_files'
p91016
sS'required'
p91017
I00
sS'group_name'
p91018
Nsa(dp91019
S'description'
p91020
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p91021
sS'cpp_type'
p91022
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91023
sS'default'
p91024
g3
sS'name'
p91025
S'output_if_base_contains'
p91026
sS'required'
p91027
I00
sS'group_name'
p91028
S'Advanced'
p91029
sa(dp91030
S'description'
p91031
S'Specifies whether output occurs on each linear residual evaluation\n'
p91032
sS'cpp_type'
p91033
S'bool'
p91034
sS'default'
p91035
S'0'
p91036
sS'name'
p91037
S'output_linear'
p91038
sS'required'
p91039
I00
sS'group_name'
p91040
Nsa(dp91041
S'description'
p91042
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91043
sS'cpp_type'
p91044
S'bool'
p91045
sS'default'
p91046
S'0'
p91047
sS'name'
p91048
S'output_nonlinear'
p91049
sS'required'
p91050
I00
sS'group_name'
p91051
Nsa(dp91052
S'description'
p91053
S'The number of for extension suffix (e.g., out.e-s002)\n'
p91054
sS'cpp_type'
p91055
S'unsigned int'
p91056
sS'default'
p91057
S'4'
p91058
sS'name'
p91059
S'padding'
p91060
sS'required'
p91061
I00
sS'group_name'
p91062
S'Advanced'
p91063
sa(dp91064
S'description'
p91065
S'Time at which this output object begins to operate\n'
p91066
sS'cpp_type'
p91067
S'double'
p91068
sS'default'
p91069
g3
sS'name'
p91070
S'start_time'
p91071
sS'required'
p91072
I00
sS'group_name'
p91073
S'Timing'
p91074
sa(dp91075
S'description'
p91076
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p91077
sS'cpp_type'
p91078
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91079
sS'default'
p91080
S'cp'
p91081
sS'name'
p91082
S'suffix'
p91083
sS'required'
p91084
I00
sS'group_name'
p91085
Nsa(dp91086
S'description'
p91087
S'Only export results at sync times\n'
p91088
sS'cpp_type'
p91089
S'bool'
p91090
sS'default'
p91091
S'0'
p91092
sS'name'
p91093
S'sync_only'
p91094
sS'required'
p91095
I00
sS'group_name'
p91096
S'Timing'
p91097
sa(dp91098
S'description'
p91099
S'Times at which the output and solution is forced to occur\n'
p91100
sS'cpp_type'
p91101
S'std::vector<double, std::allocator<double> >'
p91102
sS'default'
p91103
g3
sS'name'
p91104
S'sync_times'
p91105
sS'required'
p91106
I00
sS'group_name'
p91107
S'Timing'
p91108
sa(dp91109
S'description'
p91110
S'Time tolerance utilized checking start and end times\n'
p91111
sS'cpp_type'
p91112
S'double'
p91113
sS'default'
p91114
S'1e-14'
p91115
sS'name'
p91116
S'time_tolerance'
p91117
sS'required'
p91118
I00
sS'group_name'
p91119
S'Timing'
p91120
sa(dp91121
S'description'
p91122
g3
sS'cpp_type'
p91123
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91124
sS'default'
p91125
S'Checkpoint'
p91126
sS'name'
p91127
S'type'
p91128
sS'required'
p91129
I00
sS'group_name'
p91130
Nsa(dp91131
S'description'
p91132
S'Enable/disable the use of the displaced mesh for outputting\n'
p91133
sS'cpp_type'
p91134
S'bool'
p91135
sS'default'
p91136
S'0'
p91137
sS'name'
p91138
S'use_displaced'
p91139
sS'required'
p91140
I00
sS'group_name'
p91141
NsasS'name'
p91142
S'/Outputs/Checkpoint'
p91143
sa(dp91144
S'description'
p91145
g3
sS'subblocks'
p91146
NsS'parameters'
p91147
(lp91148
(dp91149
S'name'
p91150
S'additional_execute_on'
p91151
sS'cpp_type'
p91152
S'MultiMooseEnum'
p91153
sS'default'
p91154
g3
sS'description'
p91155
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91156
sS'required'
p91157
I00
sS'options'
p91158
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91159
sS'group_name'
p91160
Nsa(dp91161
S'description'
p91162
S'If true, all variable norms will be printed after each solve\n'
p91163
sS'cpp_type'
p91164
S'bool'
p91165
sS'default'
p91166
S'0'
p91167
sS'name'
p91168
S'all_variable_norms'
p91169
sS'required'
p91170
I00
sS'group_name'
p91171
S'Norms'
p91172
sa(dp91173
S'description'
p91174
S'When true the date and time are appended to the output filename.\n'
p91175
sS'cpp_type'
p91176
S'bool'
p91177
sS'default'
p91178
S'0'
p91179
sS'name'
p91180
S'append_date'
p91181
sS'required'
p91182
I00
sS'group_name'
p91183
Nsa(dp91184
S'description'
p91185
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p91186
sS'cpp_type'
p91187
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91188
sS'default'
p91189
g3
sS'name'
p91190
S'append_date_format'
p91191
sS'required'
p91192
I00
sS'group_name'
p91193
Nsa(dp91194
S'description'
p91195
S'Append existing file on restart\n'
p91196
sS'cpp_type'
p91197
S'bool'
p91198
sS'default'
p91199
S'0'
p91200
sS'name'
p91201
S'append_restart'
p91202
sS'required'
p91203
I00
sS'group_name'
p91204
Nsa(dp91205
S'description'
p91206
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p91207
sS'cpp_type'
p91208
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91209
sS'default'
p91210
g3
sS'name'
p91211
S'control_tags'
p91212
sS'required'
p91213
I00
sS'group_name'
p91214
Nsa(dp91215
S'description'
p91216
S'Time at which this output object stop operating\n'
p91217
sS'cpp_type'
p91218
S'double'
p91219
sS'default'
p91220
g3
sS'name'
p91221
S'end_time'
p91222
sS'required'
p91223
I00
sS'group_name'
p91224
S'Timing'
p91225
sa(dp91226
S'description'
p91227
S'Enable/disable the output of elemental variables\n'
p91228
sS'cpp_type'
p91229
S'bool'
p91230
sS'default'
p91231
S'1'
p91232
sS'name'
p91233
S'execute_elemental_variables'
p91234
sS'required'
p91235
I00
sS'group_name'
p91236
Nsa(dp91237
S'description'
p91238
S'Enable/disable the output of input file information\n'
p91239
sS'cpp_type'
p91240
S'bool'
p91241
sS'default'
p91242
S'1'
p91243
sS'name'
p91244
S'execute_input'
p91245
sS'required'
p91246
I00
sS'group_name'
p91247
Nsa(dp91248
S'name'
p91249
S'execute_input_on'
p91250
sS'cpp_type'
p91251
S'MultiMooseEnum'
p91252
sS'default'
p91253
g3
sS'description'
p91254
S'Enable/disable the output of the input file\n'
p91255
sS'required'
p91256
I00
sS'options'
p91257
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91258
sS'group_name'
p91259
S'Variables'
p91260
sa(dp91261
S'description'
p91262
S'Enable/disable the output of nodal variables\n'
p91263
sS'cpp_type'
p91264
S'bool'
p91265
sS'default'
p91266
S'1'
p91267
sS'name'
p91268
S'execute_nodal_variables'
p91269
sS'required'
p91270
I00
sS'group_name'
p91271
Nsa(dp91272
S'name'
p91273
S'execute_on'
p91274
sS'cpp_type'
p91275
S'MultiMooseEnum'
p91276
sS'default'
p91277
S'FAILED INITIAL LINEAR NONLINEAR TIMESTEP_BEGIN TIMESTEP_END'
p91278
sS'description'
p91279
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91280
sS'required'
p91281
I00
sS'options'
p91282
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91283
sS'group_name'
p91284
Nsa(dp91285
S'name'
p91286
S'execute_postprocessors_on'
p91287
sS'cpp_type'
p91288
S'MultiMooseEnum'
p91289
sS'default'
p91290
S'INITIAL TIMESTEP_END'
p91291
sS'description'
p91292
S'Control of when postprocessors are output\n'
p91293
sS'required'
p91294
I00
sS'options'
p91295
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91296
sS'group_name'
p91297
S'Variables'
p91298
sa(dp91299
S'description'
p91300
S'Enable/disable the output of aux scalar variables\n'
p91301
sS'cpp_type'
p91302
S'bool'
p91303
sS'default'
p91304
S'1'
p91305
sS'name'
p91306
S'execute_scalar_variables'
p91307
sS'required'
p91308
I00
sS'group_name'
p91309
Nsa(dp91310
S'name'
p91311
S'execute_scalars_on'
p91312
sS'cpp_type'
p91313
S'MultiMooseEnum'
p91314
sS'default'
p91315
S'INITIAL TIMESTEP_END'
p91316
sS'description'
p91317
S'Control the output of scalar variables\n'
p91318
sS'required'
p91319
I00
sS'options'
p91320
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91321
sS'group_name'
p91322
S'Variables'
p91323
sa(dp91324
S'description'
p91325
S'Enable/disable the output of the simulation information\n'
p91326
sS'cpp_type'
p91327
S'bool'
p91328
sS'default'
p91329
S'1'
p91330
sS'name'
p91331
S'execute_system_information'
p91332
sS'required'
p91333
I00
sS'group_name'
p91334
Nsa(dp91335
S'name'
p91336
S'execute_system_information_on'
p91337
sS'cpp_type'
p91338
S'MultiMooseEnum'
p91339
sS'default'
p91340
S'INITIAL'
p91341
sS'description'
p91342
S'Control when the output of the simulation information occurs\n'
p91343
sS'required'
p91344
I00
sS'options'
p91345
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91346
sS'group_name'
p91347
S'Variables'
p91348
sa(dp91349
S'description'
p91350
S'Enable/disable the output of vector postprocessors\n'
p91351
sS'cpp_type'
p91352
S'bool'
p91353
sS'default'
p91354
S'1'
p91355
sS'name'
p91356
S'execute_vector_postprocessors'
p91357
sS'required'
p91358
I00
sS'group_name'
p91359
Nsa(dp91360
S'name'
p91361
S'execute_vector_postprocessors_on'
p91362
sS'cpp_type'
p91363
S'MultiMooseEnum'
p91364
sS'default'
p91365
S'INITIAL TIMESTEP_END'
p91366
sS'description'
p91367
S'Enable/disable the output of VectorPostprocessors\n'
p91368
sS'required'
p91369
I00
sS'options'
p91370
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91371
sS'group_name'
p91372
S'Variables'
p91373
sa(dp91374
S'description'
p91375
S'The desired solution output name without an extension\n'
p91376
sS'cpp_type'
p91377
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91378
sS'default'
p91379
g3
sS'name'
p91380
S'file_base'
p91381
sS'required'
p91382
I00
sS'group_name'
p91383
Nsa(dp91384
S'name'
p91385
S'fit_mode'
p91386
sS'cpp_type'
p91387
S'MooseEnum'
p91388
sS'default'
p91389
S'ENVIRONMENT'
p91390
sS'description'
p91391
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p91392
sS'required'
p91393
I00
sS'options'
p91394
S'ENVIRONMENT AUTO 80 120 160'
p91395
sS'group_name'
p91396
Nsa(dp91397
S'description'
p91398
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p91399
sS'cpp_type'
p91400
S'std::vector<VariableName, std::allocator<VariableName> >'
p91401
sS'default'
p91402
g3
sS'name'
p91403
S'hide'
p91404
sS'required'
p91405
I00
sS'group_name'
p91406
S'Variables'
p91407
sa(dp91408
S'description'
p91409
S'The interval at which time steps are output to the solution file\n'
p91410
sS'cpp_type'
p91411
S'unsigned int'
p91412
sS'default'
p91413
S'1'
p91414
sS'name'
p91415
S'interval'
p91416
sS'required'
p91417
I00
sS'group_name'
p91418
S'Timing'
p91419
sa(dp91420
S'description'
p91421
S'Number of divisions applied to time step when outputting linear residuals\n'
p91422
sS'cpp_type'
p91423
S'double'
p91424
sS'default'
p91425
S'1000'
p91426
sS'name'
p91427
S'linear_residual_dt_divisor'
p91428
sS'required'
p91429
I00
sS'group_name'
p91430
S'PETSc'
p91431
sa(dp91432
S'description'
p91433
S'Specifies an end time to begin output on each linear residual evaluation\n'
p91434
sS'cpp_type'
p91435
S'double'
p91436
sS'default'
p91437
g3
sS'name'
p91438
S'linear_residual_end_time'
p91439
sS'required'
p91440
I00
sS'group_name'
p91441
S'PETSc'
p91442
sa(dp91443
S'description'
p91444
S'Specifies a start time to begin output on each linear residual evaluation\n'
p91445
sS'cpp_type'
p91446
S'double'
p91447
sS'default'
p91448
g3
sS'name'
p91449
S'linear_residual_start_time'
p91450
sS'required'
p91451
I00
sS'group_name'
p91452
S'PETSc'
p91453
sa(dp91454
S'description'
p91455
S'Specifies whether output occurs on each linear residual evaluation\n'
p91456
sS'cpp_type'
p91457
S'bool'
p91458
sS'default'
p91459
S'0'
p91460
sS'name'
p91461
S'linear_residuals'
p91462
sS'required'
p91463
I00
sS'group_name'
p91464
S'PETSc'
p91465
sa(dp91466
S'description'
p91467
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p91468
sS'cpp_type'
p91469
S'unsigned int'
p91470
sS'default'
p91471
S'15'
p91472
sS'name'
p91473
S'max_rows'
p91474
sS'required'
p91475
I00
sS'group_name'
p91476
S'Advanced'
p91477
sa(dp91478
S'description'
p91479
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p91480
sS'cpp_type'
p91481
S'double'
p91482
sS'default'
p91483
S'1000'
p91484
sS'name'
p91485
S'nonlinear_residual_dt_divisor'
p91486
sS'required'
p91487
I00
sS'group_name'
p91488
S'PETSc'
p91489
sa(dp91490
S'description'
p91491
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p91492
sS'cpp_type'
p91493
S'double'
p91494
sS'default'
p91495
g3
sS'name'
p91496
S'nonlinear_residual_end_time'
p91497
sS'required'
p91498
I00
sS'group_name'
p91499
S'PETSc'
p91500
sa(dp91501
S'description'
p91502
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p91503
sS'cpp_type'
p91504
S'double'
p91505
sS'default'
p91506
g3
sS'name'
p91507
S'nonlinear_residual_start_time'
p91508
sS'required'
p91509
I00
sS'group_name'
p91510
S'PETSc'
p91511
sa(dp91512
S'description'
p91513
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91514
sS'cpp_type'
p91515
S'bool'
p91516
sS'default'
p91517
S'0'
p91518
sS'name'
p91519
S'nonlinear_residuals'
p91520
sS'required'
p91521
I00
sS'group_name'
p91522
S'PETSc'
p91523
sa(dp91524
S'description'
p91525
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p91526
sS'cpp_type'
p91527
S'std::vector<double, std::allocator<double> >'
p91528
sS'default'
p91529
S'0.8 2'
p91530
sS'name'
p91531
S'outlier_multiplier'
p91532
sS'required'
p91533
I00
sS'group_name'
p91534
S'Norms'
p91535
sa(dp91536
S'description'
p91537
S'If true, outlier variable norms will be printed after each solve\n'
p91538
sS'cpp_type'
p91539
S'bool'
p91540
sS'default'
p91541
S'1'
p91542
sS'name'
p91543
S'outlier_variable_norms'
p91544
sS'required'
p91545
I00
sS'group_name'
p91546
S'Norms'
p91547
sa(dp91548
S'description'
p91549
S'Output to the file\n'
p91550
sS'cpp_type'
p91551
S'bool'
p91552
sS'default'
p91553
S'0'
p91554
sS'name'
p91555
S'output_file'
p91556
sS'required'
p91557
I00
sS'group_name'
p91558
Nsa(dp91559
S'description'
p91560
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p91561
sS'cpp_type'
p91562
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91563
sS'default'
p91564
g3
sS'name'
p91565
S'output_if_base_contains'
p91566
sS'required'
p91567
I00
sS'group_name'
p91568
S'Advanced'
p91569
sa(dp91570
S'description'
p91571
S'Specifies whether output occurs on each linear residual evaluation\n'
p91572
sS'cpp_type'
p91573
S'bool'
p91574
sS'default'
p91575
S'0'
p91576
sS'name'
p91577
S'output_linear'
p91578
sS'required'
p91579
I00
sS'group_name'
p91580
Nsa(dp91581
S'description'
p91582
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p91583
sS'cpp_type'
p91584
S'bool'
p91585
sS'default'
p91586
S'0'
p91587
sS'name'
p91588
S'output_nonlinear'
p91589
sS'required'
p91590
I00
sS'group_name'
p91591
Nsa(dp91592
S'description'
p91593
S'Enable/disable the output of postprocessors\n'
p91594
sS'cpp_type'
p91595
S'bool'
p91596
sS'default'
p91597
S'1'
p91598
sS'name'
p91599
S'output_postprocessors'
p91600
sS'required'
p91601
I00
sS'group_name'
p91602
Nsa(dp91603
S'description'
p91604
S'Output to the screen\n'
p91605
sS'cpp_type'
p91606
S'bool'
p91607
sS'default'
p91608
S'1'
p91609
sS'name'
p91610
S'output_screen'
p91611
sS'required'
p91612
I00
sS'group_name'
p91613
Nsa(dp91614
S'description'
p91615
S'The number of for extension suffix (e.g., out.e-s002)\n'
p91616
sS'cpp_type'
p91617
S'unsigned int'
p91618
sS'default'
p91619
S'4'
p91620
sS'name'
p91621
S'padding'
p91622
sS'required'
p91623
I00
sS'group_name'
p91624
S'Advanced'
p91625
sa(dp91626
S'description'
p91627
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p91628
sS'cpp_type'
p91629
S'bool'
p91630
sS'default'
p91631
g3
sS'name'
p91632
S'perf_header'
p91633
sS'required'
p91634
I00
sS'group_name'
p91635
S'Perf Log'
p91636
sa(dp91637
S'description'
p91638
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p91639
sS'cpp_type'
p91640
S'bool'
p91641
sS'default'
p91642
S'0'
p91643
sS'name'
p91644
S'perf_log'
p91645
sS'required'
p91646
I00
sS'group_name'
p91647
S'Perf Log'
p91648
sa(dp91649
S'description'
p91650
S'When true, each time the mesh is changed the mesh information is printed\n'
p91651
sS'cpp_type'
p91652
S'bool'
p91653
sS'default'
p91654
S'0'
p91655
sS'name'
p91656
S'print_mesh_changed_info'
p91657
sS'required'
p91658
I00
sS'group_name'
p91659
Nsa(dp91660
S'description'
p91661
S'Control the printing of time and dt in scientific notation\n'
p91662
sS'cpp_type'
p91663
S'bool'
p91664
sS'default'
p91665
S'0'
p91666
sS'name'
p91667
S'scientific_time'
p91668
sS'required'
p91669
I00
sS'group_name'
p91670
Nsa(dp91671
S'description'
p91672
S"Toggles the printing of the 'Setup Performance' log\n"
p91673
sS'cpp_type'
p91674
S'bool'
p91675
sS'default'
p91676
g3
sS'name'
p91677
S'setup_log'
p91678
sS'required'
p91679
I00
sS'group_name'
p91680
S'Perf Log'
p91681
sa(dp91682
S'description'
p91683
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p91684
sS'cpp_type'
p91685
S'bool'
p91686
sS'default'
p91687
S'0'
p91688
sS'name'
p91689
S'setup_log_early'
p91690
sS'required'
p91691
I00
sS'group_name'
p91692
S'Perf Log'
p91693
sa(dp91694
S'description'
p91695
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p91696
sS'cpp_type'
p91697
S'std::vector<VariableName, std::allocator<VariableName> >'
p91698
sS'default'
p91699
g3
sS'name'
p91700
S'show'
p91701
sS'required'
p91702
I00
sS'group_name'
p91703
S'Variables'
p91704
sa(dp91705
S'description'
p91706
S'Indent multiapp output using the multiapp name\n'
p91707
sS'cpp_type'
p91708
S'bool'
p91709
sS'default'
p91710
S'0'
p91711
sS'name'
p91712
S'show_multiapp_name'
p91713
sS'required'
p91714
I00
sS'group_name'
p91715
S'Advanced'
p91716
sa(dp91717
S'description'
p91718
S"Toggles the printing of the 'Moose Test Performance' log\n"
p91719
sS'cpp_type'
p91720
S'bool'
p91721
sS'default'
p91722
g3
sS'name'
p91723
S'solve_log'
p91724
sS'required'
p91725
I00
sS'group_name'
p91726
S'Perf Log'
p91727
sa(dp91728
S'description'
p91729
S'Time at which this output object begins to operate\n'
p91730
sS'cpp_type'
p91731
S'double'
p91732
sS'default'
p91733
g3
sS'name'
p91734
S'start_time'
p91735
sS'required'
p91736
I00
sS'group_name'
p91737
S'Timing'
p91738
sa(dp91739
S'description'
p91740
S'Only export results at sync times\n'
p91741
sS'cpp_type'
p91742
S'bool'
p91743
sS'default'
p91744
S'0'
p91745
sS'name'
p91746
S'sync_only'
p91747
sS'required'
p91748
I00
sS'group_name'
p91749
S'Timing'
p91750
sa(dp91751
S'description'
p91752
S'Times at which the output and solution is forced to occur\n'
p91753
sS'cpp_type'
p91754
S'std::vector<double, std::allocator<double> >'
p91755
sS'default'
p91756
g3
sS'name'
p91757
S'sync_times'
p91758
sS'required'
p91759
I00
sS'group_name'
p91760
S'Timing'
p91761
sa(dp91762
S'name'
p91763
S'system_info'
p91764
sS'cpp_type'
p91765
S'MultiMooseEnum'
p91766
sS'default'
p91767
S'AUX EXECUTION FRAMEWORK MESH NONLINEAR'
p91768
sS'description'
p91769
S"List of information types to display ('framework', 'mesh', 'aux', 'nonlinear', 'execution', 'output')\n"
p91770
sS'required'
p91771
I00
sS'options'
p91772
S'framework mesh aux nonlinear execution output'
p91773
sS'group_name'
p91774
S'Advanced'
p91775
sa(dp91776
S'description'
p91777
S'The number of significant digits that are printed on time related outputs\n'
p91778
sS'cpp_type'
p91779
S'unsigned int'
p91780
sS'default'
p91781
g3
sS'name'
p91782
S'time_precision'
p91783
sS'required'
p91784
I00
sS'group_name'
p91785
Nsa(dp91786
S'description'
p91787
S'Time tolerance utilized checking start and end times\n'
p91788
sS'cpp_type'
p91789
S'double'
p91790
sS'default'
p91791
S'1e-14'
p91792
sS'name'
p91793
S'time_tolerance'
p91794
sS'required'
p91795
I00
sS'group_name'
p91796
S'Timing'
p91797
sa(dp91798
S'description'
p91799
g3
sS'cpp_type'
p91800
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91801
sS'default'
p91802
S'Console'
p91803
sS'name'
p91804
S'type'
p91805
sS'required'
p91806
I00
sS'group_name'
p91807
Nsa(dp91808
S'description'
p91809
S'Enable/disable the use of the displaced mesh for outputting\n'
p91810
sS'cpp_type'
p91811
S'bool'
p91812
sS'default'
p91813
S'0'
p91814
sS'name'
p91815
S'use_displaced'
p91816
sS'required'
p91817
I00
sS'group_name'
p91818
Nsa(dp91819
S'description'
p91820
S'Print detailed diagnostics on timestep calculation\n'
p91821
sS'cpp_type'
p91822
S'bool'
p91823
sS'default'
p91824
S'0'
p91825
sS'name'
p91826
S'verbose'
p91827
sS'required'
p91828
I00
sS'group_name'
p91829
S'Advanced'
p91830
sasS'name'
p91831
S'/Outputs/Console'
p91832
sa(dp91833
S'description'
p91834
g3
sS'subblocks'
p91835
NsS'parameters'
p91836
(lp91837
(dp91838
S'name'
p91839
S'additional_execute_on'
p91840
sS'cpp_type'
p91841
S'MultiMooseEnum'
p91842
sS'default'
p91843
g3
sS'description'
p91844
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91845
sS'required'
p91846
I00
sS'options'
p91847
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91848
sS'group_name'
p91849
Nsa(dp91850
S'description'
p91851
S'When true the date and time are appended to the output filename.\n'
p91852
sS'cpp_type'
p91853
S'bool'
p91854
sS'default'
p91855
S'0'
p91856
sS'name'
p91857
S'append_date'
p91858
sS'required'
p91859
I00
sS'group_name'
p91860
Nsa(dp91861
S'description'
p91862
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p91863
sS'cpp_type'
p91864
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91865
sS'default'
p91866
g3
sS'name'
p91867
S'append_date_format'
p91868
sS'required'
p91869
I00
sS'group_name'
p91870
Nsa(dp91871
S'description'
p91872
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p91873
sS'cpp_type'
p91874
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p91875
sS'default'
p91876
g3
sS'name'
p91877
S'control_tags'
p91878
sS'required'
p91879
I00
sS'group_name'
p91880
Nsa(dp91881
S'description'
p91882
S'Time at which this output object stop operating\n'
p91883
sS'cpp_type'
p91884
S'double'
p91885
sS'default'
p91886
g3
sS'name'
p91887
S'end_time'
p91888
sS'required'
p91889
I00
sS'group_name'
p91890
S'Timing'
p91891
sa(dp91892
S'name'
p91893
S'execute_on'
p91894
sS'cpp_type'
p91895
S'MultiMooseEnum'
p91896
sS'default'
p91897
S'INITIAL'
p91898
sS'description'
p91899
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p91900
sS'required'
p91901
I00
sS'options'
p91902
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p91903
sS'group_name'
p91904
Nsa(dp91905
S'description'
p91906
S'The desired solution output name without an extension\n'
p91907
sS'cpp_type'
p91908
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p91909
sS'default'
p91910
g3
sS'name'
p91911
S'file_base'
p91912
sS'required'
p91913
I00
sS'group_name'
p91914
Nsa(dp91915
S'description'
p91916
S'The interval at which time steps are output to the solution file\n'
p91917
sS'cpp_type'
p91918
S'unsigned int'
p91919
sS'default'
p91920
S'1'
p91921
sS'name'
p91922
S'interval'
p91923
sS'required'
p91924
I00
sS'group_name'
p91925
S'Timing'
p91926
sa(dp91927
S'description'
p91928
S'Number of divisions applied to time step when outputting linear residuals\n'
p91929
sS'cpp_type'
p91930
S'double'
p91931
sS'default'
p91932
S'1000'
p91933
sS'name'
p91934
S'linear_residual_dt_divisor'
p91935
sS'required'
p91936
I00
sS'group_name'
p91937
S'PETSc'
p91938
sa(dp91939
S'description'
p91940
S'Specifies an end time to begin output on each linear residual evaluation\n'
p91941
sS'cpp_type'
p91942
S'double'
p91943
sS'default'
p91944
g3
sS'name'
p91945
S'linear_residual_end_time'
p91946
sS'required'
p91947
I00
sS'group_name'
p91948
S'PETSc'
p91949
sa(dp91950
S'description'
p91951
S'Specifies a start time to begin output on each linear residual evaluation\n'
p91952
sS'cpp_type'
p91953
S'double'
p91954
sS'default'
p91955
g3
sS'name'
p91956
S'linear_residual_start_time'
p91957
sS'required'
p91958
I00
sS'group_name'
p91959
S'PETSc'
p91960
sa(dp91961
S'description'
p91962
S'Specifies whether output occurs on each linear residual evaluation\n'
p91963
sS'cpp_type'
p91964
S'bool'
p91965
sS'default'
p91966
S'0'
p91967
sS'name'
p91968
S'linear_residuals'
p91969
sS'required'
p91970
I00
sS'group_name'
p91971
S'PETSc'
p91972
sa(dp91973
S'description'
p91974
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p91975
sS'cpp_type'
p91976
S'double'
p91977
sS'default'
p91978
S'1000'
p91979
sS'name'
p91980
S'nonlinear_residual_dt_divisor'
p91981
sS'required'
p91982
I00
sS'group_name'
p91983
S'PETSc'
p91984
sa(dp91985
S'description'
p91986
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p91987
sS'cpp_type'
p91988
S'double'
p91989
sS'default'
p91990
g3
sS'name'
p91991
S'nonlinear_residual_end_time'
p91992
sS'required'
p91993
I00
sS'group_name'
p91994
S'PETSc'
p91995
sa(dp91996
S'description'
p91997
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p91998
sS'cpp_type'
p91999
S'double'
p92000
sS'default'
p92001
g3
sS'name'
p92002
S'nonlinear_residual_start_time'
p92003
sS'required'
p92004
I00
sS'group_name'
p92005
S'PETSc'
p92006
sa(dp92007
S'description'
p92008
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92009
sS'cpp_type'
p92010
S'bool'
p92011
sS'default'
p92012
S'0'
p92013
sS'name'
p92014
S'nonlinear_residuals'
p92015
sS'required'
p92016
I00
sS'group_name'
p92017
S'PETSc'
p92018
sa(dp92019
S'description'
p92020
S'Output to the file\n'
p92021
sS'cpp_type'
p92022
S'bool'
p92023
sS'default'
p92024
S'1'
p92025
sS'name'
p92026
S'output_file'
p92027
sS'required'
p92028
I00
sS'group_name'
p92029
Nsa(dp92030
S'description'
p92031
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p92032
sS'cpp_type'
p92033
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92034
sS'default'
p92035
g3
sS'name'
p92036
S'output_if_base_contains'
p92037
sS'required'
p92038
I00
sS'group_name'
p92039
S'Advanced'
p92040
sa(dp92041
S'description'
p92042
S'Specifies whether output occurs on each linear residual evaluation\n'
p92043
sS'cpp_type'
p92044
S'bool'
p92045
sS'default'
p92046
S'0'
p92047
sS'name'
p92048
S'output_linear'
p92049
sS'required'
p92050
I00
sS'group_name'
p92051
Nsa(dp92052
S'description'
p92053
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92054
sS'cpp_type'
p92055
S'bool'
p92056
sS'default'
p92057
S'0'
p92058
sS'name'
p92059
S'output_nonlinear'
p92060
sS'required'
p92061
I00
sS'group_name'
p92062
Nsa(dp92063
S'description'
p92064
S'Output to the screen\n'
p92065
sS'cpp_type'
p92066
S'bool'
p92067
sS'default'
p92068
S'0'
p92069
sS'name'
p92070
S'output_screen'
p92071
sS'required'
p92072
I00
sS'group_name'
p92073
Nsa(dp92074
S'description'
p92075
S'The number of for extension suffix (e.g., out.e-s002)\n'
p92076
sS'cpp_type'
p92077
S'unsigned int'
p92078
sS'default'
p92079
S'4'
p92080
sS'name'
p92081
S'padding'
p92082
sS'required'
p92083
I00
sS'group_name'
p92084
S'Advanced'
p92085
sa(dp92086
S'description'
p92087
S'Time at which this output object begins to operate\n'
p92088
sS'cpp_type'
p92089
S'double'
p92090
sS'default'
p92091
g3
sS'name'
p92092
S'start_time'
p92093
sS'required'
p92094
I00
sS'group_name'
p92095
S'Timing'
p92096
sa(dp92097
S'description'
p92098
S'Only export results at sync times\n'
p92099
sS'cpp_type'
p92100
S'bool'
p92101
sS'default'
p92102
S'0'
p92103
sS'name'
p92104
S'sync_only'
p92105
sS'required'
p92106
I00
sS'group_name'
p92107
S'Timing'
p92108
sa(dp92109
S'description'
p92110
S'Times at which the output and solution is forced to occur\n'
p92111
sS'cpp_type'
p92112
S'std::vector<double, std::allocator<double> >'
p92113
sS'default'
p92114
g3
sS'name'
p92115
S'sync_times'
p92116
sS'required'
p92117
I00
sS'group_name'
p92118
S'Timing'
p92119
sa(dp92120
S'description'
p92121
S'System to output\n'
p92122
sS'cpp_type'
p92123
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92124
sS'default'
p92125
S'nl0'
p92126
sS'name'
p92127
S'system_name'
p92128
sS'required'
p92129
I00
sS'group_name'
p92130
Nsa(dp92131
S'description'
p92132
S'Time tolerance utilized checking start and end times\n'
p92133
sS'cpp_type'
p92134
S'double'
p92135
sS'default'
p92136
S'1e-14'
p92137
sS'name'
p92138
S'time_tolerance'
p92139
sS'required'
p92140
I00
sS'group_name'
p92141
S'Timing'
p92142
sa(dp92143
S'description'
p92144
g3
sS'cpp_type'
p92145
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92146
sS'default'
p92147
S'DOFMap'
p92148
sS'name'
p92149
S'type'
p92150
sS'required'
p92151
I00
sS'group_name'
p92152
Nsa(dp92153
S'description'
p92154
S'Enable/disable the use of the displaced mesh for outputting\n'
p92155
sS'cpp_type'
p92156
S'bool'
p92157
sS'default'
p92158
S'0'
p92159
sS'name'
p92160
S'use_displaced'
p92161
sS'required'
p92162
I00
sS'group_name'
p92163
NsasS'name'
p92164
S'/Outputs/DOFMap'
p92165
sa(dp92166
S'description'
p92167
S'Object for output data in the Exodus II format\n'
p92168
sS'subblocks'
p92169
NsS'parameters'
p92170
(lp92171
(dp92172
S'name'
p92173
S'additional_execute_on'
p92174
sS'cpp_type'
p92175
S'MultiMooseEnum'
p92176
sS'default'
p92177
g3
sS'description'
p92178
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92179
sS'required'
p92180
I00
sS'options'
p92181
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92182
sS'group_name'
p92183
Nsa(dp92184
S'description'
p92185
S'When true the date and time are appended to the output filename.\n'
p92186
sS'cpp_type'
p92187
S'bool'
p92188
sS'default'
p92189
S'0'
p92190
sS'name'
p92191
S'append_date'
p92192
sS'required'
p92193
I00
sS'group_name'
p92194
Nsa(dp92195
S'description'
p92196
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p92197
sS'cpp_type'
p92198
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92199
sS'default'
p92200
g3
sS'name'
p92201
S'append_date_format'
p92202
sS'required'
p92203
I00
sS'group_name'
p92204
Nsa(dp92205
S'description'
p92206
S"Append '_oversample' to the output file base\n"
p92207
sS'cpp_type'
p92208
S'bool'
p92209
sS'default'
p92210
S'0'
p92211
sS'name'
p92212
S'append_oversample'
p92213
sS'required'
p92214
I00
sS'group_name'
p92215
Nsa(dp92216
S'description'
p92217
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p92218
sS'cpp_type'
p92219
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92220
sS'default'
p92221
g3
sS'name'
p92222
S'control_tags'
p92223
sS'required'
p92224
I00
sS'group_name'
p92225
Nsa(dp92226
S'description'
p92227
S'Output elemental nonlinear variables as nodal\n'
p92228
sS'cpp_type'
p92229
S'bool'
p92230
sS'default'
p92231
S'0'
p92232
sS'name'
p92233
S'elemental_as_nodal'
p92234
sS'required'
p92235
I00
sS'group_name'
p92236
S'Variables'
p92237
sa(dp92238
S'description'
p92239
S'Time at which this output object stop operating\n'
p92240
sS'cpp_type'
p92241
S'double'
p92242
sS'default'
p92243
g3
sS'name'
p92244
S'end_time'
p92245
sS'required'
p92246
I00
sS'group_name'
p92247
S'Timing'
p92248
sa(dp92249
S'name'
p92250
S'execute_elemental_on'
p92251
sS'cpp_type'
p92252
S'MultiMooseEnum'
p92253
sS'default'
p92254
g3
sS'description'
p92255
S'Control the output of elemental variables\n'
p92256
sS'required'
p92257
I00
sS'options'
p92258
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92259
sS'group_name'
p92260
S'Variables'
p92261
sa(dp92262
S'description'
p92263
S'Enable/disable the output of elemental variables\n'
p92264
sS'cpp_type'
p92265
S'bool'
p92266
sS'default'
p92267
S'1'
p92268
sS'name'
p92269
S'execute_elemental_variables'
p92270
sS'required'
p92271
I00
sS'group_name'
p92272
Nsa(dp92273
S'description'
p92274
S'Enable/disable the output of input file information\n'
p92275
sS'cpp_type'
p92276
S'bool'
p92277
sS'default'
p92278
S'1'
p92279
sS'name'
p92280
S'execute_input'
p92281
sS'required'
p92282
I00
sS'group_name'
p92283
Nsa(dp92284
S'name'
p92285
S'execute_input_on'
p92286
sS'cpp_type'
p92287
S'MultiMooseEnum'
p92288
sS'default'
p92289
S'INITIAL'
p92290
sS'description'
p92291
S'Enable/disable the output of the input file\n'
p92292
sS'required'
p92293
I00
sS'options'
p92294
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92295
sS'group_name'
p92296
S'Variables'
p92297
sa(dp92298
S'name'
p92299
S'execute_nodal_on'
p92300
sS'cpp_type'
p92301
S'MultiMooseEnum'
p92302
sS'default'
p92303
g3
sS'description'
p92304
S'Control the output of nodal variables\n'
p92305
sS'required'
p92306
I00
sS'options'
p92307
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92308
sS'group_name'
p92309
S'Variables'
p92310
sa(dp92311
S'description'
p92312
S'Enable/disable the output of nodal variables\n'
p92313
sS'cpp_type'
p92314
S'bool'
p92315
sS'default'
p92316
S'1'
p92317
sS'name'
p92318
S'execute_nodal_variables'
p92319
sS'required'
p92320
I00
sS'group_name'
p92321
Nsa(dp92322
S'name'
p92323
S'execute_on'
p92324
sS'cpp_type'
p92325
S'MultiMooseEnum'
p92326
sS'default'
p92327
S'INITIAL TIMESTEP_END'
p92328
sS'description'
p92329
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92330
sS'required'
p92331
I00
sS'options'
p92332
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92333
sS'group_name'
p92334
Nsa(dp92335
S'name'
p92336
S'execute_postprocessors_on'
p92337
sS'cpp_type'
p92338
S'MultiMooseEnum'
p92339
sS'default'
p92340
g3
sS'description'
p92341
S'Control of when postprocessors are output\n'
p92342
sS'required'
p92343
I00
sS'options'
p92344
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92345
sS'group_name'
p92346
S'Variables'
p92347
sa(dp92348
S'description'
p92349
S'Enable/disable the output of aux scalar variables\n'
p92350
sS'cpp_type'
p92351
S'bool'
p92352
sS'default'
p92353
S'1'
p92354
sS'name'
p92355
S'execute_scalar_variables'
p92356
sS'required'
p92357
I00
sS'group_name'
p92358
Nsa(dp92359
S'name'
p92360
S'execute_scalars_on'
p92361
sS'cpp_type'
p92362
S'MultiMooseEnum'
p92363
sS'default'
p92364
g3
sS'description'
p92365
S'Control the output of scalar variables\n'
p92366
sS'required'
p92367
I00
sS'options'
p92368
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92369
sS'group_name'
p92370
S'Variables'
p92371
sa(dp92372
S'description'
p92373
S'Enable/disable the output of the simulation information\n'
p92374
sS'cpp_type'
p92375
S'bool'
p92376
sS'default'
p92377
S'1'
p92378
sS'name'
p92379
S'execute_system_information'
p92380
sS'required'
p92381
I00
sS'group_name'
p92382
Nsa(dp92383
S'description'
p92384
S'Enable/disable the output of vector postprocessors\n'
p92385
sS'cpp_type'
p92386
S'bool'
p92387
sS'default'
p92388
S'1'
p92389
sS'name'
p92390
S'execute_vector_postprocessors'
p92391
sS'required'
p92392
I00
sS'group_name'
p92393
Nsa(dp92394
S'description'
p92395
S'The name of the mesh file to read, for oversampling\n'
p92396
sS'cpp_type'
p92397
S'MeshFileName'
p92398
sS'default'
p92399
g3
sS'name'
p92400
S'file'
p92401
sS'required'
p92402
I00
sS'group_name'
p92403
S'Oversampling'
p92404
sa(dp92405
S'description'
p92406
S'The desired solution output name without an extension\n'
p92407
sS'cpp_type'
p92408
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92409
sS'default'
p92410
g3
sS'name'
p92411
S'file_base'
p92412
sS'required'
p92413
I00
sS'group_name'
p92414
Nsa(dp92415
S'description'
p92416
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p92417
sS'cpp_type'
p92418
S'std::vector<VariableName, std::allocator<VariableName> >'
p92419
sS'default'
p92420
g3
sS'name'
p92421
S'hide'
p92422
sS'required'
p92423
I00
sS'group_name'
p92424
S'Variables'
p92425
sa(dp92426
S'description'
p92427
S'The interval at which time steps are output to the solution file\n'
p92428
sS'cpp_type'
p92429
S'unsigned int'
p92430
sS'default'
p92431
S'1'
p92432
sS'name'
p92433
S'interval'
p92434
sS'required'
p92435
I00
sS'group_name'
p92436
S'Timing'
p92437
sa(dp92438
S'description'
p92439
S'Number of divisions applied to time step when outputting linear residuals\n'
p92440
sS'cpp_type'
p92441
S'double'
p92442
sS'default'
p92443
S'1000'
p92444
sS'name'
p92445
S'linear_residual_dt_divisor'
p92446
sS'required'
p92447
I00
sS'group_name'
p92448
S'PETSc'
p92449
sa(dp92450
S'description'
p92451
S'Specifies an end time to begin output on each linear residual evaluation\n'
p92452
sS'cpp_type'
p92453
S'double'
p92454
sS'default'
p92455
g3
sS'name'
p92456
S'linear_residual_end_time'
p92457
sS'required'
p92458
I00
sS'group_name'
p92459
S'PETSc'
p92460
sa(dp92461
S'description'
p92462
S'Specifies a start time to begin output on each linear residual evaluation\n'
p92463
sS'cpp_type'
p92464
S'double'
p92465
sS'default'
p92466
g3
sS'name'
p92467
S'linear_residual_start_time'
p92468
sS'required'
p92469
I00
sS'group_name'
p92470
S'PETSc'
p92471
sa(dp92472
S'description'
p92473
S'Specifies whether output occurs on each linear residual evaluation\n'
p92474
sS'cpp_type'
p92475
S'bool'
p92476
sS'default'
p92477
S'0'
p92478
sS'name'
p92479
S'linear_residuals'
p92480
sS'required'
p92481
I00
sS'group_name'
p92482
S'PETSc'
p92483
sa(dp92484
S'description'
p92485
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p92486
sS'cpp_type'
p92487
S'double'
p92488
sS'default'
p92489
S'1000'
p92490
sS'name'
p92491
S'nonlinear_residual_dt_divisor'
p92492
sS'required'
p92493
I00
sS'group_name'
p92494
S'PETSc'
p92495
sa(dp92496
S'description'
p92497
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p92498
sS'cpp_type'
p92499
S'double'
p92500
sS'default'
p92501
g3
sS'name'
p92502
S'nonlinear_residual_end_time'
p92503
sS'required'
p92504
I00
sS'group_name'
p92505
S'PETSc'
p92506
sa(dp92507
S'description'
p92508
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p92509
sS'cpp_type'
p92510
S'double'
p92511
sS'default'
p92512
g3
sS'name'
p92513
S'nonlinear_residual_start_time'
p92514
sS'required'
p92515
I00
sS'group_name'
p92516
S'PETSc'
p92517
sa(dp92518
S'description'
p92519
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92520
sS'cpp_type'
p92521
S'bool'
p92522
sS'default'
p92523
S'0'
p92524
sS'name'
p92525
S'nonlinear_residuals'
p92526
sS'required'
p92527
I00
sS'group_name'
p92528
S'PETSc'
p92529
sa(dp92530
S'description'
p92531
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p92532
sS'cpp_type'
p92533
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92534
sS'default'
p92535
g3
sS'name'
p92536
S'output_if_base_contains'
p92537
sS'required'
p92538
I00
sS'group_name'
p92539
S'Advanced'
p92540
sa(dp92541
S'description'
p92542
S'Specifies whether output occurs on each linear residual evaluation\n'
p92543
sS'cpp_type'
p92544
S'bool'
p92545
sS'default'
p92546
S'0'
p92547
sS'name'
p92548
S'output_linear'
p92549
sS'required'
p92550
I00
sS'group_name'
p92551
Nsa(dp92552
S'description'
p92553
S'Flag indicating if material properties should be output\n'
p92554
sS'cpp_type'
p92555
S'bool'
p92556
sS'default'
p92557
S'0'
p92558
sS'name'
p92559
S'output_material_properties'
p92560
sS'required'
p92561
I00
sS'group_name'
p92562
S'Materials'
p92563
sa(dp92564
S'description'
p92565
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92566
sS'cpp_type'
p92567
S'bool'
p92568
sS'default'
p92569
S'0'
p92570
sS'name'
p92571
S'output_nonlinear'
p92572
sS'required'
p92573
I00
sS'group_name'
p92574
Nsa(dp92575
S'description'
p92576
S'Enable/disable the output of postprocessors\n'
p92577
sS'cpp_type'
p92578
S'bool'
p92579
sS'default'
p92580
S'1'
p92581
sS'name'
p92582
S'output_postprocessors'
p92583
sS'required'
p92584
I00
sS'group_name'
p92585
Nsa(dp92586
S'description'
p92587
S'Set to true to enable oversampling\n'
p92588
sS'cpp_type'
p92589
S'bool'
p92590
sS'default'
p92591
S'0'
p92592
sS'name'
p92593
S'oversample'
p92594
sS'required'
p92595
I00
sS'group_name'
p92596
Nsa(dp92597
S'description'
p92598
S'When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n'
p92599
sS'cpp_type'
p92600
S'bool'
p92601
sS'default'
p92602
S'0'
p92603
sS'name'
p92604
S'overwrite'
p92605
sS'required'
p92606
I00
sS'group_name'
p92607
Nsa(dp92608
S'description'
p92609
S'The number of for extension suffix (e.g., out.e-s002)\n'
p92610
sS'cpp_type'
p92611
S'unsigned int'
p92612
sS'default'
p92613
S'3'
p92614
sS'name'
p92615
S'padding'
p92616
sS'required'
p92617
I00
sS'group_name'
p92618
S'Advanced'
p92619
sa(dp92620
S'description'
p92621
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p92622
sS'cpp_type'
p92623
S'libMesh::Point'
p92624
sS'default'
p92625
g3
sS'name'
p92626
S'position'
p92627
sS'required'
p92628
I00
sS'group_name'
p92629
S'Oversampling'
p92630
sa(dp92631
S'description'
p92632
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p92633
sS'cpp_type'
p92634
S'unsigned int'
p92635
sS'default'
p92636
S'0'
p92637
sS'name'
p92638
S'refinements'
p92639
sS'required'
p92640
I00
sS'group_name'
p92641
S'Oversampling'
p92642
sa(dp92643
S'description'
p92644
S'Output scalar variables as nodal\n'
p92645
sS'cpp_type'
p92646
S'bool'
p92647
sS'default'
p92648
S'0'
p92649
sS'name'
p92650
S'scalar_as_nodal'
p92651
sS'required'
p92652
I00
sS'group_name'
p92653
S'Variables'
p92654
sa(dp92655
S'description'
p92656
S"Enable/disable sequential file output (enabled by default when 'use_displace = true', otherwise defaults to false\n"
p92657
sS'cpp_type'
p92658
S'bool'
p92659
sS'default'
p92660
g3
sS'name'
p92661
S'sequence'
p92662
sS'required'
p92663
I00
sS'group_name'
p92664
Nsa(dp92665
S'description'
p92666
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p92667
sS'cpp_type'
p92668
S'std::vector<VariableName, std::allocator<VariableName> >'
p92669
sS'default'
p92670
g3
sS'name'
p92671
S'show'
p92672
sS'required'
p92673
I00
sS'group_name'
p92674
S'Variables'
p92675
sa(dp92676
S'description'
p92677
S'List of materialproperties that should be written to the output\n'
p92678
sS'cpp_type'
p92679
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92680
sS'default'
p92681
g3
sS'name'
p92682
S'show_material_properties'
p92683
sS'required'
p92684
I00
sS'group_name'
p92685
S'Materials'
p92686
sa(dp92687
S'description'
p92688
S'Time at which this output object begins to operate\n'
p92689
sS'cpp_type'
p92690
S'double'
p92691
sS'default'
p92692
g3
sS'name'
p92693
S'start_time'
p92694
sS'required'
p92695
I00
sS'group_name'
p92696
S'Timing'
p92697
sa(dp92698
S'description'
p92699
S'Only export results at sync times\n'
p92700
sS'cpp_type'
p92701
S'bool'
p92702
sS'default'
p92703
S'0'
p92704
sS'name'
p92705
S'sync_only'
p92706
sS'required'
p92707
I00
sS'group_name'
p92708
S'Timing'
p92709
sa(dp92710
S'description'
p92711
S'Times at which the output and solution is forced to occur\n'
p92712
sS'cpp_type'
p92713
S'std::vector<double, std::allocator<double> >'
p92714
sS'default'
p92715
g3
sS'name'
p92716
S'sync_times'
p92717
sS'required'
p92718
I00
sS'group_name'
p92719
S'Timing'
p92720
sa(dp92721
S'description'
p92722
S'Time tolerance utilized checking start and end times\n'
p92723
sS'cpp_type'
p92724
S'double'
p92725
sS'default'
p92726
S'1e-14'
p92727
sS'name'
p92728
S'time_tolerance'
p92729
sS'required'
p92730
I00
sS'group_name'
p92731
S'Timing'
p92732
sa(dp92733
S'description'
p92734
g3
sS'cpp_type'
p92735
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92736
sS'default'
p92737
S'Exodus'
p92738
sS'name'
p92739
S'type'
p92740
sS'required'
p92741
I00
sS'group_name'
p92742
Nsa(dp92743
S'description'
p92744
S'Enable/disable the use of the displaced mesh for outputting\n'
p92745
sS'cpp_type'
p92746
S'bool'
p92747
sS'default'
p92748
S'0'
p92749
sS'name'
p92750
S'use_displaced'
p92751
sS'required'
p92752
I00
sS'group_name'
p92753
Nsa(dp92754
S'description'
p92755
S'Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n'
p92756
sS'cpp_type'
p92757
S'bool'
p92758
sS'default'
p92759
g3
sS'name'
p92760
S'use_problem_dimension'
p92761
sS'required'
p92762
I00
sS'group_name'
p92763
NsasS'name'
p92764
S'/Outputs/Exodus'
p92765
sa(dp92766
S'description'
p92767
S'Object for outputting data in the GMV format\n'
p92768
sS'subblocks'
p92769
NsS'parameters'
p92770
(lp92771
(dp92772
S'name'
p92773
S'additional_execute_on'
p92774
sS'cpp_type'
p92775
S'MultiMooseEnum'
p92776
sS'default'
p92777
g3
sS'description'
p92778
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92779
sS'required'
p92780
I00
sS'options'
p92781
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92782
sS'group_name'
p92783
Nsa(dp92784
S'description'
p92785
S'When true the date and time are appended to the output filename.\n'
p92786
sS'cpp_type'
p92787
S'bool'
p92788
sS'default'
p92789
S'0'
p92790
sS'name'
p92791
S'append_date'
p92792
sS'required'
p92793
I00
sS'group_name'
p92794
Nsa(dp92795
S'description'
p92796
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p92797
sS'cpp_type'
p92798
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92799
sS'default'
p92800
g3
sS'name'
p92801
S'append_date_format'
p92802
sS'required'
p92803
I00
sS'group_name'
p92804
Nsa(dp92805
S'description'
p92806
S"Append '_oversample' to the output file base\n"
p92807
sS'cpp_type'
p92808
S'bool'
p92809
sS'default'
p92810
S'0'
p92811
sS'name'
p92812
S'append_oversample'
p92813
sS'required'
p92814
I00
sS'group_name'
p92815
Nsa(dp92816
S'description'
p92817
S'Output the file in binary format\n'
p92818
sS'cpp_type'
p92819
S'bool'
p92820
sS'default'
p92821
S'1'
p92822
sS'name'
p92823
S'binary'
p92824
sS'required'
p92825
I00
sS'group_name'
p92826
S'Advanced'
p92827
sa(dp92828
S'description'
p92829
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p92830
sS'cpp_type'
p92831
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92832
sS'default'
p92833
g3
sS'name'
p92834
S'control_tags'
p92835
sS'required'
p92836
I00
sS'group_name'
p92837
Nsa(dp92838
S'description'
p92839
S'Time at which this output object stop operating\n'
p92840
sS'cpp_type'
p92841
S'double'
p92842
sS'default'
p92843
g3
sS'name'
p92844
S'end_time'
p92845
sS'required'
p92846
I00
sS'group_name'
p92847
S'Timing'
p92848
sa(dp92849
S'name'
p92850
S'execute_on'
p92851
sS'cpp_type'
p92852
S'MultiMooseEnum'
p92853
sS'default'
p92854
S'INITIAL TIMESTEP_END'
p92855
sS'description'
p92856
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p92857
sS'required'
p92858
I00
sS'options'
p92859
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p92860
sS'group_name'
p92861
Nsa(dp92862
S'description'
p92863
S'The name of the mesh file to read, for oversampling\n'
p92864
sS'cpp_type'
p92865
S'MeshFileName'
p92866
sS'default'
p92867
g3
sS'name'
p92868
S'file'
p92869
sS'required'
p92870
I00
sS'group_name'
p92871
S'Oversampling'
p92872
sa(dp92873
S'description'
p92874
S'The desired solution output name without an extension\n'
p92875
sS'cpp_type'
p92876
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p92877
sS'default'
p92878
g3
sS'name'
p92879
S'file_base'
p92880
sS'required'
p92881
I00
sS'group_name'
p92882
Nsa(dp92883
S'description'
p92884
S'The interval at which time steps are output to the solution file\n'
p92885
sS'cpp_type'
p92886
S'unsigned int'
p92887
sS'default'
p92888
S'1'
p92889
sS'name'
p92890
S'interval'
p92891
sS'required'
p92892
I00
sS'group_name'
p92893
S'Timing'
p92894
sa(dp92895
S'description'
p92896
S'Number of divisions applied to time step when outputting linear residuals\n'
p92897
sS'cpp_type'
p92898
S'double'
p92899
sS'default'
p92900
S'1000'
p92901
sS'name'
p92902
S'linear_residual_dt_divisor'
p92903
sS'required'
p92904
I00
sS'group_name'
p92905
S'PETSc'
p92906
sa(dp92907
S'description'
p92908
S'Specifies an end time to begin output on each linear residual evaluation\n'
p92909
sS'cpp_type'
p92910
S'double'
p92911
sS'default'
p92912
g3
sS'name'
p92913
S'linear_residual_end_time'
p92914
sS'required'
p92915
I00
sS'group_name'
p92916
S'PETSc'
p92917
sa(dp92918
S'description'
p92919
S'Specifies a start time to begin output on each linear residual evaluation\n'
p92920
sS'cpp_type'
p92921
S'double'
p92922
sS'default'
p92923
g3
sS'name'
p92924
S'linear_residual_start_time'
p92925
sS'required'
p92926
I00
sS'group_name'
p92927
S'PETSc'
p92928
sa(dp92929
S'description'
p92930
S'Specifies whether output occurs on each linear residual evaluation\n'
p92931
sS'cpp_type'
p92932
S'bool'
p92933
sS'default'
p92934
S'0'
p92935
sS'name'
p92936
S'linear_residuals'
p92937
sS'required'
p92938
I00
sS'group_name'
p92939
S'PETSc'
p92940
sa(dp92941
S'description'
p92942
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p92943
sS'cpp_type'
p92944
S'double'
p92945
sS'default'
p92946
S'1000'
p92947
sS'name'
p92948
S'nonlinear_residual_dt_divisor'
p92949
sS'required'
p92950
I00
sS'group_name'
p92951
S'PETSc'
p92952
sa(dp92953
S'description'
p92954
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p92955
sS'cpp_type'
p92956
S'double'
p92957
sS'default'
p92958
g3
sS'name'
p92959
S'nonlinear_residual_end_time'
p92960
sS'required'
p92961
I00
sS'group_name'
p92962
S'PETSc'
p92963
sa(dp92964
S'description'
p92965
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p92966
sS'cpp_type'
p92967
S'double'
p92968
sS'default'
p92969
g3
sS'name'
p92970
S'nonlinear_residual_start_time'
p92971
sS'required'
p92972
I00
sS'group_name'
p92973
S'PETSc'
p92974
sa(dp92975
S'description'
p92976
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p92977
sS'cpp_type'
p92978
S'bool'
p92979
sS'default'
p92980
S'0'
p92981
sS'name'
p92982
S'nonlinear_residuals'
p92983
sS'required'
p92984
I00
sS'group_name'
p92985
S'PETSc'
p92986
sa(dp92987
S'description'
p92988
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p92989
sS'cpp_type'
p92990
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p92991
sS'default'
p92992
g3
sS'name'
p92993
S'output_if_base_contains'
p92994
sS'required'
p92995
I00
sS'group_name'
p92996
S'Advanced'
p92997
sa(dp92998
S'description'
p92999
S'Specifies whether output occurs on each linear residual evaluation\n'
p93000
sS'cpp_type'
p93001
S'bool'
p93002
sS'default'
p93003
S'0'
p93004
sS'name'
p93005
S'output_linear'
p93006
sS'required'
p93007
I00
sS'group_name'
p93008
Nsa(dp93009
S'description'
p93010
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93011
sS'cpp_type'
p93012
S'bool'
p93013
sS'default'
p93014
S'0'
p93015
sS'name'
p93016
S'output_nonlinear'
p93017
sS'required'
p93018
I00
sS'group_name'
p93019
Nsa(dp93020
S'description'
p93021
S'Set to true to enable oversampling\n'
p93022
sS'cpp_type'
p93023
S'bool'
p93024
sS'default'
p93025
S'0'
p93026
sS'name'
p93027
S'oversample'
p93028
sS'required'
p93029
I00
sS'group_name'
p93030
Nsa(dp93031
S'description'
p93032
S'The number of for extension suffix (e.g., out.e-s002)\n'
p93033
sS'cpp_type'
p93034
S'unsigned int'
p93035
sS'default'
p93036
S'4'
p93037
sS'name'
p93038
S'padding'
p93039
sS'required'
p93040
I00
sS'group_name'
p93041
S'Advanced'
p93042
sa(dp93043
S'description'
p93044
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p93045
sS'cpp_type'
p93046
S'libMesh::Point'
p93047
sS'default'
p93048
g3
sS'name'
p93049
S'position'
p93050
sS'required'
p93051
I00
sS'group_name'
p93052
S'Oversampling'
p93053
sa(dp93054
S'description'
p93055
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p93056
sS'cpp_type'
p93057
S'unsigned int'
p93058
sS'default'
p93059
S'0'
p93060
sS'name'
p93061
S'refinements'
p93062
sS'required'
p93063
I00
sS'group_name'
p93064
S'Oversampling'
p93065
sa(dp93066
S'description'
p93067
S'Time at which this output object begins to operate\n'
p93068
sS'cpp_type'
p93069
S'double'
p93070
sS'default'
p93071
g3
sS'name'
p93072
S'start_time'
p93073
sS'required'
p93074
I00
sS'group_name'
p93075
S'Timing'
p93076
sa(dp93077
S'description'
p93078
S'Only export results at sync times\n'
p93079
sS'cpp_type'
p93080
S'bool'
p93081
sS'default'
p93082
S'0'
p93083
sS'name'
p93084
S'sync_only'
p93085
sS'required'
p93086
I00
sS'group_name'
p93087
S'Timing'
p93088
sa(dp93089
S'description'
p93090
S'Times at which the output and solution is forced to occur\n'
p93091
sS'cpp_type'
p93092
S'std::vector<double, std::allocator<double> >'
p93093
sS'default'
p93094
g3
sS'name'
p93095
S'sync_times'
p93096
sS'required'
p93097
I00
sS'group_name'
p93098
S'Timing'
p93099
sa(dp93100
S'description'
p93101
S'Time tolerance utilized checking start and end times\n'
p93102
sS'cpp_type'
p93103
S'double'
p93104
sS'default'
p93105
S'1e-14'
p93106
sS'name'
p93107
S'time_tolerance'
p93108
sS'required'
p93109
I00
sS'group_name'
p93110
S'Timing'
p93111
sa(dp93112
S'description'
p93113
g3
sS'cpp_type'
p93114
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93115
sS'default'
p93116
S'GMV'
p93117
sS'name'
p93118
S'type'
p93119
sS'required'
p93120
I00
sS'group_name'
p93121
Nsa(dp93122
S'description'
p93123
S'Enable/disable the use of the displaced mesh for outputting\n'
p93124
sS'cpp_type'
p93125
S'bool'
p93126
sS'default'
p93127
S'0'
p93128
sS'name'
p93129
S'use_displaced'
p93130
sS'required'
p93131
I00
sS'group_name'
p93132
NsasS'name'
p93133
S'/Outputs/GMV'
p93134
sa(dp93135
S'description'
p93136
g3
sS'subblocks'
p93137
NsS'parameters'
p93138
(lp93139
(dp93140
S'name'
p93141
S'additional_execute_on'
p93142
sS'cpp_type'
p93143
S'MultiMooseEnum'
p93144
sS'default'
p93145
g3
sS'description'
p93146
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93147
sS'required'
p93148
I00
sS'options'
p93149
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93150
sS'group_name'
p93151
Nsa(dp93152
S'description'
p93153
S'When true the date and time are appended to the output filename.\n'
p93154
sS'cpp_type'
p93155
S'bool'
p93156
sS'default'
p93157
S'0'
p93158
sS'name'
p93159
S'append_date'
p93160
sS'required'
p93161
I00
sS'group_name'
p93162
Nsa(dp93163
S'description'
p93164
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p93165
sS'cpp_type'
p93166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93167
sS'default'
p93168
g3
sS'name'
p93169
S'append_date_format'
p93170
sS'required'
p93171
I00
sS'group_name'
p93172
Nsa(dp93173
S'description'
p93174
S'Append existing file on restart\n'
p93175
sS'cpp_type'
p93176
S'bool'
p93177
sS'default'
p93178
S'0'
p93179
sS'name'
p93180
S'append_restart'
p93181
sS'required'
p93182
I00
sS'group_name'
p93183
Nsa(dp93184
S'description'
p93185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93186
sS'cpp_type'
p93187
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93188
sS'default'
p93189
g3
sS'name'
p93190
S'control_tags'
p93191
sS'required'
p93192
I00
sS'group_name'
p93193
Nsa(dp93194
S'description'
p93195
S'Time at which this output object stop operating\n'
p93196
sS'cpp_type'
p93197
S'double'
p93198
sS'default'
p93199
g3
sS'name'
p93200
S'end_time'
p93201
sS'required'
p93202
I00
sS'group_name'
p93203
S'Timing'
p93204
sa(dp93205
S'description'
p93206
S'Enable/disable the output of elemental variables\n'
p93207
sS'cpp_type'
p93208
S'bool'
p93209
sS'default'
p93210
S'1'
p93211
sS'name'
p93212
S'execute_elemental_variables'
p93213
sS'required'
p93214
I00
sS'group_name'
p93215
Nsa(dp93216
S'description'
p93217
S'Enable/disable the output of input file information\n'
p93218
sS'cpp_type'
p93219
S'bool'
p93220
sS'default'
p93221
S'1'
p93222
sS'name'
p93223
S'execute_input'
p93224
sS'required'
p93225
I00
sS'group_name'
p93226
Nsa(dp93227
S'description'
p93228
S'Enable/disable the output of nodal variables\n'
p93229
sS'cpp_type'
p93230
S'bool'
p93231
sS'default'
p93232
S'1'
p93233
sS'name'
p93234
S'execute_nodal_variables'
p93235
sS'required'
p93236
I00
sS'group_name'
p93237
Nsa(dp93238
S'name'
p93239
S'execute_on'
p93240
sS'cpp_type'
p93241
S'MultiMooseEnum'
p93242
sS'default'
p93243
S'INITIAL TIMESTEP_END'
p93244
sS'description'
p93245
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93246
sS'required'
p93247
I00
sS'options'
p93248
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93249
sS'group_name'
p93250
Nsa(dp93251
S'name'
p93252
S'execute_postprocessors_on'
p93253
sS'cpp_type'
p93254
S'MultiMooseEnum'
p93255
sS'default'
p93256
g3
sS'description'
p93257
S'Control of when postprocessors are output\n'
p93258
sS'required'
p93259
I00
sS'options'
p93260
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93261
sS'group_name'
p93262
S'Variables'
p93263
sa(dp93264
S'description'
p93265
S'Enable/disable the output of aux scalar variables\n'
p93266
sS'cpp_type'
p93267
S'bool'
p93268
sS'default'
p93269
S'1'
p93270
sS'name'
p93271
S'execute_scalar_variables'
p93272
sS'required'
p93273
I00
sS'group_name'
p93274
Nsa(dp93275
S'name'
p93276
S'execute_scalars_on'
p93277
sS'cpp_type'
p93278
S'MultiMooseEnum'
p93279
sS'default'
p93280
g3
sS'description'
p93281
S'Control the output of scalar variables\n'
p93282
sS'required'
p93283
I00
sS'options'
p93284
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93285
sS'group_name'
p93286
S'Variables'
p93287
sa(dp93288
S'description'
p93289
S'Enable/disable the output of the simulation information\n'
p93290
sS'cpp_type'
p93291
S'bool'
p93292
sS'default'
p93293
S'1'
p93294
sS'name'
p93295
S'execute_system_information'
p93296
sS'required'
p93297
I00
sS'group_name'
p93298
Nsa(dp93299
S'description'
p93300
S'Enable/disable the output of vector postprocessors\n'
p93301
sS'cpp_type'
p93302
S'bool'
p93303
sS'default'
p93304
S'1'
p93305
sS'name'
p93306
S'execute_vector_postprocessors'
p93307
sS'required'
p93308
I00
sS'group_name'
p93309
Nsa(dp93310
S'name'
p93311
S'execute_vector_postprocessors_on'
p93312
sS'cpp_type'
p93313
S'MultiMooseEnum'
p93314
sS'default'
p93315
g3
sS'description'
p93316
S'Enable/disable the output of VectorPostprocessors\n'
p93317
sS'required'
p93318
I00
sS'options'
p93319
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93320
sS'group_name'
p93321
S'Variables'
p93322
sa(dp93323
S'name'
p93324
S'extension'
p93325
sS'cpp_type'
p93326
S'MooseEnum'
p93327
sS'default'
p93328
S'png'
p93329
sS'description'
p93330
S'GNU plot file extension\n'
p93331
sS'required'
p93332
I00
sS'options'
p93333
S'png ps gif'
p93334
sS'group_name'
p93335
Nsa(dp93336
S'description'
p93337
S'The desired solution output name without an extension\n'
p93338
sS'cpp_type'
p93339
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93340
sS'default'
p93341
g3
sS'name'
p93342
S'file_base'
p93343
sS'required'
p93344
I00
sS'group_name'
p93345
Nsa(dp93346
S'description'
p93347
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93348
sS'cpp_type'
p93349
S'std::vector<VariableName, std::allocator<VariableName> >'
p93350
sS'default'
p93351
g3
sS'name'
p93352
S'hide'
p93353
sS'required'
p93354
I00
sS'group_name'
p93355
S'Variables'
p93356
sa(dp93357
S'description'
p93358
S'The interval at which time steps are output to the solution file\n'
p93359
sS'cpp_type'
p93360
S'unsigned int'
p93361
sS'default'
p93362
S'1'
p93363
sS'name'
p93364
S'interval'
p93365
sS'required'
p93366
I00
sS'group_name'
p93367
S'Timing'
p93368
sa(dp93369
S'description'
p93370
S'Number of divisions applied to time step when outputting linear residuals\n'
p93371
sS'cpp_type'
p93372
S'double'
p93373
sS'default'
p93374
S'1000'
p93375
sS'name'
p93376
S'linear_residual_dt_divisor'
p93377
sS'required'
p93378
I00
sS'group_name'
p93379
S'PETSc'
p93380
sa(dp93381
S'description'
p93382
S'Specifies an end time to begin output on each linear residual evaluation\n'
p93383
sS'cpp_type'
p93384
S'double'
p93385
sS'default'
p93386
g3
sS'name'
p93387
S'linear_residual_end_time'
p93388
sS'required'
p93389
I00
sS'group_name'
p93390
S'PETSc'
p93391
sa(dp93392
S'description'
p93393
S'Specifies a start time to begin output on each linear residual evaluation\n'
p93394
sS'cpp_type'
p93395
S'double'
p93396
sS'default'
p93397
g3
sS'name'
p93398
S'linear_residual_start_time'
p93399
sS'required'
p93400
I00
sS'group_name'
p93401
S'PETSc'
p93402
sa(dp93403
S'description'
p93404
S'Specifies whether output occurs on each linear residual evaluation\n'
p93405
sS'cpp_type'
p93406
S'bool'
p93407
sS'default'
p93408
S'0'
p93409
sS'name'
p93410
S'linear_residuals'
p93411
sS'required'
p93412
I00
sS'group_name'
p93413
S'PETSc'
p93414
sa(dp93415
S'description'
p93416
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p93417
sS'cpp_type'
p93418
S'double'
p93419
sS'default'
p93420
S'1000'
p93421
sS'name'
p93422
S'nonlinear_residual_dt_divisor'
p93423
sS'required'
p93424
I00
sS'group_name'
p93425
S'PETSc'
p93426
sa(dp93427
S'description'
p93428
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p93429
sS'cpp_type'
p93430
S'double'
p93431
sS'default'
p93432
g3
sS'name'
p93433
S'nonlinear_residual_end_time'
p93434
sS'required'
p93435
I00
sS'group_name'
p93436
S'PETSc'
p93437
sa(dp93438
S'description'
p93439
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p93440
sS'cpp_type'
p93441
S'double'
p93442
sS'default'
p93443
g3
sS'name'
p93444
S'nonlinear_residual_start_time'
p93445
sS'required'
p93446
I00
sS'group_name'
p93447
S'PETSc'
p93448
sa(dp93449
S'description'
p93450
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93451
sS'cpp_type'
p93452
S'bool'
p93453
sS'default'
p93454
S'0'
p93455
sS'name'
p93456
S'nonlinear_residuals'
p93457
sS'required'
p93458
I00
sS'group_name'
p93459
S'PETSc'
p93460
sa(dp93461
S'description'
p93462
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p93463
sS'cpp_type'
p93464
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93465
sS'default'
p93466
g3
sS'name'
p93467
S'output_if_base_contains'
p93468
sS'required'
p93469
I00
sS'group_name'
p93470
S'Advanced'
p93471
sa(dp93472
S'description'
p93473
S'Specifies whether output occurs on each linear residual evaluation\n'
p93474
sS'cpp_type'
p93475
S'bool'
p93476
sS'default'
p93477
S'0'
p93478
sS'name'
p93479
S'output_linear'
p93480
sS'required'
p93481
I00
sS'group_name'
p93482
Nsa(dp93483
S'description'
p93484
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p93485
sS'cpp_type'
p93486
S'bool'
p93487
sS'default'
p93488
S'0'
p93489
sS'name'
p93490
S'output_nonlinear'
p93491
sS'required'
p93492
I00
sS'group_name'
p93493
Nsa(dp93494
S'description'
p93495
S'Enable/disable the output of postprocessors\n'
p93496
sS'cpp_type'
p93497
S'bool'
p93498
sS'default'
p93499
S'1'
p93500
sS'name'
p93501
S'output_postprocessors'
p93502
sS'required'
p93503
I00
sS'group_name'
p93504
Nsa(dp93505
S'description'
p93506
S'The number of for extension suffix (e.g., out.e-s002)\n'
p93507
sS'cpp_type'
p93508
S'unsigned int'
p93509
sS'default'
p93510
S'4'
p93511
sS'name'
p93512
S'padding'
p93513
sS'required'
p93514
I00
sS'group_name'
p93515
S'Advanced'
p93516
sa(dp93517
S'description'
p93518
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93519
sS'cpp_type'
p93520
S'std::vector<VariableName, std::allocator<VariableName> >'
p93521
sS'default'
p93522
g3
sS'name'
p93523
S'show'
p93524
sS'required'
p93525
I00
sS'group_name'
p93526
S'Variables'
p93527
sa(dp93528
S'description'
p93529
S'Time at which this output object begins to operate\n'
p93530
sS'cpp_type'
p93531
S'double'
p93532
sS'default'
p93533
g3
sS'name'
p93534
S'start_time'
p93535
sS'required'
p93536
I00
sS'group_name'
p93537
S'Timing'
p93538
sa(dp93539
S'description'
p93540
S'Only export results at sync times\n'
p93541
sS'cpp_type'
p93542
S'bool'
p93543
sS'default'
p93544
S'0'
p93545
sS'name'
p93546
S'sync_only'
p93547
sS'required'
p93548
I00
sS'group_name'
p93549
S'Timing'
p93550
sa(dp93551
S'description'
p93552
S'Times at which the output and solution is forced to occur\n'
p93553
sS'cpp_type'
p93554
S'std::vector<double, std::allocator<double> >'
p93555
sS'default'
p93556
g3
sS'name'
p93557
S'sync_times'
p93558
sS'required'
p93559
I00
sS'group_name'
p93560
S'Timing'
p93561
sa(dp93562
S'description'
p93563
S'Time tolerance utilized checking start and end times\n'
p93564
sS'cpp_type'
p93565
S'double'
p93566
sS'default'
p93567
S'1e-14'
p93568
sS'name'
p93569
S'time_tolerance'
p93570
sS'required'
p93571
I00
sS'group_name'
p93572
S'Timing'
p93573
sa(dp93574
S'description'
p93575
g3
sS'cpp_type'
p93576
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93577
sS'default'
p93578
S'Gnuplot'
p93579
sS'name'
p93580
S'type'
p93581
sS'required'
p93582
I00
sS'group_name'
p93583
Nsa(dp93584
S'description'
p93585
S'Enable/disable the use of the displaced mesh for outputting\n'
p93586
sS'cpp_type'
p93587
S'bool'
p93588
sS'default'
p93589
S'0'
p93590
sS'name'
p93591
S'use_displaced'
p93592
sS'required'
p93593
I00
sS'group_name'
p93594
NsasS'name'
p93595
S'/Outputs/Gnuplot'
p93596
sa(dp93597
S'description'
p93598
g3
sS'subblocks'
p93599
NsS'parameters'
p93600
(lp93601
(dp93602
S'name'
p93603
S'additional_execute_on'
p93604
sS'cpp_type'
p93605
S'MultiMooseEnum'
p93606
sS'default'
p93607
g3
sS'description'
p93608
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93609
sS'required'
p93610
I00
sS'options'
p93611
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93612
sS'group_name'
p93613
Nsa(dp93614
S'description'
p93615
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93616
sS'cpp_type'
p93617
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93618
sS'default'
p93619
g3
sS'name'
p93620
S'control_tags'
p93621
sS'required'
p93622
I00
sS'group_name'
p93623
Nsa(dp93624
S'description'
p93625
S'Time at which this output object stop operating\n'
p93626
sS'cpp_type'
p93627
S'double'
p93628
sS'default'
p93629
g3
sS'name'
p93630
S'end_time'
p93631
sS'required'
p93632
I00
sS'group_name'
p93633
S'Timing'
p93634
sa(dp93635
S'description'
p93636
S'Enable/disable the output of elemental variables\n'
p93637
sS'cpp_type'
p93638
S'bool'
p93639
sS'default'
p93640
S'1'
p93641
sS'name'
p93642
S'execute_elemental_variables'
p93643
sS'required'
p93644
I00
sS'group_name'
p93645
Nsa(dp93646
S'description'
p93647
S'Enable/disable the output of input file information\n'
p93648
sS'cpp_type'
p93649
S'bool'
p93650
sS'default'
p93651
S'1'
p93652
sS'name'
p93653
S'execute_input'
p93654
sS'required'
p93655
I00
sS'group_name'
p93656
Nsa(dp93657
S'description'
p93658
S'Enable/disable the output of nodal variables\n'
p93659
sS'cpp_type'
p93660
S'bool'
p93661
sS'default'
p93662
S'1'
p93663
sS'name'
p93664
S'execute_nodal_variables'
p93665
sS'required'
p93666
I00
sS'group_name'
p93667
Nsa(dp93668
S'name'
p93669
S'execute_on'
p93670
sS'cpp_type'
p93671
S'MultiMooseEnum'
p93672
sS'default'
p93673
S'INITIAL TIMESTEP_END'
p93674
sS'description'
p93675
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93676
sS'required'
p93677
I00
sS'options'
p93678
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93679
sS'group_name'
p93680
Nsa(dp93681
S'name'
p93682
S'execute_postprocessors_on'
p93683
sS'cpp_type'
p93684
S'MultiMooseEnum'
p93685
sS'default'
p93686
g3
sS'description'
p93687
S'Control of when postprocessors are output\n'
p93688
sS'required'
p93689
I00
sS'options'
p93690
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93691
sS'group_name'
p93692
S'Variables'
p93693
sa(dp93694
S'description'
p93695
S'Enable/disable the output of aux scalar variables\n'
p93696
sS'cpp_type'
p93697
S'bool'
p93698
sS'default'
p93699
S'1'
p93700
sS'name'
p93701
S'execute_scalar_variables'
p93702
sS'required'
p93703
I00
sS'group_name'
p93704
Nsa(dp93705
S'description'
p93706
S'Enable/disable the output of the simulation information\n'
p93707
sS'cpp_type'
p93708
S'bool'
p93709
sS'default'
p93710
S'1'
p93711
sS'name'
p93712
S'execute_system_information'
p93713
sS'required'
p93714
I00
sS'group_name'
p93715
Nsa(dp93716
S'description'
p93717
S'Enable/disable the output of vector postprocessors\n'
p93718
sS'cpp_type'
p93719
S'bool'
p93720
sS'default'
p93721
S'1'
p93722
sS'name'
p93723
S'execute_vector_postprocessors'
p93724
sS'required'
p93725
I00
sS'group_name'
p93726
Nsa(dp93727
S'description'
p93728
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93729
sS'cpp_type'
p93730
S'std::vector<VariableName, std::allocator<VariableName> >'
p93731
sS'default'
p93732
g3
sS'name'
p93733
S'hide'
p93734
sS'required'
p93735
I00
sS'group_name'
p93736
S'Variables'
p93737
sa(dp93738
S'description'
p93739
S'The interval at which time steps are output to the solution file\n'
p93740
sS'cpp_type'
p93741
S'unsigned int'
p93742
sS'default'
p93743
S'1'
p93744
sS'name'
p93745
S'interval'
p93746
sS'required'
p93747
I00
sS'group_name'
p93748
S'Timing'
p93749
sa(dp93750
S'description'
p93751
S'The currently running MOOSE Item Id.\n'
p93752
sS'cpp_type'
p93753
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93754
sS'default'
p93755
g3
sS'name'
p93756
S'item_id'
p93757
sS'required'
p93758
I01
sS'group_name'
p93759
Nsa(dp93760
S'description'
p93761
S'If true, set \'CURLOPT_NOPROXY, "*"\' when calling libcurl APIs.\n'
p93762
sS'cpp_type'
p93763
S'bool'
p93764
sS'default'
p93765
S'1'
p93766
sS'name'
p93767
S'noproxy'
p93768
sS'required'
p93769
I00
sS'group_name'
p93770
Nsa(dp93771
S'description'
p93772
S'Enable/disable the output of postprocessors\n'
p93773
sS'cpp_type'
p93774
S'bool'
p93775
sS'default'
p93776
S'1'
p93777
sS'name'
p93778
S'output_postprocessors'
p93779
sS'required'
p93780
I00
sS'group_name'
p93781
Nsa(dp93782
S'description'
p93783
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p93784
sS'cpp_type'
p93785
S'std::vector<VariableName, std::allocator<VariableName> >'
p93786
sS'default'
p93787
g3
sS'name'
p93788
S'show'
p93789
sS'required'
p93790
I00
sS'group_name'
p93791
S'Variables'
p93792
sa(dp93793
S'description'
p93794
S'Time at which this output object begins to operate\n'
p93795
sS'cpp_type'
p93796
S'double'
p93797
sS'default'
p93798
g3
sS'name'
p93799
S'start_time'
p93800
sS'required'
p93801
I00
sS'group_name'
p93802
S'Timing'
p93803
sa(dp93804
S'description'
p93805
S'Only export results at sync times\n'
p93806
sS'cpp_type'
p93807
S'bool'
p93808
sS'default'
p93809
S'0'
p93810
sS'name'
p93811
S'sync_only'
p93812
sS'required'
p93813
I00
sS'group_name'
p93814
S'Timing'
p93815
sa(dp93816
S'description'
p93817
S'Times at which the output and solution is forced to occur\n'
p93818
sS'cpp_type'
p93819
S'std::vector<double, std::allocator<double> >'
p93820
sS'default'
p93821
g3
sS'name'
p93822
S'sync_times'
p93823
sS'required'
p93824
I00
sS'group_name'
p93825
S'Timing'
p93826
sa(dp93827
S'description'
p93828
S'Time tolerance utilized checking start and end times\n'
p93829
sS'cpp_type'
p93830
S'double'
p93831
sS'default'
p93832
S'1e-14'
p93833
sS'name'
p93834
S'time_tolerance'
p93835
sS'required'
p93836
I00
sS'group_name'
p93837
S'Timing'
p93838
sa(dp93839
S'description'
p93840
g3
sS'cpp_type'
p93841
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93842
sS'default'
p93843
S'ICEUpdater'
p93844
sS'name'
p93845
S'type'
p93846
sS'required'
p93847
I00
sS'group_name'
p93848
Nsa(dp93849
S'description'
p93850
S'The URL of the currently running ICE Core instance.\n'
p93851
sS'cpp_type'
p93852
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93853
sS'default'
p93854
g3
sS'name'
p93855
S'url'
p93856
sS'required'
p93857
I01
sS'group_name'
p93858
Nsa(dp93859
S'description'
p93860
S'Enable/disable the use of the displaced mesh for outputting\n'
p93861
sS'cpp_type'
p93862
S'bool'
p93863
sS'default'
p93864
S'0'
p93865
sS'name'
p93866
S'use_displaced'
p93867
sS'required'
p93868
I00
sS'group_name'
p93869
NsasS'name'
p93870
S'/Outputs/ICEUpdater'
p93871
sa(dp93872
S'description'
p93873
g3
sS'subblocks'
p93874
NsS'parameters'
p93875
(lp93876
(dp93877
S'name'
p93878
S'additional_execute_on'
p93879
sS'cpp_type'
p93880
S'MultiMooseEnum'
p93881
sS'default'
p93882
g3
sS'description'
p93883
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p93884
sS'required'
p93885
I00
sS'options'
p93886
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p93887
sS'group_name'
p93888
Nsa(dp93889
S'description'
p93890
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p93891
sS'cpp_type'
p93892
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p93893
sS'default'
p93894
g3
sS'name'
p93895
S'control_tags'
p93896
sS'required'
p93897
I00
sS'group_name'
p93898
Nsa(dp93899
S'description'
p93900
S'Time at which this output object stop operating\n'
p93901
sS'cpp_type'
p93902
S'double'
p93903
sS'default'
p93904
g3
sS'name'
p93905
S'end_time'
p93906
sS'required'
p93907
I00
sS'group_name'
p93908
S'Timing'
p93909
sa(dp93910
S'description'
p93911
S'The interval at which time steps are output to the solution file\n'
p93912
sS'cpp_type'
p93913
S'unsigned int'
p93914
sS'default'
p93915
S'1'
p93916
sS'name'
p93917
S'interval'
p93918
sS'required'
p93919
I00
sS'group_name'
p93920
S'Timing'
p93921
sa(dp93922
S'description'
p93923
S'Time at which this output object begins to operate\n'
p93924
sS'cpp_type'
p93925
S'double'
p93926
sS'default'
p93927
g3
sS'name'
p93928
S'start_time'
p93929
sS'required'
p93930
I00
sS'group_name'
p93931
S'Timing'
p93932
sa(dp93933
S'description'
p93934
S'Only export results at sync times\n'
p93935
sS'cpp_type'
p93936
S'bool'
p93937
sS'default'
p93938
S'0'
p93939
sS'name'
p93940
S'sync_only'
p93941
sS'required'
p93942
I00
sS'group_name'
p93943
S'Timing'
p93944
sa(dp93945
S'description'
p93946
S'Times at which the output and solution is forced to occur\n'
p93947
sS'cpp_type'
p93948
S'std::vector<double, std::allocator<double> >'
p93949
sS'default'
p93950
g3
sS'name'
p93951
S'sync_times'
p93952
sS'required'
p93953
I00
sS'group_name'
p93954
S'Timing'
p93955
sa(dp93956
S'description'
p93957
S'Time tolerance utilized checking start and end times\n'
p93958
sS'cpp_type'
p93959
S'double'
p93960
sS'default'
p93961
S'1e-14'
p93962
sS'name'
p93963
S'time_tolerance'
p93964
sS'required'
p93965
I00
sS'group_name'
p93966
S'Timing'
p93967
sa(dp93968
S'description'
p93969
g3
sS'cpp_type'
p93970
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p93971
sS'default'
p93972
S'MaterialPropertyDebugOutput'
p93973
sS'name'
p93974
S'type'
p93975
sS'required'
p93976
I00
sS'group_name'
p93977
Nsa(dp93978
S'description'
p93979
S'Enable/disable the use of the displaced mesh for outputting\n'
p93980
sS'cpp_type'
p93981
S'bool'
p93982
sS'default'
p93983
S'0'
p93984
sS'name'
p93985
S'use_displaced'
p93986
sS'required'
p93987
I00
sS'group_name'
p93988
NsasS'name'
p93989
S'/Outputs/MaterialPropertyDebugOutput'
p93990
sa(dp93991
S'description'
p93992
S'Object for output data in the Nemesis format\n'
p93993
sS'subblocks'
p93994
NsS'parameters'
p93995
(lp93996
(dp93997
S'name'
p93998
S'additional_execute_on'
p93999
sS'cpp_type'
p94000
S'MultiMooseEnum'
p94001
sS'default'
p94002
g3
sS'description'
p94003
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94004
sS'required'
p94005
I00
sS'options'
p94006
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94007
sS'group_name'
p94008
Nsa(dp94009
S'description'
p94010
S'When true the date and time are appended to the output filename.\n'
p94011
sS'cpp_type'
p94012
S'bool'
p94013
sS'default'
p94014
S'0'
p94015
sS'name'
p94016
S'append_date'
p94017
sS'required'
p94018
I00
sS'group_name'
p94019
Nsa(dp94020
S'description'
p94021
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p94022
sS'cpp_type'
p94023
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94024
sS'default'
p94025
g3
sS'name'
p94026
S'append_date_format'
p94027
sS'required'
p94028
I00
sS'group_name'
p94029
Nsa(dp94030
S'description'
p94031
S"Append '_oversample' to the output file base\n"
p94032
sS'cpp_type'
p94033
S'bool'
p94034
sS'default'
p94035
S'0'
p94036
sS'name'
p94037
S'append_oversample'
p94038
sS'required'
p94039
I00
sS'group_name'
p94040
Nsa(dp94041
S'description'
p94042
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94043
sS'cpp_type'
p94044
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94045
sS'default'
p94046
g3
sS'name'
p94047
S'control_tags'
p94048
sS'required'
p94049
I00
sS'group_name'
p94050
Nsa(dp94051
S'description'
p94052
S'Time at which this output object stop operating\n'
p94053
sS'cpp_type'
p94054
S'double'
p94055
sS'default'
p94056
g3
sS'name'
p94057
S'end_time'
p94058
sS'required'
p94059
I00
sS'group_name'
p94060
S'Timing'
p94061
sa(dp94062
S'description'
p94063
S'Enable/disable the output of elemental variables\n'
p94064
sS'cpp_type'
p94065
S'bool'
p94066
sS'default'
p94067
S'1'
p94068
sS'name'
p94069
S'execute_elemental_variables'
p94070
sS'required'
p94071
I00
sS'group_name'
p94072
Nsa(dp94073
S'description'
p94074
S'Enable/disable the output of input file information\n'
p94075
sS'cpp_type'
p94076
S'bool'
p94077
sS'default'
p94078
S'1'
p94079
sS'name'
p94080
S'execute_input'
p94081
sS'required'
p94082
I00
sS'group_name'
p94083
Nsa(dp94084
S'name'
p94085
S'execute_input_on'
p94086
sS'cpp_type'
p94087
S'MultiMooseEnum'
p94088
sS'default'
p94089
g3
sS'description'
p94090
S'Enable/disable the output of the input file\n'
p94091
sS'required'
p94092
I00
sS'options'
p94093
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94094
sS'group_name'
p94095
S'Variables'
p94096
sa(dp94097
S'description'
p94098
S'Enable/disable the output of nodal variables\n'
p94099
sS'cpp_type'
p94100
S'bool'
p94101
sS'default'
p94102
S'1'
p94103
sS'name'
p94104
S'execute_nodal_variables'
p94105
sS'required'
p94106
I00
sS'group_name'
p94107
Nsa(dp94108
S'name'
p94109
S'execute_on'
p94110
sS'cpp_type'
p94111
S'MultiMooseEnum'
p94112
sS'default'
p94113
S'INITIAL TIMESTEP_END'
p94114
sS'description'
p94115
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94116
sS'required'
p94117
I00
sS'options'
p94118
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94119
sS'group_name'
p94120
Nsa(dp94121
S'name'
p94122
S'execute_postprocessors_on'
p94123
sS'cpp_type'
p94124
S'MultiMooseEnum'
p94125
sS'default'
p94126
g3
sS'description'
p94127
S'Control of when postprocessors are output\n'
p94128
sS'required'
p94129
I00
sS'options'
p94130
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94131
sS'group_name'
p94132
S'Variables'
p94133
sa(dp94134
S'description'
p94135
S'Enable/disable the output of aux scalar variables\n'
p94136
sS'cpp_type'
p94137
S'bool'
p94138
sS'default'
p94139
S'1'
p94140
sS'name'
p94141
S'execute_scalar_variables'
p94142
sS'required'
p94143
I00
sS'group_name'
p94144
Nsa(dp94145
S'name'
p94146
S'execute_scalars_on'
p94147
sS'cpp_type'
p94148
S'MultiMooseEnum'
p94149
sS'default'
p94150
g3
sS'description'
p94151
S'Control the output of scalar variables\n'
p94152
sS'required'
p94153
I00
sS'options'
p94154
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94155
sS'group_name'
p94156
S'Variables'
p94157
sa(dp94158
S'description'
p94159
S'Enable/disable the output of the simulation information\n'
p94160
sS'cpp_type'
p94161
S'bool'
p94162
sS'default'
p94163
S'1'
p94164
sS'name'
p94165
S'execute_system_information'
p94166
sS'required'
p94167
I00
sS'group_name'
p94168
Nsa(dp94169
S'description'
p94170
S'Enable/disable the output of vector postprocessors\n'
p94171
sS'cpp_type'
p94172
S'bool'
p94173
sS'default'
p94174
S'1'
p94175
sS'name'
p94176
S'execute_vector_postprocessors'
p94177
sS'required'
p94178
I00
sS'group_name'
p94179
Nsa(dp94180
S'description'
p94181
S'The name of the mesh file to read, for oversampling\n'
p94182
sS'cpp_type'
p94183
S'MeshFileName'
p94184
sS'default'
p94185
g3
sS'name'
p94186
S'file'
p94187
sS'required'
p94188
I00
sS'group_name'
p94189
S'Oversampling'
p94190
sa(dp94191
S'description'
p94192
S'The desired solution output name without an extension\n'
p94193
sS'cpp_type'
p94194
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94195
sS'default'
p94196
g3
sS'name'
p94197
S'file_base'
p94198
sS'required'
p94199
I00
sS'group_name'
p94200
Nsa(dp94201
S'description'
p94202
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p94203
sS'cpp_type'
p94204
S'std::vector<VariableName, std::allocator<VariableName> >'
p94205
sS'default'
p94206
g3
sS'name'
p94207
S'hide'
p94208
sS'required'
p94209
I00
sS'group_name'
p94210
S'Variables'
p94211
sa(dp94212
S'description'
p94213
S'The interval at which time steps are output to the solution file\n'
p94214
sS'cpp_type'
p94215
S'unsigned int'
p94216
sS'default'
p94217
S'1'
p94218
sS'name'
p94219
S'interval'
p94220
sS'required'
p94221
I00
sS'group_name'
p94222
S'Timing'
p94223
sa(dp94224
S'description'
p94225
S'Number of divisions applied to time step when outputting linear residuals\n'
p94226
sS'cpp_type'
p94227
S'double'
p94228
sS'default'
p94229
S'1000'
p94230
sS'name'
p94231
S'linear_residual_dt_divisor'
p94232
sS'required'
p94233
I00
sS'group_name'
p94234
S'PETSc'
p94235
sa(dp94236
S'description'
p94237
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94238
sS'cpp_type'
p94239
S'double'
p94240
sS'default'
p94241
g3
sS'name'
p94242
S'linear_residual_end_time'
p94243
sS'required'
p94244
I00
sS'group_name'
p94245
S'PETSc'
p94246
sa(dp94247
S'description'
p94248
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94249
sS'cpp_type'
p94250
S'double'
p94251
sS'default'
p94252
g3
sS'name'
p94253
S'linear_residual_start_time'
p94254
sS'required'
p94255
I00
sS'group_name'
p94256
S'PETSc'
p94257
sa(dp94258
S'description'
p94259
S'Specifies whether output occurs on each linear residual evaluation\n'
p94260
sS'cpp_type'
p94261
S'bool'
p94262
sS'default'
p94263
S'0'
p94264
sS'name'
p94265
S'linear_residuals'
p94266
sS'required'
p94267
I00
sS'group_name'
p94268
S'PETSc'
p94269
sa(dp94270
S'description'
p94271
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94272
sS'cpp_type'
p94273
S'double'
p94274
sS'default'
p94275
S'1000'
p94276
sS'name'
p94277
S'nonlinear_residual_dt_divisor'
p94278
sS'required'
p94279
I00
sS'group_name'
p94280
S'PETSc'
p94281
sa(dp94282
S'description'
p94283
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94284
sS'cpp_type'
p94285
S'double'
p94286
sS'default'
p94287
g3
sS'name'
p94288
S'nonlinear_residual_end_time'
p94289
sS'required'
p94290
I00
sS'group_name'
p94291
S'PETSc'
p94292
sa(dp94293
S'description'
p94294
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94295
sS'cpp_type'
p94296
S'double'
p94297
sS'default'
p94298
g3
sS'name'
p94299
S'nonlinear_residual_start_time'
p94300
sS'required'
p94301
I00
sS'group_name'
p94302
S'PETSc'
p94303
sa(dp94304
S'description'
p94305
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94306
sS'cpp_type'
p94307
S'bool'
p94308
sS'default'
p94309
S'0'
p94310
sS'name'
p94311
S'nonlinear_residuals'
p94312
sS'required'
p94313
I00
sS'group_name'
p94314
S'PETSc'
p94315
sa(dp94316
S'description'
p94317
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p94318
sS'cpp_type'
p94319
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94320
sS'default'
p94321
g3
sS'name'
p94322
S'output_if_base_contains'
p94323
sS'required'
p94324
I00
sS'group_name'
p94325
S'Advanced'
p94326
sa(dp94327
S'description'
p94328
S'Specifies whether output occurs on each linear residual evaluation\n'
p94329
sS'cpp_type'
p94330
S'bool'
p94331
sS'default'
p94332
S'0'
p94333
sS'name'
p94334
S'output_linear'
p94335
sS'required'
p94336
I00
sS'group_name'
p94337
Nsa(dp94338
S'description'
p94339
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94340
sS'cpp_type'
p94341
S'bool'
p94342
sS'default'
p94343
S'0'
p94344
sS'name'
p94345
S'output_nonlinear'
p94346
sS'required'
p94347
I00
sS'group_name'
p94348
Nsa(dp94349
S'description'
p94350
S'Enable/disable the output of postprocessors\n'
p94351
sS'cpp_type'
p94352
S'bool'
p94353
sS'default'
p94354
S'1'
p94355
sS'name'
p94356
S'output_postprocessors'
p94357
sS'required'
p94358
I00
sS'group_name'
p94359
Nsa(dp94360
S'description'
p94361
S'Set to true to enable oversampling\n'
p94362
sS'cpp_type'
p94363
S'bool'
p94364
sS'default'
p94365
S'0'
p94366
sS'name'
p94367
S'oversample'
p94368
sS'required'
p94369
I00
sS'group_name'
p94370
Nsa(dp94371
S'description'
p94372
S'The number of for extension suffix (e.g., out.e-s002)\n'
p94373
sS'cpp_type'
p94374
S'unsigned int'
p94375
sS'default'
p94376
S'4'
p94377
sS'name'
p94378
S'padding'
p94379
sS'required'
p94380
I00
sS'group_name'
p94381
S'Advanced'
p94382
sa(dp94383
S'description'
p94384
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p94385
sS'cpp_type'
p94386
S'libMesh::Point'
p94387
sS'default'
p94388
g3
sS'name'
p94389
S'position'
p94390
sS'required'
p94391
I00
sS'group_name'
p94392
S'Oversampling'
p94393
sa(dp94394
S'description'
p94395
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p94396
sS'cpp_type'
p94397
S'unsigned int'
p94398
sS'default'
p94399
S'0'
p94400
sS'name'
p94401
S'refinements'
p94402
sS'required'
p94403
I00
sS'group_name'
p94404
S'Oversampling'
p94405
sa(dp94406
S'description'
p94407
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p94408
sS'cpp_type'
p94409
S'std::vector<VariableName, std::allocator<VariableName> >'
p94410
sS'default'
p94411
g3
sS'name'
p94412
S'show'
p94413
sS'required'
p94414
I00
sS'group_name'
p94415
S'Variables'
p94416
sa(dp94417
S'description'
p94418
S'Time at which this output object begins to operate\n'
p94419
sS'cpp_type'
p94420
S'double'
p94421
sS'default'
p94422
g3
sS'name'
p94423
S'start_time'
p94424
sS'required'
p94425
I00
sS'group_name'
p94426
S'Timing'
p94427
sa(dp94428
S'description'
p94429
S'Only export results at sync times\n'
p94430
sS'cpp_type'
p94431
S'bool'
p94432
sS'default'
p94433
S'0'
p94434
sS'name'
p94435
S'sync_only'
p94436
sS'required'
p94437
I00
sS'group_name'
p94438
S'Timing'
p94439
sa(dp94440
S'description'
p94441
S'Times at which the output and solution is forced to occur\n'
p94442
sS'cpp_type'
p94443
S'std::vector<double, std::allocator<double> >'
p94444
sS'default'
p94445
g3
sS'name'
p94446
S'sync_times'
p94447
sS'required'
p94448
I00
sS'group_name'
p94449
S'Timing'
p94450
sa(dp94451
S'description'
p94452
S'Time tolerance utilized checking start and end times\n'
p94453
sS'cpp_type'
p94454
S'double'
p94455
sS'default'
p94456
S'1e-14'
p94457
sS'name'
p94458
S'time_tolerance'
p94459
sS'required'
p94460
I00
sS'group_name'
p94461
S'Timing'
p94462
sa(dp94463
S'description'
p94464
g3
sS'cpp_type'
p94465
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94466
sS'default'
p94467
S'Nemesis'
p94468
sS'name'
p94469
S'type'
p94470
sS'required'
p94471
I00
sS'group_name'
p94472
Nsa(dp94473
S'description'
p94474
S'Enable/disable the use of the displaced mesh for outputting\n'
p94475
sS'cpp_type'
p94476
S'bool'
p94477
sS'default'
p94478
S'0'
p94479
sS'name'
p94480
S'use_displaced'
p94481
sS'required'
p94482
I00
sS'group_name'
p94483
NsasS'name'
p94484
S'/Outputs/Nemesis'
p94485
sa(dp94486
S'description'
p94487
g3
sS'subblocks'
p94488
NsS'parameters'
p94489
(lp94490
(dp94491
S'name'
p94492
S'additional_execute_on'
p94493
sS'cpp_type'
p94494
S'MultiMooseEnum'
p94495
sS'default'
p94496
g3
sS'description'
p94497
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94498
sS'required'
p94499
I00
sS'options'
p94500
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94501
sS'group_name'
p94502
Nsa(dp94503
S'description'
p94504
S'When true the date and time are appended to the output filename.\n'
p94505
sS'cpp_type'
p94506
S'bool'
p94507
sS'default'
p94508
S'0'
p94509
sS'name'
p94510
S'append_date'
p94511
sS'required'
p94512
I00
sS'group_name'
p94513
Nsa(dp94514
S'description'
p94515
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p94516
sS'cpp_type'
p94517
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94518
sS'default'
p94519
g3
sS'name'
p94520
S'append_date_format'
p94521
sS'required'
p94522
I00
sS'group_name'
p94523
Nsa(dp94524
S'description'
p94525
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94526
sS'cpp_type'
p94527
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94528
sS'default'
p94529
g3
sS'name'
p94530
S'control_tags'
p94531
sS'required'
p94532
I00
sS'group_name'
p94533
Nsa(dp94534
S'description'
p94535
S'Time at which this output object stop operating\n'
p94536
sS'cpp_type'
p94537
S'double'
p94538
sS'default'
p94539
g3
sS'name'
p94540
S'end_time'
p94541
sS'required'
p94542
I00
sS'group_name'
p94543
S'Timing'
p94544
sa(dp94545
S'name'
p94546
S'execute_on'
p94547
sS'cpp_type'
p94548
S'MultiMooseEnum'
p94549
sS'default'
p94550
S'INITIAL TIMESTEP_END'
p94551
sS'description'
p94552
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94553
sS'required'
p94554
I00
sS'options'
p94555
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94556
sS'group_name'
p94557
Nsa(dp94558
S'description'
p94559
S'The desired solution output name without an extension\n'
p94560
sS'cpp_type'
p94561
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94562
sS'default'
p94563
g3
sS'name'
p94564
S'file_base'
p94565
sS'required'
p94566
I00
sS'group_name'
p94567
Nsa(dp94568
S'description'
p94569
S'The interval at which time steps are output to the solution file\n'
p94570
sS'cpp_type'
p94571
S'unsigned int'
p94572
sS'default'
p94573
S'1'
p94574
sS'name'
p94575
S'interval'
p94576
sS'required'
p94577
I00
sS'group_name'
p94578
S'Timing'
p94579
sa(dp94580
S'description'
p94581
S'Number of divisions applied to time step when outputting linear residuals\n'
p94582
sS'cpp_type'
p94583
S'double'
p94584
sS'default'
p94585
S'1000'
p94586
sS'name'
p94587
S'linear_residual_dt_divisor'
p94588
sS'required'
p94589
I00
sS'group_name'
p94590
S'PETSc'
p94591
sa(dp94592
S'description'
p94593
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94594
sS'cpp_type'
p94595
S'double'
p94596
sS'default'
p94597
g3
sS'name'
p94598
S'linear_residual_end_time'
p94599
sS'required'
p94600
I00
sS'group_name'
p94601
S'PETSc'
p94602
sa(dp94603
S'description'
p94604
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94605
sS'cpp_type'
p94606
S'double'
p94607
sS'default'
p94608
g3
sS'name'
p94609
S'linear_residual_start_time'
p94610
sS'required'
p94611
I00
sS'group_name'
p94612
S'PETSc'
p94613
sa(dp94614
S'description'
p94615
S'Specifies whether output occurs on each linear residual evaluation\n'
p94616
sS'cpp_type'
p94617
S'bool'
p94618
sS'default'
p94619
S'0'
p94620
sS'name'
p94621
S'linear_residuals'
p94622
sS'required'
p94623
I00
sS'group_name'
p94624
S'PETSc'
p94625
sa(dp94626
S'description'
p94627
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94628
sS'cpp_type'
p94629
S'double'
p94630
sS'default'
p94631
S'1000'
p94632
sS'name'
p94633
S'nonlinear_residual_dt_divisor'
p94634
sS'required'
p94635
I00
sS'group_name'
p94636
S'PETSc'
p94637
sa(dp94638
S'description'
p94639
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94640
sS'cpp_type'
p94641
S'double'
p94642
sS'default'
p94643
g3
sS'name'
p94644
S'nonlinear_residual_end_time'
p94645
sS'required'
p94646
I00
sS'group_name'
p94647
S'PETSc'
p94648
sa(dp94649
S'description'
p94650
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94651
sS'cpp_type'
p94652
S'double'
p94653
sS'default'
p94654
g3
sS'name'
p94655
S'nonlinear_residual_start_time'
p94656
sS'required'
p94657
I00
sS'group_name'
p94658
S'PETSc'
p94659
sa(dp94660
S'description'
p94661
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94662
sS'cpp_type'
p94663
S'bool'
p94664
sS'default'
p94665
S'0'
p94666
sS'name'
p94667
S'nonlinear_residuals'
p94668
sS'required'
p94669
I00
sS'group_name'
p94670
S'PETSc'
p94671
sa(dp94672
S'description'
p94673
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p94674
sS'cpp_type'
p94675
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94676
sS'default'
p94677
g3
sS'name'
p94678
S'output_if_base_contains'
p94679
sS'required'
p94680
I00
sS'group_name'
p94681
S'Advanced'
p94682
sa(dp94683
S'description'
p94684
S'Specifies whether output occurs on each linear residual evaluation\n'
p94685
sS'cpp_type'
p94686
S'bool'
p94687
sS'default'
p94688
S'0'
p94689
sS'name'
p94690
S'output_linear'
p94691
sS'required'
p94692
I00
sS'group_name'
p94693
Nsa(dp94694
S'description'
p94695
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p94696
sS'cpp_type'
p94697
S'bool'
p94698
sS'default'
p94699
S'0'
p94700
sS'name'
p94701
S'output_nonlinear'
p94702
sS'required'
p94703
I00
sS'group_name'
p94704
Nsa(dp94705
S'description'
p94706
S'The number of for extension suffix (e.g., out.e-s002)\n'
p94707
sS'cpp_type'
p94708
S'unsigned int'
p94709
sS'default'
p94710
S'4'
p94711
sS'name'
p94712
S'padding'
p94713
sS'required'
p94714
I00
sS'group_name'
p94715
S'Advanced'
p94716
sa(dp94717
S'description'
p94718
S'Time at which this output object begins to operate\n'
p94719
sS'cpp_type'
p94720
S'double'
p94721
sS'default'
p94722
g3
sS'name'
p94723
S'start_time'
p94724
sS'required'
p94725
I00
sS'group_name'
p94726
S'Timing'
p94727
sa(dp94728
S'description'
p94729
S'Only export results at sync times\n'
p94730
sS'cpp_type'
p94731
S'bool'
p94732
sS'default'
p94733
S'0'
p94734
sS'name'
p94735
S'sync_only'
p94736
sS'required'
p94737
I00
sS'group_name'
p94738
S'Timing'
p94739
sa(dp94740
S'description'
p94741
S'Times at which the output and solution is forced to occur\n'
p94742
sS'cpp_type'
p94743
S'std::vector<double, std::allocator<double> >'
p94744
sS'default'
p94745
g3
sS'name'
p94746
S'sync_times'
p94747
sS'required'
p94748
I00
sS'group_name'
p94749
S'Timing'
p94750
sa(dp94751
S'description'
p94752
S'Time tolerance utilized checking start and end times\n'
p94753
sS'cpp_type'
p94754
S'double'
p94755
sS'default'
p94756
S'1e-14'
p94757
sS'name'
p94758
S'time_tolerance'
p94759
sS'required'
p94760
I00
sS'group_name'
p94761
S'Timing'
p94762
sa(dp94763
S'description'
p94764
g3
sS'cpp_type'
p94765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94766
sS'default'
p94767
S'SolutionHistory'
p94768
sS'name'
p94769
S'type'
p94770
sS'required'
p94771
I00
sS'group_name'
p94772
Nsa(dp94773
S'description'
p94774
S'Enable/disable the use of the displaced mesh for outputting\n'
p94775
sS'cpp_type'
p94776
S'bool'
p94777
sS'default'
p94778
S'0'
p94779
sS'name'
p94780
S'use_displaced'
p94781
sS'required'
p94782
I00
sS'group_name'
p94783
NsasS'name'
p94784
S'/Outputs/SolutionHistory'
p94785
sa(dp94786
S'description'
p94787
S'Object for outputting data in the Tecplot format\n'
p94788
sS'subblocks'
p94789
NsS'parameters'
p94790
(lp94791
(dp94792
S'name'
p94793
S'additional_execute_on'
p94794
sS'cpp_type'
p94795
S'MultiMooseEnum'
p94796
sS'default'
p94797
g3
sS'description'
p94798
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94799
sS'required'
p94800
I00
sS'options'
p94801
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94802
sS'group_name'
p94803
Nsa(dp94804
S'description'
p94805
S'When true the date and time are appended to the output filename.\n'
p94806
sS'cpp_type'
p94807
S'bool'
p94808
sS'default'
p94809
S'0'
p94810
sS'name'
p94811
S'append_date'
p94812
sS'required'
p94813
I00
sS'group_name'
p94814
Nsa(dp94815
S'description'
p94816
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p94817
sS'cpp_type'
p94818
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94819
sS'default'
p94820
g3
sS'name'
p94821
S'append_date_format'
p94822
sS'required'
p94823
I00
sS'group_name'
p94824
Nsa(dp94825
S'description'
p94826
S"Append '_oversample' to the output file base\n"
p94827
sS'cpp_type'
p94828
S'bool'
p94829
sS'default'
p94830
S'0'
p94831
sS'name'
p94832
S'append_oversample'
p94833
sS'required'
p94834
I00
sS'group_name'
p94835
Nsa(dp94836
S'description'
p94837
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p94838
sS'cpp_type'
p94839
S'bool'
p94840
sS'default'
p94841
S'0'
p94842
sS'name'
p94843
S'ascii_append'
p94844
sS'required'
p94845
I00
sS'group_name'
p94846
Nsa(dp94847
S'description'
p94848
S'Set Tecplot files to output in binary format\n'
p94849
sS'cpp_type'
p94850
S'bool'
p94851
sS'default'
p94852
S'0'
p94853
sS'name'
p94854
S'binary'
p94855
sS'required'
p94856
I00
sS'group_name'
p94857
S'Advanced'
p94858
sa(dp94859
S'description'
p94860
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p94861
sS'cpp_type'
p94862
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p94863
sS'default'
p94864
g3
sS'name'
p94865
S'control_tags'
p94866
sS'required'
p94867
I00
sS'group_name'
p94868
Nsa(dp94869
S'description'
p94870
S'Time at which this output object stop operating\n'
p94871
sS'cpp_type'
p94872
S'double'
p94873
sS'default'
p94874
g3
sS'name'
p94875
S'end_time'
p94876
sS'required'
p94877
I00
sS'group_name'
p94878
S'Timing'
p94879
sa(dp94880
S'name'
p94881
S'execute_on'
p94882
sS'cpp_type'
p94883
S'MultiMooseEnum'
p94884
sS'default'
p94885
S'INITIAL TIMESTEP_END'
p94886
sS'description'
p94887
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p94888
sS'required'
p94889
I00
sS'options'
p94890
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p94891
sS'group_name'
p94892
Nsa(dp94893
S'description'
p94894
S'The name of the mesh file to read, for oversampling\n'
p94895
sS'cpp_type'
p94896
S'MeshFileName'
p94897
sS'default'
p94898
g3
sS'name'
p94899
S'file'
p94900
sS'required'
p94901
I00
sS'group_name'
p94902
S'Oversampling'
p94903
sa(dp94904
S'description'
p94905
S'The desired solution output name without an extension\n'
p94906
sS'cpp_type'
p94907
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p94908
sS'default'
p94909
g3
sS'name'
p94910
S'file_base'
p94911
sS'required'
p94912
I00
sS'group_name'
p94913
Nsa(dp94914
S'description'
p94915
S'The interval at which time steps are output to the solution file\n'
p94916
sS'cpp_type'
p94917
S'unsigned int'
p94918
sS'default'
p94919
S'1'
p94920
sS'name'
p94921
S'interval'
p94922
sS'required'
p94923
I00
sS'group_name'
p94924
S'Timing'
p94925
sa(dp94926
S'description'
p94927
S'Number of divisions applied to time step when outputting linear residuals\n'
p94928
sS'cpp_type'
p94929
S'double'
p94930
sS'default'
p94931
S'1000'
p94932
sS'name'
p94933
S'linear_residual_dt_divisor'
p94934
sS'required'
p94935
I00
sS'group_name'
p94936
S'PETSc'
p94937
sa(dp94938
S'description'
p94939
S'Specifies an end time to begin output on each linear residual evaluation\n'
p94940
sS'cpp_type'
p94941
S'double'
p94942
sS'default'
p94943
g3
sS'name'
p94944
S'linear_residual_end_time'
p94945
sS'required'
p94946
I00
sS'group_name'
p94947
S'PETSc'
p94948
sa(dp94949
S'description'
p94950
S'Specifies a start time to begin output on each linear residual evaluation\n'
p94951
sS'cpp_type'
p94952
S'double'
p94953
sS'default'
p94954
g3
sS'name'
p94955
S'linear_residual_start_time'
p94956
sS'required'
p94957
I00
sS'group_name'
p94958
S'PETSc'
p94959
sa(dp94960
S'description'
p94961
S'Specifies whether output occurs on each linear residual evaluation\n'
p94962
sS'cpp_type'
p94963
S'bool'
p94964
sS'default'
p94965
S'0'
p94966
sS'name'
p94967
S'linear_residuals'
p94968
sS'required'
p94969
I00
sS'group_name'
p94970
S'PETSc'
p94971
sa(dp94972
S'description'
p94973
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p94974
sS'cpp_type'
p94975
S'double'
p94976
sS'default'
p94977
S'1000'
p94978
sS'name'
p94979
S'nonlinear_residual_dt_divisor'
p94980
sS'required'
p94981
I00
sS'group_name'
p94982
S'PETSc'
p94983
sa(dp94984
S'description'
p94985
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p94986
sS'cpp_type'
p94987
S'double'
p94988
sS'default'
p94989
g3
sS'name'
p94990
S'nonlinear_residual_end_time'
p94991
sS'required'
p94992
I00
sS'group_name'
p94993
S'PETSc'
p94994
sa(dp94995
S'description'
p94996
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p94997
sS'cpp_type'
p94998
S'double'
p94999
sS'default'
p95000
g3
sS'name'
p95001
S'nonlinear_residual_start_time'
p95002
sS'required'
p95003
I00
sS'group_name'
p95004
S'PETSc'
p95005
sa(dp95006
S'description'
p95007
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95008
sS'cpp_type'
p95009
S'bool'
p95010
sS'default'
p95011
S'0'
p95012
sS'name'
p95013
S'nonlinear_residuals'
p95014
sS'required'
p95015
I00
sS'group_name'
p95016
S'PETSc'
p95017
sa(dp95018
S'description'
p95019
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p95020
sS'cpp_type'
p95021
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95022
sS'default'
p95023
g3
sS'name'
p95024
S'output_if_base_contains'
p95025
sS'required'
p95026
I00
sS'group_name'
p95027
S'Advanced'
p95028
sa(dp95029
S'description'
p95030
S'Specifies whether output occurs on each linear residual evaluation\n'
p95031
sS'cpp_type'
p95032
S'bool'
p95033
sS'default'
p95034
S'0'
p95035
sS'name'
p95036
S'output_linear'
p95037
sS'required'
p95038
I00
sS'group_name'
p95039
Nsa(dp95040
S'description'
p95041
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95042
sS'cpp_type'
p95043
S'bool'
p95044
sS'default'
p95045
S'0'
p95046
sS'name'
p95047
S'output_nonlinear'
p95048
sS'required'
p95049
I00
sS'group_name'
p95050
Nsa(dp95051
S'description'
p95052
S'Set to true to enable oversampling\n'
p95053
sS'cpp_type'
p95054
S'bool'
p95055
sS'default'
p95056
S'0'
p95057
sS'name'
p95058
S'oversample'
p95059
sS'required'
p95060
I00
sS'group_name'
p95061
Nsa(dp95062
S'description'
p95063
S'The number of for extension suffix (e.g., out.e-s002)\n'
p95064
sS'cpp_type'
p95065
S'unsigned int'
p95066
sS'default'
p95067
S'4'
p95068
sS'name'
p95069
S'padding'
p95070
sS'required'
p95071
I00
sS'group_name'
p95072
S'Advanced'
p95073
sa(dp95074
S'description'
p95075
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p95076
sS'cpp_type'
p95077
S'libMesh::Point'
p95078
sS'default'
p95079
g3
sS'name'
p95080
S'position'
p95081
sS'required'
p95082
I00
sS'group_name'
p95083
S'Oversampling'
p95084
sa(dp95085
S'description'
p95086
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p95087
sS'cpp_type'
p95088
S'unsigned int'
p95089
sS'default'
p95090
S'0'
p95091
sS'name'
p95092
S'refinements'
p95093
sS'required'
p95094
I00
sS'group_name'
p95095
S'Oversampling'
p95096
sa(dp95097
S'description'
p95098
S'Time at which this output object begins to operate\n'
p95099
sS'cpp_type'
p95100
S'double'
p95101
sS'default'
p95102
g3
sS'name'
p95103
S'start_time'
p95104
sS'required'
p95105
I00
sS'group_name'
p95106
S'Timing'
p95107
sa(dp95108
S'description'
p95109
S'Only export results at sync times\n'
p95110
sS'cpp_type'
p95111
S'bool'
p95112
sS'default'
p95113
S'0'
p95114
sS'name'
p95115
S'sync_only'
p95116
sS'required'
p95117
I00
sS'group_name'
p95118
S'Timing'
p95119
sa(dp95120
S'description'
p95121
S'Times at which the output and solution is forced to occur\n'
p95122
sS'cpp_type'
p95123
S'std::vector<double, std::allocator<double> >'
p95124
sS'default'
p95125
g3
sS'name'
p95126
S'sync_times'
p95127
sS'required'
p95128
I00
sS'group_name'
p95129
S'Timing'
p95130
sa(dp95131
S'description'
p95132
S'Time tolerance utilized checking start and end times\n'
p95133
sS'cpp_type'
p95134
S'double'
p95135
sS'default'
p95136
S'1e-14'
p95137
sS'name'
p95138
S'time_tolerance'
p95139
sS'required'
p95140
I00
sS'group_name'
p95141
S'Timing'
p95142
sa(dp95143
S'description'
p95144
g3
sS'cpp_type'
p95145
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95146
sS'default'
p95147
S'Tecplot'
p95148
sS'name'
p95149
S'type'
p95150
sS'required'
p95151
I00
sS'group_name'
p95152
Nsa(dp95153
S'description'
p95154
S'Enable/disable the use of the displaced mesh for outputting\n'
p95155
sS'cpp_type'
p95156
S'bool'
p95157
sS'default'
p95158
S'0'
p95159
sS'name'
p95160
S'use_displaced'
p95161
sS'required'
p95162
I00
sS'group_name'
p95163
NsasS'name'
p95164
S'/Outputs/Tecplot'
p95165
sa(dp95166
S'description'
p95167
g3
sS'subblocks'
p95168
NsS'parameters'
p95169
(lp95170
(dp95171
S'name'
p95172
S'additional_execute_on'
p95173
sS'cpp_type'
p95174
S'MultiMooseEnum'
p95175
sS'default'
p95176
g3
sS'description'
p95177
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95178
sS'required'
p95179
I00
sS'options'
p95180
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95181
sS'group_name'
p95182
Nsa(dp95183
S'description'
p95184
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95185
sS'cpp_type'
p95186
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95187
sS'default'
p95188
g3
sS'name'
p95189
S'control_tags'
p95190
sS'required'
p95191
I00
sS'group_name'
p95192
Nsa(dp95193
S'description'
p95194
S'Time at which this output object stop operating\n'
p95195
sS'cpp_type'
p95196
S'double'
p95197
sS'default'
p95198
g3
sS'name'
p95199
S'end_time'
p95200
sS'required'
p95201
I00
sS'group_name'
p95202
S'Timing'
p95203
sa(dp95204
S'name'
p95205
S'execute_on'
p95206
sS'cpp_type'
p95207
S'MultiMooseEnum'
p95208
sS'default'
p95209
S'LINEAR NONLINEAR TIMESTEP_END'
p95210
sS'description'
p95211
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95212
sS'required'
p95213
I00
sS'options'
p95214
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95215
sS'group_name'
p95216
Nsa(dp95217
S'description'
p95218
S'The interval at which time steps are output to the solution file\n'
p95219
sS'cpp_type'
p95220
S'unsigned int'
p95221
sS'default'
p95222
S'1'
p95223
sS'name'
p95224
S'interval'
p95225
sS'required'
p95226
I00
sS'group_name'
p95227
S'Timing'
p95228
sa(dp95229
S'description'
p95230
S'Number of divisions applied to time step when outputting linear residuals\n'
p95231
sS'cpp_type'
p95232
S'double'
p95233
sS'default'
p95234
S'1000'
p95235
sS'name'
p95236
S'linear_residual_dt_divisor'
p95237
sS'required'
p95238
I00
sS'group_name'
p95239
S'PETSc'
p95240
sa(dp95241
S'description'
p95242
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95243
sS'cpp_type'
p95244
S'double'
p95245
sS'default'
p95246
g3
sS'name'
p95247
S'linear_residual_end_time'
p95248
sS'required'
p95249
I00
sS'group_name'
p95250
S'PETSc'
p95251
sa(dp95252
S'description'
p95253
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95254
sS'cpp_type'
p95255
S'double'
p95256
sS'default'
p95257
g3
sS'name'
p95258
S'linear_residual_start_time'
p95259
sS'required'
p95260
I00
sS'group_name'
p95261
S'PETSc'
p95262
sa(dp95263
S'description'
p95264
S'Specifies whether output occurs on each linear residual evaluation\n'
p95265
sS'cpp_type'
p95266
S'bool'
p95267
sS'default'
p95268
S'0'
p95269
sS'name'
p95270
S'linear_residuals'
p95271
sS'required'
p95272
I00
sS'group_name'
p95273
S'PETSc'
p95274
sa(dp95275
S'description'
p95276
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95277
sS'cpp_type'
p95278
S'double'
p95279
sS'default'
p95280
S'1000'
p95281
sS'name'
p95282
S'nonlinear_residual_dt_divisor'
p95283
sS'required'
p95284
I00
sS'group_name'
p95285
S'PETSc'
p95286
sa(dp95287
S'description'
p95288
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95289
sS'cpp_type'
p95290
S'double'
p95291
sS'default'
p95292
g3
sS'name'
p95293
S'nonlinear_residual_end_time'
p95294
sS'required'
p95295
I00
sS'group_name'
p95296
S'PETSc'
p95297
sa(dp95298
S'description'
p95299
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95300
sS'cpp_type'
p95301
S'double'
p95302
sS'default'
p95303
g3
sS'name'
p95304
S'nonlinear_residual_start_time'
p95305
sS'required'
p95306
I00
sS'group_name'
p95307
S'PETSc'
p95308
sa(dp95309
S'description'
p95310
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95311
sS'cpp_type'
p95312
S'bool'
p95313
sS'default'
p95314
S'0'
p95315
sS'name'
p95316
S'nonlinear_residuals'
p95317
sS'required'
p95318
I00
sS'group_name'
p95319
S'PETSc'
p95320
sa(dp95321
S'description'
p95322
S'The number of top residuals to print out (0 = no output)\n'
p95323
sS'cpp_type'
p95324
S'unsigned int'
p95325
sS'default'
p95326
S'0'
p95327
sS'name'
p95328
S'num_residuals'
p95329
sS'required'
p95330
I00
sS'group_name'
p95331
Nsa(dp95332
S'description'
p95333
S'Specifies whether output occurs on each linear residual evaluation\n'
p95334
sS'cpp_type'
p95335
S'bool'
p95336
sS'default'
p95337
S'0'
p95338
sS'name'
p95339
S'output_linear'
p95340
sS'required'
p95341
I00
sS'group_name'
p95342
Nsa(dp95343
S'description'
p95344
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95345
sS'cpp_type'
p95346
S'bool'
p95347
sS'default'
p95348
S'0'
p95349
sS'name'
p95350
S'output_nonlinear'
p95351
sS'required'
p95352
I00
sS'group_name'
p95353
Nsa(dp95354
S'description'
p95355
S'Time at which this output object begins to operate\n'
p95356
sS'cpp_type'
p95357
S'double'
p95358
sS'default'
p95359
g3
sS'name'
p95360
S'start_time'
p95361
sS'required'
p95362
I00
sS'group_name'
p95363
S'Timing'
p95364
sa(dp95365
S'description'
p95366
S'Only export results at sync times\n'
p95367
sS'cpp_type'
p95368
S'bool'
p95369
sS'default'
p95370
S'0'
p95371
sS'name'
p95372
S'sync_only'
p95373
sS'required'
p95374
I00
sS'group_name'
p95375
S'Timing'
p95376
sa(dp95377
S'description'
p95378
S'Times at which the output and solution is forced to occur\n'
p95379
sS'cpp_type'
p95380
S'std::vector<double, std::allocator<double> >'
p95381
sS'default'
p95382
g3
sS'name'
p95383
S'sync_times'
p95384
sS'required'
p95385
I00
sS'group_name'
p95386
S'Timing'
p95387
sa(dp95388
S'description'
p95389
S'Time tolerance utilized checking start and end times\n'
p95390
sS'cpp_type'
p95391
S'double'
p95392
sS'default'
p95393
S'1e-14'
p95394
sS'name'
p95395
S'time_tolerance'
p95396
sS'required'
p95397
I00
sS'group_name'
p95398
S'Timing'
p95399
sa(dp95400
S'description'
p95401
g3
sS'cpp_type'
p95402
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95403
sS'default'
p95404
S'TopResidualDebugOutput'
p95405
sS'name'
p95406
S'type'
p95407
sS'required'
p95408
I00
sS'group_name'
p95409
Nsa(dp95410
S'description'
p95411
S'Enable/disable the use of the displaced mesh for outputting\n'
p95412
sS'cpp_type'
p95413
S'bool'
p95414
sS'default'
p95415
S'0'
p95416
sS'name'
p95417
S'use_displaced'
p95418
sS'required'
p95419
I00
sS'group_name'
p95420
NsasS'name'
p95421
S'/Outputs/TopResidualDebugOutput'
p95422
sa(dp95423
S'description'
p95424
g3
sS'subblocks'
p95425
NsS'parameters'
p95426
(lp95427
(dp95428
S'name'
p95429
S'additional_execute_on'
p95430
sS'cpp_type'
p95431
S'MultiMooseEnum'
p95432
sS'default'
p95433
g3
sS'description'
p95434
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95435
sS'required'
p95436
I00
sS'options'
p95437
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95438
sS'group_name'
p95439
Nsa(dp95440
S'description'
p95441
S'When true the date and time are appended to the output filename.\n'
p95442
sS'cpp_type'
p95443
S'bool'
p95444
sS'default'
p95445
S'0'
p95446
sS'name'
p95447
S'append_date'
p95448
sS'required'
p95449
I00
sS'group_name'
p95450
Nsa(dp95451
S'description'
p95452
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p95453
sS'cpp_type'
p95454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95455
sS'default'
p95456
g3
sS'name'
p95457
S'append_date_format'
p95458
sS'required'
p95459
I00
sS'group_name'
p95460
Nsa(dp95461
S'description'
p95462
S"Append '_oversample' to the output file base\n"
p95463
sS'cpp_type'
p95464
S'bool'
p95465
sS'default'
p95466
S'0'
p95467
sS'name'
p95468
S'append_oversample'
p95469
sS'required'
p95470
I00
sS'group_name'
p95471
Nsa(dp95472
S'description'
p95473
S'Set VTK files to output in binary format\n'
p95474
sS'cpp_type'
p95475
S'bool'
p95476
sS'default'
p95477
S'0'
p95478
sS'name'
p95479
S'binary'
p95480
sS'required'
p95481
I00
sS'group_name'
p95482
S'Advanced'
p95483
sa(dp95484
S'description'
p95485
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95486
sS'cpp_type'
p95487
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95488
sS'default'
p95489
g3
sS'name'
p95490
S'control_tags'
p95491
sS'required'
p95492
I00
sS'group_name'
p95493
Nsa(dp95494
S'description'
p95495
S'Time at which this output object stop operating\n'
p95496
sS'cpp_type'
p95497
S'double'
p95498
sS'default'
p95499
g3
sS'name'
p95500
S'end_time'
p95501
sS'required'
p95502
I00
sS'group_name'
p95503
S'Timing'
p95504
sa(dp95505
S'name'
p95506
S'execute_on'
p95507
sS'cpp_type'
p95508
S'MultiMooseEnum'
p95509
sS'default'
p95510
S'INITIAL TIMESTEP_END'
p95511
sS'description'
p95512
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95513
sS'required'
p95514
I00
sS'options'
p95515
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95516
sS'group_name'
p95517
Nsa(dp95518
S'description'
p95519
S'The name of the mesh file to read, for oversampling\n'
p95520
sS'cpp_type'
p95521
S'MeshFileName'
p95522
sS'default'
p95523
g3
sS'name'
p95524
S'file'
p95525
sS'required'
p95526
I00
sS'group_name'
p95527
S'Oversampling'
p95528
sa(dp95529
S'description'
p95530
S'The desired solution output name without an extension\n'
p95531
sS'cpp_type'
p95532
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95533
sS'default'
p95534
g3
sS'name'
p95535
S'file_base'
p95536
sS'required'
p95537
I00
sS'group_name'
p95538
Nsa(dp95539
S'description'
p95540
S'The interval at which time steps are output to the solution file\n'
p95541
sS'cpp_type'
p95542
S'unsigned int'
p95543
sS'default'
p95544
S'1'
p95545
sS'name'
p95546
S'interval'
p95547
sS'required'
p95548
I00
sS'group_name'
p95549
S'Timing'
p95550
sa(dp95551
S'description'
p95552
S'Number of divisions applied to time step when outputting linear residuals\n'
p95553
sS'cpp_type'
p95554
S'double'
p95555
sS'default'
p95556
S'1000'
p95557
sS'name'
p95558
S'linear_residual_dt_divisor'
p95559
sS'required'
p95560
I00
sS'group_name'
p95561
S'PETSc'
p95562
sa(dp95563
S'description'
p95564
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95565
sS'cpp_type'
p95566
S'double'
p95567
sS'default'
p95568
g3
sS'name'
p95569
S'linear_residual_end_time'
p95570
sS'required'
p95571
I00
sS'group_name'
p95572
S'PETSc'
p95573
sa(dp95574
S'description'
p95575
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95576
sS'cpp_type'
p95577
S'double'
p95578
sS'default'
p95579
g3
sS'name'
p95580
S'linear_residual_start_time'
p95581
sS'required'
p95582
I00
sS'group_name'
p95583
S'PETSc'
p95584
sa(dp95585
S'description'
p95586
S'Specifies whether output occurs on each linear residual evaluation\n'
p95587
sS'cpp_type'
p95588
S'bool'
p95589
sS'default'
p95590
S'0'
p95591
sS'name'
p95592
S'linear_residuals'
p95593
sS'required'
p95594
I00
sS'group_name'
p95595
S'PETSc'
p95596
sa(dp95597
S'description'
p95598
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95599
sS'cpp_type'
p95600
S'double'
p95601
sS'default'
p95602
S'1000'
p95603
sS'name'
p95604
S'nonlinear_residual_dt_divisor'
p95605
sS'required'
p95606
I00
sS'group_name'
p95607
S'PETSc'
p95608
sa(dp95609
S'description'
p95610
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95611
sS'cpp_type'
p95612
S'double'
p95613
sS'default'
p95614
g3
sS'name'
p95615
S'nonlinear_residual_end_time'
p95616
sS'required'
p95617
I00
sS'group_name'
p95618
S'PETSc'
p95619
sa(dp95620
S'description'
p95621
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95622
sS'cpp_type'
p95623
S'double'
p95624
sS'default'
p95625
g3
sS'name'
p95626
S'nonlinear_residual_start_time'
p95627
sS'required'
p95628
I00
sS'group_name'
p95629
S'PETSc'
p95630
sa(dp95631
S'description'
p95632
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95633
sS'cpp_type'
p95634
S'bool'
p95635
sS'default'
p95636
S'0'
p95637
sS'name'
p95638
S'nonlinear_residuals'
p95639
sS'required'
p95640
I00
sS'group_name'
p95641
S'PETSc'
p95642
sa(dp95643
S'description'
p95644
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p95645
sS'cpp_type'
p95646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95647
sS'default'
p95648
g3
sS'name'
p95649
S'output_if_base_contains'
p95650
sS'required'
p95651
I00
sS'group_name'
p95652
S'Advanced'
p95653
sa(dp95654
S'description'
p95655
S'Specifies whether output occurs on each linear residual evaluation\n'
p95656
sS'cpp_type'
p95657
S'bool'
p95658
sS'default'
p95659
S'0'
p95660
sS'name'
p95661
S'output_linear'
p95662
sS'required'
p95663
I00
sS'group_name'
p95664
Nsa(dp95665
S'description'
p95666
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95667
sS'cpp_type'
p95668
S'bool'
p95669
sS'default'
p95670
S'0'
p95671
sS'name'
p95672
S'output_nonlinear'
p95673
sS'required'
p95674
I00
sS'group_name'
p95675
Nsa(dp95676
S'description'
p95677
S'Set to true to enable oversampling\n'
p95678
sS'cpp_type'
p95679
S'bool'
p95680
sS'default'
p95681
S'0'
p95682
sS'name'
p95683
S'oversample'
p95684
sS'required'
p95685
I00
sS'group_name'
p95686
Nsa(dp95687
S'description'
p95688
S'The number of for extension suffix (e.g., out.e-s002)\n'
p95689
sS'cpp_type'
p95690
S'unsigned int'
p95691
sS'default'
p95692
S'3'
p95693
sS'name'
p95694
S'padding'
p95695
sS'required'
p95696
I00
sS'group_name'
p95697
S'Advanced'
p95698
sa(dp95699
S'description'
p95700
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p95701
sS'cpp_type'
p95702
S'libMesh::Point'
p95703
sS'default'
p95704
g3
sS'name'
p95705
S'position'
p95706
sS'required'
p95707
I00
sS'group_name'
p95708
S'Oversampling'
p95709
sa(dp95710
S'description'
p95711
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p95712
sS'cpp_type'
p95713
S'unsigned int'
p95714
sS'default'
p95715
S'0'
p95716
sS'name'
p95717
S'refinements'
p95718
sS'required'
p95719
I00
sS'group_name'
p95720
S'Oversampling'
p95721
sa(dp95722
S'description'
p95723
S'Time at which this output object begins to operate\n'
p95724
sS'cpp_type'
p95725
S'double'
p95726
sS'default'
p95727
g3
sS'name'
p95728
S'start_time'
p95729
sS'required'
p95730
I00
sS'group_name'
p95731
S'Timing'
p95732
sa(dp95733
S'description'
p95734
S'Only export results at sync times\n'
p95735
sS'cpp_type'
p95736
S'bool'
p95737
sS'default'
p95738
S'0'
p95739
sS'name'
p95740
S'sync_only'
p95741
sS'required'
p95742
I00
sS'group_name'
p95743
S'Timing'
p95744
sa(dp95745
S'description'
p95746
S'Times at which the output and solution is forced to occur\n'
p95747
sS'cpp_type'
p95748
S'std::vector<double, std::allocator<double> >'
p95749
sS'default'
p95750
g3
sS'name'
p95751
S'sync_times'
p95752
sS'required'
p95753
I00
sS'group_name'
p95754
S'Timing'
p95755
sa(dp95756
S'description'
p95757
S'Time tolerance utilized checking start and end times\n'
p95758
sS'cpp_type'
p95759
S'double'
p95760
sS'default'
p95761
S'1e-14'
p95762
sS'name'
p95763
S'time_tolerance'
p95764
sS'required'
p95765
I00
sS'group_name'
p95766
S'Timing'
p95767
sa(dp95768
S'description'
p95769
g3
sS'cpp_type'
p95770
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p95771
sS'default'
p95772
S'VTK'
p95773
sS'name'
p95774
S'type'
p95775
sS'required'
p95776
I00
sS'group_name'
p95777
Nsa(dp95778
S'description'
p95779
S'Enable/disable the use of the displaced mesh for outputting\n'
p95780
sS'cpp_type'
p95781
S'bool'
p95782
sS'default'
p95783
S'0'
p95784
sS'name'
p95785
S'use_displaced'
p95786
sS'required'
p95787
I00
sS'group_name'
p95788
NsasS'name'
p95789
S'/Outputs/VTK'
p95790
sa(dp95791
S'description'
p95792
g3
sS'subblocks'
p95793
NsS'parameters'
p95794
(lp95795
(dp95796
S'name'
p95797
S'additional_execute_on'
p95798
sS'cpp_type'
p95799
S'MultiMooseEnum'
p95800
sS'default'
p95801
g3
sS'description'
p95802
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95803
sS'required'
p95804
I00
sS'options'
p95805
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95806
sS'group_name'
p95807
Nsa(dp95808
S'description'
p95809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p95810
sS'cpp_type'
p95811
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p95812
sS'default'
p95813
g3
sS'name'
p95814
S'control_tags'
p95815
sS'required'
p95816
I00
sS'group_name'
p95817
Nsa(dp95818
S'description'
p95819
S'Time at which this output object stop operating\n'
p95820
sS'cpp_type'
p95821
S'double'
p95822
sS'default'
p95823
g3
sS'name'
p95824
S'end_time'
p95825
sS'required'
p95826
I00
sS'group_name'
p95827
S'Timing'
p95828
sa(dp95829
S'name'
p95830
S'execute_on'
p95831
sS'cpp_type'
p95832
S'MultiMooseEnum'
p95833
sS'default'
p95834
S'NONLINEAR'
p95835
sS'description'
p95836
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p95837
sS'required'
p95838
I00
sS'options'
p95839
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p95840
sS'group_name'
p95841
Nsa(dp95842
S'description'
p95843
S'The interval at which time steps are output to the solution file\n'
p95844
sS'cpp_type'
p95845
S'unsigned int'
p95846
sS'default'
p95847
S'1'
p95848
sS'name'
p95849
S'interval'
p95850
sS'required'
p95851
I00
sS'group_name'
p95852
S'Timing'
p95853
sa(dp95854
S'description'
p95855
S'Number of divisions applied to time step when outputting linear residuals\n'
p95856
sS'cpp_type'
p95857
S'double'
p95858
sS'default'
p95859
S'1000'
p95860
sS'name'
p95861
S'linear_residual_dt_divisor'
p95862
sS'required'
p95863
I00
sS'group_name'
p95864
S'PETSc'
p95865
sa(dp95866
S'description'
p95867
S'Specifies an end time to begin output on each linear residual evaluation\n'
p95868
sS'cpp_type'
p95869
S'double'
p95870
sS'default'
p95871
g3
sS'name'
p95872
S'linear_residual_end_time'
p95873
sS'required'
p95874
I00
sS'group_name'
p95875
S'PETSc'
p95876
sa(dp95877
S'description'
p95878
S'Specifies a start time to begin output on each linear residual evaluation\n'
p95879
sS'cpp_type'
p95880
S'double'
p95881
sS'default'
p95882
g3
sS'name'
p95883
S'linear_residual_start_time'
p95884
sS'required'
p95885
I00
sS'group_name'
p95886
S'PETSc'
p95887
sa(dp95888
S'description'
p95889
S'Specifies whether output occurs on each linear residual evaluation\n'
p95890
sS'cpp_type'
p95891
S'bool'
p95892
sS'default'
p95893
S'0'
p95894
sS'name'
p95895
S'linear_residuals'
p95896
sS'required'
p95897
I00
sS'group_name'
p95898
S'PETSc'
p95899
sa(dp95900
S'description'
p95901
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p95902
sS'cpp_type'
p95903
S'double'
p95904
sS'default'
p95905
S'1000'
p95906
sS'name'
p95907
S'nonlinear_residual_dt_divisor'
p95908
sS'required'
p95909
I00
sS'group_name'
p95910
S'PETSc'
p95911
sa(dp95912
S'description'
p95913
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p95914
sS'cpp_type'
p95915
S'double'
p95916
sS'default'
p95917
g3
sS'name'
p95918
S'nonlinear_residual_end_time'
p95919
sS'required'
p95920
I00
sS'group_name'
p95921
S'PETSc'
p95922
sa(dp95923
S'description'
p95924
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p95925
sS'cpp_type'
p95926
S'double'
p95927
sS'default'
p95928
g3
sS'name'
p95929
S'nonlinear_residual_start_time'
p95930
sS'required'
p95931
I00
sS'group_name'
p95932
S'PETSc'
p95933
sa(dp95934
S'description'
p95935
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95936
sS'cpp_type'
p95937
S'bool'
p95938
sS'default'
p95939
S'0'
p95940
sS'name'
p95941
S'nonlinear_residuals'
p95942
sS'required'
p95943
I00
sS'group_name'
p95944
S'PETSc'
p95945
sa(dp95946
S'description'
p95947
S'Specifies whether output occurs on each linear residual evaluation\n'
p95948
sS'cpp_type'
p95949
S'bool'
p95950
sS'default'
p95951
S'0'
p95952
sS'name'
p95953
S'output_linear'
p95954
sS'required'
p95955
I00
sS'group_name'
p95956
Nsa(dp95957
S'description'
p95958
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p95959
sS'cpp_type'
p95960
S'bool'
p95961
sS'default'
p95962
S'0'
p95963
sS'name'
p95964
S'output_nonlinear'
p95965
sS'required'
p95966
I00
sS'group_name'
p95967
Nsa(dp95968
S'description'
p95969
S'Time at which this output object begins to operate\n'
p95970
sS'cpp_type'
p95971
S'double'
p95972
sS'default'
p95973
g3
sS'name'
p95974
S'start_time'
p95975
sS'required'
p95976
I00
sS'group_name'
p95977
S'Timing'
p95978
sa(dp95979
S'description'
p95980
S'Only export results at sync times\n'
p95981
sS'cpp_type'
p95982
S'bool'
p95983
sS'default'
p95984
S'0'
p95985
sS'name'
p95986
S'sync_only'
p95987
sS'required'
p95988
I00
sS'group_name'
p95989
S'Timing'
p95990
sa(dp95991
S'description'
p95992
S'Times at which the output and solution is forced to occur\n'
p95993
sS'cpp_type'
p95994
S'std::vector<double, std::allocator<double> >'
p95995
sS'default'
p95996
g3
sS'name'
p95997
S'sync_times'
p95998
sS'required'
p95999
I00
sS'group_name'
p96000
S'Timing'
p96001
sa(dp96002
S'description'
p96003
S'Time tolerance utilized checking start and end times\n'
p96004
sS'cpp_type'
p96005
S'double'
p96006
sS'default'
p96007
S'1e-14'
p96008
sS'name'
p96009
S'time_tolerance'
p96010
sS'required'
p96011
I00
sS'group_name'
p96012
S'Timing'
p96013
sa(dp96014
S'description'
p96015
g3
sS'cpp_type'
p96016
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96017
sS'default'
p96018
S'VariableResidualNormsDebugOutput'
p96019
sS'name'
p96020
S'type'
p96021
sS'required'
p96022
I00
sS'group_name'
p96023
Nsa(dp96024
S'description'
p96025
S'Enable/disable the use of the displaced mesh for outputting\n'
p96026
sS'cpp_type'
p96027
S'bool'
p96028
sS'default'
p96029
S'0'
p96030
sS'name'
p96031
S'use_displaced'
p96032
sS'required'
p96033
I00
sS'group_name'
p96034
NsasS'name'
p96035
S'/Outputs/VariableResidualNormsDebugOutput'
p96036
sa(dp96037
S'description'
p96038
S'Object for outputting data in the XDA/XDR format\n'
p96039
sS'subblocks'
p96040
NsS'parameters'
p96041
(lp96042
(dp96043
S'name'
p96044
S'additional_execute_on'
p96045
sS'cpp_type'
p96046
S'MultiMooseEnum'
p96047
sS'default'
p96048
g3
sS'description'
p96049
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96050
sS'required'
p96051
I00
sS'options'
p96052
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96053
sS'group_name'
p96054
Nsa(dp96055
S'description'
p96056
S'When true the date and time are appended to the output filename.\n'
p96057
sS'cpp_type'
p96058
S'bool'
p96059
sS'default'
p96060
S'0'
p96061
sS'name'
p96062
S'append_date'
p96063
sS'required'
p96064
I00
sS'group_name'
p96065
Nsa(dp96066
S'description'
p96067
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p96068
sS'cpp_type'
p96069
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96070
sS'default'
p96071
g3
sS'name'
p96072
S'append_date_format'
p96073
sS'required'
p96074
I00
sS'group_name'
p96075
Nsa(dp96076
S'description'
p96077
S"Append '_oversample' to the output file base\n"
p96078
sS'cpp_type'
p96079
S'bool'
p96080
sS'default'
p96081
S'0'
p96082
sS'name'
p96083
S'append_oversample'
p96084
sS'required'
p96085
I00
sS'group_name'
p96086
Nsa(dp96087
S'description'
p96088
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96089
sS'cpp_type'
p96090
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96091
sS'default'
p96092
g3
sS'name'
p96093
S'control_tags'
p96094
sS'required'
p96095
I00
sS'group_name'
p96096
Nsa(dp96097
S'description'
p96098
S'Time at which this output object stop operating\n'
p96099
sS'cpp_type'
p96100
S'double'
p96101
sS'default'
p96102
g3
sS'name'
p96103
S'end_time'
p96104
sS'required'
p96105
I00
sS'group_name'
p96106
S'Timing'
p96107
sa(dp96108
S'name'
p96109
S'execute_on'
p96110
sS'cpp_type'
p96111
S'MultiMooseEnum'
p96112
sS'default'
p96113
S'INITIAL TIMESTEP_END'
p96114
sS'description'
p96115
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96116
sS'required'
p96117
I00
sS'options'
p96118
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96119
sS'group_name'
p96120
Nsa(dp96121
S'description'
p96122
S'The name of the mesh file to read, for oversampling\n'
p96123
sS'cpp_type'
p96124
S'MeshFileName'
p96125
sS'default'
p96126
g3
sS'name'
p96127
S'file'
p96128
sS'required'
p96129
I00
sS'group_name'
p96130
S'Oversampling'
p96131
sa(dp96132
S'description'
p96133
S'The desired solution output name without an extension\n'
p96134
sS'cpp_type'
p96135
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96136
sS'default'
p96137
g3
sS'name'
p96138
S'file_base'
p96139
sS'required'
p96140
I00
sS'group_name'
p96141
Nsa(dp96142
S'description'
p96143
S'The interval at which time steps are output to the solution file\n'
p96144
sS'cpp_type'
p96145
S'unsigned int'
p96146
sS'default'
p96147
S'1'
p96148
sS'name'
p96149
S'interval'
p96150
sS'required'
p96151
I00
sS'group_name'
p96152
S'Timing'
p96153
sa(dp96154
S'description'
p96155
S'Number of divisions applied to time step when outputting linear residuals\n'
p96156
sS'cpp_type'
p96157
S'double'
p96158
sS'default'
p96159
S'1000'
p96160
sS'name'
p96161
S'linear_residual_dt_divisor'
p96162
sS'required'
p96163
I00
sS'group_name'
p96164
S'PETSc'
p96165
sa(dp96166
S'description'
p96167
S'Specifies an end time to begin output on each linear residual evaluation\n'
p96168
sS'cpp_type'
p96169
S'double'
p96170
sS'default'
p96171
g3
sS'name'
p96172
S'linear_residual_end_time'
p96173
sS'required'
p96174
I00
sS'group_name'
p96175
S'PETSc'
p96176
sa(dp96177
S'description'
p96178
S'Specifies a start time to begin output on each linear residual evaluation\n'
p96179
sS'cpp_type'
p96180
S'double'
p96181
sS'default'
p96182
g3
sS'name'
p96183
S'linear_residual_start_time'
p96184
sS'required'
p96185
I00
sS'group_name'
p96186
S'PETSc'
p96187
sa(dp96188
S'description'
p96189
S'Specifies whether output occurs on each linear residual evaluation\n'
p96190
sS'cpp_type'
p96191
S'bool'
p96192
sS'default'
p96193
S'0'
p96194
sS'name'
p96195
S'linear_residuals'
p96196
sS'required'
p96197
I00
sS'group_name'
p96198
S'PETSc'
p96199
sa(dp96200
S'description'
p96201
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p96202
sS'cpp_type'
p96203
S'double'
p96204
sS'default'
p96205
S'1000'
p96206
sS'name'
p96207
S'nonlinear_residual_dt_divisor'
p96208
sS'required'
p96209
I00
sS'group_name'
p96210
S'PETSc'
p96211
sa(dp96212
S'description'
p96213
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p96214
sS'cpp_type'
p96215
S'double'
p96216
sS'default'
p96217
g3
sS'name'
p96218
S'nonlinear_residual_end_time'
p96219
sS'required'
p96220
I00
sS'group_name'
p96221
S'PETSc'
p96222
sa(dp96223
S'description'
p96224
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p96225
sS'cpp_type'
p96226
S'double'
p96227
sS'default'
p96228
g3
sS'name'
p96229
S'nonlinear_residual_start_time'
p96230
sS'required'
p96231
I00
sS'group_name'
p96232
S'PETSc'
p96233
sa(dp96234
S'description'
p96235
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96236
sS'cpp_type'
p96237
S'bool'
p96238
sS'default'
p96239
S'0'
p96240
sS'name'
p96241
S'nonlinear_residuals'
p96242
sS'required'
p96243
I00
sS'group_name'
p96244
S'PETSc'
p96245
sa(dp96246
S'description'
p96247
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p96248
sS'cpp_type'
p96249
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96250
sS'default'
p96251
g3
sS'name'
p96252
S'output_if_base_contains'
p96253
sS'required'
p96254
I00
sS'group_name'
p96255
S'Advanced'
p96256
sa(dp96257
S'description'
p96258
S'Specifies whether output occurs on each linear residual evaluation\n'
p96259
sS'cpp_type'
p96260
S'bool'
p96261
sS'default'
p96262
S'0'
p96263
sS'name'
p96264
S'output_linear'
p96265
sS'required'
p96266
I00
sS'group_name'
p96267
Nsa(dp96268
S'description'
p96269
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96270
sS'cpp_type'
p96271
S'bool'
p96272
sS'default'
p96273
S'0'
p96274
sS'name'
p96275
S'output_nonlinear'
p96276
sS'required'
p96277
I00
sS'group_name'
p96278
Nsa(dp96279
S'description'
p96280
S'Set to true to enable oversampling\n'
p96281
sS'cpp_type'
p96282
S'bool'
p96283
sS'default'
p96284
S'0'
p96285
sS'name'
p96286
S'oversample'
p96287
sS'required'
p96288
I00
sS'group_name'
p96289
Nsa(dp96290
S'description'
p96291
S'The number of for extension suffix (e.g., out.e-s002)\n'
p96292
sS'cpp_type'
p96293
S'unsigned int'
p96294
sS'default'
p96295
S'4'
p96296
sS'name'
p96297
S'padding'
p96298
sS'required'
p96299
I00
sS'group_name'
p96300
S'Advanced'
p96301
sa(dp96302
S'description'
p96303
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p96304
sS'cpp_type'
p96305
S'libMesh::Point'
p96306
sS'default'
p96307
g3
sS'name'
p96308
S'position'
p96309
sS'required'
p96310
I00
sS'group_name'
p96311
S'Oversampling'
p96312
sa(dp96313
S'description'
p96314
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p96315
sS'cpp_type'
p96316
S'unsigned int'
p96317
sS'default'
p96318
S'0'
p96319
sS'name'
p96320
S'refinements'
p96321
sS'required'
p96322
I00
sS'group_name'
p96323
S'Oversampling'
p96324
sa(dp96325
S'description'
p96326
S'Time at which this output object begins to operate\n'
p96327
sS'cpp_type'
p96328
S'double'
p96329
sS'default'
p96330
g3
sS'name'
p96331
S'start_time'
p96332
sS'required'
p96333
I00
sS'group_name'
p96334
S'Timing'
p96335
sa(dp96336
S'description'
p96337
S'Only export results at sync times\n'
p96338
sS'cpp_type'
p96339
S'bool'
p96340
sS'default'
p96341
S'0'
p96342
sS'name'
p96343
S'sync_only'
p96344
sS'required'
p96345
I00
sS'group_name'
p96346
S'Timing'
p96347
sa(dp96348
S'description'
p96349
S'Times at which the output and solution is forced to occur\n'
p96350
sS'cpp_type'
p96351
S'std::vector<double, std::allocator<double> >'
p96352
sS'default'
p96353
g3
sS'name'
p96354
S'sync_times'
p96355
sS'required'
p96356
I00
sS'group_name'
p96357
S'Timing'
p96358
sa(dp96359
S'description'
p96360
S'Time tolerance utilized checking start and end times\n'
p96361
sS'cpp_type'
p96362
S'double'
p96363
sS'default'
p96364
S'1e-14'
p96365
sS'name'
p96366
S'time_tolerance'
p96367
sS'required'
p96368
I00
sS'group_name'
p96369
S'Timing'
p96370
sa(dp96371
S'description'
p96372
g3
sS'cpp_type'
p96373
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96374
sS'default'
p96375
S'XDA'
p96376
sS'name'
p96377
S'type'
p96378
sS'required'
p96379
I00
sS'group_name'
p96380
Nsa(dp96381
S'description'
p96382
S'Enable/disable the use of the displaced mesh for outputting\n'
p96383
sS'cpp_type'
p96384
S'bool'
p96385
sS'default'
p96386
S'0'
p96387
sS'name'
p96388
S'use_displaced'
p96389
sS'required'
p96390
I00
sS'group_name'
p96391
NsasS'name'
p96392
S'/Outputs/XDA'
p96393
sa(dp96394
S'description'
p96395
S'Object for outputting data in the XDA/XDR format\n'
p96396
sS'subblocks'
p96397
NsS'parameters'
p96398
(lp96399
(dp96400
S'name'
p96401
S'additional_execute_on'
p96402
sS'cpp_type'
p96403
S'MultiMooseEnum'
p96404
sS'default'
p96405
g3
sS'description'
p96406
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96407
sS'required'
p96408
I00
sS'options'
p96409
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96410
sS'group_name'
p96411
Nsa(dp96412
S'description'
p96413
S'When true the date and time are appended to the output filename.\n'
p96414
sS'cpp_type'
p96415
S'bool'
p96416
sS'default'
p96417
S'0'
p96418
sS'name'
p96419
S'append_date'
p96420
sS'required'
p96421
I00
sS'group_name'
p96422
Nsa(dp96423
S'description'
p96424
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p96425
sS'cpp_type'
p96426
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96427
sS'default'
p96428
g3
sS'name'
p96429
S'append_date_format'
p96430
sS'required'
p96431
I00
sS'group_name'
p96432
Nsa(dp96433
S'description'
p96434
S"Append '_oversample' to the output file base\n"
p96435
sS'cpp_type'
p96436
S'bool'
p96437
sS'default'
p96438
S'0'
p96439
sS'name'
p96440
S'append_oversample'
p96441
sS'required'
p96442
I00
sS'group_name'
p96443
Nsa(dp96444
S'description'
p96445
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p96446
sS'cpp_type'
p96447
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96448
sS'default'
p96449
g3
sS'name'
p96450
S'control_tags'
p96451
sS'required'
p96452
I00
sS'group_name'
p96453
Nsa(dp96454
S'description'
p96455
S'Time at which this output object stop operating\n'
p96456
sS'cpp_type'
p96457
S'double'
p96458
sS'default'
p96459
g3
sS'name'
p96460
S'end_time'
p96461
sS'required'
p96462
I00
sS'group_name'
p96463
S'Timing'
p96464
sa(dp96465
S'name'
p96466
S'execute_on'
p96467
sS'cpp_type'
p96468
S'MultiMooseEnum'
p96469
sS'default'
p96470
S'INITIAL TIMESTEP_END'
p96471
sS'description'
p96472
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p96473
sS'required'
p96474
I00
sS'options'
p96475
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96476
sS'group_name'
p96477
Nsa(dp96478
S'description'
p96479
S'The name of the mesh file to read, for oversampling\n'
p96480
sS'cpp_type'
p96481
S'MeshFileName'
p96482
sS'default'
p96483
g3
sS'name'
p96484
S'file'
p96485
sS'required'
p96486
I00
sS'group_name'
p96487
S'Oversampling'
p96488
sa(dp96489
S'description'
p96490
S'The desired solution output name without an extension\n'
p96491
sS'cpp_type'
p96492
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96493
sS'default'
p96494
g3
sS'name'
p96495
S'file_base'
p96496
sS'required'
p96497
I00
sS'group_name'
p96498
Nsa(dp96499
S'description'
p96500
S'The interval at which time steps are output to the solution file\n'
p96501
sS'cpp_type'
p96502
S'unsigned int'
p96503
sS'default'
p96504
S'1'
p96505
sS'name'
p96506
S'interval'
p96507
sS'required'
p96508
I00
sS'group_name'
p96509
S'Timing'
p96510
sa(dp96511
S'description'
p96512
S'Number of divisions applied to time step when outputting linear residuals\n'
p96513
sS'cpp_type'
p96514
S'double'
p96515
sS'default'
p96516
S'1000'
p96517
sS'name'
p96518
S'linear_residual_dt_divisor'
p96519
sS'required'
p96520
I00
sS'group_name'
p96521
S'PETSc'
p96522
sa(dp96523
S'description'
p96524
S'Specifies an end time to begin output on each linear residual evaluation\n'
p96525
sS'cpp_type'
p96526
S'double'
p96527
sS'default'
p96528
g3
sS'name'
p96529
S'linear_residual_end_time'
p96530
sS'required'
p96531
I00
sS'group_name'
p96532
S'PETSc'
p96533
sa(dp96534
S'description'
p96535
S'Specifies a start time to begin output on each linear residual evaluation\n'
p96536
sS'cpp_type'
p96537
S'double'
p96538
sS'default'
p96539
g3
sS'name'
p96540
S'linear_residual_start_time'
p96541
sS'required'
p96542
I00
sS'group_name'
p96543
S'PETSc'
p96544
sa(dp96545
S'description'
p96546
S'Specifies whether output occurs on each linear residual evaluation\n'
p96547
sS'cpp_type'
p96548
S'bool'
p96549
sS'default'
p96550
S'0'
p96551
sS'name'
p96552
S'linear_residuals'
p96553
sS'required'
p96554
I00
sS'group_name'
p96555
S'PETSc'
p96556
sa(dp96557
S'description'
p96558
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p96559
sS'cpp_type'
p96560
S'double'
p96561
sS'default'
p96562
S'1000'
p96563
sS'name'
p96564
S'nonlinear_residual_dt_divisor'
p96565
sS'required'
p96566
I00
sS'group_name'
p96567
S'PETSc'
p96568
sa(dp96569
S'description'
p96570
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p96571
sS'cpp_type'
p96572
S'double'
p96573
sS'default'
p96574
g3
sS'name'
p96575
S'nonlinear_residual_end_time'
p96576
sS'required'
p96577
I00
sS'group_name'
p96578
S'PETSc'
p96579
sa(dp96580
S'description'
p96581
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p96582
sS'cpp_type'
p96583
S'double'
p96584
sS'default'
p96585
g3
sS'name'
p96586
S'nonlinear_residual_start_time'
p96587
sS'required'
p96588
I00
sS'group_name'
p96589
S'PETSc'
p96590
sa(dp96591
S'description'
p96592
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96593
sS'cpp_type'
p96594
S'bool'
p96595
sS'default'
p96596
S'0'
p96597
sS'name'
p96598
S'nonlinear_residuals'
p96599
sS'required'
p96600
I00
sS'group_name'
p96601
S'PETSc'
p96602
sa(dp96603
S'description'
p96604
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p96605
sS'cpp_type'
p96606
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96607
sS'default'
p96608
g3
sS'name'
p96609
S'output_if_base_contains'
p96610
sS'required'
p96611
I00
sS'group_name'
p96612
S'Advanced'
p96613
sa(dp96614
S'description'
p96615
S'Specifies whether output occurs on each linear residual evaluation\n'
p96616
sS'cpp_type'
p96617
S'bool'
p96618
sS'default'
p96619
S'0'
p96620
sS'name'
p96621
S'output_linear'
p96622
sS'required'
p96623
I00
sS'group_name'
p96624
Nsa(dp96625
S'description'
p96626
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p96627
sS'cpp_type'
p96628
S'bool'
p96629
sS'default'
p96630
S'0'
p96631
sS'name'
p96632
S'output_nonlinear'
p96633
sS'required'
p96634
I00
sS'group_name'
p96635
Nsa(dp96636
S'description'
p96637
S'Set to true to enable oversampling\n'
p96638
sS'cpp_type'
p96639
S'bool'
p96640
sS'default'
p96641
S'0'
p96642
sS'name'
p96643
S'oversample'
p96644
sS'required'
p96645
I00
sS'group_name'
p96646
Nsa(dp96647
S'description'
p96648
S'The number of for extension suffix (e.g., out.e-s002)\n'
p96649
sS'cpp_type'
p96650
S'unsigned int'
p96651
sS'default'
p96652
S'4'
p96653
sS'name'
p96654
S'padding'
p96655
sS'required'
p96656
I00
sS'group_name'
p96657
S'Advanced'
p96658
sa(dp96659
S'description'
p96660
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p96661
sS'cpp_type'
p96662
S'libMesh::Point'
p96663
sS'default'
p96664
g3
sS'name'
p96665
S'position'
p96666
sS'required'
p96667
I00
sS'group_name'
p96668
S'Oversampling'
p96669
sa(dp96670
S'description'
p96671
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p96672
sS'cpp_type'
p96673
S'unsigned int'
p96674
sS'default'
p96675
S'0'
p96676
sS'name'
p96677
S'refinements'
p96678
sS'required'
p96679
I00
sS'group_name'
p96680
S'Oversampling'
p96681
sa(dp96682
S'description'
p96683
S'Time at which this output object begins to operate\n'
p96684
sS'cpp_type'
p96685
S'double'
p96686
sS'default'
p96687
g3
sS'name'
p96688
S'start_time'
p96689
sS'required'
p96690
I00
sS'group_name'
p96691
S'Timing'
p96692
sa(dp96693
S'description'
p96694
S'Only export results at sync times\n'
p96695
sS'cpp_type'
p96696
S'bool'
p96697
sS'default'
p96698
S'0'
p96699
sS'name'
p96700
S'sync_only'
p96701
sS'required'
p96702
I00
sS'group_name'
p96703
S'Timing'
p96704
sa(dp96705
S'description'
p96706
S'Times at which the output and solution is forced to occur\n'
p96707
sS'cpp_type'
p96708
S'std::vector<double, std::allocator<double> >'
p96709
sS'default'
p96710
g3
sS'name'
p96711
S'sync_times'
p96712
sS'required'
p96713
I00
sS'group_name'
p96714
S'Timing'
p96715
sa(dp96716
S'description'
p96717
S'Time tolerance utilized checking start and end times\n'
p96718
sS'cpp_type'
p96719
S'double'
p96720
sS'default'
p96721
S'1e-14'
p96722
sS'name'
p96723
S'time_tolerance'
p96724
sS'required'
p96725
I00
sS'group_name'
p96726
S'Timing'
p96727
sa(dp96728
S'description'
p96729
g3
sS'cpp_type'
p96730
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96731
sS'default'
p96732
S'XDR'
p96733
sS'name'
p96734
S'type'
p96735
sS'required'
p96736
I00
sS'group_name'
p96737
Nsa(dp96738
S'description'
p96739
S'Enable/disable the use of the displaced mesh for outputting\n'
p96740
sS'cpp_type'
p96741
S'bool'
p96742
sS'default'
p96743
S'0'
p96744
sS'name'
p96745
S'use_displaced'
p96746
sS'required'
p96747
I00
sS'group_name'
p96748
NsasS'name'
p96749
S'/Outputs/XDR'
p96750
sasS'parameters'
p96751
(lp96752
(dp96753
S'description'
p96754
S'When true the date and time are appended to the output filename.\n'
p96755
sS'cpp_type'
p96756
S'bool'
p96757
sS'default'
p96758
S'0'
p96759
sS'name'
p96760
S'append_date'
p96761
sS'required'
p96762
I00
sS'group_name'
p96763
Nsa(dp96764
S'description'
p96765
S'The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p96766
sS'cpp_type'
p96767
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96768
sS'default'
p96769
g3
sS'name'
p96770
S'append_date_format'
p96771
sS'required'
p96772
I00
sS'group_name'
p96773
Nsa(dp96774
S'description'
p96775
S'Create checkpoint files using the default options.\n'
p96776
sS'cpp_type'
p96777
S'bool'
p96778
sS'default'
p96779
S'0'
p96780
sS'name'
p96781
S'checkpoint'
p96782
sS'required'
p96783
I00
sS'group_name'
p96784
Nsa(dp96785
S'description'
p96786
S'Set to false to turn off all coloring in all outputs\n'
p96787
sS'cpp_type'
p96788
S'bool'
p96789
sS'default'
p96790
S'1'
p96791
sS'name'
p96792
S'color'
p96793
sS'required'
p96794
I00
sS'group_name'
p96795
Nsa(dp96796
S'description'
p96797
S'Output the results using the default settings for Console output\n'
p96798
sS'cpp_type'
p96799
S'bool'
p96800
sS'default'
p96801
S'1'
p96802
sS'name'
p96803
S'console'
p96804
sS'required'
p96805
I00
sS'group_name'
p96806
Nsa(dp96807
S'description'
p96808
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p96809
sS'cpp_type'
p96810
S'bool'
p96811
sS'default'
p96812
S'0'
p96813
sS'name'
p96814
S'csv'
p96815
sS'required'
p96816
I00
sS'group_name'
p96817
Nsa(dp96818
S'description'
p96819
S'Create the dof map .json output file\n'
p96820
sS'cpp_type'
p96821
S'bool'
p96822
sS'default'
p96823
S'0'
p96824
sS'name'
p96825
S'dofmap'
p96826
sS'required'
p96827
I00
sS'group_name'
p96828
Nsa(dp96829
S'name'
p96830
S'execute_on'
p96831
sS'cpp_type'
p96832
S'MultiMooseEnum'
p96833
sS'default'
p96834
S'INITIAL TIMESTEP_END'
p96835
sS'description'
p96836
S"Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: 'initial timestep_end')\n"
p96837
sS'required'
p96838
I00
sS'options'
p96839
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p96840
sS'group_name'
p96841
Nsa(dp96842
S'description'
p96843
S'Output the results using the default settings for Exodus output\n'
p96844
sS'cpp_type'
p96845
S'bool'
p96846
sS'default'
p96847
S'0'
p96848
sS'name'
p96849
S'exodus'
p96850
sS'required'
p96851
I00
sS'group_name'
p96852
Nsa(dp96853
S'description'
p96854
S'Common file base name to be utilized with all output objects\n'
p96855
sS'cpp_type'
p96856
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p96857
sS'default'
p96858
g3
sS'name'
p96859
S'file_base'
p96860
sS'required'
p96861
I00
sS'group_name'
p96862
Nsa(dp96863
S'description'
p96864
S'Output the results using the default settings for GMV output\n'
p96865
sS'cpp_type'
p96866
S'bool'
p96867
sS'default'
p96868
S'0'
p96869
sS'name'
p96870
S'gmv'
p96871
sS'required'
p96872
I00
sS'group_name'
p96873
Nsa(dp96874
S'description'
p96875
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p96876
sS'cpp_type'
p96877
S'bool'
p96878
sS'default'
p96879
S'0'
p96880
sS'name'
p96881
S'gnuplot'
p96882
sS'required'
p96883
I00
sS'group_name'
p96884
Nsa(dp96885
S'description'
p96886
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p96887
sS'cpp_type'
p96888
S'std::vector<VariableName, std::allocator<VariableName> >'
p96889
sS'default'
p96890
g3
sS'name'
p96891
S'hide'
p96892
sS'required'
p96893
I00
sS'group_name'
p96894
Nsa(dp96895
S'description'
p96896
S'The interval at which timesteps are output to the solution file\n'
p96897
sS'cpp_type'
p96898
S'unsigned int'
p96899
sS'default'
p96900
S'1'
p96901
sS'name'
p96902
S'interval'
p96903
sS'required'
p96904
I00
sS'group_name'
p96905
Nsa(dp96906
S'description'
p96907
S'Output the results using the default settings for Nemesis output\n'
p96908
sS'cpp_type'
p96909
S'bool'
p96910
sS'default'
p96911
S'0'
p96912
sS'name'
p96913
S'nemesis'
p96914
sS'required'
p96915
I00
sS'group_name'
p96916
Nsa(dp96917
S'description'
p96918
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p96919
sS'cpp_type'
p96920
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p96921
sS'default'
p96922
g3
sS'name'
p96923
S'output_if_base_contains'
p96924
sS'required'
p96925
I00
sS'group_name'
p96926
Nsa(dp96927
S'description'
p96928
S'Enable printing of linear residuals to the screen (Console)\n'
p96929
sS'cpp_type'
p96930
S'bool'
p96931
sS'default'
p96932
S'1'
p96933
sS'name'
p96934
S'print_linear_residuals'
p96935
sS'required'
p96936
I00
sS'group_name'
p96937
Nsa(dp96938
S'description'
p96939
S'When true, each time the mesh is changed the mesh information is printed\n'
p96940
sS'cpp_type'
p96941
S'bool'
p96942
sS'default'
p96943
S'0'
p96944
sS'name'
p96945
S'print_mesh_changed_info'
p96946
sS'required'
p96947
I00
sS'group_name'
p96948
Nsa(dp96949
S'description'
p96950
S'Enable printing of the performance log to the screen (Console)\n'
p96951
sS'cpp_type'
p96952
S'bool'
p96953
sS'default'
p96954
S'0'
p96955
sS'name'
p96956
S'print_perf_log'
p96957
sS'required'
p96958
I00
sS'group_name'
p96959
Nsa(dp96960
S'description'
p96961
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p96962
sS'cpp_type'
p96963
S'std::vector<VariableName, std::allocator<VariableName> >'
p96964
sS'default'
p96965
g3
sS'name'
p96966
S'show'
p96967
sS'required'
p96968
I00
sS'group_name'
p96969
Nsa(dp96970
S'description'
p96971
S'Print a solution history file (.slh) using the default settings\n'
p96972
sS'cpp_type'
p96973
S'bool'
p96974
sS'default'
p96975
S'0'
p96976
sS'name'
p96977
S'solution_history'
p96978
sS'required'
p96979
I00
sS'group_name'
p96980
Nsa(dp96981
S'description'
p96982
S'Times at which the output and solution is forced to occur\n'
p96983
sS'cpp_type'
p96984
S'std::vector<double, std::allocator<double> >'
p96985
sS'default'
p96986
g3
sS'name'
p96987
S'sync_times'
p96988
sS'required'
p96989
I00
sS'group_name'
p96990
Nsa(dp96991
S'description'
p96992
S'Output the results using the default settings for Tecplot output\n'
p96993
sS'cpp_type'
p96994
S'bool'
p96995
sS'default'
p96996
S'0'
p96997
sS'name'
p96998
S'tecplot'
p96999
sS'required'
p97000
I00
sS'group_name'
p97001
Nsa(dp97002
S'description'
p97003
S'Output the results using the default settings for VTKOutput output\n'
p97004
sS'cpp_type'
p97005
S'bool'
p97006
sS'default'
p97007
S'0'
p97008
sS'name'
p97009
S'vtk'
p97010
sS'required'
p97011
I00
sS'group_name'
p97012
Nsa(dp97013
S'description'
p97014
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p97015
sS'cpp_type'
p97016
S'bool'
p97017
sS'default'
p97018
S'0'
p97019
sS'name'
p97020
S'xda'
p97021
sS'required'
p97022
I00
sS'group_name'
p97023
Nsa(dp97024
S'description'
p97025
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p97026
sS'cpp_type'
p97027
S'bool'
p97028
sS'default'
p97029
S'0'
p97030
sS'name'
p97031
S'xdr'
p97032
sS'required'
p97033
I00
sS'group_name'
p97034
NsasS'name'
p97035
S'/Outputs'
p97036
sa(dp97037
S'description'
p97038
g3
sS'subblocks'
p97039
(lp97040
(dp97041
S'description'
p97042
g3
sS'subblocks'
p97043
NsS'parameters'
p97044
(lp97045
(dp97046
S'description'
p97047
S'A string representing the Moose Object that will be built by this Action\n'
p97048
sS'cpp_type'
p97049
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97050
sS'default'
p97051
g3
sS'name'
p97052
S'type'
p97053
sS'required'
p97054
I01
sS'group_name'
p97055
NsasS'name'
p97056
S'/Postprocessors/*'
p97057
sa(dp97058
S'description'
p97059
g3
sS'subblocks'
p97060
NsS'parameters'
p97061
(lp97062
(dp97063
S'description'
p97064
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p97065
sS'cpp_type'
p97066
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p97067
sS'default'
p97068
g3
sS'name'
p97069
S'boundary'
p97070
sS'required'
p97071
I00
sS'group_name'
p97072
Nsa(dp97073
S'description'
p97074
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97075
sS'cpp_type'
p97076
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97077
sS'default'
p97078
g3
sS'name'
p97079
S'control_tags'
p97080
sS'required'
p97081
I00
sS'group_name'
p97082
Nsa(dp97083
S'name'
p97084
S'execute_on'
p97085
sS'cpp_type'
p97086
S'MultiMooseEnum'
p97087
sS'default'
p97088
S'TIMESTEP_END'
p97089
sS'description'
p97090
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97091
sS'required'
p97092
I00
sS'options'
p97093
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97094
sS'group_name'
p97095
Nsa(dp97096
S'description'
p97097
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97098
sS'cpp_type'
p97099
S'std::vector<OutputName, std::allocator<OutputName> >'
p97100
sS'default'
p97101
g3
sS'name'
p97102
S'outputs'
p97103
sS'required'
p97104
I00
sS'group_name'
p97105
S'Advanced'
p97106
sa(dp97107
S'description'
p97108
g3
sS'cpp_type'
p97109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97110
sS'default'
p97111
S'AreaPostprocessor'
p97112
sS'name'
p97113
S'type'
p97114
sS'required'
p97115
I00
sS'group_name'
p97116
Nsa(dp97117
S'description'
p97118
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97119
sS'cpp_type'
p97120
S'bool'
p97121
sS'default'
p97122
S'0'
p97123
sS'name'
p97124
S'use_displaced_mesh'
p97125
sS'required'
p97126
I00
sS'group_name'
p97127
S'Advanced'
p97128
sasS'name'
p97129
S'/Postprocessors/AreaPostprocessor'
p97130
sa(dp97131
S'description'
p97132
g3
sS'subblocks'
p97133
NsS'parameters'
p97134
(lp97135
(dp97136
S'description'
p97137
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97138
sS'cpp_type'
p97139
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97140
sS'default'
p97141
g3
sS'name'
p97142
S'block'
p97143
sS'required'
p97144
I00
sS'group_name'
p97145
Nsa(dp97146
S'description'
p97147
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97148
sS'cpp_type'
p97149
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97150
sS'default'
p97151
g3
sS'name'
p97152
S'control_tags'
p97153
sS'required'
p97154
I00
sS'group_name'
p97155
Nsa(dp97156
S'name'
p97157
S'execute_on'
p97158
sS'cpp_type'
p97159
S'MultiMooseEnum'
p97160
sS'default'
p97161
S'TIMESTEP_END'
p97162
sS'description'
p97163
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97164
sS'required'
p97165
I00
sS'options'
p97166
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97167
sS'group_name'
p97168
Nsa(dp97169
S'description'
p97170
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97171
sS'cpp_type'
p97172
S'std::vector<OutputName, std::allocator<OutputName> >'
p97173
sS'default'
p97174
g3
sS'name'
p97175
S'outputs'
p97176
sS'required'
p97177
I00
sS'group_name'
p97178
S'Advanced'
p97179
sa(dp97180
S'description'
p97181
S'The seed for the master random number generator\n'
p97182
sS'cpp_type'
p97183
S'unsigned int'
p97184
sS'default'
p97185
S'0'
p97186
sS'name'
p97187
S'seed'
p97188
sS'required'
p97189
I00
sS'group_name'
p97190
S'Advanced'
p97191
sa(dp97192
S'description'
p97193
g3
sS'cpp_type'
p97194
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97195
sS'default'
p97196
S'AverageElementSize'
p97197
sS'name'
p97198
S'type'
p97199
sS'required'
p97200
I00
sS'group_name'
p97201
Nsa(dp97202
S'description'
p97203
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97204
sS'cpp_type'
p97205
S'bool'
p97206
sS'default'
p97207
S'0'
p97208
sS'name'
p97209
S'use_displaced_mesh'
p97210
sS'required'
p97211
I00
sS'group_name'
p97212
S'Advanced'
p97213
sa(dp97214
S'description'
p97215
S'The name of the variable that this object operates on\n'
p97216
sS'cpp_type'
p97217
S'std::vector<VariableName>'
p97218
sS'default'
p97219
g3
sS'name'
p97220
S'variable'
p97221
sS'required'
p97222
I00
sS'group_name'
p97223
NsasS'name'
p97224
S'/Postprocessors/AverageElementSize'
p97225
sa(dp97226
S'description'
p97227
g3
sS'subblocks'
p97228
NsS'parameters'
p97229
(lp97230
(dp97231
S'description'
p97232
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97233
sS'cpp_type'
p97234
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97235
sS'default'
p97236
g3
sS'name'
p97237
S'block'
p97238
sS'required'
p97239
I00
sS'group_name'
p97240
Nsa(dp97241
S'description'
p97242
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p97243
sS'cpp_type'
p97244
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p97245
sS'default'
p97246
g3
sS'name'
p97247
S'boundary'
p97248
sS'required'
p97249
I00
sS'group_name'
p97250
Nsa(dp97251
S'description'
p97252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97253
sS'cpp_type'
p97254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97255
sS'default'
p97256
g3
sS'name'
p97257
S'control_tags'
p97258
sS'required'
p97259
I00
sS'group_name'
p97260
Nsa(dp97261
S'name'
p97262
S'execute_on'
p97263
sS'cpp_type'
p97264
S'MultiMooseEnum'
p97265
sS'default'
p97266
S'TIMESTEP_END'
p97267
sS'description'
p97268
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97269
sS'required'
p97270
I00
sS'options'
p97271
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97272
sS'group_name'
p97273
Nsa(dp97274
S'description'
p97275
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97276
sS'cpp_type'
p97277
S'std::vector<OutputName, std::allocator<OutputName> >'
p97278
sS'default'
p97279
g3
sS'name'
p97280
S'outputs'
p97281
sS'required'
p97282
I00
sS'group_name'
p97283
S'Advanced'
p97284
sa(dp97285
S'description'
p97286
S'The seed for the master random number generator\n'
p97287
sS'cpp_type'
p97288
S'unsigned int'
p97289
sS'default'
p97290
S'0'
p97291
sS'name'
p97292
S'seed'
p97293
sS'required'
p97294
I00
sS'group_name'
p97295
S'Advanced'
p97296
sa(dp97297
S'description'
p97298
g3
sS'cpp_type'
p97299
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97300
sS'default'
p97301
S'AverageNodalVariableValue'
p97302
sS'name'
p97303
S'type'
p97304
sS'required'
p97305
I00
sS'group_name'
p97306
Nsa(dp97307
S'description'
p97308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97309
sS'cpp_type'
p97310
S'bool'
p97311
sS'default'
p97312
S'0'
p97313
sS'name'
p97314
S'use_displaced_mesh'
p97315
sS'required'
p97316
I00
sS'group_name'
p97317
S'Advanced'
p97318
sa(dp97319
S'description'
p97320
S'The name of the variable that this postprocessor operates on\n'
p97321
sS'cpp_type'
p97322
S'std::vector<VariableName>'
p97323
sS'default'
p97324
g3
sS'name'
p97325
S'variable'
p97326
sS'required'
p97327
I00
sS'group_name'
p97328
NsasS'name'
p97329
S'/Postprocessors/AverageNodalVariableValue'
p97330
sa(dp97331
S'description'
p97332
g3
sS'subblocks'
p97333
NsS'parameters'
p97334
(lp97335
(dp97336
S'description'
p97337
S'Variable value used to determine interface position\n'
p97338
sS'cpp_type'
p97339
S'double'
p97340
sS'default'
p97341
S'0.5'
p97342
sS'name'
p97343
S'RefVal'
p97344
sS'required'
p97345
I00
sS'group_name'
p97346
Nsa(dp97347
S'description'
p97348
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97349
sS'cpp_type'
p97350
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97351
sS'default'
p97352
g3
sS'name'
p97353
S'block'
p97354
sS'required'
p97355
I00
sS'group_name'
p97356
Nsa(dp97357
S'description'
p97358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p97359
sS'cpp_type'
p97360
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p97361
sS'default'
p97362
g3
sS'name'
p97363
S'boundary'
p97364
sS'required'
p97365
I00
sS'group_name'
p97366
Nsa(dp97367
S'description'
p97368
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97369
sS'cpp_type'
p97370
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97371
sS'default'
p97372
g3
sS'name'
p97373
S'control_tags'
p97374
sS'required'
p97375
I00
sS'group_name'
p97376
Nsa(dp97377
S'description'
p97378
S'The index of the direction the position is measured in\n'
p97379
sS'cpp_type'
p97380
S'unsigned int'
p97381
sS'default'
p97382
g3
sS'name'
p97383
S'direction_index'
p97384
sS'required'
p97385
I01
sS'group_name'
p97386
Nsa(dp97387
S'name'
p97388
S'execute_on'
p97389
sS'cpp_type'
p97390
S'MultiMooseEnum'
p97391
sS'default'
p97392
S'TIMESTEP_END'
p97393
sS'description'
p97394
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97395
sS'required'
p97396
I00
sS'options'
p97397
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97398
sS'group_name'
p97399
Nsa(dp97400
S'description'
p97401
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97402
sS'cpp_type'
p97403
S'std::vector<OutputName, std::allocator<OutputName> >'
p97404
sS'default'
p97405
g3
sS'name'
p97406
S'outputs'
p97407
sS'required'
p97408
I00
sS'group_name'
p97409
S'Advanced'
p97410
sa(dp97411
S'description'
p97412
S'The seed for the master random number generator\n'
p97413
sS'cpp_type'
p97414
S'unsigned int'
p97415
sS'default'
p97416
S'0'
p97417
sS'name'
p97418
S'seed'
p97419
sS'required'
p97420
I00
sS'group_name'
p97421
S'Advanced'
p97422
sa(dp97423
S'description'
p97424
g3
sS'cpp_type'
p97425
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97426
sS'default'
p97427
S'CInterfacePosition'
p97428
sS'name'
p97429
S'type'
p97430
sS'required'
p97431
I00
sS'group_name'
p97432
Nsa(dp97433
S'description'
p97434
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97435
sS'cpp_type'
p97436
S'bool'
p97437
sS'default'
p97438
S'0'
p97439
sS'name'
p97440
S'use_displaced_mesh'
p97441
sS'required'
p97442
I00
sS'group_name'
p97443
S'Advanced'
p97444
sa(dp97445
S'description'
p97446
S'The name of the variable that this postprocessor operates on\n'
p97447
sS'cpp_type'
p97448
S'std::vector<VariableName>'
p97449
sS'default'
p97450
g3
sS'name'
p97451
S'variable'
p97452
sS'required'
p97453
I00
sS'group_name'
p97454
NsasS'name'
p97455
S'/Postprocessors/CInterfacePosition'
p97456
sa(dp97457
S'description'
p97458
g3
sS'subblocks'
p97459
NsS'parameters'
p97460
(lp97461
(dp97462
S'description'
p97463
S'The CavityPressureUserObject that computes the initial moles.\n'
p97464
sS'cpp_type'
p97465
S'UserObjectName'
p97466
sS'default'
p97467
g3
sS'name'
p97468
S'cavity_pressure_uo'
p97469
sS'required'
p97470
I01
sS'group_name'
p97471
Nsa(dp97472
S'description'
p97473
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97474
sS'cpp_type'
p97475
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97476
sS'default'
p97477
g3
sS'name'
p97478
S'control_tags'
p97479
sS'required'
p97480
I00
sS'group_name'
p97481
Nsa(dp97482
S'name'
p97483
S'execute_on'
p97484
sS'cpp_type'
p97485
S'MultiMooseEnum'
p97486
sS'default'
p97487
S'TIMESTEP_END'
p97488
sS'description'
p97489
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97490
sS'required'
p97491
I00
sS'options'
p97492
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97493
sS'group_name'
p97494
Nsa(dp97495
S'description'
p97496
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97497
sS'cpp_type'
p97498
S'std::vector<OutputName, std::allocator<OutputName> >'
p97499
sS'default'
p97500
g3
sS'name'
p97501
S'outputs'
p97502
sS'required'
p97503
I00
sS'group_name'
p97504
S'Advanced'
p97505
sa(dp97506
S'description'
p97507
S'The quantity to report.\n'
p97508
sS'cpp_type'
p97509
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97510
sS'default'
p97511
g3
sS'name'
p97512
S'quantity'
p97513
sS'required'
p97514
I01
sS'group_name'
p97515
Nsa(dp97516
S'description'
p97517
g3
sS'cpp_type'
p97518
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97519
sS'default'
p97520
S'CavityPressurePostprocessor'
p97521
sS'name'
p97522
S'type'
p97523
sS'required'
p97524
I00
sS'group_name'
p97525
Nsa(dp97526
S'description'
p97527
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97528
sS'cpp_type'
p97529
S'bool'
p97530
sS'default'
p97531
S'1'
p97532
sS'name'
p97533
S'use_displaced_mesh'
p97534
sS'required'
p97535
I00
sS'group_name'
p97536
S'Advanced'
p97537
sasS'name'
p97538
S'/Postprocessors/CavityPressurePostprocessor'
p97539
sa(dp97540
S'description'
p97541
g3
sS'subblocks'
p97542
NsS'parameters'
p97543
(lp97544
(dp97545
S'description'
p97546
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97547
sS'cpp_type'
p97548
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97549
sS'default'
p97550
g3
sS'name'
p97551
S'control_tags'
p97552
sS'required'
p97553
I00
sS'group_name'
p97554
Nsa(dp97555
S'description'
p97556
S'The CrackFrontDefinition user object name\n'
p97557
sS'cpp_type'
p97558
S'UserObjectName'
p97559
sS'default'
p97560
g3
sS'name'
p97561
S'crack_front_definition'
p97562
sS'required'
p97563
I01
sS'group_name'
p97564
Nsa(dp97565
S'description'
p97566
S'The index of the point on the crack front where data is to be reported\n'
p97567
sS'cpp_type'
p97568
S'unsigned int'
p97569
sS'default'
p97570
g3
sS'name'
p97571
S'crack_front_point_index'
p97572
sS'required'
p97573
I00
sS'group_name'
p97574
Nsa(dp97575
S'name'
p97576
S'execute_on'
p97577
sS'cpp_type'
p97578
S'MultiMooseEnum'
p97579
sS'default'
p97580
S'TIMESTEP_END'
p97581
sS'description'
p97582
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97583
sS'required'
p97584
I00
sS'options'
p97585
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97586
sS'group_name'
p97587
Nsa(dp97588
S'description'
p97589
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97590
sS'cpp_type'
p97591
S'std::vector<OutputName, std::allocator<OutputName> >'
p97592
sS'default'
p97593
g3
sS'name'
p97594
S'outputs'
p97595
sS'required'
p97596
I00
sS'group_name'
p97597
S'Advanced'
p97598
sa(dp97599
S'description'
p97600
S'A scale factor to be applied to the reported quantity\n'
p97601
sS'cpp_type'
p97602
S'double'
p97603
sS'default'
p97604
S'1'
p97605
sS'name'
p97606
S'scale_factor'
p97607
sS'required'
p97608
I00
sS'group_name'
p97609
Nsa(dp97610
S'description'
p97611
g3
sS'cpp_type'
p97612
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97613
sS'default'
p97614
S'CrackFrontData'
p97615
sS'name'
p97616
S'type'
p97617
sS'required'
p97618
I00
sS'group_name'
p97619
Nsa(dp97620
S'description'
p97621
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97622
sS'cpp_type'
p97623
S'bool'
p97624
sS'default'
p97625
S'0'
p97626
sS'name'
p97627
S'use_displaced_mesh'
p97628
sS'required'
p97629
I00
sS'group_name'
p97630
S'Advanced'
p97631
sa(dp97632
S'description'
p97633
S'The name of a variable whose value at the crack front is to be reported\n'
p97634
sS'cpp_type'
p97635
S'VariableName'
p97636
sS'default'
p97637
g3
sS'name'
p97638
S'variable'
p97639
sS'required'
p97640
I01
sS'group_name'
p97641
NsasS'name'
p97642
S'/Postprocessors/CrackFrontData'
p97643
sa(dp97644
S'description'
p97645
g3
sS'subblocks'
p97646
NsS'parameters'
p97647
(lp97648
(dp97649
S'description'
p97650
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97651
sS'cpp_type'
p97652
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97653
sS'default'
p97654
g3
sS'name'
p97655
S'control_tags'
p97656
sS'required'
p97657
I00
sS'group_name'
p97658
Nsa(dp97659
S'name'
p97660
S'execute_on'
p97661
sS'cpp_type'
p97662
S'MultiMooseEnum'
p97663
sS'default'
p97664
S'TIMESTEP_END'
p97665
sS'description'
p97666
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97667
sS'required'
p97668
I00
sS'options'
p97669
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97670
sS'group_name'
p97671
Nsa(dp97672
S'description'
p97673
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97674
sS'cpp_type'
p97675
S'std::vector<OutputName, std::allocator<OutputName> >'
p97676
sS'default'
p97677
g3
sS'name'
p97678
S'outputs'
p97679
sS'required'
p97680
I00
sS'group_name'
p97681
S'Advanced'
p97682
sa(dp97683
S'description'
p97684
g3
sS'cpp_type'
p97685
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97686
sS'default'
p97687
S'DifferencePostprocessor'
p97688
sS'name'
p97689
S'type'
p97690
sS'required'
p97691
I00
sS'group_name'
p97692
Nsa(dp97693
S'description'
p97694
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97695
sS'cpp_type'
p97696
S'bool'
p97697
sS'default'
p97698
S'0'
p97699
sS'name'
p97700
S'use_displaced_mesh'
p97701
sS'required'
p97702
I00
sS'group_name'
p97703
S'Advanced'
p97704
sa(dp97705
S'description'
p97706
S'First value\n'
p97707
sS'cpp_type'
p97708
S'PostprocessorName'
p97709
sS'default'
p97710
g3
sS'name'
p97711
S'value1'
p97712
sS'required'
p97713
I01
sS'group_name'
p97714
Nsa(dp97715
S'description'
p97716
S'Second value\n'
p97717
sS'cpp_type'
p97718
S'PostprocessorName'
p97719
sS'default'
p97720
g3
sS'name'
p97721
S'value2'
p97722
sS'required'
p97723
I01
sS'group_name'
p97724
NsasS'name'
p97725
S'/Postprocessors/DifferencePostprocessor'
p97726
sa(dp97727
S'description'
p97728
g3
sS'subblocks'
p97729
NsS'parameters'
p97730
(lp97731
(dp97732
S'description'
p97733
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97734
sS'cpp_type'
p97735
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97736
sS'default'
p97737
g3
sS'name'
p97738
S'block'
p97739
sS'required'
p97740
I00
sS'group_name'
p97741
Nsa(dp97742
S'description'
p97743
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97744
sS'cpp_type'
p97745
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97746
sS'default'
p97747
g3
sS'name'
p97748
S'control_tags'
p97749
sS'required'
p97750
I00
sS'group_name'
p97751
Nsa(dp97752
S'name'
p97753
S'execute_on'
p97754
sS'cpp_type'
p97755
S'MultiMooseEnum'
p97756
sS'default'
p97757
S'TIMESTEP_END'
p97758
sS'description'
p97759
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97760
sS'required'
p97761
I00
sS'options'
p97762
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97763
sS'group_name'
p97764
Nsa(dp97765
S'description'
p97766
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97767
sS'cpp_type'
p97768
S'std::vector<OutputName, std::allocator<OutputName> >'
p97769
sS'default'
p97770
g3
sS'name'
p97771
S'outputs'
p97772
sS'required'
p97773
I00
sS'group_name'
p97774
S'Advanced'
p97775
sa(dp97776
S'description'
p97777
S'The seed for the master random number generator\n'
p97778
sS'cpp_type'
p97779
S'unsigned int'
p97780
sS'default'
p97781
S'0'
p97782
sS'name'
p97783
S'seed'
p97784
sS'required'
p97785
I00
sS'group_name'
p97786
S'Advanced'
p97787
sa(dp97788
S'description'
p97789
g3
sS'cpp_type'
p97790
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97791
sS'default'
p97792
S'ElementAverageTimeDerivative'
p97793
sS'name'
p97794
S'type'
p97795
sS'required'
p97796
I00
sS'group_name'
p97797
Nsa(dp97798
S'description'
p97799
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97800
sS'cpp_type'
p97801
S'bool'
p97802
sS'default'
p97803
S'0'
p97804
sS'name'
p97805
S'use_displaced_mesh'
p97806
sS'required'
p97807
I00
sS'group_name'
p97808
S'Advanced'
p97809
sa(dp97810
S'description'
p97811
S'The name of the variable that this object operates on\n'
p97812
sS'cpp_type'
p97813
S'std::vector<VariableName>'
p97814
sS'default'
p97815
g3
sS'name'
p97816
S'variable'
p97817
sS'required'
p97818
I00
sS'group_name'
p97819
NsasS'name'
p97820
S'/Postprocessors/ElementAverageTimeDerivative'
p97821
sa(dp97822
S'description'
p97823
g3
sS'subblocks'
p97824
NsS'parameters'
p97825
(lp97826
(dp97827
S'description'
p97828
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97829
sS'cpp_type'
p97830
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97831
sS'default'
p97832
g3
sS'name'
p97833
S'block'
p97834
sS'required'
p97835
I00
sS'group_name'
p97836
Nsa(dp97837
S'description'
p97838
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97839
sS'cpp_type'
p97840
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97841
sS'default'
p97842
g3
sS'name'
p97843
S'control_tags'
p97844
sS'required'
p97845
I00
sS'group_name'
p97846
Nsa(dp97847
S'name'
p97848
S'execute_on'
p97849
sS'cpp_type'
p97850
S'MultiMooseEnum'
p97851
sS'default'
p97852
S'TIMESTEP_END'
p97853
sS'description'
p97854
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97855
sS'required'
p97856
I00
sS'options'
p97857
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97858
sS'group_name'
p97859
Nsa(dp97860
S'description'
p97861
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97862
sS'cpp_type'
p97863
S'std::vector<OutputName, std::allocator<OutputName> >'
p97864
sS'default'
p97865
g3
sS'name'
p97866
S'outputs'
p97867
sS'required'
p97868
I00
sS'group_name'
p97869
S'Advanced'
p97870
sa(dp97871
S'description'
p97872
S'The seed for the master random number generator\n'
p97873
sS'cpp_type'
p97874
S'unsigned int'
p97875
sS'default'
p97876
S'0'
p97877
sS'name'
p97878
S'seed'
p97879
sS'required'
p97880
I00
sS'group_name'
p97881
S'Advanced'
p97882
sa(dp97883
S'description'
p97884
g3
sS'cpp_type'
p97885
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97886
sS'default'
p97887
S'ElementAverageValue'
p97888
sS'name'
p97889
S'type'
p97890
sS'required'
p97891
I00
sS'group_name'
p97892
Nsa(dp97893
S'description'
p97894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97895
sS'cpp_type'
p97896
S'bool'
p97897
sS'default'
p97898
S'0'
p97899
sS'name'
p97900
S'use_displaced_mesh'
p97901
sS'required'
p97902
I00
sS'group_name'
p97903
S'Advanced'
p97904
sa(dp97905
S'description'
p97906
S'The name of the variable that this object operates on\n'
p97907
sS'cpp_type'
p97908
S'std::vector<VariableName>'
p97909
sS'default'
p97910
g3
sS'name'
p97911
S'variable'
p97912
sS'required'
p97913
I00
sS'group_name'
p97914
NsasS'name'
p97915
S'/Postprocessors/ElementAverageValue'
p97916
sa(dp97917
S'description'
p97918
g3
sS'subblocks'
p97919
NsS'parameters'
p97920
(lp97921
(dp97922
S'description'
p97923
S'The list of block ids (SubdomainID) that this object will be applied\n'
p97924
sS'cpp_type'
p97925
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p97926
sS'default'
p97927
g3
sS'name'
p97928
S'block'
p97929
sS'required'
p97930
I00
sS'group_name'
p97931
Nsa(dp97932
S'description'
p97933
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p97934
sS'cpp_type'
p97935
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p97936
sS'default'
p97937
g3
sS'name'
p97938
S'control_tags'
p97939
sS'required'
p97940
I00
sS'group_name'
p97941
Nsa(dp97942
S'name'
p97943
S'execute_on'
p97944
sS'cpp_type'
p97945
S'MultiMooseEnum'
p97946
sS'default'
p97947
S'TIMESTEP_END'
p97948
sS'description'
p97949
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p97950
sS'required'
p97951
I00
sS'options'
p97952
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p97953
sS'group_name'
p97954
Nsa(dp97955
S'description'
p97956
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p97957
sS'cpp_type'
p97958
S'std::vector<OutputName, std::allocator<OutputName> >'
p97959
sS'default'
p97960
g3
sS'name'
p97961
S'outputs'
p97962
sS'required'
p97963
I00
sS'group_name'
p97964
S'Advanced'
p97965
sa(dp97966
S'description'
p97967
S'The seed for the master random number generator\n'
p97968
sS'cpp_type'
p97969
S'unsigned int'
p97970
sS'default'
p97971
S'0'
p97972
sS'name'
p97973
S'seed'
p97974
sS'required'
p97975
I00
sS'group_name'
p97976
S'Advanced'
p97977
sa(dp97978
S'description'
p97979
g3
sS'cpp_type'
p97980
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p97981
sS'default'
p97982
S'ElementExtremeValue'
p97983
sS'name'
p97984
S'type'
p97985
sS'required'
p97986
I00
sS'group_name'
p97987
Nsa(dp97988
S'description'
p97989
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97990
sS'cpp_type'
p97991
S'bool'
p97992
sS'default'
p97993
S'0'
p97994
sS'name'
p97995
S'use_displaced_mesh'
p97996
sS'required'
p97997
I00
sS'group_name'
p97998
S'Advanced'
p97999
sa(dp98000
S'name'
p98001
S'value_type'
p98002
sS'cpp_type'
p98003
S'MooseEnum'
p98004
sS'default'
p98005
S'max'
p98006
sS'description'
p98007
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p98008
sS'required'
p98009
I00
sS'options'
p98010
S'max min'
p98011
sS'group_name'
p98012
Nsa(dp98013
S'description'
p98014
S'The name of the variable that this postprocessor operates on\n'
p98015
sS'cpp_type'
p98016
S'std::vector<VariableName>'
p98017
sS'default'
p98018
g3
sS'name'
p98019
S'variable'
p98020
sS'required'
p98021
I00
sS'group_name'
p98022
NsasS'name'
p98023
S'/Postprocessors/ElementExtremeValue'
p98024
sa(dp98025
S'description'
p98026
g3
sS'subblocks'
p98027
NsS'parameters'
p98028
(lp98029
(dp98030
S'description'
p98031
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98032
sS'cpp_type'
p98033
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98034
sS'default'
p98035
g3
sS'name'
p98036
S'block'
p98037
sS'required'
p98038
I00
sS'group_name'
p98039
Nsa(dp98040
S'description'
p98041
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98042
sS'cpp_type'
p98043
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98044
sS'default'
p98045
g3
sS'name'
p98046
S'control_tags'
p98047
sS'required'
p98048
I00
sS'group_name'
p98049
Nsa(dp98050
S'name'
p98051
S'execute_on'
p98052
sS'cpp_type'
p98053
S'MultiMooseEnum'
p98054
sS'default'
p98055
S'TIMESTEP_END'
p98056
sS'description'
p98057
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98058
sS'required'
p98059
I00
sS'options'
p98060
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98061
sS'group_name'
p98062
Nsa(dp98063
S'description'
p98064
S'The analytic solution to compare against\n'
p98065
sS'cpp_type'
p98066
S'FunctionName'
p98067
sS'default'
p98068
g3
sS'name'
p98069
S'function'
p98070
sS'required'
p98071
I01
sS'group_name'
p98072
Nsa(dp98073
S'description'
p98074
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98075
sS'cpp_type'
p98076
S'std::vector<OutputName, std::allocator<OutputName> >'
p98077
sS'default'
p98078
g3
sS'name'
p98079
S'outputs'
p98080
sS'required'
p98081
I00
sS'group_name'
p98082
S'Advanced'
p98083
sa(dp98084
S'description'
p98085
S'The exponent used in the norm.\n'
p98086
sS'cpp_type'
p98087
S'double'
p98088
sS'default'
p98089
S'2'
p98090
sS'name'
p98091
S'p'
p98092
sS'required'
p98093
I00
sS'group_name'
p98094
Nsa(dp98095
S'description'
p98096
S'The seed for the master random number generator\n'
p98097
sS'cpp_type'
p98098
S'unsigned int'
p98099
sS'default'
p98100
S'0'
p98101
sS'name'
p98102
S'seed'
p98103
sS'required'
p98104
I00
sS'group_name'
p98105
S'Advanced'
p98106
sa(dp98107
S'description'
p98108
g3
sS'cpp_type'
p98109
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98110
sS'default'
p98111
S'ElementH1Error'
p98112
sS'name'
p98113
S'type'
p98114
sS'required'
p98115
I00
sS'group_name'
p98116
Nsa(dp98117
S'description'
p98118
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98119
sS'cpp_type'
p98120
S'bool'
p98121
sS'default'
p98122
S'0'
p98123
sS'name'
p98124
S'use_displaced_mesh'
p98125
sS'required'
p98126
I00
sS'group_name'
p98127
S'Advanced'
p98128
sa(dp98129
S'description'
p98130
S'The name of the variable that this object operates on\n'
p98131
sS'cpp_type'
p98132
S'std::vector<VariableName>'
p98133
sS'default'
p98134
g3
sS'name'
p98135
S'variable'
p98136
sS'required'
p98137
I00
sS'group_name'
p98138
NsasS'name'
p98139
S'/Postprocessors/ElementH1Error'
p98140
sa(dp98141
S'description'
p98142
g3
sS'subblocks'
p98143
NsS'parameters'
p98144
(lp98145
(dp98146
S'description'
p98147
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98148
sS'cpp_type'
p98149
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98150
sS'default'
p98151
g3
sS'name'
p98152
S'block'
p98153
sS'required'
p98154
I00
sS'group_name'
p98155
Nsa(dp98156
S'description'
p98157
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98158
sS'cpp_type'
p98159
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98160
sS'default'
p98161
g3
sS'name'
p98162
S'control_tags'
p98163
sS'required'
p98164
I00
sS'group_name'
p98165
Nsa(dp98166
S'name'
p98167
S'execute_on'
p98168
sS'cpp_type'
p98169
S'MultiMooseEnum'
p98170
sS'default'
p98171
S'TIMESTEP_END'
p98172
sS'description'
p98173
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98174
sS'required'
p98175
I00
sS'options'
p98176
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98177
sS'group_name'
p98178
Nsa(dp98179
S'description'
p98180
S'The analytic solution to compare against\n'
p98181
sS'cpp_type'
p98182
S'FunctionName'
p98183
sS'default'
p98184
g3
sS'name'
p98185
S'function'
p98186
sS'required'
p98187
I01
sS'group_name'
p98188
Nsa(dp98189
S'description'
p98190
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98191
sS'cpp_type'
p98192
S'std::vector<OutputName, std::allocator<OutputName> >'
p98193
sS'default'
p98194
g3
sS'name'
p98195
S'outputs'
p98196
sS'required'
p98197
I00
sS'group_name'
p98198
S'Advanced'
p98199
sa(dp98200
S'description'
p98201
S'The seed for the master random number generator\n'
p98202
sS'cpp_type'
p98203
S'unsigned int'
p98204
sS'default'
p98205
S'0'
p98206
sS'name'
p98207
S'seed'
p98208
sS'required'
p98209
I00
sS'group_name'
p98210
S'Advanced'
p98211
sa(dp98212
S'description'
p98213
g3
sS'cpp_type'
p98214
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98215
sS'default'
p98216
S'ElementH1SemiError'
p98217
sS'name'
p98218
S'type'
p98219
sS'required'
p98220
I00
sS'group_name'
p98221
Nsa(dp98222
S'description'
p98223
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98224
sS'cpp_type'
p98225
S'bool'
p98226
sS'default'
p98227
S'0'
p98228
sS'name'
p98229
S'use_displaced_mesh'
p98230
sS'required'
p98231
I00
sS'group_name'
p98232
S'Advanced'
p98233
sa(dp98234
S'description'
p98235
S'The name of the variable that this object operates on\n'
p98236
sS'cpp_type'
p98237
S'std::vector<VariableName>'
p98238
sS'default'
p98239
g3
sS'name'
p98240
S'variable'
p98241
sS'required'
p98242
I00
sS'group_name'
p98243
NsasS'name'
p98244
S'/Postprocessors/ElementH1SemiError'
p98245
sa(dp98246
S'description'
p98247
g3
sS'subblocks'
p98248
NsS'parameters'
p98249
(lp98250
(dp98251
S'description'
p98252
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98253
sS'cpp_type'
p98254
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98255
sS'default'
p98256
g3
sS'name'
p98257
S'block'
p98258
sS'required'
p98259
I00
sS'group_name'
p98260
Nsa(dp98261
S'description'
p98262
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98263
sS'cpp_type'
p98264
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98265
sS'default'
p98266
g3
sS'name'
p98267
S'control_tags'
p98268
sS'required'
p98269
I00
sS'group_name'
p98270
Nsa(dp98271
S'name'
p98272
S'execute_on'
p98273
sS'cpp_type'
p98274
S'MultiMooseEnum'
p98275
sS'default'
p98276
S'TIMESTEP_END'
p98277
sS'description'
p98278
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98279
sS'required'
p98280
I00
sS'options'
p98281
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98282
sS'group_name'
p98283
Nsa(dp98284
S'description'
p98285
S'The name of the material property\n'
p98286
sS'cpp_type'
p98287
S'MaterialPropertyName'
p98288
sS'default'
p98289
g3
sS'name'
p98290
S'mat_prop'
p98291
sS'required'
p98292
I01
sS'group_name'
p98293
Nsa(dp98294
S'description'
p98295
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98296
sS'cpp_type'
p98297
S'std::vector<OutputName, std::allocator<OutputName> >'
p98298
sS'default'
p98299
g3
sS'name'
p98300
S'outputs'
p98301
sS'required'
p98302
I00
sS'group_name'
p98303
S'Advanced'
p98304
sa(dp98305
S'description'
p98306
S'The seed for the master random number generator\n'
p98307
sS'cpp_type'
p98308
S'unsigned int'
p98309
sS'default'
p98310
S'0'
p98311
sS'name'
p98312
S'seed'
p98313
sS'required'
p98314
I00
sS'group_name'
p98315
S'Advanced'
p98316
sa(dp98317
S'description'
p98318
g3
sS'cpp_type'
p98319
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98320
sS'default'
p98321
S'ElementIntegralMaterialProperty'
p98322
sS'name'
p98323
S'type'
p98324
sS'required'
p98325
I00
sS'group_name'
p98326
Nsa(dp98327
S'description'
p98328
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98329
sS'cpp_type'
p98330
S'bool'
p98331
sS'default'
p98332
S'0'
p98333
sS'name'
p98334
S'use_displaced_mesh'
p98335
sS'required'
p98336
I00
sS'group_name'
p98337
S'Advanced'
p98338
sasS'name'
p98339
S'/Postprocessors/ElementIntegralMaterialProperty'
p98340
sa(dp98341
S'description'
p98342
g3
sS'subblocks'
p98343
NsS'parameters'
p98344
(lp98345
(dp98346
S'description'
p98347
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98348
sS'cpp_type'
p98349
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98350
sS'default'
p98351
g3
sS'name'
p98352
S'block'
p98353
sS'required'
p98354
I00
sS'group_name'
p98355
Nsa(dp98356
S'description'
p98357
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98358
sS'cpp_type'
p98359
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98360
sS'default'
p98361
g3
sS'name'
p98362
S'control_tags'
p98363
sS'required'
p98364
I00
sS'group_name'
p98365
Nsa(dp98366
S'name'
p98367
S'execute_on'
p98368
sS'cpp_type'
p98369
S'MultiMooseEnum'
p98370
sS'default'
p98371
S'TIMESTEP_END'
p98372
sS'description'
p98373
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98374
sS'required'
p98375
I00
sS'options'
p98376
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98377
sS'group_name'
p98378
Nsa(dp98379
S'description'
p98380
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98381
sS'cpp_type'
p98382
S'std::vector<OutputName, std::allocator<OutputName> >'
p98383
sS'default'
p98384
g3
sS'name'
p98385
S'outputs'
p98386
sS'required'
p98387
I00
sS'group_name'
p98388
S'Advanced'
p98389
sa(dp98390
S'description'
p98391
S'The seed for the master random number generator\n'
p98392
sS'cpp_type'
p98393
S'unsigned int'
p98394
sS'default'
p98395
S'0'
p98396
sS'name'
p98397
S'seed'
p98398
sS'required'
p98399
I00
sS'group_name'
p98400
S'Advanced'
p98401
sa(dp98402
S'description'
p98403
g3
sS'cpp_type'
p98404
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98405
sS'default'
p98406
S'ElementIntegralVariablePostprocessor'
p98407
sS'name'
p98408
S'type'
p98409
sS'required'
p98410
I00
sS'group_name'
p98411
Nsa(dp98412
S'description'
p98413
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98414
sS'cpp_type'
p98415
S'bool'
p98416
sS'default'
p98417
S'0'
p98418
sS'name'
p98419
S'use_displaced_mesh'
p98420
sS'required'
p98421
I00
sS'group_name'
p98422
S'Advanced'
p98423
sa(dp98424
S'description'
p98425
S'The name of the variable that this object operates on\n'
p98426
sS'cpp_type'
p98427
S'std::vector<VariableName>'
p98428
sS'default'
p98429
g3
sS'name'
p98430
S'variable'
p98431
sS'required'
p98432
I00
sS'group_name'
p98433
NsasS'name'
p98434
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p98435
sa(dp98436
S'description'
p98437
g3
sS'subblocks'
p98438
NsS'parameters'
p98439
(lp98440
(dp98441
S'description'
p98442
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98443
sS'cpp_type'
p98444
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98445
sS'default'
p98446
g3
sS'name'
p98447
S'block'
p98448
sS'required'
p98449
I00
sS'group_name'
p98450
Nsa(dp98451
S'description'
p98452
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98453
sS'cpp_type'
p98454
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98455
sS'default'
p98456
g3
sS'name'
p98457
S'control_tags'
p98458
sS'required'
p98459
I00
sS'group_name'
p98460
Nsa(dp98461
S'name'
p98462
S'execute_on'
p98463
sS'cpp_type'
p98464
S'MultiMooseEnum'
p98465
sS'default'
p98466
S'TIMESTEP_END'
p98467
sS'description'
p98468
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98469
sS'required'
p98470
I00
sS'options'
p98471
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98472
sS'group_name'
p98473
Nsa(dp98474
S'description'
p98475
S'The variable to compare to\n'
p98476
sS'cpp_type'
p98477
S'std::vector<VariableName>'
p98478
sS'default'
p98479
g3
sS'name'
p98480
S'other_variable'
p98481
sS'required'
p98482
I01
sS'group_name'
p98483
Nsa(dp98484
S'description'
p98485
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98486
sS'cpp_type'
p98487
S'std::vector<OutputName, std::allocator<OutputName> >'
p98488
sS'default'
p98489
g3
sS'name'
p98490
S'outputs'
p98491
sS'required'
p98492
I00
sS'group_name'
p98493
S'Advanced'
p98494
sa(dp98495
S'description'
p98496
S'The seed for the master random number generator\n'
p98497
sS'cpp_type'
p98498
S'unsigned int'
p98499
sS'default'
p98500
S'0'
p98501
sS'name'
p98502
S'seed'
p98503
sS'required'
p98504
I00
sS'group_name'
p98505
S'Advanced'
p98506
sa(dp98507
S'description'
p98508
g3
sS'cpp_type'
p98509
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98510
sS'default'
p98511
S'ElementL2Difference'
p98512
sS'name'
p98513
S'type'
p98514
sS'required'
p98515
I00
sS'group_name'
p98516
Nsa(dp98517
S'description'
p98518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98519
sS'cpp_type'
p98520
S'bool'
p98521
sS'default'
p98522
S'0'
p98523
sS'name'
p98524
S'use_displaced_mesh'
p98525
sS'required'
p98526
I00
sS'group_name'
p98527
S'Advanced'
p98528
sa(dp98529
S'description'
p98530
S'The name of the variable that this object operates on\n'
p98531
sS'cpp_type'
p98532
S'std::vector<VariableName>'
p98533
sS'default'
p98534
g3
sS'name'
p98535
S'variable'
p98536
sS'required'
p98537
I00
sS'group_name'
p98538
NsasS'name'
p98539
S'/Postprocessors/ElementL2Difference'
p98540
sa(dp98541
S'description'
p98542
g3
sS'subblocks'
p98543
NsS'parameters'
p98544
(lp98545
(dp98546
S'description'
p98547
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98548
sS'cpp_type'
p98549
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98550
sS'default'
p98551
g3
sS'name'
p98552
S'block'
p98553
sS'required'
p98554
I00
sS'group_name'
p98555
Nsa(dp98556
S'description'
p98557
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98558
sS'cpp_type'
p98559
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98560
sS'default'
p98561
g3
sS'name'
p98562
S'control_tags'
p98563
sS'required'
p98564
I00
sS'group_name'
p98565
Nsa(dp98566
S'name'
p98567
S'execute_on'
p98568
sS'cpp_type'
p98569
S'MultiMooseEnum'
p98570
sS'default'
p98571
S'TIMESTEP_END'
p98572
sS'description'
p98573
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98574
sS'required'
p98575
I00
sS'options'
p98576
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98577
sS'group_name'
p98578
Nsa(dp98579
S'description'
p98580
S'The analytic solution to compare against\n'
p98581
sS'cpp_type'
p98582
S'FunctionName'
p98583
sS'default'
p98584
g3
sS'name'
p98585
S'function'
p98586
sS'required'
p98587
I01
sS'group_name'
p98588
Nsa(dp98589
S'description'
p98590
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98591
sS'cpp_type'
p98592
S'std::vector<OutputName, std::allocator<OutputName> >'
p98593
sS'default'
p98594
g3
sS'name'
p98595
S'outputs'
p98596
sS'required'
p98597
I00
sS'group_name'
p98598
S'Advanced'
p98599
sa(dp98600
S'description'
p98601
S'The seed for the master random number generator\n'
p98602
sS'cpp_type'
p98603
S'unsigned int'
p98604
sS'default'
p98605
S'0'
p98606
sS'name'
p98607
S'seed'
p98608
sS'required'
p98609
I00
sS'group_name'
p98610
S'Advanced'
p98611
sa(dp98612
S'description'
p98613
g3
sS'cpp_type'
p98614
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98615
sS'default'
p98616
S'ElementL2Error'
p98617
sS'name'
p98618
S'type'
p98619
sS'required'
p98620
I00
sS'group_name'
p98621
Nsa(dp98622
S'description'
p98623
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98624
sS'cpp_type'
p98625
S'bool'
p98626
sS'default'
p98627
S'0'
p98628
sS'name'
p98629
S'use_displaced_mesh'
p98630
sS'required'
p98631
I00
sS'group_name'
p98632
S'Advanced'
p98633
sa(dp98634
S'description'
p98635
S'The name of the variable that this object operates on\n'
p98636
sS'cpp_type'
p98637
S'std::vector<VariableName>'
p98638
sS'default'
p98639
g3
sS'name'
p98640
S'variable'
p98641
sS'required'
p98642
I00
sS'group_name'
p98643
NsasS'name'
p98644
S'/Postprocessors/ElementL2Error'
p98645
sa(dp98646
S'description'
p98647
g3
sS'subblocks'
p98648
NsS'parameters'
p98649
(lp98650
(dp98651
S'description'
p98652
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98653
sS'cpp_type'
p98654
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98655
sS'default'
p98656
g3
sS'name'
p98657
S'block'
p98658
sS'required'
p98659
I00
sS'group_name'
p98660
Nsa(dp98661
S'description'
p98662
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98663
sS'cpp_type'
p98664
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98665
sS'default'
p98666
g3
sS'name'
p98667
S'control_tags'
p98668
sS'required'
p98669
I00
sS'group_name'
p98670
Nsa(dp98671
S'name'
p98672
S'execute_on'
p98673
sS'cpp_type'
p98674
S'MultiMooseEnum'
p98675
sS'default'
p98676
S'TIMESTEP_END'
p98677
sS'description'
p98678
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98679
sS'required'
p98680
I00
sS'options'
p98681
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98682
sS'group_name'
p98683
Nsa(dp98684
S'description'
p98685
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98686
sS'cpp_type'
p98687
S'std::vector<OutputName, std::allocator<OutputName> >'
p98688
sS'default'
p98689
g3
sS'name'
p98690
S'outputs'
p98691
sS'required'
p98692
I00
sS'group_name'
p98693
S'Advanced'
p98694
sa(dp98695
S'description'
p98696
S'The seed for the master random number generator\n'
p98697
sS'cpp_type'
p98698
S'unsigned int'
p98699
sS'default'
p98700
S'0'
p98701
sS'name'
p98702
S'seed'
p98703
sS'required'
p98704
I00
sS'group_name'
p98705
S'Advanced'
p98706
sa(dp98707
S'description'
p98708
g3
sS'cpp_type'
p98709
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98710
sS'default'
p98711
S'ElementL2Norm'
p98712
sS'name'
p98713
S'type'
p98714
sS'required'
p98715
I00
sS'group_name'
p98716
Nsa(dp98717
S'description'
p98718
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98719
sS'cpp_type'
p98720
S'bool'
p98721
sS'default'
p98722
S'0'
p98723
sS'name'
p98724
S'use_displaced_mesh'
p98725
sS'required'
p98726
I00
sS'group_name'
p98727
S'Advanced'
p98728
sa(dp98729
S'description'
p98730
S'The name of the variable that this object operates on\n'
p98731
sS'cpp_type'
p98732
S'std::vector<VariableName>'
p98733
sS'default'
p98734
g3
sS'name'
p98735
S'variable'
p98736
sS'required'
p98737
I00
sS'group_name'
p98738
NsasS'name'
p98739
S'/Postprocessors/ElementL2Norm'
p98740
sa(dp98741
S'description'
p98742
g3
sS'subblocks'
p98743
NsS'parameters'
p98744
(lp98745
(dp98746
S'description'
p98747
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98748
sS'cpp_type'
p98749
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98750
sS'default'
p98751
g3
sS'name'
p98752
S'block'
p98753
sS'required'
p98754
I00
sS'group_name'
p98755
Nsa(dp98756
S'description'
p98757
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98758
sS'cpp_type'
p98759
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98760
sS'default'
p98761
g3
sS'name'
p98762
S'control_tags'
p98763
sS'required'
p98764
I00
sS'group_name'
p98765
Nsa(dp98766
S'name'
p98767
S'execute_on'
p98768
sS'cpp_type'
p98769
S'MultiMooseEnum'
p98770
sS'default'
p98771
S'TIMESTEP_END'
p98772
sS'description'
p98773
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98774
sS'required'
p98775
I00
sS'options'
p98776
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98777
sS'group_name'
p98778
Nsa(dp98779
S'description'
p98780
S'The analytic solution to compare against\n'
p98781
sS'cpp_type'
p98782
S'FunctionName'
p98783
sS'default'
p98784
g3
sS'name'
p98785
S'function_x'
p98786
sS'required'
p98787
I01
sS'group_name'
p98788
Nsa(dp98789
S'description'
p98790
S'The analytic solution to compare against\n'
p98791
sS'cpp_type'
p98792
S'FunctionName'
p98793
sS'default'
p98794
S'0'
p98795
sS'name'
p98796
S'function_y'
p98797
sS'required'
p98798
I00
sS'group_name'
p98799
Nsa(dp98800
S'description'
p98801
S'The analytic solution to compare against\n'
p98802
sS'cpp_type'
p98803
S'FunctionName'
p98804
sS'default'
p98805
S'0'
p98806
sS'name'
p98807
S'function_z'
p98808
sS'required'
p98809
I00
sS'group_name'
p98810
Nsa(dp98811
S'description'
p98812
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98813
sS'cpp_type'
p98814
S'std::vector<OutputName, std::allocator<OutputName> >'
p98815
sS'default'
p98816
g3
sS'name'
p98817
S'outputs'
p98818
sS'required'
p98819
I00
sS'group_name'
p98820
S'Advanced'
p98821
sa(dp98822
S'description'
p98823
S'The seed for the master random number generator\n'
p98824
sS'cpp_type'
p98825
S'unsigned int'
p98826
sS'default'
p98827
S'0'
p98828
sS'name'
p98829
S'seed'
p98830
sS'required'
p98831
I00
sS'group_name'
p98832
S'Advanced'
p98833
sa(dp98834
S'description'
p98835
g3
sS'cpp_type'
p98836
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98837
sS'default'
p98838
S'ElementVectorL2Error'
p98839
sS'name'
p98840
S'type'
p98841
sS'required'
p98842
I00
sS'group_name'
p98843
Nsa(dp98844
S'description'
p98845
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98846
sS'cpp_type'
p98847
S'bool'
p98848
sS'default'
p98849
S'0'
p98850
sS'name'
p98851
S'use_displaced_mesh'
p98852
sS'required'
p98853
I00
sS'group_name'
p98854
S'Advanced'
p98855
sa(dp98856
S'description'
p98857
S'The FE solution in x direction\n'
p98858
sS'cpp_type'
p98859
S'std::vector<VariableName>'
p98860
sS'default'
p98861
g3
sS'name'
p98862
S'var_x'
p98863
sS'required'
p98864
I01
sS'group_name'
p98865
Nsa(dp98866
S'description'
p98867
S'The FE solution in y direction\n'
p98868
sS'cpp_type'
p98869
S'std::vector<VariableName>'
p98870
sS'default'
p98871
S'0'
p98872
sS'name'
p98873
S'var_y'
p98874
sS'required'
p98875
I00
sS'group_name'
p98876
Nsa(dp98877
S'description'
p98878
S'The FE solution in z direction\n'
p98879
sS'cpp_type'
p98880
S'std::vector<VariableName>'
p98881
sS'default'
p98882
S'0'
p98883
sS'name'
p98884
S'var_z'
p98885
sS'required'
p98886
I00
sS'group_name'
p98887
NsasS'name'
p98888
S'/Postprocessors/ElementVectorL2Error'
p98889
sa(dp98890
S'description'
p98891
g3
sS'subblocks'
p98892
NsS'parameters'
p98893
(lp98894
(dp98895
S'description'
p98896
S'The list of block ids (SubdomainID) that this object will be applied\n'
p98897
sS'cpp_type'
p98898
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p98899
sS'default'
p98900
g3
sS'name'
p98901
S'block'
p98902
sS'required'
p98903
I00
sS'group_name'
p98904
Nsa(dp98905
S'description'
p98906
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p98907
sS'cpp_type'
p98908
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p98909
sS'default'
p98910
g3
sS'name'
p98911
S'control_tags'
p98912
sS'required'
p98913
I00
sS'group_name'
p98914
Nsa(dp98915
S'name'
p98916
S'execute_on'
p98917
sS'cpp_type'
p98918
S'MultiMooseEnum'
p98919
sS'default'
p98920
S'TIMESTEP_END'
p98921
sS'description'
p98922
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p98923
sS'required'
p98924
I00
sS'options'
p98925
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p98926
sS'group_name'
p98927
Nsa(dp98928
S'description'
p98929
S'The analytic solution to compare against\n'
p98930
sS'cpp_type'
p98931
S'FunctionName'
p98932
sS'default'
p98933
g3
sS'name'
p98934
S'function'
p98935
sS'required'
p98936
I01
sS'group_name'
p98937
Nsa(dp98938
S'description'
p98939
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p98940
sS'cpp_type'
p98941
S'std::vector<OutputName, std::allocator<OutputName> >'
p98942
sS'default'
p98943
g3
sS'name'
p98944
S'outputs'
p98945
sS'required'
p98946
I00
sS'group_name'
p98947
S'Advanced'
p98948
sa(dp98949
S'description'
p98950
S'The exponent used in the norm.\n'
p98951
sS'cpp_type'
p98952
S'double'
p98953
sS'default'
p98954
S'2'
p98955
sS'name'
p98956
S'p'
p98957
sS'required'
p98958
I00
sS'group_name'
p98959
Nsa(dp98960
S'description'
p98961
S'The seed for the master random number generator\n'
p98962
sS'cpp_type'
p98963
S'unsigned int'
p98964
sS'default'
p98965
S'0'
p98966
sS'name'
p98967
S'seed'
p98968
sS'required'
p98969
I00
sS'group_name'
p98970
S'Advanced'
p98971
sa(dp98972
S'description'
p98973
g3
sS'cpp_type'
p98974
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p98975
sS'default'
p98976
S'ElementW1pError'
p98977
sS'name'
p98978
S'type'
p98979
sS'required'
p98980
I00
sS'group_name'
p98981
Nsa(dp98982
S'description'
p98983
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p98984
sS'cpp_type'
p98985
S'bool'
p98986
sS'default'
p98987
S'0'
p98988
sS'name'
p98989
S'use_displaced_mesh'
p98990
sS'required'
p98991
I00
sS'group_name'
p98992
S'Advanced'
p98993
sa(dp98994
S'description'
p98995
S'The name of the variable that this object operates on\n'
p98996
sS'cpp_type'
p98997
S'std::vector<VariableName>'
p98998
sS'default'
p98999
g3
sS'name'
p99000
S'variable'
p99001
sS'required'
p99002
I00
sS'group_name'
p99003
NsasS'name'
p99004
S'/Postprocessors/ElementW1pError'
p99005
sa(dp99006
S'description'
p99007
g3
sS'subblocks'
p99008
NsS'parameters'
p99009
(lp99010
(dp99011
S'description'
p99012
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99013
sS'cpp_type'
p99014
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99015
sS'default'
p99016
g3
sS'name'
p99017
S'control_tags'
p99018
sS'required'
p99019
I00
sS'group_name'
p99020
Nsa(dp99021
S'description'
p99022
S'The ID of the element where we monitor\n'
p99023
sS'cpp_type'
p99024
S'unsigned int'
p99025
sS'default'
p99026
g3
sS'name'
p99027
S'elementid'
p99028
sS'required'
p99029
I01
sS'group_name'
p99030
Nsa(dp99031
S'name'
p99032
S'execute_on'
p99033
sS'cpp_type'
p99034
S'MultiMooseEnum'
p99035
sS'default'
p99036
S'TIMESTEP_END'
p99037
sS'description'
p99038
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99039
sS'required'
p99040
I00
sS'options'
p99041
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p99042
sS'group_name'
p99043
Nsa(dp99044
S'description'
p99045
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99046
sS'cpp_type'
p99047
S'std::vector<OutputName, std::allocator<OutputName> >'
p99048
sS'default'
p99049
g3
sS'name'
p99050
S'outputs'
p99051
sS'required'
p99052
I00
sS'group_name'
p99053
S'Advanced'
p99054
sa(dp99055
S'description'
p99056
g3
sS'cpp_type'
p99057
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99058
sS'default'
p99059
S'ElementalVariableValue'
p99060
sS'name'
p99061
S'type'
p99062
sS'required'
p99063
I00
sS'group_name'
p99064
Nsa(dp99065
S'description'
p99066
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99067
sS'cpp_type'
p99068
S'bool'
p99069
sS'default'
p99070
S'0'
p99071
sS'name'
p99072
S'use_displaced_mesh'
p99073
sS'required'
p99074
I00
sS'group_name'
p99075
S'Advanced'
p99076
sa(dp99077
S'description'
p99078
S'The variable to be monitored\n'
p99079
sS'cpp_type'
p99080
S'VariableName'
p99081
sS'default'
p99082
g3
sS'name'
p99083
S'variable'
p99084
sS'required'
p99085
I01
sS'group_name'
p99086
NsasS'name'
p99087
S'/Postprocessors/ElementalVariableValue'
p99088
sa(dp99089
S'description'
p99090
g3
sS'subblocks'
p99091
NsS'parameters'
p99092
(lp99093
(dp99094
S'description'
p99095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99096
sS'cpp_type'
p99097
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99098
sS'default'
p99099
g3
sS'name'
p99100
S'control_tags'
p99101
sS'required'
p99102
I00
sS'group_name'
p99103
Nsa(dp99104
S'name'
p99105
S'execute_on'
p99106
sS'cpp_type'
p99107
S'MultiMooseEnum'
p99108
sS'default'
p99109
S'TIMESTEP_END'
p99110
sS'description'
p99111
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99112
sS'required'
p99113
I00
sS'options'
p99114
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p99115
sS'group_name'
p99116
Nsa(dp99117
S'description'
p99118
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99119
sS'cpp_type'
p99120
S'std::vector<OutputName, std::allocator<OutputName> >'
p99121
sS'default'
p99122
g3
sS'name'
p99123
S'outputs'
p99124
sS'required'
p99125
I00
sS'group_name'
p99126
S'Advanced'
p99127
sa(dp99128
S'description'
p99129
g3
sS'cpp_type'
p99130
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99131
sS'default'
p99132
S'EmptyPostprocessor'
p99133
sS'name'
p99134
S'type'
p99135
sS'required'
p99136
I00
sS'group_name'
p99137
Nsa(dp99138
S'description'
p99139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99140
sS'cpp_type'
p99141
S'bool'
p99142
sS'default'
p99143
S'0'
p99144
sS'name'
p99145
S'use_displaced_mesh'
p99146
sS'required'
p99147
I00
sS'group_name'
p99148
S'Advanced'
p99149
sasS'name'
p99150
S'/Postprocessors/EmptyPostprocessor'
p99151
sa(dp99152
S'description'
p99153
g3
sS'subblocks'
p99154
NsS'parameters'
p99155
(lp99156
(dp99157
S'description'
p99158
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99159
sS'cpp_type'
p99160
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99161
sS'default'
p99162
g3
sS'name'
p99163
S'control_tags'
p99164
sS'required'
p99165
I00
sS'group_name'
p99166
Nsa(dp99167
S'name'
p99168
S'execute_on'
p99169
sS'cpp_type'
p99170
S'MultiMooseEnum'
p99171
sS'default'
p99172
S'TIMESTEP_END'
p99173
sS'description'
p99174
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99175
sS'required'
p99176
I00
sS'options'
p99177
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p99178
sS'group_name'
p99179
Nsa(dp99180
S'description'
p99181
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99182
sS'cpp_type'
p99183
S'std::vector<OutputName, std::allocator<OutputName> >'
p99184
sS'default'
p99185
g3
sS'name'
p99186
S'outputs'
p99187
sS'required'
p99188
I00
sS'group_name'
p99189
S'Advanced'
p99190
sa(dp99191
S'description'
p99192
g3
sS'cpp_type'
p99193
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99194
sS'default'
p99195
S'ExecutionerAttributeReporter'
p99196
sS'name'
p99197
S'type'
p99198
sS'required'
p99199
I00
sS'group_name'
p99200
Nsa(dp99201
S'description'
p99202
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99203
sS'cpp_type'
p99204
S'bool'
p99205
sS'default'
p99206
S'0'
p99207
sS'name'
p99208
S'use_displaced_mesh'
p99209
sS'required'
p99210
I00
sS'group_name'
p99211
S'Advanced'
p99212
sasS'name'
p99213
S'/Postprocessors/ExecutionerAttributeReporter'
p99214
sa(dp99215
S'description'
p99216
S'Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n'
p99217
sS'subblocks'
p99218
NsS'parameters'
p99219
(lp99220
(dp99221
S'description'
p99222
S'An optional file name where bubble volumes can be output.\n'
p99223
sS'cpp_type'
p99224
S'FileName'
p99225
sS'default'
p99226
g3
sS'name'
p99227
S'bubble_volume_file'
p99228
sS'required'
p99229
I00
sS'group_name'
p99230
Nsa(dp99231
S'description'
p99232
S'Indicates whether the grain tracker uses bounding sphere centersor center of mass calculations for tracking grains\n'
p99233
sS'cpp_type'
p99234
S'bool'
p99235
sS'default'
p99236
S'0'
p99237
sS'name'
p99238
S'center_of_mass_tracking'
p99239
sS'required'
p99240
I00
sS'group_name'
p99241
Nsa(dp99242
S'description'
p99243
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p99244
sS'cpp_type'
p99245
S'bool'
p99246
sS'default'
p99247
S'0'
p99248
sS'name'
p99249
S'compute_boundary_intersecting_volume'
p99250
sS'required'
p99251
I00
sS'group_name'
p99252
Nsa(dp99253
S'description'
p99254
S'Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n'
p99255
sS'cpp_type'
p99256
S'bool'
p99257
sS'default'
p99258
S'0'
p99259
sS'name'
p99260
S'compute_op_maps'
p99261
sS'required'
p99262
I00
sS'group_name'
p99263
Nsa(dp99264
S'description'
p99265
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p99266
sS'cpp_type'
p99267
S'bool'
p99268
sS'default'
p99269
S'0'
p99270
sS'name'
p99271
S'condense_map_info'
p99272
sS'required'
p99273
I00
sS'group_name'
p99274
Nsa(dp99275
S'description'
p99276
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p99277
sS'cpp_type'
p99278
S'double'
p99279
sS'default'
p99280
g3
sS'name'
p99281
S'connecting_threshold'
p99282
sS'required'
p99283
I00
sS'group_name'
p99284
Nsa(dp99285
S'description'
p99286
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99287
sS'cpp_type'
p99288
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99289
sS'default'
p99290
g3
sS'name'
p99291
S'control_tags'
p99292
sS'required'
p99293
I00
sS'group_name'
p99294
Nsa(dp99295
S'description'
p99296
S'The buffer around the convex hull used to determinewhen features intersect\n'
p99297
sS'cpp_type'
p99298
S'double'
p99299
sS'default'
p99300
S'1'
p99301
sS'name'
p99302
S'convex_hull_buffer'
p99303
sS'required'
p99304
I00
sS'group_name'
p99305
Nsa(dp99306
S'description'
p99307
S'Optional: EBSD Reader for initial condition\n'
p99308
sS'cpp_type'
p99309
S'UserObjectName'
p99310
sS'default'
p99311
g3
sS'name'
p99312
S'ebsd_reader'
p99313
sS'required'
p99314
I00
sS'group_name'
p99315
Nsa(dp99316
S'description'
p99317
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p99318
sS'cpp_type'
p99319
S'PostprocessorName'
p99320
sS'default'
p99321
g3
sS'name'
p99322
S'elem_avg_value'
p99323
sS'required'
p99324
I00
sS'group_name'
p99325
Nsa(dp99326
S'description'
p99327
S'Instruct the UO to populate the variable index map.\n'
p99328
sS'cpp_type'
p99329
S'bool'
p99330
sS'default'
p99331
S'0'
p99332
sS'name'
p99333
S'enable_var_coloring'
p99334
sS'required'
p99335
I00
sS'group_name'
p99336
Nsa(dp99337
S'name'
p99338
S'execute_on'
p99339
sS'cpp_type'
p99340
S'MultiMooseEnum'
p99341
sS'default'
p99342
S'TIMESTEP_END'
p99343
sS'description'
p99344
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99345
sS'required'
p99346
I00
sS'options'
p99347
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p99348
sS'group_name'
p99349
Nsa(dp99350
S'name'
p99351
S'flood_entity_type'
p99352
sS'cpp_type'
p99353
S'MooseEnum'
p99354
sS'default'
p99355
S'NODAL'
p99356
sS'description'
p99357
S'Determines whether the flood algorithm runs on nodes or elements\n'
p99358
sS'required'
p99359
I00
sS'options'
p99360
S'NODAL ELEMENTAL'
p99361
sS'group_name'
p99362
Nsa(dp99363
S'description'
p99364
S'Array of coupled variables (num_name)\n'
p99365
sS'cpp_type'
p99366
S'unsigned int'
p99367
sS'default'
p99368
g3
sS'name'
p99369
S'op_num'
p99370
sS'required'
p99371
I00
sS'group_name'
p99372
Nsa(dp99373
S'description'
p99374
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99375
sS'cpp_type'
p99376
S'std::vector<OutputName, std::allocator<OutputName> >'
p99377
sS'default'
p99378
g3
sS'name'
p99379
S'outputs'
p99380
sS'required'
p99381
I00
sS'group_name'
p99382
S'Advanced'
p99383
sa(dp99384
S'description'
p99385
S'Indicates whether remapping should be done or not (default: true)\n'
p99386
sS'cpp_type'
p99387
S'bool'
p99388
sS'default'
p99389
S'1'
p99390
sS'name'
p99391
S'remap_grains'
p99392
sS'required'
p99393
I00
sS'group_name'
p99394
Nsa(dp99395
S'description'
p99396
S'The threshold value for which a new bubble may be started\n'
p99397
sS'cpp_type'
p99398
S'double'
p99399
sS'default'
p99400
S'0.5'
p99401
sS'name'
p99402
S'threshold'
p99403
sS'required'
p99404
I00
sS'group_name'
p99405
Nsa(dp99406
S'description'
p99407
S'Calculate memory usage\n'
p99408
sS'cpp_type'
p99409
S'bool'
p99410
sS'default'
p99411
S'0'
p99412
sS'name'
p99413
S'track_memory_usage'
p99414
sS'required'
p99415
I00
sS'group_name'
p99416
Nsa(dp99417
S'description'
p99418
S'The timestep for when we should start tracking grains\n'
p99419
sS'cpp_type'
p99420
S'int'
p99421
sS'default'
p99422
S'0'
p99423
sS'name'
p99424
S'tracking_step'
p99425
sS'required'
p99426
I00
sS'group_name'
p99427
Nsa(dp99428
S'description'
p99429
g3
sS'cpp_type'
p99430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99431
sS'default'
p99432
S'FauxGrainTracker'
p99433
sS'name'
p99434
S'type'
p99435
sS'required'
p99436
I00
sS'group_name'
p99437
Nsa(dp99438
S'description'
p99439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99440
sS'cpp_type'
p99441
S'bool'
p99442
sS'default'
p99443
S'0'
p99444
sS'name'
p99445
S'use_displaced_mesh'
p99446
sS'required'
p99447
I00
sS'group_name'
p99448
S'Advanced'
p99449
sa(dp99450
S'description'
p99451
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p99452
sS'cpp_type'
p99453
S'bool'
p99454
sS'default'
p99455
S'0'
p99456
sS'name'
p99457
S'use_global_numbering'
p99458
sS'required'
p99459
I00
sS'group_name'
p99460
Nsa(dp99461
S'description'
p99462
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p99463
sS'cpp_type'
p99464
S'bool'
p99465
sS'default'
p99466
S'1'
p99467
sS'name'
p99468
S'use_less_than_threshold_comparison'
p99469
sS'required'
p99470
I00
sS'group_name'
p99471
Nsa(dp99472
S'description'
p99473
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p99474
sS'cpp_type'
p99475
S'bool'
p99476
sS'default'
p99477
S'1'
p99478
sS'name'
p99479
S'use_single_map'
p99480
sS'required'
p99481
I00
sS'group_name'
p99482
Nsa(dp99483
S'description'
p99484
S'Array of coupled variables (base_name)\n'
p99485
sS'cpp_type'
p99486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99487
sS'default'
p99488
g3
sS'name'
p99489
S'var_name_base'
p99490
sS'required'
p99491
I00
sS'group_name'
p99492
NsasS'name'
p99493
S'/Postprocessors/FauxGrainTracker'
p99494
sa(dp99495
S'description'
p99496
g3
sS'subblocks'
p99497
NsS'parameters'
p99498
(lp99499
(dp99500
S'description'
p99501
S'An optional file name where bubble volumes can be output.\n'
p99502
sS'cpp_type'
p99503
S'FileName'
p99504
sS'default'
p99505
g3
sS'name'
p99506
S'bubble_volume_file'
p99507
sS'required'
p99508
I00
sS'group_name'
p99509
Nsa(dp99510
S'description'
p99511
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p99512
sS'cpp_type'
p99513
S'bool'
p99514
sS'default'
p99515
S'0'
p99516
sS'name'
p99517
S'compute_boundary_intersecting_volume'
p99518
sS'required'
p99519
I00
sS'group_name'
p99520
Nsa(dp99521
S'description'
p99522
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p99523
sS'cpp_type'
p99524
S'bool'
p99525
sS'default'
p99526
S'0'
p99527
sS'name'
p99528
S'condense_map_info'
p99529
sS'required'
p99530
I00
sS'group_name'
p99531
Nsa(dp99532
S'description'
p99533
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p99534
sS'cpp_type'
p99535
S'double'
p99536
sS'default'
p99537
g3
sS'name'
p99538
S'connecting_threshold'
p99539
sS'required'
p99540
I00
sS'group_name'
p99541
Nsa(dp99542
S'description'
p99543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99544
sS'cpp_type'
p99545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99546
sS'default'
p99547
g3
sS'name'
p99548
S'control_tags'
p99549
sS'required'
p99550
I00
sS'group_name'
p99551
Nsa(dp99552
S'description'
p99553
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p99554
sS'cpp_type'
p99555
S'PostprocessorName'
p99556
sS'default'
p99557
g3
sS'name'
p99558
S'elem_avg_value'
p99559
sS'required'
p99560
I00
sS'group_name'
p99561
Nsa(dp99562
S'description'
p99563
S'Instruct the UO to populate the variable index map.\n'
p99564
sS'cpp_type'
p99565
S'bool'
p99566
sS'default'
p99567
S'0'
p99568
sS'name'
p99569
S'enable_var_coloring'
p99570
sS'required'
p99571
I00
sS'group_name'
p99572
Nsa(dp99573
S'name'
p99574
S'execute_on'
p99575
sS'cpp_type'
p99576
S'MultiMooseEnum'
p99577
sS'default'
p99578
S'TIMESTEP_END'
p99579
sS'description'
p99580
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99581
sS'required'
p99582
I00
sS'options'
p99583
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p99584
sS'group_name'
p99585
Nsa(dp99586
S'name'
p99587
S'flood_entity_type'
p99588
sS'cpp_type'
p99589
S'MooseEnum'
p99590
sS'default'
p99591
S'NODAL'
p99592
sS'description'
p99593
S'Determines whether the flood algorithm runs on nodes or elements\n'
p99594
sS'required'
p99595
I00
sS'options'
p99596
S'NODAL ELEMENTAL'
p99597
sS'group_name'
p99598
Nsa(dp99599
S'description'
p99600
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99601
sS'cpp_type'
p99602
S'std::vector<OutputName, std::allocator<OutputName> >'
p99603
sS'default'
p99604
g3
sS'name'
p99605
S'outputs'
p99606
sS'required'
p99607
I00
sS'group_name'
p99608
S'Advanced'
p99609
sa(dp99610
S'description'
p99611
S'The threshold value for which a new bubble may be started\n'
p99612
sS'cpp_type'
p99613
S'double'
p99614
sS'default'
p99615
S'0.5'
p99616
sS'name'
p99617
S'threshold'
p99618
sS'required'
p99619
I00
sS'group_name'
p99620
Nsa(dp99621
S'description'
p99622
S'Calculate memory usage\n'
p99623
sS'cpp_type'
p99624
S'bool'
p99625
sS'default'
p99626
S'0'
p99627
sS'name'
p99628
S'track_memory_usage'
p99629
sS'required'
p99630
I00
sS'group_name'
p99631
Nsa(dp99632
S'description'
p99633
g3
sS'cpp_type'
p99634
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99635
sS'default'
p99636
S'FeatureFloodCount'
p99637
sS'name'
p99638
S'type'
p99639
sS'required'
p99640
I00
sS'group_name'
p99641
Nsa(dp99642
S'description'
p99643
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99644
sS'cpp_type'
p99645
S'bool'
p99646
sS'default'
p99647
S'0'
p99648
sS'name'
p99649
S'use_displaced_mesh'
p99650
sS'required'
p99651
I00
sS'group_name'
p99652
S'Advanced'
p99653
sa(dp99654
S'description'
p99655
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p99656
sS'cpp_type'
p99657
S'bool'
p99658
sS'default'
p99659
S'0'
p99660
sS'name'
p99661
S'use_global_numbering'
p99662
sS'required'
p99663
I00
sS'group_name'
p99664
Nsa(dp99665
S'description'
p99666
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p99667
sS'cpp_type'
p99668
S'bool'
p99669
sS'default'
p99670
S'1'
p99671
sS'name'
p99672
S'use_less_than_threshold_comparison'
p99673
sS'required'
p99674
I00
sS'group_name'
p99675
Nsa(dp99676
S'description'
p99677
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p99678
sS'cpp_type'
p99679
S'bool'
p99680
sS'default'
p99681
S'1'
p99682
sS'name'
p99683
S'use_single_map'
p99684
sS'required'
p99685
I00
sS'group_name'
p99686
Nsa(dp99687
S'description'
p99688
S'The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p99689
sS'cpp_type'
p99690
S'std::vector<VariableName>'
p99691
sS'default'
p99692
g3
sS'name'
p99693
S'variable'
p99694
sS'required'
p99695
I01
sS'group_name'
p99696
NsasS'name'
p99697
S'/Postprocessors/FeatureFloodCount'
p99698
sa(dp99699
S'description'
p99700
g3
sS'subblocks'
p99701
NsS'parameters'
p99702
(lp99703
(dp99704
S'description'
p99705
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p99706
sS'cpp_type'
p99707
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p99708
sS'default'
p99709
g3
sS'name'
p99710
S'boundary'
p99711
sS'required'
p99712
I00
sS'group_name'
p99713
Nsa(dp99714
S'description'
p99715
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99716
sS'cpp_type'
p99717
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99718
sS'default'
p99719
g3
sS'name'
p99720
S'control_tags'
p99721
sS'required'
p99722
I00
sS'group_name'
p99723
Nsa(dp99724
S'name'
p99725
S'execute_on'
p99726
sS'cpp_type'
p99727
S'MultiMooseEnum'
p99728
sS'default'
p99729
S'TIMESTEP_END'
p99730
sS'description'
p99731
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99732
sS'required'
p99733
I00
sS'options'
p99734
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p99735
sS'group_name'
p99736
Nsa(dp99737
S'description'
p99738
S'This postprocessor will return the integral of this function over the boundary\n'
p99739
sS'cpp_type'
p99740
S'FunctionName'
p99741
sS'default'
p99742
S'1'
p99743
sS'name'
p99744
S'function'
p99745
sS'required'
p99746
I00
sS'group_name'
p99747
Nsa(dp99748
S'description'
p99749
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99750
sS'cpp_type'
p99751
S'std::vector<OutputName, std::allocator<OutputName> >'
p99752
sS'default'
p99753
g3
sS'name'
p99754
S'outputs'
p99755
sS'required'
p99756
I00
sS'group_name'
p99757
S'Advanced'
p99758
sa(dp99759
S'description'
p99760
g3
sS'cpp_type'
p99761
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99762
sS'default'
p99763
S'FunctionSideIntegral'
p99764
sS'name'
p99765
S'type'
p99766
sS'required'
p99767
I00
sS'group_name'
p99768
Nsa(dp99769
S'description'
p99770
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99771
sS'cpp_type'
p99772
S'bool'
p99773
sS'default'
p99774
S'0'
p99775
sS'name'
p99776
S'use_displaced_mesh'
p99777
sS'required'
p99778
I00
sS'group_name'
p99779
S'Advanced'
p99780
sasS'name'
p99781
S'/Postprocessors/FunctionSideIntegral'
p99782
sa(dp99783
S'description'
p99784
g3
sS'subblocks'
p99785
NsS'parameters'
p99786
(lp99787
(dp99788
S'description'
p99789
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99790
sS'cpp_type'
p99791
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99792
sS'default'
p99793
g3
sS'name'
p99794
S'control_tags'
p99795
sS'required'
p99796
I00
sS'group_name'
p99797
Nsa(dp99798
S'name'
p99799
S'execute_on'
p99800
sS'cpp_type'
p99801
S'MultiMooseEnum'
p99802
sS'default'
p99803
S'TIMESTEP_END'
p99804
sS'description'
p99805
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p99806
sS'required'
p99807
I00
sS'options'
p99808
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p99809
sS'group_name'
p99810
Nsa(dp99811
S'description'
p99812
S'The function which supplies the postprocessor value.\n'
p99813
sS'cpp_type'
p99814
S'FunctionName'
p99815
sS'default'
p99816
g3
sS'name'
p99817
S'function'
p99818
sS'required'
p99819
I01
sS'group_name'
p99820
Nsa(dp99821
S'description'
p99822
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p99823
sS'cpp_type'
p99824
S'std::vector<OutputName, std::allocator<OutputName> >'
p99825
sS'default'
p99826
g3
sS'name'
p99827
S'outputs'
p99828
sS'required'
p99829
I00
sS'group_name'
p99830
S'Advanced'
p99831
sa(dp99832
S'description'
p99833
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p99834
sS'cpp_type'
p99835
S'libMesh::Point'
p99836
sS'default'
p99837
S'0 0 0'
p99838
sS'name'
p99839
S'point'
p99840
sS'required'
p99841
I00
sS'group_name'
p99842
Nsa(dp99843
S'description'
p99844
S'A scale factor to be applied to the function\n'
p99845
sS'cpp_type'
p99846
S'double'
p99847
sS'default'
p99848
S'1'
p99849
sS'name'
p99850
S'scale_factor'
p99851
sS'required'
p99852
I00
sS'group_name'
p99853
Nsa(dp99854
S'description'
p99855
g3
sS'cpp_type'
p99856
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p99857
sS'default'
p99858
S'FunctionValuePostprocessor'
p99859
sS'name'
p99860
S'type'
p99861
sS'required'
p99862
I00
sS'group_name'
p99863
Nsa(dp99864
S'description'
p99865
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p99866
sS'cpp_type'
p99867
S'bool'
p99868
sS'default'
p99869
S'0'
p99870
sS'name'
p99871
S'use_displaced_mesh'
p99872
sS'required'
p99873
I00
sS'group_name'
p99874
S'Advanced'
p99875
sasS'name'
p99876
S'/Postprocessors/FunctionValuePostprocessor'
p99877
sa(dp99878
S'description'
p99879
g3
sS'subblocks'
p99880
NsS'parameters'
p99881
(lp99882
(dp99883
S'description'
p99884
S'An optional file name where bubble volumes can be output.\n'
p99885
sS'cpp_type'
p99886
S'FileName'
p99887
sS'default'
p99888
g3
sS'name'
p99889
S'bubble_volume_file'
p99890
sS'required'
p99891
I00
sS'group_name'
p99892
Nsa(dp99893
S'description'
p99894
S'Indicates whether the grain tracker uses bounding sphere centersor center of mass calcuations for tracking grains\n'
p99895
sS'cpp_type'
p99896
S'bool'
p99897
sS'default'
p99898
S'0'
p99899
sS'name'
p99900
S'center_of_mass_tracking'
p99901
sS'required'
p99902
I00
sS'group_name'
p99903
Nsa(dp99904
S'description'
p99905
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p99906
sS'cpp_type'
p99907
S'bool'
p99908
sS'default'
p99909
S'0'
p99910
sS'name'
p99911
S'compute_boundary_intersecting_volume'
p99912
sS'required'
p99913
I00
sS'group_name'
p99914
Nsa(dp99915
S'description'
p99916
S'Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n'
p99917
sS'cpp_type'
p99918
S'bool'
p99919
sS'default'
p99920
S'0'
p99921
sS'name'
p99922
S'compute_op_maps'
p99923
sS'required'
p99924
I00
sS'group_name'
p99925
Nsa(dp99926
S'description'
p99927
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p99928
sS'cpp_type'
p99929
S'bool'
p99930
sS'default'
p99931
S'0'
p99932
sS'name'
p99933
S'condense_map_info'
p99934
sS'required'
p99935
I00
sS'group_name'
p99936
Nsa(dp99937
S'description'
p99938
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p99939
sS'cpp_type'
p99940
S'double'
p99941
sS'default'
p99942
g3
sS'name'
p99943
S'connecting_threshold'
p99944
sS'required'
p99945
I00
sS'group_name'
p99946
Nsa(dp99947
S'description'
p99948
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p99949
sS'cpp_type'
p99950
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p99951
sS'default'
p99952
g3
sS'name'
p99953
S'control_tags'
p99954
sS'required'
p99955
I00
sS'group_name'
p99956
Nsa(dp99957
S'description'
p99958
S'The buffer around the convex hull used to determinewhen features intersect\n'
p99959
sS'cpp_type'
p99960
S'double'
p99961
sS'default'
p99962
S'1'
p99963
sS'name'
p99964
S'convex_hull_buffer'
p99965
sS'required'
p99966
I00
sS'group_name'
p99967
Nsa(dp99968
S'description'
p99969
S'Optional: EBSD Reader for initial condition\n'
p99970
sS'cpp_type'
p99971
S'UserObjectName'
p99972
sS'default'
p99973
g3
sS'name'
p99974
S'ebsd_reader'
p99975
sS'required'
p99976
I00
sS'group_name'
p99977
Nsa(dp99978
S'description'
p99979
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p99980
sS'cpp_type'
p99981
S'PostprocessorName'
p99982
sS'default'
p99983
g3
sS'name'
p99984
S'elem_avg_value'
p99985
sS'required'
p99986
I00
sS'group_name'
p99987
Nsa(dp99988
S'description'
p99989
S'Instruct the UO to populate the variable index map.\n'
p99990
sS'cpp_type'
p99991
S'bool'
p99992
sS'default'
p99993
S'0'
p99994
sS'name'
p99995
S'enable_var_coloring'
p99996
sS'required'
p99997
I00
sS'group_name'
p99998
Nsa(dp99999
S'name'
p100000
S'execute_on'
p100001
sS'cpp_type'
p100002
S'MultiMooseEnum'
p100003
sS'default'
p100004
S'TIMESTEP_END'
p100005
sS'description'
p100006
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100007
sS'required'
p100008
I00
sS'options'
p100009
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p100010
sS'group_name'
p100011
Nsa(dp100012
S'name'
p100013
S'flood_entity_type'
p100014
sS'cpp_type'
p100015
S'MooseEnum'
p100016
sS'default'
p100017
S'NODAL'
p100018
sS'description'
p100019
S'Determines whether the flood algorithm runs on nodes or elements\n'
p100020
sS'required'
p100021
I00
sS'options'
p100022
S'NODAL ELEMENTAL'
p100023
sS'group_name'
p100024
Nsa(dp100025
S'description'
p100026
S'Array of coupled variables (num_name)\n'
p100027
sS'cpp_type'
p100028
S'unsigned int'
p100029
sS'default'
p100030
g3
sS'name'
p100031
S'op_num'
p100032
sS'required'
p100033
I00
sS'group_name'
p100034
Nsa(dp100035
S'description'
p100036
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100037
sS'cpp_type'
p100038
S'std::vector<OutputName, std::allocator<OutputName> >'
p100039
sS'default'
p100040
g3
sS'name'
p100041
S'outputs'
p100042
sS'required'
p100043
I00
sS'group_name'
p100044
S'Advanced'
p100045
sa(dp100046
S'description'
p100047
S'Indicates whether remapping should be done or not (default: true)\n'
p100048
sS'cpp_type'
p100049
S'bool'
p100050
sS'default'
p100051
S'1'
p100052
sS'name'
p100053
S'remap_grains'
p100054
sS'required'
p100055
I00
sS'group_name'
p100056
Nsa(dp100057
S'description'
p100058
S'The threshold value for which a new bubble may be started\n'
p100059
sS'cpp_type'
p100060
S'double'
p100061
sS'default'
p100062
S'0.5'
p100063
sS'name'
p100064
S'threshold'
p100065
sS'required'
p100066
I00
sS'group_name'
p100067
Nsa(dp100068
S'description'
p100069
S'Calculate memory usage\n'
p100070
sS'cpp_type'
p100071
S'bool'
p100072
sS'default'
p100073
S'0'
p100074
sS'name'
p100075
S'track_memory_usage'
p100076
sS'required'
p100077
I00
sS'group_name'
p100078
Nsa(dp100079
S'description'
p100080
S'The timestep for when we should start tracking grains\n'
p100081
sS'cpp_type'
p100082
S'int'
p100083
sS'default'
p100084
S'0'
p100085
sS'name'
p100086
S'tracking_step'
p100087
sS'required'
p100088
I00
sS'group_name'
p100089
Nsa(dp100090
S'description'
p100091
g3
sS'cpp_type'
p100092
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100093
sS'default'
p100094
S'GrainTracker'
p100095
sS'name'
p100096
S'type'
p100097
sS'required'
p100098
I00
sS'group_name'
p100099
Nsa(dp100100
S'description'
p100101
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100102
sS'cpp_type'
p100103
S'bool'
p100104
sS'default'
p100105
S'0'
p100106
sS'name'
p100107
S'use_displaced_mesh'
p100108
sS'required'
p100109
I00
sS'group_name'
p100110
S'Advanced'
p100111
sa(dp100112
S'description'
p100113
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p100114
sS'cpp_type'
p100115
S'bool'
p100116
sS'default'
p100117
S'0'
p100118
sS'name'
p100119
S'use_global_numbering'
p100120
sS'required'
p100121
I00
sS'group_name'
p100122
Nsa(dp100123
S'description'
p100124
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p100125
sS'cpp_type'
p100126
S'bool'
p100127
sS'default'
p100128
S'1'
p100129
sS'name'
p100130
S'use_less_than_threshold_comparison'
p100131
sS'required'
p100132
I00
sS'group_name'
p100133
Nsa(dp100134
S'description'
p100135
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p100136
sS'cpp_type'
p100137
S'bool'
p100138
sS'default'
p100139
S'1'
p100140
sS'name'
p100141
S'use_single_map'
p100142
sS'required'
p100143
I00
sS'group_name'
p100144
Nsa(dp100145
S'description'
p100146
S'Array of coupled variables (base_name)\n'
p100147
sS'cpp_type'
p100148
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100149
sS'default'
p100150
g3
sS'name'
p100151
S'var_name_base'
p100152
sS'required'
p100153
I00
sS'group_name'
p100154
NsasS'name'
p100155
S'/Postprocessors/GrainTracker'
p100156
sa(dp100157
S'description'
p100158
g3
sS'subblocks'
p100159
NsS'parameters'
p100160
(lp100161
(dp100162
S'description'
p100163
S'Name appended to material properties to make them unique\n'
p100164
sS'cpp_type'
p100165
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100166
sS'default'
p100167
g3
sS'name'
p100168
S'appended_property_name'
p100169
sS'required'
p100170
I00
sS'group_name'
p100171
Nsa(dp100172
S'description'
p100173
S'The list of block ids (SubdomainID) that this object will be applied\n'
p100174
sS'cpp_type'
p100175
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p100176
sS'default'
p100177
g3
sS'name'
p100178
S'block'
p100179
sS'required'
p100180
I00
sS'group_name'
p100181
Nsa(dp100182
S'description'
p100183
S'An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n'
p100184
sS'cpp_type'
p100185
S'unsigned int'
p100186
sS'default'
p100187
g3
sS'name'
p100188
S'column'
p100189
sS'required'
p100190
I01
sS'group_name'
p100191
Nsa(dp100192
S'description'
p100193
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100194
sS'cpp_type'
p100195
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100196
sS'default'
p100197
g3
sS'name'
p100198
S'control_tags'
p100199
sS'required'
p100200
I00
sS'group_name'
p100201
Nsa(dp100202
S'description'
p100203
S'solution in xx\n'
p100204
sS'cpp_type'
p100205
S'std::vector<VariableName>'
p100206
sS'default'
p100207
g3
sS'name'
p100208
S'dx_xx'
p100209
sS'required'
p100210
I01
sS'group_name'
p100211
Nsa(dp100212
S'description'
p100213
S'solution in xy\n'
p100214
sS'cpp_type'
p100215
S'std::vector<VariableName>'
p100216
sS'default'
p100217
g3
sS'name'
p100218
S'dx_xy'
p100219
sS'required'
p100220
I01
sS'group_name'
p100221
Nsa(dp100222
S'description'
p100223
S'solution in yy\n'
p100224
sS'cpp_type'
p100225
S'std::vector<VariableName>'
p100226
sS'default'
p100227
g3
sS'name'
p100228
S'dx_yy'
p100229
sS'required'
p100230
I01
sS'group_name'
p100231
Nsa(dp100232
S'description'
p100233
S'solution in yz\n'
p100234
sS'cpp_type'
p100235
S'std::vector<VariableName>'
p100236
sS'default'
p100237
g3
sS'name'
p100238
S'dx_yz'
p100239
sS'required'
p100240
I00
sS'group_name'
p100241
Nsa(dp100242
S'description'
p100243
S'solution in zx\n'
p100244
sS'cpp_type'
p100245
S'std::vector<VariableName>'
p100246
sS'default'
p100247
g3
sS'name'
p100248
S'dx_zx'
p100249
sS'required'
p100250
I00
sS'group_name'
p100251
Nsa(dp100252
S'description'
p100253
S'solution in zz\n'
p100254
sS'cpp_type'
p100255
S'std::vector<VariableName>'
p100256
sS'default'
p100257
g3
sS'name'
p100258
S'dx_zz'
p100259
sS'required'
p100260
I00
sS'group_name'
p100261
Nsa(dp100262
S'description'
p100263
S'solution in xx\n'
p100264
sS'cpp_type'
p100265
S'std::vector<VariableName>'
p100266
sS'default'
p100267
g3
sS'name'
p100268
S'dy_xx'
p100269
sS'required'
p100270
I01
sS'group_name'
p100271
Nsa(dp100272
S'description'
p100273
S'solution in xy\n'
p100274
sS'cpp_type'
p100275
S'std::vector<VariableName>'
p100276
sS'default'
p100277
g3
sS'name'
p100278
S'dy_xy'
p100279
sS'required'
p100280
I01
sS'group_name'
p100281
Nsa(dp100282
S'description'
p100283
S'solution in yy\n'
p100284
sS'cpp_type'
p100285
S'std::vector<VariableName>'
p100286
sS'default'
p100287
g3
sS'name'
p100288
S'dy_yy'
p100289
sS'required'
p100290
I01
sS'group_name'
p100291
Nsa(dp100292
S'description'
p100293
S'solution in yz\n'
p100294
sS'cpp_type'
p100295
S'std::vector<VariableName>'
p100296
sS'default'
p100297
g3
sS'name'
p100298
S'dy_yz'
p100299
sS'required'
p100300
I00
sS'group_name'
p100301
Nsa(dp100302
S'description'
p100303
S'solution in zx\n'
p100304
sS'cpp_type'
p100305
S'std::vector<VariableName>'
p100306
sS'default'
p100307
g3
sS'name'
p100308
S'dy_zx'
p100309
sS'required'
p100310
I00
sS'group_name'
p100311
Nsa(dp100312
S'description'
p100313
S'solution in zz\n'
p100314
sS'cpp_type'
p100315
S'std::vector<VariableName>'
p100316
sS'default'
p100317
g3
sS'name'
p100318
S'dy_zz'
p100319
sS'required'
p100320
I00
sS'group_name'
p100321
Nsa(dp100322
S'description'
p100323
S'solution in xx\n'
p100324
sS'cpp_type'
p100325
S'std::vector<VariableName>'
p100326
sS'default'
p100327
g3
sS'name'
p100328
S'dz_xx'
p100329
sS'required'
p100330
I00
sS'group_name'
p100331
Nsa(dp100332
S'description'
p100333
S'solution in xy\n'
p100334
sS'cpp_type'
p100335
S'std::vector<VariableName>'
p100336
sS'default'
p100337
g3
sS'name'
p100338
S'dz_xy'
p100339
sS'required'
p100340
I00
sS'group_name'
p100341
Nsa(dp100342
S'description'
p100343
S'solution in yy\n'
p100344
sS'cpp_type'
p100345
S'std::vector<VariableName>'
p100346
sS'default'
p100347
g3
sS'name'
p100348
S'dz_yy'
p100349
sS'required'
p100350
I00
sS'group_name'
p100351
Nsa(dp100352
S'description'
p100353
S'solution in yz\n'
p100354
sS'cpp_type'
p100355
S'std::vector<VariableName>'
p100356
sS'default'
p100357
g3
sS'name'
p100358
S'dz_yz'
p100359
sS'required'
p100360
I00
sS'group_name'
p100361
Nsa(dp100362
S'description'
p100363
S'solution in zx\n'
p100364
sS'cpp_type'
p100365
S'std::vector<VariableName>'
p100366
sS'default'
p100367
g3
sS'name'
p100368
S'dz_zx'
p100369
sS'required'
p100370
I00
sS'group_name'
p100371
Nsa(dp100372
S'description'
p100373
S'solution in zz\n'
p100374
sS'cpp_type'
p100375
S'std::vector<VariableName>'
p100376
sS'default'
p100377
g3
sS'name'
p100378
S'dz_zz'
p100379
sS'required'
p100380
I00
sS'group_name'
p100381
Nsa(dp100382
S'name'
p100383
S'execute_on'
p100384
sS'cpp_type'
p100385
S'MultiMooseEnum'
p100386
sS'default'
p100387
S'TIMESTEP_END'
p100388
sS'description'
p100389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100390
sS'required'
p100391
I00
sS'options'
p100392
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p100393
sS'group_name'
p100394
Nsa(dp100395
S'description'
p100396
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100397
sS'cpp_type'
p100398
S'std::vector<OutputName, std::allocator<OutputName> >'
p100399
sS'default'
p100400
g3
sS'name'
p100401
S'outputs'
p100402
sS'required'
p100403
I00
sS'group_name'
p100404
S'Advanced'
p100405
sa(dp100406
S'description'
p100407
S'An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n'
p100408
sS'cpp_type'
p100409
S'unsigned int'
p100410
sS'default'
p100411
g3
sS'name'
p100412
S'row'
p100413
sS'required'
p100414
I01
sS'group_name'
p100415
Nsa(dp100416
S'description'
p100417
S'The seed for the master random number generator\n'
p100418
sS'cpp_type'
p100419
S'unsigned int'
p100420
sS'default'
p100421
S'0'
p100422
sS'name'
p100423
S'seed'
p100424
sS'required'
p100425
I00
sS'group_name'
p100426
S'Advanced'
p100427
sa(dp100428
S'description'
p100429
g3
sS'cpp_type'
p100430
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100431
sS'default'
p100432
S'HomogenizedElasticConstants'
p100433
sS'name'
p100434
S'type'
p100435
sS'required'
p100436
I00
sS'group_name'
p100437
Nsa(dp100438
S'description'
p100439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100440
sS'cpp_type'
p100441
S'bool'
p100442
sS'default'
p100443
S'0'
p100444
sS'name'
p100445
S'use_displaced_mesh'
p100446
sS'required'
p100447
I00
sS'group_name'
p100448
S'Advanced'
p100449
sa(dp100450
S'description'
p100451
S'The name of the variable that this object operates on\n'
p100452
sS'cpp_type'
p100453
S'std::vector<VariableName>'
p100454
sS'default'
p100455
g3
sS'name'
p100456
S'variable'
p100457
sS'required'
p100458
I00
sS'group_name'
p100459
NsasS'name'
p100460
S'/Postprocessors/HomogenizedElasticConstants'
p100461
sa(dp100462
S'description'
p100463
g3
sS'subblocks'
p100464
NsS'parameters'
p100465
(lp100466
(dp100467
S'description'
p100468
S'The list of block ids (SubdomainID) that this object will be applied\n'
p100469
sS'cpp_type'
p100470
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p100471
sS'default'
p100472
g3
sS'name'
p100473
S'block'
p100474
sS'required'
p100475
I00
sS'group_name'
p100476
Nsa(dp100477
S'description'
p100478
S'An integer corresponding to the direction this pp acts in (0 for x, 1 for y, 2 for z)\n'
p100479
sS'cpp_type'
p100480
S'unsigned int'
p100481
sS'default'
p100482
g3
sS'name'
p100483
S'component'
p100484
sS'required'
p100485
I01
sS'group_name'
p100486
Nsa(dp100487
S'description'
p100488
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100489
sS'cpp_type'
p100490
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100491
sS'default'
p100492
g3
sS'name'
p100493
S'control_tags'
p100494
sS'required'
p100495
I00
sS'group_name'
p100496
Nsa(dp100497
S'description'
p100498
S'Property name of the diffusivity (Default: thermal_conductivity)\n'
p100499
sS'cpp_type'
p100500
S'MaterialPropertyName'
p100501
sS'default'
p100502
S'thermal_conductivity'
p100503
sS'name'
p100504
S'diffusion_coefficient_name'
p100505
sS'required'
p100506
I00
sS'group_name'
p100507
Nsa(dp100508
S'name'
p100509
S'execute_on'
p100510
sS'cpp_type'
p100511
S'MultiMooseEnum'
p100512
sS'default'
p100513
S'TIMESTEP_END'
p100514
sS'description'
p100515
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100516
sS'required'
p100517
I00
sS'options'
p100518
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p100519
sS'group_name'
p100520
Nsa(dp100521
S'description'
p100522
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100523
sS'cpp_type'
p100524
S'std::vector<OutputName, std::allocator<OutputName> >'
p100525
sS'default'
p100526
g3
sS'name'
p100527
S'outputs'
p100528
sS'required'
p100529
I00
sS'group_name'
p100530
S'Advanced'
p100531
sa(dp100532
S'description'
p100533
S'Scale factor\n'
p100534
sS'cpp_type'
p100535
S'double'
p100536
sS'default'
p100537
S'1'
p100538
sS'name'
p100539
S'scale_factor'
p100540
sS'required'
p100541
I00
sS'group_name'
p100542
Nsa(dp100543
S'description'
p100544
S'The seed for the master random number generator\n'
p100545
sS'cpp_type'
p100546
S'unsigned int'
p100547
sS'default'
p100548
S'0'
p100549
sS'name'
p100550
S'seed'
p100551
sS'required'
p100552
I00
sS'group_name'
p100553
S'Advanced'
p100554
sa(dp100555
S'description'
p100556
S'solution in x\n'
p100557
sS'cpp_type'
p100558
S'std::vector<VariableName>'
p100559
sS'default'
p100560
g3
sS'name'
p100561
S'temp_x'
p100562
sS'required'
p100563
I01
sS'group_name'
p100564
Nsa(dp100565
S'description'
p100566
S'solution in y\n'
p100567
sS'cpp_type'
p100568
S'std::vector<VariableName>'
p100569
sS'default'
p100570
g3
sS'name'
p100571
S'temp_y'
p100572
sS'required'
p100573
I00
sS'group_name'
p100574
Nsa(dp100575
S'description'
p100576
S'solution in z\n'
p100577
sS'cpp_type'
p100578
S'std::vector<VariableName>'
p100579
sS'default'
p100580
g3
sS'name'
p100581
S'temp_z'
p100582
sS'required'
p100583
I00
sS'group_name'
p100584
Nsa(dp100585
S'description'
p100586
g3
sS'cpp_type'
p100587
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100588
sS'default'
p100589
S'HomogenizedThermalConductivity'
p100590
sS'name'
p100591
S'type'
p100592
sS'required'
p100593
I00
sS'group_name'
p100594
Nsa(dp100595
S'description'
p100596
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100597
sS'cpp_type'
p100598
S'bool'
p100599
sS'default'
p100600
S'0'
p100601
sS'name'
p100602
S'use_displaced_mesh'
p100603
sS'required'
p100604
I00
sS'group_name'
p100605
S'Advanced'
p100606
sa(dp100607
S'description'
p100608
S'The name of the variable that this object operates on\n'
p100609
sS'cpp_type'
p100610
S'std::vector<VariableName>'
p100611
sS'default'
p100612
g3
sS'name'
p100613
S'variable'
p100614
sS'required'
p100615
I00
sS'group_name'
p100616
NsasS'name'
p100617
S'/Postprocessors/HomogenizedThermalConductivity'
p100618
sa(dp100619
S'description'
p100620
g3
sS'subblocks'
p100621
NsS'parameters'
p100622
(lp100623
(dp100624
S'description'
p100625
S'0 < beta < 1, choose some fraction of the limiting timestep size\n'
p100626
sS'cpp_type'
p100627
S'double'
p100628
sS'default'
p100629
g3
sS'name'
p100630
S'beta'
p100631
sS'required'
p100632
I01
sS'group_name'
p100633
Nsa(dp100634
S'description'
p100635
S'The list of block ids (SubdomainID) that this object will be applied\n'
p100636
sS'cpp_type'
p100637
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p100638
sS'default'
p100639
g3
sS'name'
p100640
S'block'
p100641
sS'required'
p100642
I00
sS'group_name'
p100643
Nsa(dp100644
S'description'
p100645
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100646
sS'cpp_type'
p100647
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100648
sS'default'
p100649
g3
sS'name'
p100650
S'control_tags'
p100651
sS'required'
p100652
I00
sS'group_name'
p100653
Nsa(dp100654
S'name'
p100655
S'execute_on'
p100656
sS'cpp_type'
p100657
S'MultiMooseEnum'
p100658
sS'default'
p100659
S'TIMESTEP_END'
p100660
sS'description'
p100661
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100662
sS'required'
p100663
I00
sS'options'
p100664
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p100665
sS'group_name'
p100666
Nsa(dp100667
S'description'
p100668
S'dynamic viscosity\n'
p100669
sS'cpp_type'
p100670
S'double'
p100671
sS'default'
p100672
g3
sS'name'
p100673
S'mu'
p100674
sS'required'
p100675
I01
sS'group_name'
p100676
Nsa(dp100677
S'description'
p100678
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100679
sS'cpp_type'
p100680
S'std::vector<OutputName, std::allocator<OutputName> >'
p100681
sS'default'
p100682
g3
sS'name'
p100683
S'outputs'
p100684
sS'required'
p100685
I00
sS'group_name'
p100686
S'Advanced'
p100687
sa(dp100688
S'description'
p100689
S'density\n'
p100690
sS'cpp_type'
p100691
S'double'
p100692
sS'default'
p100693
g3
sS'name'
p100694
S'rho'
p100695
sS'required'
p100696
I01
sS'group_name'
p100697
Nsa(dp100698
S'description'
p100699
S'The seed for the master random number generator\n'
p100700
sS'cpp_type'
p100701
S'unsigned int'
p100702
sS'default'
p100703
S'0'
p100704
sS'name'
p100705
S'seed'
p100706
sS'required'
p100707
I00
sS'group_name'
p100708
S'Advanced'
p100709
sa(dp100710
S'description'
p100711
g3
sS'cpp_type'
p100712
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100713
sS'default'
p100714
S'INSExplicitTimestepSelector'
p100715
sS'name'
p100716
S'type'
p100717
sS'required'
p100718
I00
sS'group_name'
p100719
Nsa(dp100720
S'description'
p100721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100722
sS'cpp_type'
p100723
S'bool'
p100724
sS'default'
p100725
S'0'
p100726
sS'name'
p100727
S'use_displaced_mesh'
p100728
sS'required'
p100729
I00
sS'group_name'
p100730
S'Advanced'
p100731
sa(dp100732
S'description'
p100733
S'Velocity magnitude\n'
p100734
sS'cpp_type'
p100735
S'std::vector<VariableName>'
p100736
sS'default'
p100737
g3
sS'name'
p100738
S'vel_mag'
p100739
sS'required'
p100740
I01
sS'group_name'
p100741
NsasS'name'
p100742
S'/Postprocessors/INSExplicitTimestepSelector'
p100743
sa(dp100744
S'description'
p100745
g3
sS'subblocks'
p100746
NsS'parameters'
p100747
(lp100748
(dp100749
S'description'
p100750
S'Conversion factor between interaction integral and stress intensity factor K\n'
p100751
sS'cpp_type'
p100752
S'double'
p100753
sS'default'
p100754
g3
sS'name'
p100755
S'K_factor'
p100756
sS'required'
p100757
I00
sS'group_name'
p100758
Nsa(dp100759
S'description'
p100760
S'The list of block ids (SubdomainID) that this object will be applied\n'
p100761
sS'cpp_type'
p100762
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p100763
sS'default'
p100764
g3
sS'name'
p100765
S'block'
p100766
sS'required'
p100767
I00
sS'group_name'
p100768
Nsa(dp100769
S'description'
p100770
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100771
sS'cpp_type'
p100772
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100773
sS'default'
p100774
g3
sS'name'
p100775
S'control_tags'
p100776
sS'required'
p100777
I00
sS'group_name'
p100778
Nsa(dp100779
S'description'
p100780
S'The CrackFrontDefinition user object name\n'
p100781
sS'cpp_type'
p100782
S'UserObjectName'
p100783
sS'default'
p100784
g3
sS'name'
p100785
S'crack_front_definition'
p100786
sS'required'
p100787
I01
sS'group_name'
p100788
Nsa(dp100789
S'description'
p100790
S'The index of the point on the crack front corresponding to this q function\n'
p100791
sS'cpp_type'
p100792
S'unsigned int'
p100793
sS'default'
p100794
g3
sS'name'
p100795
S'crack_front_point_index'
p100796
sS'required'
p100797
I00
sS'group_name'
p100798
Nsa(dp100799
S'description'
p100800
S'The x displacement\n'
p100801
sS'cpp_type'
p100802
S'std::vector<VariableName>'
p100803
sS'default'
p100804
g3
sS'name'
p100805
S'disp_x'
p100806
sS'required'
p100807
I00
sS'group_name'
p100808
Nsa(dp100809
S'description'
p100810
S'The y displacement\n'
p100811
sS'cpp_type'
p100812
S'std::vector<VariableName>'
p100813
sS'default'
p100814
g3
sS'name'
p100815
S'disp_y'
p100816
sS'required'
p100817
I00
sS'group_name'
p100818
Nsa(dp100819
S'description'
p100820
S'The z displacement\n'
p100821
sS'cpp_type'
p100822
S'std::vector<VariableName>'
p100823
sS'default'
p100824
g3
sS'name'
p100825
S'disp_z'
p100826
sS'required'
p100827
I00
sS'group_name'
p100828
Nsa(dp100829
S'name'
p100830
S'execute_on'
p100831
sS'cpp_type'
p100832
S'MultiMooseEnum'
p100833
sS'default'
p100834
S'TIMESTEP_END'
p100835
sS'description'
p100836
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100837
sS'required'
p100838
I00
sS'options'
p100839
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p100840
sS'group_name'
p100841
Nsa(dp100842
S'description'
p100843
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100844
sS'cpp_type'
p100845
S'std::vector<OutputName, std::allocator<OutputName> >'
p100846
sS'default'
p100847
g3
sS'name'
p100848
S'outputs'
p100849
sS'required'
p100850
I00
sS'group_name'
p100851
S'Advanced'
p100852
sa(dp100853
S'description'
p100854
S"Poisson's ratio for the material.\n"
p100855
sS'cpp_type'
p100856
S'double'
p100857
sS'default'
p100858
g3
sS'name'
p100859
S'poissons_ratio'
p100860
sS'required'
p100861
I00
sS'group_name'
p100862
Nsa(dp100863
S'description'
p100864
S'The q function, aux variable\n'
p100865
sS'cpp_type'
p100866
S'std::vector<VariableName>'
p100867
sS'default'
p100868
g3
sS'name'
p100869
S'q'
p100870
sS'required'
p100871
I00
sS'group_name'
p100872
Nsa(dp100873
S'description'
p100874
S'The seed for the master random number generator\n'
p100875
sS'cpp_type'
p100876
S'unsigned int'
p100877
sS'default'
p100878
S'0'
p100879
sS'name'
p100880
S'seed'
p100881
sS'required'
p100882
I00
sS'group_name'
p100883
S'Advanced'
p100884
sa(dp100885
S'description'
p100886
S'Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n'
p100887
sS'cpp_type'
p100888
S'unsigned int'
p100889
sS'default'
p100890
g3
sS'name'
p100891
S'symmetry_plane'
p100892
sS'required'
p100893
I00
sS'group_name'
p100894
Nsa(dp100895
S'description'
p100896
S'Calculate T-stress\n'
p100897
sS'cpp_type'
p100898
S'bool'
p100899
sS'default'
p100900
S'0'
p100901
sS'name'
p100902
S't_stress'
p100903
sS'required'
p100904
I00
sS'group_name'
p100905
Nsa(dp100906
S'description'
p100907
g3
sS'cpp_type'
p100908
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p100909
sS'default'
p100910
S'InteractionIntegral'
p100911
sS'name'
p100912
S'type'
p100913
sS'required'
p100914
I00
sS'group_name'
p100915
Nsa(dp100916
S'description'
p100917
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p100918
sS'cpp_type'
p100919
S'bool'
p100920
sS'default'
p100921
S'0'
p100922
sS'name'
p100923
S'use_displaced_mesh'
p100924
sS'required'
p100925
I00
sS'group_name'
p100926
S'Advanced'
p100927
sasS'name'
p100928
S'/Postprocessors/InteractionIntegral'
p100929
sa(dp100930
S'description'
p100931
g3
sS'subblocks'
p100932
NsS'parameters'
p100933
(lp100934
(dp100935
S'description'
p100936
S'An additional volume to be included in the internal volume calculation\n'
p100937
sS'cpp_type'
p100938
S'double'
p100939
sS'default'
p100940
S'0'
p100941
sS'name'
p100942
S'addition'
p100943
sS'required'
p100944
I00
sS'group_name'
p100945
Nsa(dp100946
S'description'
p100947
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p100948
sS'cpp_type'
p100949
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p100950
sS'default'
p100951
g3
sS'name'
p100952
S'boundary'
p100953
sS'required'
p100954
I00
sS'group_name'
p100955
Nsa(dp100956
S'description'
p100957
S'The component to use in the integration\n'
p100958
sS'cpp_type'
p100959
S'unsigned int'
p100960
sS'default'
p100961
S'1'
p100962
sS'name'
p100963
S'component'
p100964
sS'required'
p100965
I00
sS'group_name'
p100966
Nsa(dp100967
S'description'
p100968
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p100969
sS'cpp_type'
p100970
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p100971
sS'default'
p100972
g3
sS'name'
p100973
S'control_tags'
p100974
sS'required'
p100975
I00
sS'group_name'
p100976
Nsa(dp100977
S'name'
p100978
S'execute_on'
p100979
sS'cpp_type'
p100980
S'MultiMooseEnum'
p100981
sS'default'
p100982
S'TIMESTEP_END'
p100983
sS'description'
p100984
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p100985
sS'required'
p100986
I00
sS'options'
p100987
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p100988
sS'group_name'
p100989
Nsa(dp100990
S'description'
p100991
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100992
sS'cpp_type'
p100993
S'std::vector<OutputName, std::allocator<OutputName> >'
p100994
sS'default'
p100995
g3
sS'name'
p100996
S'outputs'
p100997
sS'required'
p100998
I00
sS'group_name'
p100999
S'Advanced'
p101000
sa(dp101001
S'description'
p101002
S'A scale factor to be applied to the internal volume calculation\n'
p101003
sS'cpp_type'
p101004
S'double'
p101005
sS'default'
p101006
S'1'
p101007
sS'name'
p101008
S'scale_factor'
p101009
sS'required'
p101010
I00
sS'group_name'
p101011
Nsa(dp101012
S'description'
p101013
g3
sS'cpp_type'
p101014
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101015
sS'default'
p101016
S'InternalVolume'
p101017
sS'name'
p101018
S'type'
p101019
sS'required'
p101020
I00
sS'group_name'
p101021
Nsa(dp101022
S'description'
p101023
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101024
sS'cpp_type'
p101025
S'bool'
p101026
sS'default'
p101027
S'1'
p101028
sS'name'
p101029
S'use_displaced_mesh'
p101030
sS'required'
p101031
I00
sS'group_name'
p101032
S'Advanced'
p101033
sasS'name'
p101034
S'/Postprocessors/InternalVolume'
p101035
sa(dp101036
S'description'
p101037
g3
sS'subblocks'
p101038
NsS'parameters'
p101039
(lp101040
(dp101041
S'description'
p101042
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101043
sS'cpp_type'
p101044
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101045
sS'default'
p101046
g3
sS'name'
p101047
S'block'
p101048
sS'required'
p101049
I00
sS'group_name'
p101050
Nsa(dp101051
S'description'
p101052
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101053
sS'cpp_type'
p101054
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101055
sS'default'
p101056
g3
sS'name'
p101057
S'control_tags'
p101058
sS'required'
p101059
I00
sS'group_name'
p101060
Nsa(dp101061
S'description'
p101062
S'Convert J-integral to stress intensity factor K.\n'
p101063
sS'cpp_type'
p101064
S'bool'
p101065
sS'default'
p101066
S'0'
p101067
sS'name'
p101068
S'convert_J_to_K'
p101069
sS'required'
p101070
I00
sS'group_name'
p101071
Nsa(dp101072
S'description'
p101073
S'The CrackFrontDefinition user object name\n'
p101074
sS'cpp_type'
p101075
S'UserObjectName'
p101076
sS'default'
p101077
g3
sS'name'
p101078
S'crack_front_definition'
p101079
sS'required'
p101080
I01
sS'group_name'
p101081
Nsa(dp101082
S'description'
p101083
S'The index of the point on the crack front corresponding to this q function\n'
p101084
sS'cpp_type'
p101085
S'unsigned int'
p101086
sS'default'
p101087
g3
sS'name'
p101088
S'crack_front_point_index'
p101089
sS'required'
p101090
I00
sS'group_name'
p101091
Nsa(dp101092
S'name'
p101093
S'execute_on'
p101094
sS'cpp_type'
p101095
S'MultiMooseEnum'
p101096
sS'default'
p101097
S'TIMESTEP_END'
p101098
sS'description'
p101099
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101100
sS'required'
p101101
I00
sS'options'
p101102
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101103
sS'group_name'
p101104
Nsa(dp101105
S'description'
p101106
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101107
sS'cpp_type'
p101108
S'std::vector<OutputName, std::allocator<OutputName> >'
p101109
sS'default'
p101110
g3
sS'name'
p101111
S'outputs'
p101112
sS'required'
p101113
I00
sS'group_name'
p101114
S'Advanced'
p101115
sa(dp101116
S'description'
p101117
S"Poisson's ratio\n"
p101118
sS'cpp_type'
p101119
S'double'
p101120
sS'default'
p101121
g3
sS'name'
p101122
S'poissons_ratio'
p101123
sS'required'
p101124
I00
sS'group_name'
p101125
Nsa(dp101126
S'description'
p101127
S'The q function, aux variable\n'
p101128
sS'cpp_type'
p101129
S'std::vector<VariableName>'
p101130
sS'default'
p101131
g3
sS'name'
p101132
S'q'
p101133
sS'required'
p101134
I00
sS'group_name'
p101135
Nsa(dp101136
S'description'
p101137
S'The seed for the master random number generator\n'
p101138
sS'cpp_type'
p101139
S'unsigned int'
p101140
sS'default'
p101141
S'0'
p101142
sS'name'
p101143
S'seed'
p101144
sS'required'
p101145
I00
sS'group_name'
p101146
S'Advanced'
p101147
sa(dp101148
S'description'
p101149
S'Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n'
p101150
sS'cpp_type'
p101151
S'unsigned int'
p101152
sS'default'
p101153
g3
sS'name'
p101154
S'symmetry_plane'
p101155
sS'required'
p101156
I00
sS'group_name'
p101157
Nsa(dp101158
S'description'
p101159
g3
sS'cpp_type'
p101160
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101161
sS'default'
p101162
S'JIntegral'
p101163
sS'name'
p101164
S'type'
p101165
sS'required'
p101166
I00
sS'group_name'
p101167
Nsa(dp101168
S'description'
p101169
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101170
sS'cpp_type'
p101171
S'bool'
p101172
sS'default'
p101173
S'0'
p101174
sS'name'
p101175
S'use_displaced_mesh'
p101176
sS'required'
p101177
I00
sS'group_name'
p101178
S'Advanced'
p101179
sa(dp101180
S'description'
p101181
S"Young's modulus of the material.\n"
p101182
sS'cpp_type'
p101183
S'double'
p101184
sS'default'
p101185
g3
sS'name'
p101186
S'youngs_modulus'
p101187
sS'required'
p101188
I00
sS'group_name'
p101189
NsasS'name'
p101190
S'/Postprocessors/JIntegral'
p101191
sa(dp101192
S'description'
p101193
g3
sS'subblocks'
p101194
NsS'parameters'
p101195
(lp101196
(dp101197
S'description'
p101198
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101199
sS'cpp_type'
p101200
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101201
sS'default'
p101202
g3
sS'name'
p101203
S'block'
p101204
sS'required'
p101205
I00
sS'group_name'
p101206
Nsa(dp101207
S'description'
p101208
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101209
sS'cpp_type'
p101210
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101211
sS'default'
p101212
g3
sS'name'
p101213
S'control_tags'
p101214
sS'required'
p101215
I00
sS'group_name'
p101216
Nsa(dp101217
S'name'
p101218
S'execute_on'
p101219
sS'cpp_type'
p101220
S'MultiMooseEnum'
p101221
sS'default'
p101222
S'TIMESTEP_END'
p101223
sS'description'
p101224
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101225
sS'required'
p101226
I00
sS'options'
p101227
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101228
sS'group_name'
p101229
Nsa(dp101230
S'description'
p101231
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101232
sS'cpp_type'
p101233
S'std::vector<OutputName, std::allocator<OutputName> >'
p101234
sS'default'
p101235
g3
sS'name'
p101236
S'outputs'
p101237
sS'required'
p101238
I00
sS'group_name'
p101239
S'Advanced'
p101240
sa(dp101241
S'description'
p101242
S'The seed for the master random number generator\n'
p101243
sS'cpp_type'
p101244
S'unsigned int'
p101245
sS'default'
p101246
S'0'
p101247
sS'name'
p101248
S'seed'
p101249
sS'required'
p101250
I00
sS'group_name'
p101251
S'Advanced'
p101252
sa(dp101253
S'description'
p101254
g3
sS'cpp_type'
p101255
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101256
sS'default'
p101257
S'Mass'
p101258
sS'name'
p101259
S'type'
p101260
sS'required'
p101261
I00
sS'group_name'
p101262
Nsa(dp101263
S'description'
p101264
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101265
sS'cpp_type'
p101266
S'bool'
p101267
sS'default'
p101268
S'1'
p101269
sS'name'
p101270
S'use_displaced_mesh'
p101271
sS'required'
p101272
I00
sS'group_name'
p101273
S'Advanced'
p101274
sa(dp101275
S'description'
p101276
S'The name of the variable that this object operates on\n'
p101277
sS'cpp_type'
p101278
S'std::vector<VariableName>'
p101279
sS'default'
p101280
g3
sS'name'
p101281
S'variable'
p101282
sS'required'
p101283
I00
sS'group_name'
p101284
NsasS'name'
p101285
S'/Postprocessors/Mass'
p101286
sa(dp101287
S'description'
p101288
g3
sS'subblocks'
p101289
NsS'parameters'
p101290
(lp101291
(dp101292
S'description'
p101293
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101294
sS'cpp_type'
p101295
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101296
sS'default'
p101297
g3
sS'name'
p101298
S'block'
p101299
sS'required'
p101300
I00
sS'group_name'
p101301
Nsa(dp101302
S'description'
p101303
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101304
sS'cpp_type'
p101305
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101306
sS'default'
p101307
g3
sS'name'
p101308
S'control_tags'
p101309
sS'required'
p101310
I00
sS'group_name'
p101311
Nsa(dp101312
S'description'
p101313
S'Direction vector\n'
p101314
sS'cpp_type'
p101315
S'libMesh::VectorValue<double>'
p101316
sS'default'
p101317
S'1 0 0'
p101318
sS'name'
p101319
S'direction'
p101320
sS'required'
p101321
I00
sS'group_name'
p101322
Nsa(dp101323
S'name'
p101324
S'execute_on'
p101325
sS'cpp_type'
p101326
S'MultiMooseEnum'
p101327
sS'default'
p101328
S'TIMESTEP_END'
p101329
sS'description'
p101330
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101331
sS'required'
p101332
I00
sS'options'
p101333
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101334
sS'group_name'
p101335
Nsa(dp101336
S'description'
p101337
S'The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n'
p101338
sS'cpp_type'
p101339
S'int'
p101340
sS'default'
p101341
S'-1'
p101342
sS'name'
p101343
S'index'
p101344
sS'required'
p101345
I00
sS'group_name'
p101346
Nsa(dp101347
S'description'
p101348
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101349
sS'cpp_type'
p101350
S'std::vector<OutputName, std::allocator<OutputName> >'
p101351
sS'default'
p101352
g3
sS'name'
p101353
S'outputs'
p101354
sS'required'
p101355
I00
sS'group_name'
p101356
S'Advanced'
p101357
sa(dp101358
S'description'
p101359
S'Start point for axis used to calculate some material tensor quantities\n'
p101360
sS'cpp_type'
p101361
S'libMesh::VectorValue<double>'
p101362
sS'default'
p101363
S'0 0 0'
p101364
sS'name'
p101365
S'point1'
p101366
sS'required'
p101367
I00
sS'group_name'
p101368
Nsa(dp101369
S'description'
p101370
S'End point for axis used to calculate some material tensor quantities\n'
p101371
sS'cpp_type'
p101372
S'libMesh::VectorValue<double>'
p101373
sS'default'
p101374
S'0 1 0'
p101375
sS'name'
p101376
S'point2'
p101377
sS'required'
p101378
I00
sS'group_name'
p101379
Nsa(dp101380
S'name'
p101381
S'quantity'
p101382
sS'cpp_type'
p101383
S'MooseEnum'
p101384
sS'default'
p101385
g3
sS'description'
p101386
S'A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n'
p101387
sS'required'
p101388
I00
sS'options'
p101389
S'VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain'
p101390
sS'group_name'
p101391
Nsa(dp101392
S'description'
p101393
S'The seed for the master random number generator\n'
p101394
sS'cpp_type'
p101395
S'unsigned int'
p101396
sS'default'
p101397
S'0'
p101398
sS'name'
p101399
S'seed'
p101400
sS'required'
p101401
I00
sS'group_name'
p101402
S'Advanced'
p101403
sa(dp101404
S'description'
p101405
S'The material tensor name.\n'
p101406
sS'cpp_type'
p101407
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101408
sS'default'
p101409
g3
sS'name'
p101410
S'tensor'
p101411
sS'required'
p101412
I01
sS'group_name'
p101413
Nsa(dp101414
S'description'
p101415
g3
sS'cpp_type'
p101416
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101417
sS'default'
p101418
S'MaterialTensorIntegral'
p101419
sS'name'
p101420
S'type'
p101421
sS'required'
p101422
I00
sS'group_name'
p101423
Nsa(dp101424
S'description'
p101425
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101426
sS'cpp_type'
p101427
S'bool'
p101428
sS'default'
p101429
S'1'
p101430
sS'name'
p101431
S'use_displaced_mesh'
p101432
sS'required'
p101433
I00
sS'group_name'
p101434
S'Advanced'
p101435
sasS'name'
p101436
S'/Postprocessors/MaterialTensorIntegral'
p101437
sa(dp101438
S'description'
p101439
g3
sS'subblocks'
p101440
NsS'parameters'
p101441
(lp101442
(dp101443
S'description'
p101444
S'The name of the KIII postprocessor\n'
p101445
sS'cpp_type'
p101446
S'PostprocessorName'
p101447
sS'default'
p101448
g3
sS'name'
p101449
S'KIII_name'
p101450
sS'required'
p101451
I01
sS'group_name'
p101452
Nsa(dp101453
S'description'
p101454
S'The name of the KII postprocessor\n'
p101455
sS'cpp_type'
p101456
S'PostprocessorName'
p101457
sS'default'
p101458
g3
sS'name'
p101459
S'KII_name'
p101460
sS'required'
p101461
I01
sS'group_name'
p101462
Nsa(dp101463
S'description'
p101464
S'The name of the KI postprocessor\n'
p101465
sS'cpp_type'
p101466
S'PostprocessorName'
p101467
sS'default'
p101468
g3
sS'name'
p101469
S'KI_name'
p101470
sS'required'
p101471
I01
sS'group_name'
p101472
Nsa(dp101473
S'description'
p101474
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101475
sS'cpp_type'
p101476
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101477
sS'default'
p101478
g3
sS'name'
p101479
S'control_tags'
p101480
sS'required'
p101481
I00
sS'group_name'
p101482
Nsa(dp101483
S'name'
p101484
S'execute_on'
p101485
sS'cpp_type'
p101486
S'MultiMooseEnum'
p101487
sS'default'
p101488
S'TIMESTEP_END'
p101489
sS'description'
p101490
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101491
sS'required'
p101492
I00
sS'options'
p101493
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101494
sS'group_name'
p101495
Nsa(dp101496
S'description'
p101497
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101498
sS'cpp_type'
p101499
S'std::vector<OutputName, std::allocator<OutputName> >'
p101500
sS'default'
p101501
g3
sS'name'
p101502
S'outputs'
p101503
sS'required'
p101504
I00
sS'group_name'
p101505
S'Advanced'
p101506
sa(dp101507
S'description'
p101508
S"Poisson's ratio for the material.\n"
p101509
sS'cpp_type'
p101510
S'double'
p101511
sS'default'
p101512
g3
sS'name'
p101513
S'poissons_ratio'
p101514
sS'required'
p101515
I01
sS'group_name'
p101516
Nsa(dp101517
S'description'
p101518
g3
sS'cpp_type'
p101519
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101520
sS'default'
p101521
S'MixedModeEquivalentK'
p101522
sS'name'
p101523
S'type'
p101524
sS'required'
p101525
I00
sS'group_name'
p101526
Nsa(dp101527
S'description'
p101528
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101529
sS'cpp_type'
p101530
S'bool'
p101531
sS'default'
p101532
S'0'
p101533
sS'name'
p101534
S'use_displaced_mesh'
p101535
sS'required'
p101536
I00
sS'group_name'
p101537
S'Advanced'
p101538
sasS'name'
p101539
S'/Postprocessors/MixedModeEquivalentK'
p101540
sa(dp101541
S'description'
p101542
g3
sS'subblocks'
p101543
NsS'parameters'
p101544
(lp101545
(dp101546
S'description'
p101547
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101548
sS'cpp_type'
p101549
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101550
sS'default'
p101551
g3
sS'name'
p101552
S'block'
p101553
sS'required'
p101554
I00
sS'group_name'
p101555
Nsa(dp101556
S'description'
p101557
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101558
sS'cpp_type'
p101559
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101560
sS'default'
p101561
g3
sS'name'
p101562
S'boundary'
p101563
sS'required'
p101564
I00
sS'group_name'
p101565
Nsa(dp101566
S'description'
p101567
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101568
sS'cpp_type'
p101569
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101570
sS'default'
p101571
g3
sS'name'
p101572
S'control_tags'
p101573
sS'required'
p101574
I00
sS'group_name'
p101575
Nsa(dp101576
S'name'
p101577
S'execute_on'
p101578
sS'cpp_type'
p101579
S'MultiMooseEnum'
p101580
sS'default'
p101581
S'TIMESTEP_END'
p101582
sS'description'
p101583
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101584
sS'required'
p101585
I00
sS'options'
p101586
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101587
sS'group_name'
p101588
Nsa(dp101589
S'description'
p101590
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101591
sS'cpp_type'
p101592
S'std::vector<OutputName, std::allocator<OutputName> >'
p101593
sS'default'
p101594
g3
sS'name'
p101595
S'outputs'
p101596
sS'required'
p101597
I00
sS'group_name'
p101598
S'Advanced'
p101599
sa(dp101600
S'description'
p101601
S'The seed for the master random number generator\n'
p101602
sS'cpp_type'
p101603
S'unsigned int'
p101604
sS'default'
p101605
S'0'
p101606
sS'name'
p101607
S'seed'
p101608
sS'required'
p101609
I00
sS'group_name'
p101610
S'Advanced'
p101611
sa(dp101612
S'description'
p101613
g3
sS'cpp_type'
p101614
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101615
sS'default'
p101616
S'NodalExtremeValue'
p101617
sS'name'
p101618
S'type'
p101619
sS'required'
p101620
I00
sS'group_name'
p101621
Nsa(dp101622
S'description'
p101623
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101624
sS'cpp_type'
p101625
S'bool'
p101626
sS'default'
p101627
S'0'
p101628
sS'name'
p101629
S'use_displaced_mesh'
p101630
sS'required'
p101631
I00
sS'group_name'
p101632
S'Advanced'
p101633
sa(dp101634
S'name'
p101635
S'value_type'
p101636
sS'cpp_type'
p101637
S'MooseEnum'
p101638
sS'default'
p101639
S'max'
p101640
sS'description'
p101641
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p101642
sS'required'
p101643
I00
sS'options'
p101644
S'max min'
p101645
sS'group_name'
p101646
Nsa(dp101647
S'description'
p101648
S'The name of the variable that this postprocessor operates on\n'
p101649
sS'cpp_type'
p101650
S'std::vector<VariableName>'
p101651
sS'default'
p101652
g3
sS'name'
p101653
S'variable'
p101654
sS'required'
p101655
I00
sS'group_name'
p101656
NsasS'name'
p101657
S'/Postprocessors/NodalExtremeValue'
p101658
sa(dp101659
S'description'
p101660
g3
sS'subblocks'
p101661
NsS'parameters'
p101662
(lp101663
(dp101664
S'description'
p101665
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101666
sS'cpp_type'
p101667
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101668
sS'default'
p101669
g3
sS'name'
p101670
S'block'
p101671
sS'required'
p101672
I00
sS'group_name'
p101673
Nsa(dp101674
S'description'
p101675
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101676
sS'cpp_type'
p101677
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101678
sS'default'
p101679
g3
sS'name'
p101680
S'boundary'
p101681
sS'required'
p101682
I00
sS'group_name'
p101683
Nsa(dp101684
S'description'
p101685
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101686
sS'cpp_type'
p101687
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101688
sS'default'
p101689
g3
sS'name'
p101690
S'control_tags'
p101691
sS'required'
p101692
I00
sS'group_name'
p101693
Nsa(dp101694
S'name'
p101695
S'execute_on'
p101696
sS'cpp_type'
p101697
S'MultiMooseEnum'
p101698
sS'default'
p101699
S'TIMESTEP_END'
p101700
sS'description'
p101701
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101702
sS'required'
p101703
I00
sS'options'
p101704
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101705
sS'group_name'
p101706
Nsa(dp101707
S'description'
p101708
S'The analytic solution to compare against\n'
p101709
sS'cpp_type'
p101710
S'FunctionName'
p101711
sS'default'
p101712
g3
sS'name'
p101713
S'function'
p101714
sS'required'
p101715
I01
sS'group_name'
p101716
Nsa(dp101717
S'description'
p101718
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101719
sS'cpp_type'
p101720
S'std::vector<OutputName, std::allocator<OutputName> >'
p101721
sS'default'
p101722
g3
sS'name'
p101723
S'outputs'
p101724
sS'required'
p101725
I00
sS'group_name'
p101726
S'Advanced'
p101727
sa(dp101728
S'description'
p101729
S'The seed for the master random number generator\n'
p101730
sS'cpp_type'
p101731
S'unsigned int'
p101732
sS'default'
p101733
S'0'
p101734
sS'name'
p101735
S'seed'
p101736
sS'required'
p101737
I00
sS'group_name'
p101738
S'Advanced'
p101739
sa(dp101740
S'description'
p101741
g3
sS'cpp_type'
p101742
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101743
sS'default'
p101744
S'NodalL2Error'
p101745
sS'name'
p101746
S'type'
p101747
sS'required'
p101748
I00
sS'group_name'
p101749
Nsa(dp101750
S'description'
p101751
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101752
sS'cpp_type'
p101753
S'bool'
p101754
sS'default'
p101755
S'0'
p101756
sS'name'
p101757
S'use_displaced_mesh'
p101758
sS'required'
p101759
I00
sS'group_name'
p101760
S'Advanced'
p101761
sa(dp101762
S'description'
p101763
S'The name of the variable that this postprocessor operates on\n'
p101764
sS'cpp_type'
p101765
S'std::vector<VariableName>'
p101766
sS'default'
p101767
g3
sS'name'
p101768
S'variable'
p101769
sS'required'
p101770
I00
sS'group_name'
p101771
NsasS'name'
p101772
S'/Postprocessors/NodalL2Error'
p101773
sa(dp101774
S'description'
p101775
g3
sS'subblocks'
p101776
NsS'parameters'
p101777
(lp101778
(dp101779
S'description'
p101780
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101781
sS'cpp_type'
p101782
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101783
sS'default'
p101784
g3
sS'name'
p101785
S'block'
p101786
sS'required'
p101787
I00
sS'group_name'
p101788
Nsa(dp101789
S'description'
p101790
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101791
sS'cpp_type'
p101792
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101793
sS'default'
p101794
g3
sS'name'
p101795
S'boundary'
p101796
sS'required'
p101797
I00
sS'group_name'
p101798
Nsa(dp101799
S'description'
p101800
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101801
sS'cpp_type'
p101802
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101803
sS'default'
p101804
g3
sS'name'
p101805
S'control_tags'
p101806
sS'required'
p101807
I00
sS'group_name'
p101808
Nsa(dp101809
S'name'
p101810
S'execute_on'
p101811
sS'cpp_type'
p101812
S'MultiMooseEnum'
p101813
sS'default'
p101814
S'TIMESTEP_END'
p101815
sS'description'
p101816
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101817
sS'required'
p101818
I00
sS'options'
p101819
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101820
sS'group_name'
p101821
Nsa(dp101822
S'description'
p101823
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101824
sS'cpp_type'
p101825
S'std::vector<OutputName, std::allocator<OutputName> >'
p101826
sS'default'
p101827
g3
sS'name'
p101828
S'outputs'
p101829
sS'required'
p101830
I00
sS'group_name'
p101831
S'Advanced'
p101832
sa(dp101833
S'description'
p101834
S'The seed for the master random number generator\n'
p101835
sS'cpp_type'
p101836
S'unsigned int'
p101837
sS'default'
p101838
S'0'
p101839
sS'name'
p101840
S'seed'
p101841
sS'required'
p101842
I00
sS'group_name'
p101843
S'Advanced'
p101844
sa(dp101845
S'description'
p101846
g3
sS'cpp_type'
p101847
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101848
sS'default'
p101849
S'NodalL2Norm'
p101850
sS'name'
p101851
S'type'
p101852
sS'required'
p101853
I00
sS'group_name'
p101854
Nsa(dp101855
S'description'
p101856
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101857
sS'cpp_type'
p101858
S'bool'
p101859
sS'default'
p101860
S'0'
p101861
sS'name'
p101862
S'use_displaced_mesh'
p101863
sS'required'
p101864
I00
sS'group_name'
p101865
S'Advanced'
p101866
sa(dp101867
S'description'
p101868
S'The name of the variable that this postprocessor operates on\n'
p101869
sS'cpp_type'
p101870
S'std::vector<VariableName>'
p101871
sS'default'
p101872
g3
sS'name'
p101873
S'variable'
p101874
sS'required'
p101875
I00
sS'group_name'
p101876
NsasS'name'
p101877
S'/Postprocessors/NodalL2Norm'
p101878
sa(dp101879
S'description'
p101880
g3
sS'subblocks'
p101881
NsS'parameters'
p101882
(lp101883
(dp101884
S'description'
p101885
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101886
sS'cpp_type'
p101887
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101888
sS'default'
p101889
g3
sS'name'
p101890
S'block'
p101891
sS'required'
p101892
I00
sS'group_name'
p101893
Nsa(dp101894
S'description'
p101895
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p101896
sS'cpp_type'
p101897
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p101898
sS'default'
p101899
g3
sS'name'
p101900
S'boundary'
p101901
sS'required'
p101902
I00
sS'group_name'
p101903
Nsa(dp101904
S'description'
p101905
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p101906
sS'cpp_type'
p101907
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p101908
sS'default'
p101909
g3
sS'name'
p101910
S'control_tags'
p101911
sS'required'
p101912
I00
sS'group_name'
p101913
Nsa(dp101914
S'name'
p101915
S'execute_on'
p101916
sS'cpp_type'
p101917
S'MultiMooseEnum'
p101918
sS'default'
p101919
S'TIMESTEP_END'
p101920
sS'description'
p101921
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p101922
sS'required'
p101923
I00
sS'options'
p101924
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p101925
sS'group_name'
p101926
Nsa(dp101927
S'description'
p101928
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p101929
sS'cpp_type'
p101930
S'std::vector<OutputName, std::allocator<OutputName> >'
p101931
sS'default'
p101932
g3
sS'name'
p101933
S'outputs'
p101934
sS'required'
p101935
I00
sS'group_name'
p101936
S'Advanced'
p101937
sa(dp101938
S'description'
p101939
S'The seed for the master random number generator\n'
p101940
sS'cpp_type'
p101941
S'unsigned int'
p101942
sS'default'
p101943
S'0'
p101944
sS'name'
p101945
S'seed'
p101946
sS'required'
p101947
I00
sS'group_name'
p101948
S'Advanced'
p101949
sa(dp101950
S'description'
p101951
g3
sS'cpp_type'
p101952
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p101953
sS'default'
p101954
S'NodalMaxValue'
p101955
sS'name'
p101956
S'type'
p101957
sS'required'
p101958
I00
sS'group_name'
p101959
Nsa(dp101960
S'description'
p101961
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p101962
sS'cpp_type'
p101963
S'bool'
p101964
sS'default'
p101965
S'0'
p101966
sS'name'
p101967
S'use_displaced_mesh'
p101968
sS'required'
p101969
I00
sS'group_name'
p101970
S'Advanced'
p101971
sa(dp101972
S'description'
p101973
S'The name of the variable that this postprocessor operates on\n'
p101974
sS'cpp_type'
p101975
S'std::vector<VariableName>'
p101976
sS'default'
p101977
g3
sS'name'
p101978
S'variable'
p101979
sS'required'
p101980
I00
sS'group_name'
p101981
NsasS'name'
p101982
S'/Postprocessors/NodalMaxValue'
p101983
sa(dp101984
S'description'
p101985
S'This postprocessor returns the value max(abs(variable - variable_old)) for the specified variable.\n'
p101986
sS'subblocks'
p101987
NsS'parameters'
p101988
(lp101989
(dp101990
S'description'
p101991
S'The list of block ids (SubdomainID) that this object will be applied\n'
p101992
sS'cpp_type'
p101993
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p101994
sS'default'
p101995
g3
sS'name'
p101996
S'block'
p101997
sS'required'
p101998
I00
sS'group_name'
p101999
Nsa(dp102000
S'description'
p102001
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102002
sS'cpp_type'
p102003
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102004
sS'default'
p102005
g3
sS'name'
p102006
S'boundary'
p102007
sS'required'
p102008
I00
sS'group_name'
p102009
Nsa(dp102010
S'description'
p102011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102012
sS'cpp_type'
p102013
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102014
sS'default'
p102015
g3
sS'name'
p102016
S'control_tags'
p102017
sS'required'
p102018
I00
sS'group_name'
p102019
Nsa(dp102020
S'name'
p102021
S'execute_on'
p102022
sS'cpp_type'
p102023
S'MultiMooseEnum'
p102024
sS'default'
p102025
S'TIMESTEP_END'
p102026
sS'description'
p102027
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102028
sS'required'
p102029
I00
sS'options'
p102030
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102031
sS'group_name'
p102032
Nsa(dp102033
S'description'
p102034
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102035
sS'cpp_type'
p102036
S'std::vector<OutputName, std::allocator<OutputName> >'
p102037
sS'default'
p102038
g3
sS'name'
p102039
S'outputs'
p102040
sS'required'
p102041
I00
sS'group_name'
p102042
S'Advanced'
p102043
sa(dp102044
S'description'
p102045
S'The seed for the master random number generator\n'
p102046
sS'cpp_type'
p102047
S'unsigned int'
p102048
sS'default'
p102049
S'0'
p102050
sS'name'
p102051
S'seed'
p102052
sS'required'
p102053
I00
sS'group_name'
p102054
S'Advanced'
p102055
sa(dp102056
S'description'
p102057
g3
sS'cpp_type'
p102058
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102059
sS'default'
p102060
S'NodalMaxVarChange'
p102061
sS'name'
p102062
S'type'
p102063
sS'required'
p102064
I00
sS'group_name'
p102065
Nsa(dp102066
S'description'
p102067
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102068
sS'cpp_type'
p102069
S'bool'
p102070
sS'default'
p102071
S'0'
p102072
sS'name'
p102073
S'use_displaced_mesh'
p102074
sS'required'
p102075
I00
sS'group_name'
p102076
S'Advanced'
p102077
sa(dp102078
S'description'
p102079
S'The name of the variable that this postprocessor operates on\n'
p102080
sS'cpp_type'
p102081
S'std::vector<VariableName>'
p102082
sS'default'
p102083
g3
sS'name'
p102084
S'variable'
p102085
sS'required'
p102086
I00
sS'group_name'
p102087
NsasS'name'
p102088
S'/Postprocessors/NodalMaxVarChange'
p102089
sa(dp102090
S'description'
p102091
g3
sS'subblocks'
p102092
NsS'parameters'
p102093
(lp102094
(dp102095
S'description'
p102096
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102097
sS'cpp_type'
p102098
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102099
sS'default'
p102100
g3
sS'name'
p102101
S'block'
p102102
sS'required'
p102103
I00
sS'group_name'
p102104
Nsa(dp102105
S'description'
p102106
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102107
sS'cpp_type'
p102108
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102109
sS'default'
p102110
g3
sS'name'
p102111
S'boundary'
p102112
sS'required'
p102113
I00
sS'group_name'
p102114
Nsa(dp102115
S'description'
p102116
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102117
sS'cpp_type'
p102118
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102119
sS'default'
p102120
g3
sS'name'
p102121
S'control_tags'
p102122
sS'required'
p102123
I00
sS'group_name'
p102124
Nsa(dp102125
S'name'
p102126
S'execute_on'
p102127
sS'cpp_type'
p102128
S'MultiMooseEnum'
p102129
sS'default'
p102130
S'TIMESTEP_END'
p102131
sS'description'
p102132
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102133
sS'required'
p102134
I00
sS'options'
p102135
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102136
sS'group_name'
p102137
Nsa(dp102138
S'description'
p102139
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102140
sS'cpp_type'
p102141
S'std::vector<OutputName, std::allocator<OutputName> >'
p102142
sS'default'
p102143
g3
sS'name'
p102144
S'outputs'
p102145
sS'required'
p102146
I00
sS'group_name'
p102147
S'Advanced'
p102148
sa(dp102149
S'description'
p102150
S'The seed for the master random number generator\n'
p102151
sS'cpp_type'
p102152
S'unsigned int'
p102153
sS'default'
p102154
S'0'
p102155
sS'name'
p102156
S'seed'
p102157
sS'required'
p102158
I00
sS'group_name'
p102159
S'Advanced'
p102160
sa(dp102161
S'description'
p102162
g3
sS'cpp_type'
p102163
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102164
sS'default'
p102165
S'NodalProxyMaxValue'
p102166
sS'name'
p102167
S'type'
p102168
sS'required'
p102169
I00
sS'group_name'
p102170
Nsa(dp102171
S'description'
p102172
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102173
sS'cpp_type'
p102174
S'bool'
p102175
sS'default'
p102176
S'0'
p102177
sS'name'
p102178
S'use_displaced_mesh'
p102179
sS'required'
p102180
I00
sS'group_name'
p102181
S'Advanced'
p102182
sa(dp102183
S'description'
p102184
S'The name of the variable that this postprocessor operates on\n'
p102185
sS'cpp_type'
p102186
S'std::vector<VariableName>'
p102187
sS'default'
p102188
g3
sS'name'
p102189
S'variable'
p102190
sS'required'
p102191
I00
sS'group_name'
p102192
NsasS'name'
p102193
S'/Postprocessors/NodalProxyMaxValue'
p102194
sa(dp102195
S'description'
p102196
g3
sS'subblocks'
p102197
NsS'parameters'
p102198
(lp102199
(dp102200
S'description'
p102201
S'The list of block ids (SubdomainID) that this object will be applied\n'
p102202
sS'cpp_type'
p102203
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p102204
sS'default'
p102205
g3
sS'name'
p102206
S'block'
p102207
sS'required'
p102208
I00
sS'group_name'
p102209
Nsa(dp102210
S'description'
p102211
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p102212
sS'cpp_type'
p102213
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p102214
sS'default'
p102215
g3
sS'name'
p102216
S'boundary'
p102217
sS'required'
p102218
I00
sS'group_name'
p102219
Nsa(dp102220
S'description'
p102221
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102222
sS'cpp_type'
p102223
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102224
sS'default'
p102225
g3
sS'name'
p102226
S'control_tags'
p102227
sS'required'
p102228
I00
sS'group_name'
p102229
Nsa(dp102230
S'name'
p102231
S'execute_on'
p102232
sS'cpp_type'
p102233
S'MultiMooseEnum'
p102234
sS'default'
p102235
S'TIMESTEP_END'
p102236
sS'description'
p102237
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102238
sS'required'
p102239
I00
sS'options'
p102240
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102241
sS'group_name'
p102242
Nsa(dp102243
S'description'
p102244
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102245
sS'cpp_type'
p102246
S'std::vector<OutputName, std::allocator<OutputName> >'
p102247
sS'default'
p102248
g3
sS'name'
p102249
S'outputs'
p102250
sS'required'
p102251
I00
sS'group_name'
p102252
S'Advanced'
p102253
sa(dp102254
S'description'
p102255
S'The seed for the master random number generator\n'
p102256
sS'cpp_type'
p102257
S'unsigned int'
p102258
sS'default'
p102259
S'0'
p102260
sS'name'
p102261
S'seed'
p102262
sS'required'
p102263
I00
sS'group_name'
p102264
S'Advanced'
p102265
sa(dp102266
S'description'
p102267
g3
sS'cpp_type'
p102268
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102269
sS'default'
p102270
S'NodalSum'
p102271
sS'name'
p102272
S'type'
p102273
sS'required'
p102274
I00
sS'group_name'
p102275
Nsa(dp102276
S'description'
p102277
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102278
sS'cpp_type'
p102279
S'bool'
p102280
sS'default'
p102281
S'0'
p102282
sS'name'
p102283
S'use_displaced_mesh'
p102284
sS'required'
p102285
I00
sS'group_name'
p102286
S'Advanced'
p102287
sa(dp102288
S'description'
p102289
S'The name of the variable that this postprocessor operates on\n'
p102290
sS'cpp_type'
p102291
S'std::vector<VariableName>'
p102292
sS'default'
p102293
g3
sS'name'
p102294
S'variable'
p102295
sS'required'
p102296
I00
sS'group_name'
p102297
NsasS'name'
p102298
S'/Postprocessors/NodalSum'
p102299
sa(dp102300
S'description'
p102301
g3
sS'subblocks'
p102302
NsS'parameters'
p102303
(lp102304
(dp102305
S'description'
p102306
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102307
sS'cpp_type'
p102308
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102309
sS'default'
p102310
g3
sS'name'
p102311
S'control_tags'
p102312
sS'required'
p102313
I00
sS'group_name'
p102314
Nsa(dp102315
S'name'
p102316
S'execute_on'
p102317
sS'cpp_type'
p102318
S'MultiMooseEnum'
p102319
sS'default'
p102320
S'TIMESTEP_END'
p102321
sS'description'
p102322
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102323
sS'required'
p102324
I00
sS'options'
p102325
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102326
sS'group_name'
p102327
Nsa(dp102328
S'description'
p102329
S'The ID of the node where we monitor\n'
p102330
sS'cpp_type'
p102331
S'unsigned int'
p102332
sS'default'
p102333
g3
sS'name'
p102334
S'nodeid'
p102335
sS'required'
p102336
I01
sS'group_name'
p102337
Nsa(dp102338
S'description'
p102339
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102340
sS'cpp_type'
p102341
S'std::vector<OutputName, std::allocator<OutputName> >'
p102342
sS'default'
p102343
g3
sS'name'
p102344
S'outputs'
p102345
sS'required'
p102346
I00
sS'group_name'
p102347
S'Advanced'
p102348
sa(dp102349
S'description'
p102350
S'A scale factor to be applied to the variable\n'
p102351
sS'cpp_type'
p102352
S'double'
p102353
sS'default'
p102354
S'1'
p102355
sS'name'
p102356
S'scale_factor'
p102357
sS'required'
p102358
I00
sS'group_name'
p102359
Nsa(dp102360
S'description'
p102361
g3
sS'cpp_type'
p102362
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102363
sS'default'
p102364
S'NodalVariableValue'
p102365
sS'name'
p102366
S'type'
p102367
sS'required'
p102368
I00
sS'group_name'
p102369
Nsa(dp102370
S'description'
p102371
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102372
sS'cpp_type'
p102373
S'bool'
p102374
sS'default'
p102375
S'0'
p102376
sS'name'
p102377
S'use_displaced_mesh'
p102378
sS'required'
p102379
I00
sS'group_name'
p102380
S'Advanced'
p102381
sa(dp102382
S'description'
p102383
S'The variable to be monitored\n'
p102384
sS'cpp_type'
p102385
S'VariableName'
p102386
sS'default'
p102387
g3
sS'name'
p102388
S'variable'
p102389
sS'required'
p102390
I01
sS'group_name'
p102391
NsasS'name'
p102392
S'/Postprocessors/NodalVariableValue'
p102393
sa(dp102394
S'description'
p102395
g3
sS'subblocks'
p102396
NsS'parameters'
p102397
(lp102398
(dp102399
S'description'
p102400
S'filename for Avrami analysis info (ln time and Avrami)\n'
p102401
sS'cpp_type'
p102402
S'FileName'
p102403
sS'default'
p102404
g3
sS'name'
p102405
S'Avrami_file'
p102406
sS'required'
p102407
I00
sS'group_name'
p102408
Nsa(dp102409
S'description'
p102410
S'An optional file name where bubble volumes can be output.\n'
p102411
sS'cpp_type'
p102412
S'FileName'
p102413
sS'default'
p102414
g3
sS'name'
p102415
S'bubble_volume_file'
p102416
sS'required'
p102417
I00
sS'group_name'
p102418
Nsa(dp102419
S'description'
p102420
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p102421
sS'cpp_type'
p102422
S'bool'
p102423
sS'default'
p102424
S'0'
p102425
sS'name'
p102426
S'compute_boundary_intersecting_volume'
p102427
sS'required'
p102428
I00
sS'group_name'
p102429
Nsa(dp102430
S'description'
p102431
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p102432
sS'cpp_type'
p102433
S'bool'
p102434
sS'default'
p102435
S'0'
p102436
sS'name'
p102437
S'condense_map_info'
p102438
sS'required'
p102439
I00
sS'group_name'
p102440
Nsa(dp102441
S'description'
p102442
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p102443
sS'cpp_type'
p102444
S'double'
p102445
sS'default'
p102446
g3
sS'name'
p102447
S'connecting_threshold'
p102448
sS'required'
p102449
I00
sS'group_name'
p102450
Nsa(dp102451
S'description'
p102452
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102453
sS'cpp_type'
p102454
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102455
sS'default'
p102456
g3
sS'name'
p102457
S'control_tags'
p102458
sS'required'
p102459
I00
sS'group_name'
p102460
Nsa(dp102461
S'description'
p102462
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p102463
sS'cpp_type'
p102464
S'PostprocessorName'
p102465
sS'default'
p102466
g3
sS'name'
p102467
S'elem_avg_value'
p102468
sS'required'
p102469
I00
sS'group_name'
p102470
Nsa(dp102471
S'description'
p102472
S'Instruct the UO to populate the variable index map.\n'
p102473
sS'cpp_type'
p102474
S'bool'
p102475
sS'default'
p102476
S'0'
p102477
sS'name'
p102478
S'enable_var_coloring'
p102479
sS'required'
p102480
I00
sS'group_name'
p102481
Nsa(dp102482
S'description'
p102483
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p102484
sS'cpp_type'
p102485
S'double'
p102486
sS'default'
p102487
S'-1'
p102488
sS'name'
p102489
S'equil_fraction'
p102490
sS'required'
p102491
I00
sS'group_name'
p102492
Nsa(dp102493
S'name'
p102494
S'execute_on'
p102495
sS'cpp_type'
p102496
S'MultiMooseEnum'
p102497
sS'default'
p102498
S'TIMESTEP_END'
p102499
sS'description'
p102500
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102501
sS'required'
p102502
I00
sS'options'
p102503
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102504
sS'group_name'
p102505
Nsa(dp102506
S'name'
p102507
S'flood_entity_type'
p102508
sS'cpp_type'
p102509
S'MooseEnum'
p102510
sS'default'
p102511
S'NODAL'
p102512
sS'description'
p102513
S'Determines whether the flood algorithm runs on nodes or elements\n'
p102514
sS'required'
p102515
I00
sS'options'
p102516
S'NODAL ELEMENTAL'
p102517
sS'group_name'
p102518
Nsa(dp102519
S'description'
p102520
S'Postprocessor from which to get mesh volume\n'
p102521
sS'cpp_type'
p102522
S'PostprocessorName'
p102523
sS'default'
p102524
g3
sS'name'
p102525
S'mesh_volume'
p102526
sS'required'
p102527
I01
sS'group_name'
p102528
Nsa(dp102529
S'description'
p102530
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102531
sS'cpp_type'
p102532
S'std::vector<OutputName, std::allocator<OutputName> >'
p102533
sS'default'
p102534
g3
sS'name'
p102535
S'outputs'
p102536
sS'required'
p102537
I00
sS'group_name'
p102538
S'Advanced'
p102539
sa(dp102540
S'description'
p102541
S'The threshold value for which a new bubble may be started\n'
p102542
sS'cpp_type'
p102543
S'double'
p102544
sS'default'
p102545
S'0.5'
p102546
sS'name'
p102547
S'threshold'
p102548
sS'required'
p102549
I00
sS'group_name'
p102550
Nsa(dp102551
S'description'
p102552
S'Calculate memory usage\n'
p102553
sS'cpp_type'
p102554
S'bool'
p102555
sS'default'
p102556
S'0'
p102557
sS'name'
p102558
S'track_memory_usage'
p102559
sS'required'
p102560
I00
sS'group_name'
p102561
Nsa(dp102562
S'description'
p102563
g3
sS'cpp_type'
p102564
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102565
sS'default'
p102566
S'NodalVolumeFraction'
p102567
sS'name'
p102568
S'type'
p102569
sS'required'
p102570
I00
sS'group_name'
p102571
Nsa(dp102572
S'description'
p102573
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102574
sS'cpp_type'
p102575
S'bool'
p102576
sS'default'
p102577
S'0'
p102578
sS'name'
p102579
S'use_displaced_mesh'
p102580
sS'required'
p102581
I00
sS'group_name'
p102582
S'Advanced'
p102583
sa(dp102584
S'description'
p102585
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p102586
sS'cpp_type'
p102587
S'bool'
p102588
sS'default'
p102589
S'0'
p102590
sS'name'
p102591
S'use_global_numbering'
p102592
sS'required'
p102593
I00
sS'group_name'
p102594
Nsa(dp102595
S'description'
p102596
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p102597
sS'cpp_type'
p102598
S'bool'
p102599
sS'default'
p102600
S'1'
p102601
sS'name'
p102602
S'use_less_than_threshold_comparison'
p102603
sS'required'
p102604
I00
sS'group_name'
p102605
Nsa(dp102606
S'description'
p102607
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p102608
sS'cpp_type'
p102609
S'bool'
p102610
sS'default'
p102611
S'1'
p102612
sS'name'
p102613
S'use_single_map'
p102614
sS'required'
p102615
I00
sS'group_name'
p102616
Nsa(dp102617
S'description'
p102618
S'The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p102619
sS'cpp_type'
p102620
S'std::vector<VariableName>'
p102621
sS'default'
p102622
g3
sS'name'
p102623
S'variable'
p102624
sS'required'
p102625
I01
sS'group_name'
p102626
NsasS'name'
p102627
S'/Postprocessors/NodalVolumeFraction'
p102628
sa(dp102629
S'description'
p102630
g3
sS'subblocks'
p102631
NsS'parameters'
p102632
(lp102633
(dp102634
S'description'
p102635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102636
sS'cpp_type'
p102637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102638
sS'default'
p102639
g3
sS'name'
p102640
S'control_tags'
p102641
sS'required'
p102642
I00
sS'group_name'
p102643
Nsa(dp102644
S'name'
p102645
S'execute_on'
p102646
sS'cpp_type'
p102647
S'MultiMooseEnum'
p102648
sS'default'
p102649
S'TIMESTEP_END'
p102650
sS'description'
p102651
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102652
sS'required'
p102653
I00
sS'options'
p102654
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102655
sS'group_name'
p102656
Nsa(dp102657
S'description'
p102658
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102659
sS'cpp_type'
p102660
S'std::vector<OutputName, std::allocator<OutputName> >'
p102661
sS'default'
p102662
g3
sS'name'
p102663
S'outputs'
p102664
sS'required'
p102665
I00
sS'group_name'
p102666
S'Advanced'
p102667
sa(dp102668
S'description'
p102669
g3
sS'cpp_type'
p102670
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102671
sS'default'
p102672
S'NumDOFs'
p102673
sS'name'
p102674
S'type'
p102675
sS'required'
p102676
I00
sS'group_name'
p102677
Nsa(dp102678
S'description'
p102679
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102680
sS'cpp_type'
p102681
S'bool'
p102682
sS'default'
p102683
S'0'
p102684
sS'name'
p102685
S'use_displaced_mesh'
p102686
sS'required'
p102687
I00
sS'group_name'
p102688
S'Advanced'
p102689
sasS'name'
p102690
S'/Postprocessors/NumDOFs'
p102691
sa(dp102692
S'description'
p102693
g3
sS'subblocks'
p102694
NsS'parameters'
p102695
(lp102696
(dp102697
S'description'
p102698
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102699
sS'cpp_type'
p102700
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102701
sS'default'
p102702
g3
sS'name'
p102703
S'control_tags'
p102704
sS'required'
p102705
I00
sS'group_name'
p102706
Nsa(dp102707
S'name'
p102708
S'execute_on'
p102709
sS'cpp_type'
p102710
S'MultiMooseEnum'
p102711
sS'default'
p102712
S'TIMESTEP_END'
p102713
sS'description'
p102714
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102715
sS'required'
p102716
I00
sS'options'
p102717
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102718
sS'group_name'
p102719
Nsa(dp102720
S'description'
p102721
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102722
sS'cpp_type'
p102723
S'std::vector<OutputName, std::allocator<OutputName> >'
p102724
sS'default'
p102725
g3
sS'name'
p102726
S'outputs'
p102727
sS'required'
p102728
I00
sS'group_name'
p102729
S'Advanced'
p102730
sa(dp102731
S'description'
p102732
g3
sS'cpp_type'
p102733
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102734
sS'default'
p102735
S'NumElems'
p102736
sS'name'
p102737
S'type'
p102738
sS'required'
p102739
I00
sS'group_name'
p102740
Nsa(dp102741
S'description'
p102742
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102743
sS'cpp_type'
p102744
S'bool'
p102745
sS'default'
p102746
S'0'
p102747
sS'name'
p102748
S'use_displaced_mesh'
p102749
sS'required'
p102750
I00
sS'group_name'
p102751
S'Advanced'
p102752
sasS'name'
p102753
S'/Postprocessors/NumElems'
p102754
sa(dp102755
S'description'
p102756
g3
sS'subblocks'
p102757
NsS'parameters'
p102758
(lp102759
(dp102760
S'description'
p102761
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102762
sS'cpp_type'
p102763
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102764
sS'default'
p102765
g3
sS'name'
p102766
S'control_tags'
p102767
sS'required'
p102768
I00
sS'group_name'
p102769
Nsa(dp102770
S'name'
p102771
S'execute_on'
p102772
sS'cpp_type'
p102773
S'MultiMooseEnum'
p102774
sS'default'
p102775
S'TIMESTEP_END'
p102776
sS'description'
p102777
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102778
sS'required'
p102779
I00
sS'options'
p102780
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102781
sS'group_name'
p102782
Nsa(dp102783
S'description'
p102784
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102785
sS'cpp_type'
p102786
S'std::vector<OutputName, std::allocator<OutputName> >'
p102787
sS'default'
p102788
g3
sS'name'
p102789
S'outputs'
p102790
sS'required'
p102791
I00
sS'group_name'
p102792
S'Advanced'
p102793
sa(dp102794
S'description'
p102795
g3
sS'cpp_type'
p102796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102797
sS'default'
p102798
S'NumLinearIterations'
p102799
sS'name'
p102800
S'type'
p102801
sS'required'
p102802
I00
sS'group_name'
p102803
Nsa(dp102804
S'description'
p102805
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102806
sS'cpp_type'
p102807
S'bool'
p102808
sS'default'
p102809
S'0'
p102810
sS'name'
p102811
S'use_displaced_mesh'
p102812
sS'required'
p102813
I00
sS'group_name'
p102814
S'Advanced'
p102815
sasS'name'
p102816
S'/Postprocessors/NumLinearIterations'
p102817
sa(dp102818
S'description'
p102819
g3
sS'subblocks'
p102820
NsS'parameters'
p102821
(lp102822
(dp102823
S'description'
p102824
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102825
sS'cpp_type'
p102826
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102827
sS'default'
p102828
g3
sS'name'
p102829
S'control_tags'
p102830
sS'required'
p102831
I00
sS'group_name'
p102832
Nsa(dp102833
S'name'
p102834
S'execute_on'
p102835
sS'cpp_type'
p102836
S'MultiMooseEnum'
p102837
sS'default'
p102838
S'TIMESTEP_END'
p102839
sS'description'
p102840
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102841
sS'required'
p102842
I00
sS'options'
p102843
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102844
sS'group_name'
p102845
Nsa(dp102846
S'description'
p102847
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102848
sS'cpp_type'
p102849
S'std::vector<OutputName, std::allocator<OutputName> >'
p102850
sS'default'
p102851
g3
sS'name'
p102852
S'outputs'
p102853
sS'required'
p102854
I00
sS'group_name'
p102855
S'Advanced'
p102856
sa(dp102857
S'description'
p102858
g3
sS'cpp_type'
p102859
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102860
sS'default'
p102861
S'NumNodes'
p102862
sS'name'
p102863
S'type'
p102864
sS'required'
p102865
I00
sS'group_name'
p102866
Nsa(dp102867
S'description'
p102868
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102869
sS'cpp_type'
p102870
S'bool'
p102871
sS'default'
p102872
S'0'
p102873
sS'name'
p102874
S'use_displaced_mesh'
p102875
sS'required'
p102876
I00
sS'group_name'
p102877
S'Advanced'
p102878
sasS'name'
p102879
S'/Postprocessors/NumNodes'
p102880
sa(dp102881
S'description'
p102882
g3
sS'subblocks'
p102883
NsS'parameters'
p102884
(lp102885
(dp102886
S'description'
p102887
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p102888
sS'cpp_type'
p102889
S'bool'
p102890
sS'default'
p102891
S'0'
p102892
sS'name'
p102893
S'accumulate_over_step'
p102894
sS'required'
p102895
I00
sS'group_name'
p102896
Nsa(dp102897
S'description'
p102898
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102899
sS'cpp_type'
p102900
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102901
sS'default'
p102902
g3
sS'name'
p102903
S'control_tags'
p102904
sS'required'
p102905
I00
sS'group_name'
p102906
Nsa(dp102907
S'name'
p102908
S'execute_on'
p102909
sS'cpp_type'
p102910
S'MultiMooseEnum'
p102911
sS'default'
p102912
S'TIMESTEP_END'
p102913
sS'description'
p102914
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102915
sS'required'
p102916
I00
sS'options'
p102917
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102918
sS'group_name'
p102919
Nsa(dp102920
S'description'
p102921
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102922
sS'cpp_type'
p102923
S'std::vector<OutputName, std::allocator<OutputName> >'
p102924
sS'default'
p102925
g3
sS'name'
p102926
S'outputs'
p102927
sS'required'
p102928
I00
sS'group_name'
p102929
S'Advanced'
p102930
sa(dp102931
S'description'
p102932
g3
sS'cpp_type'
p102933
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102934
sS'default'
p102935
S'NumNonlinearIterations'
p102936
sS'name'
p102937
S'type'
p102938
sS'required'
p102939
I00
sS'group_name'
p102940
Nsa(dp102941
S'description'
p102942
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p102943
sS'cpp_type'
p102944
S'bool'
p102945
sS'default'
p102946
S'0'
p102947
sS'name'
p102948
S'use_displaced_mesh'
p102949
sS'required'
p102950
I00
sS'group_name'
p102951
S'Advanced'
p102952
sasS'name'
p102953
S'/Postprocessors/NumNonlinearIterations'
p102954
sa(dp102955
S'description'
p102956
g3
sS'subblocks'
p102957
NsS'parameters'
p102958
(lp102959
(dp102960
S'description'
p102961
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p102962
sS'cpp_type'
p102963
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p102964
sS'default'
p102965
g3
sS'name'
p102966
S'control_tags'
p102967
sS'required'
p102968
I00
sS'group_name'
p102969
Nsa(dp102970
S'name'
p102971
S'execute_on'
p102972
sS'cpp_type'
p102973
S'MultiMooseEnum'
p102974
sS'default'
p102975
S'TIMESTEP_END'
p102976
sS'description'
p102977
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p102978
sS'required'
p102979
I00
sS'options'
p102980
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p102981
sS'group_name'
p102982
Nsa(dp102983
S'description'
p102984
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p102985
sS'cpp_type'
p102986
S'std::vector<OutputName, std::allocator<OutputName> >'
p102987
sS'default'
p102988
g3
sS'name'
p102989
S'outputs'
p102990
sS'required'
p102991
I00
sS'group_name'
p102992
S'Advanced'
p102993
sa(dp102994
S'description'
p102995
g3
sS'cpp_type'
p102996
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p102997
sS'default'
p102998
S'NumPicardIterations'
p102999
sS'name'
p103000
S'type'
p103001
sS'required'
p103002
I00
sS'group_name'
p103003
Nsa(dp103004
S'description'
p103005
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103006
sS'cpp_type'
p103007
S'bool'
p103008
sS'default'
p103009
S'0'
p103010
sS'name'
p103011
S'use_displaced_mesh'
p103012
sS'required'
p103013
I00
sS'group_name'
p103014
S'Advanced'
p103015
sasS'name'
p103016
S'/Postprocessors/NumPicardIterations'
p103017
sa(dp103018
S'description'
p103019
g3
sS'subblocks'
p103020
NsS'parameters'
p103021
(lp103022
(dp103023
S'description'
p103024
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103025
sS'cpp_type'
p103026
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103027
sS'default'
p103028
g3
sS'name'
p103029
S'control_tags'
p103030
sS'required'
p103031
I00
sS'group_name'
p103032
Nsa(dp103033
S'name'
p103034
S'execute_on'
p103035
sS'cpp_type'
p103036
S'MultiMooseEnum'
p103037
sS'default'
p103038
S'TIMESTEP_END'
p103039
sS'description'
p103040
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103041
sS'required'
p103042
I00
sS'options'
p103043
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103044
sS'group_name'
p103045
Nsa(dp103046
S'description'
p103047
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103048
sS'cpp_type'
p103049
S'std::vector<OutputName, std::allocator<OutputName> >'
p103050
sS'default'
p103051
g3
sS'name'
p103052
S'outputs'
p103053
sS'required'
p103054
I00
sS'group_name'
p103055
S'Advanced'
p103056
sa(dp103057
S'description'
p103058
g3
sS'cpp_type'
p103059
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103060
sS'default'
p103061
S'NumResidualEvaluations'
p103062
sS'name'
p103063
S'type'
p103064
sS'required'
p103065
I00
sS'group_name'
p103066
Nsa(dp103067
S'description'
p103068
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103069
sS'cpp_type'
p103070
S'bool'
p103071
sS'default'
p103072
S'0'
p103073
sS'name'
p103074
S'use_displaced_mesh'
p103075
sS'required'
p103076
I00
sS'group_name'
p103077
S'Advanced'
p103078
sasS'name'
p103079
S'/Postprocessors/NumResidualEvaluations'
p103080
sa(dp103081
S'description'
p103082
g3
sS'subblocks'
p103083
NsS'parameters'
p103084
(lp103085
(dp103086
S'description'
p103087
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103088
sS'cpp_type'
p103089
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103090
sS'default'
p103091
g3
sS'name'
p103092
S'control_tags'
p103093
sS'required'
p103094
I00
sS'group_name'
p103095
Nsa(dp103096
S'name'
p103097
S'execute_on'
p103098
sS'cpp_type'
p103099
S'MultiMooseEnum'
p103100
sS'default'
p103101
S'TIMESTEP_END'
p103102
sS'description'
p103103
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103104
sS'required'
p103105
I00
sS'options'
p103106
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103107
sS'group_name'
p103108
Nsa(dp103109
S'description'
p103110
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103111
sS'cpp_type'
p103112
S'std::vector<OutputName, std::allocator<OutputName> >'
p103113
sS'default'
p103114
g3
sS'name'
p103115
S'outputs'
p103116
sS'required'
p103117
I00
sS'group_name'
p103118
S'Advanced'
p103119
sa(dp103120
S'name'
p103121
S'system'
p103122
sS'cpp_type'
p103123
S'MooseEnum'
p103124
sS'default'
p103125
S'nonlinear'
p103126
sS'description'
p103127
S'The system for which you want to print the number of variables.\n'
p103128
sS'required'
p103129
I00
sS'options'
p103130
S'nonlinear auxiliary'
p103131
sS'group_name'
p103132
Nsa(dp103133
S'description'
p103134
g3
sS'cpp_type'
p103135
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103136
sS'default'
p103137
S'NumVars'
p103138
sS'name'
p103139
S'type'
p103140
sS'required'
p103141
I00
sS'group_name'
p103142
Nsa(dp103143
S'description'
p103144
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103145
sS'cpp_type'
p103146
S'bool'
p103147
sS'default'
p103148
S'0'
p103149
sS'name'
p103150
S'use_displaced_mesh'
p103151
sS'required'
p103152
I00
sS'group_name'
p103153
S'Advanced'
p103154
sasS'name'
p103155
S'/Postprocessors/NumVars'
p103156
sa(dp103157
S'description'
p103158
g3
sS'subblocks'
p103159
NsS'parameters'
p103160
(lp103161
(dp103162
S'description'
p103163
S'The list of block ids (SubdomainID) that this object will be applied\n'
p103164
sS'cpp_type'
p103165
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p103166
sS'default'
p103167
g3
sS'name'
p103168
S'block'
p103169
sS'required'
p103170
I00
sS'group_name'
p103171
Nsa(dp103172
S'description'
p103173
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103174
sS'cpp_type'
p103175
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103176
sS'default'
p103177
g3
sS'name'
p103178
S'control_tags'
p103179
sS'required'
p103180
I00
sS'group_name'
p103181
Nsa(dp103182
S'name'
p103183
S'execute_on'
p103184
sS'cpp_type'
p103185
S'MultiMooseEnum'
p103186
sS'default'
p103187
S'TIMESTEP_END'
p103188
sS'description'
p103189
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103190
sS'required'
p103191
I00
sS'options'
p103192
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103193
sS'group_name'
p103194
Nsa(dp103195
S'description'
p103196
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103197
sS'cpp_type'
p103198
S'std::vector<OutputName, std::allocator<OutputName> >'
p103199
sS'default'
p103200
g3
sS'name'
p103201
S'outputs'
p103202
sS'required'
p103203
I00
sS'group_name'
p103204
S'Advanced'
p103205
sa(dp103206
S'description'
p103207
S'The seed for the master random number generator\n'
p103208
sS'cpp_type'
p103209
S'unsigned int'
p103210
sS'default'
p103211
S'0'
p103212
sS'name'
p103213
S'seed'
p103214
sS'required'
p103215
I00
sS'group_name'
p103216
S'Advanced'
p103217
sa(dp103218
S'description'
p103219
S'Temperature of simulation\n'
p103220
sS'cpp_type'
p103221
S'double'
p103222
sS'default'
p103223
S'1833'
p103224
sS'name'
p103225
S'temp'
p103226
sS'required'
p103227
I00
sS'group_name'
p103228
Nsa(dp103229
S'description'
p103230
g3
sS'cpp_type'
p103231
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103232
sS'default'
p103233
S'PFCElementEnergyIntegral'
p103234
sS'name'
p103235
S'type'
p103236
sS'required'
p103237
I00
sS'group_name'
p103238
Nsa(dp103239
S'description'
p103240
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103241
sS'cpp_type'
p103242
S'bool'
p103243
sS'default'
p103244
S'0'
p103245
sS'name'
p103246
S'use_displaced_mesh'
p103247
sS'required'
p103248
I00
sS'group_name'
p103249
S'Advanced'
p103250
sa(dp103251
S'description'
p103252
S'The name of the variable that this object operates on\n'
p103253
sS'cpp_type'
p103254
S'VariableName'
p103255
sS'default'
p103256
g3
sS'name'
p103257
S'variable'
p103258
sS'required'
p103259
I01
sS'group_name'
p103260
NsasS'name'
p103261
S'/Postprocessors/PFCElementEnergyIntegral'
p103262
sa(dp103263
S'description'
p103264
g3
sS'subblocks'
p103265
NsS'parameters'
p103266
(lp103267
(dp103268
S'description'
p103269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103270
sS'cpp_type'
p103271
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103272
sS'default'
p103273
g3
sS'name'
p103274
S'control_tags'
p103275
sS'required'
p103276
I00
sS'group_name'
p103277
Nsa(dp103278
S'name'
p103279
S'execute_on'
p103280
sS'cpp_type'
p103281
S'MultiMooseEnum'
p103282
sS'default'
p103283
S'TIMESTEP_END'
p103284
sS'description'
p103285
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103286
sS'required'
p103287
I00
sS'options'
p103288
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103289
sS'group_name'
p103290
Nsa(dp103291
S'description'
p103292
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103293
sS'cpp_type'
p103294
S'std::vector<OutputName, std::allocator<OutputName> >'
p103295
sS'default'
p103296
g3
sS'name'
p103297
S'outputs'
p103298
sS'required'
p103299
I00
sS'group_name'
p103300
S'Advanced'
p103301
sa(dp103302
S'description'
p103303
S'The name of the postprocessor used for exit criterion\n'
p103304
sS'cpp_type'
p103305
S'PostprocessorName'
p103306
sS'default'
p103307
g3
sS'name'
p103308
S'postprocessor'
p103309
sS'required'
p103310
I01
sS'group_name'
p103311
Nsa(dp103312
S'description'
p103313
g3
sS'cpp_type'
p103314
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103315
sS'default'
p103316
S'PercentChangePostprocessor'
p103317
sS'name'
p103318
S'type'
p103319
sS'required'
p103320
I00
sS'group_name'
p103321
Nsa(dp103322
S'description'
p103323
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103324
sS'cpp_type'
p103325
S'bool'
p103326
sS'default'
p103327
S'0'
p103328
sS'name'
p103329
S'use_displaced_mesh'
p103330
sS'required'
p103331
I00
sS'group_name'
p103332
S'Advanced'
p103333
sasS'name'
p103334
S'/Postprocessors/PercentChangePostprocessor'
p103335
sa(dp103336
S'description'
p103337
g3
sS'subblocks'
p103338
NsS'parameters'
p103339
(lp103340
(dp103341
S'name'
p103342
S'column'
p103343
sS'cpp_type'
p103344
S'MooseEnum'
p103345
sS'default'
p103346
g3
sS'description'
p103347
S'The column you want the value of.\n'
p103348
sS'required'
p103349
I01
sS'options'
p103350
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p103351
sS'group_name'
p103352
Nsa(dp103353
S'description'
p103354
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103355
sS'cpp_type'
p103356
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103357
sS'default'
p103358
g3
sS'name'
p103359
S'control_tags'
p103360
sS'required'
p103361
I00
sS'group_name'
p103362
Nsa(dp103363
S'description'
p103364
S'The name of the event.\n'
p103365
sS'cpp_type'
p103366
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103367
sS'default'
p103368
g3
sS'name'
p103369
S'event'
p103370
sS'required'
p103371
I01
sS'group_name'
p103372
Nsa(dp103373
S'name'
p103374
S'execute_on'
p103375
sS'cpp_type'
p103376
S'MultiMooseEnum'
p103377
sS'default'
p103378
S'TIMESTEP_END'
p103379
sS'description'
p103380
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103381
sS'required'
p103382
I00
sS'options'
p103383
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103384
sS'group_name'
p103385
Nsa(dp103386
S'description'
p103387
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103388
sS'cpp_type'
p103389
S'std::vector<OutputName, std::allocator<OutputName> >'
p103390
sS'default'
p103391
g3
sS'name'
p103392
S'outputs'
p103393
sS'required'
p103394
I00
sS'group_name'
p103395
S'Advanced'
p103396
sa(dp103397
S'description'
p103398
g3
sS'cpp_type'
p103399
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103400
sS'default'
p103401
S'PerformanceData'
p103402
sS'name'
p103403
S'type'
p103404
sS'required'
p103405
I00
sS'group_name'
p103406
Nsa(dp103407
S'description'
p103408
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103409
sS'cpp_type'
p103410
S'bool'
p103411
sS'default'
p103412
S'0'
p103413
sS'name'
p103414
S'use_displaced_mesh'
p103415
sS'required'
p103416
I00
sS'group_name'
p103417
S'Advanced'
p103418
sasS'name'
p103419
S'/Postprocessors/PerformanceData'
p103420
sa(dp103421
S'description'
p103422
g3
sS'subblocks'
p103423
NsS'parameters'
p103424
(lp103425
(dp103426
S'description'
p103427
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103428
sS'cpp_type'
p103429
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103430
sS'default'
p103431
g3
sS'name'
p103432
S'control_tags'
p103433
sS'required'
p103434
I00
sS'group_name'
p103435
Nsa(dp103436
S'name'
p103437
S'execute_on'
p103438
sS'cpp_type'
p103439
S'MultiMooseEnum'
p103440
sS'default'
p103441
S'TIMESTEP_END'
p103442
sS'description'
p103443
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103444
sS'required'
p103445
I00
sS'options'
p103446
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103447
sS'group_name'
p103448
Nsa(dp103449
S'description'
p103450
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103451
sS'cpp_type'
p103452
S'std::vector<OutputName, std::allocator<OutputName> >'
p103453
sS'default'
p103454
g3
sS'name'
p103455
S'outputs'
p103456
sS'required'
p103457
I00
sS'group_name'
p103458
S'Advanced'
p103459
sa(dp103460
S'description'
p103461
S'The physical point where the solution will be evaluated.\n'
p103462
sS'cpp_type'
p103463
S'libMesh::Point'
p103464
sS'default'
p103465
g3
sS'name'
p103466
S'point'
p103467
sS'required'
p103468
I01
sS'group_name'
p103469
Nsa(dp103470
S'description'
p103471
g3
sS'cpp_type'
p103472
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103473
sS'default'
p103474
S'PointValue'
p103475
sS'name'
p103476
S'type'
p103477
sS'required'
p103478
I00
sS'group_name'
p103479
Nsa(dp103480
S'description'
p103481
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103482
sS'cpp_type'
p103483
S'bool'
p103484
sS'default'
p103485
S'0'
p103486
sS'name'
p103487
S'use_displaced_mesh'
p103488
sS'required'
p103489
I00
sS'group_name'
p103490
S'Advanced'
p103491
sa(dp103492
S'description'
p103493
S'The name of the variable that this postprocessor operates on.\n'
p103494
sS'cpp_type'
p103495
S'VariableName'
p103496
sS'default'
p103497
g3
sS'name'
p103498
S'variable'
p103499
sS'required'
p103500
I01
sS'group_name'
p103501
NsasS'name'
p103502
S'/Postprocessors/PointValue'
p103503
sa(dp103504
S'description'
p103505
g3
sS'subblocks'
p103506
NsS'parameters'
p103507
(lp103508
(dp103509
S'description'
p103510
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103511
sS'cpp_type'
p103512
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103513
sS'default'
p103514
g3
sS'name'
p103515
S'control_tags'
p103516
sS'required'
p103517
I00
sS'group_name'
p103518
Nsa(dp103519
S'name'
p103520
S'execute_on'
p103521
sS'cpp_type'
p103522
S'MultiMooseEnum'
p103523
sS'default'
p103524
S'TIMESTEP_END'
p103525
sS'description'
p103526
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103527
sS'required'
p103528
I00
sS'options'
p103529
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103530
sS'group_name'
p103531
Nsa(dp103532
S'description'
p103533
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103534
sS'cpp_type'
p103535
S'std::vector<OutputName, std::allocator<OutputName> >'
p103536
sS'default'
p103537
g3
sS'name'
p103538
S'outputs'
p103539
sS'required'
p103540
I00
sS'group_name'
p103541
S'Advanced'
p103542
sa(dp103543
S'description'
p103544
S'The input parameter to control.\n'
p103545
sS'cpp_type'
p103546
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103547
sS'default'
p103548
g3
sS'name'
p103549
S'parameter'
p103550
sS'required'
p103551
I01
sS'group_name'
p103552
Nsa(dp103553
S'description'
p103554
g3
sS'cpp_type'
p103555
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103556
sS'default'
p103557
S'RealControlParameterReporter'
p103558
sS'name'
p103559
S'type'
p103560
sS'required'
p103561
I00
sS'group_name'
p103562
Nsa(dp103563
S'description'
p103564
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103565
sS'cpp_type'
p103566
S'bool'
p103567
sS'default'
p103568
S'0'
p103569
sS'name'
p103570
S'use_displaced_mesh'
p103571
sS'required'
p103572
I00
sS'group_name'
p103573
S'Advanced'
p103574
sasS'name'
p103575
S'/Postprocessors/RealControlParameterReporter'
p103576
sa(dp103577
S'description'
p103578
g3
sS'subblocks'
p103579
NsS'parameters'
p103580
(lp103581
(dp103582
S'description'
p103583
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103584
sS'cpp_type'
p103585
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103586
sS'default'
p103587
g3
sS'name'
p103588
S'control_tags'
p103589
sS'required'
p103590
I00
sS'group_name'
p103591
Nsa(dp103592
S'description'
p103593
S'The default value\n'
p103594
sS'cpp_type'
p103595
S'double'
p103596
sS'default'
p103597
g3
sS'name'
p103598
S'default'
p103599
sS'required'
p103600
I00
sS'group_name'
p103601
Nsa(dp103602
S'name'
p103603
S'execute_on'
p103604
sS'cpp_type'
p103605
S'MultiMooseEnum'
p103606
sS'default'
p103607
S'TIMESTEP_END'
p103608
sS'description'
p103609
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103610
sS'required'
p103611
I00
sS'options'
p103612
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103613
sS'group_name'
p103614
Nsa(dp103615
S'description'
p103616
S'Initialize the old postprocessor value with the default value\n'
p103617
sS'cpp_type'
p103618
S'bool'
p103619
sS'default'
p103620
S'1'
p103621
sS'name'
p103622
S'initialize_old'
p103623
sS'required'
p103624
I00
sS'group_name'
p103625
Nsa(dp103626
S'description'
p103627
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103628
sS'cpp_type'
p103629
S'std::vector<OutputName, std::allocator<OutputName> >'
p103630
sS'default'
p103631
g3
sS'name'
p103632
S'outputs'
p103633
sS'required'
p103634
I00
sS'group_name'
p103635
S'Advanced'
p103636
sa(dp103637
S'description'
p103638
g3
sS'cpp_type'
p103639
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103640
sS'default'
p103641
S'Receiver'
p103642
sS'name'
p103643
S'type'
p103644
sS'required'
p103645
I00
sS'group_name'
p103646
Nsa(dp103647
S'description'
p103648
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103649
sS'cpp_type'
p103650
S'bool'
p103651
sS'default'
p103652
S'0'
p103653
sS'name'
p103654
S'use_displaced_mesh'
p103655
sS'required'
p103656
I00
sS'group_name'
p103657
S'Advanced'
p103658
sasS'name'
p103659
S'/Postprocessors/Receiver'
p103660
sa(dp103661
S'description'
p103662
g3
sS'subblocks'
p103663
NsS'parameters'
p103664
(lp103665
(dp103666
S'description'
p103667
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103668
sS'cpp_type'
p103669
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103670
sS'default'
p103671
g3
sS'name'
p103672
S'control_tags'
p103673
sS'required'
p103674
I00
sS'group_name'
p103675
Nsa(dp103676
S'name'
p103677
S'execute_on'
p103678
sS'cpp_type'
p103679
S'MultiMooseEnum'
p103680
sS'default'
p103681
S'TIMESTEP_END'
p103682
sS'description'
p103683
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103684
sS'required'
p103685
I00
sS'options'
p103686
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103687
sS'group_name'
p103688
Nsa(dp103689
S'description'
p103690
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103691
sS'cpp_type'
p103692
S'std::vector<OutputName, std::allocator<OutputName> >'
p103693
sS'default'
p103694
g3
sS'name'
p103695
S'outputs'
p103696
sS'required'
p103697
I00
sS'group_name'
p103698
S'Advanced'
p103699
sa(dp103700
S'description'
p103701
g3
sS'cpp_type'
p103702
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103703
sS'default'
p103704
S'Residual'
p103705
sS'name'
p103706
S'type'
p103707
sS'required'
p103708
I00
sS'group_name'
p103709
Nsa(dp103710
S'description'
p103711
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103712
sS'cpp_type'
p103713
S'bool'
p103714
sS'default'
p103715
S'0'
p103716
sS'name'
p103717
S'use_displaced_mesh'
p103718
sS'required'
p103719
I00
sS'group_name'
p103720
S'Advanced'
p103721
sasS'name'
p103722
S'/Postprocessors/Residual'
p103723
sa(dp103724
S'description'
p103725
S'Records total flow INTO an excavation (if quantity is positive then flow has occured from rock into excavation void)\n'
p103726
sS'subblocks'
p103727
NsS'parameters'
p103728
(lp103729
(dp103730
S'description'
p103731
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p103732
sS'cpp_type'
p103733
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p103734
sS'default'
p103735
g3
sS'name'
p103736
S'boundary'
p103737
sS'required'
p103738
I00
sS'group_name'
p103739
Nsa(dp103740
S'description'
p103741
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103742
sS'cpp_type'
p103743
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103744
sS'default'
p103745
g3
sS'name'
p103746
S'control_tags'
p103747
sS'required'
p103748
I00
sS'group_name'
p103749
Nsa(dp103750
S'description'
p103751
S'The function describing the excavation geometry (type RichardsExcavGeom)\n'
p103752
sS'cpp_type'
p103753
S'FunctionName'
p103754
sS'default'
p103755
g3
sS'name'
p103756
S'excav_geom_function'
p103757
sS'required'
p103758
I01
sS'group_name'
p103759
Nsa(dp103760
S'name'
p103761
S'execute_on'
p103762
sS'cpp_type'
p103763
S'MultiMooseEnum'
p103764
sS'default'
p103765
S'TIMESTEP_END'
p103766
sS'description'
p103767
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103768
sS'required'
p103769
I00
sS'options'
p103770
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103771
sS'group_name'
p103772
Nsa(dp103773
S'description'
p103774
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103775
sS'cpp_type'
p103776
S'std::vector<OutputName, std::allocator<OutputName> >'
p103777
sS'default'
p103778
g3
sS'name'
p103779
S'outputs'
p103780
sS'required'
p103781
I00
sS'group_name'
p103782
S'Advanced'
p103783
sa(dp103784
S'description'
p103785
S'The UserObject that holds the list of Richards variable names.\n'
p103786
sS'cpp_type'
p103787
S'UserObjectName'
p103788
sS'default'
p103789
g3
sS'name'
p103790
S'richardsVarNames_UO'
p103791
sS'required'
p103792
I01
sS'group_name'
p103793
Nsa(dp103794
S'description'
p103795
g3
sS'cpp_type'
p103796
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103797
sS'default'
p103798
S'RichardsExcavFlow'
p103799
sS'name'
p103800
S'type'
p103801
sS'required'
p103802
I00
sS'group_name'
p103803
Nsa(dp103804
S'description'
p103805
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103806
sS'cpp_type'
p103807
S'bool'
p103808
sS'default'
p103809
S'0'
p103810
sS'name'
p103811
S'use_displaced_mesh'
p103812
sS'required'
p103813
I00
sS'group_name'
p103814
S'Advanced'
p103815
sa(dp103816
S'description'
p103817
S'The name of the variable that this boundary condition applies to\n'
p103818
sS'cpp_type'
p103819
S'std::vector<VariableName>'
p103820
sS'default'
p103821
g3
sS'name'
p103822
S'variable'
p103823
sS'required'
p103824
I00
sS'group_name'
p103825
NsasS'name'
p103826
S'/Postprocessors/RichardsExcavFlow'
p103827
sa(dp103828
S'description'
p103829
g3
sS'subblocks'
p103830
NsS'parameters'
p103831
(lp103832
(dp103833
S'description'
p103834
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p103835
sS'cpp_type'
p103836
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p103837
sS'default'
p103838
g3
sS'name'
p103839
S'boundary'
p103840
sS'required'
p103841
I00
sS'group_name'
p103842
Nsa(dp103843
S'description'
p103844
S'Centre of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n'
p103845
sS'cpp_type'
p103846
S'double'
p103847
sS'default'
p103848
g3
sS'name'
p103849
S'centre'
p103850
sS'required'
p103851
I01
sS'group_name'
p103852
Nsa(dp103853
S'description'
p103854
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103855
sS'cpp_type'
p103856
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103857
sS'default'
p103858
g3
sS'name'
p103859
S'control_tags'
p103860
sS'required'
p103861
I00
sS'group_name'
p103862
Nsa(dp103863
S'name'
p103864
S'execute_on'
p103865
sS'cpp_type'
p103866
S'MultiMooseEnum'
p103867
sS'default'
p103868
S'TIMESTEP_END'
p103869
sS'description'
p103870
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103871
sS'required'
p103872
I00
sS'options'
p103873
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103874
sS'group_name'
p103875
Nsa(dp103876
S'description'
p103877
S'Maximum of the flux (measured in kg.m^-2.s^-1).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.  Note, to make this a source rather than a sink, let max<0\n'
p103878
sS'cpp_type'
p103879
S'double'
p103880
sS'default'
p103881
g3
sS'name'
p103882
S'max'
p103883
sS'required'
p103884
I01
sS'group_name'
p103885
Nsa(dp103886
S'description'
p103887
S'The flux will be multiplied by this spatially-and-temporally varying function.\n'
p103888
sS'cpp_type'
p103889
S'FunctionName'
p103890
sS'default'
p103891
S'1'
p103892
sS'name'
p103893
S'multiplying_fcn'
p103894
sS'required'
p103895
I00
sS'group_name'
p103896
Nsa(dp103897
S'description'
p103898
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p103899
sS'cpp_type'
p103900
S'std::vector<OutputName, std::allocator<OutputName> >'
p103901
sS'default'
p103902
g3
sS'name'
p103903
S'outputs'
p103904
sS'required'
p103905
I00
sS'group_name'
p103906
S'Advanced'
p103907
sa(dp103908
S'description'
p103909
S'The UserObject that holds the list of Richards variable names.\n'
p103910
sS'cpp_type'
p103911
S'UserObjectName'
p103912
sS'default'
p103913
g3
sS'name'
p103914
S'richardsVarNames_UO'
p103915
sS'required'
p103916
I01
sS'group_name'
p103917
Nsa(dp103918
S'description'
p103919
S'Standard deviation of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n'
p103920
sS'cpp_type'
p103921
S'double'
p103922
sS'default'
p103923
g3
sS'name'
p103924
S'sd'
p103925
sS'required'
p103926
I01
sS'group_name'
p103927
Nsa(dp103928
S'description'
p103929
g3
sS'cpp_type'
p103930
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p103931
sS'default'
p103932
S'RichardsHalfGaussianSinkFlux'
p103933
sS'name'
p103934
S'type'
p103935
sS'required'
p103936
I00
sS'group_name'
p103937
Nsa(dp103938
S'description'
p103939
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p103940
sS'cpp_type'
p103941
S'bool'
p103942
sS'default'
p103943
S'0'
p103944
sS'name'
p103945
S'use_displaced_mesh'
p103946
sS'required'
p103947
I00
sS'group_name'
p103948
S'Advanced'
p103949
sa(dp103950
S'description'
p103951
S'The name of the variable that this boundary condition applies to\n'
p103952
sS'cpp_type'
p103953
S'std::vector<VariableName>'
p103954
sS'default'
p103955
g3
sS'name'
p103956
S'variable'
p103957
sS'required'
p103958
I00
sS'group_name'
p103959
NsasS'name'
p103960
S'/Postprocessors/RichardsHalfGaussianSinkFlux'
p103961
sa(dp103962
S'description'
p103963
S'Returns the mass in a region.\n'
p103964
sS'subblocks'
p103965
NsS'parameters'
p103966
(lp103967
(dp103968
S'description'
p103969
S'The list of block ids (SubdomainID) that this object will be applied\n'
p103970
sS'cpp_type'
p103971
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p103972
sS'default'
p103973
g3
sS'name'
p103974
S'block'
p103975
sS'required'
p103976
I00
sS'group_name'
p103977
Nsa(dp103978
S'description'
p103979
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p103980
sS'cpp_type'
p103981
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p103982
sS'default'
p103983
g3
sS'name'
p103984
S'control_tags'
p103985
sS'required'
p103986
I00
sS'group_name'
p103987
Nsa(dp103988
S'name'
p103989
S'execute_on'
p103990
sS'cpp_type'
p103991
S'MultiMooseEnum'
p103992
sS'default'
p103993
S'TIMESTEP_END'
p103994
sS'description'
p103995
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p103996
sS'required'
p103997
I00
sS'options'
p103998
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p103999
sS'group_name'
p104000
Nsa(dp104001
S'description'
p104002
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104003
sS'cpp_type'
p104004
S'std::vector<OutputName, std::allocator<OutputName> >'
p104005
sS'default'
p104006
g3
sS'name'
p104007
S'outputs'
p104008
sS'required'
p104009
I00
sS'group_name'
p104010
S'Advanced'
p104011
sa(dp104012
S'description'
p104013
S'The UserObject that holds the list of Richards variable names.\n'
p104014
sS'cpp_type'
p104015
S'UserObjectName'
p104016
sS'default'
p104017
g3
sS'name'
p104018
S'richardsVarNames_UO'
p104019
sS'required'
p104020
I01
sS'group_name'
p104021
Nsa(dp104022
S'description'
p104023
S'The seed for the master random number generator\n'
p104024
sS'cpp_type'
p104025
S'unsigned int'
p104026
sS'default'
p104027
S'0'
p104028
sS'name'
p104029
S'seed'
p104030
sS'required'
p104031
I00
sS'group_name'
p104032
S'Advanced'
p104033
sa(dp104034
S'description'
p104035
g3
sS'cpp_type'
p104036
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104037
sS'default'
p104038
S'RichardsMass'
p104039
sS'name'
p104040
S'type'
p104041
sS'required'
p104042
I00
sS'group_name'
p104043
Nsa(dp104044
S'description'
p104045
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104046
sS'cpp_type'
p104047
S'bool'
p104048
sS'default'
p104049
S'0'
p104050
sS'name'
p104051
S'use_displaced_mesh'
p104052
sS'required'
p104053
I00
sS'group_name'
p104054
S'Advanced'
p104055
sa(dp104056
S'description'
p104057
S'The name of the variable that this object operates on\n'
p104058
sS'cpp_type'
p104059
S'std::vector<VariableName>'
p104060
sS'default'
p104061
g3
sS'name'
p104062
S'variable'
p104063
sS'required'
p104064
I00
sS'group_name'
p104065
NsasS'name'
p104066
S'/Postprocessors/RichardsMass'
p104067
sa(dp104068
S'description'
p104069
S'Records the fluid flow into a sink (positive values indicate fluid is flowing from porespace into the sink).\n'
p104070
sS'subblocks'
p104071
NsS'parameters'
p104072
(lp104073
(dp104074
S'description'
p104075
S'Tuple of flux values (measured in kg.m^-2.s^-1 for use_mobility=false, and in Pa.s^-1 if use_mobility=true).  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.  A piecewise-linear fit is performed to the (pressure,bare_fluxes) pairs to obtain the flux at any arbitrary pressure, and the first or last bare_flux values are used if the quad-point pressure falls outside this range.\n'
p104076
sS'cpp_type'
p104077
S'std::vector<double, std::allocator<double> >'
p104078
sS'default'
p104079
g3
sS'name'
p104080
S'bare_fluxes'
p104081
sS'required'
p104082
I01
sS'group_name'
p104083
Nsa(dp104084
S'description'
p104085
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104086
sS'cpp_type'
p104087
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104088
sS'default'
p104089
g3
sS'name'
p104090
S'boundary'
p104091
sS'required'
p104092
I00
sS'group_name'
p104093
Nsa(dp104094
S'description'
p104095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104096
sS'cpp_type'
p104097
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104098
sS'default'
p104099
g3
sS'name'
p104100
S'control_tags'
p104101
sS'required'
p104102
I00
sS'group_name'
p104103
Nsa(dp104104
S'name'
p104105
S'execute_on'
p104106
sS'cpp_type'
p104107
S'MultiMooseEnum'
p104108
sS'default'
p104109
S'TIMESTEP_END'
p104110
sS'description'
p104111
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104112
sS'required'
p104113
I00
sS'options'
p104114
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104115
sS'group_name'
p104116
Nsa(dp104117
S'description'
p104118
S'The flux will be multiplied by this spatially-and-temporally varying function.  This is useful if the boundary is a moving boundary controlled by RichardsExcav.\n'
p104119
sS'cpp_type'
p104120
S'FunctionName'
p104121
sS'default'
p104122
S'1'
p104123
sS'name'
p104124
S'multiplying_fcn'
p104125
sS'required'
p104126
I00
sS'group_name'
p104127
Nsa(dp104128
S'description'
p104129
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104130
sS'cpp_type'
p104131
S'std::vector<OutputName, std::allocator<OutputName> >'
p104132
sS'default'
p104133
g3
sS'name'
p104134
S'outputs'
p104135
sS'required'
p104136
I00
sS'group_name'
p104137
S'Advanced'
p104138
sa(dp104139
S'description'
p104140
S'Tuple of pressure values.  Must be monotonically increasing.\n'
p104141
sS'cpp_type'
p104142
S'std::vector<double, std::allocator<double> >'
p104143
sS'default'
p104144
g3
sS'name'
p104145
S'pressures'
p104146
sS'required'
p104147
I01
sS'group_name'
p104148
Nsa(dp104149
S'description'
p104150
S'The UserObject that holds the list of Richards variable names.\n'
p104151
sS'cpp_type'
p104152
S'UserObjectName'
p104153
sS'default'
p104154
g3
sS'name'
p104155
S'richardsVarNames_UO'
p104156
sS'required'
p104157
I01
sS'group_name'
p104158
Nsa(dp104159
S'description'
p104160
g3
sS'cpp_type'
p104161
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104162
sS'default'
p104163
S'RichardsPiecewiseLinearSinkFlux'
p104164
sS'name'
p104165
S'type'
p104166
sS'required'
p104167
I00
sS'group_name'
p104168
Nsa(dp104169
S'description'
p104170
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104171
sS'cpp_type'
p104172
S'bool'
p104173
sS'default'
p104174
S'0'
p104175
sS'name'
p104176
S'use_displaced_mesh'
p104177
sS'required'
p104178
I00
sS'group_name'
p104179
S'Advanced'
p104180
sa(dp104181
S'description'
p104182
S"If true, then fluxes are multiplied by (density*permeability_nn/viscosity), where the '_nn' indicates the component normal to the boundary.  In this case bare_flux is measured in Pa.s^-1.  This can be used in conjunction with use_relperm.\n"
p104183
sS'cpp_type'
p104184
S'bool'
p104185
sS'default'
p104186
g3
sS'name'
p104187
S'use_mobility'
p104188
sS'required'
p104189
I01
sS'group_name'
p104190
Nsa(dp104191
S'description'
p104192
S'If true, then fluxes are multiplied by relative permeability.  This can be used in conjunction with use_mobility\n'
p104193
sS'cpp_type'
p104194
S'bool'
p104195
sS'default'
p104196
g3
sS'name'
p104197
S'use_relperm'
p104198
sS'required'
p104199
I01
sS'group_name'
p104200
Nsa(dp104201
S'description'
p104202
S'The name of the variable that this boundary condition applies to\n'
p104203
sS'cpp_type'
p104204
S'std::vector<VariableName>'
p104205
sS'default'
p104206
g3
sS'name'
p104207
S'variable'
p104208
sS'required'
p104209
I00
sS'group_name'
p104210
NsasS'name'
p104211
S'/Postprocessors/RichardsPiecewiseLinearSinkFlux'
p104212
sa(dp104213
S'description'
p104214
g3
sS'subblocks'
p104215
NsS'parameters'
p104216
(lp104217
(dp104218
S'description'
p104219
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104220
sS'cpp_type'
p104221
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104222
sS'default'
p104223
g3
sS'name'
p104224
S'control_tags'
p104225
sS'required'
p104226
I00
sS'group_name'
p104227
Nsa(dp104228
S'name'
p104229
S'execute_on'
p104230
sS'cpp_type'
p104231
S'MultiMooseEnum'
p104232
sS'default'
p104233
S'TIMESTEP_END'
p104234
sS'description'
p104235
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104236
sS'required'
p104237
I00
sS'options'
p104238
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104239
sS'group_name'
p104240
Nsa(dp104241
S'description'
p104242
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104243
sS'cpp_type'
p104244
S'std::vector<OutputName, std::allocator<OutputName> >'
p104245
sS'default'
p104246
g3
sS'name'
p104247
S'outputs'
p104248
sS'required'
p104249
I00
sS'group_name'
p104250
S'Advanced'
p104251
sa(dp104252
S'description'
p104253
g3
sS'cpp_type'
p104254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104255
sS'default'
p104256
S'RichardsPlotQuantity'
p104257
sS'name'
p104258
S'type'
p104259
sS'required'
p104260
I00
sS'group_name'
p104261
Nsa(dp104262
S'description'
p104263
S'user object name that has the total mass value\n'
p104264
sS'cpp_type'
p104265
S'UserObjectName'
p104266
sS'default'
p104267
g3
sS'name'
p104268
S'uo'
p104269
sS'required'
p104270
I01
sS'group_name'
p104271
Nsa(dp104272
S'description'
p104273
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104274
sS'cpp_type'
p104275
S'bool'
p104276
sS'default'
p104277
S'0'
p104278
sS'name'
p104279
S'use_displaced_mesh'
p104280
sS'required'
p104281
I00
sS'group_name'
p104282
S'Advanced'
p104283
sasS'name'
p104284
S'/Postprocessors/RichardsPlotQuantity'
p104285
sa(dp104286
S'description'
p104287
g3
sS'subblocks'
p104288
NsS'parameters'
p104289
(lp104290
(dp104291
S'description'
p104292
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104293
sS'cpp_type'
p104294
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104295
sS'default'
p104296
g3
sS'name'
p104297
S'control_tags'
p104298
sS'required'
p104299
I00
sS'group_name'
p104300
Nsa(dp104301
S'name'
p104302
S'execute_on'
p104303
sS'cpp_type'
p104304
S'MultiMooseEnum'
p104305
sS'default'
p104306
S'TIMESTEP_END'
p104307
sS'description'
p104308
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104309
sS'required'
p104310
I00
sS'options'
p104311
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104312
sS'group_name'
p104313
Nsa(dp104314
S'description'
p104315
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104316
sS'cpp_type'
p104317
S'std::vector<OutputName, std::allocator<OutputName> >'
p104318
sS'default'
p104319
g3
sS'name'
p104320
S'outputs'
p104321
sS'required'
p104322
I00
sS'group_name'
p104323
S'Advanced'
p104324
sa(dp104325
S'name'
p104326
S'time_type'
p104327
sS'cpp_type'
p104328
S'MooseEnum'
p104329
sS'default'
p104330
g3
sS'description'
p104331
S'Whether to output the total elapsed or just the active time\n'
p104332
sS'required'
p104333
I01
sS'options'
p104334
S'alive active'
p104335
sS'group_name'
p104336
Nsa(dp104337
S'description'
p104338
g3
sS'cpp_type'
p104339
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104340
sS'default'
p104341
S'RunTime'
p104342
sS'name'
p104343
S'type'
p104344
sS'required'
p104345
I00
sS'group_name'
p104346
Nsa(dp104347
S'description'
p104348
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104349
sS'cpp_type'
p104350
S'bool'
p104351
sS'default'
p104352
S'0'
p104353
sS'name'
p104354
S'use_displaced_mesh'
p104355
sS'required'
p104356
I00
sS'group_name'
p104357
S'Advanced'
p104358
sasS'name'
p104359
S'/Postprocessors/RunTime'
p104360
sa(dp104361
S'description'
p104362
g3
sS'subblocks'
p104363
NsS'parameters'
p104364
(lp104365
(dp104366
S'description'
p104367
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104368
sS'cpp_type'
p104369
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104370
sS'default'
p104371
g3
sS'name'
p104372
S'control_tags'
p104373
sS'required'
p104374
I00
sS'group_name'
p104375
Nsa(dp104376
S'name'
p104377
S'execute_on'
p104378
sS'cpp_type'
p104379
S'MultiMooseEnum'
p104380
sS'default'
p104381
S'TIMESTEP_END'
p104382
sS'description'
p104383
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104384
sS'required'
p104385
I00
sS'options'
p104386
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104387
sS'group_name'
p104388
Nsa(dp104389
S'description'
p104390
S'The analytic solution to compare against\n'
p104391
sS'cpp_type'
p104392
S'FunctionName'
p104393
sS'default'
p104394
g3
sS'name'
p104395
S'function'
p104396
sS'required'
p104397
I01
sS'group_name'
p104398
Nsa(dp104399
S'description'
p104400
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104401
sS'cpp_type'
p104402
S'std::vector<OutputName, std::allocator<OutputName> >'
p104403
sS'default'
p104404
g3
sS'name'
p104405
S'outputs'
p104406
sS'required'
p104407
I00
sS'group_name'
p104408
S'Advanced'
p104409
sa(dp104410
S'description'
p104411
g3
sS'cpp_type'
p104412
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104413
sS'default'
p104414
S'ScalarL2Error'
p104415
sS'name'
p104416
S'type'
p104417
sS'required'
p104418
I00
sS'group_name'
p104419
Nsa(dp104420
S'description'
p104421
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104422
sS'cpp_type'
p104423
S'bool'
p104424
sS'default'
p104425
S'0'
p104426
sS'name'
p104427
S'use_displaced_mesh'
p104428
sS'required'
p104429
I00
sS'group_name'
p104430
S'Advanced'
p104431
sa(dp104432
S'description'
p104433
S'The name of the scalar variable\n'
p104434
sS'cpp_type'
p104435
S'VariableName'
p104436
sS'default'
p104437
g3
sS'name'
p104438
S'variable'
p104439
sS'required'
p104440
I01
sS'group_name'
p104441
NsasS'name'
p104442
S'/Postprocessors/ScalarL2Error'
p104443
sa(dp104444
S'description'
p104445
g3
sS'subblocks'
p104446
NsS'parameters'
p104447
(lp104448
(dp104449
S'description'
p104450
S'Component to output for this variable\n'
p104451
sS'cpp_type'
p104452
S'unsigned int'
p104453
sS'default'
p104454
S'0'
p104455
sS'name'
p104456
S'component'
p104457
sS'required'
p104458
I00
sS'group_name'
p104459
Nsa(dp104460
S'description'
p104461
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104462
sS'cpp_type'
p104463
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104464
sS'default'
p104465
g3
sS'name'
p104466
S'control_tags'
p104467
sS'required'
p104468
I00
sS'group_name'
p104469
Nsa(dp104470
S'name'
p104471
S'execute_on'
p104472
sS'cpp_type'
p104473
S'MultiMooseEnum'
p104474
sS'default'
p104475
S'TIMESTEP_END'
p104476
sS'description'
p104477
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104478
sS'required'
p104479
I00
sS'options'
p104480
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104481
sS'group_name'
p104482
Nsa(dp104483
S'description'
p104484
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104485
sS'cpp_type'
p104486
S'std::vector<OutputName, std::allocator<OutputName> >'
p104487
sS'default'
p104488
g3
sS'name'
p104489
S'outputs'
p104490
sS'required'
p104491
I00
sS'group_name'
p104492
S'Advanced'
p104493
sa(dp104494
S'description'
p104495
g3
sS'cpp_type'
p104496
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104497
sS'default'
p104498
S'ScalarVariable'
p104499
sS'name'
p104500
S'type'
p104501
sS'required'
p104502
I00
sS'group_name'
p104503
Nsa(dp104504
S'description'
p104505
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104506
sS'cpp_type'
p104507
S'bool'
p104508
sS'default'
p104509
S'0'
p104510
sS'name'
p104511
S'use_displaced_mesh'
p104512
sS'required'
p104513
I00
sS'group_name'
p104514
S'Advanced'
p104515
sa(dp104516
S'description'
p104517
S'Name of the variable\n'
p104518
sS'cpp_type'
p104519
S'VariableName'
p104520
sS'default'
p104521
g3
sS'name'
p104522
S'variable'
p104523
sS'required'
p104524
I01
sS'group_name'
p104525
NsasS'name'
p104526
S'/Postprocessors/ScalarVariable'
p104527
sa(dp104528
S'description'
p104529
g3
sS'subblocks'
p104530
NsS'parameters'
p104531
(lp104532
(dp104533
S'description'
p104534
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104535
sS'cpp_type'
p104536
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104537
sS'default'
p104538
g3
sS'name'
p104539
S'boundary'
p104540
sS'required'
p104541
I00
sS'group_name'
p104542
Nsa(dp104543
S'description'
p104544
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104545
sS'cpp_type'
p104546
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104547
sS'default'
p104548
g3
sS'name'
p104549
S'control_tags'
p104550
sS'required'
p104551
I00
sS'group_name'
p104552
Nsa(dp104553
S'name'
p104554
S'execute_on'
p104555
sS'cpp_type'
p104556
S'MultiMooseEnum'
p104557
sS'default'
p104558
S'TIMESTEP_END'
p104559
sS'description'
p104560
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104561
sS'required'
p104562
I00
sS'options'
p104563
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104564
sS'group_name'
p104565
Nsa(dp104566
S'description'
p104567
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104568
sS'cpp_type'
p104569
S'std::vector<OutputName, std::allocator<OutputName> >'
p104570
sS'default'
p104571
g3
sS'name'
p104572
S'outputs'
p104573
sS'required'
p104574
I00
sS'group_name'
p104575
S'Advanced'
p104576
sa(dp104577
S'description'
p104578
g3
sS'cpp_type'
p104579
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104580
sS'default'
p104581
S'SideAverageValue'
p104582
sS'name'
p104583
S'type'
p104584
sS'required'
p104585
I00
sS'group_name'
p104586
Nsa(dp104587
S'description'
p104588
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104589
sS'cpp_type'
p104590
S'bool'
p104591
sS'default'
p104592
S'0'
p104593
sS'name'
p104594
S'use_displaced_mesh'
p104595
sS'required'
p104596
I00
sS'group_name'
p104597
S'Advanced'
p104598
sa(dp104599
S'description'
p104600
S'The name of the variable that this boundary condition applies to\n'
p104601
sS'cpp_type'
p104602
S'std::vector<VariableName>'
p104603
sS'default'
p104604
g3
sS'name'
p104605
S'variable'
p104606
sS'required'
p104607
I00
sS'group_name'
p104608
NsasS'name'
p104609
S'/Postprocessors/SideAverageValue'
p104610
sa(dp104611
S'description'
p104612
g3
sS'subblocks'
p104613
NsS'parameters'
p104614
(lp104615
(dp104616
S'description'
p104617
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104618
sS'cpp_type'
p104619
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104620
sS'default'
p104621
g3
sS'name'
p104622
S'boundary'
p104623
sS'required'
p104624
I00
sS'group_name'
p104625
Nsa(dp104626
S'description'
p104627
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104628
sS'cpp_type'
p104629
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104630
sS'default'
p104631
g3
sS'name'
p104632
S'control_tags'
p104633
sS'required'
p104634
I00
sS'group_name'
p104635
Nsa(dp104636
S'description'
p104637
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p104638
sS'cpp_type'
p104639
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104640
sS'default'
p104641
g3
sS'name'
p104642
S'diffusivity'
p104643
sS'required'
p104644
I01
sS'group_name'
p104645
Nsa(dp104646
S'name'
p104647
S'execute_on'
p104648
sS'cpp_type'
p104649
S'MultiMooseEnum'
p104650
sS'default'
p104651
S'TIMESTEP_END'
p104652
sS'description'
p104653
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104654
sS'required'
p104655
I00
sS'options'
p104656
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104657
sS'group_name'
p104658
Nsa(dp104659
S'description'
p104660
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104661
sS'cpp_type'
p104662
S'std::vector<OutputName, std::allocator<OutputName> >'
p104663
sS'default'
p104664
g3
sS'name'
p104665
S'outputs'
p104666
sS'required'
p104667
I00
sS'group_name'
p104668
S'Advanced'
p104669
sa(dp104670
S'description'
p104671
g3
sS'cpp_type'
p104672
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104673
sS'default'
p104674
S'SideFluxAverage'
p104675
sS'name'
p104676
S'type'
p104677
sS'required'
p104678
I00
sS'group_name'
p104679
Nsa(dp104680
S'description'
p104681
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104682
sS'cpp_type'
p104683
S'bool'
p104684
sS'default'
p104685
S'0'
p104686
sS'name'
p104687
S'use_displaced_mesh'
p104688
sS'required'
p104689
I00
sS'group_name'
p104690
S'Advanced'
p104691
sa(dp104692
S'description'
p104693
S'The name of the variable that this boundary condition applies to\n'
p104694
sS'cpp_type'
p104695
S'std::vector<VariableName>'
p104696
sS'default'
p104697
g3
sS'name'
p104698
S'variable'
p104699
sS'required'
p104700
I00
sS'group_name'
p104701
NsasS'name'
p104702
S'/Postprocessors/SideFluxAverage'
p104703
sa(dp104704
S'description'
p104705
g3
sS'subblocks'
p104706
NsS'parameters'
p104707
(lp104708
(dp104709
S'description'
p104710
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104711
sS'cpp_type'
p104712
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104713
sS'default'
p104714
g3
sS'name'
p104715
S'boundary'
p104716
sS'required'
p104717
I00
sS'group_name'
p104718
Nsa(dp104719
S'description'
p104720
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104721
sS'cpp_type'
p104722
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104723
sS'default'
p104724
g3
sS'name'
p104725
S'control_tags'
p104726
sS'required'
p104727
I00
sS'group_name'
p104728
Nsa(dp104729
S'description'
p104730
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p104731
sS'cpp_type'
p104732
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104733
sS'default'
p104734
g3
sS'name'
p104735
S'diffusivity'
p104736
sS'required'
p104737
I01
sS'group_name'
p104738
Nsa(dp104739
S'name'
p104740
S'execute_on'
p104741
sS'cpp_type'
p104742
S'MultiMooseEnum'
p104743
sS'default'
p104744
S'TIMESTEP_END'
p104745
sS'description'
p104746
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104747
sS'required'
p104748
I00
sS'options'
p104749
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104750
sS'group_name'
p104751
Nsa(dp104752
S'description'
p104753
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104754
sS'cpp_type'
p104755
S'std::vector<OutputName, std::allocator<OutputName> >'
p104756
sS'default'
p104757
g3
sS'name'
p104758
S'outputs'
p104759
sS'required'
p104760
I00
sS'group_name'
p104761
S'Advanced'
p104762
sa(dp104763
S'description'
p104764
g3
sS'cpp_type'
p104765
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104766
sS'default'
p104767
S'SideFluxIntegral'
p104768
sS'name'
p104769
S'type'
p104770
sS'required'
p104771
I00
sS'group_name'
p104772
Nsa(dp104773
S'description'
p104774
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104775
sS'cpp_type'
p104776
S'bool'
p104777
sS'default'
p104778
S'0'
p104779
sS'name'
p104780
S'use_displaced_mesh'
p104781
sS'required'
p104782
I00
sS'group_name'
p104783
S'Advanced'
p104784
sa(dp104785
S'description'
p104786
S'The name of the variable that this boundary condition applies to\n'
p104787
sS'cpp_type'
p104788
S'std::vector<VariableName>'
p104789
sS'default'
p104790
g3
sS'name'
p104791
S'variable'
p104792
sS'required'
p104793
I00
sS'group_name'
p104794
NsasS'name'
p104795
S'/Postprocessors/SideFluxIntegral'
p104796
sa(dp104797
S'description'
p104798
g3
sS'subblocks'
p104799
NsS'parameters'
p104800
(lp104801
(dp104802
S'description'
p104803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104804
sS'cpp_type'
p104805
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104806
sS'default'
p104807
g3
sS'name'
p104808
S'boundary'
p104809
sS'required'
p104810
I00
sS'group_name'
p104811
Nsa(dp104812
S'description'
p104813
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104814
sS'cpp_type'
p104815
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104816
sS'default'
p104817
g3
sS'name'
p104818
S'control_tags'
p104819
sS'required'
p104820
I00
sS'group_name'
p104821
Nsa(dp104822
S'name'
p104823
S'execute_on'
p104824
sS'cpp_type'
p104825
S'MultiMooseEnum'
p104826
sS'default'
p104827
S'TIMESTEP_END'
p104828
sS'description'
p104829
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104830
sS'required'
p104831
I00
sS'options'
p104832
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104833
sS'group_name'
p104834
Nsa(dp104835
S'description'
p104836
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104837
sS'cpp_type'
p104838
S'std::vector<OutputName, std::allocator<OutputName> >'
p104839
sS'default'
p104840
g3
sS'name'
p104841
S'outputs'
p104842
sS'required'
p104843
I00
sS'group_name'
p104844
S'Advanced'
p104845
sa(dp104846
S'description'
p104847
g3
sS'cpp_type'
p104848
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104849
sS'default'
p104850
S'SideIntegralVariablePostprocessor'
p104851
sS'name'
p104852
S'type'
p104853
sS'required'
p104854
I00
sS'group_name'
p104855
Nsa(dp104856
S'description'
p104857
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104858
sS'cpp_type'
p104859
S'bool'
p104860
sS'default'
p104861
S'0'
p104862
sS'name'
p104863
S'use_displaced_mesh'
p104864
sS'required'
p104865
I00
sS'group_name'
p104866
S'Advanced'
p104867
sa(dp104868
S'description'
p104869
S'The name of the variable that this boundary condition applies to\n'
p104870
sS'cpp_type'
p104871
S'std::vector<VariableName>'
p104872
sS'default'
p104873
g3
sS'name'
p104874
S'variable'
p104875
sS'required'
p104876
I00
sS'group_name'
p104877
NsasS'name'
p104878
S'/Postprocessors/SideIntegralVariablePostprocessor'
p104879
sa(dp104880
S'description'
p104881
g3
sS'subblocks'
p104882
NsS'parameters'
p104883
(lp104884
(dp104885
S'description'
p104886
S"Temperature on 'hot' boundary in K\n"
p104887
sS'cpp_type'
p104888
S'PostprocessorName'
p104889
sS'default'
p104890
g3
sS'name'
p104891
S'T_hot'
p104892
sS'required'
p104893
I01
sS'group_name'
p104894
Nsa(dp104895
S'description'
p104896
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p104897
sS'cpp_type'
p104898
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p104899
sS'default'
p104900
g3
sS'name'
p104901
S'boundary'
p104902
sS'required'
p104903
I00
sS'group_name'
p104904
Nsa(dp104905
S'description'
p104906
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p104907
sS'cpp_type'
p104908
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p104909
sS'default'
p104910
g3
sS'name'
p104911
S'control_tags'
p104912
sS'required'
p104913
I00
sS'group_name'
p104914
Nsa(dp104915
S'description'
p104916
S'Length between sides of sample in length_scale\n'
p104917
sS'cpp_type'
p104918
S'double'
p104919
sS'default'
p104920
g3
sS'name'
p104921
S'dx'
p104922
sS'required'
p104923
I01
sS'group_name'
p104924
Nsa(dp104925
S'name'
p104926
S'execute_on'
p104927
sS'cpp_type'
p104928
S'MultiMooseEnum'
p104929
sS'default'
p104930
S'TIMESTEP_END'
p104931
sS'description'
p104932
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p104933
sS'required'
p104934
I00
sS'options'
p104935
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p104936
sS'group_name'
p104937
Nsa(dp104938
S'description'
p104939
S"Heat flux out of 'cold' boundary in solution units, should always be positive\n"
p104940
sS'cpp_type'
p104941
S'PostprocessorName'
p104942
sS'default'
p104943
g3
sS'name'
p104944
S'flux'
p104945
sS'required'
p104946
I01
sS'group_name'
p104947
Nsa(dp104948
S'description'
p104949
S'Initial value of the thermal conductivity\n'
p104950
sS'cpp_type'
p104951
S'double'
p104952
sS'default'
p104953
S'0'
p104954
sS'name'
p104955
S'k0'
p104956
sS'required'
p104957
I00
sS'group_name'
p104958
Nsa(dp104959
S'description'
p104960
S'lengthscale of the solution, default is 1e-8\n'
p104961
sS'cpp_type'
p104962
S'double'
p104963
sS'default'
p104964
S'1e-08'
p104965
sS'name'
p104966
S'length_scale'
p104967
sS'required'
p104968
I00
sS'group_name'
p104969
Nsa(dp104970
S'description'
p104971
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p104972
sS'cpp_type'
p104973
S'std::vector<OutputName, std::allocator<OutputName> >'
p104974
sS'default'
p104975
g3
sS'name'
p104976
S'outputs'
p104977
sS'required'
p104978
I00
sS'group_name'
p104979
S'Advanced'
p104980
sa(dp104981
S'description'
p104982
g3
sS'cpp_type'
p104983
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p104984
sS'default'
p104985
S'ThermalCond'
p104986
sS'name'
p104987
S'type'
p104988
sS'required'
p104989
I00
sS'group_name'
p104990
Nsa(dp104991
S'description'
p104992
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p104993
sS'cpp_type'
p104994
S'bool'
p104995
sS'default'
p104996
S'0'
p104997
sS'name'
p104998
S'use_displaced_mesh'
p104999
sS'required'
p105000
I00
sS'group_name'
p105001
S'Advanced'
p105002
sa(dp105003
S'description'
p105004
S'The name of the variable that this boundary condition applies to\n'
p105005
sS'cpp_type'
p105006
S'std::vector<VariableName>'
p105007
sS'default'
p105008
g3
sS'name'
p105009
S'variable'
p105010
sS'required'
p105011
I00
sS'group_name'
p105012
NsasS'name'
p105013
S'/Postprocessors/ThermalCond'
p105014
sa(dp105015
S'description'
p105016
g3
sS'subblocks'
p105017
NsS'parameters'
p105018
(lp105019
(dp105020
S'description'
p105021
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105022
sS'cpp_type'
p105023
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105024
sS'default'
p105025
g3
sS'name'
p105026
S'control_tags'
p105027
sS'required'
p105028
I00
sS'group_name'
p105029
Nsa(dp105030
S'name'
p105031
S'execute_on'
p105032
sS'cpp_type'
p105033
S'MultiMooseEnum'
p105034
sS'default'
p105035
S'TIMESTEP_END'
p105036
sS'description'
p105037
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105038
sS'required'
p105039
I00
sS'options'
p105040
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p105041
sS'group_name'
p105042
Nsa(dp105043
S'description'
p105044
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105045
sS'cpp_type'
p105046
S'std::vector<OutputName, std::allocator<OutputName> >'
p105047
sS'default'
p105048
g3
sS'name'
p105049
S'outputs'
p105050
sS'required'
p105051
I00
sS'group_name'
p105052
S'Advanced'
p105053
sa(dp105054
S'description'
p105055
g3
sS'cpp_type'
p105056
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105057
sS'default'
p105058
S'TimestepSize'
p105059
sS'name'
p105060
S'type'
p105061
sS'required'
p105062
I00
sS'group_name'
p105063
Nsa(dp105064
S'description'
p105065
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105066
sS'cpp_type'
p105067
S'bool'
p105068
sS'default'
p105069
S'0'
p105070
sS'name'
p105071
S'use_displaced_mesh'
p105072
sS'required'
p105073
I00
sS'group_name'
p105074
S'Advanced'
p105075
sasS'name'
p105076
S'/Postprocessors/TimestepSize'
p105077
sa(dp105078
S'description'
p105079
g3
sS'subblocks'
p105080
NsS'parameters'
p105081
(lp105082
(dp105083
S'description'
p105084
S'Direction of the axis of rotation\n'
p105085
sS'cpp_type'
p105086
S'libMesh::VectorValue<double>'
p105087
sS'default'
p105088
g3
sS'name'
p105089
S'axis_direction'
p105090
sS'required'
p105091
I01
sS'group_name'
p105092
Nsa(dp105093
S'description'
p105094
S'Origin of the axis of rotation\n'
p105095
sS'cpp_type'
p105096
S'libMesh::VectorValue<double>'
p105097
sS'default'
p105098
g3
sS'name'
p105099
S'axis_origin'
p105100
sS'required'
p105101
I01
sS'group_name'
p105102
Nsa(dp105103
S'description'
p105104
S'The list of block ids (SubdomainID) that this object will be applied\n'
p105105
sS'cpp_type'
p105106
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105107
sS'default'
p105108
g3
sS'name'
p105109
S'block'
p105110
sS'required'
p105111
I00
sS'group_name'
p105112
Nsa(dp105113
S'description'
p105114
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p105115
sS'cpp_type'
p105116
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p105117
sS'default'
p105118
g3
sS'name'
p105119
S'boundary'
p105120
sS'required'
p105121
I00
sS'group_name'
p105122
Nsa(dp105123
S'description'
p105124
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105125
sS'cpp_type'
p105126
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105127
sS'default'
p105128
g3
sS'name'
p105129
S'control_tags'
p105130
sS'required'
p105131
I00
sS'group_name'
p105132
Nsa(dp105133
S'name'
p105134
S'execute_on'
p105135
sS'cpp_type'
p105136
S'MultiMooseEnum'
p105137
sS'default'
p105138
S'TIMESTEP_END'
p105139
sS'description'
p105140
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105141
sS'required'
p105142
I00
sS'options'
p105143
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p105144
sS'group_name'
p105145
Nsa(dp105146
S'description'
p105147
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105148
sS'cpp_type'
p105149
S'std::vector<OutputName, std::allocator<OutputName> >'
p105150
sS'default'
p105151
g3
sS'name'
p105152
S'outputs'
p105153
sS'required'
p105154
I00
sS'group_name'
p105155
S'Advanced'
p105156
sa(dp105157
S'description'
p105158
S'The x reaction variable\n'
p105159
sS'cpp_type'
p105160
S'AuxVariableName'
p105161
sS'default'
p105162
g3
sS'name'
p105163
S'react_x'
p105164
sS'required'
p105165
I01
sS'group_name'
p105166
Nsa(dp105167
S'description'
p105168
S'The y reaction variable\n'
p105169
sS'cpp_type'
p105170
S'AuxVariableName'
p105171
sS'default'
p105172
g3
sS'name'
p105173
S'react_y'
p105174
sS'required'
p105175
I01
sS'group_name'
p105176
Nsa(dp105177
S'description'
p105178
S'The z reaction variable\n'
p105179
sS'cpp_type'
p105180
S'AuxVariableName'
p105181
sS'default'
p105182
g3
sS'name'
p105183
S'react_z'
p105184
sS'required'
p105185
I01
sS'group_name'
p105186
Nsa(dp105187
S'description'
p105188
S'The seed for the master random number generator\n'
p105189
sS'cpp_type'
p105190
S'unsigned int'
p105191
sS'default'
p105192
S'0'
p105193
sS'name'
p105194
S'seed'
p105195
sS'required'
p105196
I00
sS'group_name'
p105197
S'Advanced'
p105198
sa(dp105199
S'description'
p105200
g3
sS'cpp_type'
p105201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105202
sS'default'
p105203
S'TorqueReaction'
p105204
sS'name'
p105205
S'type'
p105206
sS'required'
p105207
I00
sS'group_name'
p105208
Nsa(dp105209
S'description'
p105210
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105211
sS'cpp_type'
p105212
S'bool'
p105213
sS'default'
p105214
S'1'
p105215
sS'name'
p105216
S'use_displaced_mesh'
p105217
sS'required'
p105218
I00
sS'group_name'
p105219
S'Advanced'
p105220
sasS'name'
p105221
S'/Postprocessors/TorqueReaction'
p105222
sa(dp105223
S'description'
p105224
g3
sS'subblocks'
p105225
NsS'parameters'
p105226
(lp105227
(dp105228
S'description'
p105229
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105230
sS'cpp_type'
p105231
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105232
sS'default'
p105233
g3
sS'name'
p105234
S'control_tags'
p105235
sS'required'
p105236
I00
sS'group_name'
p105237
Nsa(dp105238
S'name'
p105239
S'execute_on'
p105240
sS'cpp_type'
p105241
S'MultiMooseEnum'
p105242
sS'default'
p105243
S'TIMESTEP_END'
p105244
sS'description'
p105245
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105246
sS'required'
p105247
I00
sS'options'
p105248
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p105249
sS'group_name'
p105250
Nsa(dp105251
S'description'
p105252
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105253
sS'cpp_type'
p105254
S'std::vector<OutputName, std::allocator<OutputName> >'
p105255
sS'default'
p105256
g3
sS'name'
p105257
S'outputs'
p105258
sS'required'
p105259
I00
sS'group_name'
p105260
S'Advanced'
p105261
sa(dp105262
S'description'
p105263
g3
sS'cpp_type'
p105264
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105265
sS'default'
p105266
S'TotalVariableValue'
p105267
sS'name'
p105268
S'type'
p105269
sS'required'
p105270
I00
sS'group_name'
p105271
Nsa(dp105272
S'description'
p105273
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105274
sS'cpp_type'
p105275
S'bool'
p105276
sS'default'
p105277
S'0'
p105278
sS'name'
p105279
S'use_displaced_mesh'
p105280
sS'required'
p105281
I00
sS'group_name'
p105282
S'Advanced'
p105283
sa(dp105284
S'description'
p105285
S'The name of the postprocessor\n'
p105286
sS'cpp_type'
p105287
S'PostprocessorName'
p105288
sS'default'
p105289
g3
sS'name'
p105290
S'value'
p105291
sS'required'
p105292
I00
sS'group_name'
p105293
NsasS'name'
p105294
S'/Postprocessors/TotalVariableValue'
p105295
sa(dp105296
S'description'
p105297
g3
sS'subblocks'
p105298
NsS'parameters'
p105299
(lp105300
(dp105301
S'description'
p105302
S'The list of block ids (SubdomainID) that this object will be applied\n'
p105303
sS'cpp_type'
p105304
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p105305
sS'default'
p105306
g3
sS'name'
p105307
S'block'
p105308
sS'required'
p105309
I00
sS'group_name'
p105310
Nsa(dp105311
S'description'
p105312
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105313
sS'cpp_type'
p105314
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105315
sS'default'
p105316
g3
sS'name'
p105317
S'control_tags'
p105318
sS'required'
p105319
I00
sS'group_name'
p105320
Nsa(dp105321
S'name'
p105322
S'execute_on'
p105323
sS'cpp_type'
p105324
S'MultiMooseEnum'
p105325
sS'default'
p105326
S'TIMESTEP_END'
p105327
sS'description'
p105328
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p105329
sS'required'
p105330
I00
sS'options'
p105331
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p105332
sS'group_name'
p105333
Nsa(dp105334
S'description'
p105335
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p105336
sS'cpp_type'
p105337
S'std::vector<OutputName, std::allocator<OutputName> >'
p105338
sS'default'
p105339
g3
sS'name'
p105340
S'outputs'
p105341
sS'required'
p105342
I00
sS'group_name'
p105343
S'Advanced'
p105344
sa(dp105345
S'description'
p105346
S'The seed for the master random number generator\n'
p105347
sS'cpp_type'
p105348
S'unsigned int'
p105349
sS'default'
p105350
S'0'
p105351
sS'name'
p105352
S'seed'
p105353
sS'required'
p105354
I00
sS'group_name'
p105355
S'Advanced'
p105356
sa(dp105357
S'description'
p105358
g3
sS'cpp_type'
p105359
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105360
sS'default'
p105361
S'VolumePostprocessor'
p105362
sS'name'
p105363
S'type'
p105364
sS'required'
p105365
I00
sS'group_name'
p105366
Nsa(dp105367
S'description'
p105368
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p105369
sS'cpp_type'
p105370
S'bool'
p105371
sS'default'
p105372
S'0'
p105373
sS'name'
p105374
S'use_displaced_mesh'
p105375
sS'required'
p105376
I00
sS'group_name'
p105377
S'Advanced'
p105378
sasS'name'
p105379
S'/Postprocessors/VolumePostprocessor'
p105380
sasS'parameters'
p105381
NsS'name'
p105382
S'/Postprocessors'
p105383
sa(dp105384
S'description'
p105385
g3
sS'subblocks'
p105386
(lp105387
(dp105388
S'description'
p105389
g3
sS'subblocks'
p105390
NsS'parameters'
p105391
(lp105392
(dp105393
S'name'
p105394
S'line_search'
p105395
sS'cpp_type'
p105396
S'MooseEnum'
p105397
sS'default'
p105398
S'default'
p105399
sS'description'
p105400
S'Specifies the line search type (Note: none = basic)\n'
p105401
sS'required'
p105402
I00
sS'options'
p105403
S'default shell none basic l2 bt cp'
p105404
sS'group_name'
p105405
Nsa(dp105406
S'name'
p105407
S'petsc_options'
p105408
sS'cpp_type'
p105409
S'MultiMooseEnum'
p105410
sS'default'
p105411
g3
sS'description'
p105412
S'Singleton PETSc options\n'
p105413
sS'required'
p105414
I00
sS'options'
p105415
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105416
sS'group_name'
p105417
Nsa(dp105418
S'name'
p105419
S'petsc_options_iname'
p105420
sS'cpp_type'
p105421
S'MultiMooseEnum'
p105422
sS'default'
p105423
g3
sS'description'
p105424
S'Names of PETSc name/value pairs\n'
p105425
sS'required'
p105426
I00
sS'options'
p105427
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105428
sS'group_name'
p105429
Nsa(dp105430
S'description'
p105431
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105432
sS'cpp_type'
p105433
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105434
sS'default'
p105435
g3
sS'name'
p105436
S'petsc_options_value'
p105437
sS'required'
p105438
I00
sS'group_name'
p105439
Nsa(dp105440
S'name'
p105441
S'solve_type'
p105442
sS'cpp_type'
p105443
S'MooseEnum'
p105444
sS'default'
p105445
g3
sS'description'
p105446
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105447
sS'required'
p105448
I00
sS'options'
p105449
S'PJFNK JFNK NEWTON FD LINEAR'
p105450
sS'group_name'
p105451
Nsa(dp105452
S'description'
p105453
S'A string representing the Moose Object that will be built by this Action\n'
p105454
sS'cpp_type'
p105455
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105456
sS'default'
p105457
g3
sS'name'
p105458
S'type'
p105459
sS'required'
p105460
I01
sS'group_name'
p105461
NsasS'name'
p105462
S'/Preconditioning/*'
p105463
sa(dp105464
S'description'
p105465
g3
sS'subblocks'
p105466
NsS'parameters'
p105467
(lp105468
(dp105469
S'description'
p105470
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105471
sS'cpp_type'
p105472
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105473
sS'default'
p105474
g3
sS'name'
p105475
S'control_tags'
p105476
sS'required'
p105477
I00
sS'group_name'
p105478
Nsa(dp105479
S'description'
p105480
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p105481
sS'cpp_type'
p105482
S'bool'
p105483
sS'default'
p105484
S'0'
p105485
sS'name'
p105486
S'full'
p105487
sS'required'
p105488
I00
sS'group_name'
p105489
Nsa(dp105490
S'description'
p105491
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p105492
sS'cpp_type'
p105493
S'bool'
p105494
sS'default'
p105495
S'0'
p105496
sS'name'
p105497
S'implicit_geometric_coupling'
p105498
sS'required'
p105499
I00
sS'group_name'
p105500
Nsa(dp105501
S'name'
p105502
S'line_search'
p105503
sS'cpp_type'
p105504
S'MooseEnum'
p105505
sS'default'
p105506
S'default'
p105507
sS'description'
p105508
S'Specifies the line search type (Note: none = basic)\n'
p105509
sS'required'
p105510
I00
sS'options'
p105511
S'default shell none basic l2 bt cp'
p105512
sS'group_name'
p105513
Nsa(dp105514
S'description'
p105515
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105516
sS'cpp_type'
p105517
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105518
sS'default'
p105519
g3
sS'name'
p105520
S'off_diag_column'
p105521
sS'required'
p105522
I00
sS'group_name'
p105523
Nsa(dp105524
S'description'
p105525
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105526
sS'cpp_type'
p105527
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105528
sS'default'
p105529
g3
sS'name'
p105530
S'off_diag_row'
p105531
sS'required'
p105532
I00
sS'group_name'
p105533
Nsa(dp105534
S'name'
p105535
S'pc_side'
p105536
sS'cpp_type'
p105537
S'MooseEnum'
p105538
sS'default'
p105539
S'right'
p105540
sS'description'
p105541
S'Preconditioning side\n'
p105542
sS'required'
p105543
I00
sS'options'
p105544
S'left right symmetric'
p105545
sS'group_name'
p105546
Nsa(dp105547
S'name'
p105548
S'petsc_options'
p105549
sS'cpp_type'
p105550
S'MultiMooseEnum'
p105551
sS'default'
p105552
g3
sS'description'
p105553
S'Singleton PETSc options\n'
p105554
sS'required'
p105555
I00
sS'options'
p105556
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105557
sS'group_name'
p105558
Nsa(dp105559
S'name'
p105560
S'petsc_options_iname'
p105561
sS'cpp_type'
p105562
S'MultiMooseEnum'
p105563
sS'default'
p105564
g3
sS'description'
p105565
S'Names of PETSc name/value pairs\n'
p105566
sS'required'
p105567
I00
sS'options'
p105568
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105569
sS'group_name'
p105570
Nsa(dp105571
S'description'
p105572
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105573
sS'cpp_type'
p105574
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105575
sS'default'
p105576
g3
sS'name'
p105577
S'petsc_options_value'
p105578
sS'required'
p105579
I00
sS'group_name'
p105580
Nsa(dp105581
S'name'
p105582
S'solve_type'
p105583
sS'cpp_type'
p105584
S'MooseEnum'
p105585
sS'default'
p105586
g3
sS'description'
p105587
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105588
sS'required'
p105589
I00
sS'options'
p105590
S'PJFNK JFNK NEWTON FD LINEAR'
p105591
sS'group_name'
p105592
Nsa(dp105593
S'description'
p105594
g3
sS'cpp_type'
p105595
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105596
sS'default'
p105597
S'FDP'
p105598
sS'name'
p105599
S'type'
p105600
sS'required'
p105601
I00
sS'group_name'
p105602
NsasS'name'
p105603
S'/Preconditioning/FDP'
p105604
sa(dp105605
S'description'
p105606
g3
sS'subblocks'
p105607
NsS'parameters'
p105608
(lp105609
(dp105610
S'description'
p105611
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105612
sS'cpp_type'
p105613
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105614
sS'default'
p105615
g3
sS'name'
p105616
S'control_tags'
p105617
sS'required'
p105618
I00
sS'group_name'
p105619
Nsa(dp105620
S'name'
p105621
S'line_search'
p105622
sS'cpp_type'
p105623
S'MooseEnum'
p105624
sS'default'
p105625
S'default'
p105626
sS'description'
p105627
S'Specifies the line search type (Note: none = basic)\n'
p105628
sS'required'
p105629
I00
sS'options'
p105630
S'default shell none basic l2 bt cp'
p105631
sS'group_name'
p105632
Nsa(dp105633
S'description'
p105634
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105635
sS'cpp_type'
p105636
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105637
sS'default'
p105638
g3
sS'name'
p105639
S'off_diag_column'
p105640
sS'required'
p105641
I00
sS'group_name'
p105642
Nsa(dp105643
S'description'
p105644
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105645
sS'cpp_type'
p105646
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105647
sS'default'
p105648
g3
sS'name'
p105649
S'off_diag_row'
p105650
sS'required'
p105651
I00
sS'group_name'
p105652
Nsa(dp105653
S'name'
p105654
S'pc_side'
p105655
sS'cpp_type'
p105656
S'MooseEnum'
p105657
sS'default'
p105658
S'right'
p105659
sS'description'
p105660
S'Preconditioning side\n'
p105661
sS'required'
p105662
I00
sS'options'
p105663
S'left right symmetric'
p105664
sS'group_name'
p105665
Nsa(dp105666
S'name'
p105667
S'petsc_options'
p105668
sS'cpp_type'
p105669
S'MultiMooseEnum'
p105670
sS'default'
p105671
g3
sS'description'
p105672
S'Singleton PETSc options\n'
p105673
sS'required'
p105674
I00
sS'options'
p105675
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105676
sS'group_name'
p105677
Nsa(dp105678
S'name'
p105679
S'petsc_options_iname'
p105680
sS'cpp_type'
p105681
S'MultiMooseEnum'
p105682
sS'default'
p105683
g3
sS'description'
p105684
S'Names of PETSc name/value pairs\n'
p105685
sS'required'
p105686
I00
sS'options'
p105687
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105688
sS'group_name'
p105689
Nsa(dp105690
S'description'
p105691
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105692
sS'cpp_type'
p105693
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105694
sS'default'
p105695
g3
sS'name'
p105696
S'petsc_options_value'
p105697
sS'required'
p105698
I00
sS'group_name'
p105699
Nsa(dp105700
S'description'
p105701
S'TODO: docstring\n'
p105702
sS'cpp_type'
p105703
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105704
sS'default'
p105705
g3
sS'name'
p105706
S'preconditioner'
p105707
sS'required'
p105708
I01
sS'group_name'
p105709
Nsa(dp105710
S'description'
p105711
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p105712
sS'cpp_type'
p105713
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105714
sS'default'
p105715
g3
sS'name'
p105716
S'solve_order'
p105717
sS'required'
p105718
I01
sS'group_name'
p105719
Nsa(dp105720
S'name'
p105721
S'solve_type'
p105722
sS'cpp_type'
p105723
S'MooseEnum'
p105724
sS'default'
p105725
g3
sS'description'
p105726
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105727
sS'required'
p105728
I00
sS'options'
p105729
S'PJFNK JFNK NEWTON FD LINEAR'
p105730
sS'group_name'
p105731
Nsa(dp105732
S'description'
p105733
g3
sS'cpp_type'
p105734
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105735
sS'default'
p105736
S'PBP'
p105737
sS'name'
p105738
S'type'
p105739
sS'required'
p105740
I00
sS'group_name'
p105741
NsasS'name'
p105742
S'/Preconditioning/PBP'
p105743
sa(dp105744
S'description'
p105745
g3
sS'subblocks'
p105746
NsS'parameters'
p105747
(lp105748
(dp105749
S'description'
p105750
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105751
sS'cpp_type'
p105752
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105753
sS'default'
p105754
g3
sS'name'
p105755
S'control_tags'
p105756
sS'required'
p105757
I00
sS'group_name'
p105758
Nsa(dp105759
S'description'
p105760
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p105761
sS'cpp_type'
p105762
S'bool'
p105763
sS'default'
p105764
S'0'
p105765
sS'name'
p105766
S'full'
p105767
sS'required'
p105768
I00
sS'group_name'
p105769
Nsa(dp105770
S'name'
p105771
S'line_search'
p105772
sS'cpp_type'
p105773
S'MooseEnum'
p105774
sS'default'
p105775
S'default'
p105776
sS'description'
p105777
S'Specifies the line search type (Note: none = basic)\n'
p105778
sS'required'
p105779
I00
sS'options'
p105780
S'default shell none basic l2 bt cp'
p105781
sS'group_name'
p105782
Nsa(dp105783
S'description'
p105784
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105785
sS'cpp_type'
p105786
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105787
sS'default'
p105788
g3
sS'name'
p105789
S'off_diag_column'
p105790
sS'required'
p105791
I00
sS'group_name'
p105792
Nsa(dp105793
S'description'
p105794
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105795
sS'cpp_type'
p105796
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105797
sS'default'
p105798
g3
sS'name'
p105799
S'off_diag_row'
p105800
sS'required'
p105801
I00
sS'group_name'
p105802
Nsa(dp105803
S'name'
p105804
S'pc_side'
p105805
sS'cpp_type'
p105806
S'MooseEnum'
p105807
sS'default'
p105808
S'right'
p105809
sS'description'
p105810
S'Preconditioning side\n'
p105811
sS'required'
p105812
I00
sS'options'
p105813
S'left right symmetric'
p105814
sS'group_name'
p105815
Nsa(dp105816
S'name'
p105817
S'petsc_options'
p105818
sS'cpp_type'
p105819
S'MultiMooseEnum'
p105820
sS'default'
p105821
g3
sS'description'
p105822
S'Singleton PETSc options\n'
p105823
sS'required'
p105824
I00
sS'options'
p105825
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105826
sS'group_name'
p105827
Nsa(dp105828
S'name'
p105829
S'petsc_options_iname'
p105830
sS'cpp_type'
p105831
S'MultiMooseEnum'
p105832
sS'default'
p105833
g3
sS'description'
p105834
S'Names of PETSc name/value pairs\n'
p105835
sS'required'
p105836
I00
sS'options'
p105837
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105838
sS'group_name'
p105839
Nsa(dp105840
S'description'
p105841
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105842
sS'cpp_type'
p105843
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105844
sS'default'
p105845
g3
sS'name'
p105846
S'petsc_options_value'
p105847
sS'required'
p105848
I00
sS'group_name'
p105849
Nsa(dp105850
S'name'
p105851
S'solve_type'
p105852
sS'cpp_type'
p105853
S'MooseEnum'
p105854
sS'default'
p105855
g3
sS'description'
p105856
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105857
sS'required'
p105858
I00
sS'options'
p105859
S'PJFNK JFNK NEWTON FD LINEAR'
p105860
sS'group_name'
p105861
Nsa(dp105862
S'description'
p105863
g3
sS'cpp_type'
p105864
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p105865
sS'default'
p105866
S'SBP'
p105867
sS'name'
p105868
S'type'
p105869
sS'required'
p105870
I00
sS'group_name'
p105871
NsasS'name'
p105872
S'/Preconditioning/SBP'
p105873
sa(dp105874
S'description'
p105875
g3
sS'subblocks'
p105876
NsS'parameters'
p105877
(lp105878
(dp105879
S'description'
p105880
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p105881
sS'cpp_type'
p105882
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105883
sS'default'
p105884
g3
sS'name'
p105885
S'control_tags'
p105886
sS'required'
p105887
I00
sS'group_name'
p105888
Nsa(dp105889
S'description'
p105890
S'List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n'
p105891
sS'cpp_type'
p105892
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105893
sS'default'
p105894
g3
sS'name'
p105895
S'coupled_groups'
p105896
sS'required'
p105897
I00
sS'group_name'
p105898
Nsa(dp105899
S'description'
p105900
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p105901
sS'cpp_type'
p105902
S'bool'
p105903
sS'default'
p105904
S'0'
p105905
sS'name'
p105906
S'full'
p105907
sS'required'
p105908
I00
sS'group_name'
p105909
Nsa(dp105910
S'name'
p105911
S'line_search'
p105912
sS'cpp_type'
p105913
S'MooseEnum'
p105914
sS'default'
p105915
S'default'
p105916
sS'description'
p105917
S'Specifies the line search type (Note: none = basic)\n'
p105918
sS'required'
p105919
I00
sS'options'
p105920
S'default shell none basic l2 bt cp'
p105921
sS'group_name'
p105922
Nsa(dp105923
S'description'
p105924
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p105925
sS'cpp_type'
p105926
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105927
sS'default'
p105928
g3
sS'name'
p105929
S'off_diag_column'
p105930
sS'required'
p105931
I00
sS'group_name'
p105932
Nsa(dp105933
S'description'
p105934
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p105935
sS'cpp_type'
p105936
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p105937
sS'default'
p105938
g3
sS'name'
p105939
S'off_diag_row'
p105940
sS'required'
p105941
I00
sS'group_name'
p105942
Nsa(dp105943
S'name'
p105944
S'pc_side'
p105945
sS'cpp_type'
p105946
S'MooseEnum'
p105947
sS'default'
p105948
S'right'
p105949
sS'description'
p105950
S'Preconditioning side\n'
p105951
sS'required'
p105952
I00
sS'options'
p105953
S'left right symmetric'
p105954
sS'group_name'
p105955
Nsa(dp105956
S'name'
p105957
S'petsc_options'
p105958
sS'cpp_type'
p105959
S'MultiMooseEnum'
p105960
sS'default'
p105961
g3
sS'description'
p105962
S'Singleton PETSc options\n'
p105963
sS'required'
p105964
I00
sS'options'
p105965
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p105966
sS'group_name'
p105967
Nsa(dp105968
S'name'
p105969
S'petsc_options_iname'
p105970
sS'cpp_type'
p105971
S'MultiMooseEnum'
p105972
sS'default'
p105973
g3
sS'description'
p105974
S'Names of PETSc name/value pairs\n'
p105975
sS'required'
p105976
I00
sS'options'
p105977
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p105978
sS'group_name'
p105979
Nsa(dp105980
S'description'
p105981
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p105982
sS'cpp_type'
p105983
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p105984
sS'default'
p105985
g3
sS'name'
p105986
S'petsc_options_value'
p105987
sS'required'
p105988
I00
sS'group_name'
p105989
Nsa(dp105990
S'name'
p105991
S'solve_type'
p105992
sS'cpp_type'
p105993
S'MooseEnum'
p105994
sS'default'
p105995
g3
sS'description'
p105996
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p105997
sS'required'
p105998
I00
sS'options'
p105999
S'PJFNK JFNK NEWTON FD LINEAR'
p106000
sS'group_name'
p106001
Nsa(dp106002
S'description'
p106003
g3
sS'cpp_type'
p106004
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106005
sS'default'
p106006
S'SMP'
p106007
sS'name'
p106008
S'type'
p106009
sS'required'
p106010
I00
sS'group_name'
p106011
NsasS'name'
p106012
S'/Preconditioning/SMP'
p106013
sasS'parameters'
p106014
NsS'name'
p106015
S'/Preconditioning'
p106016
sa(dp106017
S'description'
p106018
g3
sS'subblocks'
p106019
(lp106020
(dp106021
S'description'
p106022
g3
sS'subblocks'
p106023
(lp106024
(dp106025
S'description'
p106026
g3
sS'subblocks'
p106027
NsS'parameters'
p106028
(lp106029
(dp106030
S'description'
p106031
g3
sS'cpp_type'
p106032
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106033
sS'default'
p106034
S'DisplacedProblem'
p106035
sS'name'
p106036
S'type'
p106037
sS'required'
p106038
I00
sS'group_name'
p106039
NsasS'name'
p106040
S'/Problem/<type>/DisplacedProblem'
p106041
sa(dp106042
S'description'
p106043
g3
sS'subblocks'
p106044
NsS'parameters'
p106045
(lp106046
(dp106047
S'description'
p106048
S'The dimension of the near nullspace\n'
p106049
sS'cpp_type'
p106050
S'unsigned int'
p106051
sS'default'
p106052
S'0'
p106053
sS'name'
p106054
S'dimNearNullSpace'
p106055
sS'required'
p106056
I00
sS'group_name'
p106057
Nsa(dp106058
S'description'
p106059
S'The dimension of the nullspace\n'
p106060
sS'cpp_type'
p106061
S'unsigned int'
p106062
sS'default'
p106063
S'0'
p106064
sS'name'
p106065
S'dimNullSpace'
p106066
sS'required'
p106067
I00
sS'group_name'
p106068
Nsa(dp106069
S'description'
p106070
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106071
sS'cpp_type'
p106072
S'bool'
p106073
sS'default'
p106074
S'0'
p106075
sS'name'
p106076
S'error_on_jacobian_nonzero_reallocation'
p106077
sS'required'
p106078
I00
sS'group_name'
p106079
Nsa(dp106080
S'description'
p106081
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106082
sS'cpp_type'
p106083
S'bool'
p106084
sS'default'
p106085
S'1'
p106086
sS'name'
p106087
S'solve'
p106088
sS'required'
p106089
I00
sS'group_name'
p106090
Nsa(dp106091
S'description'
p106092
g3
sS'cpp_type'
p106093
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106094
sS'default'
p106095
S'FEProblem'
p106096
sS'name'
p106097
S'type'
p106098
sS'required'
p106099
I00
sS'group_name'
p106100
Nsa(dp106101
S'description'
p106102
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106103
sS'cpp_type'
p106104
S'bool'
p106105
sS'default'
p106106
S'1'
p106107
sS'name'
p106108
S'use_nonlinear'
p106109
sS'required'
p106110
I00
sS'group_name'
p106111
NsasS'name'
p106112
S'/Problem/<type>/FEProblem'
p106113
sa(dp106114
S'description'
p106115
g3
sS'subblocks'
p106116
NsS'parameters'
p106117
(lp106118
(dp106119
S'description'
p106120
S'Iterations after which convergence to acceptable limits is accepted\n'
p106121
sS'cpp_type'
p106122
S'int'
p106123
sS'default'
p106124
S'0'
p106125
sS'name'
p106126
S'acceptable_iterations'
p106127
sS'required'
p106128
I00
sS'group_name'
p106129
Nsa(dp106130
S'description'
p106131
S'Multiplier applied to relative tolerance for acceptable limit\n'
p106132
sS'cpp_type'
p106133
S'double'
p106134
sS'default'
p106135
S'1'
p106136
sS'name'
p106137
S'acceptable_multiplier'
p106138
sS'required'
p106139
I00
sS'group_name'
p106140
Nsa(dp106141
S'description'
p106142
S'Set of variables that provide reference residuals for relative contact convergence check\n'
p106143
sS'cpp_type'
p106144
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106145
sS'default'
p106146
g3
sS'name'
p106147
S'contact_reference_residual_variables'
p106148
sS'required'
p106149
I00
sS'group_name'
p106150
Nsa(dp106151
S'description'
p106152
S'Multiplier on convergence criteria to determine when to start slipping\n'
p106153
sS'cpp_type'
p106154
S'double'
p106155
sS'default'
p106156
S'10'
p106157
sS'name'
p106158
S'contact_slip_tolerance_factor'
p106159
sS'required'
p106160
I00
sS'group_name'
p106161
Nsa(dp106162
S'description'
p106163
S'Auxiliary variable containing the saved x diagonal stiffness\n'
p106164
sS'cpp_type'
p106165
S'AuxVariableName'
p106166
sS'default'
p106167
g3
sS'name'
p106168
S'diag_stiff_x'
p106169
sS'required'
p106170
I01
sS'group_name'
p106171
Nsa(dp106172
S'description'
p106173
S'Auxiliary variable containing the saved y diagonal stiffness\n'
p106174
sS'cpp_type'
p106175
S'AuxVariableName'
p106176
sS'default'
p106177
g3
sS'name'
p106178
S'diag_stiff_y'
p106179
sS'required'
p106180
I01
sS'group_name'
p106181
Nsa(dp106182
S'description'
p106183
S'Auxiliary variable containing the saved z diagonal stiffness\n'
p106184
sS'cpp_type'
p106185
S'AuxVariableName'
p106186
sS'default'
p106187
g3
sS'name'
p106188
S'diag_stiff_z'
p106189
sS'required'
p106190
I00
sS'group_name'
p106191
Nsa(dp106192
S'description'
p106193
S'The dimension of the near nullspace\n'
p106194
sS'cpp_type'
p106195
S'unsigned int'
p106196
sS'default'
p106197
S'0'
p106198
sS'name'
p106199
S'dimNearNullSpace'
p106200
sS'required'
p106201
I00
sS'group_name'
p106202
Nsa(dp106203
S'description'
p106204
S'The dimension of the nullspace\n'
p106205
sS'cpp_type'
p106206
S'unsigned int'
p106207
sS'default'
p106208
S'0'
p106209
sS'name'
p106210
S'dimNullSpace'
p106211
sS'required'
p106212
I00
sS'group_name'
p106213
Nsa(dp106214
S'description'
p106215
S'Variable containing the x displacement\n'
p106216
sS'cpp_type'
p106217
S'NonlinearVariableName'
p106218
sS'default'
p106219
g3
sS'name'
p106220
S'disp_x'
p106221
sS'required'
p106222
I01
sS'group_name'
p106223
Nsa(dp106224
S'description'
p106225
S'Variable containing the y displacement\n'
p106226
sS'cpp_type'
p106227
S'NonlinearVariableName'
p106228
sS'default'
p106229
g3
sS'name'
p106230
S'disp_y'
p106231
sS'required'
p106232
I01
sS'group_name'
p106233
Nsa(dp106234
S'description'
p106235
S'Variable containing the z displacement\n'
p106236
sS'cpp_type'
p106237
S'NonlinearVariableName'
p106238
sS'default'
p106239
g3
sS'name'
p106240
S'disp_z'
p106241
sS'required'
p106242
I00
sS'group_name'
p106243
Nsa(dp106244
S'description'
p106245
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106246
sS'cpp_type'
p106247
S'bool'
p106248
sS'default'
p106249
S'0'
p106250
sS'name'
p106251
S'error_on_jacobian_nonzero_reallocation'
p106252
sS'required'
p106253
I00
sS'group_name'
p106254
Nsa(dp106255
S'description'
p106256
S'Coefficient of friction for sliding contact for each interaction\n'
p106257
sS'cpp_type'
p106258
S'std::vector<double, std::allocator<double> >'
p106259
sS'default'
p106260
g3
sS'name'
p106261
S'friction_coefficient'
p106262
sS'required'
p106263
I01
sS'group_name'
p106264
Nsa(dp106265
S'description'
p106266
S'Auxiliary variable to store the x incremental slip\n'
p106267
sS'cpp_type'
p106268
S'AuxVariableName'
p106269
sS'default'
p106270
g3
sS'name'
p106271
S'inc_slip_x'
p106272
sS'required'
p106273
I01
sS'group_name'
p106274
Nsa(dp106275
S'description'
p106276
S'Auxiliary variable to store the y incremental slip\n'
p106277
sS'cpp_type'
p106278
S'AuxVariableName'
p106279
sS'default'
p106280
g3
sS'name'
p106281
S'inc_slip_y'
p106282
sS'required'
p106283
I01
sS'group_name'
p106284
Nsa(dp106285
S'description'
p106286
S'Auxiliary variable to store the z incremental slip\n'
p106287
sS'cpp_type'
p106288
S'AuxVariableName'
p106289
sS'default'
p106290
g3
sS'name'
p106291
S'inc_slip_z'
p106292
sS'required'
p106293
I00
sS'group_name'
p106294
Nsa(dp106295
S'description'
p106296
S'IDs of the master surfaces for which the slip should be calculated\n'
p106297
sS'cpp_type'
p106298
S'std::vector<int, std::allocator<int> >'
p106299
sS'default'
p106300
g3
sS'name'
p106301
S'master'
p106302
sS'required'
p106303
I01
sS'group_name'
p106304
Nsa(dp106305
S'description'
p106306
S'Maximum number of slip iterations per step\n'
p106307
sS'cpp_type'
p106308
S'int'
p106309
sS'default'
p106310
S'100'
p106311
sS'name'
p106312
S'maximum_slip_iterations'
p106313
sS'required'
p106314
I00
sS'group_name'
p106315
Nsa(dp106316
S'description'
p106317
S'Minimum number of slip iterations per step\n'
p106318
sS'cpp_type'
p106319
S'int'
p106320
sS'default'
p106321
S'1'
p106322
sS'name'
p106323
S'minimum_slip_iterations'
p106324
sS'required'
p106325
I00
sS'group_name'
p106326
Nsa(dp106327
S'description'
p106328
S'Set of variables that provide reference residuals for relative convergence check\n'
p106329
sS'cpp_type'
p106330
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106331
sS'default'
p106332
g3
sS'name'
p106333
S'reference_residual_variables'
p106334
sS'required'
p106335
I00
sS'group_name'
p106336
Nsa(dp106337
S'description'
p106338
S'Auxiliary variable containing the saved x residual\n'
p106339
sS'cpp_type'
p106340
S'AuxVariableName'
p106341
sS'default'
p106342
g3
sS'name'
p106343
S'residual_x'
p106344
sS'required'
p106345
I01
sS'group_name'
p106346
Nsa(dp106347
S'description'
p106348
S'Auxiliary variable containing the saved y residual\n'
p106349
sS'cpp_type'
p106350
S'AuxVariableName'
p106351
sS'default'
p106352
g3
sS'name'
p106353
S'residual_y'
p106354
sS'required'
p106355
I01
sS'group_name'
p106356
Nsa(dp106357
S'description'
p106358
S'Auxiliary variable containing the saved z residual\n'
p106359
sS'cpp_type'
p106360
S'AuxVariableName'
p106361
sS'default'
p106362
g3
sS'name'
p106363
S'residual_z'
p106364
sS'required'
p106365
I00
sS'group_name'
p106366
Nsa(dp106367
S'description'
p106368
S'IDs of the slave surfaces for which the slip should be calculated\n'
p106369
sS'cpp_type'
p106370
S'std::vector<int, std::allocator<int> >'
p106371
sS'default'
p106372
g3
sS'name'
p106373
S'slave'
p106374
sS'required'
p106375
I01
sS'group_name'
p106376
Nsa(dp106377
S'description'
p106378
S'Fraction of calculated slip to be applied for each interaction\n'
p106379
sS'cpp_type'
p106380
S'std::vector<double, std::allocator<double> >'
p106381
sS'default'
p106382
g3
sS'name'
p106383
S'slip_factor'
p106384
sS'required'
p106385
I01
sS'group_name'
p106386
Nsa(dp106387
S'description'
p106388
S'Fraction of calculated slip to be applied for each interaction in the slipped-too-far state\n'
p106389
sS'cpp_type'
p106390
S'std::vector<double, std::allocator<double> >'
p106391
sS'default'
p106392
g3
sS'name'
p106393
S'slip_too_far_factor'
p106394
sS'required'
p106395
I01
sS'group_name'
p106396
Nsa(dp106397
S'description'
p106398
S'Number of slip updates per contact iteration\n'
p106399
sS'cpp_type'
p106400
S'int'
p106401
sS'default'
p106402
S'1'
p106403
sS'name'
p106404
S'slip_updates_per_iteration'
p106405
sS'required'
p106406
I00
sS'group_name'
p106407
Nsa(dp106408
S'description'
p106409
S'Set of solution variables to be checked for relative convergence\n'
p106410
sS'cpp_type'
p106411
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106412
sS'default'
p106413
g3
sS'name'
p106414
S'solution_variables'
p106415
sS'required'
p106416
I00
sS'group_name'
p106417
Nsa(dp106418
S'description'
p106419
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106420
sS'cpp_type'
p106421
S'bool'
p106422
sS'default'
p106423
S'1'
p106424
sS'name'
p106425
S'solve'
p106426
sS'required'
p106427
I00
sS'group_name'
p106428
Nsa(dp106429
S'description'
p106430
S'Frictional contact residual convergence criterion\n'
p106431
sS'cpp_type'
p106432
S'double'
p106433
sS'default'
p106434
g3
sS'name'
p106435
S'target_contact_residual'
p106436
sS'required'
p106437
I00
sS'group_name'
p106438
Nsa(dp106439
S'description'
p106440
S'Frictional contact relative residual convergence criterion\n'
p106441
sS'cpp_type'
p106442
S'double'
p106443
sS'default'
p106444
g3
sS'name'
p106445
S'target_relative_contact_residual'
p106446
sS'required'
p106447
I00
sS'group_name'
p106448
Nsa(dp106449
S'description'
p106450
g3
sS'cpp_type'
p106451
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106452
sS'default'
p106453
S'FrictionalContactProblem'
p106454
sS'name'
p106455
S'type'
p106456
sS'required'
p106457
I00
sS'group_name'
p106458
Nsa(dp106459
S'description'
p106460
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106461
sS'cpp_type'
p106462
S'bool'
p106463
sS'default'
p106464
S'1'
p106465
sS'name'
p106466
S'use_nonlinear'
p106467
sS'required'
p106468
I00
sS'group_name'
p106469
NsasS'name'
p106470
S'/Problem/<type>/FrictionalContactProblem'
p106471
sa(dp106472
S'description'
p106473
g3
sS'subblocks'
p106474
NsS'parameters'
p106475
(lp106476
(dp106477
S'description'
p106478
S'Iterations after which convergence to acceptable limits is accepted\n'
p106479
sS'cpp_type'
p106480
S'int'
p106481
sS'default'
p106482
S'0'
p106483
sS'name'
p106484
S'acceptable_iterations'
p106485
sS'required'
p106486
I00
sS'group_name'
p106487
Nsa(dp106488
S'description'
p106489
S'Multiplier applied to relative tolerance for acceptable limit\n'
p106490
sS'cpp_type'
p106491
S'double'
p106492
sS'default'
p106493
S'1'
p106494
sS'name'
p106495
S'acceptable_multiplier'
p106496
sS'required'
p106497
I00
sS'group_name'
p106498
Nsa(dp106499
S'description'
p106500
S'The dimension of the near nullspace\n'
p106501
sS'cpp_type'
p106502
S'unsigned int'
p106503
sS'default'
p106504
S'0'
p106505
sS'name'
p106506
S'dimNearNullSpace'
p106507
sS'required'
p106508
I00
sS'group_name'
p106509
Nsa(dp106510
S'description'
p106511
S'The dimension of the nullspace\n'
p106512
sS'cpp_type'
p106513
S'unsigned int'
p106514
sS'default'
p106515
S'0'
p106516
sS'name'
p106517
S'dimNullSpace'
p106518
sS'required'
p106519
I00
sS'group_name'
p106520
Nsa(dp106521
S'description'
p106522
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106523
sS'cpp_type'
p106524
S'bool'
p106525
sS'default'
p106526
S'0'
p106527
sS'name'
p106528
S'error_on_jacobian_nonzero_reallocation'
p106529
sS'required'
p106530
I00
sS'group_name'
p106531
Nsa(dp106532
S'description'
p106533
S'Set of variables that provide reference residuals for relative convergence check\n'
p106534
sS'cpp_type'
p106535
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106536
sS'default'
p106537
g3
sS'name'
p106538
S'reference_residual_variables'
p106539
sS'required'
p106540
I00
sS'group_name'
p106541
Nsa(dp106542
S'description'
p106543
S'Set of solution variables to be checked for relative convergence\n'
p106544
sS'cpp_type'
p106545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106546
sS'default'
p106547
g3
sS'name'
p106548
S'solution_variables'
p106549
sS'required'
p106550
I00
sS'group_name'
p106551
Nsa(dp106552
S'description'
p106553
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106554
sS'cpp_type'
p106555
S'bool'
p106556
sS'default'
p106557
S'1'
p106558
sS'name'
p106559
S'solve'
p106560
sS'required'
p106561
I00
sS'group_name'
p106562
Nsa(dp106563
S'description'
p106564
g3
sS'cpp_type'
p106565
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106566
sS'default'
p106567
S'ReferenceResidualProblem'
p106568
sS'name'
p106569
S'type'
p106570
sS'required'
p106571
I00
sS'group_name'
p106572
Nsa(dp106573
S'description'
p106574
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106575
sS'cpp_type'
p106576
S'bool'
p106577
sS'default'
p106578
S'1'
p106579
sS'name'
p106580
S'use_nonlinear'
p106581
sS'required'
p106582
I00
sS'group_name'
p106583
NsasS'name'
p106584
S'/Problem/<type>/ReferenceResidualProblem'
p106585
sa(dp106586
S'description'
p106587
g3
sS'subblocks'
p106588
NsS'parameters'
p106589
(lp106590
(dp106591
S'description'
p106592
S'Variable whose value will be constrained to be greater than lower_var\n'
p106593
sS'cpp_type'
p106594
S'NonlinearVariableName'
p106595
sS'default'
p106596
g3
sS'name'
p106597
S'bounded_var'
p106598
sS'required'
p106599
I01
sS'group_name'
p106600
Nsa(dp106601
S'description'
p106602
S'The dimension of the near nullspace\n'
p106603
sS'cpp_type'
p106604
S'unsigned int'
p106605
sS'default'
p106606
S'0'
p106607
sS'name'
p106608
S'dimNearNullSpace'
p106609
sS'required'
p106610
I00
sS'group_name'
p106611
Nsa(dp106612
S'description'
p106613
S'The dimension of the nullspace\n'
p106614
sS'cpp_type'
p106615
S'unsigned int'
p106616
sS'default'
p106617
S'0'
p106618
sS'name'
p106619
S'dimNullSpace'
p106620
sS'required'
p106621
I00
sS'group_name'
p106622
Nsa(dp106623
S'description'
p106624
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p106625
sS'cpp_type'
p106626
S'bool'
p106627
sS'default'
p106628
S'0'
p106629
sS'name'
p106630
S'error_on_jacobian_nonzero_reallocation'
p106631
sS'required'
p106632
I00
sS'group_name'
p106633
Nsa(dp106634
S'description'
p106635
S'Variable that acts as a lower bound to bounded_var.  It will not be constrained during the solution procedure\n'
p106636
sS'cpp_type'
p106637
S'NonlinearVariableName'
p106638
sS'default'
p106639
g3
sS'name'
p106640
S'lower_var'
p106641
sS'required'
p106642
I01
sS'group_name'
p106643
Nsa(dp106644
S'description'
p106645
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p106646
sS'cpp_type'
p106647
S'bool'
p106648
sS'default'
p106649
S'1'
p106650
sS'name'
p106651
S'solve'
p106652
sS'required'
p106653
I00
sS'group_name'
p106654
Nsa(dp106655
S'description'
p106656
g3
sS'cpp_type'
p106657
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106658
sS'default'
p106659
S'RichardsMultiphaseProblem'
p106660
sS'name'
p106661
S'type'
p106662
sS'required'
p106663
I00
sS'group_name'
p106664
Nsa(dp106665
S'description'
p106666
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p106667
sS'cpp_type'
p106668
S'bool'
p106669
sS'default'
p106670
S'1'
p106671
sS'name'
p106672
S'use_nonlinear'
p106673
sS'required'
p106674
I00
sS'group_name'
p106675
NsasS'name'
p106676
S'/Problem/<type>/RichardsMultiphaseProblem'
p106677
sasS'parameters'
p106678
NsS'name'
p106679
S'/Problem/<type>'
p106680
sasS'parameters'
p106681
(lp106682
(dp106683
S'description'
p106684
S'Block IDs for the coordinate systems\n'
p106685
sS'cpp_type'
p106686
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p106687
sS'default'
p106688
g3
sS'name'
p106689
S'block'
p106690
sS'required'
p106691
I00
sS'group_name'
p106692
Nsa(dp106693
S'name'
p106694
S'coord_type'
p106695
sS'cpp_type'
p106696
S'MultiMooseEnum'
p106697
sS'default'
p106698
S'XYZ'
p106699
sS'description'
p106700
S'Type of the coordinate system per block param\n'
p106701
sS'required'
p106702
I00
sS'options'
p106703
S'XYZ RZ RSPHERICAL'
p106704
sS'group_name'
p106705
Nsa(dp106706
S'description'
p106707
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p106708
sS'cpp_type'
p106709
S'bool'
p106710
sS'default'
p106711
S'0'
p106712
sS'name'
p106713
S'fe_cache'
p106714
sS'required'
p106715
I00
sS'group_name'
p106716
Nsa(dp106717
S'description'
p106718
S'Set to false to disable kernel->subdomain coverage check\n'
p106719
sS'cpp_type'
p106720
S'bool'
p106721
sS'default'
p106722
S'1'
p106723
sS'name'
p106724
S'kernel_coverage_check'
p106725
sS'required'
p106726
I00
sS'group_name'
p106727
Nsa(dp106728
S'description'
p106729
S'Set to false to disable material->subdomain coverage check\n'
p106730
sS'cpp_type'
p106731
S'bool'
p106732
sS'default'
p106733
S'1'
p106734
sS'name'
p106735
S'material_coverage_check'
p106736
sS'required'
p106737
I00
sS'group_name'
p106738
Nsa(dp106739
S'description'
p106740
S'The name the problem\n'
p106741
sS'cpp_type'
p106742
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106743
sS'default'
p106744
S'MOOSE Problem'
p106745
sS'name'
p106746
S'name'
p106747
sS'required'
p106748
I00
sS'group_name'
p106749
Nsa(dp106750
S'description'
p106751
S'File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n'
p106752
sS'cpp_type'
p106753
S'FileNameNoExtension'
p106754
sS'default'
p106755
g3
sS'name'
p106756
S'restart_file_base'
p106757
sS'required'
p106758
I00
sS'group_name'
p106759
Nsa(dp106760
S'name'
p106761
S'rz_coord_axis'
p106762
sS'cpp_type'
p106763
S'MooseEnum'
p106764
sS'default'
p106765
S'Y'
p106766
sS'description'
p106767
S'The rotation axis (X | Y) for axisymetric coordinates\n'
p106768
sS'required'
p106769
I00
sS'options'
p106770
S'X Y'
p106771
sS'group_name'
p106772
Nsa(dp106773
S'description'
p106774
S'A string representing the Moose Object that will be built by this Action\n'
p106775
sS'cpp_type'
p106776
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106777
sS'default'
p106778
S'FEProblem'
p106779
sS'name'
p106780
S'type'
p106781
sS'required'
p106782
I01
sS'group_name'
p106783
Nsa(dp106784
S'description'
p106785
S'Set to true to have MOOSE recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p106786
sS'cpp_type'
p106787
S'bool'
p106788
sS'default'
p106789
g3
sS'name'
p106790
S'use_legacy_uo_aux_computation'
p106791
sS'required'
p106792
I00
sS'group_name'
p106793
Nsa(dp106794
S'description'
p106795
S'Set to true to have MOOSE compute all UserObjects and Postprocessors during the initial setup phase of the problem recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p106796
sS'cpp_type'
p106797
S'bool'
p106798
sS'default'
p106799
g3
sS'name'
p106800
S'use_legacy_uo_initialization'
p106801
sS'required'
p106802
I00
sS'group_name'
p106803
Nsa(dp106804
S'description'
p106805
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p106806
sS'cpp_type'
p106807
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106808
sS'default'
p106809
g3
sS'name'
p106810
S'library_path'
p106811
sS'required'
p106812
I00
sS'group_name'
p106813
Nsa(dp106814
S'description'
p106815
S'The names of the objects to register (Default: register all).\n'
p106816
sS'cpp_type'
p106817
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106818
sS'default'
p106819
g3
sS'name'
p106820
S'object_names'
p106821
sS'required'
p106822
I00
sS'group_name'
p106823
Nsa(dp106824
S'description'
p106825
S'The names of other applications from which objects will be registered from (dynamic registration).\n'
p106826
sS'cpp_type'
p106827
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106828
sS'default'
p106829
g3
sS'name'
p106830
S'register_objects_from'
p106831
sS'required'
p106832
I00
sS'group_name'
p106833
NsasS'name'
p106834
S'/Problem'
p106835
sa(dp106836
S'description'
p106837
g3
sS'subblocks'
p106838
(lp106839
(dp106840
S'description'
p106841
g3
sS'subblocks'
p106842
NsS'parameters'
p106843
(lp106844
(dp106845
S'description'
p106846
S'The list of aqueous equilibrium reactions\n'
p106847
sS'cpp_type'
p106848
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106849
sS'default'
p106850
g3
sS'name'
p106851
S'reactions'
p106852
sS'required'
p106853
I00
sS'group_name'
p106854
Nsa(dp106855
S'description'
p106856
S'The list of aqueous equilibrium species to be output as aux variables\n'
p106857
sS'cpp_type'
p106858
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106859
sS'default'
p106860
g3
sS'name'
p106861
S'secondary_species'
p106862
sS'required'
p106863
I00
sS'group_name'
p106864
Nsa(dp106865
S'description'
p106866
S'Checks if pressure is a primary variable\n'
p106867
sS'cpp_type'
p106868
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p106869
sS'default'
p106870
g3
sS'name'
p106871
S'pressure'
p106872
sS'required'
p106873
I00
sS'group_name'
p106874
Nsa(dp106875
S'description'
p106876
S'The list of primary variables to add\n'
p106877
sS'cpp_type'
p106878
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p106879
sS'default'
p106880
g3
sS'name'
p106881
S'primary_species'
p106882
sS'required'
p106883
I01
sS'group_name'
p106884
Nsa(dp106885
S'description'
p106886
S'The list of solid kinetic reactions\n'
p106887
sS'cpp_type'
p106888
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106889
sS'default'
p106890
g3
sS'name'
p106891
S'kin_reactions'
p106892
sS'required'
p106893
I00
sS'group_name'
p106894
NsasS'name'
p106895
S'/ReactionNetwork/AqueousEquilibriumReactions'
p106896
sa(dp106897
S'description'
p106898
g3
sS'subblocks'
p106899
NsS'parameters'
p106900
(lp106901
(dp106902
S'description'
p106903
S'The list of activation energy values for all reactions, (J/mol)\n'
p106904
sS'cpp_type'
p106905
S'std::vector<double, std::allocator<double> >'
p106906
sS'default'
p106907
g3
sS'name'
p106908
S'activation_energy'
p106909
sS'required'
p106910
I01
sS'group_name'
p106911
Nsa(dp106912
S'description'
p106913
S'Gas constant, 8.314 (J/mol/K)\n'
p106914
sS'cpp_type'
p106915
S'double'
p106916
sS'default'
p106917
g3
sS'name'
p106918
S'gas_constant'
p106919
sS'required'
p106920
I01
sS'group_name'
p106921
Nsa(dp106922
S'description'
p106923
S'The list of solid kinetic reactions\n'
p106924
sS'cpp_type'
p106925
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p106926
sS'default'
p106927
g3
sS'name'
p106928
S'kin_reactions'
p106929
sS'required'
p106930
I01
sS'group_name'
p106931
Nsa(dp106932
S'description'
p106933
S'The list of kinetic rate constant for all reactions, (mol/m^2/s)\n'
p106934
sS'cpp_type'
p106935
S'std::vector<double, std::allocator<double> >'
p106936
sS'default'
p106937
g3
sS'name'
p106938
S'kinetic_rate_constant'
p106939
sS'required'
p106940
I01
sS'group_name'
p106941
Nsa(dp106942
S'description'
p106943
S'The list of equilibrium constants for all reactions\n'
p106944
sS'cpp_type'
p106945
S'std::vector<double, std::allocator<double> >'
p106946
sS'default'
p106947
g3
sS'name'
p106948
S'log10_keq'
p106949
sS'required'
p106950
I01
sS'group_name'
p106951
Nsa(dp106952
S'description'
p106953
S'The list of reference temperatures for all reactions, (K)\n'
p106954
sS'cpp_type'
p106955
S'std::vector<double, std::allocator<double> >'
p106956
sS'default'
p106957
g3
sS'name'
p106958
S'reference_temperature'
p106959
sS'required'
p106960
I01
sS'group_name'
p106961
Nsa(dp106962
S'description'
p106963
S'The list of specific reactive surface area for all minerals, (m^2/L)\n'
p106964
sS'cpp_type'
p106965
S'std::vector<double, std::allocator<double> >'
p106966
sS'default'
p106967
g3
sS'name'
p106968
S'specific_reactive_surface_area'
p106969
sS'required'
p106970
I01
sS'group_name'
p106971
Nsa(dp106972
S'description'
p106973
S'The list of system temperatures for all reactions, (K)\n'
p106974
sS'cpp_type'
p106975
S'std::vector<double, std::allocator<double> >'
p106976
sS'default'
p106977
g3
sS'name'
p106978
S'system_temperature'
p106979
sS'required'
p106980
I01
sS'group_name'
p106981
Nsa(dp106982
S'description'
p106983
S'The list of primary species to add\n'
p106984
sS'cpp_type'
p106985
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p106986
sS'default'
p106987
g3
sS'name'
p106988
S'primary_species'
p106989
sS'required'
p106990
I01
sS'group_name'
p106991
Nsa(dp106992
S'description'
p106993
S'The list of secondary species to add\n'
p106994
sS'cpp_type'
p106995
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p106996
sS'default'
p106997
g3
sS'name'
p106998
S'secondary_species'
p106999
sS'required'
p107000
I00
sS'group_name'
p107001
NsasS'name'
p107002
S'/ReactionNetwork/SolidKineticReactions'
p107003
sasS'parameters'
p107004
(lp107005
(dp107006
S'description'
p107007
S'The list of primary variables to add\n'
p107008
sS'cpp_type'
p107009
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p107010
sS'default'
p107011
g3
sS'name'
p107012
S'primary_species'
p107013
sS'required'
p107014
I01
sS'group_name'
p107015
NsasS'name'
p107016
S'/ReactionNetwork'
p107017
sa(dp107018
S'description'
p107019
g3
sS'subblocks'
p107020
(lp107021
(dp107022
S'description'
p107023
g3
sS'subblocks'
p107024
NsS'parameters'
p107025
(lp107026
(dp107027
S'description'
p107028
S'A string representing the Moose Object that will be built by this Action\n'
p107029
sS'cpp_type'
p107030
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107031
sS'default'
p107032
g3
sS'name'
p107033
S'type'
p107034
sS'required'
p107035
I01
sS'group_name'
p107036
NsasS'name'
p107037
S'/ScalarKernels/*'
p107038
sa(dp107039
S'description'
p107040
g3
sS'subblocks'
p107041
NsS'parameters'
p107042
(lp107043
(dp107044
S'description'
p107045
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107046
sS'cpp_type'
p107047
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107048
sS'default'
p107049
g3
sS'name'
p107050
S'control_tags'
p107051
sS'required'
p107052
I00
sS'group_name'
p107053
Nsa(dp107054
S'description'
p107055
S'Node ids\n'
p107056
sS'cpp_type'
p107057
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p107058
sS'default'
p107059
g3
sS'name'
p107060
S'nodes'
p107061
sS'required'
p107062
I01
sS'group_name'
p107063
Nsa(dp107064
S'description'
p107065
g3
sS'cpp_type'
p107066
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107067
sS'default'
p107068
S'NodalEqualValueConstraint'
p107069
sS'name'
p107070
S'type'
p107071
sS'required'
p107072
I00
sS'group_name'
p107073
Nsa(dp107074
S'description'
p107075
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107076
sS'cpp_type'
p107077
S'bool'
p107078
sS'default'
p107079
S'0'
p107080
sS'name'
p107081
S'use_displaced_mesh'
p107082
sS'required'
p107083
I00
sS'group_name'
p107084
S'Advanced'
p107085
sa(dp107086
S'description'
p107087
S'Variable(s) to put the constraint on\n'
p107088
sS'cpp_type'
p107089
S'std::vector<VariableName>'
p107090
sS'default'
p107091
g3
sS'name'
p107092
S'var'
p107093
sS'required'
p107094
I01
sS'group_name'
p107095
Nsa(dp107096
S'description'
p107097
S'The name of the variable that this kernel operates on\n'
p107098
sS'cpp_type'
p107099
S'NonlinearVariableName'
p107100
sS'default'
p107101
g3
sS'name'
p107102
S'variable'
p107103
sS'required'
p107104
I01
sS'group_name'
p107105
NsasS'name'
p107106
S'/ScalarKernels/NodalEqualValueConstraint'
p107107
sa(dp107108
S'description'
p107109
g3
sS'subblocks'
p107110
NsS'parameters'
p107111
(lp107112
(dp107113
S'description'
p107114
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107115
sS'cpp_type'
p107116
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107117
sS'default'
p107118
g3
sS'name'
p107119
S'control_tags'
p107120
sS'required'
p107121
I00
sS'group_name'
p107122
Nsa(dp107123
S'description'
p107124
g3
sS'cpp_type'
p107125
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107126
sS'default'
p107127
S'ODETimeDerivative'
p107128
sS'name'
p107129
S'type'
p107130
sS'required'
p107131
I00
sS'group_name'
p107132
Nsa(dp107133
S'description'
p107134
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107135
sS'cpp_type'
p107136
S'bool'
p107137
sS'default'
p107138
S'0'
p107139
sS'name'
p107140
S'use_displaced_mesh'
p107141
sS'required'
p107142
I00
sS'group_name'
p107143
S'Advanced'
p107144
sa(dp107145
S'description'
p107146
S'The name of the variable that this kernel operates on\n'
p107147
sS'cpp_type'
p107148
S'NonlinearVariableName'
p107149
sS'default'
p107150
g3
sS'name'
p107151
S'variable'
p107152
sS'required'
p107153
I01
sS'group_name'
p107154
NsasS'name'
p107155
S'/ScalarKernels/ODETimeDerivative'
p107156
sa(dp107157
S'description'
p107158
S'Parsed ODE function kernel.\n'
p107159
sS'subblocks'
p107160
NsS'parameters'
p107161
(lp107162
(dp107163
S'description'
p107164
S'additional coupled variables\n'
p107165
sS'cpp_type'
p107166
S'std::vector<VariableName>'
p107167
sS'default'
p107168
g3
sS'name'
p107169
S'args'
p107170
sS'required'
p107171
I00
sS'group_name'
p107172
Nsa(dp107173
S'description'
p107174
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p107175
sS'cpp_type'
p107176
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107177
sS'default'
p107178
g3
sS'name'
p107179
S'constant_expressions'
p107180
sS'required'
p107181
I00
sS'group_name'
p107182
Nsa(dp107183
S'description'
p107184
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p107185
sS'cpp_type'
p107186
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107187
sS'default'
p107188
g3
sS'name'
p107189
S'constant_names'
p107190
sS'required'
p107191
I00
sS'group_name'
p107192
Nsa(dp107193
S'description'
p107194
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107195
sS'cpp_type'
p107196
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107197
sS'default'
p107198
g3
sS'name'
p107199
S'control_tags'
p107200
sS'required'
p107201
I00
sS'group_name'
p107202
Nsa(dp107203
S'description'
p107204
S'Disable the function parser algebraic optimizer\n'
p107205
sS'cpp_type'
p107206
S'bool'
p107207
sS'default'
p107208
S'0'
p107209
sS'name'
p107210
S'disable_fpoptimizer'
p107211
sS'required'
p107212
I00
sS'group_name'
p107213
Nsa(dp107214
S'description'
p107215
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p107216
sS'cpp_type'
p107217
S'bool'
p107218
sS'default'
p107219
S'1'
p107220
sS'name'
p107221
S'enable_jit'
p107222
sS'required'
p107223
I00
sS'group_name'
p107224
Nsa(dp107225
S'description'
p107226
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p107227
sS'cpp_type'
p107228
S'bool'
p107229
sS'default'
p107230
S'0'
p107231
sS'name'
p107232
S'fail_on_evalerror'
p107233
sS'required'
p107234
I00
sS'group_name'
p107235
Nsa(dp107236
S'description'
p107237
S'function expression\n'
p107238
sS'cpp_type'
p107239
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107240
sS'default'
p107241
g3
sS'name'
p107242
S'function'
p107243
sS'required'
p107244
I01
sS'group_name'
p107245
Nsa(dp107246
S'description'
p107247
g3
sS'cpp_type'
p107248
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107249
sS'default'
p107250
S'ParsedODEKernel'
p107251
sS'name'
p107252
S'type'
p107253
sS'required'
p107254
I00
sS'group_name'
p107255
Nsa(dp107256
S'description'
p107257
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p107258
sS'cpp_type'
p107259
S'bool'
p107260
sS'default'
p107261
S'0'
p107262
sS'name'
p107263
S'use_displaced_mesh'
p107264
sS'required'
p107265
I00
sS'group_name'
p107266
S'Advanced'
p107267
sa(dp107268
S'description'
p107269
S'The name of the variable that this kernel operates on\n'
p107270
sS'cpp_type'
p107271
S'NonlinearVariableName'
p107272
sS'default'
p107273
g3
sS'name'
p107274
S'variable'
p107275
sS'required'
p107276
I01
sS'group_name'
p107277
NsasS'name'
p107278
S'/ScalarKernels/ParsedODEKernel'
p107279
sasS'parameters'
p107280
NsS'name'
p107281
S'/ScalarKernels'
p107282
sa(dp107283
S'description'
p107284
g3
sS'subblocks'
p107285
(lp107286
(dp107287
S'description'
p107288
g3
sS'subblocks'
p107289
NsS'parameters'
p107290
(lp107291
(dp107292
S'description'
p107293
S'alpha parameter for HHT time integration\n'
p107294
sS'cpp_type'
p107295
S'double'
p107296
sS'default'
p107297
S'0'
p107298
sS'name'
p107299
S'alpha'
p107300
sS'required'
p107301
I00
sS'group_name'
p107302
Nsa(dp107303
S'description'
p107304
S'Name appended to material properties to make them unique\n'
p107305
sS'cpp_type'
p107306
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107307
sS'default'
p107308
g3
sS'name'
p107309
S'appended_property_name'
p107310
sS'required'
p107311
I00
sS'group_name'
p107312
Nsa(dp107313
S'description'
p107314
S'The list of ids of the blocks (subdomain) that these kernels will be applied to\n'
p107315
sS'cpp_type'
p107316
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p107317
sS'default'
p107318
g3
sS'name'
p107319
S'block'
p107320
sS'required'
p107321
I00
sS'group_name'
p107322
Nsa(dp107323
S'description'
p107324
S'Auxiliary variables to save the r displacement diagonal preconditioner terms.\n'
p107325
sS'cpp_type'
p107326
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107327
sS'default'
p107328
g3
sS'name'
p107329
S'diag_save_in_disp_r'
p107330
sS'required'
p107331
I00
sS'group_name'
p107332
Nsa(dp107333
S'description'
p107334
S'Auxiliary variables to save the x displacement diagonal preconditioner terms.\n'
p107335
sS'cpp_type'
p107336
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107337
sS'default'
p107338
g3
sS'name'
p107339
S'diag_save_in_disp_x'
p107340
sS'required'
p107341
I00
sS'group_name'
p107342
Nsa(dp107343
S'description'
p107344
S'Auxiliary variables to save the y displacement diagonal preconditioner terms.\n'
p107345
sS'cpp_type'
p107346
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107347
sS'default'
p107348
g3
sS'name'
p107349
S'diag_save_in_disp_y'
p107350
sS'required'
p107351
I00
sS'group_name'
p107352
Nsa(dp107353
S'description'
p107354
S'Auxiliary variables to save the z displacement diagonal preconditioner terms.\n'
p107355
sS'cpp_type'
p107356
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107357
sS'default'
p107358
g3
sS'name'
p107359
S'diag_save_in_disp_z'
p107360
sS'required'
p107361
I00
sS'group_name'
p107362
Nsa(dp107363
S'description'
p107364
S'The r displacement\n'
p107365
sS'cpp_type'
p107366
S'NonlinearVariableName'
p107367
sS'default'
p107368
g3
sS'name'
p107369
S'disp_r'
p107370
sS'required'
p107371
I00
sS'group_name'
p107372
Nsa(dp107373
S'description'
p107374
S'The x displacement\n'
p107375
sS'cpp_type'
p107376
S'NonlinearVariableName'
p107377
sS'default'
p107378
g3
sS'name'
p107379
S'disp_x'
p107380
sS'required'
p107381
I00
sS'group_name'
p107382
Nsa(dp107383
S'description'
p107384
S'The y displacement\n'
p107385
sS'cpp_type'
p107386
S'NonlinearVariableName'
p107387
sS'default'
p107388
g3
sS'name'
p107389
S'disp_y'
p107390
sS'required'
p107391
I00
sS'group_name'
p107392
Nsa(dp107393
S'description'
p107394
S'The z displacement\n'
p107395
sS'cpp_type'
p107396
S'NonlinearVariableName'
p107397
sS'default'
p107398
g3
sS'name'
p107399
S'disp_z'
p107400
sS'required'
p107401
I00
sS'group_name'
p107402
Nsa(dp107403
S'description'
p107404
S'Auxiliary variables to save the r displacement residuals.\n'
p107405
sS'cpp_type'
p107406
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107407
sS'default'
p107408
g3
sS'name'
p107409
S'save_in_disp_r'
p107410
sS'required'
p107411
I00
sS'group_name'
p107412
Nsa(dp107413
S'description'
p107414
S'Auxiliary variables to save the x displacement residuals.\n'
p107415
sS'cpp_type'
p107416
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107417
sS'default'
p107418
g3
sS'name'
p107419
S'save_in_disp_x'
p107420
sS'required'
p107421
I00
sS'group_name'
p107422
Nsa(dp107423
S'description'
p107424
S'Auxiliary variables to save the y displacement residuals.\n'
p107425
sS'cpp_type'
p107426
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107427
sS'default'
p107428
g3
sS'name'
p107429
S'save_in_disp_y'
p107430
sS'required'
p107431
I00
sS'group_name'
p107432
Nsa(dp107433
S'description'
p107434
S'Auxiliary variables to save the z displacement residuals.\n'
p107435
sS'cpp_type'
p107436
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p107437
sS'default'
p107438
g3
sS'name'
p107439
S'save_in_disp_z'
p107440
sS'required'
p107441
I00
sS'group_name'
p107442
Nsa(dp107443
S'description'
p107444
S'The temperature\n'
p107445
sS'cpp_type'
p107446
S'NonlinearVariableName'
p107447
sS'default'
p107448
g3
sS'name'
p107449
S'temp'
p107450
sS'required'
p107451
I00
sS'group_name'
p107452
Nsa(dp107453
S'name'
p107454
S'type'
p107455
sS'cpp_type'
p107456
S'MooseEnum'
p107457
sS'default'
p107458
S'undefined'
p107459
sS'description'
p107460
S'The element type: truss undefined\n'
p107461
sS'required'
p107462
I00
sS'options'
p107463
S'truss undefined'
p107464
sS'group_name'
p107465
Nsa(dp107466
S'description'
p107467
g3
sS'cpp_type'
p107468
S'bool'
p107469
sS'default'
p107470
S'1'
p107471
sS'name'
p107472
S'use_displaced_mesh'
p107473
sS'required'
p107474
I00
sS'group_name'
p107475
Nsa(dp107476
S'description'
p107477
S'Stiffness dependent damping parameter for Rayleigh damping\n'
p107478
sS'cpp_type'
p107479
S'double'
p107480
sS'default'
p107481
S'0'
p107482
sS'name'
p107483
S'zeta'
p107484
sS'required'
p107485
I00
sS'group_name'
p107486
NsasS'name'
p107487
S'/SolidMechanics/*'
p107488
sasS'parameters'
p107489
NsS'name'
p107490
S'/SolidMechanics'
p107491
sa(dp107492
S'description'
p107493
g3
sS'subblocks'
p107494
(lp107495
(dp107496
S'description'
p107497
g3
sS'subblocks'
p107498
NsS'parameters'
p107499
(lp107500
(dp107501
S'description'
p107502
S'Classname of the split object\n'
p107503
sS'cpp_type'
p107504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107505
sS'default'
p107506
S'Split'
p107507
sS'name'
p107508
S'type'
p107509
sS'required'
p107510
I01
sS'group_name'
p107511
NsasS'name'
p107512
S'/Splits/*'
p107513
sa(dp107514
S'description'
p107515
g3
sS'subblocks'
p107516
NsS'parameters'
p107517
(lp107518
(dp107519
S'description'
p107520
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p107521
sS'cpp_type'
p107522
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p107523
sS'default'
p107524
g3
sS'name'
p107525
S'blocks'
p107526
sS'required'
p107527
I00
sS'group_name'
p107528
Nsa(dp107529
S'description'
p107530
S'List of indicators whether displaced mesh is used to define included contact\n'
p107531
sS'cpp_type'
p107532
S'std::vector<bool, std::allocator<bool> >'
p107533
sS'default'
p107534
g3
sS'name'
p107535
S'contact_displaced'
p107536
sS'required'
p107537
I00
sS'group_name'
p107538
Nsa(dp107539
S'description'
p107540
S'Master surface list for included contacts\n'
p107541
sS'cpp_type'
p107542
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107543
sS'default'
p107544
g3
sS'name'
p107545
S'contact_master'
p107546
sS'required'
p107547
I00
sS'group_name'
p107548
Nsa(dp107549
S'description'
p107550
S'Slave surface list for included contacts\n'
p107551
sS'cpp_type'
p107552
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107553
sS'default'
p107554
g3
sS'name'
p107555
S'contact_slave'
p107556
sS'required'
p107557
I00
sS'group_name'
p107558
Nsa(dp107559
S'description'
p107560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107561
sS'cpp_type'
p107562
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107563
sS'default'
p107564
g3
sS'name'
p107565
S'control_tags'
p107566
sS'required'
p107567
I00
sS'group_name'
p107568
Nsa(dp107569
S'name'
p107570
S'petsc_options'
p107571
sS'cpp_type'
p107572
S'MultiMooseEnum'
p107573
sS'default'
p107574
g3
sS'description'
p107575
S'PETSc flags for the FieldSplit solver\n'
p107576
sS'required'
p107577
I00
sS'options'
p107578
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p107579
sS'group_name'
p107580
Nsa(dp107581
S'name'
p107582
S'petsc_options_iname'
p107583
sS'cpp_type'
p107584
S'MultiMooseEnum'
p107585
sS'default'
p107586
g3
sS'description'
p107587
S'PETSc option names for the FieldSplit solver\n'
p107588
sS'required'
p107589
I00
sS'options'
p107590
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p107591
sS'group_name'
p107592
Nsa(dp107593
S'description'
p107594
S'PETSc option values for the FieldSplit solver\n'
p107595
sS'cpp_type'
p107596
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107597
sS'default'
p107598
g3
sS'name'
p107599
S'petsc_options_value'
p107600
sS'required'
p107601
I00
sS'group_name'
p107602
Nsa(dp107603
S'name'
p107604
S'schur_ainv'
p107605
sS'cpp_type'
p107606
S'MooseEnum'
p107607
sS'default'
p107608
S'diag'
p107609
sS'description'
p107610
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p107611
sS'required'
p107612
I00
sS'options'
p107613
S'diag lump'
p107614
sS'group_name'
p107615
Nsa(dp107616
S'name'
p107617
S'schur_pre'
p107618
sS'cpp_type'
p107619
S'MooseEnum'
p107620
sS'default'
p107621
S'S'
p107622
sS'description'
p107623
S'Type of Schur complement preconditioner matrix\n'
p107624
sS'required'
p107625
I00
sS'options'
p107626
S'S Sp A11'
p107627
sS'group_name'
p107628
Nsa(dp107629
S'name'
p107630
S'schur_type'
p107631
sS'cpp_type'
p107632
S'MooseEnum'
p107633
sS'default'
p107634
S'full'
p107635
sS'description'
p107636
S'Type of Schur complement\n'
p107637
sS'required'
p107638
I00
sS'options'
p107639
S'full upper lower'
p107640
sS'group_name'
p107641
Nsa(dp107642
S'description'
p107643
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p107644
sS'cpp_type'
p107645
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p107646
sS'default'
p107647
g3
sS'name'
p107648
S'sides'
p107649
sS'required'
p107650
I00
sS'group_name'
p107651
Nsa(dp107652
S'description'
p107653
S'The names of the splits (subsystems) in the decomposition of this split\n'
p107654
sS'cpp_type'
p107655
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107656
sS'default'
p107657
g3
sS'name'
p107658
S'splitting'
p107659
sS'required'
p107660
I00
sS'group_name'
p107661
Nsa(dp107662
S'name'
p107663
S'splitting_type'
p107664
sS'cpp_type'
p107665
S'MooseEnum'
p107666
sS'default'
p107667
S'additive'
p107668
sS'description'
p107669
S'Split decomposition type\n'
p107670
sS'required'
p107671
I00
sS'options'
p107672
S'additive multiplicative symmetric_multiplicative schur'
p107673
sS'group_name'
p107674
Nsa(dp107675
S'description'
p107676
g3
sS'cpp_type'
p107677
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107678
sS'default'
p107679
S'ContactSplit'
p107680
sS'name'
p107681
S'type'
p107682
sS'required'
p107683
I00
sS'group_name'
p107684
Nsa(dp107685
S'description'
p107686
S'List of indicators whether displaced mesh is used to define excluded contact\n'
p107687
sS'cpp_type'
p107688
S'std::vector<bool, std::allocator<bool> >'
p107689
sS'default'
p107690
g3
sS'name'
p107691
S'uncontact_displaced'
p107692
sS'required'
p107693
I00
sS'group_name'
p107694
Nsa(dp107695
S'description'
p107696
S'Master surface list for excluded contacts\n'
p107697
sS'cpp_type'
p107698
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107699
sS'default'
p107700
g3
sS'name'
p107701
S'uncontact_master'
p107702
sS'required'
p107703
I00
sS'group_name'
p107704
Nsa(dp107705
S'description'
p107706
S'Slave surface list for excluded contacts\n'
p107707
sS'cpp_type'
p107708
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107709
sS'default'
p107710
g3
sS'name'
p107711
S'uncontact_slave'
p107712
sS'required'
p107713
I00
sS'group_name'
p107714
Nsa(dp107715
S'description'
p107716
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p107717
sS'cpp_type'
p107718
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p107719
sS'default'
p107720
g3
sS'name'
p107721
S'unsides'
p107722
sS'required'
p107723
I00
sS'group_name'
p107724
Nsa(dp107725
S'description'
p107726
S'Variables Split operates on (omitting this implies "all variables"\n'
p107727
sS'cpp_type'
p107728
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p107729
sS'default'
p107730
g3
sS'name'
p107731
S'vars'
p107732
sS'required'
p107733
I00
sS'group_name'
p107734
NsasS'name'
p107735
S'/Splits/ContactSplit'
p107736
sa(dp107737
S'description'
p107738
g3
sS'subblocks'
p107739
NsS'parameters'
p107740
(lp107741
(dp107742
S'description'
p107743
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p107744
sS'cpp_type'
p107745
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p107746
sS'default'
p107747
g3
sS'name'
p107748
S'blocks'
p107749
sS'required'
p107750
I00
sS'group_name'
p107751
Nsa(dp107752
S'description'
p107753
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p107754
sS'cpp_type'
p107755
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107756
sS'default'
p107757
g3
sS'name'
p107758
S'control_tags'
p107759
sS'required'
p107760
I00
sS'group_name'
p107761
Nsa(dp107762
S'name'
p107763
S'petsc_options'
p107764
sS'cpp_type'
p107765
S'MultiMooseEnum'
p107766
sS'default'
p107767
g3
sS'description'
p107768
S'PETSc flags for the FieldSplit solver\n'
p107769
sS'required'
p107770
I00
sS'options'
p107771
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p107772
sS'group_name'
p107773
Nsa(dp107774
S'name'
p107775
S'petsc_options_iname'
p107776
sS'cpp_type'
p107777
S'MultiMooseEnum'
p107778
sS'default'
p107779
g3
sS'description'
p107780
S'PETSc option names for the FieldSplit solver\n'
p107781
sS'required'
p107782
I00
sS'options'
p107783
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p107784
sS'group_name'
p107785
Nsa(dp107786
S'description'
p107787
S'PETSc option values for the FieldSplit solver\n'
p107788
sS'cpp_type'
p107789
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107790
sS'default'
p107791
g3
sS'name'
p107792
S'petsc_options_value'
p107793
sS'required'
p107794
I00
sS'group_name'
p107795
Nsa(dp107796
S'name'
p107797
S'schur_ainv'
p107798
sS'cpp_type'
p107799
S'MooseEnum'
p107800
sS'default'
p107801
S'diag'
p107802
sS'description'
p107803
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p107804
sS'required'
p107805
I00
sS'options'
p107806
S'diag lump'
p107807
sS'group_name'
p107808
Nsa(dp107809
S'name'
p107810
S'schur_pre'
p107811
sS'cpp_type'
p107812
S'MooseEnum'
p107813
sS'default'
p107814
S'S'
p107815
sS'description'
p107816
S'Type of Schur complement preconditioner matrix\n'
p107817
sS'required'
p107818
I00
sS'options'
p107819
S'S Sp A11'
p107820
sS'group_name'
p107821
Nsa(dp107822
S'name'
p107823
S'schur_type'
p107824
sS'cpp_type'
p107825
S'MooseEnum'
p107826
sS'default'
p107827
S'full'
p107828
sS'description'
p107829
S'Type of Schur complement\n'
p107830
sS'required'
p107831
I00
sS'options'
p107832
S'full upper lower'
p107833
sS'group_name'
p107834
Nsa(dp107835
S'description'
p107836
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p107837
sS'cpp_type'
p107838
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p107839
sS'default'
p107840
g3
sS'name'
p107841
S'sides'
p107842
sS'required'
p107843
I00
sS'group_name'
p107844
Nsa(dp107845
S'description'
p107846
S'The names of the splits (subsystems) in the decomposition of this split\n'
p107847
sS'cpp_type'
p107848
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p107849
sS'default'
p107850
g3
sS'name'
p107851
S'splitting'
p107852
sS'required'
p107853
I00
sS'group_name'
p107854
Nsa(dp107855
S'name'
p107856
S'splitting_type'
p107857
sS'cpp_type'
p107858
S'MooseEnum'
p107859
sS'default'
p107860
S'additive'
p107861
sS'description'
p107862
S'Split decomposition type\n'
p107863
sS'required'
p107864
I00
sS'options'
p107865
S'additive multiplicative symmetric_multiplicative schur'
p107866
sS'group_name'
p107867
Nsa(dp107868
S'description'
p107869
g3
sS'cpp_type'
p107870
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107871
sS'default'
p107872
S'Split'
p107873
sS'name'
p107874
S'type'
p107875
sS'required'
p107876
I00
sS'group_name'
p107877
Nsa(dp107878
S'description'
p107879
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p107880
sS'cpp_type'
p107881
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p107882
sS'default'
p107883
g3
sS'name'
p107884
S'unsides'
p107885
sS'required'
p107886
I00
sS'group_name'
p107887
Nsa(dp107888
S'description'
p107889
S'Variables Split operates on (omitting this implies "all variables"\n'
p107890
sS'cpp_type'
p107891
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p107892
sS'default'
p107893
g3
sS'name'
p107894
S'vars'
p107895
sS'required'
p107896
I00
sS'group_name'
p107897
NsasS'name'
p107898
S'/Splits/Split'
p107899
sasS'parameters'
p107900
NsS'name'
p107901
S'/Splits'
p107902
sa(dp107903
S'description'
p107904
g3
sS'subblocks'
p107905
(lp107906
(dp107907
S'description'
p107908
g3
sS'subblocks'
p107909
NsS'parameters'
p107910
(lp107911
(dp107912
S'description'
p107913
S'The name of the MaterialProperty associated with conductivity ("thermal_conductivity" in the case of heat conduction)\n'
p107914
sS'cpp_type'
p107915
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107916
sS'default'
p107917
S'thermal_conductivity'
p107918
sS'name'
p107919
S'conductivity_master_name'
p107920
sS'required'
p107921
I00
sS'group_name'
p107922
Nsa(dp107923
S'description'
p107924
S'The name of the MaterialProperty associated with conductivity ("thermal_conductivity" in the case of heat conduction)\n'
p107925
sS'cpp_type'
p107926
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107927
sS'default'
p107928
S'thermal_conductivity'
p107929
sS'name'
p107930
S'conductivity_name'
p107931
sS'required'
p107932
I00
sS'group_name'
p107933
Nsa(dp107934
S'description'
p107935
S'A string representing the Moose object that will be used for computing the gap size\n'
p107936
sS'cpp_type'
p107937
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107938
sS'default'
p107939
S'GapValueAux'
p107940
sS'name'
p107941
S'gap_aux_type'
p107942
sS'required'
p107943
I00
sS'group_name'
p107944
Nsa(dp107945
S'description'
p107946
S'The master surface\n'
p107947
sS'cpp_type'
p107948
S'BoundaryName'
p107949
sS'default'
p107950
g3
sS'name'
p107951
S'master'
p107952
sS'required'
p107953
I01
sS'group_name'
p107954
Nsa(dp107955
S'description'
p107956
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p107957
sS'cpp_type'
p107958
S'double'
p107959
sS'default'
p107960
g3
sS'name'
p107961
S'normal_smoothing_distance'
p107962
sS'required'
p107963
I00
sS'group_name'
p107964
Nsa(dp107965
S'description'
p107966
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p107967
sS'cpp_type'
p107968
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p107969
sS'default'
p107970
g3
sS'name'
p107971
S'normal_smoothing_method'
p107972
sS'required'
p107973
I00
sS'group_name'
p107974
Nsa(dp107975
S'name'
p107976
S'order'
p107977
sS'cpp_type'
p107978
S'MooseEnum'
p107979
sS'default'
p107980
S'FIRST'
p107981
sS'description'
p107982
S'The finite element order\n'
p107983
sS'required'
p107984
I00
sS'options'
p107985
S'CONSTANT FIRST SECOND THIRD FOURTH'
p107986
sS'group_name'
p107987
Nsa(dp107988
S'description'
p107989
S'Whether or not to use quadrature point based gap heat transfer\n'
p107990
sS'cpp_type'
p107991
S'bool'
p107992
sS'default'
p107993
S'0'
p107994
sS'name'
p107995
S'quadrature'
p107996
sS'required'
p107997
I00
sS'group_name'
p107998
Nsa(dp107999
S'description'
p108000
S'The slave surface\n'
p108001
sS'cpp_type'
p108002
S'BoundaryName'
p108003
sS'default'
p108004
g3
sS'name'
p108005
S'slave'
p108006
sS'required'
p108007
I01
sS'group_name'
p108008
Nsa(dp108009
S'description'
p108010
S'Tangential distance to extend edges of contact surfaces\n'
p108011
sS'cpp_type'
p108012
S'double'
p108013
sS'default'
p108014
g3
sS'name'
p108015
S'tangential_tolerance'
p108016
sS'required'
p108017
I00
sS'group_name'
p108018
Nsa(dp108019
S'description'
p108020
S'A string representing the Moose object that will be used for heat conduction over the gap\n'
p108021
sS'cpp_type'
p108022
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108023
sS'default'
p108024
g3
sS'name'
p108025
S'type'
p108026
sS'required'
p108027
I01
sS'group_name'
p108028
Nsa(dp108029
S'description'
p108030
S'The variable for thermal contact\n'
p108031
sS'cpp_type'
p108032
S'NonlinearVariableName'
p108033
sS'default'
p108034
g3
sS'name'
p108035
S'variable'
p108036
sS'required'
p108037
I01
sS'group_name'
p108038
Nsa(dp108039
S'description'
p108040
S'Whether to output warning messages concerning nodes not being found\n'
p108041
sS'cpp_type'
p108042
S'bool'
p108043
sS'default'
p108044
S'0'
p108045
sS'name'
p108046
S'warnings'
p108047
sS'required'
p108048
I00
sS'group_name'
p108049
Nsa(dp108050
S'description'
p108051
S'Name appended to material properties to make them unique\n'
p108052
sS'cpp_type'
p108053
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108054
sS'default'
p108055
g3
sS'name'
p108056
S'appended_property_name'
p108057
sS'required'
p108058
I00
sS'group_name'
p108059
Nsa(dp108060
S'description'
p108061
S'The x displacement\n'
p108062
sS'cpp_type'
p108063
S'VariableName'
p108064
sS'default'
p108065
g3
sS'name'
p108066
S'disp_x'
p108067
sS'required'
p108068
I00
sS'group_name'
p108069
Nsa(dp108070
S'description'
p108071
S'The y displacement\n'
p108072
sS'cpp_type'
p108073
S'VariableName'
p108074
sS'default'
p108075
g3
sS'name'
p108076
S'disp_y'
p108077
sS'required'
p108078
I00
sS'group_name'
p108079
Nsa(dp108080
S'description'
p108081
S'The z displacement\n'
p108082
sS'cpp_type'
p108083
S'VariableName'
p108084
sS'default'
p108085
g3
sS'name'
p108086
S'disp_z'
p108087
sS'required'
p108088
I00
sS'group_name'
p108089
Nsa(dp108090
S'description'
p108091
S'The Auxiliary Variable to (optionally) save the boundary flux in\n'
p108092
sS'cpp_type'
p108093
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108094
sS'default'
p108095
g3
sS'name'
p108096
S'save_in'
p108097
sS'required'
p108098
I00
sS'group_name'
p108099
Nsa(dp108100
S'description'
p108101
S'The contact pressure variable\n'
p108102
sS'cpp_type'
p108103
S'VariableName'
p108104
sS'default'
p108105
g3
sS'name'
p108106
S'contact_pressure'
p108107
sS'required'
p108108
I00
sS'group_name'
p108109
Nsa(dp108110
S'description'
p108111
S'The thermal conductivity of the gap material\n'
p108112
sS'cpp_type'
p108113
S'double'
p108114
sS'default'
p108115
S'1'
p108116
sS'name'
p108117
S'gap_conductivity'
p108118
sS'required'
p108119
I00
sS'group_name'
p108120
Nsa(dp108121
S'description'
p108122
S'Thermal conductivity of the gap material as a function.  Multiplied by gap_conductivity.\n'
p108123
sS'cpp_type'
p108124
S'FunctionName'
p108125
sS'default'
p108126
g3
sS'name'
p108127
S'gap_conductivity_function'
p108128
sS'required'
p108129
I00
sS'group_name'
p108130
Nsa(dp108131
S'description'
p108132
S'Variable to be used in gap_conductivity_function in place of time\n'
p108133
sS'cpp_type'
p108134
S'VariableName'
p108135
sS'default'
p108136
g3
sS'name'
p108137
S'gap_conductivity_function_variable'
p108138
sS'required'
p108139
I00
sS'group_name'
p108140
NsasS'name'
p108141
S'/ThermalContact/*'
p108142
sasS'parameters'
p108143
NsS'name'
p108144
S'/ThermalContact'
p108145
sa(dp108146
S'description'
p108147
g3
sS'subblocks'
p108148
(lp108149
(dp108150
S'description'
p108151
g3
sS'subblocks'
p108152
NsS'parameters'
p108153
(lp108154
(dp108155
S'description'
p108156
S'A string representing the Moose Object that will be built by this Action\n'
p108157
sS'cpp_type'
p108158
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108159
sS'default'
p108160
g3
sS'name'
p108161
S'type'
p108162
sS'required'
p108163
I01
sS'group_name'
p108164
NsasS'name'
p108165
S'/Transfers/*'
p108166
sa(dp108167
S'description'
p108168
g3
sS'subblocks'
p108169
NsS'parameters'
p108170
(lp108171
(dp108172
S'description'
p108173
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108174
sS'cpp_type'
p108175
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108176
sS'default'
p108177
g3
sS'name'
p108178
S'control_tags'
p108179
sS'required'
p108180
I00
sS'group_name'
p108181
Nsa(dp108182
S'name'
p108183
S'direction'
p108184
sS'cpp_type'
p108185
S'MooseEnum'
p108186
sS'default'
p108187
g3
sS'description'
p108188
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108189
sS'required'
p108190
I01
sS'options'
p108191
S'to_multiapp from_multiapp'
p108192
sS'group_name'
p108193
Nsa(dp108194
S'description'
p108195
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108196
sS'cpp_type'
p108197
S'bool'
p108198
sS'default'
p108199
S'0'
p108200
sS'name'
p108201
S'displaced_source_mesh'
p108202
sS'required'
p108203
I00
sS'group_name'
p108204
Nsa(dp108205
S'description'
p108206
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108207
sS'cpp_type'
p108208
S'bool'
p108209
sS'default'
p108210
S'0'
p108211
sS'name'
p108212
S'displaced_target_mesh'
p108213
sS'required'
p108214
I00
sS'group_name'
p108215
Nsa(dp108216
S'name'
p108217
S'execute_on'
p108218
sS'cpp_type'
p108219
S'MultiMooseEnum'
p108220
sS'default'
p108221
S'SAME_AS_MULTIAPP'
p108222
sS'description'
p108223
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108224
sS'required'
p108225
I00
sS'options'
p108226
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p108227
sS'group_name'
p108228
Nsa(dp108229
S'description'
p108230
S'The name of the MultiApp to use.\n'
p108231
sS'cpp_type'
p108232
S'MultiAppName'
p108233
sS'default'
p108234
g3
sS'name'
p108235
S'multi_app'
p108236
sS'required'
p108237
I01
sS'group_name'
p108238
Nsa(dp108239
S'description'
p108240
S'The variable to transfer from.\n'
p108241
sS'cpp_type'
p108242
S'VariableName'
p108243
sS'default'
p108244
g3
sS'name'
p108245
S'source_variable'
p108246
sS'required'
p108247
I01
sS'group_name'
p108248
Nsa(dp108249
S'description'
p108250
g3
sS'cpp_type'
p108251
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108252
sS'default'
p108253
S'MultiAppCopyTransfer'
p108254
sS'name'
p108255
S'type'
p108256
sS'required'
p108257
I00
sS'group_name'
p108258
Nsa(dp108259
S'description'
p108260
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108261
sS'cpp_type'
p108262
S'bool'
p108263
sS'default'
p108264
S'0'
p108265
sS'name'
p108266
S'use_displaced_mesh'
p108267
sS'required'
p108268
I00
sS'group_name'
p108269
S'Advanced'
p108270
sa(dp108271
S'description'
p108272
S'The auxiliary variable to store the transferred values in.\n'
p108273
sS'cpp_type'
p108274
S'AuxVariableName'
p108275
sS'default'
p108276
g3
sS'name'
p108277
S'variable'
p108278
sS'required'
p108279
I01
sS'group_name'
p108280
NsasS'name'
p108281
S'/Transfers/MultiAppCopyTransfer'
p108282
sa(dp108283
S'description'
p108284
g3
sS'subblocks'
p108285
NsS'parameters'
p108286
(lp108287
(dp108288
S'description'
p108289
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108290
sS'cpp_type'
p108291
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108292
sS'default'
p108293
g3
sS'name'
p108294
S'control_tags'
p108295
sS'required'
p108296
I00
sS'group_name'
p108297
Nsa(dp108298
S'name'
p108299
S'direction'
p108300
sS'cpp_type'
p108301
S'MooseEnum'
p108302
sS'default'
p108303
g3
sS'description'
p108304
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108305
sS'required'
p108306
I01
sS'options'
p108307
S'to_multiapp from_multiapp'
p108308
sS'group_name'
p108309
Nsa(dp108310
S'description'
p108311
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108312
sS'cpp_type'
p108313
S'bool'
p108314
sS'default'
p108315
S'0'
p108316
sS'name'
p108317
S'displaced_source_mesh'
p108318
sS'required'
p108319
I00
sS'group_name'
p108320
Nsa(dp108321
S'description'
p108322
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108323
sS'cpp_type'
p108324
S'bool'
p108325
sS'default'
p108326
S'0'
p108327
sS'name'
p108328
S'displaced_target_mesh'
p108329
sS'required'
p108330
I00
sS'group_name'
p108331
Nsa(dp108332
S'name'
p108333
S'execute_on'
p108334
sS'cpp_type'
p108335
S'MultiMooseEnum'
p108336
sS'default'
p108337
S'SAME_AS_MULTIAPP'
p108338
sS'description'
p108339
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108340
sS'required'
p108341
I00
sS'options'
p108342
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p108343
sS'group_name'
p108344
Nsa(dp108345
S'name'
p108346
S'interp_type'
p108347
sS'cpp_type'
p108348
S'MooseEnum'
p108349
sS'default'
p108350
S'inverse_distance'
p108351
sS'description'
p108352
S'The algorithm to use for interpolation.\n'
p108353
sS'required'
p108354
I00
sS'options'
p108355
S'inverse_distance radial_basis'
p108356
sS'group_name'
p108357
Nsa(dp108358
S'description'
p108359
S'The name of the MultiApp to use.\n'
p108360
sS'cpp_type'
p108361
S'MultiAppName'
p108362
sS'default'
p108363
g3
sS'name'
p108364
S'multi_app'
p108365
sS'required'
p108366
I01
sS'group_name'
p108367
Nsa(dp108368
S'description'
p108369
S'The number of nearest points to use for interpolation.\n'
p108370
sS'cpp_type'
p108371
S'unsigned int'
p108372
sS'default'
p108373
S'3'
p108374
sS'name'
p108375
S'num_points'
p108376
sS'required'
p108377
I00
sS'group_name'
p108378
Nsa(dp108379
S'description'
p108380
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p108381
sS'cpp_type'
p108382
S'double'
p108383
sS'default'
p108384
S'2'
p108385
sS'name'
p108386
S'power'
p108387
sS'required'
p108388
I00
sS'group_name'
p108389
Nsa(dp108390
S'description'
p108391
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p108392
sS'cpp_type'
p108393
S'double'
p108394
sS'default'
p108395
S'-1'
p108396
sS'name'
p108397
S'radius'
p108398
sS'required'
p108399
I00
sS'group_name'
p108400
Nsa(dp108401
S'description'
p108402
S'The variable to transfer from.\n'
p108403
sS'cpp_type'
p108404
S'VariableName'
p108405
sS'default'
p108406
g3
sS'name'
p108407
S'source_variable'
p108408
sS'required'
p108409
I01
sS'group_name'
p108410
Nsa(dp108411
S'description'
p108412
g3
sS'cpp_type'
p108413
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108414
sS'default'
p108415
S'MultiAppInterpolationTransfer'
p108416
sS'name'
p108417
S'type'
p108418
sS'required'
p108419
I00
sS'group_name'
p108420
Nsa(dp108421
S'description'
p108422
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108423
sS'cpp_type'
p108424
S'bool'
p108425
sS'default'
p108426
S'0'
p108427
sS'name'
p108428
S'use_displaced_mesh'
p108429
sS'required'
p108430
I00
sS'group_name'
p108431
S'Advanced'
p108432
sa(dp108433
S'description'
p108434
S'The auxiliary variable to store the transferred values in.\n'
p108435
sS'cpp_type'
p108436
S'AuxVariableName'
p108437
sS'default'
p108438
g3
sS'name'
p108439
S'variable'
p108440
sS'required'
p108441
I01
sS'group_name'
p108442
NsasS'name'
p108443
S'/Transfers/MultiAppInterpolationTransfer'
p108444
sa(dp108445
S'description'
p108446
g3
sS'subblocks'
p108447
NsS'parameters'
p108448
(lp108449
(dp108450
S'description'
p108451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108452
sS'cpp_type'
p108453
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108454
sS'default'
p108455
g3
sS'name'
p108456
S'control_tags'
p108457
sS'required'
p108458
I00
sS'group_name'
p108459
Nsa(dp108460
S'name'
p108461
S'direction'
p108462
sS'cpp_type'
p108463
S'MooseEnum'
p108464
sS'default'
p108465
g3
sS'description'
p108466
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108467
sS'required'
p108468
I01
sS'options'
p108469
S'to_multiapp from_multiapp'
p108470
sS'group_name'
p108471
Nsa(dp108472
S'description'
p108473
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108474
sS'cpp_type'
p108475
S'bool'
p108476
sS'default'
p108477
S'0'
p108478
sS'name'
p108479
S'displaced_source_mesh'
p108480
sS'required'
p108481
I00
sS'group_name'
p108482
Nsa(dp108483
S'description'
p108484
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108485
sS'cpp_type'
p108486
S'bool'
p108487
sS'default'
p108488
S'0'
p108489
sS'name'
p108490
S'displaced_target_mesh'
p108491
sS'required'
p108492
I00
sS'group_name'
p108493
Nsa(dp108494
S'description'
p108495
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p108496
sS'cpp_type'
p108497
S'bool'
p108498
sS'default'
p108499
S'0'
p108500
sS'name'
p108501
S'error_on_miss'
p108502
sS'required'
p108503
I00
sS'group_name'
p108504
Nsa(dp108505
S'name'
p108506
S'execute_on'
p108507
sS'cpp_type'
p108508
S'MultiMooseEnum'
p108509
sS'default'
p108510
S'SAME_AS_MULTIAPP'
p108511
sS'description'
p108512
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108513
sS'required'
p108514
I00
sS'options'
p108515
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p108516
sS'group_name'
p108517
Nsa(dp108518
S'description'
p108519
S'The name of the MultiApp to use.\n'
p108520
sS'cpp_type'
p108521
S'MultiAppName'
p108522
sS'default'
p108523
g3
sS'name'
p108524
S'multi_app'
p108525
sS'required'
p108526
I01
sS'group_name'
p108527
Nsa(dp108528
S'description'
p108529
S'The variable to transfer from.\n'
p108530
sS'cpp_type'
p108531
S'VariableName'
p108532
sS'default'
p108533
g3
sS'name'
p108534
S'source_variable'
p108535
sS'required'
p108536
I01
sS'group_name'
p108537
Nsa(dp108538
S'description'
p108539
g3
sS'cpp_type'
p108540
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108541
sS'default'
p108542
S'MultiAppMeshFunctionTransfer'
p108543
sS'name'
p108544
S'type'
p108545
sS'required'
p108546
I00
sS'group_name'
p108547
Nsa(dp108548
S'description'
p108549
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108550
sS'cpp_type'
p108551
S'bool'
p108552
sS'default'
p108553
S'0'
p108554
sS'name'
p108555
S'use_displaced_mesh'
p108556
sS'required'
p108557
I00
sS'group_name'
p108558
S'Advanced'
p108559
sa(dp108560
S'description'
p108561
S'The auxiliary variable to store the transferred values in.\n'
p108562
sS'cpp_type'
p108563
S'AuxVariableName'
p108564
sS'default'
p108565
g3
sS'name'
p108566
S'variable'
p108567
sS'required'
p108568
I01
sS'group_name'
p108569
NsasS'name'
p108570
S'/Transfers/MultiAppMeshFunctionTransfer'
p108571
sa(dp108572
S'description'
p108573
g3
sS'subblocks'
p108574
NsS'parameters'
p108575
(lp108576
(dp108577
S'description'
p108578
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108579
sS'cpp_type'
p108580
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108581
sS'default'
p108582
g3
sS'name'
p108583
S'control_tags'
p108584
sS'required'
p108585
I00
sS'group_name'
p108586
Nsa(dp108587
S'name'
p108588
S'direction'
p108589
sS'cpp_type'
p108590
S'MooseEnum'
p108591
sS'default'
p108592
g3
sS'description'
p108593
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108594
sS'required'
p108595
I01
sS'options'
p108596
S'to_multiapp from_multiapp'
p108597
sS'group_name'
p108598
Nsa(dp108599
S'description'
p108600
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108601
sS'cpp_type'
p108602
S'bool'
p108603
sS'default'
p108604
S'0'
p108605
sS'name'
p108606
S'displaced_source_mesh'
p108607
sS'required'
p108608
I00
sS'group_name'
p108609
Nsa(dp108610
S'description'
p108611
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108612
sS'cpp_type'
p108613
S'bool'
p108614
sS'default'
p108615
S'0'
p108616
sS'name'
p108617
S'displaced_target_mesh'
p108618
sS'required'
p108619
I00
sS'group_name'
p108620
Nsa(dp108621
S'name'
p108622
S'execute_on'
p108623
sS'cpp_type'
p108624
S'MultiMooseEnum'
p108625
sS'default'
p108626
S'SAME_AS_MULTIAPP'
p108627
sS'description'
p108628
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108629
sS'required'
p108630
I00
sS'options'
p108631
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p108632
sS'group_name'
p108633
Nsa(dp108634
S'description'
p108635
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p108636
sS'cpp_type'
p108637
S'bool'
p108638
sS'default'
p108639
S'0'
p108640
sS'name'
p108641
S'fixed_meshes'
p108642
sS'required'
p108643
I00
sS'group_name'
p108644
Nsa(dp108645
S'description'
p108646
S'The name of the MultiApp to use.\n'
p108647
sS'cpp_type'
p108648
S'MultiAppName'
p108649
sS'default'
p108650
g3
sS'name'
p108651
S'multi_app'
p108652
sS'required'
p108653
I01
sS'group_name'
p108654
Nsa(dp108655
S'description'
p108656
S'The boundary we are transferring from (if not specified, whole domain is used).\n'
p108657
sS'cpp_type'
p108658
S'BoundaryName'
p108659
sS'default'
p108660
g3
sS'name'
p108661
S'source_boundary'
p108662
sS'required'
p108663
I00
sS'group_name'
p108664
Nsa(dp108665
S'description'
p108666
S'The variable to transfer from.\n'
p108667
sS'cpp_type'
p108668
S'VariableName'
p108669
sS'default'
p108670
g3
sS'name'
p108671
S'source_variable'
p108672
sS'required'
p108673
I01
sS'group_name'
p108674
Nsa(dp108675
S'description'
p108676
g3
sS'cpp_type'
p108677
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108678
sS'default'
p108679
S'MultiAppNearestNodeTransfer'
p108680
sS'name'
p108681
S'type'
p108682
sS'required'
p108683
I00
sS'group_name'
p108684
Nsa(dp108685
S'description'
p108686
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108687
sS'cpp_type'
p108688
S'bool'
p108689
sS'default'
p108690
S'0'
p108691
sS'name'
p108692
S'use_displaced_mesh'
p108693
sS'required'
p108694
I00
sS'group_name'
p108695
S'Advanced'
p108696
sa(dp108697
S'description'
p108698
S'The auxiliary variable to store the transferred values in.\n'
p108699
sS'cpp_type'
p108700
S'AuxVariableName'
p108701
sS'default'
p108702
g3
sS'name'
p108703
S'variable'
p108704
sS'required'
p108705
I01
sS'group_name'
p108706
NsasS'name'
p108707
S'/Transfers/MultiAppNearestNodeTransfer'
p108708
sa(dp108709
S'description'
p108710
g3
sS'subblocks'
p108711
NsS'parameters'
p108712
(lp108713
(dp108714
S'description'
p108715
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108716
sS'cpp_type'
p108717
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108718
sS'default'
p108719
g3
sS'name'
p108720
S'control_tags'
p108721
sS'required'
p108722
I00
sS'group_name'
p108723
Nsa(dp108724
S'name'
p108725
S'direction'
p108726
sS'cpp_type'
p108727
S'MooseEnum'
p108728
sS'default'
p108729
g3
sS'description'
p108730
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108731
sS'required'
p108732
I01
sS'options'
p108733
S'to_multiapp from_multiapp'
p108734
sS'group_name'
p108735
Nsa(dp108736
S'description'
p108737
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108738
sS'cpp_type'
p108739
S'bool'
p108740
sS'default'
p108741
S'0'
p108742
sS'name'
p108743
S'displaced_source_mesh'
p108744
sS'required'
p108745
I00
sS'group_name'
p108746
Nsa(dp108747
S'description'
p108748
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108749
sS'cpp_type'
p108750
S'bool'
p108751
sS'default'
p108752
S'0'
p108753
sS'name'
p108754
S'displaced_target_mesh'
p108755
sS'required'
p108756
I00
sS'group_name'
p108757
Nsa(dp108758
S'name'
p108759
S'execute_on'
p108760
sS'cpp_type'
p108761
S'MultiMooseEnum'
p108762
sS'default'
p108763
S'SAME_AS_MULTIAPP'
p108764
sS'description'
p108765
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108766
sS'required'
p108767
I00
sS'options'
p108768
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p108769
sS'group_name'
p108770
Nsa(dp108771
S'name'
p108772
S'interp_type'
p108773
sS'cpp_type'
p108774
S'MooseEnum'
p108775
sS'default'
p108776
S'inverse_distance'
p108777
sS'description'
p108778
S'The algorithm to use for interpolation.\n'
p108779
sS'required'
p108780
I00
sS'options'
p108781
S'inverse_distance radial_basis'
p108782
sS'group_name'
p108783
Nsa(dp108784
S'description'
p108785
S'The name of the MultiApp to use.\n'
p108786
sS'cpp_type'
p108787
S'MultiAppName'
p108788
sS'default'
p108789
g3
sS'name'
p108790
S'multi_app'
p108791
sS'required'
p108792
I01
sS'group_name'
p108793
Nsa(dp108794
S'description'
p108795
S'The number of nearest points to use for interpolation.\n'
p108796
sS'cpp_type'
p108797
S'unsigned int'
p108798
sS'default'
p108799
S'3'
p108800
sS'name'
p108801
S'num_points'
p108802
sS'required'
p108803
I00
sS'group_name'
p108804
Nsa(dp108805
S'description'
p108806
S'The Postprocessor to interpolate.\n'
p108807
sS'cpp_type'
p108808
S'PostprocessorName'
p108809
sS'default'
p108810
g3
sS'name'
p108811
S'postprocessor'
p108812
sS'required'
p108813
I01
sS'group_name'
p108814
Nsa(dp108815
S'description'
p108816
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p108817
sS'cpp_type'
p108818
S'double'
p108819
sS'default'
p108820
S'2'
p108821
sS'name'
p108822
S'power'
p108823
sS'required'
p108824
I00
sS'group_name'
p108825
Nsa(dp108826
S'description'
p108827
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p108828
sS'cpp_type'
p108829
S'double'
p108830
sS'default'
p108831
S'-1'
p108832
sS'name'
p108833
S'radius'
p108834
sS'required'
p108835
I00
sS'group_name'
p108836
Nsa(dp108837
S'description'
p108838
g3
sS'cpp_type'
p108839
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108840
sS'default'
p108841
S'MultiAppPostprocessorInterpolationTransfer'
p108842
sS'name'
p108843
S'type'
p108844
sS'required'
p108845
I00
sS'group_name'
p108846
Nsa(dp108847
S'description'
p108848
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108849
sS'cpp_type'
p108850
S'bool'
p108851
sS'default'
p108852
S'0'
p108853
sS'name'
p108854
S'use_displaced_mesh'
p108855
sS'required'
p108856
I00
sS'group_name'
p108857
S'Advanced'
p108858
sa(dp108859
S'description'
p108860
S'The auxiliary variable to store the transferred values in.\n'
p108861
sS'cpp_type'
p108862
S'AuxVariableName'
p108863
sS'default'
p108864
g3
sS'name'
p108865
S'variable'
p108866
sS'required'
p108867
I01
sS'group_name'
p108868
NsasS'name'
p108869
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p108870
sa(dp108871
S'description'
p108872
g3
sS'subblocks'
p108873
NsS'parameters'
p108874
(lp108875
(dp108876
S'description'
p108877
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108878
sS'cpp_type'
p108879
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108880
sS'default'
p108881
g3
sS'name'
p108882
S'control_tags'
p108883
sS'required'
p108884
I00
sS'group_name'
p108885
Nsa(dp108886
S'name'
p108887
S'direction'
p108888
sS'cpp_type'
p108889
S'MooseEnum'
p108890
sS'default'
p108891
g3
sS'description'
p108892
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p108893
sS'required'
p108894
I01
sS'options'
p108895
S'to_multiapp from_multiapp'
p108896
sS'group_name'
p108897
Nsa(dp108898
S'description'
p108899
S'Whether or not to use the displaced mesh for the source mesh.\n'
p108900
sS'cpp_type'
p108901
S'bool'
p108902
sS'default'
p108903
S'0'
p108904
sS'name'
p108905
S'displaced_source_mesh'
p108906
sS'required'
p108907
I00
sS'group_name'
p108908
Nsa(dp108909
S'description'
p108910
S'Whether or not to use the displaced mesh for the target mesh.\n'
p108911
sS'cpp_type'
p108912
S'bool'
p108913
sS'default'
p108914
S'0'
p108915
sS'name'
p108916
S'displaced_target_mesh'
p108917
sS'required'
p108918
I00
sS'group_name'
p108919
Nsa(dp108920
S'name'
p108921
S'execute_on'
p108922
sS'cpp_type'
p108923
S'MultiMooseEnum'
p108924
sS'default'
p108925
S'SAME_AS_MULTIAPP'
p108926
sS'description'
p108927
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p108928
sS'required'
p108929
I00
sS'options'
p108930
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p108931
sS'group_name'
p108932
Nsa(dp108933
S'description'
p108934
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p108935
sS'cpp_type'
p108936
S'PostprocessorName'
p108937
sS'default'
p108938
g3
sS'name'
p108939
S'from_postprocessor'
p108940
sS'required'
p108941
I01
sS'group_name'
p108942
Nsa(dp108943
S'description'
p108944
S'The name of the MultiApp to use.\n'
p108945
sS'cpp_type'
p108946
S'MultiAppName'
p108947
sS'default'
p108948
g3
sS'name'
p108949
S'multi_app'
p108950
sS'required'
p108951
I01
sS'group_name'
p108952
Nsa(dp108953
S'description'
p108954
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p108955
sS'cpp_type'
p108956
S'VariableName'
p108957
sS'default'
p108958
g3
sS'name'
p108959
S'to_aux_scalar'
p108960
sS'required'
p108961
I01
sS'group_name'
p108962
Nsa(dp108963
S'description'
p108964
g3
sS'cpp_type'
p108965
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p108966
sS'default'
p108967
S'MultiAppPostprocessorToAuxScalarTransfer'
p108968
sS'name'
p108969
S'type'
p108970
sS'required'
p108971
I00
sS'group_name'
p108972
Nsa(dp108973
S'description'
p108974
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p108975
sS'cpp_type'
p108976
S'bool'
p108977
sS'default'
p108978
S'0'
p108979
sS'name'
p108980
S'use_displaced_mesh'
p108981
sS'required'
p108982
I00
sS'group_name'
p108983
S'Advanced'
p108984
sasS'name'
p108985
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p108986
sa(dp108987
S'description'
p108988
g3
sS'subblocks'
p108989
NsS'parameters'
p108990
(lp108991
(dp108992
S'description'
p108993
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p108994
sS'cpp_type'
p108995
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p108996
sS'default'
p108997
g3
sS'name'
p108998
S'control_tags'
p108999
sS'required'
p109000
I00
sS'group_name'
p109001
Nsa(dp109002
S'name'
p109003
S'direction'
p109004
sS'cpp_type'
p109005
S'MooseEnum'
p109006
sS'default'
p109007
g3
sS'description'
p109008
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p109009
sS'required'
p109010
I01
sS'options'
p109011
S'to_multiapp from_multiapp'
p109012
sS'group_name'
p109013
Nsa(dp109014
S'description'
p109015
S'Whether or not to use the displaced mesh for the source mesh.\n'
p109016
sS'cpp_type'
p109017
S'bool'
p109018
sS'default'
p109019
S'0'
p109020
sS'name'
p109021
S'displaced_source_mesh'
p109022
sS'required'
p109023
I00
sS'group_name'
p109024
Nsa(dp109025
S'description'
p109026
S'Whether or not to use the displaced mesh for the target mesh.\n'
p109027
sS'cpp_type'
p109028
S'bool'
p109029
sS'default'
p109030
S'0'
p109031
sS'name'
p109032
S'displaced_target_mesh'
p109033
sS'required'
p109034
I00
sS'group_name'
p109035
Nsa(dp109036
S'name'
p109037
S'execute_on'
p109038
sS'cpp_type'
p109039
S'MultiMooseEnum'
p109040
sS'default'
p109041
S'SAME_AS_MULTIAPP'
p109042
sS'description'
p109043
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109044
sS'required'
p109045
I00
sS'options'
p109046
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p109047
sS'group_name'
p109048
Nsa(dp109049
S'description'
p109050
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p109051
sS'cpp_type'
p109052
S'PostprocessorName'
p109053
sS'default'
p109054
g3
sS'name'
p109055
S'from_postprocessor'
p109056
sS'required'
p109057
I01
sS'group_name'
p109058
Nsa(dp109059
S'description'
p109060
S'The name of the MultiApp to use.\n'
p109061
sS'cpp_type'
p109062
S'MultiAppName'
p109063
sS'default'
p109064
g3
sS'name'
p109065
S'multi_app'
p109066
sS'required'
p109067
I01
sS'group_name'
p109068
Nsa(dp109069
S'name'
p109070
S'reduction_type'
p109071
sS'cpp_type'
p109072
S'MooseEnum'
p109073
sS'default'
p109074
g3
sS'description'
p109075
S'The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n'
p109076
sS'required'
p109077
I00
sS'options'
p109078
S'average sum maximum minimum'
p109079
sS'group_name'
p109080
Nsa(dp109081
S'description'
p109082
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p109083
sS'cpp_type'
p109084
S'PostprocessorName'
p109085
sS'default'
p109086
g3
sS'name'
p109087
S'to_postprocessor'
p109088
sS'required'
p109089
I01
sS'group_name'
p109090
Nsa(dp109091
S'description'
p109092
g3
sS'cpp_type'
p109093
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109094
sS'default'
p109095
S'MultiAppPostprocessorTransfer'
p109096
sS'name'
p109097
S'type'
p109098
sS'required'
p109099
I00
sS'group_name'
p109100
Nsa(dp109101
S'description'
p109102
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109103
sS'cpp_type'
p109104
S'bool'
p109105
sS'default'
p109106
S'0'
p109107
sS'name'
p109108
S'use_displaced_mesh'
p109109
sS'required'
p109110
I00
sS'group_name'
p109111
S'Advanced'
p109112
sasS'name'
p109113
S'/Transfers/MultiAppPostprocessorTransfer'
p109114
sa(dp109115
S'description'
p109116
g3
sS'subblocks'
p109117
NsS'parameters'
p109118
(lp109119
(dp109120
S'description'
p109121
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109122
sS'cpp_type'
p109123
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109124
sS'default'
p109125
g3
sS'name'
p109126
S'control_tags'
p109127
sS'required'
p109128
I00
sS'group_name'
p109129
Nsa(dp109130
S'name'
p109131
S'direction'
p109132
sS'cpp_type'
p109133
S'MooseEnum'
p109134
sS'default'
p109135
g3
sS'description'
p109136
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p109137
sS'required'
p109138
I01
sS'options'
p109139
S'to_multiapp from_multiapp'
p109140
sS'group_name'
p109141
Nsa(dp109142
S'description'
p109143
S'Whether or not to use the displaced mesh for the source mesh.\n'
p109144
sS'cpp_type'
p109145
S'bool'
p109146
sS'default'
p109147
S'0'
p109148
sS'name'
p109149
S'displaced_source_mesh'
p109150
sS'required'
p109151
I00
sS'group_name'
p109152
Nsa(dp109153
S'description'
p109154
S'Whether or not to use the displaced mesh for the target mesh.\n'
p109155
sS'cpp_type'
p109156
S'bool'
p109157
sS'default'
p109158
S'0'
p109159
sS'name'
p109160
S'displaced_target_mesh'
p109161
sS'required'
p109162
I00
sS'group_name'
p109163
Nsa(dp109164
S'name'
p109165
S'execute_on'
p109166
sS'cpp_type'
p109167
S'MultiMooseEnum'
p109168
sS'default'
p109169
S'SAME_AS_MULTIAPP'
p109170
sS'description'
p109171
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109172
sS'required'
p109173
I00
sS'options'
p109174
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p109175
sS'group_name'
p109176
Nsa(dp109177
S'description'
p109178
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n'
p109179
sS'cpp_type'
p109180
S'bool'
p109181
sS'default'
p109182
S'0'
p109183
sS'name'
p109184
S'fixed_meshes'
p109185
sS'required'
p109186
I00
sS'group_name'
p109187
Nsa(dp109188
S'description'
p109189
S'The name of the MultiApp to use.\n'
p109190
sS'cpp_type'
p109191
S'MultiAppName'
p109192
sS'default'
p109193
g3
sS'name'
p109194
S'multi_app'
p109195
sS'required'
p109196
I01
sS'group_name'
p109197
Nsa(dp109198
S'name'
p109199
S'proj_type'
p109200
sS'cpp_type'
p109201
S'MooseEnum'
p109202
sS'default'
p109203
S'l2'
p109204
sS'description'
p109205
S'The type of the projection.\n'
p109206
sS'required'
p109207
I00
sS'options'
p109208
S'l2'
p109209
sS'group_name'
p109210
Nsa(dp109211
S'description'
p109212
S'The variable to transfer from.\n'
p109213
sS'cpp_type'
p109214
S'VariableName'
p109215
sS'default'
p109216
g3
sS'name'
p109217
S'source_variable'
p109218
sS'required'
p109219
I01
sS'group_name'
p109220
Nsa(dp109221
S'description'
p109222
g3
sS'cpp_type'
p109223
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109224
sS'default'
p109225
S'MultiAppProjectionTransfer'
p109226
sS'name'
p109227
S'type'
p109228
sS'required'
p109229
I00
sS'group_name'
p109230
Nsa(dp109231
S'description'
p109232
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109233
sS'cpp_type'
p109234
S'bool'
p109235
sS'default'
p109236
S'0'
p109237
sS'name'
p109238
S'use_displaced_mesh'
p109239
sS'required'
p109240
I00
sS'group_name'
p109241
S'Advanced'
p109242
sa(dp109243
S'description'
p109244
S'The auxiliary variable to store the transferred values in.\n'
p109245
sS'cpp_type'
p109246
S'AuxVariableName'
p109247
sS'default'
p109248
g3
sS'name'
p109249
S'variable'
p109250
sS'required'
p109251
I01
sS'group_name'
p109252
NsasS'name'
p109253
S'/Transfers/MultiAppProjectionTransfer'
p109254
sa(dp109255
S'description'
p109256
g3
sS'subblocks'
p109257
NsS'parameters'
p109258
(lp109259
(dp109260
S'description'
p109261
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109262
sS'cpp_type'
p109263
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109264
sS'default'
p109265
g3
sS'name'
p109266
S'control_tags'
p109267
sS'required'
p109268
I00
sS'group_name'
p109269
Nsa(dp109270
S'name'
p109271
S'direction'
p109272
sS'cpp_type'
p109273
S'MooseEnum'
p109274
sS'default'
p109275
g3
sS'description'
p109276
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p109277
sS'required'
p109278
I01
sS'options'
p109279
S'to_multiapp from_multiapp'
p109280
sS'group_name'
p109281
Nsa(dp109282
S'description'
p109283
S'Whether or not to use the displaced mesh for the source mesh.\n'
p109284
sS'cpp_type'
p109285
S'bool'
p109286
sS'default'
p109287
S'0'
p109288
sS'name'
p109289
S'displaced_source_mesh'
p109290
sS'required'
p109291
I00
sS'group_name'
p109292
Nsa(dp109293
S'description'
p109294
S'Whether or not to use the displaced mesh for the target mesh.\n'
p109295
sS'cpp_type'
p109296
S'bool'
p109297
sS'default'
p109298
S'0'
p109299
sS'name'
p109300
S'displaced_target_mesh'
p109301
sS'required'
p109302
I00
sS'group_name'
p109303
Nsa(dp109304
S'name'
p109305
S'execute_on'
p109306
sS'cpp_type'
p109307
S'MultiMooseEnum'
p109308
sS'default'
p109309
S'SAME_AS_MULTIAPP'
p109310
sS'description'
p109311
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109312
sS'required'
p109313
I00
sS'options'
p109314
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p109315
sS'group_name'
p109316
Nsa(dp109317
S'description'
p109318
S'The name of the MultiApp to use.\n'
p109319
sS'cpp_type'
p109320
S'MultiAppName'
p109321
sS'default'
p109322
g3
sS'name'
p109323
S'multi_app'
p109324
sS'required'
p109325
I01
sS'group_name'
p109326
Nsa(dp109327
S'description'
p109328
g3
sS'cpp_type'
p109329
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109330
sS'default'
p109331
S'MultiAppUserObjectTransfer'
p109332
sS'name'
p109333
S'type'
p109334
sS'required'
p109335
I00
sS'group_name'
p109336
Nsa(dp109337
S'description'
p109338
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109339
sS'cpp_type'
p109340
S'bool'
p109341
sS'default'
p109342
S'0'
p109343
sS'name'
p109344
S'use_displaced_mesh'
p109345
sS'required'
p109346
I00
sS'group_name'
p109347
S'Advanced'
p109348
sa(dp109349
S'description'
p109350
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p109351
sS'cpp_type'
p109352
S'UserObjectName'
p109353
sS'default'
p109354
g3
sS'name'
p109355
S'user_object'
p109356
sS'required'
p109357
I01
sS'group_name'
p109358
Nsa(dp109359
S'description'
p109360
S'The auxiliary variable to store the transferred values in.\n'
p109361
sS'cpp_type'
p109362
S'AuxVariableName'
p109363
sS'default'
p109364
g3
sS'name'
p109365
S'variable'
p109366
sS'required'
p109367
I01
sS'group_name'
p109368
NsasS'name'
p109369
S'/Transfers/MultiAppUserObjectTransfer'
p109370
sa(dp109371
S'description'
p109372
g3
sS'subblocks'
p109373
NsS'parameters'
p109374
(lp109375
(dp109376
S'description'
p109377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109378
sS'cpp_type'
p109379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109380
sS'default'
p109381
g3
sS'name'
p109382
S'control_tags'
p109383
sS'required'
p109384
I00
sS'group_name'
p109385
Nsa(dp109386
S'name'
p109387
S'direction'
p109388
sS'cpp_type'
p109389
S'MooseEnum'
p109390
sS'default'
p109391
g3
sS'description'
p109392
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p109393
sS'required'
p109394
I01
sS'options'
p109395
S'to_multiapp from_multiapp'
p109396
sS'group_name'
p109397
Nsa(dp109398
S'description'
p109399
S'Whether or not to use the displaced mesh for the source mesh.\n'
p109400
sS'cpp_type'
p109401
S'bool'
p109402
sS'default'
p109403
S'0'
p109404
sS'name'
p109405
S'displaced_source_mesh'
p109406
sS'required'
p109407
I00
sS'group_name'
p109408
Nsa(dp109409
S'description'
p109410
S'Whether or not to use the displaced mesh for the target mesh.\n'
p109411
sS'cpp_type'
p109412
S'bool'
p109413
sS'default'
p109414
S'0'
p109415
sS'name'
p109416
S'displaced_target_mesh'
p109417
sS'required'
p109418
I00
sS'group_name'
p109419
Nsa(dp109420
S'name'
p109421
S'execute_on'
p109422
sS'cpp_type'
p109423
S'MultiMooseEnum'
p109424
sS'default'
p109425
S'SAME_AS_MULTIAPP'
p109426
sS'description'
p109427
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109428
sS'required'
p109429
I00
sS'options'
p109430
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p109431
sS'group_name'
p109432
Nsa(dp109433
S'description'
p109434
S'The name of the MultiApp to use.\n'
p109435
sS'cpp_type'
p109436
S'MultiAppName'
p109437
sS'default'
p109438
g3
sS'name'
p109439
S'multi_app'
p109440
sS'required'
p109441
I01
sS'group_name'
p109442
Nsa(dp109443
S'description'
p109444
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p109445
sS'cpp_type'
p109446
S'PostprocessorName'
p109447
sS'default'
p109448
g3
sS'name'
p109449
S'postprocessor'
p109450
sS'required'
p109451
I01
sS'group_name'
p109452
Nsa(dp109453
S'description'
p109454
S'The variable to transfer from.\n'
p109455
sS'cpp_type'
p109456
S'VariableName'
p109457
sS'default'
p109458
g3
sS'name'
p109459
S'source_variable'
p109460
sS'required'
p109461
I01
sS'group_name'
p109462
Nsa(dp109463
S'description'
p109464
g3
sS'cpp_type'
p109465
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109466
sS'default'
p109467
S'MultiAppVariableValueSamplePostprocessorTransfer'
p109468
sS'name'
p109469
S'type'
p109470
sS'required'
p109471
I00
sS'group_name'
p109472
Nsa(dp109473
S'description'
p109474
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109475
sS'cpp_type'
p109476
S'bool'
p109477
sS'default'
p109478
S'0'
p109479
sS'name'
p109480
S'use_displaced_mesh'
p109481
sS'required'
p109482
I00
sS'group_name'
p109483
S'Advanced'
p109484
sasS'name'
p109485
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p109486
sa(dp109487
S'description'
p109488
g3
sS'subblocks'
p109489
NsS'parameters'
p109490
(lp109491
(dp109492
S'description'
p109493
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109494
sS'cpp_type'
p109495
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109496
sS'default'
p109497
g3
sS'name'
p109498
S'control_tags'
p109499
sS'required'
p109500
I00
sS'group_name'
p109501
Nsa(dp109502
S'name'
p109503
S'direction'
p109504
sS'cpp_type'
p109505
S'MooseEnum'
p109506
sS'default'
p109507
g3
sS'description'
p109508
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p109509
sS'required'
p109510
I01
sS'options'
p109511
S'to_multiapp from_multiapp'
p109512
sS'group_name'
p109513
Nsa(dp109514
S'description'
p109515
S'Whether or not to use the displaced mesh for the source mesh.\n'
p109516
sS'cpp_type'
p109517
S'bool'
p109518
sS'default'
p109519
S'0'
p109520
sS'name'
p109521
S'displaced_source_mesh'
p109522
sS'required'
p109523
I00
sS'group_name'
p109524
Nsa(dp109525
S'description'
p109526
S'Whether or not to use the displaced mesh for the target mesh.\n'
p109527
sS'cpp_type'
p109528
S'bool'
p109529
sS'default'
p109530
S'0'
p109531
sS'name'
p109532
S'displaced_target_mesh'
p109533
sS'required'
p109534
I00
sS'group_name'
p109535
Nsa(dp109536
S'name'
p109537
S'execute_on'
p109538
sS'cpp_type'
p109539
S'MultiMooseEnum'
p109540
sS'default'
p109541
S'SAME_AS_MULTIAPP'
p109542
sS'description'
p109543
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109544
sS'required'
p109545
I00
sS'options'
p109546
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p109547
sS'group_name'
p109548
Nsa(dp109549
S'description'
p109550
S'The name of the MultiApp to use.\n'
p109551
sS'cpp_type'
p109552
S'MultiAppName'
p109553
sS'default'
p109554
g3
sS'name'
p109555
S'multi_app'
p109556
sS'required'
p109557
I01
sS'group_name'
p109558
Nsa(dp109559
S'description'
p109560
S'The variable to transfer from.\n'
p109561
sS'cpp_type'
p109562
S'VariableName'
p109563
sS'default'
p109564
g3
sS'name'
p109565
S'source_variable'
p109566
sS'required'
p109567
I01
sS'group_name'
p109568
Nsa(dp109569
S'description'
p109570
g3
sS'cpp_type'
p109571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109572
sS'default'
p109573
S'MultiAppVariableValueSampleTransfer'
p109574
sS'name'
p109575
S'type'
p109576
sS'required'
p109577
I00
sS'group_name'
p109578
Nsa(dp109579
S'description'
p109580
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109581
sS'cpp_type'
p109582
S'bool'
p109583
sS'default'
p109584
S'0'
p109585
sS'name'
p109586
S'use_displaced_mesh'
p109587
sS'required'
p109588
I00
sS'group_name'
p109589
S'Advanced'
p109590
sa(dp109591
S'description'
p109592
S'The auxiliary variable to store the transferred values in.\n'
p109593
sS'cpp_type'
p109594
S'AuxVariableName'
p109595
sS'default'
p109596
g3
sS'name'
p109597
S'variable'
p109598
sS'required'
p109599
I01
sS'group_name'
p109600
NsasS'name'
p109601
S'/Transfers/MultiAppVariableValueSampleTransfer'
p109602
sasS'parameters'
p109603
NsS'name'
p109604
S'/Transfers'
p109605
sa(dp109606
S'description'
p109607
g3
sS'subblocks'
p109608
(lp109609
(dp109610
S'description'
p109611
g3
sS'subblocks'
p109612
NsS'parameters'
p109613
(lp109614
(dp109615
S'description'
p109616
S'A string representing the Moose Object that will be built by this Action\n'
p109617
sS'cpp_type'
p109618
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109619
sS'default'
p109620
g3
sS'name'
p109621
S'type'
p109622
sS'required'
p109623
I01
sS'group_name'
p109624
NsasS'name'
p109625
S'/UserObjects/*'
p109626
sa(dp109627
S'description'
p109628
g3
sS'subblocks'
p109629
NsS'parameters'
p109630
(lp109631
(dp109632
S'description'
p109633
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p109634
sS'cpp_type'
p109635
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p109636
sS'default'
p109637
g3
sS'name'
p109638
S'boundary'
p109639
sS'required'
p109640
I00
sS'group_name'
p109641
Nsa(dp109642
S'description'
p109643
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109644
sS'cpp_type'
p109645
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109646
sS'default'
p109647
g3
sS'name'
p109648
S'control_tags'
p109649
sS'required'
p109650
I00
sS'group_name'
p109651
Nsa(dp109652
S'name'
p109653
S'execute_on'
p109654
sS'cpp_type'
p109655
S'MultiMooseEnum'
p109656
sS'default'
p109657
S'TIMESTEP_END'
p109658
sS'description'
p109659
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109660
sS'required'
p109661
I00
sS'options'
p109662
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p109663
sS'group_name'
p109664
Nsa(dp109665
S'description'
p109666
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109667
sS'cpp_type'
p109668
S'std::vector<OutputName, std::allocator<OutputName> >'
p109669
sS'default'
p109670
g3
sS'name'
p109671
S'outputs'
p109672
sS'required'
p109673
I00
sS'group_name'
p109674
S'Advanced'
p109675
sa(dp109676
S'description'
p109677
g3
sS'cpp_type'
p109678
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109679
sS'default'
p109680
S'AreaPostprocessor'
p109681
sS'name'
p109682
S'type'
p109683
sS'required'
p109684
I00
sS'group_name'
p109685
Nsa(dp109686
S'description'
p109687
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109688
sS'cpp_type'
p109689
S'bool'
p109690
sS'default'
p109691
S'0'
p109692
sS'name'
p109693
S'use_displaced_mesh'
p109694
sS'required'
p109695
I00
sS'group_name'
p109696
S'Advanced'
p109697
sasS'name'
p109698
S'/UserObjects/AreaPostprocessor'
p109699
sa(dp109700
S'description'
p109701
g3
sS'subblocks'
p109702
NsS'parameters'
p109703
(lp109704
(dp109705
S'description'
p109706
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109707
sS'cpp_type'
p109708
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109709
sS'default'
p109710
g3
sS'name'
p109711
S'block'
p109712
sS'required'
p109713
I00
sS'group_name'
p109714
Nsa(dp109715
S'description'
p109716
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109717
sS'cpp_type'
p109718
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109719
sS'default'
p109720
g3
sS'name'
p109721
S'control_tags'
p109722
sS'required'
p109723
I00
sS'group_name'
p109724
Nsa(dp109725
S'name'
p109726
S'execute_on'
p109727
sS'cpp_type'
p109728
S'MultiMooseEnum'
p109729
sS'default'
p109730
S'TIMESTEP_END'
p109731
sS'description'
p109732
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109733
sS'required'
p109734
I00
sS'options'
p109735
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p109736
sS'group_name'
p109737
Nsa(dp109738
S'description'
p109739
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109740
sS'cpp_type'
p109741
S'std::vector<OutputName, std::allocator<OutputName> >'
p109742
sS'default'
p109743
g3
sS'name'
p109744
S'outputs'
p109745
sS'required'
p109746
I00
sS'group_name'
p109747
S'Advanced'
p109748
sa(dp109749
S'description'
p109750
S'The seed for the master random number generator\n'
p109751
sS'cpp_type'
p109752
S'unsigned int'
p109753
sS'default'
p109754
S'0'
p109755
sS'name'
p109756
S'seed'
p109757
sS'required'
p109758
I00
sS'group_name'
p109759
S'Advanced'
p109760
sa(dp109761
S'description'
p109762
g3
sS'cpp_type'
p109763
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109764
sS'default'
p109765
S'AverageElementSize'
p109766
sS'name'
p109767
S'type'
p109768
sS'required'
p109769
I00
sS'group_name'
p109770
Nsa(dp109771
S'description'
p109772
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109773
sS'cpp_type'
p109774
S'bool'
p109775
sS'default'
p109776
S'0'
p109777
sS'name'
p109778
S'use_displaced_mesh'
p109779
sS'required'
p109780
I00
sS'group_name'
p109781
S'Advanced'
p109782
sa(dp109783
S'description'
p109784
S'The name of the variable that this object operates on\n'
p109785
sS'cpp_type'
p109786
S'std::vector<VariableName>'
p109787
sS'default'
p109788
g3
sS'name'
p109789
S'variable'
p109790
sS'required'
p109791
I00
sS'group_name'
p109792
NsasS'name'
p109793
S'/UserObjects/AverageElementSize'
p109794
sa(dp109795
S'description'
p109796
g3
sS'subblocks'
p109797
NsS'parameters'
p109798
(lp109799
(dp109800
S'description'
p109801
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109802
sS'cpp_type'
p109803
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109804
sS'default'
p109805
g3
sS'name'
p109806
S'block'
p109807
sS'required'
p109808
I00
sS'group_name'
p109809
Nsa(dp109810
S'description'
p109811
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p109812
sS'cpp_type'
p109813
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p109814
sS'default'
p109815
g3
sS'name'
p109816
S'boundary'
p109817
sS'required'
p109818
I00
sS'group_name'
p109819
Nsa(dp109820
S'description'
p109821
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109822
sS'cpp_type'
p109823
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109824
sS'default'
p109825
g3
sS'name'
p109826
S'control_tags'
p109827
sS'required'
p109828
I00
sS'group_name'
p109829
Nsa(dp109830
S'name'
p109831
S'execute_on'
p109832
sS'cpp_type'
p109833
S'MultiMooseEnum'
p109834
sS'default'
p109835
S'TIMESTEP_END'
p109836
sS'description'
p109837
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109838
sS'required'
p109839
I00
sS'options'
p109840
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p109841
sS'group_name'
p109842
Nsa(dp109843
S'description'
p109844
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109845
sS'cpp_type'
p109846
S'std::vector<OutputName, std::allocator<OutputName> >'
p109847
sS'default'
p109848
g3
sS'name'
p109849
S'outputs'
p109850
sS'required'
p109851
I00
sS'group_name'
p109852
S'Advanced'
p109853
sa(dp109854
S'description'
p109855
S'The seed for the master random number generator\n'
p109856
sS'cpp_type'
p109857
S'unsigned int'
p109858
sS'default'
p109859
S'0'
p109860
sS'name'
p109861
S'seed'
p109862
sS'required'
p109863
I00
sS'group_name'
p109864
S'Advanced'
p109865
sa(dp109866
S'description'
p109867
g3
sS'cpp_type'
p109868
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109869
sS'default'
p109870
S'AverageNodalVariableValue'
p109871
sS'name'
p109872
S'type'
p109873
sS'required'
p109874
I00
sS'group_name'
p109875
Nsa(dp109876
S'description'
p109877
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p109878
sS'cpp_type'
p109879
S'bool'
p109880
sS'default'
p109881
S'0'
p109882
sS'name'
p109883
S'use_displaced_mesh'
p109884
sS'required'
p109885
I00
sS'group_name'
p109886
S'Advanced'
p109887
sa(dp109888
S'description'
p109889
S'The name of the variable that this postprocessor operates on\n'
p109890
sS'cpp_type'
p109891
S'std::vector<VariableName>'
p109892
sS'default'
p109893
g3
sS'name'
p109894
S'variable'
p109895
sS'required'
p109896
I00
sS'group_name'
p109897
NsasS'name'
p109898
S'/UserObjects/AverageNodalVariableValue'
p109899
sa(dp109900
S'description'
p109901
g3
sS'subblocks'
p109902
NsS'parameters'
p109903
(lp109904
(dp109905
S'description'
p109906
S'Variable value used to determine interface position\n'
p109907
sS'cpp_type'
p109908
S'double'
p109909
sS'default'
p109910
S'0.5'
p109911
sS'name'
p109912
S'RefVal'
p109913
sS'required'
p109914
I00
sS'group_name'
p109915
Nsa(dp109916
S'description'
p109917
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109918
sS'cpp_type'
p109919
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p109920
sS'default'
p109921
g3
sS'name'
p109922
S'block'
p109923
sS'required'
p109924
I00
sS'group_name'
p109925
Nsa(dp109926
S'description'
p109927
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p109928
sS'cpp_type'
p109929
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p109930
sS'default'
p109931
g3
sS'name'
p109932
S'boundary'
p109933
sS'required'
p109934
I00
sS'group_name'
p109935
Nsa(dp109936
S'description'
p109937
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p109938
sS'cpp_type'
p109939
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p109940
sS'default'
p109941
g3
sS'name'
p109942
S'control_tags'
p109943
sS'required'
p109944
I00
sS'group_name'
p109945
Nsa(dp109946
S'description'
p109947
S'The index of the direction the position is measured in\n'
p109948
sS'cpp_type'
p109949
S'unsigned int'
p109950
sS'default'
p109951
g3
sS'name'
p109952
S'direction_index'
p109953
sS'required'
p109954
I01
sS'group_name'
p109955
Nsa(dp109956
S'name'
p109957
S'execute_on'
p109958
sS'cpp_type'
p109959
S'MultiMooseEnum'
p109960
sS'default'
p109961
S'TIMESTEP_END'
p109962
sS'description'
p109963
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p109964
sS'required'
p109965
I00
sS'options'
p109966
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p109967
sS'group_name'
p109968
Nsa(dp109969
S'description'
p109970
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p109971
sS'cpp_type'
p109972
S'std::vector<OutputName, std::allocator<OutputName> >'
p109973
sS'default'
p109974
g3
sS'name'
p109975
S'outputs'
p109976
sS'required'
p109977
I00
sS'group_name'
p109978
S'Advanced'
p109979
sa(dp109980
S'description'
p109981
S'The seed for the master random number generator\n'
p109982
sS'cpp_type'
p109983
S'unsigned int'
p109984
sS'default'
p109985
S'0'
p109986
sS'name'
p109987
S'seed'
p109988
sS'required'
p109989
I00
sS'group_name'
p109990
S'Advanced'
p109991
sa(dp109992
S'description'
p109993
g3
sS'cpp_type'
p109994
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p109995
sS'default'
p109996
S'CInterfacePosition'
p109997
sS'name'
p109998
S'type'
p109999
sS'required'
p110000
I00
sS'group_name'
p110001
Nsa(dp110002
S'description'
p110003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110004
sS'cpp_type'
p110005
S'bool'
p110006
sS'default'
p110007
S'0'
p110008
sS'name'
p110009
S'use_displaced_mesh'
p110010
sS'required'
p110011
I00
sS'group_name'
p110012
S'Advanced'
p110013
sa(dp110014
S'description'
p110015
S'The name of the variable that this postprocessor operates on\n'
p110016
sS'cpp_type'
p110017
S'std::vector<VariableName>'
p110018
sS'default'
p110019
g3
sS'name'
p110020
S'variable'
p110021
sS'required'
p110022
I00
sS'group_name'
p110023
NsasS'name'
p110024
S'/UserObjects/CInterfacePosition'
p110025
sa(dp110026
S'description'
p110027
g3
sS'subblocks'
p110028
NsS'parameters'
p110029
(lp110030
(dp110031
S'description'
p110032
S'The CavityPressureUserObject that computes the initial moles.\n'
p110033
sS'cpp_type'
p110034
S'UserObjectName'
p110035
sS'default'
p110036
g3
sS'name'
p110037
S'cavity_pressure_uo'
p110038
sS'required'
p110039
I01
sS'group_name'
p110040
Nsa(dp110041
S'description'
p110042
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110043
sS'cpp_type'
p110044
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110045
sS'default'
p110046
g3
sS'name'
p110047
S'control_tags'
p110048
sS'required'
p110049
I00
sS'group_name'
p110050
Nsa(dp110051
S'name'
p110052
S'execute_on'
p110053
sS'cpp_type'
p110054
S'MultiMooseEnum'
p110055
sS'default'
p110056
S'TIMESTEP_END'
p110057
sS'description'
p110058
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110059
sS'required'
p110060
I00
sS'options'
p110061
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110062
sS'group_name'
p110063
Nsa(dp110064
S'description'
p110065
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p110066
sS'cpp_type'
p110067
S'std::vector<OutputName, std::allocator<OutputName> >'
p110068
sS'default'
p110069
g3
sS'name'
p110070
S'outputs'
p110071
sS'required'
p110072
I00
sS'group_name'
p110073
S'Advanced'
p110074
sa(dp110075
S'description'
p110076
S'The quantity to report.\n'
p110077
sS'cpp_type'
p110078
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110079
sS'default'
p110080
g3
sS'name'
p110081
S'quantity'
p110082
sS'required'
p110083
I01
sS'group_name'
p110084
Nsa(dp110085
S'description'
p110086
g3
sS'cpp_type'
p110087
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110088
sS'default'
p110089
S'CavityPressurePostprocessor'
p110090
sS'name'
p110091
S'type'
p110092
sS'required'
p110093
I00
sS'group_name'
p110094
Nsa(dp110095
S'description'
p110096
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110097
sS'cpp_type'
p110098
S'bool'
p110099
sS'default'
p110100
S'1'
p110101
sS'name'
p110102
S'use_displaced_mesh'
p110103
sS'required'
p110104
I00
sS'group_name'
p110105
S'Advanced'
p110106
sasS'name'
p110107
S'/UserObjects/CavityPressurePostprocessor'
p110108
sa(dp110109
S'description'
p110110
g3
sS'subblocks'
p110111
NsS'parameters'
p110112
(lp110113
(dp110114
S'description'
p110115
S'The universal gas constant for the units used.\n'
p110116
sS'cpp_type'
p110117
S'double'
p110118
sS'default'
p110119
g3
sS'name'
p110120
S'R'
p110121
sS'required'
p110122
I01
sS'group_name'
p110123
Nsa(dp110124
S'description'
p110125
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110126
sS'cpp_type'
p110127
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110128
sS'default'
p110129
g3
sS'name'
p110130
S'control_tags'
p110131
sS'required'
p110132
I00
sS'group_name'
p110133
Nsa(dp110134
S'name'
p110135
S'execute_on'
p110136
sS'cpp_type'
p110137
S'MultiMooseEnum'
p110138
sS'default'
p110139
S'TIMESTEP_END'
p110140
sS'description'
p110141
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110142
sS'required'
p110143
I00
sS'options'
p110144
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110145
sS'group_name'
p110146
Nsa(dp110147
S'description'
p110148
S'The initial pressure in the cavity.  If not given, a zero initial pressure will be used.\n'
p110149
sS'cpp_type'
p110150
S'double'
p110151
sS'default'
p110152
S'0'
p110153
sS'name'
p110154
S'initial_pressure'
p110155
sS'required'
p110156
I00
sS'group_name'
p110157
Nsa(dp110158
S'description'
p110159
S'Initial temperature (optional)\n'
p110160
sS'cpp_type'
p110161
S'double'
p110162
sS'default'
p110163
g3
sS'name'
p110164
S'initial_temperature'
p110165
sS'required'
p110166
I00
sS'group_name'
p110167
Nsa(dp110168
S'description'
p110169
S'The name of the postprocessor(s) that holds the amount of material injected into the cavity.\n'
p110170
sS'cpp_type'
p110171
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p110172
sS'default'
p110173
g3
sS'name'
p110174
S'material_input'
p110175
sS'required'
p110176
I00
sS'group_name'
p110177
Nsa(dp110178
S'description'
p110179
S'The amount of time during which the pressure will ramp from zero to its true value.\n'
p110180
sS'cpp_type'
p110181
S'double'
p110182
sS'default'
p110183
S'0'
p110184
sS'name'
p110185
S'startup_time'
p110186
sS'required'
p110187
I00
sS'group_name'
p110188
Nsa(dp110189
S'description'
p110190
S'The name of the average temperature postprocessor value.\n'
p110191
sS'cpp_type'
p110192
S'PostprocessorName'
p110193
sS'default'
p110194
g3
sS'name'
p110195
S'temperature'
p110196
sS'required'
p110197
I01
sS'group_name'
p110198
Nsa(dp110199
S'description'
p110200
g3
sS'cpp_type'
p110201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110202
sS'default'
p110203
S'CavityPressureUserObject'
p110204
sS'name'
p110205
S'type'
p110206
sS'required'
p110207
I00
sS'group_name'
p110208
Nsa(dp110209
S'description'
p110210
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110211
sS'cpp_type'
p110212
S'bool'
p110213
sS'default'
p110214
S'1'
p110215
sS'name'
p110216
S'use_displaced_mesh'
p110217
sS'required'
p110218
I00
sS'group_name'
p110219
S'Advanced'
p110220
sa(dp110221
S'description'
p110222
S'The name of the internal volume postprocessor value.\n'
p110223
sS'cpp_type'
p110224
S'PostprocessorName'
p110225
sS'default'
p110226
g3
sS'name'
p110227
S'volume'
p110228
sS'required'
p110229
I01
sS'group_name'
p110230
NsasS'name'
p110231
S'/UserObjects/CavityPressureUserObject'
p110232
sa(dp110233
S'description'
p110234
S'Userobject for calculating the grain volume and grain center\n'
p110235
sS'subblocks'
p110236
NsS'parameters'
p110237
(lp110238
(dp110239
S'description'
p110240
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110241
sS'cpp_type'
p110242
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110243
sS'default'
p110244
g3
sS'name'
p110245
S'block'
p110246
sS'required'
p110247
I00
sS'group_name'
p110248
Nsa(dp110249
S'description'
p110250
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110251
sS'cpp_type'
p110252
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110253
sS'default'
p110254
g3
sS'name'
p110255
S'control_tags'
p110256
sS'required'
p110257
I00
sS'group_name'
p110258
Nsa(dp110259
S'description'
p110260
S'order parameters\n'
p110261
sS'cpp_type'
p110262
S'std::vector<VariableName>'
p110263
sS'default'
p110264
g3
sS'name'
p110265
S'etas'
p110266
sS'required'
p110267
I00
sS'group_name'
p110268
Nsa(dp110269
S'name'
p110270
S'execute_on'
p110271
sS'cpp_type'
p110272
S'MultiMooseEnum'
p110273
sS'default'
p110274
S'TIMESTEP_END'
p110275
sS'description'
p110276
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110277
sS'required'
p110278
I00
sS'options'
p110279
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110280
sS'group_name'
p110281
Nsa(dp110282
S'description'
p110283
S'The seed for the master random number generator\n'
p110284
sS'cpp_type'
p110285
S'unsigned int'
p110286
sS'default'
p110287
S'0'
p110288
sS'name'
p110289
S'seed'
p110290
sS'required'
p110291
I00
sS'group_name'
p110292
S'Advanced'
p110293
sa(dp110294
S'description'
p110295
g3
sS'cpp_type'
p110296
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110297
sS'default'
p110298
S'ComputeGrainCenterUserObject'
p110299
sS'name'
p110300
S'type'
p110301
sS'required'
p110302
I00
sS'group_name'
p110303
Nsa(dp110304
S'description'
p110305
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110306
sS'cpp_type'
p110307
S'bool'
p110308
sS'default'
p110309
S'0'
p110310
sS'name'
p110311
S'use_displaced_mesh'
p110312
sS'required'
p110313
I00
sS'group_name'
p110314
S'Advanced'
p110315
sasS'name'
p110316
S'/UserObjects/ComputeGrainCenterUserObject'
p110317
sa(dp110318
S'description'
p110319
S'Userobject for calculating force and torque acting on a grain\n'
p110320
sS'subblocks'
p110321
NsS'parameters'
p110322
(lp110323
(dp110324
S'description'
p110325
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110326
sS'cpp_type'
p110327
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110328
sS'default'
p110329
g3
sS'name'
p110330
S'block'
p110331
sS'required'
p110332
I00
sS'group_name'
p110333
Nsa(dp110334
S'description'
p110335
S'Concentration field\n'
p110336
sS'cpp_type'
p110337
S'std::vector<VariableName>'
p110338
sS'default'
p110339
g3
sS'name'
p110340
S'c'
p110341
sS'required'
p110342
I00
sS'group_name'
p110343
Nsa(dp110344
S'description'
p110345
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110346
sS'cpp_type'
p110347
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110348
sS'default'
p110349
g3
sS'name'
p110350
S'control_tags'
p110351
sS'required'
p110352
I00
sS'group_name'
p110353
Nsa(dp110354
S'name'
p110355
S'execute_on'
p110356
sS'cpp_type'
p110357
S'MultiMooseEnum'
p110358
sS'default'
p110359
S'TIMESTEP_END'
p110360
sS'description'
p110361
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110362
sS'required'
p110363
I00
sS'options'
p110364
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110365
sS'group_name'
p110366
Nsa(dp110367
S'description'
p110368
S'Force density material\n'
p110369
sS'cpp_type'
p110370
S'MaterialPropertyName'
p110371
sS'default'
p110372
S'force_density'
p110373
sS'name'
p110374
S'force_density'
p110375
sS'required'
p110376
I00
sS'group_name'
p110377
Nsa(dp110378
S'description'
p110379
S'center of mass of grains\n'
p110380
sS'cpp_type'
p110381
S'UserObjectName'
p110382
sS'default'
p110383
g3
sS'name'
p110384
S'grain_data'
p110385
sS'required'
p110386
I00
sS'group_name'
p110387
Nsa(dp110388
S'description'
p110389
S'The seed for the master random number generator\n'
p110390
sS'cpp_type'
p110391
S'unsigned int'
p110392
sS'default'
p110393
S'0'
p110394
sS'name'
p110395
S'seed'
p110396
sS'required'
p110397
I00
sS'group_name'
p110398
S'Advanced'
p110399
sa(dp110400
S'description'
p110401
g3
sS'cpp_type'
p110402
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110403
sS'default'
p110404
S'ComputeGrainForceAndTorque'
p110405
sS'name'
p110406
S'type'
p110407
sS'required'
p110408
I00
sS'group_name'
p110409
Nsa(dp110410
S'description'
p110411
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110412
sS'cpp_type'
p110413
S'bool'
p110414
sS'default'
p110415
S'0'
p110416
sS'name'
p110417
S'use_displaced_mesh'
p110418
sS'required'
p110419
I00
sS'group_name'
p110420
S'Advanced'
p110421
sasS'name'
p110422
S'/UserObjects/ComputeGrainForceAndTorque'
p110423
sa(dp110424
S'description'
p110425
g3
sS'subblocks'
p110426
NsS'parameters'
p110427
(lp110428
(dp110429
S'description'
p110430
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110431
sS'cpp_type'
p110432
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110433
sS'default'
p110434
g3
sS'name'
p110435
S'block'
p110436
sS'required'
p110437
I00
sS'group_name'
p110438
Nsa(dp110439
S'description'
p110440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110441
sS'cpp_type'
p110442
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110443
sS'default'
p110444
g3
sS'name'
p110445
S'control_tags'
p110446
sS'required'
p110447
I00
sS'group_name'
p110448
Nsa(dp110449
S'name'
p110450
S'execute_on'
p110451
sS'cpp_type'
p110452
S'MultiMooseEnum'
p110453
sS'default'
p110454
S'TIMESTEP_BEGIN'
p110455
sS'description'
p110456
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110457
sS'required'
p110458
I00
sS'options'
p110459
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110460
sS'group_name'
p110461
Nsa(dp110462
S'description'
p110463
S'Material property to multiply the random numbers with\n'
p110464
sS'cpp_type'
p110465
S'MaterialPropertyName'
p110466
sS'default'
p110467
g3
sS'name'
p110468
S'mask'
p110469
sS'required'
p110470
I00
sS'group_name'
p110471
Nsa(dp110472
S'description'
p110473
S'The seed for the master random number generator\n'
p110474
sS'cpp_type'
p110475
S'unsigned int'
p110476
sS'default'
p110477
S'0'
p110478
sS'name'
p110479
S'seed'
p110480
sS'required'
p110481
I00
sS'group_name'
p110482
S'Advanced'
p110483
sa(dp110484
S'description'
p110485
g3
sS'cpp_type'
p110486
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110487
sS'default'
p110488
S'ConservedMaskedNormalNoise'
p110489
sS'name'
p110490
S'type'
p110491
sS'required'
p110492
I00
sS'group_name'
p110493
Nsa(dp110494
S'description'
p110495
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110496
sS'cpp_type'
p110497
S'bool'
p110498
sS'default'
p110499
S'0'
p110500
sS'name'
p110501
S'use_displaced_mesh'
p110502
sS'required'
p110503
I00
sS'group_name'
p110504
S'Advanced'
p110505
sasS'name'
p110506
S'/UserObjects/ConservedMaskedNormalNoise'
p110507
sa(dp110508
S'description'
p110509
g3
sS'subblocks'
p110510
NsS'parameters'
p110511
(lp110512
(dp110513
S'description'
p110514
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110515
sS'cpp_type'
p110516
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110517
sS'default'
p110518
g3
sS'name'
p110519
S'block'
p110520
sS'required'
p110521
I00
sS'group_name'
p110522
Nsa(dp110523
S'description'
p110524
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110525
sS'cpp_type'
p110526
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110527
sS'default'
p110528
g3
sS'name'
p110529
S'control_tags'
p110530
sS'required'
p110531
I00
sS'group_name'
p110532
Nsa(dp110533
S'name'
p110534
S'execute_on'
p110535
sS'cpp_type'
p110536
S'MultiMooseEnum'
p110537
sS'default'
p110538
S'TIMESTEP_BEGIN'
p110539
sS'description'
p110540
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110541
sS'required'
p110542
I00
sS'options'
p110543
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110544
sS'group_name'
p110545
Nsa(dp110546
S'description'
p110547
S'Material property to multiply the random numbers with\n'
p110548
sS'cpp_type'
p110549
S'MaterialPropertyName'
p110550
sS'default'
p110551
g3
sS'name'
p110552
S'mask'
p110553
sS'required'
p110554
I00
sS'group_name'
p110555
Nsa(dp110556
S'description'
p110557
S'The seed for the master random number generator\n'
p110558
sS'cpp_type'
p110559
S'unsigned int'
p110560
sS'default'
p110561
S'0'
p110562
sS'name'
p110563
S'seed'
p110564
sS'required'
p110565
I00
sS'group_name'
p110566
S'Advanced'
p110567
sa(dp110568
S'description'
p110569
g3
sS'cpp_type'
p110570
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110571
sS'default'
p110572
S'ConservedMaskedUniformNoise'
p110573
sS'name'
p110574
S'type'
p110575
sS'required'
p110576
I00
sS'group_name'
p110577
Nsa(dp110578
S'description'
p110579
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110580
sS'cpp_type'
p110581
S'bool'
p110582
sS'default'
p110583
S'0'
p110584
sS'name'
p110585
S'use_displaced_mesh'
p110586
sS'required'
p110587
I00
sS'group_name'
p110588
S'Advanced'
p110589
sasS'name'
p110590
S'/UserObjects/ConservedMaskedUniformNoise'
p110591
sa(dp110592
S'description'
p110593
g3
sS'subblocks'
p110594
NsS'parameters'
p110595
(lp110596
(dp110597
S'description'
p110598
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110599
sS'cpp_type'
p110600
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110601
sS'default'
p110602
g3
sS'name'
p110603
S'block'
p110604
sS'required'
p110605
I00
sS'group_name'
p110606
Nsa(dp110607
S'description'
p110608
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110609
sS'cpp_type'
p110610
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110611
sS'default'
p110612
g3
sS'name'
p110613
S'control_tags'
p110614
sS'required'
p110615
I00
sS'group_name'
p110616
Nsa(dp110617
S'name'
p110618
S'execute_on'
p110619
sS'cpp_type'
p110620
S'MultiMooseEnum'
p110621
sS'default'
p110622
S'TIMESTEP_BEGIN'
p110623
sS'description'
p110624
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110625
sS'required'
p110626
I00
sS'options'
p110627
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110628
sS'group_name'
p110629
Nsa(dp110630
S'description'
p110631
S'The seed for the master random number generator\n'
p110632
sS'cpp_type'
p110633
S'unsigned int'
p110634
sS'default'
p110635
S'0'
p110636
sS'name'
p110637
S'seed'
p110638
sS'required'
p110639
I00
sS'group_name'
p110640
S'Advanced'
p110641
sa(dp110642
S'description'
p110643
g3
sS'cpp_type'
p110644
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110645
sS'default'
p110646
S'ConservedNormalNoise'
p110647
sS'name'
p110648
S'type'
p110649
sS'required'
p110650
I00
sS'group_name'
p110651
Nsa(dp110652
S'description'
p110653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110654
sS'cpp_type'
p110655
S'bool'
p110656
sS'default'
p110657
S'0'
p110658
sS'name'
p110659
S'use_displaced_mesh'
p110660
sS'required'
p110661
I00
sS'group_name'
p110662
S'Advanced'
p110663
sasS'name'
p110664
S'/UserObjects/ConservedNormalNoise'
p110665
sa(dp110666
S'description'
p110667
g3
sS'subblocks'
p110668
NsS'parameters'
p110669
(lp110670
(dp110671
S'description'
p110672
S'The list of block ids (SubdomainID) that this object will be applied\n'
p110673
sS'cpp_type'
p110674
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p110675
sS'default'
p110676
g3
sS'name'
p110677
S'block'
p110678
sS'required'
p110679
I00
sS'group_name'
p110680
Nsa(dp110681
S'description'
p110682
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110683
sS'cpp_type'
p110684
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110685
sS'default'
p110686
g3
sS'name'
p110687
S'control_tags'
p110688
sS'required'
p110689
I00
sS'group_name'
p110690
Nsa(dp110691
S'name'
p110692
S'execute_on'
p110693
sS'cpp_type'
p110694
S'MultiMooseEnum'
p110695
sS'default'
p110696
S'TIMESTEP_BEGIN'
p110697
sS'description'
p110698
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110699
sS'required'
p110700
I00
sS'options'
p110701
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110702
sS'group_name'
p110703
Nsa(dp110704
S'description'
p110705
S'The seed for the master random number generator\n'
p110706
sS'cpp_type'
p110707
S'unsigned int'
p110708
sS'default'
p110709
S'0'
p110710
sS'name'
p110711
S'seed'
p110712
sS'required'
p110713
I00
sS'group_name'
p110714
S'Advanced'
p110715
sa(dp110716
S'description'
p110717
g3
sS'cpp_type'
p110718
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110719
sS'default'
p110720
S'ConservedUniformNoise'
p110721
sS'name'
p110722
S'type'
p110723
sS'required'
p110724
I00
sS'group_name'
p110725
Nsa(dp110726
S'description'
p110727
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110728
sS'cpp_type'
p110729
S'bool'
p110730
sS'default'
p110731
S'0'
p110732
sS'name'
p110733
S'use_displaced_mesh'
p110734
sS'required'
p110735
I00
sS'group_name'
p110736
S'Advanced'
p110737
sasS'name'
p110738
S'/UserObjects/ConservedUniformNoise'
p110739
sa(dp110740
S'description'
p110741
S'Userobject for calculating force and torque acting on a grain\n'
p110742
sS'subblocks'
p110743
NsS'parameters'
p110744
(lp110745
(dp110746
S'description'
p110747
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110748
sS'cpp_type'
p110749
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110750
sS'default'
p110751
g3
sS'name'
p110752
S'control_tags'
p110753
sS'required'
p110754
I00
sS'group_name'
p110755
Nsa(dp110756
S'name'
p110757
S'execute_on'
p110758
sS'cpp_type'
p110759
S'MultiMooseEnum'
p110760
sS'default'
p110761
S'TIMESTEP_END'
p110762
sS'description'
p110763
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110764
sS'required'
p110765
I00
sS'options'
p110766
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110767
sS'group_name'
p110768
Nsa(dp110769
S'description'
p110770
S'force acting on grains\n'
p110771
sS'cpp_type'
p110772
S'std::vector<double, std::allocator<double> >'
p110773
sS'default'
p110774
g3
sS'name'
p110775
S'force'
p110776
sS'required'
p110777
I00
sS'group_name'
p110778
Nsa(dp110779
S'description'
p110780
S'torque acting on grains\n'
p110781
sS'cpp_type'
p110782
S'std::vector<double, std::allocator<double> >'
p110783
sS'default'
p110784
g3
sS'name'
p110785
S'torque'
p110786
sS'required'
p110787
I00
sS'group_name'
p110788
Nsa(dp110789
S'description'
p110790
g3
sS'cpp_type'
p110791
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110792
sS'default'
p110793
S'ConstantGrainForceAndTorque'
p110794
sS'name'
p110795
S'type'
p110796
sS'required'
p110797
I00
sS'group_name'
p110798
Nsa(dp110799
S'description'
p110800
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110801
sS'cpp_type'
p110802
S'bool'
p110803
sS'default'
p110804
S'0'
p110805
sS'name'
p110806
S'use_displaced_mesh'
p110807
sS'required'
p110808
I00
sS'group_name'
p110809
S'Advanced'
p110810
sasS'name'
p110811
S'/UserObjects/ConstantGrainForceAndTorque'
p110812
sa(dp110813
S'description'
p110814
g3
sS'subblocks'
p110815
NsS'parameters'
p110816
(lp110817
(dp110818
S'description'
p110819
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110820
sS'cpp_type'
p110821
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110822
sS'default'
p110823
g3
sS'name'
p110824
S'control_tags'
p110825
sS'required'
p110826
I00
sS'group_name'
p110827
Nsa(dp110828
S'description'
p110829
S'The CrackFrontDefinition user object name\n'
p110830
sS'cpp_type'
p110831
S'UserObjectName'
p110832
sS'default'
p110833
g3
sS'name'
p110834
S'crack_front_definition'
p110835
sS'required'
p110836
I01
sS'group_name'
p110837
Nsa(dp110838
S'description'
p110839
S'The index of the point on the crack front where data is to be reported\n'
p110840
sS'cpp_type'
p110841
S'unsigned int'
p110842
sS'default'
p110843
g3
sS'name'
p110844
S'crack_front_point_index'
p110845
sS'required'
p110846
I00
sS'group_name'
p110847
Nsa(dp110848
S'name'
p110849
S'execute_on'
p110850
sS'cpp_type'
p110851
S'MultiMooseEnum'
p110852
sS'default'
p110853
S'TIMESTEP_END'
p110854
sS'description'
p110855
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p110856
sS'required'
p110857
I00
sS'options'
p110858
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p110859
sS'group_name'
p110860
Nsa(dp110861
S'description'
p110862
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p110863
sS'cpp_type'
p110864
S'std::vector<OutputName, std::allocator<OutputName> >'
p110865
sS'default'
p110866
g3
sS'name'
p110867
S'outputs'
p110868
sS'required'
p110869
I00
sS'group_name'
p110870
S'Advanced'
p110871
sa(dp110872
S'description'
p110873
S'A scale factor to be applied to the reported quantity\n'
p110874
sS'cpp_type'
p110875
S'double'
p110876
sS'default'
p110877
S'1'
p110878
sS'name'
p110879
S'scale_factor'
p110880
sS'required'
p110881
I00
sS'group_name'
p110882
Nsa(dp110883
S'description'
p110884
g3
sS'cpp_type'
p110885
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p110886
sS'default'
p110887
S'CrackFrontData'
p110888
sS'name'
p110889
S'type'
p110890
sS'required'
p110891
I00
sS'group_name'
p110892
Nsa(dp110893
S'description'
p110894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p110895
sS'cpp_type'
p110896
S'bool'
p110897
sS'default'
p110898
S'0'
p110899
sS'name'
p110900
S'use_displaced_mesh'
p110901
sS'required'
p110902
I00
sS'group_name'
p110903
S'Advanced'
p110904
sa(dp110905
S'description'
p110906
S'The name of a variable whose value at the crack front is to be reported\n'
p110907
sS'cpp_type'
p110908
S'VariableName'
p110909
sS'default'
p110910
g3
sS'name'
p110911
S'variable'
p110912
sS'required'
p110913
I01
sS'group_name'
p110914
NsasS'name'
p110915
S'/UserObjects/CrackFrontData'
p110916
sa(dp110917
S'description'
p110918
g3
sS'subblocks'
p110919
NsS'parameters'
p110920
(lp110921
(dp110922
S'description'
p110923
S'Treat body as two-dimensional\n'
p110924
sS'cpp_type'
p110925
S'bool'
p110926
sS'default'
p110927
S'0'
p110928
sS'name'
p110929
S'2d'
p110930
sS'required'
p110931
I00
sS'group_name'
p110932
Nsa(dp110933
S'description'
p110934
S'Out of plane axis for models treated as two-dimensional (0=x, 1=y, 2=z)\n'
p110935
sS'cpp_type'
p110936
S'unsigned int'
p110937
sS'default'
p110938
S'2'
p110939
sS'name'
p110940
S'axis_2d'
p110941
sS'required'
p110942
I00
sS'group_name'
p110943
Nsa(dp110944
S'description'
p110945
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p110946
sS'cpp_type'
p110947
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p110948
sS'default'
p110949
g3
sS'name'
p110950
S'boundary'
p110951
sS'required'
p110952
I00
sS'group_name'
p110953
Nsa(dp110954
S'description'
p110955
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p110956
sS'cpp_type'
p110957
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p110958
sS'default'
p110959
g3
sS'name'
p110960
S'control_tags'
p110961
sS'required'
p110962
I00
sS'group_name'
p110963
Nsa(dp110964
S'name'
p110965
S'crack_direction_method'
p110966
sS'cpp_type'
p110967
S'MooseEnum'
p110968
sS'default'
p110969
g3
sS'description'
p110970
S'Method to determine direction of crack propagation.  Choices are: CrackDirectionVector CrackMouth CurvedCrackFront\n'
p110971
sS'required'
p110972
I01
sS'options'
p110973
S'CrackDirectionVector CrackMouth CurvedCrackFront'
p110974
sS'group_name'
p110975
Nsa(dp110976
S'description'
p110977
S'Direction of crack propagation\n'
p110978
sS'cpp_type'
p110979
S'libMesh::VectorValue<double>'
p110980
sS'default'
p110981
g3
sS'name'
p110982
S'crack_direction_vector'
p110983
sS'required'
p110984
I00
sS'group_name'
p110985
Nsa(dp110986
S'description'
p110987
S'Direction of crack propagation for the node at end 1 of the crack\n'
p110988
sS'cpp_type'
p110989
S'libMesh::VectorValue<double>'
p110990
sS'default'
p110991
g3
sS'name'
p110992
S'crack_direction_vector_end_1'
p110993
sS'required'
p110994
I00
sS'group_name'
p110995
Nsa(dp110996
S'description'
p110997
S'Direction of crack propagation for the node at end 2 of the crack\n'
p110998
sS'cpp_type'
p110999
S'libMesh::VectorValue<double>'
p111000
sS'default'
p111001
g3
sS'name'
p111002
S'crack_direction_vector_end_2'
p111003
sS'required'
p111004
I00
sS'group_name'
p111005
Nsa(dp111006
S'name'
p111007
S'crack_end_direction_method'
p111008
sS'cpp_type'
p111009
S'MooseEnum'
p111010
sS'default'
p111011
S'NoSpecialTreatment'
p111012
sS'description'
p111013
S'Method to determine direction of crack propagation at ends of crack.  Choices are: NoSpecialTreatment CrackDirectionVector\n'
p111014
sS'required'
p111015
I00
sS'options'
p111016
S'NoSpecialTreatment CrackDirectionVector'
p111017
sS'group_name'
p111018
Nsa(dp111019
S'description'
p111020
S'Set of points to define crack front\n'
p111021
sS'cpp_type'
p111022
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p111023
sS'default'
p111024
g3
sS'name'
p111025
S'crack_front_points'
p111026
sS'required'
p111027
I00
sS'group_name'
p111028
Nsa(dp111029
S'description'
p111030
S'Boundaries whose average coordinate defines the crack mouth\n'
p111031
sS'cpp_type'
p111032
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p111033
sS'default'
p111034
g3
sS'name'
p111035
S'crack_mouth_boundary'
p111036
sS'required'
p111037
I00
sS'group_name'
p111038
Nsa(dp111039
S'description'
p111040
S'Variable containing the x displacement\n'
p111041
sS'cpp_type'
p111042
S'VariableName'
p111043
sS'default'
p111044
g3
sS'name'
p111045
S'disp_x'
p111046
sS'required'
p111047
I00
sS'group_name'
p111048
Nsa(dp111049
S'description'
p111050
S'Variable containing the y displacement\n'
p111051
sS'cpp_type'
p111052
S'VariableName'
p111053
sS'default'
p111054
g3
sS'name'
p111055
S'disp_y'
p111056
sS'required'
p111057
I00
sS'group_name'
p111058
Nsa(dp111059
S'description'
p111060
S'Variable containing the z displacement\n'
p111061
sS'cpp_type'
p111062
S'VariableName'
p111063
sS'default'
p111064
g3
sS'name'
p111065
S'disp_z'
p111066
sS'required'
p111067
I00
sS'group_name'
p111068
Nsa(dp111069
S'name'
p111070
S'execute_on'
p111071
sS'cpp_type'
p111072
S'MultiMooseEnum'
p111073
sS'default'
p111074
S'TIMESTEP_END'
p111075
sS'description'
p111076
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111077
sS'required'
p111078
I00
sS'options'
p111079
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111080
sS'group_name'
p111081
Nsa(dp111082
S'description'
p111083
S'Boundaries intersected by ends of crack\n'
p111084
sS'cpp_type'
p111085
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p111086
sS'default'
p111087
g3
sS'name'
p111088
S'intersecting_boundary'
p111089
sS'required'
p111090
I00
sS'group_name'
p111091
Nsa(dp111092
S'description'
p111093
S'The number of rings of nodes to generate\n'
p111094
sS'cpp_type'
p111095
S'unsigned int'
p111096
sS'default'
p111097
g3
sS'name'
p111098
S'last_ring'
p111099
sS'required'
p111100
I00
sS'group_name'
p111101
Nsa(dp111102
S'description'
p111103
S'Generate rings of nodes for q-function\n'
p111104
sS'cpp_type'
p111105
S'bool'
p111106
sS'default'
p111107
S'0'
p111108
sS'name'
p111109
S'q_function_rings'
p111110
sS'required'
p111111
I00
sS'group_name'
p111112
Nsa(dp111113
S'description'
p111114
S'Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n'
p111115
sS'cpp_type'
p111116
S'unsigned int'
p111117
sS'default'
p111118
g3
sS'name'
p111119
S'symmetry_plane'
p111120
sS'required'
p111121
I00
sS'group_name'
p111122
Nsa(dp111123
S'description'
p111124
S'Calculate T-stress\n'
p111125
sS'cpp_type'
p111126
S'bool'
p111127
sS'default'
p111128
S'0'
p111129
sS'name'
p111130
S't_stress'
p111131
sS'required'
p111132
I00
sS'group_name'
p111133
Nsa(dp111134
S'description'
p111135
g3
sS'cpp_type'
p111136
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111137
sS'default'
p111138
S'CrackFrontDefinition'
p111139
sS'name'
p111140
S'type'
p111141
sS'required'
p111142
I00
sS'group_name'
p111143
Nsa(dp111144
S'description'
p111145
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111146
sS'cpp_type'
p111147
S'bool'
p111148
sS'default'
p111149
S'0'
p111150
sS'name'
p111151
S'use_displaced_mesh'
p111152
sS'required'
p111153
I00
sS'group_name'
p111154
S'Advanced'
p111155
sasS'name'
p111156
S'/UserObjects/CrackFrontDefinition'
p111157
sa(dp111158
S'description'
p111159
g3
sS'subblocks'
p111160
NsS'parameters'
p111161
(lp111162
(dp111163
S'description'
p111164
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111165
sS'cpp_type'
p111166
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111167
sS'default'
p111168
g3
sS'name'
p111169
S'control_tags'
p111170
sS'required'
p111171
I00
sS'group_name'
p111172
Nsa(dp111173
S'name'
p111174
S'execute_on'
p111175
sS'cpp_type'
p111176
S'MultiMooseEnum'
p111177
sS'default'
p111178
S'TIMESTEP_END'
p111179
sS'description'
p111180
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111181
sS'required'
p111182
I00
sS'options'
p111183
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111184
sS'group_name'
p111185
Nsa(dp111186
S'description'
p111187
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111188
sS'cpp_type'
p111189
S'std::vector<OutputName, std::allocator<OutputName> >'
p111190
sS'default'
p111191
g3
sS'name'
p111192
S'outputs'
p111193
sS'required'
p111194
I00
sS'group_name'
p111195
S'Advanced'
p111196
sa(dp111197
S'description'
p111198
g3
sS'cpp_type'
p111199
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111200
sS'default'
p111201
S'DifferencePostprocessor'
p111202
sS'name'
p111203
S'type'
p111204
sS'required'
p111205
I00
sS'group_name'
p111206
Nsa(dp111207
S'description'
p111208
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111209
sS'cpp_type'
p111210
S'bool'
p111211
sS'default'
p111212
S'0'
p111213
sS'name'
p111214
S'use_displaced_mesh'
p111215
sS'required'
p111216
I00
sS'group_name'
p111217
S'Advanced'
p111218
sa(dp111219
S'description'
p111220
S'First value\n'
p111221
sS'cpp_type'
p111222
S'PostprocessorName'
p111223
sS'default'
p111224
g3
sS'name'
p111225
S'value1'
p111226
sS'required'
p111227
I01
sS'group_name'
p111228
Nsa(dp111229
S'description'
p111230
S'Second value\n'
p111231
sS'cpp_type'
p111232
S'PostprocessorName'
p111233
sS'default'
p111234
g3
sS'name'
p111235
S'value2'
p111236
sS'required'
p111237
I01
sS'group_name'
p111238
NsasS'name'
p111239
S'/UserObjects/DifferencePostprocessor'
p111240
sa(dp111241
S'description'
p111242
g3
sS'subblocks'
p111243
NsS'parameters'
p111244
(lp111245
(dp111246
S'description'
p111247
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111248
sS'cpp_type'
p111249
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111250
sS'default'
p111251
g3
sS'name'
p111252
S'block'
p111253
sS'required'
p111254
I00
sS'group_name'
p111255
Nsa(dp111256
S'description'
p111257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111258
sS'cpp_type'
p111259
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111260
sS'default'
p111261
g3
sS'name'
p111262
S'control_tags'
p111263
sS'required'
p111264
I00
sS'group_name'
p111265
Nsa(dp111266
S'name'
p111267
S'execute_on'
p111268
sS'cpp_type'
p111269
S'MultiMooseEnum'
p111270
sS'default'
p111271
S'TIMESTEP_END'
p111272
sS'description'
p111273
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111274
sS'required'
p111275
I00
sS'options'
p111276
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111277
sS'group_name'
p111278
Nsa(dp111279
S'description'
p111280
S'Time to keep each nucleus active\n'
p111281
sS'cpp_type'
p111282
S'double'
p111283
sS'default'
p111284
g3
sS'name'
p111285
S'hold_time'
p111286
sS'required'
p111287
I01
sS'group_name'
p111288
Nsa(dp111289
S'description'
p111290
S'Probability density for inserting a discrete nucleus\n'
p111291
sS'cpp_type'
p111292
S'MaterialPropertyName'
p111293
sS'default'
p111294
g3
sS'name'
p111295
S'probability'
p111296
sS'required'
p111297
I01
sS'group_name'
p111298
Nsa(dp111299
S'description'
p111300
S'The seed for the master random number generator\n'
p111301
sS'cpp_type'
p111302
S'unsigned int'
p111303
sS'default'
p111304
S'0'
p111305
sS'name'
p111306
S'seed'
p111307
sS'required'
p111308
I00
sS'group_name'
p111309
S'Advanced'
p111310
sa(dp111311
S'description'
p111312
S'Insert a fixed nucleus at a point in the simulation cell\n'
p111313
sS'cpp_type'
p111314
S'libMesh::Point'
p111315
sS'default'
p111316
g3
sS'name'
p111317
S'test'
p111318
sS'required'
p111319
I00
sS'group_name'
p111320
Nsa(dp111321
S'description'
p111322
g3
sS'cpp_type'
p111323
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111324
sS'default'
p111325
S'DiscreteNucleationInserter'
p111326
sS'name'
p111327
S'type'
p111328
sS'required'
p111329
I00
sS'group_name'
p111330
Nsa(dp111331
S'description'
p111332
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111333
sS'cpp_type'
p111334
S'bool'
p111335
sS'default'
p111336
S'0'
p111337
sS'name'
p111338
S'use_displaced_mesh'
p111339
sS'required'
p111340
I00
sS'group_name'
p111341
S'Advanced'
p111342
sasS'name'
p111343
S'/UserObjects/DiscreteNucleationInserter'
p111344
sa(dp111345
S'description'
p111346
g3
sS'subblocks'
p111347
NsS'parameters'
p111348
(lp111349
(dp111350
S'description'
p111351
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111352
sS'cpp_type'
p111353
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111354
sS'default'
p111355
g3
sS'name'
p111356
S'block'
p111357
sS'required'
p111358
I00
sS'group_name'
p111359
Nsa(dp111360
S'description'
p111361
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111362
sS'cpp_type'
p111363
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111364
sS'default'
p111365
g3
sS'name'
p111366
S'control_tags'
p111367
sS'required'
p111368
I00
sS'group_name'
p111369
Nsa(dp111370
S'name'
p111371
S'execute_on'
p111372
sS'cpp_type'
p111373
S'MultiMooseEnum'
p111374
sS'default'
p111375
S'TIMESTEP_BEGIN'
p111376
sS'description'
p111377
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111378
sS'required'
p111379
I00
sS'options'
p111380
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111381
sS'group_name'
p111382
Nsa(dp111383
S'description'
p111384
S'DiscreteNucleationInserter user object\n'
p111385
sS'cpp_type'
p111386
S'UserObjectName'
p111387
sS'default'
p111388
g3
sS'name'
p111389
S'inserter'
p111390
sS'required'
p111391
I01
sS'group_name'
p111392
Nsa(dp111393
S'description'
p111394
S'Nucleus interface width for smooth nuclei\n'
p111395
sS'cpp_type'
p111396
S'double'
p111397
sS'default'
p111398
S'0'
p111399
sS'name'
p111400
S'int_width'
p111401
sS'required'
p111402
I00
sS'group_name'
p111403
Nsa(dp111404
S'description'
p111405
S'Use the periodicity settings of this variable to populate the grain map\n'
p111406
sS'cpp_type'
p111407
S'std::vector<VariableName>'
p111408
sS'default'
p111409
g3
sS'name'
p111410
S'periodic'
p111411
sS'required'
p111412
I00
sS'group_name'
p111413
Nsa(dp111414
S'description'
p111415
S'Radius for the inserted nuclei\n'
p111416
sS'cpp_type'
p111417
S'double'
p111418
sS'default'
p111419
S'0'
p111420
sS'name'
p111421
S'radius'
p111422
sS'required'
p111423
I00
sS'group_name'
p111424
Nsa(dp111425
S'description'
p111426
S'The seed for the master random number generator\n'
p111427
sS'cpp_type'
p111428
S'unsigned int'
p111429
sS'default'
p111430
S'0'
p111431
sS'name'
p111432
S'seed'
p111433
sS'required'
p111434
I00
sS'group_name'
p111435
S'Advanced'
p111436
sa(dp111437
S'description'
p111438
g3
sS'cpp_type'
p111439
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111440
sS'default'
p111441
S'DiscreteNucleationMap'
p111442
sS'name'
p111443
S'type'
p111444
sS'required'
p111445
I00
sS'group_name'
p111446
Nsa(dp111447
S'description'
p111448
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111449
sS'cpp_type'
p111450
S'bool'
p111451
sS'default'
p111452
S'0'
p111453
sS'name'
p111454
S'use_displaced_mesh'
p111455
sS'required'
p111456
I00
sS'group_name'
p111457
S'Advanced'
p111458
sasS'name'
p111459
S'/UserObjects/DiscreteNucleationMap'
p111460
sa(dp111461
S'description'
p111462
g3
sS'subblocks'
p111463
NsS'parameters'
p111464
(lp111465
(dp111466
S'description'
p111467
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111468
sS'cpp_type'
p111469
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111470
sS'default'
p111471
g3
sS'name'
p111472
S'control_tags'
p111473
sS'required'
p111474
I00
sS'group_name'
p111475
Nsa(dp111476
S'description'
p111477
S'Number of additional custom data columns to read from the EBSD file\n'
p111478
sS'cpp_type'
p111479
S'unsigned int'
p111480
sS'default'
p111481
S'0'
p111482
sS'name'
p111483
S'custom_columns'
p111484
sS'required'
p111485
I00
sS'group_name'
p111486
Nsa(dp111487
S'name'
p111488
S'execute_on'
p111489
sS'cpp_type'
p111490
S'MultiMooseEnum'
p111491
sS'default'
p111492
S'TIMESTEP_END'
p111493
sS'description'
p111494
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111495
sS'required'
p111496
I00
sS'options'
p111497
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111498
sS'group_name'
p111499
Nsa(dp111500
S'description'
p111501
g3
sS'cpp_type'
p111502
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111503
sS'default'
p111504
S'EBSDReader'
p111505
sS'name'
p111506
S'type'
p111507
sS'required'
p111508
I00
sS'group_name'
p111509
Nsa(dp111510
S'description'
p111511
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111512
sS'cpp_type'
p111513
S'bool'
p111514
sS'default'
p111515
S'0'
p111516
sS'name'
p111517
S'use_displaced_mesh'
p111518
sS'required'
p111519
I00
sS'group_name'
p111520
S'Advanced'
p111521
sasS'name'
p111522
S'/UserObjects/EBSDReader'
p111523
sa(dp111524
S'description'
p111525
g3
sS'subblocks'
p111526
NsS'parameters'
p111527
(lp111528
(dp111529
S'description'
p111530
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111531
sS'cpp_type'
p111532
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111533
sS'default'
p111534
g3
sS'name'
p111535
S'block'
p111536
sS'required'
p111537
I00
sS'group_name'
p111538
Nsa(dp111539
S'description'
p111540
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111541
sS'cpp_type'
p111542
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111543
sS'default'
p111544
g3
sS'name'
p111545
S'control_tags'
p111546
sS'required'
p111547
I00
sS'group_name'
p111548
Nsa(dp111549
S'name'
p111550
S'execute_on'
p111551
sS'cpp_type'
p111552
S'MultiMooseEnum'
p111553
sS'default'
p111554
S'TIMESTEP_END'
p111555
sS'description'
p111556
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111557
sS'required'
p111558
I00
sS'options'
p111559
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111560
sS'group_name'
p111561
Nsa(dp111562
S'description'
p111563
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111564
sS'cpp_type'
p111565
S'std::vector<OutputName, std::allocator<OutputName> >'
p111566
sS'default'
p111567
g3
sS'name'
p111568
S'outputs'
p111569
sS'required'
p111570
I00
sS'group_name'
p111571
S'Advanced'
p111572
sa(dp111573
S'description'
p111574
S'The seed for the master random number generator\n'
p111575
sS'cpp_type'
p111576
S'unsigned int'
p111577
sS'default'
p111578
S'0'
p111579
sS'name'
p111580
S'seed'
p111581
sS'required'
p111582
I00
sS'group_name'
p111583
S'Advanced'
p111584
sa(dp111585
S'description'
p111586
g3
sS'cpp_type'
p111587
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111588
sS'default'
p111589
S'ElementAverageTimeDerivative'
p111590
sS'name'
p111591
S'type'
p111592
sS'required'
p111593
I00
sS'group_name'
p111594
Nsa(dp111595
S'description'
p111596
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111597
sS'cpp_type'
p111598
S'bool'
p111599
sS'default'
p111600
S'0'
p111601
sS'name'
p111602
S'use_displaced_mesh'
p111603
sS'required'
p111604
I00
sS'group_name'
p111605
S'Advanced'
p111606
sa(dp111607
S'description'
p111608
S'The name of the variable that this object operates on\n'
p111609
sS'cpp_type'
p111610
S'std::vector<VariableName>'
p111611
sS'default'
p111612
g3
sS'name'
p111613
S'variable'
p111614
sS'required'
p111615
I00
sS'group_name'
p111616
NsasS'name'
p111617
S'/UserObjects/ElementAverageTimeDerivative'
p111618
sa(dp111619
S'description'
p111620
g3
sS'subblocks'
p111621
NsS'parameters'
p111622
(lp111623
(dp111624
S'description'
p111625
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111626
sS'cpp_type'
p111627
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111628
sS'default'
p111629
g3
sS'name'
p111630
S'block'
p111631
sS'required'
p111632
I00
sS'group_name'
p111633
Nsa(dp111634
S'description'
p111635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111636
sS'cpp_type'
p111637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111638
sS'default'
p111639
g3
sS'name'
p111640
S'control_tags'
p111641
sS'required'
p111642
I00
sS'group_name'
p111643
Nsa(dp111644
S'name'
p111645
S'execute_on'
p111646
sS'cpp_type'
p111647
S'MultiMooseEnum'
p111648
sS'default'
p111649
S'TIMESTEP_END'
p111650
sS'description'
p111651
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111652
sS'required'
p111653
I00
sS'options'
p111654
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111655
sS'group_name'
p111656
Nsa(dp111657
S'description'
p111658
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111659
sS'cpp_type'
p111660
S'std::vector<OutputName, std::allocator<OutputName> >'
p111661
sS'default'
p111662
g3
sS'name'
p111663
S'outputs'
p111664
sS'required'
p111665
I00
sS'group_name'
p111666
S'Advanced'
p111667
sa(dp111668
S'description'
p111669
S'The seed for the master random number generator\n'
p111670
sS'cpp_type'
p111671
S'unsigned int'
p111672
sS'default'
p111673
S'0'
p111674
sS'name'
p111675
S'seed'
p111676
sS'required'
p111677
I00
sS'group_name'
p111678
S'Advanced'
p111679
sa(dp111680
S'description'
p111681
g3
sS'cpp_type'
p111682
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111683
sS'default'
p111684
S'ElementAverageValue'
p111685
sS'name'
p111686
S'type'
p111687
sS'required'
p111688
I00
sS'group_name'
p111689
Nsa(dp111690
S'description'
p111691
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111692
sS'cpp_type'
p111693
S'bool'
p111694
sS'default'
p111695
S'0'
p111696
sS'name'
p111697
S'use_displaced_mesh'
p111698
sS'required'
p111699
I00
sS'group_name'
p111700
S'Advanced'
p111701
sa(dp111702
S'description'
p111703
S'The name of the variable that this object operates on\n'
p111704
sS'cpp_type'
p111705
S'std::vector<VariableName>'
p111706
sS'default'
p111707
g3
sS'name'
p111708
S'variable'
p111709
sS'required'
p111710
I00
sS'group_name'
p111711
NsasS'name'
p111712
S'/UserObjects/ElementAverageValue'
p111713
sa(dp111714
S'description'
p111715
g3
sS'subblocks'
p111716
NsS'parameters'
p111717
(lp111718
(dp111719
S'description'
p111720
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111721
sS'cpp_type'
p111722
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111723
sS'default'
p111724
g3
sS'name'
p111725
S'block'
p111726
sS'required'
p111727
I00
sS'group_name'
p111728
Nsa(dp111729
S'description'
p111730
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111731
sS'cpp_type'
p111732
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111733
sS'default'
p111734
g3
sS'name'
p111735
S'control_tags'
p111736
sS'required'
p111737
I00
sS'group_name'
p111738
Nsa(dp111739
S'name'
p111740
S'execute_on'
p111741
sS'cpp_type'
p111742
S'MultiMooseEnum'
p111743
sS'default'
p111744
S'TIMESTEP_END'
p111745
sS'description'
p111746
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111747
sS'required'
p111748
I00
sS'options'
p111749
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111750
sS'group_name'
p111751
Nsa(dp111752
S'description'
p111753
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111754
sS'cpp_type'
p111755
S'std::vector<OutputName, std::allocator<OutputName> >'
p111756
sS'default'
p111757
g3
sS'name'
p111758
S'outputs'
p111759
sS'required'
p111760
I00
sS'group_name'
p111761
S'Advanced'
p111762
sa(dp111763
S'description'
p111764
S'The seed for the master random number generator\n'
p111765
sS'cpp_type'
p111766
S'unsigned int'
p111767
sS'default'
p111768
S'0'
p111769
sS'name'
p111770
S'seed'
p111771
sS'required'
p111772
I00
sS'group_name'
p111773
S'Advanced'
p111774
sa(dp111775
S'description'
p111776
g3
sS'cpp_type'
p111777
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111778
sS'default'
p111779
S'ElementExtremeValue'
p111780
sS'name'
p111781
S'type'
p111782
sS'required'
p111783
I00
sS'group_name'
p111784
Nsa(dp111785
S'description'
p111786
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111787
sS'cpp_type'
p111788
S'bool'
p111789
sS'default'
p111790
S'0'
p111791
sS'name'
p111792
S'use_displaced_mesh'
p111793
sS'required'
p111794
I00
sS'group_name'
p111795
S'Advanced'
p111796
sa(dp111797
S'name'
p111798
S'value_type'
p111799
sS'cpp_type'
p111800
S'MooseEnum'
p111801
sS'default'
p111802
S'max'
p111803
sS'description'
p111804
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p111805
sS'required'
p111806
I00
sS'options'
p111807
S'max min'
p111808
sS'group_name'
p111809
Nsa(dp111810
S'description'
p111811
S'The name of the variable that this postprocessor operates on\n'
p111812
sS'cpp_type'
p111813
S'std::vector<VariableName>'
p111814
sS'default'
p111815
g3
sS'name'
p111816
S'variable'
p111817
sS'required'
p111818
I00
sS'group_name'
p111819
NsasS'name'
p111820
S'/UserObjects/ElementExtremeValue'
p111821
sa(dp111822
S'description'
p111823
g3
sS'subblocks'
p111824
NsS'parameters'
p111825
(lp111826
(dp111827
S'description'
p111828
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111829
sS'cpp_type'
p111830
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111831
sS'default'
p111832
g3
sS'name'
p111833
S'block'
p111834
sS'required'
p111835
I00
sS'group_name'
p111836
Nsa(dp111837
S'description'
p111838
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111839
sS'cpp_type'
p111840
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111841
sS'default'
p111842
g3
sS'name'
p111843
S'control_tags'
p111844
sS'required'
p111845
I00
sS'group_name'
p111846
Nsa(dp111847
S'name'
p111848
S'execute_on'
p111849
sS'cpp_type'
p111850
S'MultiMooseEnum'
p111851
sS'default'
p111852
S'TIMESTEP_END'
p111853
sS'description'
p111854
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111855
sS'required'
p111856
I00
sS'options'
p111857
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111858
sS'group_name'
p111859
Nsa(dp111860
S'description'
p111861
S'The analytic solution to compare against\n'
p111862
sS'cpp_type'
p111863
S'FunctionName'
p111864
sS'default'
p111865
g3
sS'name'
p111866
S'function'
p111867
sS'required'
p111868
I01
sS'group_name'
p111869
Nsa(dp111870
S'description'
p111871
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111872
sS'cpp_type'
p111873
S'std::vector<OutputName, std::allocator<OutputName> >'
p111874
sS'default'
p111875
g3
sS'name'
p111876
S'outputs'
p111877
sS'required'
p111878
I00
sS'group_name'
p111879
S'Advanced'
p111880
sa(dp111881
S'description'
p111882
S'The exponent used in the norm.\n'
p111883
sS'cpp_type'
p111884
S'double'
p111885
sS'default'
p111886
S'2'
p111887
sS'name'
p111888
S'p'
p111889
sS'required'
p111890
I00
sS'group_name'
p111891
Nsa(dp111892
S'description'
p111893
S'The seed for the master random number generator\n'
p111894
sS'cpp_type'
p111895
S'unsigned int'
p111896
sS'default'
p111897
S'0'
p111898
sS'name'
p111899
S'seed'
p111900
sS'required'
p111901
I00
sS'group_name'
p111902
S'Advanced'
p111903
sa(dp111904
S'description'
p111905
g3
sS'cpp_type'
p111906
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p111907
sS'default'
p111908
S'ElementH1Error'
p111909
sS'name'
p111910
S'type'
p111911
sS'required'
p111912
I00
sS'group_name'
p111913
Nsa(dp111914
S'description'
p111915
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p111916
sS'cpp_type'
p111917
S'bool'
p111918
sS'default'
p111919
S'0'
p111920
sS'name'
p111921
S'use_displaced_mesh'
p111922
sS'required'
p111923
I00
sS'group_name'
p111924
S'Advanced'
p111925
sa(dp111926
S'description'
p111927
S'The name of the variable that this object operates on\n'
p111928
sS'cpp_type'
p111929
S'std::vector<VariableName>'
p111930
sS'default'
p111931
g3
sS'name'
p111932
S'variable'
p111933
sS'required'
p111934
I00
sS'group_name'
p111935
NsasS'name'
p111936
S'/UserObjects/ElementH1Error'
p111937
sa(dp111938
S'description'
p111939
g3
sS'subblocks'
p111940
NsS'parameters'
p111941
(lp111942
(dp111943
S'description'
p111944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p111945
sS'cpp_type'
p111946
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111947
sS'default'
p111948
g3
sS'name'
p111949
S'block'
p111950
sS'required'
p111951
I00
sS'group_name'
p111952
Nsa(dp111953
S'description'
p111954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p111955
sS'cpp_type'
p111956
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p111957
sS'default'
p111958
g3
sS'name'
p111959
S'control_tags'
p111960
sS'required'
p111961
I00
sS'group_name'
p111962
Nsa(dp111963
S'name'
p111964
S'execute_on'
p111965
sS'cpp_type'
p111966
S'MultiMooseEnum'
p111967
sS'default'
p111968
S'TIMESTEP_END'
p111969
sS'description'
p111970
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p111971
sS'required'
p111972
I00
sS'options'
p111973
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p111974
sS'group_name'
p111975
Nsa(dp111976
S'description'
p111977
S'The analytic solution to compare against\n'
p111978
sS'cpp_type'
p111979
S'FunctionName'
p111980
sS'default'
p111981
g3
sS'name'
p111982
S'function'
p111983
sS'required'
p111984
I01
sS'group_name'
p111985
Nsa(dp111986
S'description'
p111987
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p111988
sS'cpp_type'
p111989
S'std::vector<OutputName, std::allocator<OutputName> >'
p111990
sS'default'
p111991
g3
sS'name'
p111992
S'outputs'
p111993
sS'required'
p111994
I00
sS'group_name'
p111995
S'Advanced'
p111996
sa(dp111997
S'description'
p111998
S'The seed for the master random number generator\n'
p111999
sS'cpp_type'
p112000
S'unsigned int'
p112001
sS'default'
p112002
S'0'
p112003
sS'name'
p112004
S'seed'
p112005
sS'required'
p112006
I00
sS'group_name'
p112007
S'Advanced'
p112008
sa(dp112009
S'description'
p112010
g3
sS'cpp_type'
p112011
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112012
sS'default'
p112013
S'ElementH1SemiError'
p112014
sS'name'
p112015
S'type'
p112016
sS'required'
p112017
I00
sS'group_name'
p112018
Nsa(dp112019
S'description'
p112020
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112021
sS'cpp_type'
p112022
S'bool'
p112023
sS'default'
p112024
S'0'
p112025
sS'name'
p112026
S'use_displaced_mesh'
p112027
sS'required'
p112028
I00
sS'group_name'
p112029
S'Advanced'
p112030
sa(dp112031
S'description'
p112032
S'The name of the variable that this object operates on\n'
p112033
sS'cpp_type'
p112034
S'std::vector<VariableName>'
p112035
sS'default'
p112036
g3
sS'name'
p112037
S'variable'
p112038
sS'required'
p112039
I00
sS'group_name'
p112040
NsasS'name'
p112041
S'/UserObjects/ElementH1SemiError'
p112042
sa(dp112043
S'description'
p112044
g3
sS'subblocks'
p112045
NsS'parameters'
p112046
(lp112047
(dp112048
S'description'
p112049
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112050
sS'cpp_type'
p112051
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112052
sS'default'
p112053
g3
sS'name'
p112054
S'block'
p112055
sS'required'
p112056
I00
sS'group_name'
p112057
Nsa(dp112058
S'description'
p112059
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112060
sS'cpp_type'
p112061
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112062
sS'default'
p112063
g3
sS'name'
p112064
S'control_tags'
p112065
sS'required'
p112066
I00
sS'group_name'
p112067
Nsa(dp112068
S'name'
p112069
S'execute_on'
p112070
sS'cpp_type'
p112071
S'MultiMooseEnum'
p112072
sS'default'
p112073
S'TIMESTEP_END'
p112074
sS'description'
p112075
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112076
sS'required'
p112077
I00
sS'options'
p112078
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112079
sS'group_name'
p112080
Nsa(dp112081
S'description'
p112082
S'The name of the material property\n'
p112083
sS'cpp_type'
p112084
S'MaterialPropertyName'
p112085
sS'default'
p112086
g3
sS'name'
p112087
S'mat_prop'
p112088
sS'required'
p112089
I01
sS'group_name'
p112090
Nsa(dp112091
S'description'
p112092
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112093
sS'cpp_type'
p112094
S'std::vector<OutputName, std::allocator<OutputName> >'
p112095
sS'default'
p112096
g3
sS'name'
p112097
S'outputs'
p112098
sS'required'
p112099
I00
sS'group_name'
p112100
S'Advanced'
p112101
sa(dp112102
S'description'
p112103
S'The seed for the master random number generator\n'
p112104
sS'cpp_type'
p112105
S'unsigned int'
p112106
sS'default'
p112107
S'0'
p112108
sS'name'
p112109
S'seed'
p112110
sS'required'
p112111
I00
sS'group_name'
p112112
S'Advanced'
p112113
sa(dp112114
S'description'
p112115
g3
sS'cpp_type'
p112116
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112117
sS'default'
p112118
S'ElementIntegralMaterialProperty'
p112119
sS'name'
p112120
S'type'
p112121
sS'required'
p112122
I00
sS'group_name'
p112123
Nsa(dp112124
S'description'
p112125
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112126
sS'cpp_type'
p112127
S'bool'
p112128
sS'default'
p112129
S'0'
p112130
sS'name'
p112131
S'use_displaced_mesh'
p112132
sS'required'
p112133
I00
sS'group_name'
p112134
S'Advanced'
p112135
sasS'name'
p112136
S'/UserObjects/ElementIntegralMaterialProperty'
p112137
sa(dp112138
S'description'
p112139
g3
sS'subblocks'
p112140
NsS'parameters'
p112141
(lp112142
(dp112143
S'description'
p112144
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112145
sS'cpp_type'
p112146
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112147
sS'default'
p112148
g3
sS'name'
p112149
S'block'
p112150
sS'required'
p112151
I00
sS'group_name'
p112152
Nsa(dp112153
S'description'
p112154
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112155
sS'cpp_type'
p112156
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112157
sS'default'
p112158
g3
sS'name'
p112159
S'control_tags'
p112160
sS'required'
p112161
I00
sS'group_name'
p112162
Nsa(dp112163
S'name'
p112164
S'execute_on'
p112165
sS'cpp_type'
p112166
S'MultiMooseEnum'
p112167
sS'default'
p112168
S'TIMESTEP_END'
p112169
sS'description'
p112170
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112171
sS'required'
p112172
I00
sS'options'
p112173
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112174
sS'group_name'
p112175
Nsa(dp112176
S'description'
p112177
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112178
sS'cpp_type'
p112179
S'std::vector<OutputName, std::allocator<OutputName> >'
p112180
sS'default'
p112181
g3
sS'name'
p112182
S'outputs'
p112183
sS'required'
p112184
I00
sS'group_name'
p112185
S'Advanced'
p112186
sa(dp112187
S'description'
p112188
S'The seed for the master random number generator\n'
p112189
sS'cpp_type'
p112190
S'unsigned int'
p112191
sS'default'
p112192
S'0'
p112193
sS'name'
p112194
S'seed'
p112195
sS'required'
p112196
I00
sS'group_name'
p112197
S'Advanced'
p112198
sa(dp112199
S'description'
p112200
g3
sS'cpp_type'
p112201
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112202
sS'default'
p112203
S'ElementIntegralVariablePostprocessor'
p112204
sS'name'
p112205
S'type'
p112206
sS'required'
p112207
I00
sS'group_name'
p112208
Nsa(dp112209
S'description'
p112210
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112211
sS'cpp_type'
p112212
S'bool'
p112213
sS'default'
p112214
S'0'
p112215
sS'name'
p112216
S'use_displaced_mesh'
p112217
sS'required'
p112218
I00
sS'group_name'
p112219
S'Advanced'
p112220
sa(dp112221
S'description'
p112222
S'The name of the variable that this object operates on\n'
p112223
sS'cpp_type'
p112224
S'std::vector<VariableName>'
p112225
sS'default'
p112226
g3
sS'name'
p112227
S'variable'
p112228
sS'required'
p112229
I00
sS'group_name'
p112230
NsasS'name'
p112231
S'/UserObjects/ElementIntegralVariablePostprocessor'
p112232
sa(dp112233
S'description'
p112234
g3
sS'subblocks'
p112235
NsS'parameters'
p112236
(lp112237
(dp112238
S'description'
p112239
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112240
sS'cpp_type'
p112241
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112242
sS'default'
p112243
g3
sS'name'
p112244
S'block'
p112245
sS'required'
p112246
I00
sS'group_name'
p112247
Nsa(dp112248
S'description'
p112249
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112250
sS'cpp_type'
p112251
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112252
sS'default'
p112253
g3
sS'name'
p112254
S'control_tags'
p112255
sS'required'
p112256
I00
sS'group_name'
p112257
Nsa(dp112258
S'name'
p112259
S'execute_on'
p112260
sS'cpp_type'
p112261
S'MultiMooseEnum'
p112262
sS'default'
p112263
S'TIMESTEP_END'
p112264
sS'description'
p112265
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112266
sS'required'
p112267
I00
sS'options'
p112268
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112269
sS'group_name'
p112270
Nsa(dp112271
S'description'
p112272
S'The seed for the master random number generator\n'
p112273
sS'cpp_type'
p112274
S'unsigned int'
p112275
sS'default'
p112276
S'0'
p112277
sS'name'
p112278
S'seed'
p112279
sS'required'
p112280
I00
sS'group_name'
p112281
S'Advanced'
p112282
sa(dp112283
S'description'
p112284
g3
sS'cpp_type'
p112285
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112286
sS'default'
p112287
S'ElementIntegralVariableUserObject'
p112288
sS'name'
p112289
S'type'
p112290
sS'required'
p112291
I00
sS'group_name'
p112292
Nsa(dp112293
S'description'
p112294
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112295
sS'cpp_type'
p112296
S'bool'
p112297
sS'default'
p112298
S'0'
p112299
sS'name'
p112300
S'use_displaced_mesh'
p112301
sS'required'
p112302
I00
sS'group_name'
p112303
S'Advanced'
p112304
sa(dp112305
S'description'
p112306
S'The name of the variable that this object operates on\n'
p112307
sS'cpp_type'
p112308
S'std::vector<VariableName>'
p112309
sS'default'
p112310
g3
sS'name'
p112311
S'variable'
p112312
sS'required'
p112313
I00
sS'group_name'
p112314
NsasS'name'
p112315
S'/UserObjects/ElementIntegralVariableUserObject'
p112316
sa(dp112317
S'description'
p112318
g3
sS'subblocks'
p112319
NsS'parameters'
p112320
(lp112321
(dp112322
S'description'
p112323
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112324
sS'cpp_type'
p112325
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112326
sS'default'
p112327
g3
sS'name'
p112328
S'block'
p112329
sS'required'
p112330
I00
sS'group_name'
p112331
Nsa(dp112332
S'description'
p112333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112334
sS'cpp_type'
p112335
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112336
sS'default'
p112337
g3
sS'name'
p112338
S'control_tags'
p112339
sS'required'
p112340
I00
sS'group_name'
p112341
Nsa(dp112342
S'name'
p112343
S'execute_on'
p112344
sS'cpp_type'
p112345
S'MultiMooseEnum'
p112346
sS'default'
p112347
S'TIMESTEP_END'
p112348
sS'description'
p112349
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112350
sS'required'
p112351
I00
sS'options'
p112352
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112353
sS'group_name'
p112354
Nsa(dp112355
S'description'
p112356
S'The variable to compare to\n'
p112357
sS'cpp_type'
p112358
S'std::vector<VariableName>'
p112359
sS'default'
p112360
g3
sS'name'
p112361
S'other_variable'
p112362
sS'required'
p112363
I01
sS'group_name'
p112364
Nsa(dp112365
S'description'
p112366
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112367
sS'cpp_type'
p112368
S'std::vector<OutputName, std::allocator<OutputName> >'
p112369
sS'default'
p112370
g3
sS'name'
p112371
S'outputs'
p112372
sS'required'
p112373
I00
sS'group_name'
p112374
S'Advanced'
p112375
sa(dp112376
S'description'
p112377
S'The seed for the master random number generator\n'
p112378
sS'cpp_type'
p112379
S'unsigned int'
p112380
sS'default'
p112381
S'0'
p112382
sS'name'
p112383
S'seed'
p112384
sS'required'
p112385
I00
sS'group_name'
p112386
S'Advanced'
p112387
sa(dp112388
S'description'
p112389
g3
sS'cpp_type'
p112390
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112391
sS'default'
p112392
S'ElementL2Difference'
p112393
sS'name'
p112394
S'type'
p112395
sS'required'
p112396
I00
sS'group_name'
p112397
Nsa(dp112398
S'description'
p112399
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112400
sS'cpp_type'
p112401
S'bool'
p112402
sS'default'
p112403
S'0'
p112404
sS'name'
p112405
S'use_displaced_mesh'
p112406
sS'required'
p112407
I00
sS'group_name'
p112408
S'Advanced'
p112409
sa(dp112410
S'description'
p112411
S'The name of the variable that this object operates on\n'
p112412
sS'cpp_type'
p112413
S'std::vector<VariableName>'
p112414
sS'default'
p112415
g3
sS'name'
p112416
S'variable'
p112417
sS'required'
p112418
I00
sS'group_name'
p112419
NsasS'name'
p112420
S'/UserObjects/ElementL2Difference'
p112421
sa(dp112422
S'description'
p112423
g3
sS'subblocks'
p112424
NsS'parameters'
p112425
(lp112426
(dp112427
S'description'
p112428
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112429
sS'cpp_type'
p112430
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112431
sS'default'
p112432
g3
sS'name'
p112433
S'block'
p112434
sS'required'
p112435
I00
sS'group_name'
p112436
Nsa(dp112437
S'description'
p112438
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112439
sS'cpp_type'
p112440
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112441
sS'default'
p112442
g3
sS'name'
p112443
S'control_tags'
p112444
sS'required'
p112445
I00
sS'group_name'
p112446
Nsa(dp112447
S'name'
p112448
S'execute_on'
p112449
sS'cpp_type'
p112450
S'MultiMooseEnum'
p112451
sS'default'
p112452
S'TIMESTEP_END'
p112453
sS'description'
p112454
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112455
sS'required'
p112456
I00
sS'options'
p112457
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112458
sS'group_name'
p112459
Nsa(dp112460
S'description'
p112461
S'The analytic solution to compare against\n'
p112462
sS'cpp_type'
p112463
S'FunctionName'
p112464
sS'default'
p112465
g3
sS'name'
p112466
S'function'
p112467
sS'required'
p112468
I01
sS'group_name'
p112469
Nsa(dp112470
S'description'
p112471
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112472
sS'cpp_type'
p112473
S'std::vector<OutputName, std::allocator<OutputName> >'
p112474
sS'default'
p112475
g3
sS'name'
p112476
S'outputs'
p112477
sS'required'
p112478
I00
sS'group_name'
p112479
S'Advanced'
p112480
sa(dp112481
S'description'
p112482
S'The seed for the master random number generator\n'
p112483
sS'cpp_type'
p112484
S'unsigned int'
p112485
sS'default'
p112486
S'0'
p112487
sS'name'
p112488
S'seed'
p112489
sS'required'
p112490
I00
sS'group_name'
p112491
S'Advanced'
p112492
sa(dp112493
S'description'
p112494
g3
sS'cpp_type'
p112495
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112496
sS'default'
p112497
S'ElementL2Error'
p112498
sS'name'
p112499
S'type'
p112500
sS'required'
p112501
I00
sS'group_name'
p112502
Nsa(dp112503
S'description'
p112504
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112505
sS'cpp_type'
p112506
S'bool'
p112507
sS'default'
p112508
S'0'
p112509
sS'name'
p112510
S'use_displaced_mesh'
p112511
sS'required'
p112512
I00
sS'group_name'
p112513
S'Advanced'
p112514
sa(dp112515
S'description'
p112516
S'The name of the variable that this object operates on\n'
p112517
sS'cpp_type'
p112518
S'std::vector<VariableName>'
p112519
sS'default'
p112520
g3
sS'name'
p112521
S'variable'
p112522
sS'required'
p112523
I00
sS'group_name'
p112524
NsasS'name'
p112525
S'/UserObjects/ElementL2Error'
p112526
sa(dp112527
S'description'
p112528
g3
sS'subblocks'
p112529
NsS'parameters'
p112530
(lp112531
(dp112532
S'description'
p112533
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112534
sS'cpp_type'
p112535
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112536
sS'default'
p112537
g3
sS'name'
p112538
S'block'
p112539
sS'required'
p112540
I00
sS'group_name'
p112541
Nsa(dp112542
S'description'
p112543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112544
sS'cpp_type'
p112545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112546
sS'default'
p112547
g3
sS'name'
p112548
S'control_tags'
p112549
sS'required'
p112550
I00
sS'group_name'
p112551
Nsa(dp112552
S'name'
p112553
S'execute_on'
p112554
sS'cpp_type'
p112555
S'MultiMooseEnum'
p112556
sS'default'
p112557
S'TIMESTEP_END'
p112558
sS'description'
p112559
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112560
sS'required'
p112561
I00
sS'options'
p112562
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112563
sS'group_name'
p112564
Nsa(dp112565
S'description'
p112566
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112567
sS'cpp_type'
p112568
S'std::vector<OutputName, std::allocator<OutputName> >'
p112569
sS'default'
p112570
g3
sS'name'
p112571
S'outputs'
p112572
sS'required'
p112573
I00
sS'group_name'
p112574
S'Advanced'
p112575
sa(dp112576
S'description'
p112577
S'The seed for the master random number generator\n'
p112578
sS'cpp_type'
p112579
S'unsigned int'
p112580
sS'default'
p112581
S'0'
p112582
sS'name'
p112583
S'seed'
p112584
sS'required'
p112585
I00
sS'group_name'
p112586
S'Advanced'
p112587
sa(dp112588
S'description'
p112589
g3
sS'cpp_type'
p112590
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112591
sS'default'
p112592
S'ElementL2Norm'
p112593
sS'name'
p112594
S'type'
p112595
sS'required'
p112596
I00
sS'group_name'
p112597
Nsa(dp112598
S'description'
p112599
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112600
sS'cpp_type'
p112601
S'bool'
p112602
sS'default'
p112603
S'0'
p112604
sS'name'
p112605
S'use_displaced_mesh'
p112606
sS'required'
p112607
I00
sS'group_name'
p112608
S'Advanced'
p112609
sa(dp112610
S'description'
p112611
S'The name of the variable that this object operates on\n'
p112612
sS'cpp_type'
p112613
S'std::vector<VariableName>'
p112614
sS'default'
p112615
g3
sS'name'
p112616
S'variable'
p112617
sS'required'
p112618
I00
sS'group_name'
p112619
NsasS'name'
p112620
S'/UserObjects/ElementL2Norm'
p112621
sa(dp112622
S'description'
p112623
S'User Object to read property data from an external file and assign to elements: Works only for Rectangular geometry (2D-3D)\n'
p112624
sS'subblocks'
p112625
NsS'parameters'
p112626
(lp112627
(dp112628
S'description'
p112629
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112630
sS'cpp_type'
p112631
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112632
sS'default'
p112633
g3
sS'name'
p112634
S'control_tags'
p112635
sS'required'
p112636
I00
sS'group_name'
p112637
Nsa(dp112638
S'name'
p112639
S'execute_on'
p112640
sS'cpp_type'
p112641
S'MultiMooseEnum'
p112642
sS'default'
p112643
S'TIMESTEP_END'
p112644
sS'description'
p112645
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112646
sS'required'
p112647
I00
sS'options'
p112648
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112649
sS'group_name'
p112650
Nsa(dp112651
S'description'
p112652
S'Number of grains\n'
p112653
sS'cpp_type'
p112654
S'unsigned int'
p112655
sS'default'
p112656
S'0'
p112657
sS'name'
p112658
S'ngrain'
p112659
sS'required'
p112660
I00
sS'group_name'
p112661
Nsa(dp112662
S'description'
p112663
S'Number of tabulated property values\n'
p112664
sS'cpp_type'
p112665
S'unsigned int'
p112666
sS'default'
p112667
g3
sS'name'
p112668
S'nprop'
p112669
sS'required'
p112670
I01
sS'group_name'
p112671
Nsa(dp112672
S'description'
p112673
S'Name of the property file name\n'
p112674
sS'cpp_type'
p112675
S'FileName'
p112676
sS'default'
p112677
g3
sS'name'
p112678
S'prop_file_name'
p112679
sS'required'
p112680
I00
sS'group_name'
p112681
Nsa(dp112682
S'description'
p112683
S'random seed\n'
p112684
sS'cpp_type'
p112685
S'unsigned int'
p112686
sS'default'
p112687
S'2000'
p112688
sS'name'
p112689
S'rand_seed'
p112690
sS'required'
p112691
I00
sS'group_name'
p112692
Nsa(dp112693
S'name'
p112694
S'read_type'
p112695
sS'cpp_type'
p112696
S'MooseEnum'
p112697
sS'default'
p112698
S'none'
p112699
sS'description'
p112700
S'Type of property distribution: element:element by element property variation; grain:voronoi grain structure\n'
p112701
sS'required'
p112702
I00
sS'options'
p112703
S'element grain none'
p112704
sS'group_name'
p112705
Nsa(dp112706
S'name'
p112707
S'rve_type'
p112708
sS'cpp_type'
p112709
S'MooseEnum'
p112710
sS'default'
p112711
S'none'
p112712
sS'description'
p112713
S'Periodic or non-periodic grain distribution: Default is non-periodic\n'
p112714
sS'required'
p112715
I00
sS'options'
p112716
S'periodic none'
p112717
sS'group_name'
p112718
Nsa(dp112719
S'description'
p112720
g3
sS'cpp_type'
p112721
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112722
sS'default'
p112723
S'ElementPropertyReadFile'
p112724
sS'name'
p112725
S'type'
p112726
sS'required'
p112727
I00
sS'group_name'
p112728
Nsa(dp112729
S'description'
p112730
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112731
sS'cpp_type'
p112732
S'bool'
p112733
sS'default'
p112734
S'0'
p112735
sS'name'
p112736
S'use_displaced_mesh'
p112737
sS'required'
p112738
I00
sS'group_name'
p112739
S'Advanced'
p112740
sasS'name'
p112741
S'/UserObjects/ElementPropertyReadFile'
p112742
sa(dp112743
S'description'
p112744
g3
sS'subblocks'
p112745
NsS'parameters'
p112746
(lp112747
(dp112748
S'description'
p112749
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112750
sS'cpp_type'
p112751
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112752
sS'default'
p112753
g3
sS'name'
p112754
S'block'
p112755
sS'required'
p112756
I00
sS'group_name'
p112757
Nsa(dp112758
S'description'
p112759
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112760
sS'cpp_type'
p112761
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112762
sS'default'
p112763
g3
sS'name'
p112764
S'control_tags'
p112765
sS'required'
p112766
I00
sS'group_name'
p112767
Nsa(dp112768
S'name'
p112769
S'execute_on'
p112770
sS'cpp_type'
p112771
S'MultiMooseEnum'
p112772
sS'default'
p112773
S'TIMESTEP_END'
p112774
sS'description'
p112775
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112776
sS'required'
p112777
I00
sS'options'
p112778
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112779
sS'group_name'
p112780
Nsa(dp112781
S'description'
p112782
S'The analytic solution to compare against\n'
p112783
sS'cpp_type'
p112784
S'FunctionName'
p112785
sS'default'
p112786
g3
sS'name'
p112787
S'function_x'
p112788
sS'required'
p112789
I01
sS'group_name'
p112790
Nsa(dp112791
S'description'
p112792
S'The analytic solution to compare against\n'
p112793
sS'cpp_type'
p112794
S'FunctionName'
p112795
sS'default'
p112796
S'0'
p112797
sS'name'
p112798
S'function_y'
p112799
sS'required'
p112800
I00
sS'group_name'
p112801
Nsa(dp112802
S'description'
p112803
S'The analytic solution to compare against\n'
p112804
sS'cpp_type'
p112805
S'FunctionName'
p112806
sS'default'
p112807
S'0'
p112808
sS'name'
p112809
S'function_z'
p112810
sS'required'
p112811
I00
sS'group_name'
p112812
Nsa(dp112813
S'description'
p112814
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112815
sS'cpp_type'
p112816
S'std::vector<OutputName, std::allocator<OutputName> >'
p112817
sS'default'
p112818
g3
sS'name'
p112819
S'outputs'
p112820
sS'required'
p112821
I00
sS'group_name'
p112822
S'Advanced'
p112823
sa(dp112824
S'description'
p112825
S'The seed for the master random number generator\n'
p112826
sS'cpp_type'
p112827
S'unsigned int'
p112828
sS'default'
p112829
S'0'
p112830
sS'name'
p112831
S'seed'
p112832
sS'required'
p112833
I00
sS'group_name'
p112834
S'Advanced'
p112835
sa(dp112836
S'description'
p112837
g3
sS'cpp_type'
p112838
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112839
sS'default'
p112840
S'ElementVectorL2Error'
p112841
sS'name'
p112842
S'type'
p112843
sS'required'
p112844
I00
sS'group_name'
p112845
Nsa(dp112846
S'description'
p112847
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112848
sS'cpp_type'
p112849
S'bool'
p112850
sS'default'
p112851
S'0'
p112852
sS'name'
p112853
S'use_displaced_mesh'
p112854
sS'required'
p112855
I00
sS'group_name'
p112856
S'Advanced'
p112857
sa(dp112858
S'description'
p112859
S'The FE solution in x direction\n'
p112860
sS'cpp_type'
p112861
S'std::vector<VariableName>'
p112862
sS'default'
p112863
g3
sS'name'
p112864
S'var_x'
p112865
sS'required'
p112866
I01
sS'group_name'
p112867
Nsa(dp112868
S'description'
p112869
S'The FE solution in y direction\n'
p112870
sS'cpp_type'
p112871
S'std::vector<VariableName>'
p112872
sS'default'
p112873
S'0'
p112874
sS'name'
p112875
S'var_y'
p112876
sS'required'
p112877
I00
sS'group_name'
p112878
Nsa(dp112879
S'description'
p112880
S'The FE solution in z direction\n'
p112881
sS'cpp_type'
p112882
S'std::vector<VariableName>'
p112883
sS'default'
p112884
S'0'
p112885
sS'name'
p112886
S'var_z'
p112887
sS'required'
p112888
I00
sS'group_name'
p112889
NsasS'name'
p112890
S'/UserObjects/ElementVectorL2Error'
p112891
sa(dp112892
S'description'
p112893
g3
sS'subblocks'
p112894
NsS'parameters'
p112895
(lp112896
(dp112897
S'description'
p112898
S'The list of block ids (SubdomainID) that this object will be applied\n'
p112899
sS'cpp_type'
p112900
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p112901
sS'default'
p112902
g3
sS'name'
p112903
S'block'
p112904
sS'required'
p112905
I00
sS'group_name'
p112906
Nsa(dp112907
S'description'
p112908
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p112909
sS'cpp_type'
p112910
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p112911
sS'default'
p112912
g3
sS'name'
p112913
S'control_tags'
p112914
sS'required'
p112915
I00
sS'group_name'
p112916
Nsa(dp112917
S'name'
p112918
S'execute_on'
p112919
sS'cpp_type'
p112920
S'MultiMooseEnum'
p112921
sS'default'
p112922
S'TIMESTEP_END'
p112923
sS'description'
p112924
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p112925
sS'required'
p112926
I00
sS'options'
p112927
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p112928
sS'group_name'
p112929
Nsa(dp112930
S'description'
p112931
S'The analytic solution to compare against\n'
p112932
sS'cpp_type'
p112933
S'FunctionName'
p112934
sS'default'
p112935
g3
sS'name'
p112936
S'function'
p112937
sS'required'
p112938
I01
sS'group_name'
p112939
Nsa(dp112940
S'description'
p112941
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p112942
sS'cpp_type'
p112943
S'std::vector<OutputName, std::allocator<OutputName> >'
p112944
sS'default'
p112945
g3
sS'name'
p112946
S'outputs'
p112947
sS'required'
p112948
I00
sS'group_name'
p112949
S'Advanced'
p112950
sa(dp112951
S'description'
p112952
S'The exponent used in the norm.\n'
p112953
sS'cpp_type'
p112954
S'double'
p112955
sS'default'
p112956
S'2'
p112957
sS'name'
p112958
S'p'
p112959
sS'required'
p112960
I00
sS'group_name'
p112961
Nsa(dp112962
S'description'
p112963
S'The seed for the master random number generator\n'
p112964
sS'cpp_type'
p112965
S'unsigned int'
p112966
sS'default'
p112967
S'0'
p112968
sS'name'
p112969
S'seed'
p112970
sS'required'
p112971
I00
sS'group_name'
p112972
S'Advanced'
p112973
sa(dp112974
S'description'
p112975
g3
sS'cpp_type'
p112976
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p112977
sS'default'
p112978
S'ElementW1pError'
p112979
sS'name'
p112980
S'type'
p112981
sS'required'
p112982
I00
sS'group_name'
p112983
Nsa(dp112984
S'description'
p112985
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p112986
sS'cpp_type'
p112987
S'bool'
p112988
sS'default'
p112989
S'0'
p112990
sS'name'
p112991
S'use_displaced_mesh'
p112992
sS'required'
p112993
I00
sS'group_name'
p112994
S'Advanced'
p112995
sa(dp112996
S'description'
p112997
S'The name of the variable that this object operates on\n'
p112998
sS'cpp_type'
p112999
S'std::vector<VariableName>'
p113000
sS'default'
p113001
g3
sS'name'
p113002
S'variable'
p113003
sS'required'
p113004
I00
sS'group_name'
p113005
NsasS'name'
p113006
S'/UserObjects/ElementW1pError'
p113007
sa(dp113008
S'description'
p113009
g3
sS'subblocks'
p113010
NsS'parameters'
p113011
(lp113012
(dp113013
S'description'
p113014
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113015
sS'cpp_type'
p113016
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113017
sS'default'
p113018
g3
sS'name'
p113019
S'control_tags'
p113020
sS'required'
p113021
I00
sS'group_name'
p113022
Nsa(dp113023
S'description'
p113024
S'The ID of the element where we monitor\n'
p113025
sS'cpp_type'
p113026
S'unsigned int'
p113027
sS'default'
p113028
g3
sS'name'
p113029
S'elementid'
p113030
sS'required'
p113031
I01
sS'group_name'
p113032
Nsa(dp113033
S'name'
p113034
S'execute_on'
p113035
sS'cpp_type'
p113036
S'MultiMooseEnum'
p113037
sS'default'
p113038
S'TIMESTEP_END'
p113039
sS'description'
p113040
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113041
sS'required'
p113042
I00
sS'options'
p113043
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113044
sS'group_name'
p113045
Nsa(dp113046
S'description'
p113047
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113048
sS'cpp_type'
p113049
S'std::vector<OutputName, std::allocator<OutputName> >'
p113050
sS'default'
p113051
g3
sS'name'
p113052
S'outputs'
p113053
sS'required'
p113054
I00
sS'group_name'
p113055
S'Advanced'
p113056
sa(dp113057
S'description'
p113058
g3
sS'cpp_type'
p113059
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113060
sS'default'
p113061
S'ElementalVariableValue'
p113062
sS'name'
p113063
S'type'
p113064
sS'required'
p113065
I00
sS'group_name'
p113066
Nsa(dp113067
S'description'
p113068
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113069
sS'cpp_type'
p113070
S'bool'
p113071
sS'default'
p113072
S'0'
p113073
sS'name'
p113074
S'use_displaced_mesh'
p113075
sS'required'
p113076
I00
sS'group_name'
p113077
S'Advanced'
p113078
sa(dp113079
S'description'
p113080
S'The variable to be monitored\n'
p113081
sS'cpp_type'
p113082
S'VariableName'
p113083
sS'default'
p113084
g3
sS'name'
p113085
S'variable'
p113086
sS'required'
p113087
I01
sS'group_name'
p113088
NsasS'name'
p113089
S'/UserObjects/ElementalVariableValue'
p113090
sa(dp113091
S'description'
p113092
g3
sS'subblocks'
p113093
NsS'parameters'
p113094
(lp113095
(dp113096
S'description'
p113097
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113098
sS'cpp_type'
p113099
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113100
sS'default'
p113101
g3
sS'name'
p113102
S'control_tags'
p113103
sS'required'
p113104
I00
sS'group_name'
p113105
Nsa(dp113106
S'name'
p113107
S'execute_on'
p113108
sS'cpp_type'
p113109
S'MultiMooseEnum'
p113110
sS'default'
p113111
S'TIMESTEP_END'
p113112
sS'description'
p113113
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113114
sS'required'
p113115
I00
sS'options'
p113116
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113117
sS'group_name'
p113118
Nsa(dp113119
S'description'
p113120
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113121
sS'cpp_type'
p113122
S'std::vector<OutputName, std::allocator<OutputName> >'
p113123
sS'default'
p113124
g3
sS'name'
p113125
S'outputs'
p113126
sS'required'
p113127
I00
sS'group_name'
p113128
S'Advanced'
p113129
sa(dp113130
S'description'
p113131
g3
sS'cpp_type'
p113132
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113133
sS'default'
p113134
S'EmptyPostprocessor'
p113135
sS'name'
p113136
S'type'
p113137
sS'required'
p113138
I00
sS'group_name'
p113139
Nsa(dp113140
S'description'
p113141
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113142
sS'cpp_type'
p113143
S'bool'
p113144
sS'default'
p113145
S'0'
p113146
sS'name'
p113147
S'use_displaced_mesh'
p113148
sS'required'
p113149
I00
sS'group_name'
p113150
S'Advanced'
p113151
sasS'name'
p113152
S'/UserObjects/EmptyPostprocessor'
p113153
sa(dp113154
S'description'
p113155
S'Read Euler angle data from a file and provide it to other objects.\n'
p113156
sS'subblocks'
p113157
NsS'parameters'
p113158
(lp113159
(dp113160
S'description'
p113161
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113162
sS'cpp_type'
p113163
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113164
sS'default'
p113165
g3
sS'name'
p113166
S'control_tags'
p113167
sS'required'
p113168
I00
sS'group_name'
p113169
Nsa(dp113170
S'name'
p113171
S'execute_on'
p113172
sS'cpp_type'
p113173
S'MultiMooseEnum'
p113174
sS'default'
p113175
S'TIMESTEP_END'
p113176
sS'description'
p113177
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113178
sS'required'
p113179
I00
sS'options'
p113180
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113181
sS'group_name'
p113182
Nsa(dp113183
S'description'
p113184
S'Euler angle data file name\n'
p113185
sS'cpp_type'
p113186
S'FileName'
p113187
sS'default'
p113188
g3
sS'name'
p113189
S'file_name'
p113190
sS'required'
p113191
I01
sS'group_name'
p113192
Nsa(dp113193
S'description'
p113194
g3
sS'cpp_type'
p113195
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113196
sS'default'
p113197
S'EulerAngleFileReader'
p113198
sS'name'
p113199
S'type'
p113200
sS'required'
p113201
I00
sS'group_name'
p113202
Nsa(dp113203
S'description'
p113204
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113205
sS'cpp_type'
p113206
S'bool'
p113207
sS'default'
p113208
S'0'
p113209
sS'name'
p113210
S'use_displaced_mesh'
p113211
sS'required'
p113212
I00
sS'group_name'
p113213
S'Advanced'
p113214
sasS'name'
p113215
S'/UserObjects/EulerAngleFileReader'
p113216
sa(dp113217
S'description'
p113218
g3
sS'subblocks'
p113219
NsS'parameters'
p113220
(lp113221
(dp113222
S'description'
p113223
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113224
sS'cpp_type'
p113225
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113226
sS'default'
p113227
g3
sS'name'
p113228
S'control_tags'
p113229
sS'required'
p113230
I00
sS'group_name'
p113231
Nsa(dp113232
S'name'
p113233
S'execute_on'
p113234
sS'cpp_type'
p113235
S'MultiMooseEnum'
p113236
sS'default'
p113237
S'TIMESTEP_END'
p113238
sS'description'
p113239
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113240
sS'required'
p113241
I00
sS'options'
p113242
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113243
sS'group_name'
p113244
Nsa(dp113245
S'description'
p113246
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113247
sS'cpp_type'
p113248
S'std::vector<OutputName, std::allocator<OutputName> >'
p113249
sS'default'
p113250
g3
sS'name'
p113251
S'outputs'
p113252
sS'required'
p113253
I00
sS'group_name'
p113254
S'Advanced'
p113255
sa(dp113256
S'description'
p113257
g3
sS'cpp_type'
p113258
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113259
sS'default'
p113260
S'ExecutionerAttributeReporter'
p113261
sS'name'
p113262
S'type'
p113263
sS'required'
p113264
I00
sS'group_name'
p113265
Nsa(dp113266
S'description'
p113267
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113268
sS'cpp_type'
p113269
S'bool'
p113270
sS'default'
p113271
S'0'
p113272
sS'name'
p113273
S'use_displaced_mesh'
p113274
sS'required'
p113275
I00
sS'group_name'
p113276
S'Advanced'
p113277
sasS'name'
p113278
S'/UserObjects/ExecutionerAttributeReporter'
p113279
sa(dp113280
S'description'
p113281
S'Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n'
p113282
sS'subblocks'
p113283
NsS'parameters'
p113284
(lp113285
(dp113286
S'description'
p113287
S'An optional file name where bubble volumes can be output.\n'
p113288
sS'cpp_type'
p113289
S'FileName'
p113290
sS'default'
p113291
g3
sS'name'
p113292
S'bubble_volume_file'
p113293
sS'required'
p113294
I00
sS'group_name'
p113295
Nsa(dp113296
S'description'
p113297
S'Indicates whether the grain tracker uses bounding sphere centersor center of mass calculations for tracking grains\n'
p113298
sS'cpp_type'
p113299
S'bool'
p113300
sS'default'
p113301
S'0'
p113302
sS'name'
p113303
S'center_of_mass_tracking'
p113304
sS'required'
p113305
I00
sS'group_name'
p113306
Nsa(dp113307
S'description'
p113308
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p113309
sS'cpp_type'
p113310
S'bool'
p113311
sS'default'
p113312
S'0'
p113313
sS'name'
p113314
S'compute_boundary_intersecting_volume'
p113315
sS'required'
p113316
I00
sS'group_name'
p113317
Nsa(dp113318
S'description'
p113319
S'Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n'
p113320
sS'cpp_type'
p113321
S'bool'
p113322
sS'default'
p113323
S'0'
p113324
sS'name'
p113325
S'compute_op_maps'
p113326
sS'required'
p113327
I00
sS'group_name'
p113328
Nsa(dp113329
S'description'
p113330
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p113331
sS'cpp_type'
p113332
S'bool'
p113333
sS'default'
p113334
S'0'
p113335
sS'name'
p113336
S'condense_map_info'
p113337
sS'required'
p113338
I00
sS'group_name'
p113339
Nsa(dp113340
S'description'
p113341
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p113342
sS'cpp_type'
p113343
S'double'
p113344
sS'default'
p113345
g3
sS'name'
p113346
S'connecting_threshold'
p113347
sS'required'
p113348
I00
sS'group_name'
p113349
Nsa(dp113350
S'description'
p113351
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113352
sS'cpp_type'
p113353
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113354
sS'default'
p113355
g3
sS'name'
p113356
S'control_tags'
p113357
sS'required'
p113358
I00
sS'group_name'
p113359
Nsa(dp113360
S'description'
p113361
S'The buffer around the convex hull used to determinewhen features intersect\n'
p113362
sS'cpp_type'
p113363
S'double'
p113364
sS'default'
p113365
S'1'
p113366
sS'name'
p113367
S'convex_hull_buffer'
p113368
sS'required'
p113369
I00
sS'group_name'
p113370
Nsa(dp113371
S'description'
p113372
S'Optional: EBSD Reader for initial condition\n'
p113373
sS'cpp_type'
p113374
S'UserObjectName'
p113375
sS'default'
p113376
g3
sS'name'
p113377
S'ebsd_reader'
p113378
sS'required'
p113379
I00
sS'group_name'
p113380
Nsa(dp113381
S'description'
p113382
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p113383
sS'cpp_type'
p113384
S'PostprocessorName'
p113385
sS'default'
p113386
g3
sS'name'
p113387
S'elem_avg_value'
p113388
sS'required'
p113389
I00
sS'group_name'
p113390
Nsa(dp113391
S'description'
p113392
S'Instruct the UO to populate the variable index map.\n'
p113393
sS'cpp_type'
p113394
S'bool'
p113395
sS'default'
p113396
S'0'
p113397
sS'name'
p113398
S'enable_var_coloring'
p113399
sS'required'
p113400
I00
sS'group_name'
p113401
Nsa(dp113402
S'name'
p113403
S'execute_on'
p113404
sS'cpp_type'
p113405
S'MultiMooseEnum'
p113406
sS'default'
p113407
S'TIMESTEP_END'
p113408
sS'description'
p113409
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113410
sS'required'
p113411
I00
sS'options'
p113412
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113413
sS'group_name'
p113414
Nsa(dp113415
S'name'
p113416
S'flood_entity_type'
p113417
sS'cpp_type'
p113418
S'MooseEnum'
p113419
sS'default'
p113420
S'NODAL'
p113421
sS'description'
p113422
S'Determines whether the flood algorithm runs on nodes or elements\n'
p113423
sS'required'
p113424
I00
sS'options'
p113425
S'NODAL ELEMENTAL'
p113426
sS'group_name'
p113427
Nsa(dp113428
S'description'
p113429
S'Array of coupled variables (num_name)\n'
p113430
sS'cpp_type'
p113431
S'unsigned int'
p113432
sS'default'
p113433
g3
sS'name'
p113434
S'op_num'
p113435
sS'required'
p113436
I00
sS'group_name'
p113437
Nsa(dp113438
S'description'
p113439
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113440
sS'cpp_type'
p113441
S'std::vector<OutputName, std::allocator<OutputName> >'
p113442
sS'default'
p113443
g3
sS'name'
p113444
S'outputs'
p113445
sS'required'
p113446
I00
sS'group_name'
p113447
S'Advanced'
p113448
sa(dp113449
S'description'
p113450
S'Indicates whether remapping should be done or not (default: true)\n'
p113451
sS'cpp_type'
p113452
S'bool'
p113453
sS'default'
p113454
S'1'
p113455
sS'name'
p113456
S'remap_grains'
p113457
sS'required'
p113458
I00
sS'group_name'
p113459
Nsa(dp113460
S'description'
p113461
S'The threshold value for which a new bubble may be started\n'
p113462
sS'cpp_type'
p113463
S'double'
p113464
sS'default'
p113465
S'0.5'
p113466
sS'name'
p113467
S'threshold'
p113468
sS'required'
p113469
I00
sS'group_name'
p113470
Nsa(dp113471
S'description'
p113472
S'Calculate memory usage\n'
p113473
sS'cpp_type'
p113474
S'bool'
p113475
sS'default'
p113476
S'0'
p113477
sS'name'
p113478
S'track_memory_usage'
p113479
sS'required'
p113480
I00
sS'group_name'
p113481
Nsa(dp113482
S'description'
p113483
S'The timestep for when we should start tracking grains\n'
p113484
sS'cpp_type'
p113485
S'int'
p113486
sS'default'
p113487
S'0'
p113488
sS'name'
p113489
S'tracking_step'
p113490
sS'required'
p113491
I00
sS'group_name'
p113492
Nsa(dp113493
S'description'
p113494
g3
sS'cpp_type'
p113495
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113496
sS'default'
p113497
S'FauxGrainTracker'
p113498
sS'name'
p113499
S'type'
p113500
sS'required'
p113501
I00
sS'group_name'
p113502
Nsa(dp113503
S'description'
p113504
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113505
sS'cpp_type'
p113506
S'bool'
p113507
sS'default'
p113508
S'0'
p113509
sS'name'
p113510
S'use_displaced_mesh'
p113511
sS'required'
p113512
I00
sS'group_name'
p113513
S'Advanced'
p113514
sa(dp113515
S'description'
p113516
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p113517
sS'cpp_type'
p113518
S'bool'
p113519
sS'default'
p113520
S'0'
p113521
sS'name'
p113522
S'use_global_numbering'
p113523
sS'required'
p113524
I00
sS'group_name'
p113525
Nsa(dp113526
S'description'
p113527
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p113528
sS'cpp_type'
p113529
S'bool'
p113530
sS'default'
p113531
S'1'
p113532
sS'name'
p113533
S'use_less_than_threshold_comparison'
p113534
sS'required'
p113535
I00
sS'group_name'
p113536
Nsa(dp113537
S'description'
p113538
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p113539
sS'cpp_type'
p113540
S'bool'
p113541
sS'default'
p113542
S'1'
p113543
sS'name'
p113544
S'use_single_map'
p113545
sS'required'
p113546
I00
sS'group_name'
p113547
Nsa(dp113548
S'description'
p113549
S'Array of coupled variables (base_name)\n'
p113550
sS'cpp_type'
p113551
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113552
sS'default'
p113553
g3
sS'name'
p113554
S'var_name_base'
p113555
sS'required'
p113556
I00
sS'group_name'
p113557
NsasS'name'
p113558
S'/UserObjects/FauxGrainTracker'
p113559
sa(dp113560
S'description'
p113561
g3
sS'subblocks'
p113562
NsS'parameters'
p113563
(lp113564
(dp113565
S'description'
p113566
S'An optional file name where bubble volumes can be output.\n'
p113567
sS'cpp_type'
p113568
S'FileName'
p113569
sS'default'
p113570
g3
sS'name'
p113571
S'bubble_volume_file'
p113572
sS'required'
p113573
I00
sS'group_name'
p113574
Nsa(dp113575
S'description'
p113576
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p113577
sS'cpp_type'
p113578
S'bool'
p113579
sS'default'
p113580
S'0'
p113581
sS'name'
p113582
S'compute_boundary_intersecting_volume'
p113583
sS'required'
p113584
I00
sS'group_name'
p113585
Nsa(dp113586
S'description'
p113587
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p113588
sS'cpp_type'
p113589
S'bool'
p113590
sS'default'
p113591
S'0'
p113592
sS'name'
p113593
S'condense_map_info'
p113594
sS'required'
p113595
I00
sS'group_name'
p113596
Nsa(dp113597
S'description'
p113598
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p113599
sS'cpp_type'
p113600
S'double'
p113601
sS'default'
p113602
g3
sS'name'
p113603
S'connecting_threshold'
p113604
sS'required'
p113605
I00
sS'group_name'
p113606
Nsa(dp113607
S'description'
p113608
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113609
sS'cpp_type'
p113610
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113611
sS'default'
p113612
g3
sS'name'
p113613
S'control_tags'
p113614
sS'required'
p113615
I00
sS'group_name'
p113616
Nsa(dp113617
S'description'
p113618
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p113619
sS'cpp_type'
p113620
S'PostprocessorName'
p113621
sS'default'
p113622
g3
sS'name'
p113623
S'elem_avg_value'
p113624
sS'required'
p113625
I00
sS'group_name'
p113626
Nsa(dp113627
S'description'
p113628
S'Instruct the UO to populate the variable index map.\n'
p113629
sS'cpp_type'
p113630
S'bool'
p113631
sS'default'
p113632
S'0'
p113633
sS'name'
p113634
S'enable_var_coloring'
p113635
sS'required'
p113636
I00
sS'group_name'
p113637
Nsa(dp113638
S'name'
p113639
S'execute_on'
p113640
sS'cpp_type'
p113641
S'MultiMooseEnum'
p113642
sS'default'
p113643
S'TIMESTEP_END'
p113644
sS'description'
p113645
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113646
sS'required'
p113647
I00
sS'options'
p113648
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113649
sS'group_name'
p113650
Nsa(dp113651
S'name'
p113652
S'flood_entity_type'
p113653
sS'cpp_type'
p113654
S'MooseEnum'
p113655
sS'default'
p113656
S'NODAL'
p113657
sS'description'
p113658
S'Determines whether the flood algorithm runs on nodes or elements\n'
p113659
sS'required'
p113660
I00
sS'options'
p113661
S'NODAL ELEMENTAL'
p113662
sS'group_name'
p113663
Nsa(dp113664
S'description'
p113665
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113666
sS'cpp_type'
p113667
S'std::vector<OutputName, std::allocator<OutputName> >'
p113668
sS'default'
p113669
g3
sS'name'
p113670
S'outputs'
p113671
sS'required'
p113672
I00
sS'group_name'
p113673
S'Advanced'
p113674
sa(dp113675
S'description'
p113676
S'The threshold value for which a new bubble may be started\n'
p113677
sS'cpp_type'
p113678
S'double'
p113679
sS'default'
p113680
S'0.5'
p113681
sS'name'
p113682
S'threshold'
p113683
sS'required'
p113684
I00
sS'group_name'
p113685
Nsa(dp113686
S'description'
p113687
S'Calculate memory usage\n'
p113688
sS'cpp_type'
p113689
S'bool'
p113690
sS'default'
p113691
S'0'
p113692
sS'name'
p113693
S'track_memory_usage'
p113694
sS'required'
p113695
I00
sS'group_name'
p113696
Nsa(dp113697
S'description'
p113698
g3
sS'cpp_type'
p113699
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113700
sS'default'
p113701
S'FeatureFloodCount'
p113702
sS'name'
p113703
S'type'
p113704
sS'required'
p113705
I00
sS'group_name'
p113706
Nsa(dp113707
S'description'
p113708
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113709
sS'cpp_type'
p113710
S'bool'
p113711
sS'default'
p113712
S'0'
p113713
sS'name'
p113714
S'use_displaced_mesh'
p113715
sS'required'
p113716
I00
sS'group_name'
p113717
S'Advanced'
p113718
sa(dp113719
S'description'
p113720
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p113721
sS'cpp_type'
p113722
S'bool'
p113723
sS'default'
p113724
S'0'
p113725
sS'name'
p113726
S'use_global_numbering'
p113727
sS'required'
p113728
I00
sS'group_name'
p113729
Nsa(dp113730
S'description'
p113731
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p113732
sS'cpp_type'
p113733
S'bool'
p113734
sS'default'
p113735
S'1'
p113736
sS'name'
p113737
S'use_less_than_threshold_comparison'
p113738
sS'required'
p113739
I00
sS'group_name'
p113740
Nsa(dp113741
S'description'
p113742
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p113743
sS'cpp_type'
p113744
S'bool'
p113745
sS'default'
p113746
S'1'
p113747
sS'name'
p113748
S'use_single_map'
p113749
sS'required'
p113750
I00
sS'group_name'
p113751
Nsa(dp113752
S'description'
p113753
S'The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p113754
sS'cpp_type'
p113755
S'std::vector<VariableName>'
p113756
sS'default'
p113757
g3
sS'name'
p113758
S'variable'
p113759
sS'required'
p113760
I01
sS'group_name'
p113761
NsasS'name'
p113762
S'/UserObjects/FeatureFloodCount'
p113763
sa(dp113764
S'description'
p113765
g3
sS'subblocks'
p113766
NsS'parameters'
p113767
(lp113768
(dp113769
S'description'
p113770
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p113771
sS'cpp_type'
p113772
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p113773
sS'default'
p113774
g3
sS'name'
p113775
S'boundary'
p113776
sS'required'
p113777
I00
sS'group_name'
p113778
Nsa(dp113779
S'description'
p113780
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113781
sS'cpp_type'
p113782
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113783
sS'default'
p113784
g3
sS'name'
p113785
S'control_tags'
p113786
sS'required'
p113787
I00
sS'group_name'
p113788
Nsa(dp113789
S'name'
p113790
S'execute_on'
p113791
sS'cpp_type'
p113792
S'MultiMooseEnum'
p113793
sS'default'
p113794
S'TIMESTEP_END'
p113795
sS'description'
p113796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113797
sS'required'
p113798
I00
sS'options'
p113799
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113800
sS'group_name'
p113801
Nsa(dp113802
S'description'
p113803
S'This postprocessor will return the integral of this function over the boundary\n'
p113804
sS'cpp_type'
p113805
S'FunctionName'
p113806
sS'default'
p113807
S'1'
p113808
sS'name'
p113809
S'function'
p113810
sS'required'
p113811
I00
sS'group_name'
p113812
Nsa(dp113813
S'description'
p113814
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113815
sS'cpp_type'
p113816
S'std::vector<OutputName, std::allocator<OutputName> >'
p113817
sS'default'
p113818
g3
sS'name'
p113819
S'outputs'
p113820
sS'required'
p113821
I00
sS'group_name'
p113822
S'Advanced'
p113823
sa(dp113824
S'description'
p113825
g3
sS'cpp_type'
p113826
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113827
sS'default'
p113828
S'FunctionSideIntegral'
p113829
sS'name'
p113830
S'type'
p113831
sS'required'
p113832
I00
sS'group_name'
p113833
Nsa(dp113834
S'description'
p113835
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113836
sS'cpp_type'
p113837
S'bool'
p113838
sS'default'
p113839
S'0'
p113840
sS'name'
p113841
S'use_displaced_mesh'
p113842
sS'required'
p113843
I00
sS'group_name'
p113844
S'Advanced'
p113845
sasS'name'
p113846
S'/UserObjects/FunctionSideIntegral'
p113847
sa(dp113848
S'description'
p113849
g3
sS'subblocks'
p113850
NsS'parameters'
p113851
(lp113852
(dp113853
S'description'
p113854
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113855
sS'cpp_type'
p113856
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113857
sS'default'
p113858
g3
sS'name'
p113859
S'control_tags'
p113860
sS'required'
p113861
I00
sS'group_name'
p113862
Nsa(dp113863
S'name'
p113864
S'execute_on'
p113865
sS'cpp_type'
p113866
S'MultiMooseEnum'
p113867
sS'default'
p113868
S'TIMESTEP_END'
p113869
sS'description'
p113870
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113871
sS'required'
p113872
I00
sS'options'
p113873
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113874
sS'group_name'
p113875
Nsa(dp113876
S'description'
p113877
S'The function which supplies the postprocessor value.\n'
p113878
sS'cpp_type'
p113879
S'FunctionName'
p113880
sS'default'
p113881
g3
sS'name'
p113882
S'function'
p113883
sS'required'
p113884
I01
sS'group_name'
p113885
Nsa(dp113886
S'description'
p113887
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p113888
sS'cpp_type'
p113889
S'std::vector<OutputName, std::allocator<OutputName> >'
p113890
sS'default'
p113891
g3
sS'name'
p113892
S'outputs'
p113893
sS'required'
p113894
I00
sS'group_name'
p113895
S'Advanced'
p113896
sa(dp113897
S'description'
p113898
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p113899
sS'cpp_type'
p113900
S'libMesh::Point'
p113901
sS'default'
p113902
S'0 0 0'
p113903
sS'name'
p113904
S'point'
p113905
sS'required'
p113906
I00
sS'group_name'
p113907
Nsa(dp113908
S'description'
p113909
S'A scale factor to be applied to the function\n'
p113910
sS'cpp_type'
p113911
S'double'
p113912
sS'default'
p113913
S'1'
p113914
sS'name'
p113915
S'scale_factor'
p113916
sS'required'
p113917
I00
sS'group_name'
p113918
Nsa(dp113919
S'description'
p113920
g3
sS'cpp_type'
p113921
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113922
sS'default'
p113923
S'FunctionValuePostprocessor'
p113924
sS'name'
p113925
S'type'
p113926
sS'required'
p113927
I00
sS'group_name'
p113928
Nsa(dp113929
S'description'
p113930
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p113931
sS'cpp_type'
p113932
S'bool'
p113933
sS'default'
p113934
S'0'
p113935
sS'name'
p113936
S'use_displaced_mesh'
p113937
sS'required'
p113938
I00
sS'group_name'
p113939
S'Advanced'
p113940
sasS'name'
p113941
S'/UserObjects/FunctionValuePostprocessor'
p113942
sa(dp113943
S'description'
p113944
S'Userobject for summing forces and torques acting on a grain\n'
p113945
sS'subblocks'
p113946
NsS'parameters'
p113947
(lp113948
(dp113949
S'description'
p113950
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p113951
sS'cpp_type'
p113952
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p113953
sS'default'
p113954
g3
sS'name'
p113955
S'control_tags'
p113956
sS'required'
p113957
I00
sS'group_name'
p113958
Nsa(dp113959
S'name'
p113960
S'execute_on'
p113961
sS'cpp_type'
p113962
S'MultiMooseEnum'
p113963
sS'default'
p113964
S'TIMESTEP_END'
p113965
sS'description'
p113966
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p113967
sS'required'
p113968
I00
sS'options'
p113969
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p113970
sS'group_name'
p113971
Nsa(dp113972
S'description'
p113973
S'List of names of user objects that provides forces and torques applied to grains\n'
p113974
sS'cpp_type'
p113975
S'std::vector<UserObjectName, std::allocator<UserObjectName> >'
p113976
sS'default'
p113977
g3
sS'name'
p113978
S'grain_forces'
p113979
sS'required'
p113980
I00
sS'group_name'
p113981
Nsa(dp113982
S'description'
p113983
S'Number of grains\n'
p113984
sS'cpp_type'
p113985
S'unsigned int'
p113986
sS'default'
p113987
g3
sS'name'
p113988
S'op_num'
p113989
sS'required'
p113990
I00
sS'group_name'
p113991
Nsa(dp113992
S'description'
p113993
g3
sS'cpp_type'
p113994
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p113995
sS'default'
p113996
S'GrainForceAndTorqueSum'
p113997
sS'name'
p113998
S'type'
p113999
sS'required'
p114000
I00
sS'group_name'
p114001
Nsa(dp114002
S'description'
p114003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114004
sS'cpp_type'
p114005
S'bool'
p114006
sS'default'
p114007
S'0'
p114008
sS'name'
p114009
S'use_displaced_mesh'
p114010
sS'required'
p114011
I00
sS'group_name'
p114012
S'Advanced'
p114013
sasS'name'
p114014
S'/UserObjects/GrainForceAndTorqueSum'
p114015
sa(dp114016
S'description'
p114017
g3
sS'subblocks'
p114018
NsS'parameters'
p114019
(lp114020
(dp114021
S'description'
p114022
S'An optional file name where bubble volumes can be output.\n'
p114023
sS'cpp_type'
p114024
S'FileName'
p114025
sS'default'
p114026
g3
sS'name'
p114027
S'bubble_volume_file'
p114028
sS'required'
p114029
I00
sS'group_name'
p114030
Nsa(dp114031
S'description'
p114032
S'Indicates whether the grain tracker uses bounding sphere centersor center of mass calcuations for tracking grains\n'
p114033
sS'cpp_type'
p114034
S'bool'
p114035
sS'default'
p114036
S'0'
p114037
sS'name'
p114038
S'center_of_mass_tracking'
p114039
sS'required'
p114040
I00
sS'group_name'
p114041
Nsa(dp114042
S'description'
p114043
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p114044
sS'cpp_type'
p114045
S'bool'
p114046
sS'default'
p114047
S'0'
p114048
sS'name'
p114049
S'compute_boundary_intersecting_volume'
p114050
sS'required'
p114051
I00
sS'group_name'
p114052
Nsa(dp114053
S'description'
p114054
S'Indicates whether the data structures thathold the active order parameter informationshould be populated or not\n'
p114055
sS'cpp_type'
p114056
S'bool'
p114057
sS'default'
p114058
S'0'
p114059
sS'name'
p114060
S'compute_op_maps'
p114061
sS'required'
p114062
I00
sS'group_name'
p114063
Nsa(dp114064
S'description'
p114065
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p114066
sS'cpp_type'
p114067
S'bool'
p114068
sS'default'
p114069
S'0'
p114070
sS'name'
p114071
S'condense_map_info'
p114072
sS'required'
p114073
I00
sS'group_name'
p114074
Nsa(dp114075
S'description'
p114076
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p114077
sS'cpp_type'
p114078
S'double'
p114079
sS'default'
p114080
g3
sS'name'
p114081
S'connecting_threshold'
p114082
sS'required'
p114083
I00
sS'group_name'
p114084
Nsa(dp114085
S'description'
p114086
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114087
sS'cpp_type'
p114088
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114089
sS'default'
p114090
g3
sS'name'
p114091
S'control_tags'
p114092
sS'required'
p114093
I00
sS'group_name'
p114094
Nsa(dp114095
S'description'
p114096
S'The buffer around the convex hull used to determinewhen features intersect\n'
p114097
sS'cpp_type'
p114098
S'double'
p114099
sS'default'
p114100
S'1'
p114101
sS'name'
p114102
S'convex_hull_buffer'
p114103
sS'required'
p114104
I00
sS'group_name'
p114105
Nsa(dp114106
S'description'
p114107
S'Optional: EBSD Reader for initial condition\n'
p114108
sS'cpp_type'
p114109
S'UserObjectName'
p114110
sS'default'
p114111
g3
sS'name'
p114112
S'ebsd_reader'
p114113
sS'required'
p114114
I00
sS'group_name'
p114115
Nsa(dp114116
S'description'
p114117
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p114118
sS'cpp_type'
p114119
S'PostprocessorName'
p114120
sS'default'
p114121
g3
sS'name'
p114122
S'elem_avg_value'
p114123
sS'required'
p114124
I00
sS'group_name'
p114125
Nsa(dp114126
S'description'
p114127
S'Instruct the UO to populate the variable index map.\n'
p114128
sS'cpp_type'
p114129
S'bool'
p114130
sS'default'
p114131
S'0'
p114132
sS'name'
p114133
S'enable_var_coloring'
p114134
sS'required'
p114135
I00
sS'group_name'
p114136
Nsa(dp114137
S'name'
p114138
S'execute_on'
p114139
sS'cpp_type'
p114140
S'MultiMooseEnum'
p114141
sS'default'
p114142
S'TIMESTEP_END'
p114143
sS'description'
p114144
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114145
sS'required'
p114146
I00
sS'options'
p114147
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p114148
sS'group_name'
p114149
Nsa(dp114150
S'name'
p114151
S'flood_entity_type'
p114152
sS'cpp_type'
p114153
S'MooseEnum'
p114154
sS'default'
p114155
S'NODAL'
p114156
sS'description'
p114157
S'Determines whether the flood algorithm runs on nodes or elements\n'
p114158
sS'required'
p114159
I00
sS'options'
p114160
S'NODAL ELEMENTAL'
p114161
sS'group_name'
p114162
Nsa(dp114163
S'description'
p114164
S'Array of coupled variables (num_name)\n'
p114165
sS'cpp_type'
p114166
S'unsigned int'
p114167
sS'default'
p114168
g3
sS'name'
p114169
S'op_num'
p114170
sS'required'
p114171
I00
sS'group_name'
p114172
Nsa(dp114173
S'description'
p114174
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p114175
sS'cpp_type'
p114176
S'std::vector<OutputName, std::allocator<OutputName> >'
p114177
sS'default'
p114178
g3
sS'name'
p114179
S'outputs'
p114180
sS'required'
p114181
I00
sS'group_name'
p114182
S'Advanced'
p114183
sa(dp114184
S'description'
p114185
S'Indicates whether remapping should be done or not (default: true)\n'
p114186
sS'cpp_type'
p114187
S'bool'
p114188
sS'default'
p114189
S'1'
p114190
sS'name'
p114191
S'remap_grains'
p114192
sS'required'
p114193
I00
sS'group_name'
p114194
Nsa(dp114195
S'description'
p114196
S'The threshold value for which a new bubble may be started\n'
p114197
sS'cpp_type'
p114198
S'double'
p114199
sS'default'
p114200
S'0.5'
p114201
sS'name'
p114202
S'threshold'
p114203
sS'required'
p114204
I00
sS'group_name'
p114205
Nsa(dp114206
S'description'
p114207
S'Calculate memory usage\n'
p114208
sS'cpp_type'
p114209
S'bool'
p114210
sS'default'
p114211
S'0'
p114212
sS'name'
p114213
S'track_memory_usage'
p114214
sS'required'
p114215
I00
sS'group_name'
p114216
Nsa(dp114217
S'description'
p114218
S'The timestep for when we should start tracking grains\n'
p114219
sS'cpp_type'
p114220
S'int'
p114221
sS'default'
p114222
S'0'
p114223
sS'name'
p114224
S'tracking_step'
p114225
sS'required'
p114226
I00
sS'group_name'
p114227
Nsa(dp114228
S'description'
p114229
g3
sS'cpp_type'
p114230
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114231
sS'default'
p114232
S'GrainTracker'
p114233
sS'name'
p114234
S'type'
p114235
sS'required'
p114236
I00
sS'group_name'
p114237
Nsa(dp114238
S'description'
p114239
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114240
sS'cpp_type'
p114241
S'bool'
p114242
sS'default'
p114243
S'0'
p114244
sS'name'
p114245
S'use_displaced_mesh'
p114246
sS'required'
p114247
I00
sS'group_name'
p114248
S'Advanced'
p114249
sa(dp114250
S'description'
p114251
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p114252
sS'cpp_type'
p114253
S'bool'
p114254
sS'default'
p114255
S'0'
p114256
sS'name'
p114257
S'use_global_numbering'
p114258
sS'required'
p114259
I00
sS'group_name'
p114260
Nsa(dp114261
S'description'
p114262
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p114263
sS'cpp_type'
p114264
S'bool'
p114265
sS'default'
p114266
S'1'
p114267
sS'name'
p114268
S'use_less_than_threshold_comparison'
p114269
sS'required'
p114270
I00
sS'group_name'
p114271
Nsa(dp114272
S'description'
p114273
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p114274
sS'cpp_type'
p114275
S'bool'
p114276
sS'default'
p114277
S'1'
p114278
sS'name'
p114279
S'use_single_map'
p114280
sS'required'
p114281
I00
sS'group_name'
p114282
Nsa(dp114283
S'description'
p114284
S'Array of coupled variables (base_name)\n'
p114285
sS'cpp_type'
p114286
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114287
sS'default'
p114288
g3
sS'name'
p114289
S'var_name_base'
p114290
sS'required'
p114291
I00
sS'group_name'
p114292
NsasS'name'
p114293
S'/UserObjects/GrainTracker'
p114294
sa(dp114295
S'description'
p114296
S'User Object to integrate equivalent plastic strain\n'
p114297
sS'subblocks'
p114298
NsS'parameters'
p114299
(lp114300
(dp114301
S'description'
p114302
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114303
sS'cpp_type'
p114304
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114305
sS'default'
p114306
g3
sS'name'
p114307
S'block'
p114308
sS'required'
p114309
I00
sS'group_name'
p114310
Nsa(dp114311
S'description'
p114312
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114313
sS'cpp_type'
p114314
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114315
sS'default'
p114316
g3
sS'name'
p114317
S'control_tags'
p114318
sS'required'
p114319
I00
sS'group_name'
p114320
Nsa(dp114321
S'name'
p114322
S'execute_on'
p114323
sS'cpp_type'
p114324
S'MultiMooseEnum'
p114325
sS'default'
p114326
S'TIMESTEP_END'
p114327
sS'description'
p114328
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114329
sS'required'
p114330
I00
sS'options'
p114331
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p114332
sS'group_name'
p114333
Nsa(dp114334
S'description'
p114335
S'Name of internal variable property: Same as internal variable rate user object\n'
p114336
sS'cpp_type'
p114337
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114338
sS'default'
p114339
g3
sS'name'
p114340
S'intvar_rate_prop_name'
p114341
sS'required'
p114342
I00
sS'group_name'
p114343
Nsa(dp114344
S'description'
p114345
S'The seed for the master random number generator\n'
p114346
sS'cpp_type'
p114347
S'unsigned int'
p114348
sS'default'
p114349
S'0'
p114350
sS'name'
p114351
S'seed'
p114352
sS'required'
p114353
I00
sS'group_name'
p114354
S'Advanced'
p114355
sa(dp114356
S'description'
p114357
g3
sS'cpp_type'
p114358
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114359
sS'default'
p114360
S'HEVPEqvPlasticStrain'
p114361
sS'name'
p114362
S'type'
p114363
sS'required'
p114364
I00
sS'group_name'
p114365
Nsa(dp114366
S'description'
p114367
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114368
sS'cpp_type'
p114369
S'bool'
p114370
sS'default'
p114371
S'0'
p114372
sS'name'
p114373
S'use_displaced_mesh'
p114374
sS'required'
p114375
I00
sS'group_name'
p114376
S'Advanced'
p114377
sasS'name'
p114378
S'/UserObjects/HEVPEqvPlasticStrain'
p114379
sa(dp114380
S'description'
p114381
S'User Object computing equivalent plastic strain rate\n'
p114382
sS'subblocks'
p114383
NsS'parameters'
p114384
(lp114385
(dp114386
S'description'
p114387
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114388
sS'cpp_type'
p114389
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114390
sS'default'
p114391
g3
sS'name'
p114392
S'block'
p114393
sS'required'
p114394
I00
sS'group_name'
p114395
Nsa(dp114396
S'description'
p114397
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114398
sS'cpp_type'
p114399
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114400
sS'default'
p114401
g3
sS'name'
p114402
S'control_tags'
p114403
sS'required'
p114404
I00
sS'group_name'
p114405
Nsa(dp114406
S'name'
p114407
S'execute_on'
p114408
sS'cpp_type'
p114409
S'MultiMooseEnum'
p114410
sS'default'
p114411
S'TIMESTEP_END'
p114412
sS'description'
p114413
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114414
sS'required'
p114415
I00
sS'options'
p114416
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p114417
sS'group_name'
p114418
Nsa(dp114419
S'description'
p114420
S'Name of flow rate property: Same as the flow rate user object name specified in input file\n'
p114421
sS'cpp_type'
p114422
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114423
sS'default'
p114424
g3
sS'name'
p114425
S'flow_rate_prop_name'
p114426
sS'required'
p114427
I00
sS'group_name'
p114428
Nsa(dp114429
S'description'
p114430
S'Scaling parameter\n'
p114431
sS'cpp_type'
p114432
S'double'
p114433
sS'default'
p114434
S'1'
p114435
sS'name'
p114436
S'h_scaling'
p114437
sS'required'
p114438
I00
sS'group_name'
p114439
Nsa(dp114440
S'description'
p114441
S'The seed for the master random number generator\n'
p114442
sS'cpp_type'
p114443
S'unsigned int'
p114444
sS'default'
p114445
S'0'
p114446
sS'name'
p114447
S'seed'
p114448
sS'required'
p114449
I00
sS'group_name'
p114450
S'Advanced'
p114451
sa(dp114452
S'description'
p114453
g3
sS'cpp_type'
p114454
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114455
sS'default'
p114456
S'HEVPEqvPlasticStrainRate'
p114457
sS'name'
p114458
S'type'
p114459
sS'required'
p114460
I00
sS'group_name'
p114461
Nsa(dp114462
S'description'
p114463
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114464
sS'cpp_type'
p114465
S'bool'
p114466
sS'default'
p114467
S'0'
p114468
sS'name'
p114469
S'use_displaced_mesh'
p114470
sS'required'
p114471
I00
sS'group_name'
p114472
S'Advanced'
p114473
sasS'name'
p114474
S'/UserObjects/HEVPEqvPlasticStrainRate'
p114475
sa(dp114476
S'description'
p114477
S'User object to evaluate power law flow rate and flow direction based on J2\n'
p114478
sS'subblocks'
p114479
NsS'parameters'
p114480
(lp114481
(dp114482
S'description'
p114483
S'Base name of tensor properties to fetch\n'
p114484
sS'cpp_type'
p114485
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114486
sS'default'
p114487
g3
sS'name'
p114488
S'base_name'
p114489
sS'required'
p114490
I00
sS'group_name'
p114491
Nsa(dp114492
S'description'
p114493
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114494
sS'cpp_type'
p114495
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114496
sS'default'
p114497
g3
sS'name'
p114498
S'block'
p114499
sS'required'
p114500
I00
sS'group_name'
p114501
Nsa(dp114502
S'description'
p114503
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114504
sS'cpp_type'
p114505
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114506
sS'default'
p114507
g3
sS'name'
p114508
S'control_tags'
p114509
sS'required'
p114510
I00
sS'group_name'
p114511
Nsa(dp114512
S'name'
p114513
S'execute_on'
p114514
sS'cpp_type'
p114515
S'MultiMooseEnum'
p114516
sS'default'
p114517
S'TIMESTEP_END'
p114518
sS'description'
p114519
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114520
sS'required'
p114521
I00
sS'options'
p114522
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p114523
sS'group_name'
p114524
Nsa(dp114525
S'description'
p114526
S'Power law exponent in flow rate equation\n'
p114527
sS'cpp_type'
p114528
S'double'
p114529
sS'default'
p114530
S'10'
p114531
sS'name'
p114532
S'flow_rate_exponent'
p114533
sS'required'
p114534
I00
sS'group_name'
p114535
Nsa(dp114536
S'description'
p114537
S'Tolerance for flow rate\n'
p114538
sS'cpp_type'
p114539
S'double'
p114540
sS'default'
p114541
S'1000'
p114542
sS'name'
p114543
S'flow_rate_tol'
p114544
sS'required'
p114545
I00
sS'group_name'
p114546
Nsa(dp114547
S'description'
p114548
S'Reference flow rate for rate dependent flow\n'
p114549
sS'cpp_type'
p114550
S'double'
p114551
sS'default'
p114552
S'0.001'
p114553
sS'name'
p114554
S'reference_flow_rate'
p114555
sS'required'
p114556
I00
sS'group_name'
p114557
Nsa(dp114558
S'description'
p114559
S'The seed for the master random number generator\n'
p114560
sS'cpp_type'
p114561
S'unsigned int'
p114562
sS'default'
p114563
S'0'
p114564
sS'name'
p114565
S'seed'
p114566
sS'required'
p114567
I00
sS'group_name'
p114568
S'Advanced'
p114569
sa(dp114570
S'description'
p114571
S'Name of strength property: Same as strength user object specified in input file\n'
p114572
sS'cpp_type'
p114573
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114574
sS'default'
p114575
g3
sS'name'
p114576
S'strength_prop_name'
p114577
sS'required'
p114578
I00
sS'group_name'
p114579
Nsa(dp114580
S'description'
p114581
g3
sS'cpp_type'
p114582
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114583
sS'default'
p114584
S'HEVPFlowRatePowerLawJ2'
p114585
sS'name'
p114586
S'type'
p114587
sS'required'
p114588
I00
sS'group_name'
p114589
Nsa(dp114590
S'description'
p114591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114592
sS'cpp_type'
p114593
S'bool'
p114594
sS'default'
p114595
S'0'
p114596
sS'name'
p114597
S'use_displaced_mesh'
p114598
sS'required'
p114599
I00
sS'group_name'
p114600
S'Advanced'
p114601
sasS'name'
p114602
S'/UserObjects/HEVPFlowRatePowerLawJ2'
p114603
sa(dp114604
S'description'
p114605
S'User Object for linear hardening\n'
p114606
sS'subblocks'
p114607
NsS'parameters'
p114608
(lp114609
(dp114610
S'description'
p114611
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114612
sS'cpp_type'
p114613
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114614
sS'default'
p114615
g3
sS'name'
p114616
S'block'
p114617
sS'required'
p114618
I00
sS'group_name'
p114619
Nsa(dp114620
S'description'
p114621
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114622
sS'cpp_type'
p114623
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114624
sS'default'
p114625
g3
sS'name'
p114626
S'control_tags'
p114627
sS'required'
p114628
I00
sS'group_name'
p114629
Nsa(dp114630
S'name'
p114631
S'execute_on'
p114632
sS'cpp_type'
p114633
S'MultiMooseEnum'
p114634
sS'default'
p114635
S'TIMESTEP_END'
p114636
sS'description'
p114637
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114638
sS'required'
p114639
I00
sS'options'
p114640
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p114641
sS'group_name'
p114642
Nsa(dp114643
S'description'
p114644
S'Name of internal variable property to calculate material resistance: Same as internal variable user object\n'
p114645
sS'cpp_type'
p114646
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114647
sS'default'
p114648
g3
sS'name'
p114649
S'intvar_prop_name'
p114650
sS'required'
p114651
I00
sS'group_name'
p114652
Nsa(dp114653
S'description'
p114654
S'The seed for the master random number generator\n'
p114655
sS'cpp_type'
p114656
S'unsigned int'
p114657
sS'default'
p114658
S'0'
p114659
sS'name'
p114660
S'seed'
p114661
sS'required'
p114662
I00
sS'group_name'
p114663
S'Advanced'
p114664
sa(dp114665
S'description'
p114666
S'Linear hardening slope\n'
p114667
sS'cpp_type'
p114668
S'double'
p114669
sS'default'
p114670
g3
sS'name'
p114671
S'slope'
p114672
sS'required'
p114673
I00
sS'group_name'
p114674
Nsa(dp114675
S'description'
p114676
g3
sS'cpp_type'
p114677
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114678
sS'default'
p114679
S'HEVPLinearHardening'
p114680
sS'name'
p114681
S'type'
p114682
sS'required'
p114683
I00
sS'group_name'
p114684
Nsa(dp114685
S'description'
p114686
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114687
sS'cpp_type'
p114688
S'bool'
p114689
sS'default'
p114690
S'0'
p114691
sS'name'
p114692
S'use_displaced_mesh'
p114693
sS'required'
p114694
I00
sS'group_name'
p114695
S'Advanced'
p114696
sa(dp114697
S'description'
p114698
S'Yield strength\n'
p114699
sS'cpp_type'
p114700
S'double'
p114701
sS'default'
p114702
g3
sS'name'
p114703
S'yield_stress'
p114704
sS'required'
p114705
I00
sS'group_name'
p114706
NsasS'name'
p114707
S'/UserObjects/HEVPLinearHardening'
p114708
sa(dp114709
S'description'
p114710
S'User object for Ramberg-Osgood hardening power law hardening\n'
p114711
sS'subblocks'
p114712
NsS'parameters'
p114713
(lp114714
(dp114715
S'description'
p114716
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114717
sS'cpp_type'
p114718
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114719
sS'default'
p114720
g3
sS'name'
p114721
S'block'
p114722
sS'required'
p114723
I00
sS'group_name'
p114724
Nsa(dp114725
S'description'
p114726
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114727
sS'cpp_type'
p114728
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114729
sS'default'
p114730
g3
sS'name'
p114731
S'control_tags'
p114732
sS'required'
p114733
I00
sS'group_name'
p114734
Nsa(dp114735
S'name'
p114736
S'execute_on'
p114737
sS'cpp_type'
p114738
S'MultiMooseEnum'
p114739
sS'default'
p114740
S'TIMESTEP_END'
p114741
sS'description'
p114742
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p114743
sS'required'
p114744
I00
sS'options'
p114745
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p114746
sS'group_name'
p114747
Nsa(dp114748
S'description'
p114749
S'The hardening exponent value\n'
p114750
sS'cpp_type'
p114751
S'double'
p114752
sS'default'
p114753
g3
sS'name'
p114754
S'hardening_exponent'
p114755
sS'required'
p114756
I01
sS'group_name'
p114757
Nsa(dp114758
S'description'
p114759
S'Name of internal variable property to calculate material resistance: Same as internal variable user object\n'
p114760
sS'cpp_type'
p114761
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114762
sS'default'
p114763
g3
sS'name'
p114764
S'intvar_prop_name'
p114765
sS'required'
p114766
I00
sS'group_name'
p114767
Nsa(dp114768
S'description'
p114769
S'Reference plastic strain value\n'
p114770
sS'cpp_type'
p114771
S'double'
p114772
sS'default'
p114773
g3
sS'name'
p114774
S'reference_plastic_strain'
p114775
sS'required'
p114776
I01
sS'group_name'
p114777
Nsa(dp114778
S'description'
p114779
S'The seed for the master random number generator\n'
p114780
sS'cpp_type'
p114781
S'unsigned int'
p114782
sS'default'
p114783
S'0'
p114784
sS'name'
p114785
S'seed'
p114786
sS'required'
p114787
I00
sS'group_name'
p114788
S'Advanced'
p114789
sa(dp114790
S'description'
p114791
g3
sS'cpp_type'
p114792
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114793
sS'default'
p114794
S'HEVPRambergOsgoodHardening'
p114795
sS'name'
p114796
S'type'
p114797
sS'required'
p114798
I00
sS'group_name'
p114799
Nsa(dp114800
S'description'
p114801
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p114802
sS'cpp_type'
p114803
S'bool'
p114804
sS'default'
p114805
S'0'
p114806
sS'name'
p114807
S'use_displaced_mesh'
p114808
sS'required'
p114809
I00
sS'group_name'
p114810
S'Advanced'
p114811
sa(dp114812
S'description'
p114813
S'Yield strength\n'
p114814
sS'cpp_type'
p114815
S'double'
p114816
sS'default'
p114817
g3
sS'name'
p114818
S'yield_stress'
p114819
sS'required'
p114820
I00
sS'group_name'
p114821
NsasS'name'
p114822
S'/UserObjects/HEVPRambergOsgoodHardening'
p114823
sa(dp114824
S'description'
p114825
g3
sS'subblocks'
p114826
NsS'parameters'
p114827
(lp114828
(dp114829
S'description'
p114830
S'Name appended to material properties to make them unique\n'
p114831
sS'cpp_type'
p114832
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p114833
sS'default'
p114834
g3
sS'name'
p114835
S'appended_property_name'
p114836
sS'required'
p114837
I00
sS'group_name'
p114838
Nsa(dp114839
S'description'
p114840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p114841
sS'cpp_type'
p114842
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p114843
sS'default'
p114844
g3
sS'name'
p114845
S'block'
p114846
sS'required'
p114847
I00
sS'group_name'
p114848
Nsa(dp114849
S'description'
p114850
S'An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n'
p114851
sS'cpp_type'
p114852
S'unsigned int'
p114853
sS'default'
p114854
g3
sS'name'
p114855
S'column'
p114856
sS'required'
p114857
I01
sS'group_name'
p114858
Nsa(dp114859
S'description'
p114860
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p114861
sS'cpp_type'
p114862
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p114863
sS'default'
p114864
g3
sS'name'
p114865
S'control_tags'
p114866
sS'required'
p114867
I00
sS'group_name'
p114868
Nsa(dp114869
S'description'
p114870
S'solution in xx\n'
p114871
sS'cpp_type'
p114872
S'std::vector<VariableName>'
p114873
sS'default'
p114874
g3
sS'name'
p114875
S'dx_xx'
p114876
sS'required'
p114877
I01
sS'group_name'
p114878
Nsa(dp114879
S'description'
p114880
S'solution in xy\n'
p114881
sS'cpp_type'
p114882
S'std::vector<VariableName>'
p114883
sS'default'
p114884
g3
sS'name'
p114885
S'dx_xy'
p114886
sS'required'
p114887
I01
sS'group_name'
p114888
Nsa(dp114889
S'description'
p114890
S'solution in yy\n'
p114891
sS'cpp_type'
p114892
S'std::vector<VariableName>'
p114893
sS'default'
p114894
g3
sS'name'
p114895
S'dx_yy'
p114896
sS'required'
p114897
I01
sS'group_name'
p114898
Nsa(dp114899
S'description'
p114900
S'solution in yz\n'
p114901
sS'cpp_type'
p114902
S'std::vector<VariableName>'
p114903
sS'default'
p114904
g3
sS'name'
p114905
S'dx_yz'
p114906
sS'required'
p114907
I00
sS'group_name'
p114908
Nsa(dp114909
S'description'
p114910
S'solution in zx\n'
p114911
sS'cpp_type'
p114912
S'std::vector<VariableName>'
p114913
sS'default'
p114914
g3
sS'name'
p114915
S'dx_zx'
p114916
sS'required'
p114917
I00
sS'group_name'
p114918
Nsa(dp114919
S'description'
p114920
S'solution in zz\n'
p114921
sS'cpp_type'
p114922
S'std::vector<VariableName>'
p114923
sS'default'
p114924
g3
sS'name'
p114925
S'dx_zz'
p114926
sS'required'
p114927
I00
sS'group_name'
p114928
Nsa(dp114929
S'description'
p114930
S'solution in xx\n'
p114931
sS'cpp_type'
p114932
S'std::vector<VariableName>'
p114933
sS'default'
p114934
g3
sS'name'
p114935
S'dy_xx'
p114936
sS'required'
p114937
I01
sS'group_name'
p114938
Nsa(dp114939
S'description'
p114940
S'solution in xy\n'
p114941
sS'cpp_type'
p114942
S'std::vector<VariableName>'
p114943
sS'default'
p114944
g3
sS'name'
p114945
S'dy_xy'
p114946
sS'required'
p114947
I01
sS'group_name'
p114948
Nsa(dp114949
S'description'
p114950
S'solution in yy\n'
p114951
sS'cpp_type'
p114952
S'std::vector<VariableName>'
p114953
sS'default'
p114954
g3
sS'name'
p114955
S'dy_yy'
p114956
sS'required'
p114957
I01
sS'group_name'
p114958
Nsa(dp114959
S'description'
p114960
S'solution in yz\n'
p114961
sS'cpp_type'
p114962
S'std::vector<VariableName>'
p114963
sS'default'
p114964
g3
sS'name'
p114965
S'dy_yz'
p114966
sS'required'
p114967
I00
sS'group_name'
p114968
Nsa(dp114969
S'description'
p114970
S'solution in zx\n'
p114971
sS'cpp_type'
p114972
S'std::vector<VariableName>'
p114973
sS'default'
p114974
g3
sS'name'
p114975
S'dy_zx'
p114976
sS'required'
p114977
I00
sS'group_name'
p114978
Nsa(dp114979
S'description'
p114980
S'solution in zz\n'
p114981
sS'cpp_type'
p114982
S'std::vector<VariableName>'
p114983
sS'default'
p114984
g3
sS'name'
p114985
S'dy_zz'
p114986
sS'required'
p114987
I00
sS'group_name'
p114988
Nsa(dp114989
S'description'
p114990
S'solution in xx\n'
p114991
sS'cpp_type'
p114992
S'std::vector<VariableName>'
p114993
sS'default'
p114994
g3
sS'name'
p114995
S'dz_xx'
p114996
sS'required'
p114997
I00
sS'group_name'
p114998
Nsa(dp114999
S'description'
p115000
S'solution in xy\n'
p115001
sS'cpp_type'
p115002
S'std::vector<VariableName>'
p115003
sS'default'
p115004
g3
sS'name'
p115005
S'dz_xy'
p115006
sS'required'
p115007
I00
sS'group_name'
p115008
Nsa(dp115009
S'description'
p115010
S'solution in yy\n'
p115011
sS'cpp_type'
p115012
S'std::vector<VariableName>'
p115013
sS'default'
p115014
g3
sS'name'
p115015
S'dz_yy'
p115016
sS'required'
p115017
I00
sS'group_name'
p115018
Nsa(dp115019
S'description'
p115020
S'solution in yz\n'
p115021
sS'cpp_type'
p115022
S'std::vector<VariableName>'
p115023
sS'default'
p115024
g3
sS'name'
p115025
S'dz_yz'
p115026
sS'required'
p115027
I00
sS'group_name'
p115028
Nsa(dp115029
S'description'
p115030
S'solution in zx\n'
p115031
sS'cpp_type'
p115032
S'std::vector<VariableName>'
p115033
sS'default'
p115034
g3
sS'name'
p115035
S'dz_zx'
p115036
sS'required'
p115037
I00
sS'group_name'
p115038
Nsa(dp115039
S'description'
p115040
S'solution in zz\n'
p115041
sS'cpp_type'
p115042
S'std::vector<VariableName>'
p115043
sS'default'
p115044
g3
sS'name'
p115045
S'dz_zz'
p115046
sS'required'
p115047
I00
sS'group_name'
p115048
Nsa(dp115049
S'name'
p115050
S'execute_on'
p115051
sS'cpp_type'
p115052
S'MultiMooseEnum'
p115053
sS'default'
p115054
S'TIMESTEP_END'
p115055
sS'description'
p115056
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115057
sS'required'
p115058
I00
sS'options'
p115059
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p115060
sS'group_name'
p115061
Nsa(dp115062
S'description'
p115063
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115064
sS'cpp_type'
p115065
S'std::vector<OutputName, std::allocator<OutputName> >'
p115066
sS'default'
p115067
g3
sS'name'
p115068
S'outputs'
p115069
sS'required'
p115070
I00
sS'group_name'
p115071
S'Advanced'
p115072
sa(dp115073
S'description'
p115074
S'An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)\n'
p115075
sS'cpp_type'
p115076
S'unsigned int'
p115077
sS'default'
p115078
g3
sS'name'
p115079
S'row'
p115080
sS'required'
p115081
I01
sS'group_name'
p115082
Nsa(dp115083
S'description'
p115084
S'The seed for the master random number generator\n'
p115085
sS'cpp_type'
p115086
S'unsigned int'
p115087
sS'default'
p115088
S'0'
p115089
sS'name'
p115090
S'seed'
p115091
sS'required'
p115092
I00
sS'group_name'
p115093
S'Advanced'
p115094
sa(dp115095
S'description'
p115096
g3
sS'cpp_type'
p115097
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115098
sS'default'
p115099
S'HomogenizedElasticConstants'
p115100
sS'name'
p115101
S'type'
p115102
sS'required'
p115103
I00
sS'group_name'
p115104
Nsa(dp115105
S'description'
p115106
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115107
sS'cpp_type'
p115108
S'bool'
p115109
sS'default'
p115110
S'0'
p115111
sS'name'
p115112
S'use_displaced_mesh'
p115113
sS'required'
p115114
I00
sS'group_name'
p115115
S'Advanced'
p115116
sa(dp115117
S'description'
p115118
S'The name of the variable that this object operates on\n'
p115119
sS'cpp_type'
p115120
S'std::vector<VariableName>'
p115121
sS'default'
p115122
g3
sS'name'
p115123
S'variable'
p115124
sS'required'
p115125
I00
sS'group_name'
p115126
NsasS'name'
p115127
S'/UserObjects/HomogenizedElasticConstants'
p115128
sa(dp115129
S'description'
p115130
g3
sS'subblocks'
p115131
NsS'parameters'
p115132
(lp115133
(dp115134
S'description'
p115135
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115136
sS'cpp_type'
p115137
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115138
sS'default'
p115139
g3
sS'name'
p115140
S'block'
p115141
sS'required'
p115142
I00
sS'group_name'
p115143
Nsa(dp115144
S'description'
p115145
S'An integer corresponding to the direction this pp acts in (0 for x, 1 for y, 2 for z)\n'
p115146
sS'cpp_type'
p115147
S'unsigned int'
p115148
sS'default'
p115149
g3
sS'name'
p115150
S'component'
p115151
sS'required'
p115152
I01
sS'group_name'
p115153
Nsa(dp115154
S'description'
p115155
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115156
sS'cpp_type'
p115157
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115158
sS'default'
p115159
g3
sS'name'
p115160
S'control_tags'
p115161
sS'required'
p115162
I00
sS'group_name'
p115163
Nsa(dp115164
S'description'
p115165
S'Property name of the diffusivity (Default: thermal_conductivity)\n'
p115166
sS'cpp_type'
p115167
S'MaterialPropertyName'
p115168
sS'default'
p115169
S'thermal_conductivity'
p115170
sS'name'
p115171
S'diffusion_coefficient_name'
p115172
sS'required'
p115173
I00
sS'group_name'
p115174
Nsa(dp115175
S'name'
p115176
S'execute_on'
p115177
sS'cpp_type'
p115178
S'MultiMooseEnum'
p115179
sS'default'
p115180
S'TIMESTEP_END'
p115181
sS'description'
p115182
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115183
sS'required'
p115184
I00
sS'options'
p115185
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p115186
sS'group_name'
p115187
Nsa(dp115188
S'description'
p115189
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115190
sS'cpp_type'
p115191
S'std::vector<OutputName, std::allocator<OutputName> >'
p115192
sS'default'
p115193
g3
sS'name'
p115194
S'outputs'
p115195
sS'required'
p115196
I00
sS'group_name'
p115197
S'Advanced'
p115198
sa(dp115199
S'description'
p115200
S'Scale factor\n'
p115201
sS'cpp_type'
p115202
S'double'
p115203
sS'default'
p115204
S'1'
p115205
sS'name'
p115206
S'scale_factor'
p115207
sS'required'
p115208
I00
sS'group_name'
p115209
Nsa(dp115210
S'description'
p115211
S'The seed for the master random number generator\n'
p115212
sS'cpp_type'
p115213
S'unsigned int'
p115214
sS'default'
p115215
S'0'
p115216
sS'name'
p115217
S'seed'
p115218
sS'required'
p115219
I00
sS'group_name'
p115220
S'Advanced'
p115221
sa(dp115222
S'description'
p115223
S'solution in x\n'
p115224
sS'cpp_type'
p115225
S'std::vector<VariableName>'
p115226
sS'default'
p115227
g3
sS'name'
p115228
S'temp_x'
p115229
sS'required'
p115230
I01
sS'group_name'
p115231
Nsa(dp115232
S'description'
p115233
S'solution in y\n'
p115234
sS'cpp_type'
p115235
S'std::vector<VariableName>'
p115236
sS'default'
p115237
g3
sS'name'
p115238
S'temp_y'
p115239
sS'required'
p115240
I00
sS'group_name'
p115241
Nsa(dp115242
S'description'
p115243
S'solution in z\n'
p115244
sS'cpp_type'
p115245
S'std::vector<VariableName>'
p115246
sS'default'
p115247
g3
sS'name'
p115248
S'temp_z'
p115249
sS'required'
p115250
I00
sS'group_name'
p115251
Nsa(dp115252
S'description'
p115253
g3
sS'cpp_type'
p115254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115255
sS'default'
p115256
S'HomogenizedThermalConductivity'
p115257
sS'name'
p115258
S'type'
p115259
sS'required'
p115260
I00
sS'group_name'
p115261
Nsa(dp115262
S'description'
p115263
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115264
sS'cpp_type'
p115265
S'bool'
p115266
sS'default'
p115267
S'0'
p115268
sS'name'
p115269
S'use_displaced_mesh'
p115270
sS'required'
p115271
I00
sS'group_name'
p115272
S'Advanced'
p115273
sa(dp115274
S'description'
p115275
S'The name of the variable that this object operates on\n'
p115276
sS'cpp_type'
p115277
S'std::vector<VariableName>'
p115278
sS'default'
p115279
g3
sS'name'
p115280
S'variable'
p115281
sS'required'
p115282
I00
sS'group_name'
p115283
NsasS'name'
p115284
S'/UserObjects/HomogenizedThermalConductivity'
p115285
sa(dp115286
S'description'
p115287
g3
sS'subblocks'
p115288
NsS'parameters'
p115289
(lp115290
(dp115291
S'description'
p115292
S'0 < beta < 1, choose some fraction of the limiting timestep size\n'
p115293
sS'cpp_type'
p115294
S'double'
p115295
sS'default'
p115296
g3
sS'name'
p115297
S'beta'
p115298
sS'required'
p115299
I01
sS'group_name'
p115300
Nsa(dp115301
S'description'
p115302
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115303
sS'cpp_type'
p115304
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115305
sS'default'
p115306
g3
sS'name'
p115307
S'block'
p115308
sS'required'
p115309
I00
sS'group_name'
p115310
Nsa(dp115311
S'description'
p115312
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115313
sS'cpp_type'
p115314
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115315
sS'default'
p115316
g3
sS'name'
p115317
S'control_tags'
p115318
sS'required'
p115319
I00
sS'group_name'
p115320
Nsa(dp115321
S'name'
p115322
S'execute_on'
p115323
sS'cpp_type'
p115324
S'MultiMooseEnum'
p115325
sS'default'
p115326
S'TIMESTEP_END'
p115327
sS'description'
p115328
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115329
sS'required'
p115330
I00
sS'options'
p115331
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p115332
sS'group_name'
p115333
Nsa(dp115334
S'description'
p115335
S'dynamic viscosity\n'
p115336
sS'cpp_type'
p115337
S'double'
p115338
sS'default'
p115339
g3
sS'name'
p115340
S'mu'
p115341
sS'required'
p115342
I01
sS'group_name'
p115343
Nsa(dp115344
S'description'
p115345
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115346
sS'cpp_type'
p115347
S'std::vector<OutputName, std::allocator<OutputName> >'
p115348
sS'default'
p115349
g3
sS'name'
p115350
S'outputs'
p115351
sS'required'
p115352
I00
sS'group_name'
p115353
S'Advanced'
p115354
sa(dp115355
S'description'
p115356
S'density\n'
p115357
sS'cpp_type'
p115358
S'double'
p115359
sS'default'
p115360
g3
sS'name'
p115361
S'rho'
p115362
sS'required'
p115363
I01
sS'group_name'
p115364
Nsa(dp115365
S'description'
p115366
S'The seed for the master random number generator\n'
p115367
sS'cpp_type'
p115368
S'unsigned int'
p115369
sS'default'
p115370
S'0'
p115371
sS'name'
p115372
S'seed'
p115373
sS'required'
p115374
I00
sS'group_name'
p115375
S'Advanced'
p115376
sa(dp115377
S'description'
p115378
g3
sS'cpp_type'
p115379
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115380
sS'default'
p115381
S'INSExplicitTimestepSelector'
p115382
sS'name'
p115383
S'type'
p115384
sS'required'
p115385
I00
sS'group_name'
p115386
Nsa(dp115387
S'description'
p115388
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115389
sS'cpp_type'
p115390
S'bool'
p115391
sS'default'
p115392
S'0'
p115393
sS'name'
p115394
S'use_displaced_mesh'
p115395
sS'required'
p115396
I00
sS'group_name'
p115397
S'Advanced'
p115398
sa(dp115399
S'description'
p115400
S'Velocity magnitude\n'
p115401
sS'cpp_type'
p115402
S'std::vector<VariableName>'
p115403
sS'default'
p115404
g3
sS'name'
p115405
S'vel_mag'
p115406
sS'required'
p115407
I01
sS'group_name'
p115408
NsasS'name'
p115409
S'/UserObjects/INSExplicitTimestepSelector'
p115410
sa(dp115411
S'description'
p115412
g3
sS'subblocks'
p115413
NsS'parameters'
p115414
(lp115415
(dp115416
S'description'
p115417
S'Conversion factor between interaction integral and stress intensity factor K\n'
p115418
sS'cpp_type'
p115419
S'double'
p115420
sS'default'
p115421
g3
sS'name'
p115422
S'K_factor'
p115423
sS'required'
p115424
I00
sS'group_name'
p115425
Nsa(dp115426
S'description'
p115427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115428
sS'cpp_type'
p115429
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115430
sS'default'
p115431
g3
sS'name'
p115432
S'block'
p115433
sS'required'
p115434
I00
sS'group_name'
p115435
Nsa(dp115436
S'description'
p115437
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115438
sS'cpp_type'
p115439
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115440
sS'default'
p115441
g3
sS'name'
p115442
S'control_tags'
p115443
sS'required'
p115444
I00
sS'group_name'
p115445
Nsa(dp115446
S'description'
p115447
S'The CrackFrontDefinition user object name\n'
p115448
sS'cpp_type'
p115449
S'UserObjectName'
p115450
sS'default'
p115451
g3
sS'name'
p115452
S'crack_front_definition'
p115453
sS'required'
p115454
I01
sS'group_name'
p115455
Nsa(dp115456
S'description'
p115457
S'The index of the point on the crack front corresponding to this q function\n'
p115458
sS'cpp_type'
p115459
S'unsigned int'
p115460
sS'default'
p115461
g3
sS'name'
p115462
S'crack_front_point_index'
p115463
sS'required'
p115464
I00
sS'group_name'
p115465
Nsa(dp115466
S'description'
p115467
S'The x displacement\n'
p115468
sS'cpp_type'
p115469
S'std::vector<VariableName>'
p115470
sS'default'
p115471
g3
sS'name'
p115472
S'disp_x'
p115473
sS'required'
p115474
I00
sS'group_name'
p115475
Nsa(dp115476
S'description'
p115477
S'The y displacement\n'
p115478
sS'cpp_type'
p115479
S'std::vector<VariableName>'
p115480
sS'default'
p115481
g3
sS'name'
p115482
S'disp_y'
p115483
sS'required'
p115484
I00
sS'group_name'
p115485
Nsa(dp115486
S'description'
p115487
S'The z displacement\n'
p115488
sS'cpp_type'
p115489
S'std::vector<VariableName>'
p115490
sS'default'
p115491
g3
sS'name'
p115492
S'disp_z'
p115493
sS'required'
p115494
I00
sS'group_name'
p115495
Nsa(dp115496
S'name'
p115497
S'execute_on'
p115498
sS'cpp_type'
p115499
S'MultiMooseEnum'
p115500
sS'default'
p115501
S'TIMESTEP_END'
p115502
sS'description'
p115503
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115504
sS'required'
p115505
I00
sS'options'
p115506
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p115507
sS'group_name'
p115508
Nsa(dp115509
S'description'
p115510
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115511
sS'cpp_type'
p115512
S'std::vector<OutputName, std::allocator<OutputName> >'
p115513
sS'default'
p115514
g3
sS'name'
p115515
S'outputs'
p115516
sS'required'
p115517
I00
sS'group_name'
p115518
S'Advanced'
p115519
sa(dp115520
S'description'
p115521
S"Poisson's ratio for the material.\n"
p115522
sS'cpp_type'
p115523
S'double'
p115524
sS'default'
p115525
g3
sS'name'
p115526
S'poissons_ratio'
p115527
sS'required'
p115528
I00
sS'group_name'
p115529
Nsa(dp115530
S'description'
p115531
S'The q function, aux variable\n'
p115532
sS'cpp_type'
p115533
S'std::vector<VariableName>'
p115534
sS'default'
p115535
g3
sS'name'
p115536
S'q'
p115537
sS'required'
p115538
I00
sS'group_name'
p115539
Nsa(dp115540
S'description'
p115541
S'The seed for the master random number generator\n'
p115542
sS'cpp_type'
p115543
S'unsigned int'
p115544
sS'default'
p115545
S'0'
p115546
sS'name'
p115547
S'seed'
p115548
sS'required'
p115549
I00
sS'group_name'
p115550
S'Advanced'
p115551
sa(dp115552
S'description'
p115553
S'Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n'
p115554
sS'cpp_type'
p115555
S'unsigned int'
p115556
sS'default'
p115557
g3
sS'name'
p115558
S'symmetry_plane'
p115559
sS'required'
p115560
I00
sS'group_name'
p115561
Nsa(dp115562
S'description'
p115563
S'Calculate T-stress\n'
p115564
sS'cpp_type'
p115565
S'bool'
p115566
sS'default'
p115567
S'0'
p115568
sS'name'
p115569
S't_stress'
p115570
sS'required'
p115571
I00
sS'group_name'
p115572
Nsa(dp115573
S'description'
p115574
g3
sS'cpp_type'
p115575
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115576
sS'default'
p115577
S'InteractionIntegral'
p115578
sS'name'
p115579
S'type'
p115580
sS'required'
p115581
I00
sS'group_name'
p115582
Nsa(dp115583
S'description'
p115584
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115585
sS'cpp_type'
p115586
S'bool'
p115587
sS'default'
p115588
S'0'
p115589
sS'name'
p115590
S'use_displaced_mesh'
p115591
sS'required'
p115592
I00
sS'group_name'
p115593
S'Advanced'
p115594
sasS'name'
p115595
S'/UserObjects/InteractionIntegral'
p115596
sa(dp115597
S'description'
p115598
g3
sS'subblocks'
p115599
NsS'parameters'
p115600
(lp115601
(dp115602
S'description'
p115603
S'An additional volume to be included in the internal volume calculation\n'
p115604
sS'cpp_type'
p115605
S'double'
p115606
sS'default'
p115607
S'0'
p115608
sS'name'
p115609
S'addition'
p115610
sS'required'
p115611
I00
sS'group_name'
p115612
Nsa(dp115613
S'description'
p115614
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p115615
sS'cpp_type'
p115616
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p115617
sS'default'
p115618
g3
sS'name'
p115619
S'boundary'
p115620
sS'required'
p115621
I00
sS'group_name'
p115622
Nsa(dp115623
S'description'
p115624
S'The component to use in the integration\n'
p115625
sS'cpp_type'
p115626
S'unsigned int'
p115627
sS'default'
p115628
S'1'
p115629
sS'name'
p115630
S'component'
p115631
sS'required'
p115632
I00
sS'group_name'
p115633
Nsa(dp115634
S'description'
p115635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115636
sS'cpp_type'
p115637
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115638
sS'default'
p115639
g3
sS'name'
p115640
S'control_tags'
p115641
sS'required'
p115642
I00
sS'group_name'
p115643
Nsa(dp115644
S'name'
p115645
S'execute_on'
p115646
sS'cpp_type'
p115647
S'MultiMooseEnum'
p115648
sS'default'
p115649
S'TIMESTEP_END'
p115650
sS'description'
p115651
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115652
sS'required'
p115653
I00
sS'options'
p115654
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p115655
sS'group_name'
p115656
Nsa(dp115657
S'description'
p115658
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115659
sS'cpp_type'
p115660
S'std::vector<OutputName, std::allocator<OutputName> >'
p115661
sS'default'
p115662
g3
sS'name'
p115663
S'outputs'
p115664
sS'required'
p115665
I00
sS'group_name'
p115666
S'Advanced'
p115667
sa(dp115668
S'description'
p115669
S'A scale factor to be applied to the internal volume calculation\n'
p115670
sS'cpp_type'
p115671
S'double'
p115672
sS'default'
p115673
S'1'
p115674
sS'name'
p115675
S'scale_factor'
p115676
sS'required'
p115677
I00
sS'group_name'
p115678
Nsa(dp115679
S'description'
p115680
g3
sS'cpp_type'
p115681
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115682
sS'default'
p115683
S'InternalVolume'
p115684
sS'name'
p115685
S'type'
p115686
sS'required'
p115687
I00
sS'group_name'
p115688
Nsa(dp115689
S'description'
p115690
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115691
sS'cpp_type'
p115692
S'bool'
p115693
sS'default'
p115694
S'1'
p115695
sS'name'
p115696
S'use_displaced_mesh'
p115697
sS'required'
p115698
I00
sS'group_name'
p115699
S'Advanced'
p115700
sasS'name'
p115701
S'/UserObjects/InternalVolume'
p115702
sa(dp115703
S'description'
p115704
g3
sS'subblocks'
p115705
NsS'parameters'
p115706
(lp115707
(dp115708
S'description'
p115709
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115710
sS'cpp_type'
p115711
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115712
sS'default'
p115713
g3
sS'name'
p115714
S'block'
p115715
sS'required'
p115716
I00
sS'group_name'
p115717
Nsa(dp115718
S'description'
p115719
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115720
sS'cpp_type'
p115721
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115722
sS'default'
p115723
g3
sS'name'
p115724
S'control_tags'
p115725
sS'required'
p115726
I00
sS'group_name'
p115727
Nsa(dp115728
S'description'
p115729
S'Convert J-integral to stress intensity factor K.\n'
p115730
sS'cpp_type'
p115731
S'bool'
p115732
sS'default'
p115733
S'0'
p115734
sS'name'
p115735
S'convert_J_to_K'
p115736
sS'required'
p115737
I00
sS'group_name'
p115738
Nsa(dp115739
S'description'
p115740
S'The CrackFrontDefinition user object name\n'
p115741
sS'cpp_type'
p115742
S'UserObjectName'
p115743
sS'default'
p115744
g3
sS'name'
p115745
S'crack_front_definition'
p115746
sS'required'
p115747
I01
sS'group_name'
p115748
Nsa(dp115749
S'description'
p115750
S'The index of the point on the crack front corresponding to this q function\n'
p115751
sS'cpp_type'
p115752
S'unsigned int'
p115753
sS'default'
p115754
g3
sS'name'
p115755
S'crack_front_point_index'
p115756
sS'required'
p115757
I00
sS'group_name'
p115758
Nsa(dp115759
S'name'
p115760
S'execute_on'
p115761
sS'cpp_type'
p115762
S'MultiMooseEnum'
p115763
sS'default'
p115764
S'TIMESTEP_END'
p115765
sS'description'
p115766
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115767
sS'required'
p115768
I00
sS'options'
p115769
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p115770
sS'group_name'
p115771
Nsa(dp115772
S'description'
p115773
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p115774
sS'cpp_type'
p115775
S'std::vector<OutputName, std::allocator<OutputName> >'
p115776
sS'default'
p115777
g3
sS'name'
p115778
S'outputs'
p115779
sS'required'
p115780
I00
sS'group_name'
p115781
S'Advanced'
p115782
sa(dp115783
S'description'
p115784
S"Poisson's ratio\n"
p115785
sS'cpp_type'
p115786
S'double'
p115787
sS'default'
p115788
g3
sS'name'
p115789
S'poissons_ratio'
p115790
sS'required'
p115791
I00
sS'group_name'
p115792
Nsa(dp115793
S'description'
p115794
S'The q function, aux variable\n'
p115795
sS'cpp_type'
p115796
S'std::vector<VariableName>'
p115797
sS'default'
p115798
g3
sS'name'
p115799
S'q'
p115800
sS'required'
p115801
I00
sS'group_name'
p115802
Nsa(dp115803
S'description'
p115804
S'The seed for the master random number generator\n'
p115805
sS'cpp_type'
p115806
S'unsigned int'
p115807
sS'default'
p115808
S'0'
p115809
sS'name'
p115810
S'seed'
p115811
sS'required'
p115812
I00
sS'group_name'
p115813
S'Advanced'
p115814
sa(dp115815
S'description'
p115816
S'Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n'
p115817
sS'cpp_type'
p115818
S'unsigned int'
p115819
sS'default'
p115820
g3
sS'name'
p115821
S'symmetry_plane'
p115822
sS'required'
p115823
I00
sS'group_name'
p115824
Nsa(dp115825
S'description'
p115826
g3
sS'cpp_type'
p115827
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115828
sS'default'
p115829
S'JIntegral'
p115830
sS'name'
p115831
S'type'
p115832
sS'required'
p115833
I00
sS'group_name'
p115834
Nsa(dp115835
S'description'
p115836
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115837
sS'cpp_type'
p115838
S'bool'
p115839
sS'default'
p115840
S'0'
p115841
sS'name'
p115842
S'use_displaced_mesh'
p115843
sS'required'
p115844
I00
sS'group_name'
p115845
S'Advanced'
p115846
sa(dp115847
S'description'
p115848
S"Young's modulus of the material.\n"
p115849
sS'cpp_type'
p115850
S'double'
p115851
sS'default'
p115852
g3
sS'name'
p115853
S'youngs_modulus'
p115854
sS'required'
p115855
I00
sS'group_name'
p115856
NsasS'name'
p115857
S'/UserObjects/JIntegral'
p115858
sa(dp115859
S'description'
p115860
g3
sS'subblocks'
p115861
NsS'parameters'
p115862
(lp115863
(dp115864
S'description'
p115865
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p115866
sS'cpp_type'
p115867
S'unsigned int'
p115868
sS'default'
p115869
S'1'
p115870
sS'name'
p115871
S'average_radius'
p115872
sS'required'
p115873
I00
sS'group_name'
p115874
Nsa(dp115875
S'description'
p115876
S'The list of block ids (SubdomainID) that this object will be applied\n'
p115877
sS'cpp_type'
p115878
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p115879
sS'default'
p115880
g3
sS'name'
p115881
S'block'
p115882
sS'required'
p115883
I00
sS'group_name'
p115884
Nsa(dp115885
S'description'
p115886
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p115887
sS'cpp_type'
p115888
S'std::vector<double, std::allocator<double> >'
p115889
sS'default'
p115890
g3
sS'name'
p115891
S'bounds'
p115892
sS'required'
p115893
I00
sS'group_name'
p115894
Nsa(dp115895
S'description'
p115896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p115897
sS'cpp_type'
p115898
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p115899
sS'default'
p115900
g3
sS'name'
p115901
S'control_tags'
p115902
sS'required'
p115903
I00
sS'group_name'
p115904
Nsa(dp115905
S'name'
p115906
S'direction'
p115907
sS'cpp_type'
p115908
S'MooseEnum'
p115909
sS'default'
p115910
g3
sS'description'
p115911
S'The direction of the layers.\n'
p115912
sS'required'
p115913
I01
sS'options'
p115914
S'x y z'
p115915
sS'group_name'
p115916
Nsa(dp115917
S'name'
p115918
S'execute_on'
p115919
sS'cpp_type'
p115920
S'MultiMooseEnum'
p115921
sS'default'
p115922
S'TIMESTEP_END'
p115923
sS'description'
p115924
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p115925
sS'required'
p115926
I00
sS'options'
p115927
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p115928
sS'group_name'
p115929
Nsa(dp115930
S'description'
p115931
S'The number of layers.\n'
p115932
sS'cpp_type'
p115933
S'unsigned int'
p115934
sS'default'
p115935
g3
sS'name'
p115936
S'num_layers'
p115937
sS'required'
p115938
I00
sS'group_name'
p115939
Nsa(dp115940
S'name'
p115941
S'sample_type'
p115942
sS'cpp_type'
p115943
S'MooseEnum'
p115944
sS'default'
p115945
S'direct'
p115946
sS'description'
p115947
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p115948
sS'required'
p115949
I00
sS'options'
p115950
S'direct interpolate average'
p115951
sS'group_name'
p115952
Nsa(dp115953
S'description'
p115954
S'The seed for the master random number generator\n'
p115955
sS'cpp_type'
p115956
S'unsigned int'
p115957
sS'default'
p115958
S'0'
p115959
sS'name'
p115960
S'seed'
p115961
sS'required'
p115962
I00
sS'group_name'
p115963
S'Advanced'
p115964
sa(dp115965
S'description'
p115966
g3
sS'cpp_type'
p115967
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p115968
sS'default'
p115969
S'LayeredAverage'
p115970
sS'name'
p115971
S'type'
p115972
sS'required'
p115973
I00
sS'group_name'
p115974
Nsa(dp115975
S'description'
p115976
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p115977
sS'cpp_type'
p115978
S'bool'
p115979
sS'default'
p115980
S'0'
p115981
sS'name'
p115982
S'use_displaced_mesh'
p115983
sS'required'
p115984
I00
sS'group_name'
p115985
S'Advanced'
p115986
sa(dp115987
S'description'
p115988
S'The name of the variable that this object operates on\n'
p115989
sS'cpp_type'
p115990
S'std::vector<VariableName>'
p115991
sS'default'
p115992
g3
sS'name'
p115993
S'variable'
p115994
sS'required'
p115995
I00
sS'group_name'
p115996
NsasS'name'
p115997
S'/UserObjects/LayeredAverage'
p115998
sa(dp115999
S'description'
p116000
g3
sS'subblocks'
p116001
NsS'parameters'
p116002
(lp116003
(dp116004
S'description'
p116005
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116006
sS'cpp_type'
p116007
S'unsigned int'
p116008
sS'default'
p116009
S'1'
p116010
sS'name'
p116011
S'average_radius'
p116012
sS'required'
p116013
I00
sS'group_name'
p116014
Nsa(dp116015
S'description'
p116016
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116017
sS'cpp_type'
p116018
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116019
sS'default'
p116020
g3
sS'name'
p116021
S'block'
p116022
sS'required'
p116023
I00
sS'group_name'
p116024
Nsa(dp116025
S'description'
p116026
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116027
sS'cpp_type'
p116028
S'std::vector<double, std::allocator<double> >'
p116029
sS'default'
p116030
g3
sS'name'
p116031
S'bounds'
p116032
sS'required'
p116033
I00
sS'group_name'
p116034
Nsa(dp116035
S'description'
p116036
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116037
sS'cpp_type'
p116038
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116039
sS'default'
p116040
g3
sS'name'
p116041
S'control_tags'
p116042
sS'required'
p116043
I00
sS'group_name'
p116044
Nsa(dp116045
S'name'
p116046
S'direction'
p116047
sS'cpp_type'
p116048
S'MooseEnum'
p116049
sS'default'
p116050
g3
sS'description'
p116051
S'The direction of the layers.\n'
p116052
sS'required'
p116053
I01
sS'options'
p116054
S'x y z'
p116055
sS'group_name'
p116056
Nsa(dp116057
S'name'
p116058
S'execute_on'
p116059
sS'cpp_type'
p116060
S'MultiMooseEnum'
p116061
sS'default'
p116062
S'TIMESTEP_END'
p116063
sS'description'
p116064
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116065
sS'required'
p116066
I00
sS'options'
p116067
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116068
sS'group_name'
p116069
Nsa(dp116070
S'description'
p116071
S'The number of layers.\n'
p116072
sS'cpp_type'
p116073
S'unsigned int'
p116074
sS'default'
p116075
g3
sS'name'
p116076
S'num_layers'
p116077
sS'required'
p116078
I00
sS'group_name'
p116079
Nsa(dp116080
S'name'
p116081
S'sample_type'
p116082
sS'cpp_type'
p116083
S'MooseEnum'
p116084
sS'default'
p116085
S'direct'
p116086
sS'description'
p116087
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116088
sS'required'
p116089
I00
sS'options'
p116090
S'direct interpolate average'
p116091
sS'group_name'
p116092
Nsa(dp116093
S'description'
p116094
S'The seed for the master random number generator\n'
p116095
sS'cpp_type'
p116096
S'unsigned int'
p116097
sS'default'
p116098
S'0'
p116099
sS'name'
p116100
S'seed'
p116101
sS'required'
p116102
I00
sS'group_name'
p116103
S'Advanced'
p116104
sa(dp116105
S'description'
p116106
g3
sS'cpp_type'
p116107
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116108
sS'default'
p116109
S'LayeredIntegral'
p116110
sS'name'
p116111
S'type'
p116112
sS'required'
p116113
I00
sS'group_name'
p116114
Nsa(dp116115
S'description'
p116116
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116117
sS'cpp_type'
p116118
S'bool'
p116119
sS'default'
p116120
S'0'
p116121
sS'name'
p116122
S'use_displaced_mesh'
p116123
sS'required'
p116124
I00
sS'group_name'
p116125
S'Advanced'
p116126
sa(dp116127
S'description'
p116128
S'The name of the variable that this object operates on\n'
p116129
sS'cpp_type'
p116130
S'std::vector<VariableName>'
p116131
sS'default'
p116132
g3
sS'name'
p116133
S'variable'
p116134
sS'required'
p116135
I00
sS'group_name'
p116136
NsasS'name'
p116137
S'/UserObjects/LayeredIntegral'
p116138
sa(dp116139
S'description'
p116140
g3
sS'subblocks'
p116141
NsS'parameters'
p116142
(lp116143
(dp116144
S'description'
p116145
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116146
sS'cpp_type'
p116147
S'unsigned int'
p116148
sS'default'
p116149
S'1'
p116150
sS'name'
p116151
S'average_radius'
p116152
sS'required'
p116153
I00
sS'group_name'
p116154
Nsa(dp116155
S'description'
p116156
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116157
sS'cpp_type'
p116158
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116159
sS'default'
p116160
g3
sS'name'
p116161
S'boundary'
p116162
sS'required'
p116163
I00
sS'group_name'
p116164
Nsa(dp116165
S'description'
p116166
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116167
sS'cpp_type'
p116168
S'std::vector<double, std::allocator<double> >'
p116169
sS'default'
p116170
g3
sS'name'
p116171
S'bounds'
p116172
sS'required'
p116173
I00
sS'group_name'
p116174
Nsa(dp116175
S'description'
p116176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116177
sS'cpp_type'
p116178
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116179
sS'default'
p116180
g3
sS'name'
p116181
S'control_tags'
p116182
sS'required'
p116183
I00
sS'group_name'
p116184
Nsa(dp116185
S'name'
p116186
S'direction'
p116187
sS'cpp_type'
p116188
S'MooseEnum'
p116189
sS'default'
p116190
g3
sS'description'
p116191
S'The direction of the layers.\n'
p116192
sS'required'
p116193
I01
sS'options'
p116194
S'x y z'
p116195
sS'group_name'
p116196
Nsa(dp116197
S'name'
p116198
S'execute_on'
p116199
sS'cpp_type'
p116200
S'MultiMooseEnum'
p116201
sS'default'
p116202
S'TIMESTEP_END'
p116203
sS'description'
p116204
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116205
sS'required'
p116206
I00
sS'options'
p116207
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116208
sS'group_name'
p116209
Nsa(dp116210
S'description'
p116211
S'The number of layers.\n'
p116212
sS'cpp_type'
p116213
S'unsigned int'
p116214
sS'default'
p116215
g3
sS'name'
p116216
S'num_layers'
p116217
sS'required'
p116218
I00
sS'group_name'
p116219
Nsa(dp116220
S'name'
p116221
S'sample_type'
p116222
sS'cpp_type'
p116223
S'MooseEnum'
p116224
sS'default'
p116225
S'direct'
p116226
sS'description'
p116227
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116228
sS'required'
p116229
I00
sS'options'
p116230
S'direct interpolate average'
p116231
sS'group_name'
p116232
Nsa(dp116233
S'description'
p116234
g3
sS'cpp_type'
p116235
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116236
sS'default'
p116237
S'LayeredSideAverage'
p116238
sS'name'
p116239
S'type'
p116240
sS'required'
p116241
I00
sS'group_name'
p116242
Nsa(dp116243
S'description'
p116244
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116245
sS'cpp_type'
p116246
S'bool'
p116247
sS'default'
p116248
S'0'
p116249
sS'name'
p116250
S'use_displaced_mesh'
p116251
sS'required'
p116252
I00
sS'group_name'
p116253
S'Advanced'
p116254
sa(dp116255
S'description'
p116256
S'The name of the variable that this boundary condition applies to\n'
p116257
sS'cpp_type'
p116258
S'std::vector<VariableName>'
p116259
sS'default'
p116260
g3
sS'name'
p116261
S'variable'
p116262
sS'required'
p116263
I00
sS'group_name'
p116264
NsasS'name'
p116265
S'/UserObjects/LayeredSideAverage'
p116266
sa(dp116267
S'description'
p116268
g3
sS'subblocks'
p116269
NsS'parameters'
p116270
(lp116271
(dp116272
S'description'
p116273
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116274
sS'cpp_type'
p116275
S'unsigned int'
p116276
sS'default'
p116277
S'1'
p116278
sS'name'
p116279
S'average_radius'
p116280
sS'required'
p116281
I00
sS'group_name'
p116282
Nsa(dp116283
S'description'
p116284
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116285
sS'cpp_type'
p116286
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116287
sS'default'
p116288
g3
sS'name'
p116289
S'boundary'
p116290
sS'required'
p116291
I00
sS'group_name'
p116292
Nsa(dp116293
S'description'
p116294
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116295
sS'cpp_type'
p116296
S'std::vector<double, std::allocator<double> >'
p116297
sS'default'
p116298
g3
sS'name'
p116299
S'bounds'
p116300
sS'required'
p116301
I00
sS'group_name'
p116302
Nsa(dp116303
S'description'
p116304
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116305
sS'cpp_type'
p116306
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116307
sS'default'
p116308
g3
sS'name'
p116309
S'control_tags'
p116310
sS'required'
p116311
I00
sS'group_name'
p116312
Nsa(dp116313
S'description'
p116314
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p116315
sS'cpp_type'
p116316
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116317
sS'default'
p116318
g3
sS'name'
p116319
S'diffusivity'
p116320
sS'required'
p116321
I01
sS'group_name'
p116322
Nsa(dp116323
S'name'
p116324
S'direction'
p116325
sS'cpp_type'
p116326
S'MooseEnum'
p116327
sS'default'
p116328
g3
sS'description'
p116329
S'The direction of the layers.\n'
p116330
sS'required'
p116331
I01
sS'options'
p116332
S'x y z'
p116333
sS'group_name'
p116334
Nsa(dp116335
S'name'
p116336
S'execute_on'
p116337
sS'cpp_type'
p116338
S'MultiMooseEnum'
p116339
sS'default'
p116340
S'TIMESTEP_END'
p116341
sS'description'
p116342
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116343
sS'required'
p116344
I00
sS'options'
p116345
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116346
sS'group_name'
p116347
Nsa(dp116348
S'description'
p116349
S'The number of layers.\n'
p116350
sS'cpp_type'
p116351
S'unsigned int'
p116352
sS'default'
p116353
g3
sS'name'
p116354
S'num_layers'
p116355
sS'required'
p116356
I00
sS'group_name'
p116357
Nsa(dp116358
S'name'
p116359
S'sample_type'
p116360
sS'cpp_type'
p116361
S'MooseEnum'
p116362
sS'default'
p116363
S'direct'
p116364
sS'description'
p116365
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116366
sS'required'
p116367
I00
sS'options'
p116368
S'direct interpolate average'
p116369
sS'group_name'
p116370
Nsa(dp116371
S'description'
p116372
g3
sS'cpp_type'
p116373
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116374
sS'default'
p116375
S'LayeredSideFluxAverage'
p116376
sS'name'
p116377
S'type'
p116378
sS'required'
p116379
I00
sS'group_name'
p116380
Nsa(dp116381
S'description'
p116382
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116383
sS'cpp_type'
p116384
S'bool'
p116385
sS'default'
p116386
S'0'
p116387
sS'name'
p116388
S'use_displaced_mesh'
p116389
sS'required'
p116390
I00
sS'group_name'
p116391
S'Advanced'
p116392
sa(dp116393
S'description'
p116394
S'The name of the variable that this boundary condition applies to\n'
p116395
sS'cpp_type'
p116396
S'std::vector<VariableName>'
p116397
sS'default'
p116398
g3
sS'name'
p116399
S'variable'
p116400
sS'required'
p116401
I00
sS'group_name'
p116402
NsasS'name'
p116403
S'/UserObjects/LayeredSideFluxAverage'
p116404
sa(dp116405
S'description'
p116406
g3
sS'subblocks'
p116407
NsS'parameters'
p116408
(lp116409
(dp116410
S'description'
p116411
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p116412
sS'cpp_type'
p116413
S'unsigned int'
p116414
sS'default'
p116415
S'1'
p116416
sS'name'
p116417
S'average_radius'
p116418
sS'required'
p116419
I00
sS'group_name'
p116420
Nsa(dp116421
S'description'
p116422
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p116423
sS'cpp_type'
p116424
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p116425
sS'default'
p116426
g3
sS'name'
p116427
S'boundary'
p116428
sS'required'
p116429
I00
sS'group_name'
p116430
Nsa(dp116431
S'description'
p116432
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p116433
sS'cpp_type'
p116434
S'std::vector<double, std::allocator<double> >'
p116435
sS'default'
p116436
g3
sS'name'
p116437
S'bounds'
p116438
sS'required'
p116439
I00
sS'group_name'
p116440
Nsa(dp116441
S'description'
p116442
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116443
sS'cpp_type'
p116444
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116445
sS'default'
p116446
g3
sS'name'
p116447
S'control_tags'
p116448
sS'required'
p116449
I00
sS'group_name'
p116450
Nsa(dp116451
S'name'
p116452
S'direction'
p116453
sS'cpp_type'
p116454
S'MooseEnum'
p116455
sS'default'
p116456
g3
sS'description'
p116457
S'The direction of the layers.\n'
p116458
sS'required'
p116459
I01
sS'options'
p116460
S'x y z'
p116461
sS'group_name'
p116462
Nsa(dp116463
S'name'
p116464
S'execute_on'
p116465
sS'cpp_type'
p116466
S'MultiMooseEnum'
p116467
sS'default'
p116468
S'TIMESTEP_END'
p116469
sS'description'
p116470
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116471
sS'required'
p116472
I00
sS'options'
p116473
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116474
sS'group_name'
p116475
Nsa(dp116476
S'description'
p116477
S'The number of layers.\n'
p116478
sS'cpp_type'
p116479
S'unsigned int'
p116480
sS'default'
p116481
g3
sS'name'
p116482
S'num_layers'
p116483
sS'required'
p116484
I00
sS'group_name'
p116485
Nsa(dp116486
S'name'
p116487
S'sample_type'
p116488
sS'cpp_type'
p116489
S'MooseEnum'
p116490
sS'default'
p116491
S'direct'
p116492
sS'description'
p116493
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p116494
sS'required'
p116495
I00
sS'options'
p116496
S'direct interpolate average'
p116497
sS'group_name'
p116498
Nsa(dp116499
S'description'
p116500
g3
sS'cpp_type'
p116501
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116502
sS'default'
p116503
S'LayeredSideIntegral'
p116504
sS'name'
p116505
S'type'
p116506
sS'required'
p116507
I00
sS'group_name'
p116508
Nsa(dp116509
S'description'
p116510
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116511
sS'cpp_type'
p116512
S'bool'
p116513
sS'default'
p116514
S'0'
p116515
sS'name'
p116516
S'use_displaced_mesh'
p116517
sS'required'
p116518
I00
sS'group_name'
p116519
S'Advanced'
p116520
sa(dp116521
S'description'
p116522
S'The name of the variable that this boundary condition applies to\n'
p116523
sS'cpp_type'
p116524
S'std::vector<VariableName>'
p116525
sS'default'
p116526
g3
sS'name'
p116527
S'variable'
p116528
sS'required'
p116529
I00
sS'group_name'
p116530
NsasS'name'
p116531
S'/UserObjects/LayeredSideIntegral'
p116532
sa(dp116533
S'description'
p116534
S'Userobject for masking/pinning grains and making forces and torques acting on that grain zero\n'
p116535
sS'subblocks'
p116536
NsS'parameters'
p116537
(lp116538
(dp116539
S'description'
p116540
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116541
sS'cpp_type'
p116542
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116543
sS'default'
p116544
g3
sS'name'
p116545
S'control_tags'
p116546
sS'required'
p116547
I00
sS'group_name'
p116548
Nsa(dp116549
S'name'
p116550
S'execute_on'
p116551
sS'cpp_type'
p116552
S'MultiMooseEnum'
p116553
sS'default'
p116554
S'TIMESTEP_END'
p116555
sS'description'
p116556
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116557
sS'required'
p116558
I00
sS'options'
p116559
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116560
sS'group_name'
p116561
Nsa(dp116562
S'description'
p116563
S'userobject for getting force and torque acting on grains\n'
p116564
sS'cpp_type'
p116565
S'UserObjectName'
p116566
sS'default'
p116567
g3
sS'name'
p116568
S'grain_force'
p116569
sS'required'
p116570
I00
sS'group_name'
p116571
Nsa(dp116572
S'description'
p116573
S'Grain numbers for pinned grains\n'
p116574
sS'cpp_type'
p116575
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p116576
sS'default'
p116577
g3
sS'name'
p116578
S'pinned_grains'
p116579
sS'required'
p116580
I00
sS'group_name'
p116581
Nsa(dp116582
S'description'
p116583
g3
sS'cpp_type'
p116584
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116585
sS'default'
p116586
S'MaskedGrainForceAndTorque'
p116587
sS'name'
p116588
S'type'
p116589
sS'required'
p116590
I00
sS'group_name'
p116591
Nsa(dp116592
S'description'
p116593
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116594
sS'cpp_type'
p116595
S'bool'
p116596
sS'default'
p116597
S'0'
p116598
sS'name'
p116599
S'use_displaced_mesh'
p116600
sS'required'
p116601
I00
sS'group_name'
p116602
S'Advanced'
p116603
sasS'name'
p116604
S'/UserObjects/MaskedGrainForceAndTorque'
p116605
sa(dp116606
S'description'
p116607
g3
sS'subblocks'
p116608
NsS'parameters'
p116609
(lp116610
(dp116611
S'description'
p116612
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116613
sS'cpp_type'
p116614
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116615
sS'default'
p116616
g3
sS'name'
p116617
S'block'
p116618
sS'required'
p116619
I00
sS'group_name'
p116620
Nsa(dp116621
S'description'
p116622
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116623
sS'cpp_type'
p116624
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116625
sS'default'
p116626
g3
sS'name'
p116627
S'control_tags'
p116628
sS'required'
p116629
I00
sS'group_name'
p116630
Nsa(dp116631
S'name'
p116632
S'execute_on'
p116633
sS'cpp_type'
p116634
S'MultiMooseEnum'
p116635
sS'default'
p116636
S'TIMESTEP_END'
p116637
sS'description'
p116638
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116639
sS'required'
p116640
I00
sS'options'
p116641
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116642
sS'group_name'
p116643
Nsa(dp116644
S'description'
p116645
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p116646
sS'cpp_type'
p116647
S'std::vector<OutputName, std::allocator<OutputName> >'
p116648
sS'default'
p116649
g3
sS'name'
p116650
S'outputs'
p116651
sS'required'
p116652
I00
sS'group_name'
p116653
S'Advanced'
p116654
sa(dp116655
S'description'
p116656
S'The seed for the master random number generator\n'
p116657
sS'cpp_type'
p116658
S'unsigned int'
p116659
sS'default'
p116660
S'0'
p116661
sS'name'
p116662
S'seed'
p116663
sS'required'
p116664
I00
sS'group_name'
p116665
S'Advanced'
p116666
sa(dp116667
S'description'
p116668
g3
sS'cpp_type'
p116669
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116670
sS'default'
p116671
S'Mass'
p116672
sS'name'
p116673
S'type'
p116674
sS'required'
p116675
I00
sS'group_name'
p116676
Nsa(dp116677
S'description'
p116678
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116679
sS'cpp_type'
p116680
S'bool'
p116681
sS'default'
p116682
S'1'
p116683
sS'name'
p116684
S'use_displaced_mesh'
p116685
sS'required'
p116686
I00
sS'group_name'
p116687
S'Advanced'
p116688
sa(dp116689
S'description'
p116690
S'The name of the variable that this object operates on\n'
p116691
sS'cpp_type'
p116692
S'std::vector<VariableName>'
p116693
sS'default'
p116694
g3
sS'name'
p116695
S'variable'
p116696
sS'required'
p116697
I00
sS'group_name'
p116698
NsasS'name'
p116699
S'/UserObjects/Mass'
p116700
sa(dp116701
S'description'
p116702
g3
sS'subblocks'
p116703
NsS'parameters'
p116704
(lp116705
(dp116706
S'description'
p116707
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116708
sS'cpp_type'
p116709
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116710
sS'default'
p116711
g3
sS'name'
p116712
S'block'
p116713
sS'required'
p116714
I00
sS'group_name'
p116715
Nsa(dp116716
S'description'
p116717
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116718
sS'cpp_type'
p116719
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116720
sS'default'
p116721
g3
sS'name'
p116722
S'control_tags'
p116723
sS'required'
p116724
I00
sS'group_name'
p116725
Nsa(dp116726
S'description'
p116727
S'Direction vector\n'
p116728
sS'cpp_type'
p116729
S'libMesh::VectorValue<double>'
p116730
sS'default'
p116731
S'1 0 0'
p116732
sS'name'
p116733
S'direction'
p116734
sS'required'
p116735
I00
sS'group_name'
p116736
Nsa(dp116737
S'name'
p116738
S'execute_on'
p116739
sS'cpp_type'
p116740
S'MultiMooseEnum'
p116741
sS'default'
p116742
S'TIMESTEP_END'
p116743
sS'description'
p116744
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116745
sS'required'
p116746
I00
sS'options'
p116747
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116748
sS'group_name'
p116749
Nsa(dp116750
S'description'
p116751
S'The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n'
p116752
sS'cpp_type'
p116753
S'int'
p116754
sS'default'
p116755
S'-1'
p116756
sS'name'
p116757
S'index'
p116758
sS'required'
p116759
I00
sS'group_name'
p116760
Nsa(dp116761
S'description'
p116762
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p116763
sS'cpp_type'
p116764
S'std::vector<OutputName, std::allocator<OutputName> >'
p116765
sS'default'
p116766
g3
sS'name'
p116767
S'outputs'
p116768
sS'required'
p116769
I00
sS'group_name'
p116770
S'Advanced'
p116771
sa(dp116772
S'description'
p116773
S'Start point for axis used to calculate some material tensor quantities\n'
p116774
sS'cpp_type'
p116775
S'libMesh::VectorValue<double>'
p116776
sS'default'
p116777
S'0 0 0'
p116778
sS'name'
p116779
S'point1'
p116780
sS'required'
p116781
I00
sS'group_name'
p116782
Nsa(dp116783
S'description'
p116784
S'End point for axis used to calculate some material tensor quantities\n'
p116785
sS'cpp_type'
p116786
S'libMesh::VectorValue<double>'
p116787
sS'default'
p116788
S'0 1 0'
p116789
sS'name'
p116790
S'point2'
p116791
sS'required'
p116792
I00
sS'group_name'
p116793
Nsa(dp116794
S'name'
p116795
S'quantity'
p116796
sS'cpp_type'
p116797
S'MooseEnum'
p116798
sS'default'
p116799
g3
sS'description'
p116800
S'A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n'
p116801
sS'required'
p116802
I00
sS'options'
p116803
S'VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain'
p116804
sS'group_name'
p116805
Nsa(dp116806
S'description'
p116807
S'The seed for the master random number generator\n'
p116808
sS'cpp_type'
p116809
S'unsigned int'
p116810
sS'default'
p116811
S'0'
p116812
sS'name'
p116813
S'seed'
p116814
sS'required'
p116815
I00
sS'group_name'
p116816
S'Advanced'
p116817
sa(dp116818
S'description'
p116819
S'The material tensor name.\n'
p116820
sS'cpp_type'
p116821
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116822
sS'default'
p116823
g3
sS'name'
p116824
S'tensor'
p116825
sS'required'
p116826
I01
sS'group_name'
p116827
Nsa(dp116828
S'description'
p116829
g3
sS'cpp_type'
p116830
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116831
sS'default'
p116832
S'MaterialTensorIntegral'
p116833
sS'name'
p116834
S'type'
p116835
sS'required'
p116836
I00
sS'group_name'
p116837
Nsa(dp116838
S'description'
p116839
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p116840
sS'cpp_type'
p116841
S'bool'
p116842
sS'default'
p116843
S'1'
p116844
sS'name'
p116845
S'use_displaced_mesh'
p116846
sS'required'
p116847
I00
sS'group_name'
p116848
S'Advanced'
p116849
sasS'name'
p116850
S'/UserObjects/MaterialTensorIntegral'
p116851
sa(dp116852
S'description'
p116853
g3
sS'subblocks'
p116854
NsS'parameters'
p116855
(lp116856
(dp116857
S'description'
p116858
S'The list of block ids (SubdomainID) that this object will be applied\n'
p116859
sS'cpp_type'
p116860
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p116861
sS'default'
p116862
g3
sS'name'
p116863
S'block'
p116864
sS'required'
p116865
I00
sS'group_name'
p116866
Nsa(dp116867
S'description'
p116868
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p116869
sS'cpp_type'
p116870
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p116871
sS'default'
p116872
g3
sS'name'
p116873
S'control_tags'
p116874
sS'required'
p116875
I00
sS'group_name'
p116876
Nsa(dp116877
S'description'
p116878
S'Direction vector\n'
p116879
sS'cpp_type'
p116880
S'libMesh::VectorValue<double>'
p116881
sS'default'
p116882
S'1 0 0'
p116883
sS'name'
p116884
S'direction'
p116885
sS'required'
p116886
I00
sS'group_name'
p116887
Nsa(dp116888
S'description'
p116889
S'Element line ID: if not zero, output stress at integration points\n'
p116890
sS'cpp_type'
p116891
S'std::vector<VariableName>'
p116892
sS'default'
p116893
g3
sS'name'
p116894
S'element_line_id'
p116895
sS'required'
p116896
I00
sS'group_name'
p116897
Nsa(dp116898
S'name'
p116899
S'execute_on'
p116900
sS'cpp_type'
p116901
S'MultiMooseEnum'
p116902
sS'default'
p116903
S'TIMESTEP_END'
p116904
sS'description'
p116905
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p116906
sS'required'
p116907
I00
sS'options'
p116908
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p116909
sS'group_name'
p116910
Nsa(dp116911
S'description'
p116912
S'Output file name\n'
p116913
sS'cpp_type'
p116914
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p116915
sS'default'
p116916
g3
sS'name'
p116917
S'filename'
p116918
sS'required'
p116919
I01
sS'group_name'
p116920
Nsa(dp116921
S'description'
p116922
S'The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n'
p116923
sS'cpp_type'
p116924
S'int'
p116925
sS'default'
p116926
S'-1'
p116927
sS'name'
p116928
S'index'
p116929
sS'required'
p116930
I00
sS'group_name'
p116931
Nsa(dp116932
S'description'
p116933
S'ID of the line of elements to output stresses on\n'
p116934
sS'cpp_type'
p116935
S'int'
p116936
sS'default'
p116937
S'1'
p116938
sS'name'
p116939
S'line_id'
p116940
sS'required'
p116941
I00
sS'group_name'
p116942
Nsa(dp116943
S'description'
p116944
S'Start point of line along which material data is output\n'
p116945
sS'cpp_type'
p116946
S'libMesh::VectorValue<double>'
p116947
sS'default'
p116948
S'0 0 0'
p116949
sS'name'
p116950
S'line_point1'
p116951
sS'required'
p116952
I00
sS'group_name'
p116953
Nsa(dp116954
S'description'
p116955
S'End point of line along which material data is output\n'
p116956
sS'cpp_type'
p116957
S'libMesh::VectorValue<double>'
p116958
sS'default'
p116959
S'0 1 0'
p116960
sS'name'
p116961
S'line_point2'
p116962
sS'required'
p116963
I00
sS'group_name'
p116964
Nsa(dp116965
S'description'
p116966
S'Start point for axis used to calculate some material tensor quantities\n'
p116967
sS'cpp_type'
p116968
S'libMesh::VectorValue<double>'
p116969
sS'default'
p116970
S'0 0 0'
p116971
sS'name'
p116972
S'point1'
p116973
sS'required'
p116974
I00
sS'group_name'
p116975
Nsa(dp116976
S'description'
p116977
S'End point for axis used to calculate some material tensor quantities\n'
p116978
sS'cpp_type'
p116979
S'libMesh::VectorValue<double>'
p116980
sS'default'
p116981
S'0 1 0'
p116982
sS'name'
p116983
S'point2'
p116984
sS'required'
p116985
I00
sS'group_name'
p116986
Nsa(dp116987
S'name'
p116988
S'quantity'
p116989
sS'cpp_type'
p116990
S'MooseEnum'
p116991
sS'default'
p116992
g3
sS'description'
p116993
S'A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n'
p116994
sS'required'
p116995
I00
sS'options'
p116996
S'VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain'
p116997
sS'group_name'
p116998
Nsa(dp116999
S'description'
p117000
S'The seed for the master random number generator\n'
p117001
sS'cpp_type'
p117002
S'unsigned int'
p117003
sS'default'
p117004
S'0'
p117005
sS'name'
p117006
S'seed'
p117007
sS'required'
p117008
I00
sS'group_name'
p117009
S'Advanced'
p117010
sa(dp117011
S'description'
p117012
S'The material tensor name.\n'
p117013
sS'cpp_type'
p117014
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117015
sS'default'
p117016
g3
sS'name'
p117017
S'tensor'
p117018
sS'required'
p117019
I01
sS'group_name'
p117020
Nsa(dp117021
S'description'
p117022
g3
sS'cpp_type'
p117023
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117024
sS'default'
p117025
S'MaterialTensorOnLine'
p117026
sS'name'
p117027
S'type'
p117028
sS'required'
p117029
I00
sS'group_name'
p117030
Nsa(dp117031
S'description'
p117032
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117033
sS'cpp_type'
p117034
S'bool'
p117035
sS'default'
p117036
S'0'
p117037
sS'name'
p117038
S'use_displaced_mesh'
p117039
sS'required'
p117040
I00
sS'group_name'
p117041
S'Advanced'
p117042
sasS'name'
p117043
S'/UserObjects/MaterialTensorOnLine'
p117044
sa(dp117045
S'description'
p117046
g3
sS'subblocks'
p117047
NsS'parameters'
p117048
(lp117049
(dp117050
S'description'
p117051
S'The name of the KIII postprocessor\n'
p117052
sS'cpp_type'
p117053
S'PostprocessorName'
p117054
sS'default'
p117055
g3
sS'name'
p117056
S'KIII_name'
p117057
sS'required'
p117058
I01
sS'group_name'
p117059
Nsa(dp117060
S'description'
p117061
S'The name of the KII postprocessor\n'
p117062
sS'cpp_type'
p117063
S'PostprocessorName'
p117064
sS'default'
p117065
g3
sS'name'
p117066
S'KII_name'
p117067
sS'required'
p117068
I01
sS'group_name'
p117069
Nsa(dp117070
S'description'
p117071
S'The name of the KI postprocessor\n'
p117072
sS'cpp_type'
p117073
S'PostprocessorName'
p117074
sS'default'
p117075
g3
sS'name'
p117076
S'KI_name'
p117077
sS'required'
p117078
I01
sS'group_name'
p117079
Nsa(dp117080
S'description'
p117081
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117082
sS'cpp_type'
p117083
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117084
sS'default'
p117085
g3
sS'name'
p117086
S'control_tags'
p117087
sS'required'
p117088
I00
sS'group_name'
p117089
Nsa(dp117090
S'name'
p117091
S'execute_on'
p117092
sS'cpp_type'
p117093
S'MultiMooseEnum'
p117094
sS'default'
p117095
S'TIMESTEP_END'
p117096
sS'description'
p117097
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117098
sS'required'
p117099
I00
sS'options'
p117100
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117101
sS'group_name'
p117102
Nsa(dp117103
S'description'
p117104
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117105
sS'cpp_type'
p117106
S'std::vector<OutputName, std::allocator<OutputName> >'
p117107
sS'default'
p117108
g3
sS'name'
p117109
S'outputs'
p117110
sS'required'
p117111
I00
sS'group_name'
p117112
S'Advanced'
p117113
sa(dp117114
S'description'
p117115
S"Poisson's ratio for the material.\n"
p117116
sS'cpp_type'
p117117
S'double'
p117118
sS'default'
p117119
g3
sS'name'
p117120
S'poissons_ratio'
p117121
sS'required'
p117122
I01
sS'group_name'
p117123
Nsa(dp117124
S'description'
p117125
g3
sS'cpp_type'
p117126
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117127
sS'default'
p117128
S'MixedModeEquivalentK'
p117129
sS'name'
p117130
S'type'
p117131
sS'required'
p117132
I00
sS'group_name'
p117133
Nsa(dp117134
S'description'
p117135
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117136
sS'cpp_type'
p117137
S'bool'
p117138
sS'default'
p117139
S'0'
p117140
sS'name'
p117141
S'use_displaced_mesh'
p117142
sS'required'
p117143
I00
sS'group_name'
p117144
S'Advanced'
p117145
sasS'name'
p117146
S'/UserObjects/MixedModeEquivalentK'
p117147
sa(dp117148
S'description'
p117149
g3
sS'subblocks'
p117150
NsS'parameters'
p117151
(lp117152
(dp117153
S'description'
p117154
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p117155
sS'cpp_type'
p117156
S'unsigned int'
p117157
sS'default'
p117158
S'1'
p117159
sS'name'
p117160
S'average_radius'
p117161
sS'required'
p117162
I00
sS'group_name'
p117163
Nsa(dp117164
S'description'
p117165
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117166
sS'cpp_type'
p117167
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117168
sS'default'
p117169
g3
sS'name'
p117170
S'block'
p117171
sS'required'
p117172
I00
sS'group_name'
p117173
Nsa(dp117174
S'description'
p117175
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p117176
sS'cpp_type'
p117177
S'std::vector<double, std::allocator<double> >'
p117178
sS'default'
p117179
g3
sS'name'
p117180
S'bounds'
p117181
sS'required'
p117182
I00
sS'group_name'
p117183
Nsa(dp117184
S'description'
p117185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117186
sS'cpp_type'
p117187
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117188
sS'default'
p117189
g3
sS'name'
p117190
S'control_tags'
p117191
sS'required'
p117192
I00
sS'group_name'
p117193
Nsa(dp117194
S'name'
p117195
S'direction'
p117196
sS'cpp_type'
p117197
S'MooseEnum'
p117198
sS'default'
p117199
g3
sS'description'
p117200
S'The direction of the layers.\n'
p117201
sS'required'
p117202
I01
sS'options'
p117203
S'x y z'
p117204
sS'group_name'
p117205
Nsa(dp117206
S'name'
p117207
S'execute_on'
p117208
sS'cpp_type'
p117209
S'MultiMooseEnum'
p117210
sS'default'
p117211
S'TIMESTEP_END'
p117212
sS'description'
p117213
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117214
sS'required'
p117215
I00
sS'options'
p117216
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117217
sS'group_name'
p117218
Nsa(dp117219
S'description'
p117220
S'The number of layers.\n'
p117221
sS'cpp_type'
p117222
S'unsigned int'
p117223
sS'default'
p117224
g3
sS'name'
p117225
S'num_layers'
p117226
sS'required'
p117227
I00
sS'group_name'
p117228
Nsa(dp117229
S'description'
p117230
S'Layered averages will be computed in space closest to these points.\n'
p117231
sS'cpp_type'
p117232
S'std::vector<double, std::allocator<double> >'
p117233
sS'default'
p117234
g3
sS'name'
p117235
S'points'
p117236
sS'required'
p117237
I01
sS'group_name'
p117238
Nsa(dp117239
S'name'
p117240
S'sample_type'
p117241
sS'cpp_type'
p117242
S'MooseEnum'
p117243
sS'default'
p117244
S'direct'
p117245
sS'description'
p117246
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p117247
sS'required'
p117248
I00
sS'options'
p117249
S'direct interpolate average'
p117250
sS'group_name'
p117251
Nsa(dp117252
S'description'
p117253
S'The seed for the master random number generator\n'
p117254
sS'cpp_type'
p117255
S'unsigned int'
p117256
sS'default'
p117257
S'0'
p117258
sS'name'
p117259
S'seed'
p117260
sS'required'
p117261
I00
sS'group_name'
p117262
S'Advanced'
p117263
sa(dp117264
S'description'
p117265
g3
sS'cpp_type'
p117266
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117267
sS'default'
p117268
S'NearestPointLayeredAverage'
p117269
sS'name'
p117270
S'type'
p117271
sS'required'
p117272
I00
sS'group_name'
p117273
Nsa(dp117274
S'description'
p117275
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117276
sS'cpp_type'
p117277
S'bool'
p117278
sS'default'
p117279
S'0'
p117280
sS'name'
p117281
S'use_displaced_mesh'
p117282
sS'required'
p117283
I00
sS'group_name'
p117284
S'Advanced'
p117285
sa(dp117286
S'description'
p117287
S'The name of the variable that this object operates on\n'
p117288
sS'cpp_type'
p117289
S'std::vector<VariableName>'
p117290
sS'default'
p117291
g3
sS'name'
p117292
S'variable'
p117293
sS'required'
p117294
I00
sS'group_name'
p117295
NsasS'name'
p117296
S'/UserObjects/NearestPointLayeredAverage'
p117297
sa(dp117298
S'description'
p117299
g3
sS'subblocks'
p117300
NsS'parameters'
p117301
(lp117302
(dp117303
S'description'
p117304
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117305
sS'cpp_type'
p117306
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117307
sS'default'
p117308
g3
sS'name'
p117309
S'boundary'
p117310
sS'required'
p117311
I00
sS'group_name'
p117312
Nsa(dp117313
S'description'
p117314
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117315
sS'cpp_type'
p117316
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117317
sS'default'
p117318
g3
sS'name'
p117319
S'control_tags'
p117320
sS'required'
p117321
I00
sS'group_name'
p117322
Nsa(dp117323
S'name'
p117324
S'execute_on'
p117325
sS'cpp_type'
p117326
S'MultiMooseEnum'
p117327
sS'default'
p117328
S'LINEAR'
p117329
sS'description'
p117330
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117331
sS'required'
p117332
I00
sS'options'
p117333
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117334
sS'group_name'
p117335
Nsa(dp117336
S'description'
p117337
g3
sS'cpp_type'
p117338
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117339
sS'default'
p117340
S'NodalArea'
p117341
sS'name'
p117342
S'type'
p117343
sS'required'
p117344
I00
sS'group_name'
p117345
Nsa(dp117346
S'description'
p117347
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117348
sS'cpp_type'
p117349
S'bool'
p117350
sS'default'
p117351
S'0'
p117352
sS'name'
p117353
S'use_displaced_mesh'
p117354
sS'required'
p117355
I00
sS'group_name'
p117356
S'Advanced'
p117357
sa(dp117358
S'description'
p117359
S'The name of the variable that this boundary condition applies to\n'
p117360
sS'cpp_type'
p117361
S'std::vector<VariableName>'
p117362
sS'default'
p117363
g3
sS'name'
p117364
S'variable'
p117365
sS'required'
p117366
I00
sS'group_name'
p117367
NsasS'name'
p117368
S'/UserObjects/NodalArea'
p117369
sa(dp117370
S'description'
p117371
g3
sS'subblocks'
p117372
NsS'parameters'
p117373
(lp117374
(dp117375
S'description'
p117376
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117377
sS'cpp_type'
p117378
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117379
sS'default'
p117380
g3
sS'name'
p117381
S'block'
p117382
sS'required'
p117383
I00
sS'group_name'
p117384
Nsa(dp117385
S'description'
p117386
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117387
sS'cpp_type'
p117388
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117389
sS'default'
p117390
g3
sS'name'
p117391
S'boundary'
p117392
sS'required'
p117393
I00
sS'group_name'
p117394
Nsa(dp117395
S'description'
p117396
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117397
sS'cpp_type'
p117398
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117399
sS'default'
p117400
g3
sS'name'
p117401
S'control_tags'
p117402
sS'required'
p117403
I00
sS'group_name'
p117404
Nsa(dp117405
S'name'
p117406
S'execute_on'
p117407
sS'cpp_type'
p117408
S'MultiMooseEnum'
p117409
sS'default'
p117410
S'TIMESTEP_END'
p117411
sS'description'
p117412
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117413
sS'required'
p117414
I00
sS'options'
p117415
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117416
sS'group_name'
p117417
Nsa(dp117418
S'description'
p117419
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117420
sS'cpp_type'
p117421
S'std::vector<OutputName, std::allocator<OutputName> >'
p117422
sS'default'
p117423
g3
sS'name'
p117424
S'outputs'
p117425
sS'required'
p117426
I00
sS'group_name'
p117427
S'Advanced'
p117428
sa(dp117429
S'description'
p117430
S'The seed for the master random number generator\n'
p117431
sS'cpp_type'
p117432
S'unsigned int'
p117433
sS'default'
p117434
S'0'
p117435
sS'name'
p117436
S'seed'
p117437
sS'required'
p117438
I00
sS'group_name'
p117439
S'Advanced'
p117440
sa(dp117441
S'description'
p117442
g3
sS'cpp_type'
p117443
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117444
sS'default'
p117445
S'NodalExtremeValue'
p117446
sS'name'
p117447
S'type'
p117448
sS'required'
p117449
I00
sS'group_name'
p117450
Nsa(dp117451
S'description'
p117452
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117453
sS'cpp_type'
p117454
S'bool'
p117455
sS'default'
p117456
S'0'
p117457
sS'name'
p117458
S'use_displaced_mesh'
p117459
sS'required'
p117460
I00
sS'group_name'
p117461
S'Advanced'
p117462
sa(dp117463
S'name'
p117464
S'value_type'
p117465
sS'cpp_type'
p117466
S'MooseEnum'
p117467
sS'default'
p117468
S'max'
p117469
sS'description'
p117470
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p117471
sS'required'
p117472
I00
sS'options'
p117473
S'max min'
p117474
sS'group_name'
p117475
Nsa(dp117476
S'description'
p117477
S'The name of the variable that this postprocessor operates on\n'
p117478
sS'cpp_type'
p117479
S'std::vector<VariableName>'
p117480
sS'default'
p117481
g3
sS'name'
p117482
S'variable'
p117483
sS'required'
p117484
I00
sS'group_name'
p117485
NsasS'name'
p117486
S'/UserObjects/NodalExtremeValue'
p117487
sa(dp117488
S'description'
p117489
g3
sS'subblocks'
p117490
NsS'parameters'
p117491
(lp117492
(dp117493
S'description'
p117494
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117495
sS'cpp_type'
p117496
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117497
sS'default'
p117498
g3
sS'name'
p117499
S'block'
p117500
sS'required'
p117501
I00
sS'group_name'
p117502
Nsa(dp117503
S'description'
p117504
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117505
sS'cpp_type'
p117506
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117507
sS'default'
p117508
g3
sS'name'
p117509
S'boundary'
p117510
sS'required'
p117511
I00
sS'group_name'
p117512
Nsa(dp117513
S'description'
p117514
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117515
sS'cpp_type'
p117516
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117517
sS'default'
p117518
g3
sS'name'
p117519
S'control_tags'
p117520
sS'required'
p117521
I00
sS'group_name'
p117522
Nsa(dp117523
S'name'
p117524
S'execute_on'
p117525
sS'cpp_type'
p117526
S'MultiMooseEnum'
p117527
sS'default'
p117528
S'TIMESTEP_END'
p117529
sS'description'
p117530
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117531
sS'required'
p117532
I00
sS'options'
p117533
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117534
sS'group_name'
p117535
Nsa(dp117536
S'description'
p117537
S'The analytic solution to compare against\n'
p117538
sS'cpp_type'
p117539
S'FunctionName'
p117540
sS'default'
p117541
g3
sS'name'
p117542
S'function'
p117543
sS'required'
p117544
I01
sS'group_name'
p117545
Nsa(dp117546
S'description'
p117547
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117548
sS'cpp_type'
p117549
S'std::vector<OutputName, std::allocator<OutputName> >'
p117550
sS'default'
p117551
g3
sS'name'
p117552
S'outputs'
p117553
sS'required'
p117554
I00
sS'group_name'
p117555
S'Advanced'
p117556
sa(dp117557
S'description'
p117558
S'The seed for the master random number generator\n'
p117559
sS'cpp_type'
p117560
S'unsigned int'
p117561
sS'default'
p117562
S'0'
p117563
sS'name'
p117564
S'seed'
p117565
sS'required'
p117566
I00
sS'group_name'
p117567
S'Advanced'
p117568
sa(dp117569
S'description'
p117570
g3
sS'cpp_type'
p117571
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117572
sS'default'
p117573
S'NodalL2Error'
p117574
sS'name'
p117575
S'type'
p117576
sS'required'
p117577
I00
sS'group_name'
p117578
Nsa(dp117579
S'description'
p117580
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117581
sS'cpp_type'
p117582
S'bool'
p117583
sS'default'
p117584
S'0'
p117585
sS'name'
p117586
S'use_displaced_mesh'
p117587
sS'required'
p117588
I00
sS'group_name'
p117589
S'Advanced'
p117590
sa(dp117591
S'description'
p117592
S'The name of the variable that this postprocessor operates on\n'
p117593
sS'cpp_type'
p117594
S'std::vector<VariableName>'
p117595
sS'default'
p117596
g3
sS'name'
p117597
S'variable'
p117598
sS'required'
p117599
I00
sS'group_name'
p117600
NsasS'name'
p117601
S'/UserObjects/NodalL2Error'
p117602
sa(dp117603
S'description'
p117604
g3
sS'subblocks'
p117605
NsS'parameters'
p117606
(lp117607
(dp117608
S'description'
p117609
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117610
sS'cpp_type'
p117611
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117612
sS'default'
p117613
g3
sS'name'
p117614
S'block'
p117615
sS'required'
p117616
I00
sS'group_name'
p117617
Nsa(dp117618
S'description'
p117619
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117620
sS'cpp_type'
p117621
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117622
sS'default'
p117623
g3
sS'name'
p117624
S'boundary'
p117625
sS'required'
p117626
I00
sS'group_name'
p117627
Nsa(dp117628
S'description'
p117629
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117630
sS'cpp_type'
p117631
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117632
sS'default'
p117633
g3
sS'name'
p117634
S'control_tags'
p117635
sS'required'
p117636
I00
sS'group_name'
p117637
Nsa(dp117638
S'name'
p117639
S'execute_on'
p117640
sS'cpp_type'
p117641
S'MultiMooseEnum'
p117642
sS'default'
p117643
S'TIMESTEP_END'
p117644
sS'description'
p117645
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117646
sS'required'
p117647
I00
sS'options'
p117648
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117649
sS'group_name'
p117650
Nsa(dp117651
S'description'
p117652
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117653
sS'cpp_type'
p117654
S'std::vector<OutputName, std::allocator<OutputName> >'
p117655
sS'default'
p117656
g3
sS'name'
p117657
S'outputs'
p117658
sS'required'
p117659
I00
sS'group_name'
p117660
S'Advanced'
p117661
sa(dp117662
S'description'
p117663
S'The seed for the master random number generator\n'
p117664
sS'cpp_type'
p117665
S'unsigned int'
p117666
sS'default'
p117667
S'0'
p117668
sS'name'
p117669
S'seed'
p117670
sS'required'
p117671
I00
sS'group_name'
p117672
S'Advanced'
p117673
sa(dp117674
S'description'
p117675
g3
sS'cpp_type'
p117676
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117677
sS'default'
p117678
S'NodalL2Norm'
p117679
sS'name'
p117680
S'type'
p117681
sS'required'
p117682
I00
sS'group_name'
p117683
Nsa(dp117684
S'description'
p117685
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117686
sS'cpp_type'
p117687
S'bool'
p117688
sS'default'
p117689
S'0'
p117690
sS'name'
p117691
S'use_displaced_mesh'
p117692
sS'required'
p117693
I00
sS'group_name'
p117694
S'Advanced'
p117695
sa(dp117696
S'description'
p117697
S'The name of the variable that this postprocessor operates on\n'
p117698
sS'cpp_type'
p117699
S'std::vector<VariableName>'
p117700
sS'default'
p117701
g3
sS'name'
p117702
S'variable'
p117703
sS'required'
p117704
I00
sS'group_name'
p117705
NsasS'name'
p117706
S'/UserObjects/NodalL2Norm'
p117707
sa(dp117708
S'description'
p117709
g3
sS'subblocks'
p117710
NsS'parameters'
p117711
(lp117712
(dp117713
S'description'
p117714
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117715
sS'cpp_type'
p117716
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117717
sS'default'
p117718
g3
sS'name'
p117719
S'block'
p117720
sS'required'
p117721
I00
sS'group_name'
p117722
Nsa(dp117723
S'description'
p117724
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117725
sS'cpp_type'
p117726
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117727
sS'default'
p117728
g3
sS'name'
p117729
S'boundary'
p117730
sS'required'
p117731
I00
sS'group_name'
p117732
Nsa(dp117733
S'description'
p117734
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117735
sS'cpp_type'
p117736
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117737
sS'default'
p117738
g3
sS'name'
p117739
S'control_tags'
p117740
sS'required'
p117741
I00
sS'group_name'
p117742
Nsa(dp117743
S'name'
p117744
S'execute_on'
p117745
sS'cpp_type'
p117746
S'MultiMooseEnum'
p117747
sS'default'
p117748
S'TIMESTEP_END'
p117749
sS'description'
p117750
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117751
sS'required'
p117752
I00
sS'options'
p117753
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117754
sS'group_name'
p117755
Nsa(dp117756
S'description'
p117757
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117758
sS'cpp_type'
p117759
S'std::vector<OutputName, std::allocator<OutputName> >'
p117760
sS'default'
p117761
g3
sS'name'
p117762
S'outputs'
p117763
sS'required'
p117764
I00
sS'group_name'
p117765
S'Advanced'
p117766
sa(dp117767
S'description'
p117768
S'The seed for the master random number generator\n'
p117769
sS'cpp_type'
p117770
S'unsigned int'
p117771
sS'default'
p117772
S'0'
p117773
sS'name'
p117774
S'seed'
p117775
sS'required'
p117776
I00
sS'group_name'
p117777
S'Advanced'
p117778
sa(dp117779
S'description'
p117780
g3
sS'cpp_type'
p117781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117782
sS'default'
p117783
S'NodalMaxValue'
p117784
sS'name'
p117785
S'type'
p117786
sS'required'
p117787
I00
sS'group_name'
p117788
Nsa(dp117789
S'description'
p117790
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117791
sS'cpp_type'
p117792
S'bool'
p117793
sS'default'
p117794
S'0'
p117795
sS'name'
p117796
S'use_displaced_mesh'
p117797
sS'required'
p117798
I00
sS'group_name'
p117799
S'Advanced'
p117800
sa(dp117801
S'description'
p117802
S'The name of the variable that this postprocessor operates on\n'
p117803
sS'cpp_type'
p117804
S'std::vector<VariableName>'
p117805
sS'default'
p117806
g3
sS'name'
p117807
S'variable'
p117808
sS'required'
p117809
I00
sS'group_name'
p117810
NsasS'name'
p117811
S'/UserObjects/NodalMaxValue'
p117812
sa(dp117813
S'description'
p117814
S'This postprocessor returns the value max(abs(variable - variable_old)) for the specified variable.\n'
p117815
sS'subblocks'
p117816
NsS'parameters'
p117817
(lp117818
(dp117819
S'description'
p117820
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117821
sS'cpp_type'
p117822
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p117823
sS'default'
p117824
g3
sS'name'
p117825
S'block'
p117826
sS'required'
p117827
I00
sS'group_name'
p117828
Nsa(dp117829
S'description'
p117830
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117831
sS'cpp_type'
p117832
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117833
sS'default'
p117834
g3
sS'name'
p117835
S'boundary'
p117836
sS'required'
p117837
I00
sS'group_name'
p117838
Nsa(dp117839
S'description'
p117840
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117841
sS'cpp_type'
p117842
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117843
sS'default'
p117844
g3
sS'name'
p117845
S'control_tags'
p117846
sS'required'
p117847
I00
sS'group_name'
p117848
Nsa(dp117849
S'name'
p117850
S'execute_on'
p117851
sS'cpp_type'
p117852
S'MultiMooseEnum'
p117853
sS'default'
p117854
S'TIMESTEP_END'
p117855
sS'description'
p117856
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117857
sS'required'
p117858
I00
sS'options'
p117859
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117860
sS'group_name'
p117861
Nsa(dp117862
S'description'
p117863
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p117864
sS'cpp_type'
p117865
S'std::vector<OutputName, std::allocator<OutputName> >'
p117866
sS'default'
p117867
g3
sS'name'
p117868
S'outputs'
p117869
sS'required'
p117870
I00
sS'group_name'
p117871
S'Advanced'
p117872
sa(dp117873
S'description'
p117874
S'The seed for the master random number generator\n'
p117875
sS'cpp_type'
p117876
S'unsigned int'
p117877
sS'default'
p117878
S'0'
p117879
sS'name'
p117880
S'seed'
p117881
sS'required'
p117882
I00
sS'group_name'
p117883
S'Advanced'
p117884
sa(dp117885
S'description'
p117886
g3
sS'cpp_type'
p117887
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117888
sS'default'
p117889
S'NodalMaxVarChange'
p117890
sS'name'
p117891
S'type'
p117892
sS'required'
p117893
I00
sS'group_name'
p117894
Nsa(dp117895
S'description'
p117896
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117897
sS'cpp_type'
p117898
S'bool'
p117899
sS'default'
p117900
S'0'
p117901
sS'name'
p117902
S'use_displaced_mesh'
p117903
sS'required'
p117904
I00
sS'group_name'
p117905
S'Advanced'
p117906
sa(dp117907
S'description'
p117908
S'The name of the variable that this postprocessor operates on\n'
p117909
sS'cpp_type'
p117910
S'std::vector<VariableName>'
p117911
sS'default'
p117912
g3
sS'name'
p117913
S'variable'
p117914
sS'required'
p117915
I00
sS'group_name'
p117916
NsasS'name'
p117917
S'/UserObjects/NodalMaxVarChange'
p117918
sa(dp117919
S'description'
p117920
g3
sS'subblocks'
p117921
NsS'parameters'
p117922
(lp117923
(dp117924
S'description'
p117925
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p117926
sS'cpp_type'
p117927
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p117928
sS'default'
p117929
g3
sS'name'
p117930
S'boundary'
p117931
sS'required'
p117932
I00
sS'group_name'
p117933
Nsa(dp117934
S'description'
p117935
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p117936
sS'cpp_type'
p117937
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p117938
sS'default'
p117939
g3
sS'name'
p117940
S'control_tags'
p117941
sS'required'
p117942
I00
sS'group_name'
p117943
Nsa(dp117944
S'description'
p117945
S"Node set ID which contains the nodes that are in 'corners'.\n"
p117946
sS'cpp_type'
p117947
S'BoundaryName'
p117948
sS'default'
p117949
g3
sS'name'
p117950
S'corner_boundary'
p117951
sS'required'
p117952
I01
sS'group_name'
p117953
Nsa(dp117954
S'name'
p117955
S'execute_on'
p117956
sS'cpp_type'
p117957
S'MultiMooseEnum'
p117958
sS'default'
p117959
S'TIMESTEP_END'
p117960
sS'description'
p117961
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p117962
sS'required'
p117963
I00
sS'options'
p117964
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p117965
sS'group_name'
p117966
Nsa(dp117967
S'description'
p117968
g3
sS'cpp_type'
p117969
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p117970
sS'default'
p117971
S'NodalNormalsCorner'
p117972
sS'name'
p117973
S'type'
p117974
sS'required'
p117975
I00
sS'group_name'
p117976
Nsa(dp117977
S'description'
p117978
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p117979
sS'cpp_type'
p117980
S'bool'
p117981
sS'default'
p117982
S'0'
p117983
sS'name'
p117984
S'use_displaced_mesh'
p117985
sS'required'
p117986
I00
sS'group_name'
p117987
S'Advanced'
p117988
sasS'name'
p117989
S'/UserObjects/NodalNormalsCorner'
p117990
sa(dp117991
S'description'
p117992
g3
sS'subblocks'
p117993
NsS'parameters'
p117994
(lp117995
(dp117996
S'description'
p117997
S'The list of block ids (SubdomainID) that this object will be applied\n'
p117998
sS'cpp_type'
p117999
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118000
sS'default'
p118001
g3
sS'name'
p118002
S'block'
p118003
sS'required'
p118004
I00
sS'group_name'
p118005
Nsa(dp118006
S'description'
p118007
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118008
sS'cpp_type'
p118009
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118010
sS'default'
p118011
g3
sS'name'
p118012
S'boundary'
p118013
sS'required'
p118014
I00
sS'group_name'
p118015
Nsa(dp118016
S'description'
p118017
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118018
sS'cpp_type'
p118019
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118020
sS'default'
p118021
g3
sS'name'
p118022
S'control_tags'
p118023
sS'required'
p118024
I00
sS'group_name'
p118025
Nsa(dp118026
S'name'
p118027
S'execute_on'
p118028
sS'cpp_type'
p118029
S'MultiMooseEnum'
p118030
sS'default'
p118031
S'TIMESTEP_END'
p118032
sS'description'
p118033
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118034
sS'required'
p118035
I00
sS'options'
p118036
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118037
sS'group_name'
p118038
Nsa(dp118039
S'description'
p118040
S'The seed for the master random number generator\n'
p118041
sS'cpp_type'
p118042
S'unsigned int'
p118043
sS'default'
p118044
S'0'
p118045
sS'name'
p118046
S'seed'
p118047
sS'required'
p118048
I00
sS'group_name'
p118049
S'Advanced'
p118050
sa(dp118051
S'description'
p118052
g3
sS'cpp_type'
p118053
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118054
sS'default'
p118055
S'NodalNormalsEvaluator'
p118056
sS'name'
p118057
S'type'
p118058
sS'required'
p118059
I00
sS'group_name'
p118060
Nsa(dp118061
S'description'
p118062
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118063
sS'cpp_type'
p118064
S'bool'
p118065
sS'default'
p118066
S'0'
p118067
sS'name'
p118068
S'use_displaced_mesh'
p118069
sS'required'
p118070
I00
sS'group_name'
p118071
S'Advanced'
p118072
sasS'name'
p118073
S'/UserObjects/NodalNormalsEvaluator'
p118074
sa(dp118075
S'description'
p118076
g3
sS'subblocks'
p118077
NsS'parameters'
p118078
(lp118079
(dp118080
S'description'
p118081
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118082
sS'cpp_type'
p118083
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118084
sS'default'
p118085
g3
sS'name'
p118086
S'block'
p118087
sS'required'
p118088
I00
sS'group_name'
p118089
Nsa(dp118090
S'description'
p118091
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118092
sS'cpp_type'
p118093
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118094
sS'default'
p118095
g3
sS'name'
p118096
S'boundary'
p118097
sS'required'
p118098
I00
sS'group_name'
p118099
Nsa(dp118100
S'description'
p118101
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118102
sS'cpp_type'
p118103
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118104
sS'default'
p118105
g3
sS'name'
p118106
S'control_tags'
p118107
sS'required'
p118108
I00
sS'group_name'
p118109
Nsa(dp118110
S'description'
p118111
S"Node set ID which contains the nodes that are in 'corners'.\n"
p118112
sS'cpp_type'
p118113
S'BoundaryName'
p118114
sS'default'
p118115
g3
sS'name'
p118116
S'corner_boundary'
p118117
sS'required'
p118118
I00
sS'group_name'
p118119
Nsa(dp118120
S'name'
p118121
S'execute_on'
p118122
sS'cpp_type'
p118123
S'MultiMooseEnum'
p118124
sS'default'
p118125
S'TIMESTEP_END'
p118126
sS'description'
p118127
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118128
sS'required'
p118129
I00
sS'options'
p118130
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118131
sS'group_name'
p118132
Nsa(dp118133
S'description'
p118134
S'The seed for the master random number generator\n'
p118135
sS'cpp_type'
p118136
S'unsigned int'
p118137
sS'default'
p118138
S'0'
p118139
sS'name'
p118140
S'seed'
p118141
sS'required'
p118142
I00
sS'group_name'
p118143
S'Advanced'
p118144
sa(dp118145
S'description'
p118146
g3
sS'cpp_type'
p118147
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118148
sS'default'
p118149
S'NodalNormalsPreprocessor'
p118150
sS'name'
p118151
S'type'
p118152
sS'required'
p118153
I00
sS'group_name'
p118154
Nsa(dp118155
S'description'
p118156
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118157
sS'cpp_type'
p118158
S'bool'
p118159
sS'default'
p118160
S'0'
p118161
sS'name'
p118162
S'use_displaced_mesh'
p118163
sS'required'
p118164
I00
sS'group_name'
p118165
S'Advanced'
p118166
sasS'name'
p118167
S'/UserObjects/NodalNormalsPreprocessor'
p118168
sa(dp118169
S'description'
p118170
g3
sS'subblocks'
p118171
NsS'parameters'
p118172
(lp118173
(dp118174
S'description'
p118175
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118176
sS'cpp_type'
p118177
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118178
sS'default'
p118179
g3
sS'name'
p118180
S'block'
p118181
sS'required'
p118182
I00
sS'group_name'
p118183
Nsa(dp118184
S'description'
p118185
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118186
sS'cpp_type'
p118187
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118188
sS'default'
p118189
g3
sS'name'
p118190
S'boundary'
p118191
sS'required'
p118192
I00
sS'group_name'
p118193
Nsa(dp118194
S'description'
p118195
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118196
sS'cpp_type'
p118197
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118198
sS'default'
p118199
g3
sS'name'
p118200
S'control_tags'
p118201
sS'required'
p118202
I00
sS'group_name'
p118203
Nsa(dp118204
S'name'
p118205
S'execute_on'
p118206
sS'cpp_type'
p118207
S'MultiMooseEnum'
p118208
sS'default'
p118209
S'TIMESTEP_END'
p118210
sS'description'
p118211
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118212
sS'required'
p118213
I00
sS'options'
p118214
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118215
sS'group_name'
p118216
Nsa(dp118217
S'description'
p118218
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118219
sS'cpp_type'
p118220
S'std::vector<OutputName, std::allocator<OutputName> >'
p118221
sS'default'
p118222
g3
sS'name'
p118223
S'outputs'
p118224
sS'required'
p118225
I00
sS'group_name'
p118226
S'Advanced'
p118227
sa(dp118228
S'description'
p118229
S'The seed for the master random number generator\n'
p118230
sS'cpp_type'
p118231
S'unsigned int'
p118232
sS'default'
p118233
S'0'
p118234
sS'name'
p118235
S'seed'
p118236
sS'required'
p118237
I00
sS'group_name'
p118238
S'Advanced'
p118239
sa(dp118240
S'description'
p118241
g3
sS'cpp_type'
p118242
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118243
sS'default'
p118244
S'NodalProxyMaxValue'
p118245
sS'name'
p118246
S'type'
p118247
sS'required'
p118248
I00
sS'group_name'
p118249
Nsa(dp118250
S'description'
p118251
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118252
sS'cpp_type'
p118253
S'bool'
p118254
sS'default'
p118255
S'0'
p118256
sS'name'
p118257
S'use_displaced_mesh'
p118258
sS'required'
p118259
I00
sS'group_name'
p118260
S'Advanced'
p118261
sa(dp118262
S'description'
p118263
S'The name of the variable that this postprocessor operates on\n'
p118264
sS'cpp_type'
p118265
S'std::vector<VariableName>'
p118266
sS'default'
p118267
g3
sS'name'
p118268
S'variable'
p118269
sS'required'
p118270
I00
sS'group_name'
p118271
NsasS'name'
p118272
S'/UserObjects/NodalProxyMaxValue'
p118273
sa(dp118274
S'description'
p118275
g3
sS'subblocks'
p118276
NsS'parameters'
p118277
(lp118278
(dp118279
S'description'
p118280
S'The list of block ids (SubdomainID) that this object will be applied\n'
p118281
sS'cpp_type'
p118282
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p118283
sS'default'
p118284
g3
sS'name'
p118285
S'block'
p118286
sS'required'
p118287
I00
sS'group_name'
p118288
Nsa(dp118289
S'description'
p118290
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p118291
sS'cpp_type'
p118292
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p118293
sS'default'
p118294
g3
sS'name'
p118295
S'boundary'
p118296
sS'required'
p118297
I00
sS'group_name'
p118298
Nsa(dp118299
S'description'
p118300
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118301
sS'cpp_type'
p118302
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118303
sS'default'
p118304
g3
sS'name'
p118305
S'control_tags'
p118306
sS'required'
p118307
I00
sS'group_name'
p118308
Nsa(dp118309
S'name'
p118310
S'execute_on'
p118311
sS'cpp_type'
p118312
S'MultiMooseEnum'
p118313
sS'default'
p118314
S'TIMESTEP_END'
p118315
sS'description'
p118316
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118317
sS'required'
p118318
I00
sS'options'
p118319
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118320
sS'group_name'
p118321
Nsa(dp118322
S'description'
p118323
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118324
sS'cpp_type'
p118325
S'std::vector<OutputName, std::allocator<OutputName> >'
p118326
sS'default'
p118327
g3
sS'name'
p118328
S'outputs'
p118329
sS'required'
p118330
I00
sS'group_name'
p118331
S'Advanced'
p118332
sa(dp118333
S'description'
p118334
S'The seed for the master random number generator\n'
p118335
sS'cpp_type'
p118336
S'unsigned int'
p118337
sS'default'
p118338
S'0'
p118339
sS'name'
p118340
S'seed'
p118341
sS'required'
p118342
I00
sS'group_name'
p118343
S'Advanced'
p118344
sa(dp118345
S'description'
p118346
g3
sS'cpp_type'
p118347
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118348
sS'default'
p118349
S'NodalSum'
p118350
sS'name'
p118351
S'type'
p118352
sS'required'
p118353
I00
sS'group_name'
p118354
Nsa(dp118355
S'description'
p118356
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118357
sS'cpp_type'
p118358
S'bool'
p118359
sS'default'
p118360
S'0'
p118361
sS'name'
p118362
S'use_displaced_mesh'
p118363
sS'required'
p118364
I00
sS'group_name'
p118365
S'Advanced'
p118366
sa(dp118367
S'description'
p118368
S'The name of the variable that this postprocessor operates on\n'
p118369
sS'cpp_type'
p118370
S'std::vector<VariableName>'
p118371
sS'default'
p118372
g3
sS'name'
p118373
S'variable'
p118374
sS'required'
p118375
I00
sS'group_name'
p118376
NsasS'name'
p118377
S'/UserObjects/NodalSum'
p118378
sa(dp118379
S'description'
p118380
g3
sS'subblocks'
p118381
NsS'parameters'
p118382
(lp118383
(dp118384
S'description'
p118385
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118386
sS'cpp_type'
p118387
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118388
sS'default'
p118389
g3
sS'name'
p118390
S'control_tags'
p118391
sS'required'
p118392
I00
sS'group_name'
p118393
Nsa(dp118394
S'name'
p118395
S'execute_on'
p118396
sS'cpp_type'
p118397
S'MultiMooseEnum'
p118398
sS'default'
p118399
S'TIMESTEP_END'
p118400
sS'description'
p118401
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118402
sS'required'
p118403
I00
sS'options'
p118404
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118405
sS'group_name'
p118406
Nsa(dp118407
S'description'
p118408
S'The ID of the node where we monitor\n'
p118409
sS'cpp_type'
p118410
S'unsigned int'
p118411
sS'default'
p118412
g3
sS'name'
p118413
S'nodeid'
p118414
sS'required'
p118415
I01
sS'group_name'
p118416
Nsa(dp118417
S'description'
p118418
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118419
sS'cpp_type'
p118420
S'std::vector<OutputName, std::allocator<OutputName> >'
p118421
sS'default'
p118422
g3
sS'name'
p118423
S'outputs'
p118424
sS'required'
p118425
I00
sS'group_name'
p118426
S'Advanced'
p118427
sa(dp118428
S'description'
p118429
S'A scale factor to be applied to the variable\n'
p118430
sS'cpp_type'
p118431
S'double'
p118432
sS'default'
p118433
S'1'
p118434
sS'name'
p118435
S'scale_factor'
p118436
sS'required'
p118437
I00
sS'group_name'
p118438
Nsa(dp118439
S'description'
p118440
g3
sS'cpp_type'
p118441
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118442
sS'default'
p118443
S'NodalVariableValue'
p118444
sS'name'
p118445
S'type'
p118446
sS'required'
p118447
I00
sS'group_name'
p118448
Nsa(dp118449
S'description'
p118450
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118451
sS'cpp_type'
p118452
S'bool'
p118453
sS'default'
p118454
S'0'
p118455
sS'name'
p118456
S'use_displaced_mesh'
p118457
sS'required'
p118458
I00
sS'group_name'
p118459
S'Advanced'
p118460
sa(dp118461
S'description'
p118462
S'The variable to be monitored\n'
p118463
sS'cpp_type'
p118464
S'VariableName'
p118465
sS'default'
p118466
g3
sS'name'
p118467
S'variable'
p118468
sS'required'
p118469
I01
sS'group_name'
p118470
NsasS'name'
p118471
S'/UserObjects/NodalVariableValue'
p118472
sa(dp118473
S'description'
p118474
g3
sS'subblocks'
p118475
NsS'parameters'
p118476
(lp118477
(dp118478
S'description'
p118479
S'filename for Avrami analysis info (ln time and Avrami)\n'
p118480
sS'cpp_type'
p118481
S'FileName'
p118482
sS'default'
p118483
g3
sS'name'
p118484
S'Avrami_file'
p118485
sS'required'
p118486
I00
sS'group_name'
p118487
Nsa(dp118488
S'description'
p118489
S'An optional file name where bubble volumes can be output.\n'
p118490
sS'cpp_type'
p118491
S'FileName'
p118492
sS'default'
p118493
g3
sS'name'
p118494
S'bubble_volume_file'
p118495
sS'required'
p118496
I00
sS'group_name'
p118497
Nsa(dp118498
S'description'
p118499
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p118500
sS'cpp_type'
p118501
S'bool'
p118502
sS'default'
p118503
S'0'
p118504
sS'name'
p118505
S'compute_boundary_intersecting_volume'
p118506
sS'required'
p118507
I00
sS'group_name'
p118508
Nsa(dp118509
S'description'
p118510
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p118511
sS'cpp_type'
p118512
S'bool'
p118513
sS'default'
p118514
S'0'
p118515
sS'name'
p118516
S'condense_map_info'
p118517
sS'required'
p118518
I00
sS'group_name'
p118519
Nsa(dp118520
S'description'
p118521
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p118522
sS'cpp_type'
p118523
S'double'
p118524
sS'default'
p118525
g3
sS'name'
p118526
S'connecting_threshold'
p118527
sS'required'
p118528
I00
sS'group_name'
p118529
Nsa(dp118530
S'description'
p118531
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118532
sS'cpp_type'
p118533
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118534
sS'default'
p118535
g3
sS'name'
p118536
S'control_tags'
p118537
sS'required'
p118538
I00
sS'group_name'
p118539
Nsa(dp118540
S'description'
p118541
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p118542
sS'cpp_type'
p118543
S'PostprocessorName'
p118544
sS'default'
p118545
g3
sS'name'
p118546
S'elem_avg_value'
p118547
sS'required'
p118548
I00
sS'group_name'
p118549
Nsa(dp118550
S'description'
p118551
S'Instruct the UO to populate the variable index map.\n'
p118552
sS'cpp_type'
p118553
S'bool'
p118554
sS'default'
p118555
S'0'
p118556
sS'name'
p118557
S'enable_var_coloring'
p118558
sS'required'
p118559
I00
sS'group_name'
p118560
Nsa(dp118561
S'description'
p118562
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p118563
sS'cpp_type'
p118564
S'double'
p118565
sS'default'
p118566
S'-1'
p118567
sS'name'
p118568
S'equil_fraction'
p118569
sS'required'
p118570
I00
sS'group_name'
p118571
Nsa(dp118572
S'name'
p118573
S'execute_on'
p118574
sS'cpp_type'
p118575
S'MultiMooseEnum'
p118576
sS'default'
p118577
S'TIMESTEP_END'
p118578
sS'description'
p118579
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118580
sS'required'
p118581
I00
sS'options'
p118582
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118583
sS'group_name'
p118584
Nsa(dp118585
S'name'
p118586
S'flood_entity_type'
p118587
sS'cpp_type'
p118588
S'MooseEnum'
p118589
sS'default'
p118590
S'NODAL'
p118591
sS'description'
p118592
S'Determines whether the flood algorithm runs on nodes or elements\n'
p118593
sS'required'
p118594
I00
sS'options'
p118595
S'NODAL ELEMENTAL'
p118596
sS'group_name'
p118597
Nsa(dp118598
S'description'
p118599
S'Postprocessor from which to get mesh volume\n'
p118600
sS'cpp_type'
p118601
S'PostprocessorName'
p118602
sS'default'
p118603
g3
sS'name'
p118604
S'mesh_volume'
p118605
sS'required'
p118606
I01
sS'group_name'
p118607
Nsa(dp118608
S'description'
p118609
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118610
sS'cpp_type'
p118611
S'std::vector<OutputName, std::allocator<OutputName> >'
p118612
sS'default'
p118613
g3
sS'name'
p118614
S'outputs'
p118615
sS'required'
p118616
I00
sS'group_name'
p118617
S'Advanced'
p118618
sa(dp118619
S'description'
p118620
S'The threshold value for which a new bubble may be started\n'
p118621
sS'cpp_type'
p118622
S'double'
p118623
sS'default'
p118624
S'0.5'
p118625
sS'name'
p118626
S'threshold'
p118627
sS'required'
p118628
I00
sS'group_name'
p118629
Nsa(dp118630
S'description'
p118631
S'Calculate memory usage\n'
p118632
sS'cpp_type'
p118633
S'bool'
p118634
sS'default'
p118635
S'0'
p118636
sS'name'
p118637
S'track_memory_usage'
p118638
sS'required'
p118639
I00
sS'group_name'
p118640
Nsa(dp118641
S'description'
p118642
g3
sS'cpp_type'
p118643
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118644
sS'default'
p118645
S'NodalVolumeFraction'
p118646
sS'name'
p118647
S'type'
p118648
sS'required'
p118649
I00
sS'group_name'
p118650
Nsa(dp118651
S'description'
p118652
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118653
sS'cpp_type'
p118654
S'bool'
p118655
sS'default'
p118656
S'0'
p118657
sS'name'
p118658
S'use_displaced_mesh'
p118659
sS'required'
p118660
I00
sS'group_name'
p118661
S'Advanced'
p118662
sa(dp118663
S'description'
p118664
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p118665
sS'cpp_type'
p118666
S'bool'
p118667
sS'default'
p118668
S'0'
p118669
sS'name'
p118670
S'use_global_numbering'
p118671
sS'required'
p118672
I00
sS'group_name'
p118673
Nsa(dp118674
S'description'
p118675
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p118676
sS'cpp_type'
p118677
S'bool'
p118678
sS'default'
p118679
S'1'
p118680
sS'name'
p118681
S'use_less_than_threshold_comparison'
p118682
sS'required'
p118683
I00
sS'group_name'
p118684
Nsa(dp118685
S'description'
p118686
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p118687
sS'cpp_type'
p118688
S'bool'
p118689
sS'default'
p118690
S'1'
p118691
sS'name'
p118692
S'use_single_map'
p118693
sS'required'
p118694
I00
sS'group_name'
p118695
Nsa(dp118696
S'description'
p118697
S'The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p118698
sS'cpp_type'
p118699
S'std::vector<VariableName>'
p118700
sS'default'
p118701
g3
sS'name'
p118702
S'variable'
p118703
sS'required'
p118704
I01
sS'group_name'
p118705
NsasS'name'
p118706
S'/UserObjects/NodalVolumeFraction'
p118707
sa(dp118708
S'description'
p118709
g3
sS'subblocks'
p118710
NsS'parameters'
p118711
(lp118712
(dp118713
S'description'
p118714
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118715
sS'cpp_type'
p118716
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118717
sS'default'
p118718
g3
sS'name'
p118719
S'control_tags'
p118720
sS'required'
p118721
I00
sS'group_name'
p118722
Nsa(dp118723
S'name'
p118724
S'execute_on'
p118725
sS'cpp_type'
p118726
S'MultiMooseEnum'
p118727
sS'default'
p118728
S'TIMESTEP_END'
p118729
sS'description'
p118730
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118731
sS'required'
p118732
I00
sS'options'
p118733
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118734
sS'group_name'
p118735
Nsa(dp118736
S'description'
p118737
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118738
sS'cpp_type'
p118739
S'std::vector<OutputName, std::allocator<OutputName> >'
p118740
sS'default'
p118741
g3
sS'name'
p118742
S'outputs'
p118743
sS'required'
p118744
I00
sS'group_name'
p118745
S'Advanced'
p118746
sa(dp118747
S'description'
p118748
g3
sS'cpp_type'
p118749
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118750
sS'default'
p118751
S'NumDOFs'
p118752
sS'name'
p118753
S'type'
p118754
sS'required'
p118755
I00
sS'group_name'
p118756
Nsa(dp118757
S'description'
p118758
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118759
sS'cpp_type'
p118760
S'bool'
p118761
sS'default'
p118762
S'0'
p118763
sS'name'
p118764
S'use_displaced_mesh'
p118765
sS'required'
p118766
I00
sS'group_name'
p118767
S'Advanced'
p118768
sasS'name'
p118769
S'/UserObjects/NumDOFs'
p118770
sa(dp118771
S'description'
p118772
g3
sS'subblocks'
p118773
NsS'parameters'
p118774
(lp118775
(dp118776
S'description'
p118777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118778
sS'cpp_type'
p118779
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118780
sS'default'
p118781
g3
sS'name'
p118782
S'control_tags'
p118783
sS'required'
p118784
I00
sS'group_name'
p118785
Nsa(dp118786
S'name'
p118787
S'execute_on'
p118788
sS'cpp_type'
p118789
S'MultiMooseEnum'
p118790
sS'default'
p118791
S'TIMESTEP_END'
p118792
sS'description'
p118793
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118794
sS'required'
p118795
I00
sS'options'
p118796
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118797
sS'group_name'
p118798
Nsa(dp118799
S'description'
p118800
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118801
sS'cpp_type'
p118802
S'std::vector<OutputName, std::allocator<OutputName> >'
p118803
sS'default'
p118804
g3
sS'name'
p118805
S'outputs'
p118806
sS'required'
p118807
I00
sS'group_name'
p118808
S'Advanced'
p118809
sa(dp118810
S'description'
p118811
g3
sS'cpp_type'
p118812
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118813
sS'default'
p118814
S'NumElems'
p118815
sS'name'
p118816
S'type'
p118817
sS'required'
p118818
I00
sS'group_name'
p118819
Nsa(dp118820
S'description'
p118821
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118822
sS'cpp_type'
p118823
S'bool'
p118824
sS'default'
p118825
S'0'
p118826
sS'name'
p118827
S'use_displaced_mesh'
p118828
sS'required'
p118829
I00
sS'group_name'
p118830
S'Advanced'
p118831
sasS'name'
p118832
S'/UserObjects/NumElems'
p118833
sa(dp118834
S'description'
p118835
g3
sS'subblocks'
p118836
NsS'parameters'
p118837
(lp118838
(dp118839
S'description'
p118840
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118841
sS'cpp_type'
p118842
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118843
sS'default'
p118844
g3
sS'name'
p118845
S'control_tags'
p118846
sS'required'
p118847
I00
sS'group_name'
p118848
Nsa(dp118849
S'name'
p118850
S'execute_on'
p118851
sS'cpp_type'
p118852
S'MultiMooseEnum'
p118853
sS'default'
p118854
S'TIMESTEP_END'
p118855
sS'description'
p118856
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118857
sS'required'
p118858
I00
sS'options'
p118859
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118860
sS'group_name'
p118861
Nsa(dp118862
S'description'
p118863
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118864
sS'cpp_type'
p118865
S'std::vector<OutputName, std::allocator<OutputName> >'
p118866
sS'default'
p118867
g3
sS'name'
p118868
S'outputs'
p118869
sS'required'
p118870
I00
sS'group_name'
p118871
S'Advanced'
p118872
sa(dp118873
S'description'
p118874
g3
sS'cpp_type'
p118875
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118876
sS'default'
p118877
S'NumLinearIterations'
p118878
sS'name'
p118879
S'type'
p118880
sS'required'
p118881
I00
sS'group_name'
p118882
Nsa(dp118883
S'description'
p118884
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118885
sS'cpp_type'
p118886
S'bool'
p118887
sS'default'
p118888
S'0'
p118889
sS'name'
p118890
S'use_displaced_mesh'
p118891
sS'required'
p118892
I00
sS'group_name'
p118893
S'Advanced'
p118894
sasS'name'
p118895
S'/UserObjects/NumLinearIterations'
p118896
sa(dp118897
S'description'
p118898
g3
sS'subblocks'
p118899
NsS'parameters'
p118900
(lp118901
(dp118902
S'description'
p118903
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118904
sS'cpp_type'
p118905
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118906
sS'default'
p118907
g3
sS'name'
p118908
S'control_tags'
p118909
sS'required'
p118910
I00
sS'group_name'
p118911
Nsa(dp118912
S'name'
p118913
S'execute_on'
p118914
sS'cpp_type'
p118915
S'MultiMooseEnum'
p118916
sS'default'
p118917
S'TIMESTEP_END'
p118918
sS'description'
p118919
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118920
sS'required'
p118921
I00
sS'options'
p118922
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118923
sS'group_name'
p118924
Nsa(dp118925
S'description'
p118926
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p118927
sS'cpp_type'
p118928
S'std::vector<OutputName, std::allocator<OutputName> >'
p118929
sS'default'
p118930
g3
sS'name'
p118931
S'outputs'
p118932
sS'required'
p118933
I00
sS'group_name'
p118934
S'Advanced'
p118935
sa(dp118936
S'description'
p118937
g3
sS'cpp_type'
p118938
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p118939
sS'default'
p118940
S'NumNodes'
p118941
sS'name'
p118942
S'type'
p118943
sS'required'
p118944
I00
sS'group_name'
p118945
Nsa(dp118946
S'description'
p118947
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p118948
sS'cpp_type'
p118949
S'bool'
p118950
sS'default'
p118951
S'0'
p118952
sS'name'
p118953
S'use_displaced_mesh'
p118954
sS'required'
p118955
I00
sS'group_name'
p118956
S'Advanced'
p118957
sasS'name'
p118958
S'/UserObjects/NumNodes'
p118959
sa(dp118960
S'description'
p118961
g3
sS'subblocks'
p118962
NsS'parameters'
p118963
(lp118964
(dp118965
S'description'
p118966
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p118967
sS'cpp_type'
p118968
S'bool'
p118969
sS'default'
p118970
S'0'
p118971
sS'name'
p118972
S'accumulate_over_step'
p118973
sS'required'
p118974
I00
sS'group_name'
p118975
Nsa(dp118976
S'description'
p118977
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p118978
sS'cpp_type'
p118979
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p118980
sS'default'
p118981
g3
sS'name'
p118982
S'control_tags'
p118983
sS'required'
p118984
I00
sS'group_name'
p118985
Nsa(dp118986
S'name'
p118987
S'execute_on'
p118988
sS'cpp_type'
p118989
S'MultiMooseEnum'
p118990
sS'default'
p118991
S'TIMESTEP_END'
p118992
sS'description'
p118993
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p118994
sS'required'
p118995
I00
sS'options'
p118996
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p118997
sS'group_name'
p118998
Nsa(dp118999
S'description'
p119000
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119001
sS'cpp_type'
p119002
S'std::vector<OutputName, std::allocator<OutputName> >'
p119003
sS'default'
p119004
g3
sS'name'
p119005
S'outputs'
p119006
sS'required'
p119007
I00
sS'group_name'
p119008
S'Advanced'
p119009
sa(dp119010
S'description'
p119011
g3
sS'cpp_type'
p119012
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119013
sS'default'
p119014
S'NumNonlinearIterations'
p119015
sS'name'
p119016
S'type'
p119017
sS'required'
p119018
I00
sS'group_name'
p119019
Nsa(dp119020
S'description'
p119021
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119022
sS'cpp_type'
p119023
S'bool'
p119024
sS'default'
p119025
S'0'
p119026
sS'name'
p119027
S'use_displaced_mesh'
p119028
sS'required'
p119029
I00
sS'group_name'
p119030
S'Advanced'
p119031
sasS'name'
p119032
S'/UserObjects/NumNonlinearIterations'
p119033
sa(dp119034
S'description'
p119035
g3
sS'subblocks'
p119036
NsS'parameters'
p119037
(lp119038
(dp119039
S'description'
p119040
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119041
sS'cpp_type'
p119042
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119043
sS'default'
p119044
g3
sS'name'
p119045
S'control_tags'
p119046
sS'required'
p119047
I00
sS'group_name'
p119048
Nsa(dp119049
S'name'
p119050
S'execute_on'
p119051
sS'cpp_type'
p119052
S'MultiMooseEnum'
p119053
sS'default'
p119054
S'TIMESTEP_END'
p119055
sS'description'
p119056
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119057
sS'required'
p119058
I00
sS'options'
p119059
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119060
sS'group_name'
p119061
Nsa(dp119062
S'description'
p119063
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119064
sS'cpp_type'
p119065
S'std::vector<OutputName, std::allocator<OutputName> >'
p119066
sS'default'
p119067
g3
sS'name'
p119068
S'outputs'
p119069
sS'required'
p119070
I00
sS'group_name'
p119071
S'Advanced'
p119072
sa(dp119073
S'description'
p119074
g3
sS'cpp_type'
p119075
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119076
sS'default'
p119077
S'NumPicardIterations'
p119078
sS'name'
p119079
S'type'
p119080
sS'required'
p119081
I00
sS'group_name'
p119082
Nsa(dp119083
S'description'
p119084
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119085
sS'cpp_type'
p119086
S'bool'
p119087
sS'default'
p119088
S'0'
p119089
sS'name'
p119090
S'use_displaced_mesh'
p119091
sS'required'
p119092
I00
sS'group_name'
p119093
S'Advanced'
p119094
sasS'name'
p119095
S'/UserObjects/NumPicardIterations'
p119096
sa(dp119097
S'description'
p119098
g3
sS'subblocks'
p119099
NsS'parameters'
p119100
(lp119101
(dp119102
S'description'
p119103
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119104
sS'cpp_type'
p119105
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119106
sS'default'
p119107
g3
sS'name'
p119108
S'control_tags'
p119109
sS'required'
p119110
I00
sS'group_name'
p119111
Nsa(dp119112
S'name'
p119113
S'execute_on'
p119114
sS'cpp_type'
p119115
S'MultiMooseEnum'
p119116
sS'default'
p119117
S'TIMESTEP_END'
p119118
sS'description'
p119119
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119120
sS'required'
p119121
I00
sS'options'
p119122
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119123
sS'group_name'
p119124
Nsa(dp119125
S'description'
p119126
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119127
sS'cpp_type'
p119128
S'std::vector<OutputName, std::allocator<OutputName> >'
p119129
sS'default'
p119130
g3
sS'name'
p119131
S'outputs'
p119132
sS'required'
p119133
I00
sS'group_name'
p119134
S'Advanced'
p119135
sa(dp119136
S'description'
p119137
g3
sS'cpp_type'
p119138
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119139
sS'default'
p119140
S'NumResidualEvaluations'
p119141
sS'name'
p119142
S'type'
p119143
sS'required'
p119144
I00
sS'group_name'
p119145
Nsa(dp119146
S'description'
p119147
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119148
sS'cpp_type'
p119149
S'bool'
p119150
sS'default'
p119151
S'0'
p119152
sS'name'
p119153
S'use_displaced_mesh'
p119154
sS'required'
p119155
I00
sS'group_name'
p119156
S'Advanced'
p119157
sasS'name'
p119158
S'/UserObjects/NumResidualEvaluations'
p119159
sa(dp119160
S'description'
p119161
g3
sS'subblocks'
p119162
NsS'parameters'
p119163
(lp119164
(dp119165
S'description'
p119166
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119167
sS'cpp_type'
p119168
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119169
sS'default'
p119170
g3
sS'name'
p119171
S'control_tags'
p119172
sS'required'
p119173
I00
sS'group_name'
p119174
Nsa(dp119175
S'name'
p119176
S'execute_on'
p119177
sS'cpp_type'
p119178
S'MultiMooseEnum'
p119179
sS'default'
p119180
S'TIMESTEP_END'
p119181
sS'description'
p119182
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119183
sS'required'
p119184
I00
sS'options'
p119185
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119186
sS'group_name'
p119187
Nsa(dp119188
S'description'
p119189
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119190
sS'cpp_type'
p119191
S'std::vector<OutputName, std::allocator<OutputName> >'
p119192
sS'default'
p119193
g3
sS'name'
p119194
S'outputs'
p119195
sS'required'
p119196
I00
sS'group_name'
p119197
S'Advanced'
p119198
sa(dp119199
S'name'
p119200
S'system'
p119201
sS'cpp_type'
p119202
S'MooseEnum'
p119203
sS'default'
p119204
S'nonlinear'
p119205
sS'description'
p119206
S'The system for which you want to print the number of variables.\n'
p119207
sS'required'
p119208
I00
sS'options'
p119209
S'nonlinear auxiliary'
p119210
sS'group_name'
p119211
Nsa(dp119212
S'description'
p119213
g3
sS'cpp_type'
p119214
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119215
sS'default'
p119216
S'NumVars'
p119217
sS'name'
p119218
S'type'
p119219
sS'required'
p119220
I00
sS'group_name'
p119221
Nsa(dp119222
S'description'
p119223
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119224
sS'cpp_type'
p119225
S'bool'
p119226
sS'default'
p119227
S'0'
p119228
sS'name'
p119229
S'use_displaced_mesh'
p119230
sS'required'
p119231
I00
sS'group_name'
p119232
S'Advanced'
p119233
sasS'name'
p119234
S'/UserObjects/NumVars'
p119235
sa(dp119236
S'description'
p119237
g3
sS'subblocks'
p119238
NsS'parameters'
p119239
(lp119240
(dp119241
S'description'
p119242
S'The list of block ids (SubdomainID) that this object will be applied\n'
p119243
sS'cpp_type'
p119244
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p119245
sS'default'
p119246
g3
sS'name'
p119247
S'block'
p119248
sS'required'
p119249
I00
sS'group_name'
p119250
Nsa(dp119251
S'description'
p119252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119253
sS'cpp_type'
p119254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119255
sS'default'
p119256
g3
sS'name'
p119257
S'control_tags'
p119258
sS'required'
p119259
I00
sS'group_name'
p119260
Nsa(dp119261
S'name'
p119262
S'execute_on'
p119263
sS'cpp_type'
p119264
S'MultiMooseEnum'
p119265
sS'default'
p119266
S'TIMESTEP_END'
p119267
sS'description'
p119268
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119269
sS'required'
p119270
I00
sS'options'
p119271
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119272
sS'group_name'
p119273
Nsa(dp119274
S'description'
p119275
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119276
sS'cpp_type'
p119277
S'std::vector<OutputName, std::allocator<OutputName> >'
p119278
sS'default'
p119279
g3
sS'name'
p119280
S'outputs'
p119281
sS'required'
p119282
I00
sS'group_name'
p119283
S'Advanced'
p119284
sa(dp119285
S'description'
p119286
S'The seed for the master random number generator\n'
p119287
sS'cpp_type'
p119288
S'unsigned int'
p119289
sS'default'
p119290
S'0'
p119291
sS'name'
p119292
S'seed'
p119293
sS'required'
p119294
I00
sS'group_name'
p119295
S'Advanced'
p119296
sa(dp119297
S'description'
p119298
S'Temperature of simulation\n'
p119299
sS'cpp_type'
p119300
S'double'
p119301
sS'default'
p119302
S'1833'
p119303
sS'name'
p119304
S'temp'
p119305
sS'required'
p119306
I00
sS'group_name'
p119307
Nsa(dp119308
S'description'
p119309
g3
sS'cpp_type'
p119310
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119311
sS'default'
p119312
S'PFCElementEnergyIntegral'
p119313
sS'name'
p119314
S'type'
p119315
sS'required'
p119316
I00
sS'group_name'
p119317
Nsa(dp119318
S'description'
p119319
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119320
sS'cpp_type'
p119321
S'bool'
p119322
sS'default'
p119323
S'0'
p119324
sS'name'
p119325
S'use_displaced_mesh'
p119326
sS'required'
p119327
I00
sS'group_name'
p119328
S'Advanced'
p119329
sa(dp119330
S'description'
p119331
S'The name of the variable that this object operates on\n'
p119332
sS'cpp_type'
p119333
S'VariableName'
p119334
sS'default'
p119335
g3
sS'name'
p119336
S'variable'
p119337
sS'required'
p119338
I01
sS'group_name'
p119339
NsasS'name'
p119340
S'/UserObjects/PFCElementEnergyIntegral'
p119341
sa(dp119342
S'description'
p119343
g3
sS'subblocks'
p119344
NsS'parameters'
p119345
(lp119346
(dp119347
S'description'
p119348
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119349
sS'cpp_type'
p119350
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119351
sS'default'
p119352
g3
sS'name'
p119353
S'control_tags'
p119354
sS'required'
p119355
I00
sS'group_name'
p119356
Nsa(dp119357
S'name'
p119358
S'execute_on'
p119359
sS'cpp_type'
p119360
S'MultiMooseEnum'
p119361
sS'default'
p119362
S'TIMESTEP_END'
p119363
sS'description'
p119364
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119365
sS'required'
p119366
I00
sS'options'
p119367
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119368
sS'group_name'
p119369
Nsa(dp119370
S'description'
p119371
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119372
sS'cpp_type'
p119373
S'std::vector<OutputName, std::allocator<OutputName> >'
p119374
sS'default'
p119375
g3
sS'name'
p119376
S'outputs'
p119377
sS'required'
p119378
I00
sS'group_name'
p119379
S'Advanced'
p119380
sa(dp119381
S'description'
p119382
S'The name of the postprocessor used for exit criterion\n'
p119383
sS'cpp_type'
p119384
S'PostprocessorName'
p119385
sS'default'
p119386
g3
sS'name'
p119387
S'postprocessor'
p119388
sS'required'
p119389
I01
sS'group_name'
p119390
Nsa(dp119391
S'description'
p119392
g3
sS'cpp_type'
p119393
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119394
sS'default'
p119395
S'PercentChangePostprocessor'
p119396
sS'name'
p119397
S'type'
p119398
sS'required'
p119399
I00
sS'group_name'
p119400
Nsa(dp119401
S'description'
p119402
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119403
sS'cpp_type'
p119404
S'bool'
p119405
sS'default'
p119406
S'0'
p119407
sS'name'
p119408
S'use_displaced_mesh'
p119409
sS'required'
p119410
I00
sS'group_name'
p119411
S'Advanced'
p119412
sasS'name'
p119413
S'/UserObjects/PercentChangePostprocessor'
p119414
sa(dp119415
S'description'
p119416
g3
sS'subblocks'
p119417
NsS'parameters'
p119418
(lp119419
(dp119420
S'name'
p119421
S'column'
p119422
sS'cpp_type'
p119423
S'MooseEnum'
p119424
sS'default'
p119425
g3
sS'description'
p119426
S'The column you want the value of.\n'
p119427
sS'required'
p119428
I01
sS'options'
p119429
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p119430
sS'group_name'
p119431
Nsa(dp119432
S'description'
p119433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119434
sS'cpp_type'
p119435
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119436
sS'default'
p119437
g3
sS'name'
p119438
S'control_tags'
p119439
sS'required'
p119440
I00
sS'group_name'
p119441
Nsa(dp119442
S'description'
p119443
S'The name of the event.\n'
p119444
sS'cpp_type'
p119445
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119446
sS'default'
p119447
g3
sS'name'
p119448
S'event'
p119449
sS'required'
p119450
I01
sS'group_name'
p119451
Nsa(dp119452
S'name'
p119453
S'execute_on'
p119454
sS'cpp_type'
p119455
S'MultiMooseEnum'
p119456
sS'default'
p119457
S'TIMESTEP_END'
p119458
sS'description'
p119459
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119460
sS'required'
p119461
I00
sS'options'
p119462
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119463
sS'group_name'
p119464
Nsa(dp119465
S'description'
p119466
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119467
sS'cpp_type'
p119468
S'std::vector<OutputName, std::allocator<OutputName> >'
p119469
sS'default'
p119470
g3
sS'name'
p119471
S'outputs'
p119472
sS'required'
p119473
I00
sS'group_name'
p119474
S'Advanced'
p119475
sa(dp119476
S'description'
p119477
g3
sS'cpp_type'
p119478
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119479
sS'default'
p119480
S'PerformanceData'
p119481
sS'name'
p119482
S'type'
p119483
sS'required'
p119484
I00
sS'group_name'
p119485
Nsa(dp119486
S'description'
p119487
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119488
sS'cpp_type'
p119489
S'bool'
p119490
sS'default'
p119491
S'0'
p119492
sS'name'
p119493
S'use_displaced_mesh'
p119494
sS'required'
p119495
I00
sS'group_name'
p119496
S'Advanced'
p119497
sasS'name'
p119498
S'/UserObjects/PerformanceData'
p119499
sa(dp119500
S'description'
p119501
g3
sS'subblocks'
p119502
NsS'parameters'
p119503
(lp119504
(dp119505
S'description'
p119506
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119507
sS'cpp_type'
p119508
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119509
sS'default'
p119510
g3
sS'name'
p119511
S'control_tags'
p119512
sS'required'
p119513
I00
sS'group_name'
p119514
Nsa(dp119515
S'name'
p119516
S'execute_on'
p119517
sS'cpp_type'
p119518
S'MultiMooseEnum'
p119519
sS'default'
p119520
S'TIMESTEP_END'
p119521
sS'description'
p119522
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119523
sS'required'
p119524
I00
sS'options'
p119525
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119526
sS'group_name'
p119527
Nsa(dp119528
S'description'
p119529
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119530
sS'cpp_type'
p119531
S'std::vector<OutputName, std::allocator<OutputName> >'
p119532
sS'default'
p119533
g3
sS'name'
p119534
S'outputs'
p119535
sS'required'
p119536
I00
sS'group_name'
p119537
S'Advanced'
p119538
sa(dp119539
S'description'
p119540
S'The physical point where the solution will be evaluated.\n'
p119541
sS'cpp_type'
p119542
S'libMesh::Point'
p119543
sS'default'
p119544
g3
sS'name'
p119545
S'point'
p119546
sS'required'
p119547
I01
sS'group_name'
p119548
Nsa(dp119549
S'description'
p119550
g3
sS'cpp_type'
p119551
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119552
sS'default'
p119553
S'PointValue'
p119554
sS'name'
p119555
S'type'
p119556
sS'required'
p119557
I00
sS'group_name'
p119558
Nsa(dp119559
S'description'
p119560
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119561
sS'cpp_type'
p119562
S'bool'
p119563
sS'default'
p119564
S'0'
p119565
sS'name'
p119566
S'use_displaced_mesh'
p119567
sS'required'
p119568
I00
sS'group_name'
p119569
S'Advanced'
p119570
sa(dp119571
S'description'
p119572
S'The name of the variable that this postprocessor operates on.\n'
p119573
sS'cpp_type'
p119574
S'VariableName'
p119575
sS'default'
p119576
g3
sS'name'
p119577
S'variable'
p119578
sS'required'
p119579
I01
sS'group_name'
p119580
NsasS'name'
p119581
S'/UserObjects/PointValue'
p119582
sa(dp119583
S'description'
p119584
g3
sS'subblocks'
p119585
NsS'parameters'
p119586
(lp119587
(dp119588
S'description'
p119589
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119590
sS'cpp_type'
p119591
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119592
sS'default'
p119593
g3
sS'name'
p119594
S'control_tags'
p119595
sS'required'
p119596
I00
sS'group_name'
p119597
Nsa(dp119598
S'name'
p119599
S'execute_on'
p119600
sS'cpp_type'
p119601
S'MultiMooseEnum'
p119602
sS'default'
p119603
S'TIMESTEP_END'
p119604
sS'description'
p119605
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119606
sS'required'
p119607
I00
sS'options'
p119608
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119609
sS'group_name'
p119610
Nsa(dp119611
S'description'
p119612
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119613
sS'cpp_type'
p119614
S'std::vector<OutputName, std::allocator<OutputName> >'
p119615
sS'default'
p119616
g3
sS'name'
p119617
S'outputs'
p119618
sS'required'
p119619
I00
sS'group_name'
p119620
S'Advanced'
p119621
sa(dp119622
S'description'
p119623
S'The input parameter to control.\n'
p119624
sS'cpp_type'
p119625
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119626
sS'default'
p119627
g3
sS'name'
p119628
S'parameter'
p119629
sS'required'
p119630
I01
sS'group_name'
p119631
Nsa(dp119632
S'description'
p119633
g3
sS'cpp_type'
p119634
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119635
sS'default'
p119636
S'RealControlParameterReporter'
p119637
sS'name'
p119638
S'type'
p119639
sS'required'
p119640
I00
sS'group_name'
p119641
Nsa(dp119642
S'description'
p119643
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119644
sS'cpp_type'
p119645
S'bool'
p119646
sS'default'
p119647
S'0'
p119648
sS'name'
p119649
S'use_displaced_mesh'
p119650
sS'required'
p119651
I00
sS'group_name'
p119652
S'Advanced'
p119653
sasS'name'
p119654
S'/UserObjects/RealControlParameterReporter'
p119655
sa(dp119656
S'description'
p119657
g3
sS'subblocks'
p119658
NsS'parameters'
p119659
(lp119660
(dp119661
S'description'
p119662
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119663
sS'cpp_type'
p119664
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119665
sS'default'
p119666
g3
sS'name'
p119667
S'control_tags'
p119668
sS'required'
p119669
I00
sS'group_name'
p119670
Nsa(dp119671
S'description'
p119672
S'The default value\n'
p119673
sS'cpp_type'
p119674
S'double'
p119675
sS'default'
p119676
g3
sS'name'
p119677
S'default'
p119678
sS'required'
p119679
I00
sS'group_name'
p119680
Nsa(dp119681
S'name'
p119682
S'execute_on'
p119683
sS'cpp_type'
p119684
S'MultiMooseEnum'
p119685
sS'default'
p119686
S'TIMESTEP_END'
p119687
sS'description'
p119688
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119689
sS'required'
p119690
I00
sS'options'
p119691
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119692
sS'group_name'
p119693
Nsa(dp119694
S'description'
p119695
S'Initialize the old postprocessor value with the default value\n'
p119696
sS'cpp_type'
p119697
S'bool'
p119698
sS'default'
p119699
S'1'
p119700
sS'name'
p119701
S'initialize_old'
p119702
sS'required'
p119703
I00
sS'group_name'
p119704
Nsa(dp119705
S'description'
p119706
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119707
sS'cpp_type'
p119708
S'std::vector<OutputName, std::allocator<OutputName> >'
p119709
sS'default'
p119710
g3
sS'name'
p119711
S'outputs'
p119712
sS'required'
p119713
I00
sS'group_name'
p119714
S'Advanced'
p119715
sa(dp119716
S'description'
p119717
g3
sS'cpp_type'
p119718
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119719
sS'default'
p119720
S'Receiver'
p119721
sS'name'
p119722
S'type'
p119723
sS'required'
p119724
I00
sS'group_name'
p119725
Nsa(dp119726
S'description'
p119727
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119728
sS'cpp_type'
p119729
S'bool'
p119730
sS'default'
p119731
S'0'
p119732
sS'name'
p119733
S'use_displaced_mesh'
p119734
sS'required'
p119735
I00
sS'group_name'
p119736
S'Advanced'
p119737
sasS'name'
p119738
S'/UserObjects/Receiver'
p119739
sa(dp119740
S'description'
p119741
g3
sS'subblocks'
p119742
NsS'parameters'
p119743
(lp119744
(dp119745
S'description'
p119746
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119747
sS'cpp_type'
p119748
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119749
sS'default'
p119750
g3
sS'name'
p119751
S'control_tags'
p119752
sS'required'
p119753
I00
sS'group_name'
p119754
Nsa(dp119755
S'name'
p119756
S'execute_on'
p119757
sS'cpp_type'
p119758
S'MultiMooseEnum'
p119759
sS'default'
p119760
S'TIMESTEP_END'
p119761
sS'description'
p119762
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119763
sS'required'
p119764
I00
sS'options'
p119765
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119766
sS'group_name'
p119767
Nsa(dp119768
S'description'
p119769
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p119770
sS'cpp_type'
p119771
S'std::vector<OutputName, std::allocator<OutputName> >'
p119772
sS'default'
p119773
g3
sS'name'
p119774
S'outputs'
p119775
sS'required'
p119776
I00
sS'group_name'
p119777
S'Advanced'
p119778
sa(dp119779
S'description'
p119780
g3
sS'cpp_type'
p119781
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119782
sS'default'
p119783
S'Residual'
p119784
sS'name'
p119785
S'type'
p119786
sS'required'
p119787
I00
sS'group_name'
p119788
Nsa(dp119789
S'description'
p119790
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119791
sS'cpp_type'
p119792
S'bool'
p119793
sS'default'
p119794
S'0'
p119795
sS'name'
p119796
S'use_displaced_mesh'
p119797
sS'required'
p119798
I00
sS'group_name'
p119799
S'Advanced'
p119800
sasS'name'
p119801
S'/UserObjects/Residual'
p119802
sa(dp119803
S'description'
p119804
S'Fluid density assuming constant bulk modulus.  dens0 * Exp(pressure/bulk)\n'
p119805
sS'subblocks'
p119806
NsS'parameters'
p119807
(lp119808
(dp119809
S'description'
p119810
S'Bulk modulus of fluid.  Eg 2E9\n'
p119811
sS'cpp_type'
p119812
S'double'
p119813
sS'default'
p119814
g3
sS'name'
p119815
S'bulk_mod'
p119816
sS'required'
p119817
I01
sS'group_name'
p119818
Nsa(dp119819
S'description'
p119820
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119821
sS'cpp_type'
p119822
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119823
sS'default'
p119824
g3
sS'name'
p119825
S'control_tags'
p119826
sS'required'
p119827
I00
sS'group_name'
p119828
Nsa(dp119829
S'description'
p119830
S'Reference density of fluid.  Eg 1000\n'
p119831
sS'cpp_type'
p119832
S'double'
p119833
sS'default'
p119834
g3
sS'name'
p119835
S'dens0'
p119836
sS'required'
p119837
I01
sS'group_name'
p119838
Nsa(dp119839
S'name'
p119840
S'execute_on'
p119841
sS'cpp_type'
p119842
S'MultiMooseEnum'
p119843
sS'default'
p119844
S'TIMESTEP_END'
p119845
sS'description'
p119846
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119847
sS'required'
p119848
I00
sS'options'
p119849
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119850
sS'group_name'
p119851
Nsa(dp119852
S'description'
p119853
g3
sS'cpp_type'
p119854
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119855
sS'default'
p119856
S'RichardsDensityConstBulk'
p119857
sS'name'
p119858
S'type'
p119859
sS'required'
p119860
I00
sS'group_name'
p119861
Nsa(dp119862
S'description'
p119863
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119864
sS'cpp_type'
p119865
S'bool'
p119866
sS'default'
p119867
S'0'
p119868
sS'name'
p119869
S'use_displaced_mesh'
p119870
sS'required'
p119871
I00
sS'group_name'
p119872
S'Advanced'
p119873
sasS'name'
p119874
S'/UserObjects/RichardsDensityConstBulk'
p119875
sa(dp119876
S'description'
p119877
S'Fluid density of ideal gas.  Density = slope*(p - p0)\n'
p119878
sS'subblocks'
p119879
NsS'parameters'
p119880
(lp119881
(dp119882
S'description'
p119883
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119884
sS'cpp_type'
p119885
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119886
sS'default'
p119887
g3
sS'name'
p119888
S'control_tags'
p119889
sS'required'
p119890
I00
sS'group_name'
p119891
Nsa(dp119892
S'name'
p119893
S'execute_on'
p119894
sS'cpp_type'
p119895
S'MultiMooseEnum'
p119896
sS'default'
p119897
S'TIMESTEP_END'
p119898
sS'description'
p119899
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119900
sS'required'
p119901
I00
sS'options'
p119902
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119903
sS'group_name'
p119904
Nsa(dp119905
S'description'
p119906
S'Density = slope*(p - p0)\n'
p119907
sS'cpp_type'
p119908
S'double'
p119909
sS'default'
p119910
g3
sS'name'
p119911
S'p0'
p119912
sS'required'
p119913
I01
sS'group_name'
p119914
Nsa(dp119915
S'description'
p119916
S'Density = slope*(p - p0)\n'
p119917
sS'cpp_type'
p119918
S'double'
p119919
sS'default'
p119920
g3
sS'name'
p119921
S'slope'
p119922
sS'required'
p119923
I01
sS'group_name'
p119924
Nsa(dp119925
S'description'
p119926
g3
sS'cpp_type'
p119927
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119928
sS'default'
p119929
S'RichardsDensityIdeal'
p119930
sS'name'
p119931
S'type'
p119932
sS'required'
p119933
I00
sS'group_name'
p119934
Nsa(dp119935
S'description'
p119936
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119937
sS'cpp_type'
p119938
S'bool'
p119939
sS'default'
p119940
S'0'
p119941
sS'name'
p119942
S'use_displaced_mesh'
p119943
sS'required'
p119944
I00
sS'group_name'
p119945
S'Advanced'
p119946
sasS'name'
p119947
S'/UserObjects/RichardsDensityIdeal'
p119948
sa(dp119949
S'description'
p119950
S'Methane density (kg/m^3) at 20degC.  Pressure is assumed to be measured in Pascals.  NOTE: this expression is only valid to about P=20MPa.  Use van der Waals (RichardsDensityVDW) for higher pressures.\n'
p119951
sS'subblocks'
p119952
NsS'parameters'
p119953
(lp119954
(dp119955
S'description'
p119956
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p119957
sS'cpp_type'
p119958
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p119959
sS'default'
p119960
g3
sS'name'
p119961
S'control_tags'
p119962
sS'required'
p119963
I00
sS'group_name'
p119964
Nsa(dp119965
S'name'
p119966
S'execute_on'
p119967
sS'cpp_type'
p119968
S'MultiMooseEnum'
p119969
sS'default'
p119970
S'TIMESTEP_END'
p119971
sS'description'
p119972
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p119973
sS'required'
p119974
I00
sS'options'
p119975
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p119976
sS'group_name'
p119977
Nsa(dp119978
S'description'
p119979
g3
sS'cpp_type'
p119980
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p119981
sS'default'
p119982
S'RichardsDensityMethane20degC'
p119983
sS'name'
p119984
S'type'
p119985
sS'required'
p119986
I00
sS'group_name'
p119987
Nsa(dp119988
S'description'
p119989
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p119990
sS'cpp_type'
p119991
S'bool'
p119992
sS'default'
p119993
S'0'
p119994
sS'name'
p119995
S'use_displaced_mesh'
p119996
sS'required'
p119997
I00
sS'group_name'
p119998
S'Advanced'
p119999
sasS'name'
p120000
S'/UserObjects/RichardsDensityMethane20degC'
p120001
sa(dp120002
S'description'
p120003
S'Density of van der Waals gas.\n'
p120004
sS'subblocks'
p120005
NsS'parameters'
p120006
(lp120007
(dp120008
S'description'
p120009
S"Parameter 'a' in the van der Waals expression (P + n^2 a/V^2)(V - nb) = nRT.  Example for methane 0.2303 Pa m^6 mol^-2\n"
p120010
sS'cpp_type'
p120011
S'double'
p120012
sS'default'
p120013
g3
sS'name'
p120014
S'a'
p120015
sS'required'
p120016
I01
sS'group_name'
p120017
Nsa(dp120018
S'description'
p120019
S"Parameter 'b' in the van der Waals expression (P + n^2 a/V^2)(V - nb) = nRT.  Example for methane 4.31E-5 m^3/mol\n"
p120020
sS'cpp_type'
p120021
S'double'
p120022
sS'default'
p120023
g3
sS'name'
p120024
S'b'
p120025
sS'required'
p120026
I01
sS'group_name'
p120027
Nsa(dp120028
S'description'
p120029
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120030
sS'cpp_type'
p120031
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120032
sS'default'
p120033
g3
sS'name'
p120034
S'control_tags'
p120035
sS'required'
p120036
I00
sS'group_name'
p120037
Nsa(dp120038
S'name'
p120039
S'execute_on'
p120040
sS'cpp_type'
p120041
S'MultiMooseEnum'
p120042
sS'default'
p120043
S'TIMESTEP_END'
p120044
sS'description'
p120045
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120046
sS'required'
p120047
I00
sS'options'
p120048
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120049
sS'group_name'
p120050
Nsa(dp120051
S'description'
p120052
S'For P<0 the density is not physically defined, but numerically it is advantageous to define it:  density(P=-infinity) = -infinity_ratio*molar_mass, and density tends exponentially towards this value as P -> -infinity.  (Units are mol/m^3).\n'
p120053
sS'cpp_type'
p120054
S'double'
p120055
sS'default'
p120056
S'10'
p120057
sS'name'
p120058
S'infinity_ratio'
p120059
sS'required'
p120060
I00
sS'group_name'
p120061
Nsa(dp120062
S'description'
p120063
S'Molar mass of the gas.  Example for methane 16.04246E-3 kg/mol\n'
p120064
sS'cpp_type'
p120065
S'double'
p120066
sS'default'
p120067
g3
sS'name'
p120068
S'molar_mass'
p120069
sS'required'
p120070
I01
sS'group_name'
p120071
Nsa(dp120072
S'description'
p120073
S'Temperature in Kelvin\n'
p120074
sS'cpp_type'
p120075
S'double'
p120076
sS'default'
p120077
g3
sS'name'
p120078
S'temperature'
p120079
sS'required'
p120080
I01
sS'group_name'
p120081
Nsa(dp120082
S'description'
p120083
g3
sS'cpp_type'
p120084
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120085
sS'default'
p120086
S'RichardsDensityVDW'
p120087
sS'name'
p120088
S'type'
p120089
sS'required'
p120090
I00
sS'group_name'
p120091
Nsa(dp120092
S'description'
p120093
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120094
sS'cpp_type'
p120095
S'bool'
p120096
sS'default'
p120097
S'0'
p120098
sS'name'
p120099
S'use_displaced_mesh'
p120100
sS'required'
p120101
I00
sS'group_name'
p120102
S'Advanced'
p120103
sasS'name'
p120104
S'/UserObjects/RichardsDensityVDW'
p120105
sa(dp120106
S'description'
p120107
S'Records total flow INTO an excavation (if quantity is positive then flow has occured from rock into excavation void)\n'
p120108
sS'subblocks'
p120109
NsS'parameters'
p120110
(lp120111
(dp120112
S'description'
p120113
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120114
sS'cpp_type'
p120115
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120116
sS'default'
p120117
g3
sS'name'
p120118
S'boundary'
p120119
sS'required'
p120120
I00
sS'group_name'
p120121
Nsa(dp120122
S'description'
p120123
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120124
sS'cpp_type'
p120125
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120126
sS'default'
p120127
g3
sS'name'
p120128
S'control_tags'
p120129
sS'required'
p120130
I00
sS'group_name'
p120131
Nsa(dp120132
S'description'
p120133
S'The function describing the excavation geometry (type RichardsExcavGeom)\n'
p120134
sS'cpp_type'
p120135
S'FunctionName'
p120136
sS'default'
p120137
g3
sS'name'
p120138
S'excav_geom_function'
p120139
sS'required'
p120140
I01
sS'group_name'
p120141
Nsa(dp120142
S'name'
p120143
S'execute_on'
p120144
sS'cpp_type'
p120145
S'MultiMooseEnum'
p120146
sS'default'
p120147
S'TIMESTEP_END'
p120148
sS'description'
p120149
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120150
sS'required'
p120151
I00
sS'options'
p120152
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120153
sS'group_name'
p120154
Nsa(dp120155
S'description'
p120156
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120157
sS'cpp_type'
p120158
S'std::vector<OutputName, std::allocator<OutputName> >'
p120159
sS'default'
p120160
g3
sS'name'
p120161
S'outputs'
p120162
sS'required'
p120163
I00
sS'group_name'
p120164
S'Advanced'
p120165
sa(dp120166
S'description'
p120167
S'The UserObject that holds the list of Richards variable names.\n'
p120168
sS'cpp_type'
p120169
S'UserObjectName'
p120170
sS'default'
p120171
g3
sS'name'
p120172
S'richardsVarNames_UO'
p120173
sS'required'
p120174
I01
sS'group_name'
p120175
Nsa(dp120176
S'description'
p120177
g3
sS'cpp_type'
p120178
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120179
sS'default'
p120180
S'RichardsExcavFlow'
p120181
sS'name'
p120182
S'type'
p120183
sS'required'
p120184
I00
sS'group_name'
p120185
Nsa(dp120186
S'description'
p120187
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120188
sS'cpp_type'
p120189
S'bool'
p120190
sS'default'
p120191
S'0'
p120192
sS'name'
p120193
S'use_displaced_mesh'
p120194
sS'required'
p120195
I00
sS'group_name'
p120196
S'Advanced'
p120197
sa(dp120198
S'description'
p120199
S'The name of the variable that this boundary condition applies to\n'
p120200
sS'cpp_type'
p120201
S'std::vector<VariableName>'
p120202
sS'default'
p120203
g3
sS'name'
p120204
S'variable'
p120205
sS'required'
p120206
I00
sS'group_name'
p120207
NsasS'name'
p120208
S'/UserObjects/RichardsExcavFlow'
p120209
sa(dp120210
S'description'
p120211
g3
sS'subblocks'
p120212
NsS'parameters'
p120213
(lp120214
(dp120215
S'description'
p120216
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120217
sS'cpp_type'
p120218
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120219
sS'default'
p120220
g3
sS'name'
p120221
S'boundary'
p120222
sS'required'
p120223
I00
sS'group_name'
p120224
Nsa(dp120225
S'description'
p120226
S'Centre of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n'
p120227
sS'cpp_type'
p120228
S'double'
p120229
sS'default'
p120230
g3
sS'name'
p120231
S'centre'
p120232
sS'required'
p120233
I01
sS'group_name'
p120234
Nsa(dp120235
S'description'
p120236
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120237
sS'cpp_type'
p120238
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120239
sS'default'
p120240
g3
sS'name'
p120241
S'control_tags'
p120242
sS'required'
p120243
I00
sS'group_name'
p120244
Nsa(dp120245
S'name'
p120246
S'execute_on'
p120247
sS'cpp_type'
p120248
S'MultiMooseEnum'
p120249
sS'default'
p120250
S'TIMESTEP_END'
p120251
sS'description'
p120252
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120253
sS'required'
p120254
I00
sS'options'
p120255
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120256
sS'group_name'
p120257
Nsa(dp120258
S'description'
p120259
S'Maximum of the flux (measured in kg.m^-2.s^-1).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.  Note, to make this a source rather than a sink, let max<0\n'
p120260
sS'cpp_type'
p120261
S'double'
p120262
sS'default'
p120263
g3
sS'name'
p120264
S'max'
p120265
sS'required'
p120266
I01
sS'group_name'
p120267
Nsa(dp120268
S'description'
p120269
S'The flux will be multiplied by this spatially-and-temporally varying function.\n'
p120270
sS'cpp_type'
p120271
S'FunctionName'
p120272
sS'default'
p120273
S'1'
p120274
sS'name'
p120275
S'multiplying_fcn'
p120276
sS'required'
p120277
I00
sS'group_name'
p120278
Nsa(dp120279
S'description'
p120280
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120281
sS'cpp_type'
p120282
S'std::vector<OutputName, std::allocator<OutputName> >'
p120283
sS'default'
p120284
g3
sS'name'
p120285
S'outputs'
p120286
sS'required'
p120287
I00
sS'group_name'
p120288
S'Advanced'
p120289
sa(dp120290
S'description'
p120291
S'The UserObject that holds the list of Richards variable names.\n'
p120292
sS'cpp_type'
p120293
S'UserObjectName'
p120294
sS'default'
p120295
g3
sS'name'
p120296
S'richardsVarNames_UO'
p120297
sS'required'
p120298
I01
sS'group_name'
p120299
Nsa(dp120300
S'description'
p120301
S'Standard deviation of the Gaussian (measured in Pa).  Flux out = max*exp((-0.5*(p - centre)/sd)^2) for p<centre, and Flux out = max for p>centre.\n'
p120302
sS'cpp_type'
p120303
S'double'
p120304
sS'default'
p120305
g3
sS'name'
p120306
S'sd'
p120307
sS'required'
p120308
I01
sS'group_name'
p120309
Nsa(dp120310
S'description'
p120311
g3
sS'cpp_type'
p120312
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120313
sS'default'
p120314
S'RichardsHalfGaussianSinkFlux'
p120315
sS'name'
p120316
S'type'
p120317
sS'required'
p120318
I00
sS'group_name'
p120319
Nsa(dp120320
S'description'
p120321
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120322
sS'cpp_type'
p120323
S'bool'
p120324
sS'default'
p120325
S'0'
p120326
sS'name'
p120327
S'use_displaced_mesh'
p120328
sS'required'
p120329
I00
sS'group_name'
p120330
S'Advanced'
p120331
sa(dp120332
S'description'
p120333
S'The name of the variable that this boundary condition applies to\n'
p120334
sS'cpp_type'
p120335
S'std::vector<VariableName>'
p120336
sS'default'
p120337
g3
sS'name'
p120338
S'variable'
p120339
sS'required'
p120340
I00
sS'group_name'
p120341
NsasS'name'
p120342
S'/UserObjects/RichardsHalfGaussianSinkFlux'
p120343
sa(dp120344
S'description'
p120345
S'Returns the mass in a region.\n'
p120346
sS'subblocks'
p120347
NsS'parameters'
p120348
(lp120349
(dp120350
S'description'
p120351
S'The list of block ids (SubdomainID) that this object will be applied\n'
p120352
sS'cpp_type'
p120353
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p120354
sS'default'
p120355
g3
sS'name'
p120356
S'block'
p120357
sS'required'
p120358
I00
sS'group_name'
p120359
Nsa(dp120360
S'description'
p120361
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120362
sS'cpp_type'
p120363
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120364
sS'default'
p120365
g3
sS'name'
p120366
S'control_tags'
p120367
sS'required'
p120368
I00
sS'group_name'
p120369
Nsa(dp120370
S'name'
p120371
S'execute_on'
p120372
sS'cpp_type'
p120373
S'MultiMooseEnum'
p120374
sS'default'
p120375
S'TIMESTEP_END'
p120376
sS'description'
p120377
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120378
sS'required'
p120379
I00
sS'options'
p120380
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120381
sS'group_name'
p120382
Nsa(dp120383
S'description'
p120384
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120385
sS'cpp_type'
p120386
S'std::vector<OutputName, std::allocator<OutputName> >'
p120387
sS'default'
p120388
g3
sS'name'
p120389
S'outputs'
p120390
sS'required'
p120391
I00
sS'group_name'
p120392
S'Advanced'
p120393
sa(dp120394
S'description'
p120395
S'The UserObject that holds the list of Richards variable names.\n'
p120396
sS'cpp_type'
p120397
S'UserObjectName'
p120398
sS'default'
p120399
g3
sS'name'
p120400
S'richardsVarNames_UO'
p120401
sS'required'
p120402
I01
sS'group_name'
p120403
Nsa(dp120404
S'description'
p120405
S'The seed for the master random number generator\n'
p120406
sS'cpp_type'
p120407
S'unsigned int'
p120408
sS'default'
p120409
S'0'
p120410
sS'name'
p120411
S'seed'
p120412
sS'required'
p120413
I00
sS'group_name'
p120414
S'Advanced'
p120415
sa(dp120416
S'description'
p120417
g3
sS'cpp_type'
p120418
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120419
sS'default'
p120420
S'RichardsMass'
p120421
sS'name'
p120422
S'type'
p120423
sS'required'
p120424
I00
sS'group_name'
p120425
Nsa(dp120426
S'description'
p120427
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120428
sS'cpp_type'
p120429
S'bool'
p120430
sS'default'
p120431
S'0'
p120432
sS'name'
p120433
S'use_displaced_mesh'
p120434
sS'required'
p120435
I00
sS'group_name'
p120436
S'Advanced'
p120437
sa(dp120438
S'description'
p120439
S'The name of the variable that this object operates on\n'
p120440
sS'cpp_type'
p120441
S'std::vector<VariableName>'
p120442
sS'default'
p120443
g3
sS'name'
p120444
S'variable'
p120445
sS'required'
p120446
I00
sS'group_name'
p120447
NsasS'name'
p120448
S'/UserObjects/RichardsMass'
p120449
sa(dp120450
S'description'
p120451
S'Records the fluid flow into a sink (positive values indicate fluid is flowing from porespace into the sink).\n'
p120452
sS'subblocks'
p120453
NsS'parameters'
p120454
(lp120455
(dp120456
S'description'
p120457
S'Tuple of flux values (measured in kg.m^-2.s^-1 for use_mobility=false, and in Pa.s^-1 if use_mobility=true).  This flux is OUT of the medium: hence positive values of flux means this will be a SINK, while negative values indicate this flux will be a SOURCE.  A piecewise-linear fit is performed to the (pressure,bare_fluxes) pairs to obtain the flux at any arbitrary pressure, and the first or last bare_flux values are used if the quad-point pressure falls outside this range.\n'
p120458
sS'cpp_type'
p120459
S'std::vector<double, std::allocator<double> >'
p120460
sS'default'
p120461
g3
sS'name'
p120462
S'bare_fluxes'
p120463
sS'required'
p120464
I01
sS'group_name'
p120465
Nsa(dp120466
S'description'
p120467
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p120468
sS'cpp_type'
p120469
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p120470
sS'default'
p120471
g3
sS'name'
p120472
S'boundary'
p120473
sS'required'
p120474
I00
sS'group_name'
p120475
Nsa(dp120476
S'description'
p120477
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120478
sS'cpp_type'
p120479
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120480
sS'default'
p120481
g3
sS'name'
p120482
S'control_tags'
p120483
sS'required'
p120484
I00
sS'group_name'
p120485
Nsa(dp120486
S'name'
p120487
S'execute_on'
p120488
sS'cpp_type'
p120489
S'MultiMooseEnum'
p120490
sS'default'
p120491
S'TIMESTEP_END'
p120492
sS'description'
p120493
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120494
sS'required'
p120495
I00
sS'options'
p120496
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120497
sS'group_name'
p120498
Nsa(dp120499
S'description'
p120500
S'The flux will be multiplied by this spatially-and-temporally varying function.  This is useful if the boundary is a moving boundary controlled by RichardsExcav.\n'
p120501
sS'cpp_type'
p120502
S'FunctionName'
p120503
sS'default'
p120504
S'1'
p120505
sS'name'
p120506
S'multiplying_fcn'
p120507
sS'required'
p120508
I00
sS'group_name'
p120509
Nsa(dp120510
S'description'
p120511
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120512
sS'cpp_type'
p120513
S'std::vector<OutputName, std::allocator<OutputName> >'
p120514
sS'default'
p120515
g3
sS'name'
p120516
S'outputs'
p120517
sS'required'
p120518
I00
sS'group_name'
p120519
S'Advanced'
p120520
sa(dp120521
S'description'
p120522
S'Tuple of pressure values.  Must be monotonically increasing.\n'
p120523
sS'cpp_type'
p120524
S'std::vector<double, std::allocator<double> >'
p120525
sS'default'
p120526
g3
sS'name'
p120527
S'pressures'
p120528
sS'required'
p120529
I01
sS'group_name'
p120530
Nsa(dp120531
S'description'
p120532
S'The UserObject that holds the list of Richards variable names.\n'
p120533
sS'cpp_type'
p120534
S'UserObjectName'
p120535
sS'default'
p120536
g3
sS'name'
p120537
S'richardsVarNames_UO'
p120538
sS'required'
p120539
I01
sS'group_name'
p120540
Nsa(dp120541
S'description'
p120542
g3
sS'cpp_type'
p120543
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120544
sS'default'
p120545
S'RichardsPiecewiseLinearSinkFlux'
p120546
sS'name'
p120547
S'type'
p120548
sS'required'
p120549
I00
sS'group_name'
p120550
Nsa(dp120551
S'description'
p120552
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120553
sS'cpp_type'
p120554
S'bool'
p120555
sS'default'
p120556
S'0'
p120557
sS'name'
p120558
S'use_displaced_mesh'
p120559
sS'required'
p120560
I00
sS'group_name'
p120561
S'Advanced'
p120562
sa(dp120563
S'description'
p120564
S"If true, then fluxes are multiplied by (density*permeability_nn/viscosity), where the '_nn' indicates the component normal to the boundary.  In this case bare_flux is measured in Pa.s^-1.  This can be used in conjunction with use_relperm.\n"
p120565
sS'cpp_type'
p120566
S'bool'
p120567
sS'default'
p120568
g3
sS'name'
p120569
S'use_mobility'
p120570
sS'required'
p120571
I01
sS'group_name'
p120572
Nsa(dp120573
S'description'
p120574
S'If true, then fluxes are multiplied by relative permeability.  This can be used in conjunction with use_mobility\n'
p120575
sS'cpp_type'
p120576
S'bool'
p120577
sS'default'
p120578
g3
sS'name'
p120579
S'use_relperm'
p120580
sS'required'
p120581
I01
sS'group_name'
p120582
Nsa(dp120583
S'description'
p120584
S'The name of the variable that this boundary condition applies to\n'
p120585
sS'cpp_type'
p120586
S'std::vector<VariableName>'
p120587
sS'default'
p120588
g3
sS'name'
p120589
S'variable'
p120590
sS'required'
p120591
I00
sS'group_name'
p120592
NsasS'name'
p120593
S'/UserObjects/RichardsPiecewiseLinearSinkFlux'
p120594
sa(dp120595
S'description'
p120596
g3
sS'subblocks'
p120597
NsS'parameters'
p120598
(lp120599
(dp120600
S'description'
p120601
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120602
sS'cpp_type'
p120603
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120604
sS'default'
p120605
g3
sS'name'
p120606
S'control_tags'
p120607
sS'required'
p120608
I00
sS'group_name'
p120609
Nsa(dp120610
S'name'
p120611
S'execute_on'
p120612
sS'cpp_type'
p120613
S'MultiMooseEnum'
p120614
sS'default'
p120615
S'TIMESTEP_END'
p120616
sS'description'
p120617
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120618
sS'required'
p120619
I00
sS'options'
p120620
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120621
sS'group_name'
p120622
Nsa(dp120623
S'description'
p120624
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p120625
sS'cpp_type'
p120626
S'std::vector<OutputName, std::allocator<OutputName> >'
p120627
sS'default'
p120628
g3
sS'name'
p120629
S'outputs'
p120630
sS'required'
p120631
I00
sS'group_name'
p120632
S'Advanced'
p120633
sa(dp120634
S'description'
p120635
g3
sS'cpp_type'
p120636
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120637
sS'default'
p120638
S'RichardsPlotQuantity'
p120639
sS'name'
p120640
S'type'
p120641
sS'required'
p120642
I00
sS'group_name'
p120643
Nsa(dp120644
S'description'
p120645
S'user object name that has the total mass value\n'
p120646
sS'cpp_type'
p120647
S'UserObjectName'
p120648
sS'default'
p120649
g3
sS'name'
p120650
S'uo'
p120651
sS'required'
p120652
I01
sS'group_name'
p120653
Nsa(dp120654
S'description'
p120655
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120656
sS'cpp_type'
p120657
S'bool'
p120658
sS'default'
p120659
S'0'
p120660
sS'name'
p120661
S'use_displaced_mesh'
p120662
sS'required'
p120663
I00
sS'group_name'
p120664
S'Advanced'
p120665
sasS'name'
p120666
S'/UserObjects/RichardsPlotQuantity'
p120667
sa(dp120668
S'description'
p120669
S'Broadbridge-White form of relative permeability.  Define s = (seff - Sn)/(Ss - Sn).  Then relperm = Kn + s^2(c-1)(Kn-Ks)/(c-s) if 0<s<1, otherwise relperm = Kn if s<=0, otherwise relperm = Ks if s>=1.\n'
p120670
sS'subblocks'
p120671
NsS'parameters'
p120672
(lp120673
(dp120674
S'description'
p120675
S"BW's C parameter.  Must be > 1.   Define s = (seff - Sn)/(Ss - Sn).  Then relperm = Kn + s^2(c-1)(Kn-Ks)/(c-s) if 0<s<1, otherwise relperm = Kn if s<=0, otherwise relperm = Ks if s>=1.\n"
p120676
sS'cpp_type'
p120677
S'double'
p120678
sS'default'
p120679
g3
sS'name'
p120680
S'C'
p120681
sS'required'
p120682
I01
sS'group_name'
p120683
Nsa(dp120684
S'description'
p120685
S'Relative permeability at Seff = Sn.  Must be < Ks\n'
p120686
sS'cpp_type'
p120687
S'double'
p120688
sS'default'
p120689
S'0'
p120690
sS'name'
p120691
S'Kn'
p120692
sS'required'
p120693
I00
sS'group_name'
p120694
Nsa(dp120695
S'description'
p120696
S'Relative permeability at Seff = Ss.  Must be > Kn\n'
p120697
sS'cpp_type'
p120698
S'double'
p120699
sS'default'
p120700
S'1'
p120701
sS'name'
p120702
S'Ks'
p120703
sS'required'
p120704
I00
sS'group_name'
p120705
Nsa(dp120706
S'description'
p120707
S"Low saturation.  This must be < Ss, and non-negative.  This is BW's initial effective saturation, below which effective saturation never goes in their simulations/models.  If Kn=0 then Sn is the immobile saturation.\n"
p120708
sS'cpp_type'
p120709
S'double'
p120710
sS'default'
p120711
g3
sS'name'
p120712
S'Sn'
p120713
sS'required'
p120714
I01
sS'group_name'
p120715
Nsa(dp120716
S'description'
p120717
S"High saturation.  This must be > Sn and <= 1.  Effective saturation where porepressure = 0.  Effective saturation never exceeds this value in BW's simulations/models.\n"
p120718
sS'cpp_type'
p120719
S'double'
p120720
sS'default'
p120721
S'1'
p120722
sS'name'
p120723
S'Ss'
p120724
sS'required'
p120725
I00
sS'group_name'
p120726
Nsa(dp120727
S'description'
p120728
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120729
sS'cpp_type'
p120730
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120731
sS'default'
p120732
g3
sS'name'
p120733
S'control_tags'
p120734
sS'required'
p120735
I00
sS'group_name'
p120736
Nsa(dp120737
S'name'
p120738
S'execute_on'
p120739
sS'cpp_type'
p120740
S'MultiMooseEnum'
p120741
sS'default'
p120742
S'TIMESTEP_END'
p120743
sS'description'
p120744
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120745
sS'required'
p120746
I00
sS'options'
p120747
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120748
sS'group_name'
p120749
Nsa(dp120750
S'description'
p120751
g3
sS'cpp_type'
p120752
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120753
sS'default'
p120754
S'RichardsRelPermBW'
p120755
sS'name'
p120756
S'type'
p120757
sS'required'
p120758
I00
sS'group_name'
p120759
Nsa(dp120760
S'description'
p120761
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120762
sS'cpp_type'
p120763
S'bool'
p120764
sS'default'
p120765
S'0'
p120766
sS'name'
p120767
S'use_displaced_mesh'
p120768
sS'required'
p120769
I00
sS'group_name'
p120770
S'Advanced'
p120771
sasS'name'
p120772
S'/UserObjects/RichardsRelPermBW'
p120773
sa(dp120774
S'description'
p120775
S'Monomial form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^n if s<simm, otherwise relperm=1\n'
p120776
sS'subblocks'
p120777
NsS'parameters'
p120778
(lp120779
(dp120780
S'description'
p120781
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120782
sS'cpp_type'
p120783
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120784
sS'default'
p120785
g3
sS'name'
p120786
S'control_tags'
p120787
sS'required'
p120788
I00
sS'group_name'
p120789
Nsa(dp120790
S'name'
p120791
S'execute_on'
p120792
sS'cpp_type'
p120793
S'MultiMooseEnum'
p120794
sS'default'
p120795
S'TIMESTEP_END'
p120796
sS'description'
p120797
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120798
sS'required'
p120799
I00
sS'options'
p120800
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120801
sS'group_name'
p120802
Nsa(dp120803
S'description'
p120804
S'Exponent.  Must be >= 0.   Define s = (seff - simm)/(1 - simm).  Then relperm = s^n\n'
p120805
sS'cpp_type'
p120806
S'double'
p120807
sS'default'
p120808
g3
sS'name'
p120809
S'n'
p120810
sS'required'
p120811
I01
sS'group_name'
p120812
Nsa(dp120813
S'description'
p120814
S'Immobile saturation.  Must be between 0 and 1.   Define s = (seff - simm)/(1 - simm).  Then relperm = s^n\n'
p120815
sS'cpp_type'
p120816
S'double'
p120817
sS'default'
p120818
g3
sS'name'
p120819
S'simm'
p120820
sS'required'
p120821
I01
sS'group_name'
p120822
Nsa(dp120823
S'description'
p120824
g3
sS'cpp_type'
p120825
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120826
sS'default'
p120827
S'RichardsRelPermMonomial'
p120828
sS'name'
p120829
S'type'
p120830
sS'required'
p120831
I00
sS'group_name'
p120832
Nsa(dp120833
S'description'
p120834
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120835
sS'cpp_type'
p120836
S'bool'
p120837
sS'default'
p120838
S'0'
p120839
sS'name'
p120840
S'use_displaced_mesh'
p120841
sS'required'
p120842
I00
sS'group_name'
p120843
S'Advanced'
p120844
sa(dp120845
S'description'
p120846
S'If n=0, this is the value of relative permeability for s<=simm\n'
p120847
sS'cpp_type'
p120848
S'double'
p120849
sS'default'
p120850
S'0'
p120851
sS'name'
p120852
S'zero_to_the_zero'
p120853
sS'required'
p120854
I00
sS'group_name'
p120855
NsasS'name'
p120856
S'/UserObjects/RichardsRelPermMonomial'
p120857
sa(dp120858
S'description'
p120859
S'Power form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = (n+1)s^n - ns^(n+1) if s<simm, otherwise relperm=1\n'
p120860
sS'subblocks'
p120861
NsS'parameters'
p120862
(lp120863
(dp120864
S'description'
p120865
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120866
sS'cpp_type'
p120867
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120868
sS'default'
p120869
g3
sS'name'
p120870
S'control_tags'
p120871
sS'required'
p120872
I00
sS'group_name'
p120873
Nsa(dp120874
S'name'
p120875
S'execute_on'
p120876
sS'cpp_type'
p120877
S'MultiMooseEnum'
p120878
sS'default'
p120879
S'TIMESTEP_END'
p120880
sS'description'
p120881
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120882
sS'required'
p120883
I00
sS'options'
p120884
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120885
sS'group_name'
p120886
Nsa(dp120887
S'description'
p120888
S'Exponent.  Must be >= 2.   Define s = (seff - simm)/(1 - simm).  Then relperm = (n+1)s^n - ns^(n+1)\n'
p120889
sS'cpp_type'
p120890
S'double'
p120891
sS'default'
p120892
g3
sS'name'
p120893
S'n'
p120894
sS'required'
p120895
I01
sS'group_name'
p120896
Nsa(dp120897
S'description'
p120898
S'Immobile saturation.  Must be between 0 and 1.   Define s = (seff - simm)/(1 - simm).  Then relperm = (n+1)s^n - ns^(n+1)\n'
p120899
sS'cpp_type'
p120900
S'double'
p120901
sS'default'
p120902
g3
sS'name'
p120903
S'simm'
p120904
sS'required'
p120905
I01
sS'group_name'
p120906
Nsa(dp120907
S'description'
p120908
g3
sS'cpp_type'
p120909
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120910
sS'default'
p120911
S'RichardsRelPermPower'
p120912
sS'name'
p120913
S'type'
p120914
sS'required'
p120915
I00
sS'group_name'
p120916
Nsa(dp120917
S'description'
p120918
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120919
sS'cpp_type'
p120920
S'bool'
p120921
sS'default'
p120922
S'0'
p120923
sS'name'
p120924
S'use_displaced_mesh'
p120925
sS'required'
p120926
I00
sS'group_name'
p120927
S'Advanced'
p120928
sasS'name'
p120929
S'/UserObjects/RichardsRelPermPower'
p120930
sa(dp120931
S'description'
p120932
S'Power form of relative permeability that might be useful for gases.  Define s = (seff - simm)/(1 - simm).  Then relperm = 1 - (n+1)(1-s)^n + n(1-s)^(n+1) if s<simm, otherwise relperm=1\n'
p120933
sS'subblocks'
p120934
NsS'parameters'
p120935
(lp120936
(dp120937
S'description'
p120938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p120939
sS'cpp_type'
p120940
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p120941
sS'default'
p120942
g3
sS'name'
p120943
S'control_tags'
p120944
sS'required'
p120945
I00
sS'group_name'
p120946
Nsa(dp120947
S'name'
p120948
S'execute_on'
p120949
sS'cpp_type'
p120950
S'MultiMooseEnum'
p120951
sS'default'
p120952
S'TIMESTEP_END'
p120953
sS'description'
p120954
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p120955
sS'required'
p120956
I00
sS'options'
p120957
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p120958
sS'group_name'
p120959
Nsa(dp120960
S'description'
p120961
S'Exponent.  Must be >= 2.   Define s = (seff - simm)/(1 - simm).  Then relperm = 1 - (n+1)(1-s)^n + n(1-s)^(n+1)\n'
p120962
sS'cpp_type'
p120963
S'double'
p120964
sS'default'
p120965
g3
sS'name'
p120966
S'n'
p120967
sS'required'
p120968
I01
sS'group_name'
p120969
Nsa(dp120970
S'description'
p120971
S'Immobile saturation.  Must be between 0 and 1.   Define s = (seff - simm)/(1 - simm).  Then relperm = 1 - (n+1)(1-s)^n + n(1-s)^(n+1)\n'
p120972
sS'cpp_type'
p120973
S'double'
p120974
sS'default'
p120975
g3
sS'name'
p120976
S'simm'
p120977
sS'required'
p120978
I01
sS'group_name'
p120979
Nsa(dp120980
S'description'
p120981
g3
sS'cpp_type'
p120982
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p120983
sS'default'
p120984
S'RichardsRelPermPowerGas'
p120985
sS'name'
p120986
S'type'
p120987
sS'required'
p120988
I00
sS'group_name'
p120989
Nsa(dp120990
S'description'
p120991
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p120992
sS'cpp_type'
p120993
S'bool'
p120994
sS'default'
p120995
S'0'
p120996
sS'name'
p120997
S'use_displaced_mesh'
p120998
sS'required'
p120999
I00
sS'group_name'
p121000
S'Advanced'
p121001
sasS'name'
p121002
S'/UserObjects/RichardsRelPermPowerGas'
p121003
sa(dp121004
S'description'
p121005
S'VG form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2, if s>0, and relperm=0 otherwise\n'
p121006
sS'subblocks'
p121007
NsS'parameters'
p121008
(lp121009
(dp121010
S'description'
p121011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121012
sS'cpp_type'
p121013
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121014
sS'default'
p121015
g3
sS'name'
p121016
S'control_tags'
p121017
sS'required'
p121018
I00
sS'group_name'
p121019
Nsa(dp121020
S'name'
p121021
S'execute_on'
p121022
sS'cpp_type'
p121023
S'MultiMooseEnum'
p121024
sS'default'
p121025
S'TIMESTEP_END'
p121026
sS'description'
p121027
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121028
sS'required'
p121029
I00
sS'options'
p121030
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121031
sS'group_name'
p121032
Nsa(dp121033
S'description'
p121034
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set >0.5.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n'
p121035
sS'cpp_type'
p121036
S'double'
p121037
sS'default'
p121038
g3
sS'name'
p121039
S'm'
p121040
sS'required'
p121041
I01
sS'group_name'
p121042
Nsa(dp121043
S'description'
p121044
S'Immobile saturation.  Must be between 0 and 1.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n'
p121045
sS'cpp_type'
p121046
S'double'
p121047
sS'default'
p121048
g3
sS'name'
p121049
S'simm'
p121050
sS'required'
p121051
I01
sS'group_name'
p121052
Nsa(dp121053
S'description'
p121054
g3
sS'cpp_type'
p121055
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121056
sS'default'
p121057
S'RichardsRelPermVG'
p121058
sS'name'
p121059
S'type'
p121060
sS'required'
p121061
I00
sS'group_name'
p121062
Nsa(dp121063
S'description'
p121064
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121065
sS'cpp_type'
p121066
S'bool'
p121067
sS'default'
p121068
S'0'
p121069
sS'name'
p121070
S'use_displaced_mesh'
p121071
sS'required'
p121072
I00
sS'group_name'
p121073
S'Advanced'
p121074
sasS'name'
p121075
S'/UserObjects/RichardsRelPermVG'
p121076
sa(dp121077
S'description'
p121078
S'VG1 form of relative permeability.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2, if s>0, and relperm=0 otherwise\n'
p121079
sS'subblocks'
p121080
NsS'parameters'
p121081
(lp121082
(dp121083
S'description'
p121084
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121085
sS'cpp_type'
p121086
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121087
sS'default'
p121088
g3
sS'name'
p121089
S'control_tags'
p121090
sS'required'
p121091
I00
sS'group_name'
p121092
Nsa(dp121093
S'name'
p121094
S'execute_on'
p121095
sS'cpp_type'
p121096
S'MultiMooseEnum'
p121097
sS'default'
p121098
S'TIMESTEP_END'
p121099
sS'description'
p121100
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121101
sS'required'
p121102
I00
sS'options'
p121103
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121104
sS'group_name'
p121105
Nsa(dp121106
S'description'
p121107
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set >0.5.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n'
p121108
sS'cpp_type'
p121109
S'double'
p121110
sS'default'
p121111
g3
sS'name'
p121112
S'm'
p121113
sS'required'
p121114
I01
sS'group_name'
p121115
Nsa(dp121116
S'description'
p121117
S'cutoff in effective saturation.\n'
p121118
sS'cpp_type'
p121119
S'double'
p121120
sS'default'
p121121
g3
sS'name'
p121122
S'scut'
p121123
sS'required'
p121124
I01
sS'group_name'
p121125
Nsa(dp121126
S'description'
p121127
S'Immobile saturation.  Must be between 0 and 1.  Define s = (seff - simm)/(1 - simm).  Then relperm = s^(1/2) * (1 - (1 - s^(1/m))^m)^2\n'
p121128
sS'cpp_type'
p121129
S'double'
p121130
sS'default'
p121131
g3
sS'name'
p121132
S'simm'
p121133
sS'required'
p121134
I01
sS'group_name'
p121135
Nsa(dp121136
S'description'
p121137
g3
sS'cpp_type'
p121138
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121139
sS'default'
p121140
S'RichardsRelPermVG1'
p121141
sS'name'
p121142
S'type'
p121143
sS'required'
p121144
I00
sS'group_name'
p121145
Nsa(dp121146
S'description'
p121147
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121148
sS'cpp_type'
p121149
S'bool'
p121150
sS'default'
p121151
S'0'
p121152
sS'name'
p121153
S'use_displaced_mesh'
p121154
sS'required'
p121155
I00
sS'group_name'
p121156
S'Advanced'
p121157
sasS'name'
p121158
S'/UserObjects/RichardsRelPermVG1'
p121159
sa(dp121160
S'description'
p121161
S'User object for no SUPG\n'
p121162
sS'subblocks'
p121163
NsS'parameters'
p121164
(lp121165
(dp121166
S'description'
p121167
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121168
sS'cpp_type'
p121169
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121170
sS'default'
p121171
g3
sS'name'
p121172
S'control_tags'
p121173
sS'required'
p121174
I00
sS'group_name'
p121175
Nsa(dp121176
S'name'
p121177
S'execute_on'
p121178
sS'cpp_type'
p121179
S'MultiMooseEnum'
p121180
sS'default'
p121181
S'TIMESTEP_END'
p121182
sS'description'
p121183
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121184
sS'required'
p121185
I00
sS'options'
p121186
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121187
sS'group_name'
p121188
Nsa(dp121189
S'description'
p121190
g3
sS'cpp_type'
p121191
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121192
sS'default'
p121193
S'RichardsSUPGnone'
p121194
sS'name'
p121195
S'type'
p121196
sS'required'
p121197
I00
sS'group_name'
p121198
Nsa(dp121199
S'description'
p121200
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121201
sS'cpp_type'
p121202
S'bool'
p121203
sS'default'
p121204
S'0'
p121205
sS'name'
p121206
S'use_displaced_mesh'
p121207
sS'required'
p121208
I00
sS'group_name'
p121209
S'Advanced'
p121210
sasS'name'
p121211
S'/UserObjects/RichardsSUPGnone'
p121212
sa(dp121213
S'description'
p121214
S"Standard SUPG relationships for Richards flow based on Appendix A of      TJR Hughes, M Mallet and A Mizukami ``A new finite element formulation for computational fluid dynamics:: II. Behond SUPG'' Computer Methods in Applied Mechanics and Engineering 54 (1986) 341--355\n"
p121215
sS'subblocks'
p121216
NsS'parameters'
p121217
(lp121218
(dp121219
S'description'
p121220
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121221
sS'cpp_type'
p121222
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121223
sS'default'
p121224
g3
sS'name'
p121225
S'control_tags'
p121226
sS'required'
p121227
I00
sS'group_name'
p121228
Nsa(dp121229
S'name'
p121230
S'execute_on'
p121231
sS'cpp_type'
p121232
S'MultiMooseEnum'
p121233
sS'default'
p121234
S'TIMESTEP_END'
p121235
sS'description'
p121236
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121237
sS'required'
p121238
I00
sS'options'
p121239
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121240
sS'group_name'
p121241
Nsa(dp121242
S'description'
p121243
S'SUPG pressure.  This parameter controls the strength of the upwinding.  This parameter must be positive.  If you need to track advancing fronts in a problem, then set to less than your expected range of pressures in your unsaturated zone.  Otherwise, set larger, and then minimal upwinding will occur and convergence will typically be good.  If you need no SUPG, it is more efficient not to use this UserObject.\n'
p121244
sS'cpp_type'
p121245
S'double'
p121246
sS'default'
p121247
g3
sS'name'
p121248
S'p_SUPG'
p121249
sS'required'
p121250
I01
sS'group_name'
p121251
Nsa(dp121252
S'description'
p121253
g3
sS'cpp_type'
p121254
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121255
sS'default'
p121256
S'RichardsSUPGstandard'
p121257
sS'name'
p121258
S'type'
p121259
sS'required'
p121260
I00
sS'group_name'
p121261
Nsa(dp121262
S'description'
p121263
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121264
sS'cpp_type'
p121265
S'bool'
p121266
sS'default'
p121267
S'0'
p121268
sS'name'
p121269
S'use_displaced_mesh'
p121270
sS'required'
p121271
I00
sS'group_name'
p121272
S'Advanced'
p121273
sasS'name'
p121274
S'/UserObjects/RichardsSUPGstandard'
p121275
sa(dp121276
S'description'
p121277
S'User object yielding saturation for a phase as a function of effective saturation of that phase\n'
p121278
sS'subblocks'
p121279
NsS'parameters'
p121280
(lp121281
(dp121282
S'description'
p121283
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121284
sS'cpp_type'
p121285
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121286
sS'default'
p121287
g3
sS'name'
p121288
S'control_tags'
p121289
sS'required'
p121290
I00
sS'group_name'
p121291
Nsa(dp121292
S'name'
p121293
S'execute_on'
p121294
sS'cpp_type'
p121295
S'MultiMooseEnum'
p121296
sS'default'
p121297
S'TIMESTEP_END'
p121298
sS'description'
p121299
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121300
sS'required'
p121301
I00
sS'options'
p121302
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121303
sS'group_name'
p121304
Nsa(dp121305
S'description'
p121306
S'Residual fluid saturation for the phase.  0 <= s_res < 1.\n'
p121307
sS'cpp_type'
p121308
S'double'
p121309
sS'default'
p121310
g3
sS'name'
p121311
S's_res'
p121312
sS'required'
p121313
I01
sS'group_name'
p121314
Nsa(dp121315
S'description'
p121316
S'Sum of s_res over all phases.  s_res <= sum_s_res < 1.  It is up to you to ensure the sum is done correctly.\n'
p121317
sS'cpp_type'
p121318
S'double'
p121319
sS'default'
p121320
g3
sS'name'
p121321
S'sum_s_res'
p121322
sS'required'
p121323
I01
sS'group_name'
p121324
Nsa(dp121325
S'description'
p121326
g3
sS'cpp_type'
p121327
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121328
sS'default'
p121329
S'RichardsSat'
p121330
sS'name'
p121331
S'type'
p121332
sS'required'
p121333
I00
sS'group_name'
p121334
Nsa(dp121335
S'description'
p121336
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121337
sS'cpp_type'
p121338
S'bool'
p121339
sS'default'
p121340
S'0'
p121341
sS'name'
p121342
S'use_displaced_mesh'
p121343
sS'required'
p121344
I00
sS'group_name'
p121345
S'Advanced'
p121346
sasS'name'
p121347
S'/UserObjects/RichardsSat'
p121348
sa(dp121349
S'description'
p121350
S'Broadbridge-white form of effective saturation for negligable Kn.  Then porepressure = -las*( (1-th)/th - (1/c)Ln((C-th)/((C-1)th))), for th = (Seff - Sn)/(Ss - Sn).  A Lambert-W function must be evaluated to express Seff in terms of porepressure, which can be expensive\n'
p121351
sS'subblocks'
p121352
NsS'parameters'
p121353
(lp121354
(dp121355
S'description'
p121356
S"BW's C parameter.  Must be > 1.  Typical value would be 1.05.\n"
p121357
sS'cpp_type'
p121358
S'double'
p121359
sS'default'
p121360
g3
sS'name'
p121361
S'C'
p121362
sS'required'
p121363
I01
sS'group_name'
p121364
Nsa(dp121365
S'description'
p121366
S"Low saturation.  This must be < Ss, and non-negative.  This is BW's initial effective saturation, below which effective saturation never goes in their simulations/models.  If Kn=0 then Sn is the immobile saturation.  This form of effective saturation is only correct for Kn small.\n"
p121367
sS'cpp_type'
p121368
S'double'
p121369
sS'default'
p121370
g3
sS'name'
p121371
S'Sn'
p121372
sS'required'
p121373
I01
sS'group_name'
p121374
Nsa(dp121375
S'description'
p121376
S"High saturation.  This must be > Sn and <= 1.  Effective saturation where porepressure = 0.  Effective saturation never exceeds this value in BW's simulations/models.\n"
p121377
sS'cpp_type'
p121378
S'double'
p121379
sS'default'
p121380
S'1'
p121381
sS'name'
p121382
S'Ss'
p121383
sS'required'
p121384
I00
sS'group_name'
p121385
Nsa(dp121386
S'description'
p121387
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121388
sS'cpp_type'
p121389
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121390
sS'default'
p121391
g3
sS'name'
p121392
S'control_tags'
p121393
sS'required'
p121394
I00
sS'group_name'
p121395
Nsa(dp121396
S'name'
p121397
S'execute_on'
p121398
sS'cpp_type'
p121399
S'MultiMooseEnum'
p121400
sS'default'
p121401
S'TIMESTEP_END'
p121402
sS'description'
p121403
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121404
sS'required'
p121405
I00
sS'options'
p121406
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121407
sS'group_name'
p121408
Nsa(dp121409
S'description'
p121410
S"BW's lambda_s parameter multiplied by (fluiddensity*gravity).  Must be > 0.  Typical value would be 1E5\n"
p121411
sS'cpp_type'
p121412
S'double'
p121413
sS'default'
p121414
g3
sS'name'
p121415
S'las'
p121416
sS'required'
p121417
I01
sS'group_name'
p121418
Nsa(dp121419
S'description'
p121420
g3
sS'cpp_type'
p121421
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121422
sS'default'
p121423
S'RichardsSeff1BWsmall'
p121424
sS'name'
p121425
S'type'
p121426
sS'required'
p121427
I00
sS'group_name'
p121428
Nsa(dp121429
S'description'
p121430
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121431
sS'cpp_type'
p121432
S'bool'
p121433
sS'default'
p121434
S'0'
p121435
sS'name'
p121436
S'use_displaced_mesh'
p121437
sS'required'
p121438
I00
sS'group_name'
p121439
S'Advanced'
p121440
sasS'name'
p121441
S'/UserObjects/RichardsSeff1BWsmall'
p121442
sa(dp121443
S'description'
p121444
S'Rogers-Stallybrass-Clements version of effective saturation for the water phase, valid for residual saturations = 0, and viscosityOil = 2*viscosityWater.  seff_water = 1/Sqrt(1 + Exp((Pc - shift)/scale)), where scale = 0.25*scale_ratio*oil_viscosity.  Note that this effective saturation is mostly useful for 2-phase, not single-phase.\n'
p121445
sS'subblocks'
p121446
NsS'parameters'
p121447
(lp121448
(dp121449
S'description'
p121450
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121451
sS'cpp_type'
p121452
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121453
sS'default'
p121454
g3
sS'name'
p121455
S'control_tags'
p121456
sS'required'
p121457
I00
sS'group_name'
p121458
Nsa(dp121459
S'name'
p121460
S'execute_on'
p121461
sS'cpp_type'
p121462
S'MultiMooseEnum'
p121463
sS'default'
p121464
S'TIMESTEP_END'
p121465
sS'description'
p121466
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121467
sS'required'
p121468
I00
sS'options'
p121469
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121470
sS'group_name'
p121471
Nsa(dp121472
S'description'
p121473
S'Viscosity of oil (gas) phase.  It is assumed this is double the water-phase viscosity.  (Note that this effective saturation is mostly useful for 2-phase, not single-phase.)\n'
p121474
sS'cpp_type'
p121475
S'double'
p121476
sS'default'
p121477
g3
sS'name'
p121478
S'oil_viscosity'
p121479
sS'required'
p121480
I00
sS'group_name'
p121481
Nsa(dp121482
S'description'
p121483
S'This is porosity/permeability/beta^2, where beta may be chosen by the user.  It has dimensions [time]\n'
p121484
sS'cpp_type'
p121485
S'double'
p121486
sS'default'
p121487
g3
sS'name'
p121488
S'scale_ratio'
p121489
sS'required'
p121490
I00
sS'group_name'
p121491
Nsa(dp121492
S'description'
p121493
S'effective saturation is a function of (Pc - shift)\n'
p121494
sS'cpp_type'
p121495
S'double'
p121496
sS'default'
p121497
g3
sS'name'
p121498
S'shift'
p121499
sS'required'
p121500
I00
sS'group_name'
p121501
Nsa(dp121502
S'description'
p121503
g3
sS'cpp_type'
p121504
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121505
sS'default'
p121506
S'RichardsSeff1RSC'
p121507
sS'name'
p121508
S'type'
p121509
sS'required'
p121510
I00
sS'group_name'
p121511
Nsa(dp121512
S'description'
p121513
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121514
sS'cpp_type'
p121515
S'bool'
p121516
sS'default'
p121517
S'0'
p121518
sS'name'
p121519
S'use_displaced_mesh'
p121520
sS'required'
p121521
I00
sS'group_name'
p121522
S'Advanced'
p121523
sasS'name'
p121524
S'/UserObjects/RichardsSeff1RSC'
p121525
sa(dp121526
S'description'
p121527
S'van-Genuchten effective saturation as a function of pressure suitable for use in single-phase simulations..  seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n'
p121528
sS'subblocks'
p121529
NsS'parameters'
p121530
(lp121531
(dp121532
S'description'
p121533
S'van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n'
p121534
sS'cpp_type'
p121535
S'double'
p121536
sS'default'
p121537
g3
sS'name'
p121538
S'al'
p121539
sS'required'
p121540
I01
sS'group_name'
p121541
Nsa(dp121542
S'description'
p121543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121544
sS'cpp_type'
p121545
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121546
sS'default'
p121547
g3
sS'name'
p121548
S'control_tags'
p121549
sS'required'
p121550
I00
sS'group_name'
p121551
Nsa(dp121552
S'name'
p121553
S'execute_on'
p121554
sS'cpp_type'
p121555
S'MultiMooseEnum'
p121556
sS'default'
p121557
S'TIMESTEP_END'
p121558
sS'description'
p121559
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121560
sS'required'
p121561
I00
sS'options'
p121562
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121563
sS'group_name'
p121564
Nsa(dp121565
S'description'
p121566
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n'
p121567
sS'cpp_type'
p121568
S'double'
p121569
sS'default'
p121570
g3
sS'name'
p121571
S'm'
p121572
sS'required'
p121573
I01
sS'group_name'
p121574
Nsa(dp121575
S'description'
p121576
g3
sS'cpp_type'
p121577
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121578
sS'default'
p121579
S'RichardsSeff1VG'
p121580
sS'name'
p121581
S'type'
p121582
sS'required'
p121583
I00
sS'group_name'
p121584
Nsa(dp121585
S'description'
p121586
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121587
sS'cpp_type'
p121588
S'bool'
p121589
sS'default'
p121590
S'0'
p121591
sS'name'
p121592
S'use_displaced_mesh'
p121593
sS'required'
p121594
I00
sS'group_name'
p121595
S'Advanced'
p121596
sasS'name'
p121597
S'/UserObjects/RichardsSeff1VG'
p121598
sa(dp121599
S'description'
p121600
S'cut van-Genuchten effective saturation as a function of capillary pressure.  Single-phase  seff = (1 + (-al*p)^(1/(1-m)))^(-m) for p>p_cut, otherwise user a a linear relationship that is chosen so the value and derivative match van-Genuchten at p=p_cut.\n'
p121601
sS'subblocks'
p121602
NsS'parameters'
p121603
(lp121604
(dp121605
S'description'
p121606
S'van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n'
p121607
sS'cpp_type'
p121608
S'double'
p121609
sS'default'
p121610
g3
sS'name'
p121611
S'al'
p121612
sS'required'
p121613
I01
sS'group_name'
p121614
Nsa(dp121615
S'description'
p121616
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121617
sS'cpp_type'
p121618
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121619
sS'default'
p121620
g3
sS'name'
p121621
S'control_tags'
p121622
sS'required'
p121623
I00
sS'group_name'
p121624
Nsa(dp121625
S'name'
p121626
S'execute_on'
p121627
sS'cpp_type'
p121628
S'MultiMooseEnum'
p121629
sS'default'
p121630
S'TIMESTEP_END'
p121631
sS'description'
p121632
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121633
sS'required'
p121634
I00
sS'options'
p121635
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121636
sS'group_name'
p121637
Nsa(dp121638
S'description'
p121639
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n'
p121640
sS'cpp_type'
p121641
S'double'
p121642
sS'default'
p121643
g3
sS'name'
p121644
S'm'
p121645
sS'required'
p121646
I01
sS'group_name'
p121647
Nsa(dp121648
S'description'
p121649
S'cutoff in pressure.  Must be negative.  If p>p_cut then use van-Genuchten function.  Otherwise use a linear relationship which is chosen so the value and derivative match van-Genuchten at p=p_cut\n'
p121650
sS'cpp_type'
p121651
S'double'
p121652
sS'default'
p121653
g3
sS'name'
p121654
S'p_cut'
p121655
sS'required'
p121656
I01
sS'group_name'
p121657
Nsa(dp121658
S'description'
p121659
g3
sS'cpp_type'
p121660
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121661
sS'default'
p121662
S'RichardsSeff1VGcut'
p121663
sS'name'
p121664
S'type'
p121665
sS'required'
p121666
I00
sS'group_name'
p121667
Nsa(dp121668
S'description'
p121669
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121670
sS'cpp_type'
p121671
S'bool'
p121672
sS'default'
p121673
S'0'
p121674
sS'name'
p121675
S'use_displaced_mesh'
p121676
sS'required'
p121677
I00
sS'group_name'
p121678
S'Advanced'
p121679
sasS'name'
p121680
S'/UserObjects/RichardsSeff1VGcut'
p121681
sa(dp121682
S'description'
p121683
S'Rogers-Stallybrass-Clements version of effective saturation for the oil (gas) phase, valid for residual saturations = 0, and viscosityOil = 2*viscosityWater.  seff_gas = 1 - 1/Sqrt(1 + Exp((Pc - shift)/scale)), where scale = 0.25*scale_ratio*oil_viscosity\n'
p121684
sS'subblocks'
p121685
NsS'parameters'
p121686
(lp121687
(dp121688
S'description'
p121689
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121690
sS'cpp_type'
p121691
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121692
sS'default'
p121693
g3
sS'name'
p121694
S'control_tags'
p121695
sS'required'
p121696
I00
sS'group_name'
p121697
Nsa(dp121698
S'name'
p121699
S'execute_on'
p121700
sS'cpp_type'
p121701
S'MultiMooseEnum'
p121702
sS'default'
p121703
S'TIMESTEP_END'
p121704
sS'description'
p121705
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121706
sS'required'
p121707
I00
sS'options'
p121708
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121709
sS'group_name'
p121710
Nsa(dp121711
S'description'
p121712
S'Viscosity of oil (gas) phase.  It is assumed this is double the water-phase viscosity\n'
p121713
sS'cpp_type'
p121714
S'double'
p121715
sS'default'
p121716
g3
sS'name'
p121717
S'oil_viscosity'
p121718
sS'required'
p121719
I00
sS'group_name'
p121720
Nsa(dp121721
S'description'
p121722
S'This is porosity/permeability/beta^2, where beta may be chosen by the user (RSC define beta<0, but MOOSE only uses beta^2, so its sign is irrelevant).  It has dimensions [time]\n'
p121723
sS'cpp_type'
p121724
S'double'
p121725
sS'default'
p121726
g3
sS'name'
p121727
S'scale_ratio'
p121728
sS'required'
p121729
I00
sS'group_name'
p121730
Nsa(dp121731
S'description'
p121732
S'effective saturation is a function of (Pc - shift)\n'
p121733
sS'cpp_type'
p121734
S'double'
p121735
sS'default'
p121736
g3
sS'name'
p121737
S'shift'
p121738
sS'required'
p121739
I00
sS'group_name'
p121740
Nsa(dp121741
S'description'
p121742
g3
sS'cpp_type'
p121743
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121744
sS'default'
p121745
S'RichardsSeff2gasRSC'
p121746
sS'name'
p121747
S'type'
p121748
sS'required'
p121749
I00
sS'group_name'
p121750
Nsa(dp121751
S'description'
p121752
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121753
sS'cpp_type'
p121754
S'bool'
p121755
sS'default'
p121756
S'0'
p121757
sS'name'
p121758
S'use_displaced_mesh'
p121759
sS'required'
p121760
I00
sS'group_name'
p121761
S'Advanced'
p121762
sasS'name'
p121763
S'/UserObjects/RichardsSeff2gasRSC'
p121764
sa(dp121765
S'description'
p121766
S'van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the gas phase in two-phase simulations.  With Pc=Pgas-Pwater,   seff = 1 - (1 + (al*pc)^(1/(1-m)))^(-m)\n'
p121767
sS'subblocks'
p121768
NsS'parameters'
p121769
(lp121770
(dp121771
S'description'
p121772
S'van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n'
p121773
sS'cpp_type'
p121774
S'double'
p121775
sS'default'
p121776
g3
sS'name'
p121777
S'al'
p121778
sS'required'
p121779
I01
sS'group_name'
p121780
Nsa(dp121781
S'description'
p121782
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121783
sS'cpp_type'
p121784
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121785
sS'default'
p121786
g3
sS'name'
p121787
S'control_tags'
p121788
sS'required'
p121789
I00
sS'group_name'
p121790
Nsa(dp121791
S'name'
p121792
S'execute_on'
p121793
sS'cpp_type'
p121794
S'MultiMooseEnum'
p121795
sS'default'
p121796
S'TIMESTEP_END'
p121797
sS'description'
p121798
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121799
sS'required'
p121800
I00
sS'options'
p121801
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121802
sS'group_name'
p121803
Nsa(dp121804
S'description'
p121805
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n'
p121806
sS'cpp_type'
p121807
S'double'
p121808
sS'default'
p121809
g3
sS'name'
p121810
S'm'
p121811
sS'required'
p121812
I01
sS'group_name'
p121813
Nsa(dp121814
S'description'
p121815
g3
sS'cpp_type'
p121816
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121817
sS'default'
p121818
S'RichardsSeff2gasVG'
p121819
sS'name'
p121820
S'type'
p121821
sS'required'
p121822
I00
sS'group_name'
p121823
Nsa(dp121824
S'description'
p121825
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121826
sS'cpp_type'
p121827
S'bool'
p121828
sS'default'
p121829
S'0'
p121830
sS'name'
p121831
S'use_displaced_mesh'
p121832
sS'required'
p121833
I00
sS'group_name'
p121834
S'Advanced'
p121835
sasS'name'
p121836
S'/UserObjects/RichardsSeff2gasVG'
p121837
sa(dp121838
S'description'
p121839
S'Shifted van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the gas phase in two-phase simulations.     seff = (1 + (-al*(P0-p1-shift))^(1/(1-m)))^(-m), then scaled so it runs between 0 and 1.\n'
p121840
sS'subblocks'
p121841
NsS'parameters'
p121842
(lp121843
(dp121844
S'description'
p121845
S'van-Genuchten alpha parameter.  Must be positive.   seff = (1 + (-al*(P0-P1-shift))^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n'
p121846
sS'cpp_type'
p121847
S'double'
p121848
sS'default'
p121849
g3
sS'name'
p121850
S'al'
p121851
sS'required'
p121852
I01
sS'group_name'
p121853
Nsa(dp121854
S'description'
p121855
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121856
sS'cpp_type'
p121857
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121858
sS'default'
p121859
g3
sS'name'
p121860
S'control_tags'
p121861
sS'required'
p121862
I00
sS'group_name'
p121863
Nsa(dp121864
S'name'
p121865
S'execute_on'
p121866
sS'cpp_type'
p121867
S'MultiMooseEnum'
p121868
sS'default'
p121869
S'TIMESTEP_END'
p121870
sS'description'
p121871
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121872
sS'required'
p121873
I00
sS'options'
p121874
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121875
sS'group_name'
p121876
Nsa(dp121877
S'description'
p121878
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   seff = (1 + (-al*(P0-P1-shift)^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n'
p121879
sS'cpp_type'
p121880
S'double'
p121881
sS'default'
p121882
g3
sS'name'
p121883
S'm'
p121884
sS'required'
p121885
I01
sS'group_name'
p121886
Nsa(dp121887
S'description'
p121888
S'Shift in capillary-pressure porepressure values.  Standard van-Genuchten Seff = Seff(Pwater-Pgas) is shifted to the right, and then scaled to 0<=Seff<=1.  This means that dS/dP>0 at S=1 which is useful to provide nonsingular Jacobians for small dt.\n'
p121889
sS'cpp_type'
p121890
S'double'
p121891
sS'default'
p121892
g3
sS'name'
p121893
S'shift'
p121894
sS'required'
p121895
I01
sS'group_name'
p121896
Nsa(dp121897
S'description'
p121898
g3
sS'cpp_type'
p121899
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121900
sS'default'
p121901
S'RichardsSeff2gasVGshifted'
p121902
sS'name'
p121903
S'type'
p121904
sS'required'
p121905
I00
sS'group_name'
p121906
Nsa(dp121907
S'description'
p121908
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121909
sS'cpp_type'
p121910
S'bool'
p121911
sS'default'
p121912
S'0'
p121913
sS'name'
p121914
S'use_displaced_mesh'
p121915
sS'required'
p121916
I00
sS'group_name'
p121917
S'Advanced'
p121918
sasS'name'
p121919
S'/UserObjects/RichardsSeff2gasVGshifted'
p121920
sa(dp121921
S'description'
p121922
S'Rogers-Stallybrass-Clements version of effective saturation for the water phase, valid for residual saturations = 0, and viscosityOil = 2*viscosityWater.  seff_water = 1/Sqrt(1 + Exp(Pc - shift)/scale)), where scale = 0.25*scale_ratio*oil_viscosity\n'
p121923
sS'subblocks'
p121924
NsS'parameters'
p121925
(lp121926
(dp121927
S'description'
p121928
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p121929
sS'cpp_type'
p121930
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p121931
sS'default'
p121932
g3
sS'name'
p121933
S'control_tags'
p121934
sS'required'
p121935
I00
sS'group_name'
p121936
Nsa(dp121937
S'name'
p121938
S'execute_on'
p121939
sS'cpp_type'
p121940
S'MultiMooseEnum'
p121941
sS'default'
p121942
S'TIMESTEP_END'
p121943
sS'description'
p121944
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p121945
sS'required'
p121946
I00
sS'options'
p121947
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p121948
sS'group_name'
p121949
Nsa(dp121950
S'description'
p121951
S'Viscosity of oil (gas) phase.  It is assumed this is double the water-phase viscosity\n'
p121952
sS'cpp_type'
p121953
S'double'
p121954
sS'default'
p121955
g3
sS'name'
p121956
S'oil_viscosity'
p121957
sS'required'
p121958
I01
sS'group_name'
p121959
Nsa(dp121960
S'description'
p121961
S'This is porosity/permeability/beta^2, where beta may be chosen by the user (RSC define beta<0, but MOOSE only uses beta^2, so its sign is irrelevant).  It has dimensions [time]\n'
p121962
sS'cpp_type'
p121963
S'double'
p121964
sS'default'
p121965
g3
sS'name'
p121966
S'scale_ratio'
p121967
sS'required'
p121968
I01
sS'group_name'
p121969
Nsa(dp121970
S'description'
p121971
S'effective saturation is a function of (Pc - shift)\n'
p121972
sS'cpp_type'
p121973
S'double'
p121974
sS'default'
p121975
g3
sS'name'
p121976
S'shift'
p121977
sS'required'
p121978
I01
sS'group_name'
p121979
Nsa(dp121980
S'description'
p121981
g3
sS'cpp_type'
p121982
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p121983
sS'default'
p121984
S'RichardsSeff2waterRSC'
p121985
sS'name'
p121986
S'type'
p121987
sS'required'
p121988
I00
sS'group_name'
p121989
Nsa(dp121990
S'description'
p121991
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121992
sS'cpp_type'
p121993
S'bool'
p121994
sS'default'
p121995
S'0'
p121996
sS'name'
p121997
S'use_displaced_mesh'
p121998
sS'required'
p121999
I00
sS'group_name'
p122000
S'Advanced'
p122001
sasS'name'
p122002
S'/UserObjects/RichardsSeff2waterRSC'
p122003
sa(dp122004
S'description'
p122005
S'van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the water phase in two-phase simulations.  With Pc=Pgas-Pwater,   seff = (1 + (al*pc)^(1/(1-m)))^(-m)\n'
p122006
sS'subblocks'
p122007
NsS'parameters'
p122008
(lp122009
(dp122010
S'description'
p122011
S'van-Genuchten alpha parameter.  Must be positive.  Single-phase VG seff = (1 + (-al*c)^(1/(1-m)))^(-m)\n'
p122012
sS'cpp_type'
p122013
S'double'
p122014
sS'default'
p122015
g3
sS'name'
p122016
S'al'
p122017
sS'required'
p122018
I01
sS'group_name'
p122019
Nsa(dp122020
S'description'
p122021
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122022
sS'cpp_type'
p122023
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122024
sS'default'
p122025
g3
sS'name'
p122026
S'control_tags'
p122027
sS'required'
p122028
I00
sS'group_name'
p122029
Nsa(dp122030
S'name'
p122031
S'execute_on'
p122032
sS'cpp_type'
p122033
S'MultiMooseEnum'
p122034
sS'default'
p122035
S'TIMESTEP_END'
p122036
sS'description'
p122037
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122038
sS'required'
p122039
I00
sS'options'
p122040
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122041
sS'group_name'
p122042
Nsa(dp122043
S'description'
p122044
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   Single-phase VG seff = (1 + (-al*p)^(1/(1-m)))^(-m)\n'
p122045
sS'cpp_type'
p122046
S'double'
p122047
sS'default'
p122048
g3
sS'name'
p122049
S'm'
p122050
sS'required'
p122051
I01
sS'group_name'
p122052
Nsa(dp122053
S'description'
p122054
g3
sS'cpp_type'
p122055
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122056
sS'default'
p122057
S'RichardsSeff2waterVG'
p122058
sS'name'
p122059
S'type'
p122060
sS'required'
p122061
I00
sS'group_name'
p122062
Nsa(dp122063
S'description'
p122064
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122065
sS'cpp_type'
p122066
S'bool'
p122067
sS'default'
p122068
S'0'
p122069
sS'name'
p122070
S'use_displaced_mesh'
p122071
sS'required'
p122072
I00
sS'group_name'
p122073
S'Advanced'
p122074
sasS'name'
p122075
S'/UserObjects/RichardsSeff2waterVG'
p122076
sa(dp122077
S'description'
p122078
S'Shifted van-Genuchten effective saturation as a function of (Pwater, Pgas) suitable for use for the water phase in two-phase simulations.     seff = (1 + (-al*(P0-p1-shift))^(1/(1-m)))^(-m), then scaled so it runs between 0 and 1.\n'
p122079
sS'subblocks'
p122080
NsS'parameters'
p122081
(lp122082
(dp122083
S'description'
p122084
S'van-Genuchten alpha parameter.  Must be positive.   seff = (1 + (-al*(P0-P1-shift))^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n'
p122085
sS'cpp_type'
p122086
S'double'
p122087
sS'default'
p122088
g3
sS'name'
p122089
S'al'
p122090
sS'required'
p122091
I01
sS'group_name'
p122092
Nsa(dp122093
S'description'
p122094
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122095
sS'cpp_type'
p122096
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122097
sS'default'
p122098
g3
sS'name'
p122099
S'control_tags'
p122100
sS'required'
p122101
I00
sS'group_name'
p122102
Nsa(dp122103
S'name'
p122104
S'execute_on'
p122105
sS'cpp_type'
p122106
S'MultiMooseEnum'
p122107
sS'default'
p122108
S'TIMESTEP_END'
p122109
sS'description'
p122110
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122111
sS'required'
p122112
I00
sS'options'
p122113
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122114
sS'group_name'
p122115
Nsa(dp122116
S'description'
p122117
S'van-Genuchten m parameter.  Must be between 0 and 1, and optimally should be set to >0.5   seff = (1 + (-al*(P0-P1-shift)^(1/(1-m)))^(-m) (then scaled to 0 to 1)\n'
p122118
sS'cpp_type'
p122119
S'double'
p122120
sS'default'
p122121
g3
sS'name'
p122122
S'm'
p122123
sS'required'
p122124
I01
sS'group_name'
p122125
Nsa(dp122126
S'description'
p122127
S'Shift in capillary-pressure porepressure values.  Standard van-Genuchten Seff = Seff(Pwater-Pgas) is shifted to the right, and then scaled to 0<=Seff<=1.  This means that dS/dP>0 at S=1 which is useful to provide nonsingular Jacobians for small dt.\n'
p122128
sS'cpp_type'
p122129
S'double'
p122130
sS'default'
p122131
g3
sS'name'
p122132
S'shift'
p122133
sS'required'
p122134
I01
sS'group_name'
p122135
Nsa(dp122136
S'description'
p122137
g3
sS'cpp_type'
p122138
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122139
sS'default'
p122140
S'RichardsSeff2waterVGshifted'
p122141
sS'name'
p122142
S'type'
p122143
sS'required'
p122144
I00
sS'group_name'
p122145
Nsa(dp122146
S'description'
p122147
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122148
sS'cpp_type'
p122149
S'bool'
p122150
sS'default'
p122151
S'0'
p122152
sS'name'
p122153
S'use_displaced_mesh'
p122154
sS'required'
p122155
I00
sS'group_name'
p122156
S'Advanced'
p122157
sasS'name'
p122158
S'/UserObjects/RichardsSeff2waterVGshifted'
p122159
sa(dp122160
S'description'
p122161
g3
sS'subblocks'
p122162
NsS'parameters'
p122163
(lp122164
(dp122165
S'description'
p122166
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122167
sS'cpp_type'
p122168
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122169
sS'default'
p122170
g3
sS'name'
p122171
S'control_tags'
p122172
sS'required'
p122173
I00
sS'group_name'
p122174
Nsa(dp122175
S'name'
p122176
S'execute_on'
p122177
sS'cpp_type'
p122178
S'MultiMooseEnum'
p122179
sS'default'
p122180
S'TIMESTEP_END'
p122181
sS'description'
p122182
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122183
sS'required'
p122184
I00
sS'options'
p122185
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122186
sS'group_name'
p122187
Nsa(dp122188
S'description'
p122189
g3
sS'cpp_type'
p122190
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122191
sS'default'
p122192
S'RichardsSumQuantity'
p122193
sS'name'
p122194
S'type'
p122195
sS'required'
p122196
I00
sS'group_name'
p122197
Nsa(dp122198
S'description'
p122199
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122200
sS'cpp_type'
p122201
S'bool'
p122202
sS'default'
p122203
S'0'
p122204
sS'name'
p122205
S'use_displaced_mesh'
p122206
sS'required'
p122207
I00
sS'group_name'
p122208
S'Advanced'
p122209
sasS'name'
p122210
S'/UserObjects/RichardsSumQuantity'
p122211
sa(dp122212
S'description'
p122213
S'Holds information on the porepressure variable names\n'
p122214
sS'subblocks'
p122215
NsS'parameters'
p122216
(lp122217
(dp122218
S'description'
p122219
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122220
sS'cpp_type'
p122221
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122222
sS'default'
p122223
g3
sS'name'
p122224
S'control_tags'
p122225
sS'required'
p122226
I00
sS'group_name'
p122227
Nsa(dp122228
S'name'
p122229
S'execute_on'
p122230
sS'cpp_type'
p122231
S'MultiMooseEnum'
p122232
sS'default'
p122233
S'TIMESTEP_END'
p122234
sS'description'
p122235
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122236
sS'required'
p122237
I00
sS'options'
p122238
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122239
sS'group_name'
p122240
Nsa(dp122241
S'description'
p122242
S"List of variables that represent the porepressures or (porepressure, saturations).  In single-phase models you will just have one (eg 'pressure'), in two-phase models you will have two (eg 'p_water p_gas', or 'p_water s_water', etc.  These names must also be used in your kernels and material.\n"
p122243
sS'cpp_type'
p122244
S'std::vector<VariableName>'
p122245
sS'default'
p122246
g3
sS'name'
p122247
S'richards_vars'
p122248
sS'required'
p122249
I01
sS'group_name'
p122250
Nsa(dp122251
S'description'
p122252
g3
sS'cpp_type'
p122253
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122254
sS'default'
p122255
S'RichardsVarNames'
p122256
sS'name'
p122257
S'type'
p122258
sS'required'
p122259
I00
sS'group_name'
p122260
Nsa(dp122261
S'description'
p122262
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122263
sS'cpp_type'
p122264
S'bool'
p122265
sS'default'
p122266
S'0'
p122267
sS'name'
p122268
S'use_displaced_mesh'
p122269
sS'required'
p122270
I00
sS'group_name'
p122271
S'Advanced'
p122272
sa(dp122273
S'name'
p122274
S'var_types'
p122275
sS'cpp_type'
p122276
S'MooseEnum'
p122277
sS'default'
p122278
S'pppp'
p122279
sS'description'
p122280
S"Variable types for the problem.  Eg, 'pppp' means all the variables are pressure variables\n"
p122281
sS'required'
p122282
I00
sS'options'
p122283
S'pppp'
p122284
sS'group_name'
p122285
NsasS'name'
p122286
S'/UserObjects/RichardsVarNames'
p122287
sa(dp122288
S'description'
p122289
g3
sS'subblocks'
p122290
NsS'parameters'
p122291
(lp122292
(dp122293
S'description'
p122294
S'The list of block ids (SubdomainID) that this object will be applied\n'
p122295
sS'cpp_type'
p122296
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p122297
sS'default'
p122298
g3
sS'name'
p122299
S'block'
p122300
sS'required'
p122301
I00
sS'group_name'
p122302
Nsa(dp122303
S'description'
p122304
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p122305
sS'cpp_type'
p122306
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p122307
sS'default'
p122308
g3
sS'name'
p122309
S'boundary'
p122310
sS'required'
p122311
I00
sS'group_name'
p122312
Nsa(dp122313
S'description'
p122314
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122315
sS'cpp_type'
p122316
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122317
sS'default'
p122318
g3
sS'name'
p122319
S'control_tags'
p122320
sS'required'
p122321
I00
sS'group_name'
p122322
Nsa(dp122323
S'description'
p122324
S'x-displacement\n'
p122325
sS'cpp_type'
p122326
S'std::vector<VariableName>'
p122327
sS'default'
p122328
g3
sS'name'
p122329
S'disp_x'
p122330
sS'required'
p122331
I01
sS'group_name'
p122332
Nsa(dp122333
S'description'
p122334
S'y-displacement\n'
p122335
sS'cpp_type'
p122336
S'std::vector<VariableName>'
p122337
sS'default'
p122338
g3
sS'name'
p122339
S'disp_y'
p122340
sS'required'
p122341
I01
sS'group_name'
p122342
Nsa(dp122343
S'description'
p122344
S'z-displacement\n'
p122345
sS'cpp_type'
p122346
S'std::vector<VariableName>'
p122347
sS'default'
p122348
g3
sS'name'
p122349
S'disp_z'
p122350
sS'required'
p122351
I01
sS'group_name'
p122352
Nsa(dp122353
S'name'
p122354
S'execute_on'
p122355
sS'cpp_type'
p122356
S'MultiMooseEnum'
p122357
sS'default'
p122358
S'TIMESTEP_END'
p122359
sS'description'
p122360
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122361
sS'required'
p122362
I00
sS'options'
p122363
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122364
sS'group_name'
p122365
Nsa(dp122366
S'description'
p122367
S'Names of the RigidBody3D modes computed here. Select from: trans_x, trans_y, trans_z, rot_x, rot_y, rot_z\n'
p122368
sS'cpp_type'
p122369
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122370
sS'default'
p122371
g3
sS'name'
p122372
S'modes'
p122373
sS'required'
p122374
I00
sS'group_name'
p122375
Nsa(dp122376
S'description'
p122377
S'The seed for the master random number generator\n'
p122378
sS'cpp_type'
p122379
S'unsigned int'
p122380
sS'default'
p122381
S'0'
p122382
sS'name'
p122383
S'seed'
p122384
sS'required'
p122385
I00
sS'group_name'
p122386
S'Advanced'
p122387
sa(dp122388
S'description'
p122389
S'Indices of FEProblem subspace vectors containing rigid body modes\n'
p122390
sS'cpp_type'
p122391
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p122392
sS'default'
p122393
g3
sS'name'
p122394
S'subspace_indices'
p122395
sS'required'
p122396
I00
sS'group_name'
p122397
Nsa(dp122398
S'description'
p122399
S'FEProblem subspace containing rigid body mode vectors\n'
p122400
sS'cpp_type'
p122401
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122402
sS'default'
p122403
g3
sS'name'
p122404
S'subspace_name'
p122405
sS'required'
p122406
I01
sS'group_name'
p122407
Nsa(dp122408
S'description'
p122409
g3
sS'cpp_type'
p122410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122411
sS'default'
p122412
S'RigidBodyModes3D'
p122413
sS'name'
p122414
S'type'
p122415
sS'required'
p122416
I00
sS'group_name'
p122417
Nsa(dp122418
S'description'
p122419
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122420
sS'cpp_type'
p122421
S'bool'
p122422
sS'default'
p122423
S'0'
p122424
sS'name'
p122425
S'use_displaced_mesh'
p122426
sS'required'
p122427
I00
sS'group_name'
p122428
S'Advanced'
p122429
sasS'name'
p122430
S'/UserObjects/RigidBodyModes3D'
p122431
sa(dp122432
S'description'
p122433
g3
sS'subblocks'
p122434
NsS'parameters'
p122435
(lp122436
(dp122437
S'description'
p122438
S'The list of block ids (SubdomainID) that this object will be applied\n'
p122439
sS'cpp_type'
p122440
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p122441
sS'default'
p122442
g3
sS'name'
p122443
S'block'
p122444
sS'required'
p122445
I00
sS'group_name'
p122446
Nsa(dp122447
S'description'
p122448
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p122449
sS'cpp_type'
p122450
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p122451
sS'default'
p122452
g3
sS'name'
p122453
S'boundary'
p122454
sS'required'
p122455
I00
sS'group_name'
p122456
Nsa(dp122457
S'description'
p122458
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122459
sS'cpp_type'
p122460
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122461
sS'default'
p122462
g3
sS'name'
p122463
S'control_tags'
p122464
sS'required'
p122465
I00
sS'group_name'
p122466
Nsa(dp122467
S'description'
p122468
S'r-displacement\n'
p122469
sS'cpp_type'
p122470
S'std::vector<VariableName>'
p122471
sS'default'
p122472
g3
sS'name'
p122473
S'disp_r'
p122474
sS'required'
p122475
I01
sS'group_name'
p122476
Nsa(dp122477
S'description'
p122478
S'z-displacement\n'
p122479
sS'cpp_type'
p122480
S'std::vector<VariableName>'
p122481
sS'default'
p122482
g3
sS'name'
p122483
S'disp_z'
p122484
sS'required'
p122485
I01
sS'group_name'
p122486
Nsa(dp122487
S'name'
p122488
S'execute_on'
p122489
sS'cpp_type'
p122490
S'MultiMooseEnum'
p122491
sS'default'
p122492
S'TIMESTEP_END'
p122493
sS'description'
p122494
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122495
sS'required'
p122496
I00
sS'options'
p122497
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122498
sS'group_name'
p122499
Nsa(dp122500
S'description'
p122501
S'The seed for the master random number generator\n'
p122502
sS'cpp_type'
p122503
S'unsigned int'
p122504
sS'default'
p122505
S'0'
p122506
sS'name'
p122507
S'seed'
p122508
sS'required'
p122509
I00
sS'group_name'
p122510
S'Advanced'
p122511
sa(dp122512
S'description'
p122513
S'Indices of FEProblem subspace vectors containg rigid body modes\n'
p122514
sS'cpp_type'
p122515
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p122516
sS'default'
p122517
g3
sS'name'
p122518
S'subspace_indices'
p122519
sS'required'
p122520
I01
sS'group_name'
p122521
Nsa(dp122522
S'description'
p122523
S'FEProblem subspace containing RZ rigid body modes\n'
p122524
sS'cpp_type'
p122525
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p122526
sS'default'
p122527
g3
sS'name'
p122528
S'subspace_name'
p122529
sS'required'
p122530
I01
sS'group_name'
p122531
Nsa(dp122532
S'description'
p122533
g3
sS'cpp_type'
p122534
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122535
sS'default'
p122536
S'RigidBodyModesRZ'
p122537
sS'name'
p122538
S'type'
p122539
sS'required'
p122540
I00
sS'group_name'
p122541
Nsa(dp122542
S'description'
p122543
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122544
sS'cpp_type'
p122545
S'bool'
p122546
sS'default'
p122547
S'0'
p122548
sS'name'
p122549
S'use_displaced_mesh'
p122550
sS'required'
p122551
I00
sS'group_name'
p122552
S'Advanced'
p122553
sasS'name'
p122554
S'/UserObjects/RigidBodyModesRZ'
p122555
sa(dp122556
S'description'
p122557
g3
sS'subblocks'
p122558
NsS'parameters'
p122559
(lp122560
(dp122561
S'description'
p122562
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122563
sS'cpp_type'
p122564
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122565
sS'default'
p122566
g3
sS'name'
p122567
S'control_tags'
p122568
sS'required'
p122569
I00
sS'group_name'
p122570
Nsa(dp122571
S'name'
p122572
S'execute_on'
p122573
sS'cpp_type'
p122574
S'MultiMooseEnum'
p122575
sS'default'
p122576
S'TIMESTEP_END'
p122577
sS'description'
p122578
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122579
sS'required'
p122580
I00
sS'options'
p122581
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122582
sS'group_name'
p122583
Nsa(dp122584
S'description'
p122585
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p122586
sS'cpp_type'
p122587
S'std::vector<OutputName, std::allocator<OutputName> >'
p122588
sS'default'
p122589
g3
sS'name'
p122590
S'outputs'
p122591
sS'required'
p122592
I00
sS'group_name'
p122593
S'Advanced'
p122594
sa(dp122595
S'name'
p122596
S'time_type'
p122597
sS'cpp_type'
p122598
S'MooseEnum'
p122599
sS'default'
p122600
g3
sS'description'
p122601
S'Whether to output the total elapsed or just the active time\n'
p122602
sS'required'
p122603
I01
sS'options'
p122604
S'alive active'
p122605
sS'group_name'
p122606
Nsa(dp122607
S'description'
p122608
g3
sS'cpp_type'
p122609
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122610
sS'default'
p122611
S'RunTime'
p122612
sS'name'
p122613
S'type'
p122614
sS'required'
p122615
I00
sS'group_name'
p122616
Nsa(dp122617
S'description'
p122618
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122619
sS'cpp_type'
p122620
S'bool'
p122621
sS'default'
p122622
S'0'
p122623
sS'name'
p122624
S'use_displaced_mesh'
p122625
sS'required'
p122626
I00
sS'group_name'
p122627
S'Advanced'
p122628
sasS'name'
p122629
S'/UserObjects/RunTime'
p122630
sa(dp122631
S'description'
p122632
g3
sS'subblocks'
p122633
NsS'parameters'
p122634
(lp122635
(dp122636
S'description'
p122637
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122638
sS'cpp_type'
p122639
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122640
sS'default'
p122641
g3
sS'name'
p122642
S'control_tags'
p122643
sS'required'
p122644
I00
sS'group_name'
p122645
Nsa(dp122646
S'name'
p122647
S'execute_on'
p122648
sS'cpp_type'
p122649
S'MultiMooseEnum'
p122650
sS'default'
p122651
S'TIMESTEP_END'
p122652
sS'description'
p122653
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122654
sS'required'
p122655
I00
sS'options'
p122656
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122657
sS'group_name'
p122658
Nsa(dp122659
S'description'
p122660
S'The analytic solution to compare against\n'
p122661
sS'cpp_type'
p122662
S'FunctionName'
p122663
sS'default'
p122664
g3
sS'name'
p122665
S'function'
p122666
sS'required'
p122667
I01
sS'group_name'
p122668
Nsa(dp122669
S'description'
p122670
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p122671
sS'cpp_type'
p122672
S'std::vector<OutputName, std::allocator<OutputName> >'
p122673
sS'default'
p122674
g3
sS'name'
p122675
S'outputs'
p122676
sS'required'
p122677
I00
sS'group_name'
p122678
S'Advanced'
p122679
sa(dp122680
S'description'
p122681
g3
sS'cpp_type'
p122682
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122683
sS'default'
p122684
S'ScalarL2Error'
p122685
sS'name'
p122686
S'type'
p122687
sS'required'
p122688
I00
sS'group_name'
p122689
Nsa(dp122690
S'description'
p122691
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122692
sS'cpp_type'
p122693
S'bool'
p122694
sS'default'
p122695
S'0'
p122696
sS'name'
p122697
S'use_displaced_mesh'
p122698
sS'required'
p122699
I00
sS'group_name'
p122700
S'Advanced'
p122701
sa(dp122702
S'description'
p122703
S'The name of the scalar variable\n'
p122704
sS'cpp_type'
p122705
S'VariableName'
p122706
sS'default'
p122707
g3
sS'name'
p122708
S'variable'
p122709
sS'required'
p122710
I01
sS'group_name'
p122711
NsasS'name'
p122712
S'/UserObjects/ScalarL2Error'
p122713
sa(dp122714
S'description'
p122715
g3
sS'subblocks'
p122716
NsS'parameters'
p122717
(lp122718
(dp122719
S'description'
p122720
S'Component to output for this variable\n'
p122721
sS'cpp_type'
p122722
S'unsigned int'
p122723
sS'default'
p122724
S'0'
p122725
sS'name'
p122726
S'component'
p122727
sS'required'
p122728
I00
sS'group_name'
p122729
Nsa(dp122730
S'description'
p122731
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122732
sS'cpp_type'
p122733
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122734
sS'default'
p122735
g3
sS'name'
p122736
S'control_tags'
p122737
sS'required'
p122738
I00
sS'group_name'
p122739
Nsa(dp122740
S'name'
p122741
S'execute_on'
p122742
sS'cpp_type'
p122743
S'MultiMooseEnum'
p122744
sS'default'
p122745
S'TIMESTEP_END'
p122746
sS'description'
p122747
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122748
sS'required'
p122749
I00
sS'options'
p122750
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122751
sS'group_name'
p122752
Nsa(dp122753
S'description'
p122754
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p122755
sS'cpp_type'
p122756
S'std::vector<OutputName, std::allocator<OutputName> >'
p122757
sS'default'
p122758
g3
sS'name'
p122759
S'outputs'
p122760
sS'required'
p122761
I00
sS'group_name'
p122762
S'Advanced'
p122763
sa(dp122764
S'description'
p122765
g3
sS'cpp_type'
p122766
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122767
sS'default'
p122768
S'ScalarVariable'
p122769
sS'name'
p122770
S'type'
p122771
sS'required'
p122772
I00
sS'group_name'
p122773
Nsa(dp122774
S'description'
p122775
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122776
sS'cpp_type'
p122777
S'bool'
p122778
sS'default'
p122779
S'0'
p122780
sS'name'
p122781
S'use_displaced_mesh'
p122782
sS'required'
p122783
I00
sS'group_name'
p122784
S'Advanced'
p122785
sa(dp122786
S'description'
p122787
S'Name of the variable\n'
p122788
sS'cpp_type'
p122789
S'VariableName'
p122790
sS'default'
p122791
g3
sS'name'
p122792
S'variable'
p122793
sS'required'
p122794
I01
sS'group_name'
p122795
NsasS'name'
p122796
S'/UserObjects/ScalarVariable'
p122797
sa(dp122798
S'description'
p122799
g3
sS'subblocks'
p122800
NsS'parameters'
p122801
(lp122802
(dp122803
S'description'
p122804
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p122805
sS'cpp_type'
p122806
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p122807
sS'default'
p122808
g3
sS'name'
p122809
S'boundary'
p122810
sS'required'
p122811
I00
sS'group_name'
p122812
Nsa(dp122813
S'description'
p122814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122815
sS'cpp_type'
p122816
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122817
sS'default'
p122818
g3
sS'name'
p122819
S'control_tags'
p122820
sS'required'
p122821
I00
sS'group_name'
p122822
Nsa(dp122823
S'name'
p122824
S'execute_on'
p122825
sS'cpp_type'
p122826
S'MultiMooseEnum'
p122827
sS'default'
p122828
S'TIMESTEP_END'
p122829
sS'description'
p122830
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122831
sS'required'
p122832
I00
sS'options'
p122833
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122834
sS'group_name'
p122835
Nsa(dp122836
S'description'
p122837
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p122838
sS'cpp_type'
p122839
S'std::vector<OutputName, std::allocator<OutputName> >'
p122840
sS'default'
p122841
g3
sS'name'
p122842
S'outputs'
p122843
sS'required'
p122844
I00
sS'group_name'
p122845
S'Advanced'
p122846
sa(dp122847
S'description'
p122848
g3
sS'cpp_type'
p122849
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122850
sS'default'
p122851
S'SideAverageValue'
p122852
sS'name'
p122853
S'type'
p122854
sS'required'
p122855
I00
sS'group_name'
p122856
Nsa(dp122857
S'description'
p122858
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122859
sS'cpp_type'
p122860
S'bool'
p122861
sS'default'
p122862
S'0'
p122863
sS'name'
p122864
S'use_displaced_mesh'
p122865
sS'required'
p122866
I00
sS'group_name'
p122867
S'Advanced'
p122868
sa(dp122869
S'description'
p122870
S'The name of the variable that this boundary condition applies to\n'
p122871
sS'cpp_type'
p122872
S'std::vector<VariableName>'
p122873
sS'default'
p122874
g3
sS'name'
p122875
S'variable'
p122876
sS'required'
p122877
I00
sS'group_name'
p122878
NsasS'name'
p122879
S'/UserObjects/SideAverageValue'
p122880
sa(dp122881
S'description'
p122882
g3
sS'subblocks'
p122883
NsS'parameters'
p122884
(lp122885
(dp122886
S'description'
p122887
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p122888
sS'cpp_type'
p122889
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p122890
sS'default'
p122891
g3
sS'name'
p122892
S'boundary'
p122893
sS'required'
p122894
I00
sS'group_name'
p122895
Nsa(dp122896
S'description'
p122897
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122898
sS'cpp_type'
p122899
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122900
sS'default'
p122901
g3
sS'name'
p122902
S'control_tags'
p122903
sS'required'
p122904
I00
sS'group_name'
p122905
Nsa(dp122906
S'description'
p122907
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p122908
sS'cpp_type'
p122909
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122910
sS'default'
p122911
g3
sS'name'
p122912
S'diffusivity'
p122913
sS'required'
p122914
I01
sS'group_name'
p122915
Nsa(dp122916
S'name'
p122917
S'execute_on'
p122918
sS'cpp_type'
p122919
S'MultiMooseEnum'
p122920
sS'default'
p122921
S'TIMESTEP_END'
p122922
sS'description'
p122923
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p122924
sS'required'
p122925
I00
sS'options'
p122926
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p122927
sS'group_name'
p122928
Nsa(dp122929
S'description'
p122930
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p122931
sS'cpp_type'
p122932
S'std::vector<OutputName, std::allocator<OutputName> >'
p122933
sS'default'
p122934
g3
sS'name'
p122935
S'outputs'
p122936
sS'required'
p122937
I00
sS'group_name'
p122938
S'Advanced'
p122939
sa(dp122940
S'description'
p122941
g3
sS'cpp_type'
p122942
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p122943
sS'default'
p122944
S'SideFluxAverage'
p122945
sS'name'
p122946
S'type'
p122947
sS'required'
p122948
I00
sS'group_name'
p122949
Nsa(dp122950
S'description'
p122951
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p122952
sS'cpp_type'
p122953
S'bool'
p122954
sS'default'
p122955
S'0'
p122956
sS'name'
p122957
S'use_displaced_mesh'
p122958
sS'required'
p122959
I00
sS'group_name'
p122960
S'Advanced'
p122961
sa(dp122962
S'description'
p122963
S'The name of the variable that this boundary condition applies to\n'
p122964
sS'cpp_type'
p122965
S'std::vector<VariableName>'
p122966
sS'default'
p122967
g3
sS'name'
p122968
S'variable'
p122969
sS'required'
p122970
I00
sS'group_name'
p122971
NsasS'name'
p122972
S'/UserObjects/SideFluxAverage'
p122973
sa(dp122974
S'description'
p122975
g3
sS'subblocks'
p122976
NsS'parameters'
p122977
(lp122978
(dp122979
S'description'
p122980
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p122981
sS'cpp_type'
p122982
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p122983
sS'default'
p122984
g3
sS'name'
p122985
S'boundary'
p122986
sS'required'
p122987
I00
sS'group_name'
p122988
Nsa(dp122989
S'description'
p122990
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p122991
sS'cpp_type'
p122992
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p122993
sS'default'
p122994
g3
sS'name'
p122995
S'control_tags'
p122996
sS'required'
p122997
I00
sS'group_name'
p122998
Nsa(dp122999
S'description'
p123000
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p123001
sS'cpp_type'
p123002
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123003
sS'default'
p123004
g3
sS'name'
p123005
S'diffusivity'
p123006
sS'required'
p123007
I01
sS'group_name'
p123008
Nsa(dp123009
S'name'
p123010
S'execute_on'
p123011
sS'cpp_type'
p123012
S'MultiMooseEnum'
p123013
sS'default'
p123014
S'TIMESTEP_END'
p123015
sS'description'
p123016
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123017
sS'required'
p123018
I00
sS'options'
p123019
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123020
sS'group_name'
p123021
Nsa(dp123022
S'description'
p123023
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p123024
sS'cpp_type'
p123025
S'std::vector<OutputName, std::allocator<OutputName> >'
p123026
sS'default'
p123027
g3
sS'name'
p123028
S'outputs'
p123029
sS'required'
p123030
I00
sS'group_name'
p123031
S'Advanced'
p123032
sa(dp123033
S'description'
p123034
g3
sS'cpp_type'
p123035
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123036
sS'default'
p123037
S'SideFluxIntegral'
p123038
sS'name'
p123039
S'type'
p123040
sS'required'
p123041
I00
sS'group_name'
p123042
Nsa(dp123043
S'description'
p123044
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123045
sS'cpp_type'
p123046
S'bool'
p123047
sS'default'
p123048
S'0'
p123049
sS'name'
p123050
S'use_displaced_mesh'
p123051
sS'required'
p123052
I00
sS'group_name'
p123053
S'Advanced'
p123054
sa(dp123055
S'description'
p123056
S'The name of the variable that this boundary condition applies to\n'
p123057
sS'cpp_type'
p123058
S'std::vector<VariableName>'
p123059
sS'default'
p123060
g3
sS'name'
p123061
S'variable'
p123062
sS'required'
p123063
I00
sS'group_name'
p123064
NsasS'name'
p123065
S'/UserObjects/SideFluxIntegral'
p123066
sa(dp123067
S'description'
p123068
g3
sS'subblocks'
p123069
NsS'parameters'
p123070
(lp123071
(dp123072
S'description'
p123073
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p123074
sS'cpp_type'
p123075
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p123076
sS'default'
p123077
g3
sS'name'
p123078
S'boundary'
p123079
sS'required'
p123080
I00
sS'group_name'
p123081
Nsa(dp123082
S'description'
p123083
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123084
sS'cpp_type'
p123085
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123086
sS'default'
p123087
g3
sS'name'
p123088
S'control_tags'
p123089
sS'required'
p123090
I00
sS'group_name'
p123091
Nsa(dp123092
S'name'
p123093
S'execute_on'
p123094
sS'cpp_type'
p123095
S'MultiMooseEnum'
p123096
sS'default'
p123097
S'TIMESTEP_END'
p123098
sS'description'
p123099
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123100
sS'required'
p123101
I00
sS'options'
p123102
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123103
sS'group_name'
p123104
Nsa(dp123105
S'description'
p123106
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p123107
sS'cpp_type'
p123108
S'std::vector<OutputName, std::allocator<OutputName> >'
p123109
sS'default'
p123110
g3
sS'name'
p123111
S'outputs'
p123112
sS'required'
p123113
I00
sS'group_name'
p123114
S'Advanced'
p123115
sa(dp123116
S'description'
p123117
g3
sS'cpp_type'
p123118
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123119
sS'default'
p123120
S'SideIntegralVariablePostprocessor'
p123121
sS'name'
p123122
S'type'
p123123
sS'required'
p123124
I00
sS'group_name'
p123125
Nsa(dp123126
S'description'
p123127
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123128
sS'cpp_type'
p123129
S'bool'
p123130
sS'default'
p123131
S'0'
p123132
sS'name'
p123133
S'use_displaced_mesh'
p123134
sS'required'
p123135
I00
sS'group_name'
p123136
S'Advanced'
p123137
sa(dp123138
S'description'
p123139
S'The name of the variable that this boundary condition applies to\n'
p123140
sS'cpp_type'
p123141
S'std::vector<VariableName>'
p123142
sS'default'
p123143
g3
sS'name'
p123144
S'variable'
p123145
sS'required'
p123146
I00
sS'group_name'
p123147
NsasS'name'
p123148
S'/UserObjects/SideIntegralVariablePostprocessor'
p123149
sa(dp123150
S'description'
p123151
S'Process an XYZ file of atomic coordinates and filter atoms via threshold or map variable values.\n'
p123152
sS'subblocks'
p123153
NsS'parameters'
p123154
(lp123155
(dp123156
S'description'
p123157
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123158
sS'cpp_type'
p123159
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123160
sS'default'
p123161
g3
sS'name'
p123162
S'control_tags'
p123163
sS'required'
p123164
I00
sS'group_name'
p123165
Nsa(dp123166
S'description'
p123167
S'The name of the file holding the equation system info in xda format (xda only).\n'
p123168
sS'cpp_type'
p123169
S'FileName'
p123170
sS'default'
p123171
S'<not supplied>'
p123172
sS'name'
p123173
S'es'
p123174
sS'required'
p123175
I00
sS'group_name'
p123176
Nsa(dp123177
S'name'
p123178
S'execute_on'
p123179
sS'cpp_type'
p123180
S'MultiMooseEnum'
p123181
sS'default'
p123182
S'TIMESTEP_END'
p123183
sS'description'
p123184
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123185
sS'required'
p123186
I00
sS'options'
p123187
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123188
sS'group_name'
p123189
Nsa(dp123190
S'description'
p123191
S'The name of the mesh file (must be xda or exodusII file).\n'
p123192
sS'cpp_type'
p123193
S'MeshFileName'
p123194
sS'default'
p123195
g3
sS'name'
p123196
S'mesh'
p123197
sS'required'
p123198
I01
sS'group_name'
p123199
Nsa(dp123200
S'name'
p123201
S'raster_mode'
p123202
sS'cpp_type'
p123203
S'MooseEnum'
p123204
sS'default'
p123205
S'MAP'
p123206
sS'description'
p123207
S'Rasterization mode (MAP|FILTER).\n'
p123208
sS'required'
p123209
I00
sS'options'
p123210
S'MAP FILTER'
p123211
sS'group_name'
p123212
Nsa(dp123213
S'description'
p123214
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p123215
sS'cpp_type'
p123216
S'double'
p123217
sS'default'
p123218
S'0'
p123219
sS'name'
p123220
S'rotation0_angle'
p123221
sS'required'
p123222
I00
sS'group_name'
p123223
Nsa(dp123224
S'description'
p123225
S'Vector about which to rotate points of the simulation.\n'
p123226
sS'cpp_type'
p123227
S'libMesh::VectorValue<double>'
p123228
sS'default'
p123229
S'0 0 1'
p123230
sS'name'
p123231
S'rotation0_vector'
p123232
sS'required'
p123233
I00
sS'group_name'
p123234
Nsa(dp123235
S'description'
p123236
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p123237
sS'cpp_type'
p123238
S'double'
p123239
sS'default'
p123240
S'0'
p123241
sS'name'
p123242
S'rotation1_angle'
p123243
sS'required'
p123244
I00
sS'group_name'
p123245
Nsa(dp123246
S'description'
p123247
S'Vector about which to rotate points of the simulation.\n'
p123248
sS'cpp_type'
p123249
S'libMesh::VectorValue<double>'
p123250
sS'default'
p123251
S'0 0 1'
p123252
sS'name'
p123253
S'rotation1_vector'
p123254
sS'required'
p123255
I00
sS'group_name'
p123256
Nsa(dp123257
S'description'
p123258
S'Scale factor for points in the simulation\n'
p123259
sS'cpp_type'
p123260
S'std::vector<double, std::allocator<double> >'
p123261
sS'default'
p123262
S'1 1 1'
p123263
sS'name'
p123264
S'scale'
p123265
sS'required'
p123266
I00
sS'group_name'
p123267
Nsa(dp123268
S'description'
p123269
S'Scale multiplying factor for points in the simulation\n'
p123270
sS'cpp_type'
p123271
S'std::vector<double, std::allocator<double> >'
p123272
sS'default'
p123273
S'1 1 1'
p123274
sS'name'
p123275
S'scale_multiplier'
p123276
sS'required'
p123277
I00
sS'group_name'
p123278
Nsa(dp123279
S'description'
p123280
S'The name of the system to pull values out of (xda only).\n'
p123281
sS'cpp_type'
p123282
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123283
sS'default'
p123284
S'nl0'
p123285
sS'name'
p123286
S'system'
p123287
sS'required'
p123288
I00
sS'group_name'
p123289
Nsa(dp123290
S'description'
p123291
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p123292
sS'cpp_type'
p123293
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123294
sS'default'
p123295
g3
sS'name'
p123296
S'system_variables'
p123297
sS'required'
p123298
I00
sS'group_name'
p123299
Nsa(dp123300
S'description'
p123301
S'Accept atoms with a variable value above this threshold in FILTER mode.\n'
p123302
sS'cpp_type'
p123303
S'double'
p123304
sS'default'
p123305
g3
sS'name'
p123306
S'threshold'
p123307
sS'required'
p123308
I00
sS'group_name'
p123309
Nsa(dp123310
S'description'
p123311
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p123312
sS'cpp_type'
p123313
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123314
sS'default'
p123315
g3
sS'name'
p123316
S'timestep'
p123317
sS'required'
p123318
I00
sS'group_name'
p123319
Nsa(dp123320
S'name'
p123321
S'transformation_order'
p123322
sS'cpp_type'
p123323
S'MultiMooseEnum'
p123324
sS'default'
p123325
S'SCALE TRANSLATION'
p123326
sS'description'
p123327
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p123328
sS'required'
p123329
I00
sS'options'
p123330
S'rotation0 translation scale rotation1 scale_multiplier'
p123331
sS'group_name'
p123332
Nsa(dp123333
S'description'
p123334
S'Translation factors for x,y,z coordinates of the simulation\n'
p123335
sS'cpp_type'
p123336
S'std::vector<double, std::allocator<double> >'
p123337
sS'default'
p123338
S'0 0 0'
p123339
sS'name'
p123340
S'translation'
p123341
sS'required'
p123342
I00
sS'group_name'
p123343
Nsa(dp123344
S'description'
p123345
g3
sS'cpp_type'
p123346
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123347
sS'default'
p123348
S'SolutionRasterizer'
p123349
sS'name'
p123350
S'type'
p123351
sS'required'
p123352
I00
sS'group_name'
p123353
Nsa(dp123354
S'description'
p123355
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123356
sS'cpp_type'
p123357
S'bool'
p123358
sS'default'
p123359
S'0'
p123360
sS'name'
p123361
S'use_displaced_mesh'
p123362
sS'required'
p123363
I00
sS'group_name'
p123364
S'Advanced'
p123365
sa(dp123366
S'description'
p123367
S'Variable from the mesh file to use for mapping to or filtering of the atoms.\n'
p123368
sS'cpp_type'
p123369
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123370
sS'default'
p123371
g3
sS'name'
p123372
S'variable'
p123373
sS'required'
p123374
I01
sS'group_name'
p123375
Nsa(dp123376
S'description'
p123377
S'XYZ input file.\n'
p123378
sS'cpp_type'
p123379
S'FileName'
p123380
sS'default'
p123381
g3
sS'name'
p123382
S'xyz_input'
p123383
sS'required'
p123384
I01
sS'group_name'
p123385
Nsa(dp123386
S'description'
p123387
S'XYZ output file.\n'
p123388
sS'cpp_type'
p123389
S'FileName'
p123390
sS'default'
p123391
g3
sS'name'
p123392
S'xyz_output'
p123393
sS'required'
p123394
I01
sS'group_name'
p123395
NsasS'name'
p123396
S'/UserObjects/SolutionRasterizer'
p123397
sa(dp123398
S'description'
p123399
g3
sS'subblocks'
p123400
NsS'parameters'
p123401
(lp123402
(dp123403
S'description'
p123404
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123405
sS'cpp_type'
p123406
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123407
sS'default'
p123408
g3
sS'name'
p123409
S'control_tags'
p123410
sS'required'
p123411
I00
sS'group_name'
p123412
Nsa(dp123413
S'description'
p123414
S'The name of the file holding the equation system info in xda format (xda only).\n'
p123415
sS'cpp_type'
p123416
S'FileName'
p123417
sS'default'
p123418
S'<not supplied>'
p123419
sS'name'
p123420
S'es'
p123421
sS'required'
p123422
I00
sS'group_name'
p123423
Nsa(dp123424
S'name'
p123425
S'execute_on'
p123426
sS'cpp_type'
p123427
S'MultiMooseEnum'
p123428
sS'default'
p123429
S'TIMESTEP_END'
p123430
sS'description'
p123431
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123432
sS'required'
p123433
I00
sS'options'
p123434
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123435
sS'group_name'
p123436
Nsa(dp123437
S'description'
p123438
S'The name of the mesh file (must be xda or exodusII file).\n'
p123439
sS'cpp_type'
p123440
S'MeshFileName'
p123441
sS'default'
p123442
g3
sS'name'
p123443
S'mesh'
p123444
sS'required'
p123445
I01
sS'group_name'
p123446
Nsa(dp123447
S'description'
p123448
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p123449
sS'cpp_type'
p123450
S'double'
p123451
sS'default'
p123452
S'0'
p123453
sS'name'
p123454
S'rotation0_angle'
p123455
sS'required'
p123456
I00
sS'group_name'
p123457
Nsa(dp123458
S'description'
p123459
S'Vector about which to rotate points of the simulation.\n'
p123460
sS'cpp_type'
p123461
S'libMesh::VectorValue<double>'
p123462
sS'default'
p123463
S'0 0 1'
p123464
sS'name'
p123465
S'rotation0_vector'
p123466
sS'required'
p123467
I00
sS'group_name'
p123468
Nsa(dp123469
S'description'
p123470
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p123471
sS'cpp_type'
p123472
S'double'
p123473
sS'default'
p123474
S'0'
p123475
sS'name'
p123476
S'rotation1_angle'
p123477
sS'required'
p123478
I00
sS'group_name'
p123479
Nsa(dp123480
S'description'
p123481
S'Vector about which to rotate points of the simulation.\n'
p123482
sS'cpp_type'
p123483
S'libMesh::VectorValue<double>'
p123484
sS'default'
p123485
S'0 0 1'
p123486
sS'name'
p123487
S'rotation1_vector'
p123488
sS'required'
p123489
I00
sS'group_name'
p123490
Nsa(dp123491
S'description'
p123492
S'Scale factor for points in the simulation\n'
p123493
sS'cpp_type'
p123494
S'std::vector<double, std::allocator<double> >'
p123495
sS'default'
p123496
S'1 1 1'
p123497
sS'name'
p123498
S'scale'
p123499
sS'required'
p123500
I00
sS'group_name'
p123501
Nsa(dp123502
S'description'
p123503
S'Scale multiplying factor for points in the simulation\n'
p123504
sS'cpp_type'
p123505
S'std::vector<double, std::allocator<double> >'
p123506
sS'default'
p123507
S'1 1 1'
p123508
sS'name'
p123509
S'scale_multiplier'
p123510
sS'required'
p123511
I00
sS'group_name'
p123512
Nsa(dp123513
S'description'
p123514
S'The name of the system to pull values out of (xda only).\n'
p123515
sS'cpp_type'
p123516
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123517
sS'default'
p123518
S'nl0'
p123519
sS'name'
p123520
S'system'
p123521
sS'required'
p123522
I00
sS'group_name'
p123523
Nsa(dp123524
S'description'
p123525
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p123526
sS'cpp_type'
p123527
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123528
sS'default'
p123529
g3
sS'name'
p123530
S'system_variables'
p123531
sS'required'
p123532
I00
sS'group_name'
p123533
Nsa(dp123534
S'description'
p123535
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p123536
sS'cpp_type'
p123537
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123538
sS'default'
p123539
g3
sS'name'
p123540
S'timestep'
p123541
sS'required'
p123542
I00
sS'group_name'
p123543
Nsa(dp123544
S'name'
p123545
S'transformation_order'
p123546
sS'cpp_type'
p123547
S'MultiMooseEnum'
p123548
sS'default'
p123549
S'SCALE TRANSLATION'
p123550
sS'description'
p123551
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p123552
sS'required'
p123553
I00
sS'options'
p123554
S'rotation0 translation scale rotation1 scale_multiplier'
p123555
sS'group_name'
p123556
Nsa(dp123557
S'description'
p123558
S'Translation factors for x,y,z coordinates of the simulation\n'
p123559
sS'cpp_type'
p123560
S'std::vector<double, std::allocator<double> >'
p123561
sS'default'
p123562
S'0 0 0'
p123563
sS'name'
p123564
S'translation'
p123565
sS'required'
p123566
I00
sS'group_name'
p123567
Nsa(dp123568
S'description'
p123569
g3
sS'cpp_type'
p123570
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123571
sS'default'
p123572
S'SolutionUserObject'
p123573
sS'name'
p123574
S'type'
p123575
sS'required'
p123576
I00
sS'group_name'
p123577
Nsa(dp123578
S'description'
p123579
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123580
sS'cpp_type'
p123581
S'bool'
p123582
sS'default'
p123583
S'0'
p123584
sS'name'
p123585
S'use_displaced_mesh'
p123586
sS'required'
p123587
I00
sS'group_name'
p123588
S'Advanced'
p123589
sasS'name'
p123590
S'/UserObjects/SolutionUserObject'
p123591
sa(dp123592
S'description'
p123593
S'No hardening - the parameter is independent of the internal parameter(s)\n'
p123594
sS'subblocks'
p123595
NsS'parameters'
p123596
(lp123597
(dp123598
S'description'
p123599
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123600
sS'cpp_type'
p123601
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123602
sS'default'
p123603
g3
sS'name'
p123604
S'control_tags'
p123605
sS'required'
p123606
I00
sS'group_name'
p123607
Nsa(dp123608
S'description'
p123609
S'If true, the value you entered will be multiplied by Pi/180 before passing to the Plasticity algorithms\n'
p123610
sS'cpp_type'
p123611
S'bool'
p123612
sS'default'
p123613
S'0'
p123614
sS'name'
p123615
S'convert_to_radians'
p123616
sS'required'
p123617
I00
sS'group_name'
p123618
Nsa(dp123619
S'name'
p123620
S'execute_on'
p123621
sS'cpp_type'
p123622
S'MultiMooseEnum'
p123623
sS'default'
p123624
S'TIMESTEP_END'
p123625
sS'description'
p123626
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123627
sS'required'
p123628
I00
sS'options'
p123629
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123630
sS'group_name'
p123631
Nsa(dp123632
S'description'
p123633
g3
sS'cpp_type'
p123634
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123635
sS'default'
p123636
S'TensorMechanicsHardeningConstant'
p123637
sS'name'
p123638
S'type'
p123639
sS'required'
p123640
I00
sS'group_name'
p123641
Nsa(dp123642
S'description'
p123643
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123644
sS'cpp_type'
p123645
S'bool'
p123646
sS'default'
p123647
S'0'
p123648
sS'name'
p123649
S'use_displaced_mesh'
p123650
sS'required'
p123651
I00
sS'group_name'
p123652
S'Advanced'
p123653
sa(dp123654
S'description'
p123655
S'The value of the parameter for all internal parameter.  This is perfect plasticity - there is no hardening.\n'
p123656
sS'cpp_type'
p123657
S'double'
p123658
sS'default'
p123659
S'1'
p123660
sS'name'
p123661
S'value'
p123662
sS'required'
p123663
I00
sS'group_name'
p123664
NsasS'name'
p123665
S'/UserObjects/TensorMechanicsHardeningConstant'
p123666
sa(dp123667
S'description'
p123668
S'Hardening is Cubic\n'
p123669
sS'subblocks'
p123670
NsS'parameters'
p123671
(lp123672
(dp123673
S'description'
p123674
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123675
sS'cpp_type'
p123676
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123677
sS'default'
p123678
g3
sS'name'
p123679
S'control_tags'
p123680
sS'required'
p123681
I00
sS'group_name'
p123682
Nsa(dp123683
S'name'
p123684
S'execute_on'
p123685
sS'cpp_type'
p123686
S'MultiMooseEnum'
p123687
sS'default'
p123688
S'TIMESTEP_END'
p123689
sS'description'
p123690
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123691
sS'required'
p123692
I00
sS'options'
p123693
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123694
sS'group_name'
p123695
Nsa(dp123696
S'description'
p123697
S'The value of the internal_parameter when hardening begins\n'
p123698
sS'cpp_type'
p123699
S'double'
p123700
sS'default'
p123701
S'0'
p123702
sS'name'
p123703
S'internal_0'
p123704
sS'required'
p123705
I00
sS'group_name'
p123706
Nsa(dp123707
S'description'
p123708
S'The value of the internal_parameter when hardening ends.  This hardening forms a cubic between (internal_0, value_0) and (internal_limit, value_residual) that is smooth at internal_0 and internal_limit\n'
p123709
sS'cpp_type'
p123710
S'double'
p123711
sS'default'
p123712
S'1'
p123713
sS'name'
p123714
S'internal_limit'
p123715
sS'required'
p123716
I00
sS'group_name'
p123717
Nsa(dp123718
S'description'
p123719
g3
sS'cpp_type'
p123720
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123721
sS'default'
p123722
S'TensorMechanicsHardeningCubic'
p123723
sS'name'
p123724
S'type'
p123725
sS'required'
p123726
I00
sS'group_name'
p123727
Nsa(dp123728
S'description'
p123729
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123730
sS'cpp_type'
p123731
S'bool'
p123732
sS'default'
p123733
S'0'
p123734
sS'name'
p123735
S'use_displaced_mesh'
p123736
sS'required'
p123737
I00
sS'group_name'
p123738
S'Advanced'
p123739
sa(dp123740
S'description'
p123741
S'The value of the parameter for all internal_parameter <= internal_0\n'
p123742
sS'cpp_type'
p123743
S'double'
p123744
sS'default'
p123745
g3
sS'name'
p123746
S'value_0'
p123747
sS'required'
p123748
I01
sS'group_name'
p123749
Nsa(dp123750
S'description'
p123751
S'The value of the parameter for internal_parameter >= internal_limit.  Default = value_0, ie perfect plasticity\n'
p123752
sS'cpp_type'
p123753
S'double'
p123754
sS'default'
p123755
g3
sS'name'
p123756
S'value_residual'
p123757
sS'required'
p123758
I00
sS'group_name'
p123759
NsasS'name'
p123760
S'/UserObjects/TensorMechanicsHardeningCubic'
p123761
sa(dp123762
S'description'
p123763
S'Hardening is Cut-exponential\n'
p123764
sS'subblocks'
p123765
NsS'parameters'
p123766
(lp123767
(dp123768
S'description'
p123769
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123770
sS'cpp_type'
p123771
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123772
sS'default'
p123773
g3
sS'name'
p123774
S'control_tags'
p123775
sS'required'
p123776
I00
sS'group_name'
p123777
Nsa(dp123778
S'name'
p123779
S'execute_on'
p123780
sS'cpp_type'
p123781
S'MultiMooseEnum'
p123782
sS'default'
p123783
S'TIMESTEP_END'
p123784
sS'description'
p123785
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123786
sS'required'
p123787
I00
sS'options'
p123788
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123789
sS'group_name'
p123790
Nsa(dp123791
S'description'
p123792
S'The cutoff of internal parameter\n'
p123793
sS'cpp_type'
p123794
S'double'
p123795
sS'default'
p123796
S'0'
p123797
sS'name'
p123798
S'internal_0'
p123799
sS'required'
p123800
I00
sS'group_name'
p123801
Nsa(dp123802
S'description'
p123803
S'Let p = internal_parameter.  Then value = value_0 for p<internal_0, and otherwise, value = value_residual + (value_0 - value_residual)*exp(-rate*(p - internal_0)\n'
p123804
sS'cpp_type'
p123805
S'double'
p123806
sS'default'
p123807
S'0'
p123808
sS'name'
p123809
S'rate'
p123810
sS'required'
p123811
I00
sS'group_name'
p123812
Nsa(dp123813
S'description'
p123814
g3
sS'cpp_type'
p123815
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123816
sS'default'
p123817
S'TensorMechanicsHardeningCutExponential'
p123818
sS'name'
p123819
S'type'
p123820
sS'required'
p123821
I00
sS'group_name'
p123822
Nsa(dp123823
S'description'
p123824
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123825
sS'cpp_type'
p123826
S'bool'
p123827
sS'default'
p123828
S'0'
p123829
sS'name'
p123830
S'use_displaced_mesh'
p123831
sS'required'
p123832
I00
sS'group_name'
p123833
S'Advanced'
p123834
sa(dp123835
S'description'
p123836
S'The value of the parameter for all internal_parameter <= internal_0\n'
p123837
sS'cpp_type'
p123838
S'double'
p123839
sS'default'
p123840
g3
sS'name'
p123841
S'value_0'
p123842
sS'required'
p123843
I01
sS'group_name'
p123844
Nsa(dp123845
S'description'
p123846
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p123847
sS'cpp_type'
p123848
S'double'
p123849
sS'default'
p123850
g3
sS'name'
p123851
S'value_residual'
p123852
sS'required'
p123853
I00
sS'group_name'
p123854
NsasS'name'
p123855
S'/UserObjects/TensorMechanicsHardeningCutExponential'
p123856
sa(dp123857
S'description'
p123858
S'Hardening is Exponential\n'
p123859
sS'subblocks'
p123860
NsS'parameters'
p123861
(lp123862
(dp123863
S'description'
p123864
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123865
sS'cpp_type'
p123866
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123867
sS'default'
p123868
g3
sS'name'
p123869
S'control_tags'
p123870
sS'required'
p123871
I00
sS'group_name'
p123872
Nsa(dp123873
S'name'
p123874
S'execute_on'
p123875
sS'cpp_type'
p123876
S'MultiMooseEnum'
p123877
sS'default'
p123878
S'TIMESTEP_END'
p123879
sS'description'
p123880
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123881
sS'required'
p123882
I00
sS'options'
p123883
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123884
sS'group_name'
p123885
Nsa(dp123886
S'description'
p123887
S'Let p = internal_parameter.  Then value = value_residual + (value_0 - value_residual)*exp(-rate*intnal_parameter)\n'
p123888
sS'cpp_type'
p123889
S'double'
p123890
sS'default'
p123891
S'0'
p123892
sS'name'
p123893
S'rate'
p123894
sS'required'
p123895
I00
sS'group_name'
p123896
Nsa(dp123897
S'description'
p123898
g3
sS'cpp_type'
p123899
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123900
sS'default'
p123901
S'TensorMechanicsHardeningExponential'
p123902
sS'name'
p123903
S'type'
p123904
sS'required'
p123905
I00
sS'group_name'
p123906
Nsa(dp123907
S'description'
p123908
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p123909
sS'cpp_type'
p123910
S'bool'
p123911
sS'default'
p123912
S'0'
p123913
sS'name'
p123914
S'use_displaced_mesh'
p123915
sS'required'
p123916
I00
sS'group_name'
p123917
S'Advanced'
p123918
sa(dp123919
S'description'
p123920
S'The value of the parameter at internal_parameter = 0\n'
p123921
sS'cpp_type'
p123922
S'double'
p123923
sS'default'
p123924
g3
sS'name'
p123925
S'value_0'
p123926
sS'required'
p123927
I01
sS'group_name'
p123928
Nsa(dp123929
S'description'
p123930
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p123931
sS'cpp_type'
p123932
S'double'
p123933
sS'default'
p123934
g3
sS'name'
p123935
S'value_residual'
p123936
sS'required'
p123937
I00
sS'group_name'
p123938
NsasS'name'
p123939
S'/UserObjects/TensorMechanicsHardeningExponential'
p123940
sa(dp123941
S'description'
p123942
S'Hardening is Gaussian\n'
p123943
sS'subblocks'
p123944
NsS'parameters'
p123945
(lp123946
(dp123947
S'description'
p123948
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p123949
sS'cpp_type'
p123950
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p123951
sS'default'
p123952
g3
sS'name'
p123953
S'control_tags'
p123954
sS'required'
p123955
I00
sS'group_name'
p123956
Nsa(dp123957
S'name'
p123958
S'execute_on'
p123959
sS'cpp_type'
p123960
S'MultiMooseEnum'
p123961
sS'default'
p123962
S'TIMESTEP_END'
p123963
sS'description'
p123964
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p123965
sS'required'
p123966
I00
sS'options'
p123967
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p123968
sS'group_name'
p123969
Nsa(dp123970
S'description'
p123971
S'The value of the internal_parameter when hardening begins\n'
p123972
sS'cpp_type'
p123973
S'double'
p123974
sS'default'
p123975
S'0'
p123976
sS'name'
p123977
S'internal_0'
p123978
sS'required'
p123979
I00
sS'group_name'
p123980
Nsa(dp123981
S'description'
p123982
S'Let p = internal_parameter.  Then value = value_0 for p<internal_0, and value = value_residual + (value_0 - value_residual)*exp(-0.5*rate*(p - internal_0)^2)\n'
p123983
sS'cpp_type'
p123984
S'double'
p123985
sS'default'
p123986
S'0'
p123987
sS'name'
p123988
S'rate'
p123989
sS'required'
p123990
I00
sS'group_name'
p123991
Nsa(dp123992
S'description'
p123993
g3
sS'cpp_type'
p123994
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p123995
sS'default'
p123996
S'TensorMechanicsHardeningGaussian'
p123997
sS'name'
p123998
S'type'
p123999
sS'required'
p124000
I00
sS'group_name'
p124001
Nsa(dp124002
S'description'
p124003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124004
sS'cpp_type'
p124005
S'bool'
p124006
sS'default'
p124007
S'0'
p124008
sS'name'
p124009
S'use_displaced_mesh'
p124010
sS'required'
p124011
I00
sS'group_name'
p124012
S'Advanced'
p124013
sa(dp124014
S'description'
p124015
S'The value of the parameter for all internal_parameter <= internal_0\n'
p124016
sS'cpp_type'
p124017
S'double'
p124018
sS'default'
p124019
g3
sS'name'
p124020
S'value_0'
p124021
sS'required'
p124022
I01
sS'group_name'
p124023
Nsa(dp124024
S'description'
p124025
S'The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n'
p124026
sS'cpp_type'
p124027
S'double'
p124028
sS'default'
p124029
g3
sS'name'
p124030
S'value_residual'
p124031
sS'required'
p124032
I00
sS'group_name'
p124033
NsasS'name'
p124034
S'/UserObjects/TensorMechanicsHardeningGaussian'
p124035
sa(dp124036
S'description'
p124037
S'J2 plasticity, associative, with hardening\n'
p124038
sS'subblocks'
p124039
NsS'parameters'
p124040
(lp124041
(dp124042
S'description'
p124043
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124044
sS'cpp_type'
p124045
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124046
sS'default'
p124047
g3
sS'name'
p124048
S'control_tags'
p124049
sS'required'
p124050
I00
sS'group_name'
p124051
Nsa(dp124052
S'name'
p124053
S'execute_on'
p124054
sS'cpp_type'
p124055
S'MultiMooseEnum'
p124056
sS'default'
p124057
S'TIMESTEP_END'
p124058
sS'description'
p124059
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124060
sS'required'
p124061
I00
sS'options'
p124062
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124063
sS'group_name'
p124064
Nsa(dp124065
S'description'
p124066
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124067
sS'cpp_type'
p124068
S'double'
p124069
sS'default'
p124070
g3
sS'name'
p124071
S'internal_constraint_tolerance'
p124072
sS'required'
p124073
I01
sS'group_name'
p124074
Nsa(dp124075
S'description'
p124076
g3
sS'cpp_type'
p124077
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124078
sS'default'
p124079
S'TensorMechanicsPlasticJ2'
p124080
sS'name'
p124081
S'type'
p124082
sS'required'
p124083
I00
sS'group_name'
p124084
Nsa(dp124085
S'description'
p124086
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124087
sS'cpp_type'
p124088
S'bool'
p124089
sS'default'
p124090
S'0'
p124091
sS'name'
p124092
S'use_displaced_mesh'
p124093
sS'required'
p124094
I00
sS'group_name'
p124095
S'Advanced'
p124096
sa(dp124097
S'description'
p124098
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124099
sS'cpp_type'
p124100
S'double'
p124101
sS'default'
p124102
g3
sS'name'
p124103
S'yield_function_tolerance'
p124104
sS'required'
p124105
I01
sS'group_name'
p124106
Nsa(dp124107
S'description'
p124108
S'A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n'
p124109
sS'cpp_type'
p124110
S'UserObjectName'
p124111
sS'default'
p124112
g3
sS'name'
p124113
S'yield_strength'
p124114
sS'required'
p124115
I01
sS'group_name'
p124116
NsasS'name'
p124117
S'/UserObjects/TensorMechanicsPlasticJ2'
p124118
sa(dp124119
S'description'
p124120
S'Class that limits the mean stress.  Yield function = a*mean_stress - strength.  mean_stress = (stress_xx + stress_yy + stress_zz)/3\n'
p124121
sS'subblocks'
p124122
NsS'parameters'
p124123
(lp124124
(dp124125
S'description'
p124126
S'Yield function = a*mean_stress - strength\n'
p124127
sS'cpp_type'
p124128
S'double'
p124129
sS'default'
p124130
S'1'
p124131
sS'name'
p124132
S'a'
p124133
sS'required'
p124134
I00
sS'group_name'
p124135
Nsa(dp124136
S'description'
p124137
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124138
sS'cpp_type'
p124139
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124140
sS'default'
p124141
g3
sS'name'
p124142
S'control_tags'
p124143
sS'required'
p124144
I00
sS'group_name'
p124145
Nsa(dp124146
S'name'
p124147
S'execute_on'
p124148
sS'cpp_type'
p124149
S'MultiMooseEnum'
p124150
sS'default'
p124151
S'TIMESTEP_END'
p124152
sS'description'
p124153
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124154
sS'required'
p124155
I00
sS'options'
p124156
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124157
sS'group_name'
p124158
Nsa(dp124159
S'description'
p124160
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124161
sS'cpp_type'
p124162
S'double'
p124163
sS'default'
p124164
g3
sS'name'
p124165
S'internal_constraint_tolerance'
p124166
sS'required'
p124167
I01
sS'group_name'
p124168
Nsa(dp124169
S'description'
p124170
S'Yield function = a*mean_stress - strength\n'
p124171
sS'cpp_type'
p124172
S'UserObjectName'
p124173
sS'default'
p124174
g3
sS'name'
p124175
S'strength'
p124176
sS'required'
p124177
I01
sS'group_name'
p124178
Nsa(dp124179
S'description'
p124180
g3
sS'cpp_type'
p124181
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124182
sS'default'
p124183
S'TensorMechanicsPlasticMeanCap'
p124184
sS'name'
p124185
S'type'
p124186
sS'required'
p124187
I00
sS'group_name'
p124188
Nsa(dp124189
S'description'
p124190
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124191
sS'cpp_type'
p124192
S'bool'
p124193
sS'default'
p124194
S'0'
p124195
sS'name'
p124196
S'use_displaced_mesh'
p124197
sS'required'
p124198
I00
sS'group_name'
p124199
S'Advanced'
p124200
sa(dp124201
S'description'
p124202
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124203
sS'cpp_type'
p124204
S'double'
p124205
sS'default'
p124206
g3
sS'name'
p124207
S'yield_function_tolerance'
p124208
sS'required'
p124209
I01
sS'group_name'
p124210
NsasS'name'
p124211
S'/UserObjects/TensorMechanicsPlasticMeanCap'
p124212
sa(dp124213
S'description'
p124214
S'Non-associative Mohr-Coulomb plasticity with hardening/softening\n'
p124215
sS'subblocks'
p124216
NsS'parameters'
p124217
(lp124218
(dp124219
S'description'
p124220
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/tensile_strength\n"
p124221
sS'cpp_type'
p124222
S'double'
p124223
sS'default'
p124224
S'0'
p124225
sS'name'
p124226
S'cap_rate'
p124227
sS'required'
p124228
I00
sS'group_name'
p124229
Nsa(dp124230
S'description'
p124231
S"For the 'cap' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n"
p124232
sS'cpp_type'
p124233
S'double'
p124234
sS'default'
p124235
S'0'
p124236
sS'name'
p124237
S'cap_start'
p124238
sS'required'
p124239
I00
sS'group_name'
p124240
Nsa(dp124241
S'description'
p124242
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p124243
sS'cpp_type'
p124244
S'UserObjectName'
p124245
sS'default'
p124246
g3
sS'name'
p124247
S'cohesion'
p124248
sS'required'
p124249
I01
sS'group_name'
p124250
Nsa(dp124251
S'description'
p124252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124253
sS'cpp_type'
p124254
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124255
sS'default'
p124256
g3
sS'name'
p124257
S'control_tags'
p124258
sS'required'
p124259
I00
sS'group_name'
p124260
Nsa(dp124261
S'description'
p124262
S'A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p124263
sS'cpp_type'
p124264
S'UserObjectName'
p124265
sS'default'
p124266
g3
sS'name'
p124267
S'dilation_angle'
p124268
sS'required'
p124269
I01
sS'group_name'
p124270
Nsa(dp124271
S'name'
p124272
S'execute_on'
p124273
sS'cpp_type'
p124274
S'MultiMooseEnum'
p124275
sS'default'
p124276
S'TIMESTEP_END'
p124277
sS'description'
p124278
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124279
sS'required'
p124280
I00
sS'options'
p124281
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124282
sS'group_name'
p124283
Nsa(dp124284
S'description'
p124285
S'A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians).  Physically the friction angle should be between 0 and 90deg.\n'
p124286
sS'cpp_type'
p124287
S'UserObjectName'
p124288
sS'default'
p124289
g3
sS'name'
p124290
S'friction_angle'
p124291
sS'required'
p124292
I01
sS'group_name'
p124293
Nsa(dp124294
S'description'
p124295
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124296
sS'cpp_type'
p124297
S'double'
p124298
sS'default'
p124299
g3
sS'name'
p124300
S'internal_constraint_tolerance'
p124301
sS'required'
p124302
I01
sS'group_name'
p124303
Nsa(dp124304
S'description'
p124305
S'Smoothing parameter: the edges of the cone are smoothed by the given amount.\n'
p124306
sS'cpp_type'
p124307
S'double'
p124308
sS'default'
p124309
S'25'
p124310
sS'name'
p124311
S'mc_edge_smoother'
p124312
sS'required'
p124313
I00
sS'group_name'
p124314
Nsa(dp124315
S'description'
p124316
S'If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n'
p124317
sS'cpp_type'
p124318
S'double'
p124319
sS'default'
p124320
g3
sS'name'
p124321
S'mc_lode_cutoff'
p124322
sS'required'
p124323
I00
sS'group_name'
p124324
Nsa(dp124325
S'description'
p124326
S'Smoothing parameter: the cone vertex at mean = cohesion*cot(friction_angle), will be smoothed by the given amount.  Typical value is 0.1*cohesion\n'
p124327
sS'cpp_type'
p124328
S'double'
p124329
sS'default'
p124330
g3
sS'name'
p124331
S'mc_tip_smoother'
p124332
sS'required'
p124333
I01
sS'group_name'
p124334
Nsa(dp124335
S'name'
p124336
S'tip_scheme'
p124337
sS'cpp_type'
p124338
S'MooseEnum'
p124339
sS'default'
p124340
S'hyperbolic'
p124341
sS'description'
p124342
S"Scheme by which the pyramid's tip will be smoothed.\n"
p124343
sS'required'
p124344
I00
sS'options'
p124345
S'hyperbolic cap'
p124346
sS'group_name'
p124347
Nsa(dp124348
S'description'
p124349
g3
sS'cpp_type'
p124350
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124351
sS'default'
p124352
S'TensorMechanicsPlasticMohrCoulomb'
p124353
sS'name'
p124354
S'type'
p124355
sS'required'
p124356
I00
sS'group_name'
p124357
Nsa(dp124358
S'description'
p124359
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124360
sS'cpp_type'
p124361
S'bool'
p124362
sS'default'
p124363
S'0'
p124364
sS'name'
p124365
S'use_displaced_mesh'
p124366
sS'required'
p124367
I00
sS'group_name'
p124368
S'Advanced'
p124369
sa(dp124370
S'description'
p124371
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124372
sS'cpp_type'
p124373
S'double'
p124374
sS'default'
p124375
g3
sS'name'
p124376
S'yield_function_tolerance'
p124377
sS'required'
p124378
I01
sS'group_name'
p124379
NsasS'name'
p124380
S'/UserObjects/TensorMechanicsPlasticMohrCoulomb'
p124381
sa(dp124382
S'description'
p124383
S'Non-associative Mohr-Coulomb plasticity with hardening/softening\n'
p124384
sS'subblocks'
p124385
NsS'parameters'
p124386
(lp124387
(dp124388
S'description'
p124389
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion\n'
p124390
sS'cpp_type'
p124391
S'UserObjectName'
p124392
sS'default'
p124393
g3
sS'name'
p124394
S'cohesion'
p124395
sS'required'
p124396
I01
sS'group_name'
p124397
Nsa(dp124398
S'description'
p124399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124400
sS'cpp_type'
p124401
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124402
sS'default'
p124403
g3
sS'name'
p124404
S'control_tags'
p124405
sS'required'
p124406
I00
sS'group_name'
p124407
Nsa(dp124408
S'description'
p124409
S'A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians)\n'
p124410
sS'cpp_type'
p124411
S'UserObjectName'
p124412
sS'default'
p124413
g3
sS'name'
p124414
S'dilation_angle'
p124415
sS'required'
p124416
I01
sS'group_name'
p124417
Nsa(dp124418
S'name'
p124419
S'execute_on'
p124420
sS'cpp_type'
p124421
S'MultiMooseEnum'
p124422
sS'default'
p124423
S'TIMESTEP_END'
p124424
sS'description'
p124425
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124426
sS'required'
p124427
I00
sS'options'
p124428
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124429
sS'group_name'
p124430
Nsa(dp124431
S'description'
p124432
S'A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians)\n'
p124433
sS'cpp_type'
p124434
S'UserObjectName'
p124435
sS'default'
p124436
g3
sS'name'
p124437
S'friction_angle'
p124438
sS'required'
p124439
I01
sS'group_name'
p124440
Nsa(dp124441
S'description'
p124442
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124443
sS'cpp_type'
p124444
S'double'
p124445
sS'default'
p124446
g3
sS'name'
p124447
S'internal_constraint_tolerance'
p124448
sS'required'
p124449
I01
sS'group_name'
p124450
Nsa(dp124451
S'description'
p124452
S'Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  Default = f_tol.\n'
p124453
sS'cpp_type'
p124454
S'double'
p124455
sS'default'
p124456
g3
sS'name'
p124457
S'shift'
p124458
sS'required'
p124459
I00
sS'group_name'
p124460
Nsa(dp124461
S'description'
p124462
g3
sS'cpp_type'
p124463
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124464
sS'default'
p124465
S'TensorMechanicsPlasticMohrCoulombMulti'
p124466
sS'name'
p124467
S'type'
p124468
sS'required'
p124469
I00
sS'group_name'
p124470
Nsa(dp124471
S'description'
p124472
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124473
sS'cpp_type'
p124474
S'bool'
p124475
sS'default'
p124476
S'0'
p124477
sS'name'
p124478
S'use_displaced_mesh'
p124479
sS'required'
p124480
I00
sS'group_name'
p124481
S'Advanced'
p124482
sa(dp124483
S'description'
p124484
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124485
sS'cpp_type'
p124486
S'double'
p124487
sS'default'
p124488
g3
sS'name'
p124489
S'yield_function_tolerance'
p124490
sS'required'
p124491
I01
sS'group_name'
p124492
NsasS'name'
p124493
S'/UserObjects/TensorMechanicsPlasticMohrCoulombMulti'
p124494
sa(dp124495
S'description'
p124496
S'Class that can be used for testing multi-surface plasticity models.  Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124497
sS'subblocks'
p124498
NsS'parameters'
p124499
(lp124500
(dp124501
S'description'
p124502
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124503
sS'cpp_type'
p124504
S'double'
p124505
sS'default'
p124506
g3
sS'name'
p124507
S'a'
p124508
sS'required'
p124509
I01
sS'group_name'
p124510
Nsa(dp124511
S'description'
p124512
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124513
sS'cpp_type'
p124514
S'double'
p124515
sS'default'
p124516
g3
sS'name'
p124517
S'b'
p124518
sS'required'
p124519
I01
sS'group_name'
p124520
Nsa(dp124521
S'description'
p124522
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124523
sS'cpp_type'
p124524
S'double'
p124525
sS'default'
p124526
S'0'
p124527
sS'name'
p124528
S'c'
p124529
sS'required'
p124530
I00
sS'group_name'
p124531
Nsa(dp124532
S'description'
p124533
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124534
sS'cpp_type'
p124535
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124536
sS'default'
p124537
g3
sS'name'
p124538
S'control_tags'
p124539
sS'required'
p124540
I00
sS'group_name'
p124541
Nsa(dp124542
S'description'
p124543
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124544
sS'cpp_type'
p124545
S'double'
p124546
sS'default'
p124547
S'0'
p124548
sS'name'
p124549
S'd'
p124550
sS'required'
p124551
I00
sS'group_name'
p124552
Nsa(dp124553
S'description'
p124554
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124555
sS'cpp_type'
p124556
S'double'
p124557
sS'default'
p124558
S'0'
p124559
sS'name'
p124560
S'e'
p124561
sS'required'
p124562
I00
sS'group_name'
p124563
Nsa(dp124564
S'name'
p124565
S'execute_on'
p124566
sS'cpp_type'
p124567
S'MultiMooseEnum'
p124568
sS'default'
p124569
S'TIMESTEP_END'
p124570
sS'description'
p124571
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124572
sS'required'
p124573
I00
sS'options'
p124574
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124575
sS'group_name'
p124576
Nsa(dp124577
S'description'
p124578
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124579
sS'cpp_type'
p124580
S'double'
p124581
sS'default'
p124582
S'0'
p124583
sS'name'
p124584
S'f'
p124585
sS'required'
p124586
I00
sS'group_name'
p124587
Nsa(dp124588
S'description'
p124589
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124590
sS'cpp_type'
p124591
S'double'
p124592
sS'default'
p124593
g3
sS'name'
p124594
S'internal_constraint_tolerance'
p124595
sS'required'
p124596
I01
sS'group_name'
p124597
Nsa(dp124598
S'description'
p124599
S'Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n'
p124600
sS'cpp_type'
p124601
S'double'
p124602
sS'default'
p124603
g3
sS'name'
p124604
S'strength'
p124605
sS'required'
p124606
I01
sS'group_name'
p124607
Nsa(dp124608
S'description'
p124609
g3
sS'cpp_type'
p124610
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124611
sS'default'
p124612
S'TensorMechanicsPlasticSimpleTester'
p124613
sS'name'
p124614
S'type'
p124615
sS'required'
p124616
I00
sS'group_name'
p124617
Nsa(dp124618
S'description'
p124619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124620
sS'cpp_type'
p124621
S'bool'
p124622
sS'default'
p124623
S'0'
p124624
sS'name'
p124625
S'use_displaced_mesh'
p124626
sS'required'
p124627
I00
sS'group_name'
p124628
S'Advanced'
p124629
sa(dp124630
S'description'
p124631
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124632
sS'cpp_type'
p124633
S'double'
p124634
sS'default'
p124635
g3
sS'name'
p124636
S'yield_function_tolerance'
p124637
sS'required'
p124638
I01
sS'group_name'
p124639
NsasS'name'
p124640
S'/UserObjects/TensorMechanicsPlasticSimpleTester'
p124641
sa(dp124642
S'description'
p124643
S'Associative tensile plasticity with hardening/softening, and tensile_strength = 1\n'
p124644
sS'subblocks'
p124645
NsS'parameters'
p124646
(lp124647
(dp124648
S'description'
p124649
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/tensile_strength\n"
p124650
sS'cpp_type'
p124651
S'double'
p124652
sS'default'
p124653
S'0'
p124654
sS'name'
p124655
S'cap_rate'
p124656
sS'required'
p124657
I00
sS'group_name'
p124658
Nsa(dp124659
S'description'
p124660
S"For the 'cap' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n"
p124661
sS'cpp_type'
p124662
S'double'
p124663
sS'default'
p124664
S'0'
p124665
sS'name'
p124666
S'cap_start'
p124667
sS'required'
p124668
I00
sS'group_name'
p124669
Nsa(dp124670
S'description'
p124671
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124672
sS'cpp_type'
p124673
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124674
sS'default'
p124675
g3
sS'name'
p124676
S'control_tags'
p124677
sS'required'
p124678
I00
sS'group_name'
p124679
Nsa(dp124680
S'name'
p124681
S'execute_on'
p124682
sS'cpp_type'
p124683
S'MultiMooseEnum'
p124684
sS'default'
p124685
S'TIMESTEP_END'
p124686
sS'description'
p124687
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124688
sS'required'
p124689
I00
sS'options'
p124690
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124691
sS'group_name'
p124692
Nsa(dp124693
S'description'
p124694
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124695
sS'cpp_type'
p124696
S'double'
p124697
sS'default'
p124698
g3
sS'name'
p124699
S'internal_constraint_tolerance'
p124700
sS'required'
p124701
I01
sS'group_name'
p124702
Nsa(dp124703
S'description'
p124704
S'Smoothing parameter: the edges of the cone are smoothed by the given amount.\n'
p124705
sS'cpp_type'
p124706
S'double'
p124707
sS'default'
p124708
S'25'
p124709
sS'name'
p124710
S'tensile_edge_smoother'
p124711
sS'required'
p124712
I00
sS'group_name'
p124713
Nsa(dp124714
S'description'
p124715
S'If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n'
p124716
sS'cpp_type'
p124717
S'double'
p124718
sS'default'
p124719
g3
sS'name'
p124720
S'tensile_lode_cutoff'
p124721
sS'required'
p124722
I00
sS'group_name'
p124723
Nsa(dp124724
S'description'
p124725
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n'
p124726
sS'cpp_type'
p124727
S'UserObjectName'
p124728
sS'default'
p124729
g3
sS'name'
p124730
S'tensile_strength'
p124731
sS'required'
p124732
I01
sS'group_name'
p124733
Nsa(dp124734
S'description'
p124735
S"For the 'hyperbolic' tip_scheme, the pyramid vertex will be smoothed by the given amount.  For the 'cap' tip_scheme, additional smoothing will occur.  Typical value is 0.1*tensile_strength\n"
p124736
sS'cpp_type'
p124737
S'double'
p124738
sS'default'
p124739
g3
sS'name'
p124740
S'tensile_tip_smoother'
p124741
sS'required'
p124742
I01
sS'group_name'
p124743
Nsa(dp124744
S'name'
p124745
S'tip_scheme'
p124746
sS'cpp_type'
p124747
S'MooseEnum'
p124748
sS'default'
p124749
S'hyperbolic'
p124750
sS'description'
p124751
S"Scheme by which the pyramid's tip will be smoothed.\n"
p124752
sS'required'
p124753
I00
sS'options'
p124754
S'hyperbolic cap'
p124755
sS'group_name'
p124756
Nsa(dp124757
S'description'
p124758
g3
sS'cpp_type'
p124759
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124760
sS'default'
p124761
S'TensorMechanicsPlasticTensile'
p124762
sS'name'
p124763
S'type'
p124764
sS'required'
p124765
I00
sS'group_name'
p124766
Nsa(dp124767
S'description'
p124768
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124769
sS'cpp_type'
p124770
S'bool'
p124771
sS'default'
p124772
S'0'
p124773
sS'name'
p124774
S'use_displaced_mesh'
p124775
sS'required'
p124776
I00
sS'group_name'
p124777
S'Advanced'
p124778
sa(dp124779
S'description'
p124780
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124781
sS'cpp_type'
p124782
S'double'
p124783
sS'default'
p124784
g3
sS'name'
p124785
S'yield_function_tolerance'
p124786
sS'required'
p124787
I01
sS'group_name'
p124788
NsasS'name'
p124789
S'/UserObjects/TensorMechanicsPlasticTensile'
p124790
sa(dp124791
S'description'
p124792
S'Associative tensile plasticity with hardening/softening\n'
p124793
sS'subblocks'
p124794
NsS'parameters'
p124795
(lp124796
(dp124797
S'description'
p124798
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124799
sS'cpp_type'
p124800
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124801
sS'default'
p124802
g3
sS'name'
p124803
S'control_tags'
p124804
sS'required'
p124805
I00
sS'group_name'
p124806
Nsa(dp124807
S'name'
p124808
S'execute_on'
p124809
sS'cpp_type'
p124810
S'MultiMooseEnum'
p124811
sS'default'
p124812
S'TIMESTEP_END'
p124813
sS'description'
p124814
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124815
sS'required'
p124816
I00
sS'options'
p124817
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124818
sS'group_name'
p124819
Nsa(dp124820
S'description'
p124821
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124822
sS'cpp_type'
p124823
S'double'
p124824
sS'default'
p124825
g3
sS'name'
p124826
S'internal_constraint_tolerance'
p124827
sS'required'
p124828
I01
sS'group_name'
p124829
Nsa(dp124830
S'description'
p124831
S'Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  Default = f_tol.\n'
p124832
sS'cpp_type'
p124833
S'double'
p124834
sS'default'
p124835
g3
sS'name'
p124836
S'shift'
p124837
sS'required'
p124838
I00
sS'group_name'
p124839
Nsa(dp124840
S'description'
p124841
S'A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n'
p124842
sS'cpp_type'
p124843
S'UserObjectName'
p124844
sS'default'
p124845
g3
sS'name'
p124846
S'tensile_strength'
p124847
sS'required'
p124848
I01
sS'group_name'
p124849
Nsa(dp124850
S'description'
p124851
g3
sS'cpp_type'
p124852
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p124853
sS'default'
p124854
S'TensorMechanicsPlasticTensileMulti'
p124855
sS'name'
p124856
S'type'
p124857
sS'required'
p124858
I00
sS'group_name'
p124859
Nsa(dp124860
S'description'
p124861
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p124862
sS'cpp_type'
p124863
S'bool'
p124864
sS'default'
p124865
S'0'
p124866
sS'name'
p124867
S'use_displaced_mesh'
p124868
sS'required'
p124869
I00
sS'group_name'
p124870
S'Advanced'
p124871
sa(dp124872
S'description'
p124873
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p124874
sS'cpp_type'
p124875
S'double'
p124876
sS'default'
p124877
g3
sS'name'
p124878
S'yield_function_tolerance'
p124879
sS'required'
p124880
I01
sS'group_name'
p124881
NsasS'name'
p124882
S'/UserObjects/TensorMechanicsPlasticTensileMulti'
p124883
sa(dp124884
S'description'
p124885
S'Non-associative finite-strain weak-plane shear perfect plasticity.  Here cohesion = 1, tan(phi) = 1 = tan(psi)\n'
p124886
sS'subblocks'
p124887
NsS'parameters'
p124888
(lp124889
(dp124890
S'description'
p124891
S"For the 'cap' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the 'cap' will be totally inactive).  Typical value is 1/cohesion\n"
p124892
sS'cpp_type'
p124893
S'double'
p124894
sS'default'
p124895
S'0'
p124896
sS'name'
p124897
S'cap_rate'
p124898
sS'required'
p124899
I00
sS'group_name'
p124900
Nsa(dp124901
S'description'
p124902
S"For the 'cap' tip_scheme, smoothing is performed in the stress_zz > cap_start region\n"
p124903
sS'cpp_type'
p124904
S'double'
p124905
sS'default'
p124906
S'0'
p124907
sS'name'
p124908
S'cap_start'
p124909
sS'required'
p124910
I00
sS'group_name'
p124911
Nsa(dp124912
S'description'
p124913
S'A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n'
p124914
sS'cpp_type'
p124915
S'UserObjectName'
p124916
sS'default'
p124917
g3
sS'name'
p124918
S'cohesion'
p124919
sS'required'
p124920
I01
sS'group_name'
p124921
Nsa(dp124922
S'description'
p124923
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p124924
sS'cpp_type'
p124925
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p124926
sS'default'
p124927
g3
sS'name'
p124928
S'control_tags'
p124929
sS'required'
p124930
I00
sS'group_name'
p124931
Nsa(dp124932
S'name'
p124933
S'execute_on'
p124934
sS'cpp_type'
p124935
S'MultiMooseEnum'
p124936
sS'default'
p124937
S'TIMESTEP_END'
p124938
sS'description'
p124939
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p124940
sS'required'
p124941
I00
sS'options'
p124942
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p124943
sS'group_name'
p124944
Nsa(dp124945
S'description'
p124946
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p124947
sS'cpp_type'
p124948
S'double'
p124949
sS'default'
p124950
g3
sS'name'
p124951
S'internal_constraint_tolerance'
p124952
sS'required'
p124953
I01
sS'group_name'
p124954
Nsa(dp124955
S'description'
p124956
S"For the 'hyperbolic' tip_scheme, the cone vertex at shear-stress = 0 will be smoothed by the given amount.  For the 'cap' tip_scheme, additional smoothing will occur.  Typical value is 0.1*cohesion\n"
p124957
sS'cpp_type'
p124958
S'double'
p124959
sS'default'
p124960
g3
sS'name'
p124961
S'smoother'
p124962
sS'required'
p124963
I01
sS'group_name'
p124964
Nsa(dp124965
S'description'
p124966
S'A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n'
p124967
sS'cpp_type'
p124968
S'UserObjectName'
p124969
sS'default'
p124970
g3
sS'name'
p124971
S'tan_dilation_angle'
p124972
sS'required'
p124973
I01
sS'group_name'
p124974
Nsa(dp124975
S'description'
p124976
S'A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n'
p124977
sS'cpp_type'
p124978
S'UserObjectName'
p124979
sS'default'
p124980
g3
sS'name'
p124981
S'tan_friction_angle'
p124982
sS'required'
p124983
I01
sS'group_name'
p124984
Nsa(dp124985
S'name'
p124986
S'tip_scheme'
p124987
sS'cpp_type'
p124988
S'MooseEnum'
p124989
sS'default'
p124990
S'hyperbolic'
p124991
sS'description'
p124992
S"Scheme by which the cone's tip will be smoothed.\n"
p124993
sS'required'
p124994
I00
sS'options'
p124995
S'hyperbolic cap'
p124996
sS'group_name'
p124997
Nsa(dp124998
S'description'
p124999
g3
sS'cpp_type'
p125000
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125001
sS'default'
p125002
S'TensorMechanicsPlasticWeakPlaneShear'
p125003
sS'name'
p125004
S'type'
p125005
sS'required'
p125006
I00
sS'group_name'
p125007
Nsa(dp125008
S'description'
p125009
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125010
sS'cpp_type'
p125011
S'bool'
p125012
sS'default'
p125013
S'0'
p125014
sS'name'
p125015
S'use_displaced_mesh'
p125016
sS'required'
p125017
I00
sS'group_name'
p125018
S'Advanced'
p125019
sa(dp125020
S'description'
p125021
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p125022
sS'cpp_type'
p125023
S'double'
p125024
sS'default'
p125025
g3
sS'name'
p125026
S'yield_function_tolerance'
p125027
sS'required'
p125028
I01
sS'group_name'
p125029
NsasS'name'
p125030
S'/UserObjects/TensorMechanicsPlasticWeakPlaneShear'
p125031
sa(dp125032
S'description'
p125033
S'Associative weak-plane tensile plasticity with hardening/softening\n'
p125034
sS'subblocks'
p125035
NsS'parameters'
p125036
(lp125037
(dp125038
S'description'
p125039
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125040
sS'cpp_type'
p125041
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125042
sS'default'
p125043
g3
sS'name'
p125044
S'control_tags'
p125045
sS'required'
p125046
I00
sS'group_name'
p125047
Nsa(dp125048
S'name'
p125049
S'execute_on'
p125050
sS'cpp_type'
p125051
S'MultiMooseEnum'
p125052
sS'default'
p125053
S'TIMESTEP_END'
p125054
sS'description'
p125055
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125056
sS'required'
p125057
I00
sS'options'
p125058
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125059
sS'group_name'
p125060
Nsa(dp125061
S'description'
p125062
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p125063
sS'cpp_type'
p125064
S'double'
p125065
sS'default'
p125066
g3
sS'name'
p125067
S'internal_constraint_tolerance'
p125068
sS'required'
p125069
I01
sS'group_name'
p125070
Nsa(dp125071
S'description'
p125072
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n'
p125073
sS'cpp_type'
p125074
S'UserObjectName'
p125075
sS'default'
p125076
g3
sS'name'
p125077
S'tensile_strength'
p125078
sS'required'
p125079
I01
sS'group_name'
p125080
Nsa(dp125081
S'description'
p125082
g3
sS'cpp_type'
p125083
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125084
sS'default'
p125085
S'TensorMechanicsPlasticWeakPlaneTensile'
p125086
sS'name'
p125087
S'type'
p125088
sS'required'
p125089
I00
sS'group_name'
p125090
Nsa(dp125091
S'description'
p125092
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125093
sS'cpp_type'
p125094
S'bool'
p125095
sS'default'
p125096
S'0'
p125097
sS'name'
p125098
S'use_displaced_mesh'
p125099
sS'required'
p125100
I00
sS'group_name'
p125101
S'Advanced'
p125102
sa(dp125103
S'description'
p125104
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p125105
sS'cpp_type'
p125106
S'double'
p125107
sS'default'
p125108
g3
sS'name'
p125109
S'yield_function_tolerance'
p125110
sS'required'
p125111
I01
sS'group_name'
p125112
NsasS'name'
p125113
S'/UserObjects/TensorMechanicsPlasticWeakPlaneTensile'
p125114
sa(dp125115
S'description'
p125116
S'Associative weak-plane tensile plasticity with hardening/softening, with specified, fixed normal vector.  (WeakPlaneTensile combined with specifying N in the Material might be preferable to you.)\n'
p125117
sS'subblocks'
p125118
NsS'parameters'
p125119
(lp125120
(dp125121
S'description'
p125122
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125123
sS'cpp_type'
p125124
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125125
sS'default'
p125126
g3
sS'name'
p125127
S'control_tags'
p125128
sS'required'
p125129
I00
sS'group_name'
p125130
Nsa(dp125131
S'name'
p125132
S'execute_on'
p125133
sS'cpp_type'
p125134
S'MultiMooseEnum'
p125135
sS'default'
p125136
S'TIMESTEP_END'
p125137
sS'description'
p125138
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125139
sS'required'
p125140
I00
sS'options'
p125141
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125142
sS'group_name'
p125143
Nsa(dp125144
S'description'
p125145
S'The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n'
p125146
sS'cpp_type'
p125147
S'double'
p125148
sS'default'
p125149
g3
sS'name'
p125150
S'internal_constraint_tolerance'
p125151
sS'required'
p125152
I01
sS'group_name'
p125153
Nsa(dp125154
S'description'
p125155
S'The normal vector to the weak plane\n'
p125156
sS'cpp_type'
p125157
S'libMesh::VectorValue<double>'
p125158
sS'default'
p125159
g3
sS'name'
p125160
S'normal_vector'
p125161
sS'required'
p125162
I01
sS'group_name'
p125163
Nsa(dp125164
S'description'
p125165
S'A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n'
p125166
sS'cpp_type'
p125167
S'UserObjectName'
p125168
sS'default'
p125169
g3
sS'name'
p125170
S'tensile_strength'
p125171
sS'required'
p125172
I01
sS'group_name'
p125173
Nsa(dp125174
S'description'
p125175
g3
sS'cpp_type'
p125176
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125177
sS'default'
p125178
S'TensorMechanicsPlasticWeakPlaneTensileN'
p125179
sS'name'
p125180
S'type'
p125181
sS'required'
p125182
I00
sS'group_name'
p125183
Nsa(dp125184
S'description'
p125185
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125186
sS'cpp_type'
p125187
S'bool'
p125188
sS'default'
p125189
S'0'
p125190
sS'name'
p125191
S'use_displaced_mesh'
p125192
sS'required'
p125193
I00
sS'group_name'
p125194
S'Advanced'
p125195
sa(dp125196
S'description'
p125197
S'If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n'
p125198
sS'cpp_type'
p125199
S'double'
p125200
sS'default'
p125201
g3
sS'name'
p125202
S'yield_function_tolerance'
p125203
sS'required'
p125204
I01
sS'group_name'
p125205
NsasS'name'
p125206
S'/UserObjects/TensorMechanicsPlasticWeakPlaneTensileN'
p125207
sa(dp125208
S'description'
p125209
g3
sS'subblocks'
p125210
NsS'parameters'
p125211
(lp125212
(dp125213
S'description'
p125214
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125215
sS'cpp_type'
p125216
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125217
sS'default'
p125218
g3
sS'name'
p125219
S'control_tags'
p125220
sS'required'
p125221
I00
sS'group_name'
p125222
Nsa(dp125223
S'name'
p125224
S'execute_on'
p125225
sS'cpp_type'
p125226
S'MultiMooseEnum'
p125227
sS'default'
p125228
S'TIMESTEP_END'
p125229
sS'description'
p125230
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125231
sS'required'
p125232
I00
sS'options'
p125233
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125234
sS'group_name'
p125235
Nsa(dp125236
S'description'
p125237
S'FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n'
p125238
sS'cpp_type'
p125239
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125240
sS'default'
p125241
g3
sS'name'
p125242
S'expression'
p125243
sS'required'
p125244
I01
sS'group_name'
p125245
Nsa(dp125246
S'description'
p125247
g3
sS'cpp_type'
p125248
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125249
sS'default'
p125250
S'Terminator'
p125251
sS'name'
p125252
S'type'
p125253
sS'required'
p125254
I00
sS'group_name'
p125255
Nsa(dp125256
S'description'
p125257
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125258
sS'cpp_type'
p125259
S'bool'
p125260
sS'default'
p125261
S'0'
p125262
sS'name'
p125263
S'use_displaced_mesh'
p125264
sS'required'
p125265
I00
sS'group_name'
p125266
S'Advanced'
p125267
sasS'name'
p125268
S'/UserObjects/Terminator'
p125269
sa(dp125270
S'description'
p125271
g3
sS'subblocks'
p125272
NsS'parameters'
p125273
(lp125274
(dp125275
S'description'
p125276
S"Temperature on 'hot' boundary in K\n"
p125277
sS'cpp_type'
p125278
S'PostprocessorName'
p125279
sS'default'
p125280
g3
sS'name'
p125281
S'T_hot'
p125282
sS'required'
p125283
I01
sS'group_name'
p125284
Nsa(dp125285
S'description'
p125286
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125287
sS'cpp_type'
p125288
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125289
sS'default'
p125290
g3
sS'name'
p125291
S'boundary'
p125292
sS'required'
p125293
I00
sS'group_name'
p125294
Nsa(dp125295
S'description'
p125296
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125297
sS'cpp_type'
p125298
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125299
sS'default'
p125300
g3
sS'name'
p125301
S'control_tags'
p125302
sS'required'
p125303
I00
sS'group_name'
p125304
Nsa(dp125305
S'description'
p125306
S'Length between sides of sample in length_scale\n'
p125307
sS'cpp_type'
p125308
S'double'
p125309
sS'default'
p125310
g3
sS'name'
p125311
S'dx'
p125312
sS'required'
p125313
I01
sS'group_name'
p125314
Nsa(dp125315
S'name'
p125316
S'execute_on'
p125317
sS'cpp_type'
p125318
S'MultiMooseEnum'
p125319
sS'default'
p125320
S'TIMESTEP_END'
p125321
sS'description'
p125322
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125323
sS'required'
p125324
I00
sS'options'
p125325
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125326
sS'group_name'
p125327
Nsa(dp125328
S'description'
p125329
S"Heat flux out of 'cold' boundary in solution units, should always be positive\n"
p125330
sS'cpp_type'
p125331
S'PostprocessorName'
p125332
sS'default'
p125333
g3
sS'name'
p125334
S'flux'
p125335
sS'required'
p125336
I01
sS'group_name'
p125337
Nsa(dp125338
S'description'
p125339
S'Initial value of the thermal conductivity\n'
p125340
sS'cpp_type'
p125341
S'double'
p125342
sS'default'
p125343
S'0'
p125344
sS'name'
p125345
S'k0'
p125346
sS'required'
p125347
I00
sS'group_name'
p125348
Nsa(dp125349
S'description'
p125350
S'lengthscale of the solution, default is 1e-8\n'
p125351
sS'cpp_type'
p125352
S'double'
p125353
sS'default'
p125354
S'1e-08'
p125355
sS'name'
p125356
S'length_scale'
p125357
sS'required'
p125358
I00
sS'group_name'
p125359
Nsa(dp125360
S'description'
p125361
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125362
sS'cpp_type'
p125363
S'std::vector<OutputName, std::allocator<OutputName> >'
p125364
sS'default'
p125365
g3
sS'name'
p125366
S'outputs'
p125367
sS'required'
p125368
I00
sS'group_name'
p125369
S'Advanced'
p125370
sa(dp125371
S'description'
p125372
g3
sS'cpp_type'
p125373
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125374
sS'default'
p125375
S'ThermalCond'
p125376
sS'name'
p125377
S'type'
p125378
sS'required'
p125379
I00
sS'group_name'
p125380
Nsa(dp125381
S'description'
p125382
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125383
sS'cpp_type'
p125384
S'bool'
p125385
sS'default'
p125386
S'0'
p125387
sS'name'
p125388
S'use_displaced_mesh'
p125389
sS'required'
p125390
I00
sS'group_name'
p125391
S'Advanced'
p125392
sa(dp125393
S'description'
p125394
S'The name of the variable that this boundary condition applies to\n'
p125395
sS'cpp_type'
p125396
S'std::vector<VariableName>'
p125397
sS'default'
p125398
g3
sS'name'
p125399
S'variable'
p125400
sS'required'
p125401
I00
sS'group_name'
p125402
NsasS'name'
p125403
S'/UserObjects/ThermalCond'
p125404
sa(dp125405
S'description'
p125406
g3
sS'subblocks'
p125407
NsS'parameters'
p125408
(lp125409
(dp125410
S'description'
p125411
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125412
sS'cpp_type'
p125413
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125414
sS'default'
p125415
g3
sS'name'
p125416
S'control_tags'
p125417
sS'required'
p125418
I00
sS'group_name'
p125419
Nsa(dp125420
S'name'
p125421
S'execute_on'
p125422
sS'cpp_type'
p125423
S'MultiMooseEnum'
p125424
sS'default'
p125425
S'TIMESTEP_END'
p125426
sS'description'
p125427
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125428
sS'required'
p125429
I00
sS'options'
p125430
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125431
sS'group_name'
p125432
Nsa(dp125433
S'description'
p125434
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125435
sS'cpp_type'
p125436
S'std::vector<OutputName, std::allocator<OutputName> >'
p125437
sS'default'
p125438
g3
sS'name'
p125439
S'outputs'
p125440
sS'required'
p125441
I00
sS'group_name'
p125442
S'Advanced'
p125443
sa(dp125444
S'description'
p125445
g3
sS'cpp_type'
p125446
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125447
sS'default'
p125448
S'TimestepSize'
p125449
sS'name'
p125450
S'type'
p125451
sS'required'
p125452
I00
sS'group_name'
p125453
Nsa(dp125454
S'description'
p125455
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125456
sS'cpp_type'
p125457
S'bool'
p125458
sS'default'
p125459
S'0'
p125460
sS'name'
p125461
S'use_displaced_mesh'
p125462
sS'required'
p125463
I00
sS'group_name'
p125464
S'Advanced'
p125465
sasS'name'
p125466
S'/UserObjects/TimestepSize'
p125467
sa(dp125468
S'description'
p125469
g3
sS'subblocks'
p125470
NsS'parameters'
p125471
(lp125472
(dp125473
S'description'
p125474
S'Direction of the axis of rotation\n'
p125475
sS'cpp_type'
p125476
S'libMesh::VectorValue<double>'
p125477
sS'default'
p125478
g3
sS'name'
p125479
S'axis_direction'
p125480
sS'required'
p125481
I01
sS'group_name'
p125482
Nsa(dp125483
S'description'
p125484
S'Origin of the axis of rotation\n'
p125485
sS'cpp_type'
p125486
S'libMesh::VectorValue<double>'
p125487
sS'default'
p125488
g3
sS'name'
p125489
S'axis_origin'
p125490
sS'required'
p125491
I01
sS'group_name'
p125492
Nsa(dp125493
S'description'
p125494
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125495
sS'cpp_type'
p125496
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125497
sS'default'
p125498
g3
sS'name'
p125499
S'block'
p125500
sS'required'
p125501
I00
sS'group_name'
p125502
Nsa(dp125503
S'description'
p125504
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125505
sS'cpp_type'
p125506
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125507
sS'default'
p125508
g3
sS'name'
p125509
S'boundary'
p125510
sS'required'
p125511
I00
sS'group_name'
p125512
Nsa(dp125513
S'description'
p125514
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125515
sS'cpp_type'
p125516
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125517
sS'default'
p125518
g3
sS'name'
p125519
S'control_tags'
p125520
sS'required'
p125521
I00
sS'group_name'
p125522
Nsa(dp125523
S'name'
p125524
S'execute_on'
p125525
sS'cpp_type'
p125526
S'MultiMooseEnum'
p125527
sS'default'
p125528
S'TIMESTEP_END'
p125529
sS'description'
p125530
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125531
sS'required'
p125532
I00
sS'options'
p125533
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125534
sS'group_name'
p125535
Nsa(dp125536
S'description'
p125537
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125538
sS'cpp_type'
p125539
S'std::vector<OutputName, std::allocator<OutputName> >'
p125540
sS'default'
p125541
g3
sS'name'
p125542
S'outputs'
p125543
sS'required'
p125544
I00
sS'group_name'
p125545
S'Advanced'
p125546
sa(dp125547
S'description'
p125548
S'The x reaction variable\n'
p125549
sS'cpp_type'
p125550
S'AuxVariableName'
p125551
sS'default'
p125552
g3
sS'name'
p125553
S'react_x'
p125554
sS'required'
p125555
I01
sS'group_name'
p125556
Nsa(dp125557
S'description'
p125558
S'The y reaction variable\n'
p125559
sS'cpp_type'
p125560
S'AuxVariableName'
p125561
sS'default'
p125562
g3
sS'name'
p125563
S'react_y'
p125564
sS'required'
p125565
I01
sS'group_name'
p125566
Nsa(dp125567
S'description'
p125568
S'The z reaction variable\n'
p125569
sS'cpp_type'
p125570
S'AuxVariableName'
p125571
sS'default'
p125572
g3
sS'name'
p125573
S'react_z'
p125574
sS'required'
p125575
I01
sS'group_name'
p125576
Nsa(dp125577
S'description'
p125578
S'The seed for the master random number generator\n'
p125579
sS'cpp_type'
p125580
S'unsigned int'
p125581
sS'default'
p125582
S'0'
p125583
sS'name'
p125584
S'seed'
p125585
sS'required'
p125586
I00
sS'group_name'
p125587
S'Advanced'
p125588
sa(dp125589
S'description'
p125590
g3
sS'cpp_type'
p125591
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125592
sS'default'
p125593
S'TorqueReaction'
p125594
sS'name'
p125595
S'type'
p125596
sS'required'
p125597
I00
sS'group_name'
p125598
Nsa(dp125599
S'description'
p125600
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125601
sS'cpp_type'
p125602
S'bool'
p125603
sS'default'
p125604
S'1'
p125605
sS'name'
p125606
S'use_displaced_mesh'
p125607
sS'required'
p125608
I00
sS'group_name'
p125609
S'Advanced'
p125610
sasS'name'
p125611
S'/UserObjects/TorqueReaction'
p125612
sa(dp125613
S'description'
p125614
g3
sS'subblocks'
p125615
NsS'parameters'
p125616
(lp125617
(dp125618
S'description'
p125619
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125620
sS'cpp_type'
p125621
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125622
sS'default'
p125623
g3
sS'name'
p125624
S'control_tags'
p125625
sS'required'
p125626
I00
sS'group_name'
p125627
Nsa(dp125628
S'name'
p125629
S'execute_on'
p125630
sS'cpp_type'
p125631
S'MultiMooseEnum'
p125632
sS'default'
p125633
S'TIMESTEP_END'
p125634
sS'description'
p125635
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125636
sS'required'
p125637
I00
sS'options'
p125638
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125639
sS'group_name'
p125640
Nsa(dp125641
S'description'
p125642
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125643
sS'cpp_type'
p125644
S'std::vector<OutputName, std::allocator<OutputName> >'
p125645
sS'default'
p125646
g3
sS'name'
p125647
S'outputs'
p125648
sS'required'
p125649
I00
sS'group_name'
p125650
S'Advanced'
p125651
sa(dp125652
S'description'
p125653
g3
sS'cpp_type'
p125654
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125655
sS'default'
p125656
S'TotalVariableValue'
p125657
sS'name'
p125658
S'type'
p125659
sS'required'
p125660
I00
sS'group_name'
p125661
Nsa(dp125662
S'description'
p125663
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125664
sS'cpp_type'
p125665
S'bool'
p125666
sS'default'
p125667
S'0'
p125668
sS'name'
p125669
S'use_displaced_mesh'
p125670
sS'required'
p125671
I00
sS'group_name'
p125672
S'Advanced'
p125673
sa(dp125674
S'description'
p125675
S'The name of the postprocessor\n'
p125676
sS'cpp_type'
p125677
S'PostprocessorName'
p125678
sS'default'
p125679
g3
sS'name'
p125680
S'value'
p125681
sS'required'
p125682
I00
sS'group_name'
p125683
NsasS'name'
p125684
S'/UserObjects/TotalVariableValue'
p125685
sa(dp125686
S'description'
p125687
g3
sS'subblocks'
p125688
NsS'parameters'
p125689
(lp125690
(dp125691
S'description'
p125692
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125693
sS'cpp_type'
p125694
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125695
sS'default'
p125696
g3
sS'name'
p125697
S'block'
p125698
sS'required'
p125699
I00
sS'group_name'
p125700
Nsa(dp125701
S'description'
p125702
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125703
sS'cpp_type'
p125704
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125705
sS'default'
p125706
g3
sS'name'
p125707
S'control_tags'
p125708
sS'required'
p125709
I00
sS'group_name'
p125710
Nsa(dp125711
S'name'
p125712
S'execute_on'
p125713
sS'cpp_type'
p125714
S'MultiMooseEnum'
p125715
sS'default'
p125716
S'TIMESTEP_END'
p125717
sS'description'
p125718
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p125719
sS'required'
p125720
I00
sS'options'
p125721
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p125722
sS'group_name'
p125723
Nsa(dp125724
S'description'
p125725
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p125726
sS'cpp_type'
p125727
S'std::vector<OutputName, std::allocator<OutputName> >'
p125728
sS'default'
p125729
g3
sS'name'
p125730
S'outputs'
p125731
sS'required'
p125732
I00
sS'group_name'
p125733
S'Advanced'
p125734
sa(dp125735
S'description'
p125736
S'The seed for the master random number generator\n'
p125737
sS'cpp_type'
p125738
S'unsigned int'
p125739
sS'default'
p125740
S'0'
p125741
sS'name'
p125742
S'seed'
p125743
sS'required'
p125744
I00
sS'group_name'
p125745
S'Advanced'
p125746
sa(dp125747
S'description'
p125748
g3
sS'cpp_type'
p125749
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125750
sS'default'
p125751
S'VolumePostprocessor'
p125752
sS'name'
p125753
S'type'
p125754
sS'required'
p125755
I00
sS'group_name'
p125756
Nsa(dp125757
S'description'
p125758
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p125759
sS'cpp_type'
p125760
S'bool'
p125761
sS'default'
p125762
S'0'
p125763
sS'name'
p125764
S'use_displaced_mesh'
p125765
sS'required'
p125766
I00
sS'group_name'
p125767
S'Advanced'
p125768
sasS'name'
p125769
S'/UserObjects/VolumePostprocessor'
p125770
sasS'parameters'
p125771
NsS'name'
p125772
S'/UserObjects'
p125773
sa(dp125774
S'description'
p125775
g3
sS'subblocks'
p125776
(lp125777
(dp125778
S'description'
p125779
g3
sS'subblocks'
p125780
(lp125781
(dp125782
S'description'
p125783
g3
sS'subblocks'
p125784
(lp125785
(dp125786
S'description'
p125787
g3
sS'subblocks'
p125788
(lp125789
(dp125790
S'description'
p125791
g3
sS'subblocks'
p125792
NsS'parameters'
p125793
(lp125794
(dp125795
S'description'
p125796
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125797
sS'cpp_type'
p125798
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125799
sS'default'
p125800
g3
sS'name'
p125801
S'block'
p125802
sS'required'
p125803
I00
sS'group_name'
p125804
Nsa(dp125805
S'description'
p125806
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125807
sS'cpp_type'
p125808
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125809
sS'default'
p125810
g3
sS'name'
p125811
S'boundary'
p125812
sS'required'
p125813
I00
sS'group_name'
p125814
Nsa(dp125815
S'description'
p125816
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125817
sS'cpp_type'
p125818
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125819
sS'default'
p125820
g3
sS'name'
p125821
S'control_tags'
p125822
sS'required'
p125823
I00
sS'group_name'
p125824
Nsa(dp125825
S'description'
p125826
S'The value of the variable inside the box\n'
p125827
sS'cpp_type'
p125828
S'double'
p125829
sS'default'
p125830
S'0'
p125831
sS'name'
p125832
S'inside'
p125833
sS'required'
p125834
I00
sS'group_name'
p125835
Nsa(dp125836
S'description'
p125837
S'The value of the variable outside the box\n'
p125838
sS'cpp_type'
p125839
S'double'
p125840
sS'default'
p125841
S'0'
p125842
sS'name'
p125843
S'outside'
p125844
sS'required'
p125845
I00
sS'group_name'
p125846
Nsa(dp125847
S'description'
p125848
g3
sS'cpp_type'
p125849
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p125850
sS'default'
p125851
S'BoundingBoxIC'
p125852
sS'name'
p125853
S'type'
p125854
sS'required'
p125855
I00
sS'group_name'
p125856
Nsa(dp125857
S'description'
p125858
S'The variable this initial condition is supposed to provide values for.\n'
p125859
sS'cpp_type'
p125860
S'VariableName'
p125861
sS'default'
p125862
g3
sS'name'
p125863
S'variable'
p125864
sS'required'
p125865
I01
sS'group_name'
p125866
Nsa(dp125867
S'description'
p125868
S'The x coordinate of the lower left-hand corner of the box\n'
p125869
sS'cpp_type'
p125870
S'double'
p125871
sS'default'
p125872
g3
sS'name'
p125873
S'x1'
p125874
sS'required'
p125875
I01
sS'group_name'
p125876
Nsa(dp125877
S'description'
p125878
S'The x coordinate of the upper right-hand corner of the box\n'
p125879
sS'cpp_type'
p125880
S'double'
p125881
sS'default'
p125882
g3
sS'name'
p125883
S'x2'
p125884
sS'required'
p125885
I01
sS'group_name'
p125886
Nsa(dp125887
S'description'
p125888
S'The y coordinate of the lower left-hand corner of the box\n'
p125889
sS'cpp_type'
p125890
S'double'
p125891
sS'default'
p125892
g3
sS'name'
p125893
S'y1'
p125894
sS'required'
p125895
I01
sS'group_name'
p125896
Nsa(dp125897
S'description'
p125898
S'The y coordinate of the upper right-hand corner of the box\n'
p125899
sS'cpp_type'
p125900
S'double'
p125901
sS'default'
p125902
g3
sS'name'
p125903
S'y2'
p125904
sS'required'
p125905
I01
sS'group_name'
p125906
Nsa(dp125907
S'description'
p125908
S'The z coordinate of the lower left-hand corner of the box\n'
p125909
sS'cpp_type'
p125910
S'double'
p125911
sS'default'
p125912
S'0'
p125913
sS'name'
p125914
S'z1'
p125915
sS'required'
p125916
I00
sS'group_name'
p125917
Nsa(dp125918
S'description'
p125919
S'The z coordinate of the upper right-hand corner of the box\n'
p125920
sS'cpp_type'
p125921
S'double'
p125922
sS'default'
p125923
S'0'
p125924
sS'name'
p125925
S'z2'
p125926
sS'required'
p125927
I00
sS'group_name'
p125928
NsasS'name'
p125929
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p125930
sa(dp125931
S'description'
p125932
S'Close packed arrangement of smooth circles\n'
p125933
sS'subblocks'
p125934
NsS'parameters'
p125935
(lp125936
(dp125937
S'description'
p125938
S'in 3D, whether the objects are spheres or columns\n'
p125939
sS'cpp_type'
p125940
S'bool'
p125941
sS'default'
p125942
S'1'
p125943
sS'name'
p125944
S'3D_spheres'
p125945
sS'required'
p125946
I00
sS'group_name'
p125947
Nsa(dp125948
S'description'
p125949
S'The list of block ids (SubdomainID) that this object will be applied\n'
p125950
sS'cpp_type'
p125951
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p125952
sS'default'
p125953
g3
sS'name'
p125954
S'block'
p125955
sS'required'
p125956
I00
sS'group_name'
p125957
Nsa(dp125958
S'description'
p125959
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p125960
sS'cpp_type'
p125961
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p125962
sS'default'
p125963
g3
sS'name'
p125964
S'boundary'
p125965
sS'required'
p125966
I00
sS'group_name'
p125967
Nsa(dp125968
S'description'
p125969
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p125970
sS'cpp_type'
p125971
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p125972
sS'default'
p125973
g3
sS'name'
p125974
S'control_tags'
p125975
sS'required'
p125976
I00
sS'group_name'
p125977
Nsa(dp125978
S'description'
p125979
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p125980
sS'cpp_type'
p125981
S'double'
p125982
sS'default'
p125983
S'0'
p125984
sS'name'
p125985
S'int_width'
p125986
sS'required'
p125987
I00
sS'group_name'
p125988
Nsa(dp125989
S'description'
p125990
S'The variable value inside the circle\n'
p125991
sS'cpp_type'
p125992
S'double'
p125993
sS'default'
p125994
g3
sS'name'
p125995
S'invalue'
p125996
sS'required'
p125997
I01
sS'group_name'
p125998
Nsa(dp125999
S'description'
p126000
S'The variable value outside the circle\n'
p126001
sS'cpp_type'
p126002
S'double'
p126003
sS'default'
p126004
g3
sS'name'
p126005
S'outvalue'
p126006
sS'required'
p126007
I01
sS'group_name'
p126008
Nsa(dp126009
S'description'
p126010
S'The radius of a circle\n'
p126011
sS'cpp_type'
p126012
S'double'
p126013
sS'default'
p126014
g3
sS'name'
p126015
S'radius'
p126016
sS'required'
p126017
I01
sS'group_name'
p126018
Nsa(dp126019
S'description'
p126020
S'Seed value for the random number generator\n'
p126021
sS'cpp_type'
p126022
S'unsigned int'
p126023
sS'default'
p126024
S'12345'
p126025
sS'name'
p126026
S'rand_seed'
p126027
sS'required'
p126028
I00
sS'group_name'
p126029
Nsa(dp126030
S'description'
p126031
g3
sS'cpp_type'
p126032
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126033
sS'default'
p126034
S'ClosePackIC'
p126035
sS'name'
p126036
S'type'
p126037
sS'required'
p126038
I00
sS'group_name'
p126039
Nsa(dp126040
S'description'
p126041
S'The variable this initial condition is supposed to provide values for.\n'
p126042
sS'cpp_type'
p126043
S'VariableName'
p126044
sS'default'
p126045
g3
sS'name'
p126046
S'variable'
p126047
sS'required'
p126048
I01
sS'group_name'
p126049
Nsa(dp126050
S'description'
p126051
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p126052
sS'cpp_type'
p126053
S'bool'
p126054
sS'default'
p126055
S'0'
p126056
sS'name'
p126057
S'zero_gradient'
p126058
sS'required'
p126059
I00
sS'group_name'
p126060
NsasS'name'
p126061
S'/Variables/*/InitialCondition/<type>/ClosePackIC'
p126062
sa(dp126063
S'description'
p126064
g3
sS'subblocks'
p126065
NsS'parameters'
p126066
(lp126067
(dp126068
S'description'
p126069
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126070
sS'cpp_type'
p126071
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126072
sS'default'
p126073
g3
sS'name'
p126074
S'block'
p126075
sS'required'
p126076
I00
sS'group_name'
p126077
Nsa(dp126078
S'description'
p126079
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126080
sS'cpp_type'
p126081
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126082
sS'default'
p126083
g3
sS'name'
p126084
S'boundary'
p126085
sS'required'
p126086
I00
sS'group_name'
p126087
Nsa(dp126088
S'description'
p126089
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126090
sS'cpp_type'
p126091
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126092
sS'default'
p126093
g3
sS'name'
p126094
S'control_tags'
p126095
sS'required'
p126096
I00
sS'group_name'
p126097
Nsa(dp126098
S'description'
p126099
g3
sS'cpp_type'
p126100
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126101
sS'default'
p126102
S'ConstantIC'
p126103
sS'name'
p126104
S'type'
p126105
sS'required'
p126106
I00
sS'group_name'
p126107
Nsa(dp126108
S'description'
p126109
S'The value to be set in IC\n'
p126110
sS'cpp_type'
p126111
S'double'
p126112
sS'default'
p126113
g3
sS'name'
p126114
S'value'
p126115
sS'required'
p126116
I01
sS'group_name'
p126117
Nsa(dp126118
S'description'
p126119
S'The variable this initial condition is supposed to provide values for.\n'
p126120
sS'cpp_type'
p126121
S'VariableName'
p126122
sS'default'
p126123
g3
sS'name'
p126124
S'variable'
p126125
sS'required'
p126126
I01
sS'group_name'
p126127
NsasS'name'
p126128
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p126129
sa(dp126130
S'description'
p126131
S'Cross-shaped initial condition\n'
p126132
sS'subblocks'
p126133
NsS'parameters'
p126134
(lp126135
(dp126136
S'description'
p126137
S'The amplitude\n'
p126138
sS'cpp_type'
p126139
S'double'
p126140
sS'default'
p126141
S'1'
p126142
sS'name'
p126143
S'amplitude'
p126144
sS'required'
p126145
I00
sS'group_name'
p126146
Nsa(dp126147
S'description'
p126148
S'The average value\n'
p126149
sS'cpp_type'
p126150
S'double'
p126151
sS'default'
p126152
S'0'
p126153
sS'name'
p126154
S'average'
p126155
sS'required'
p126156
I00
sS'group_name'
p126157
Nsa(dp126158
S'description'
p126159
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126160
sS'cpp_type'
p126161
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126162
sS'default'
p126163
g3
sS'name'
p126164
S'block'
p126165
sS'required'
p126166
I00
sS'group_name'
p126167
Nsa(dp126168
S'description'
p126169
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126170
sS'cpp_type'
p126171
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126172
sS'default'
p126173
g3
sS'name'
p126174
S'boundary'
p126175
sS'required'
p126176
I00
sS'group_name'
p126177
Nsa(dp126178
S'description'
p126179
S'A small area between the max value and the interface\n'
p126180
sS'cpp_type'
p126181
S'double'
p126182
sS'default'
p126183
S'0.03125'
p126184
sS'name'
p126185
S'buffer'
p126186
sS'required'
p126187
I00
sS'group_name'
p126188
Nsa(dp126189
S'description'
p126190
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126191
sS'cpp_type'
p126192
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126193
sS'default'
p126194
g3
sS'name'
p126195
S'control_tags'
p126196
sS'required'
p126197
I00
sS'group_name'
p126198
Nsa(dp126199
S'description'
p126200
S'The interface width\n'
p126201
sS'cpp_type'
p126202
S'double'
p126203
sS'default'
p126204
S'0.03125'
p126205
sS'name'
p126206
S'interface'
p126207
sS'required'
p126208
I00
sS'group_name'
p126209
Nsa(dp126210
S'description'
p126211
S'The length\n'
p126212
sS'cpp_type'
p126213
S'double'
p126214
sS'default'
p126215
S'0.75'
p126216
sS'name'
p126217
S'length'
p126218
sS'required'
p126219
I00
sS'group_name'
p126220
Nsa(dp126221
S'description'
p126222
g3
sS'cpp_type'
p126223
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126224
sS'default'
p126225
S'CrossIC'
p126226
sS'name'
p126227
S'type'
p126228
sS'required'
p126229
I00
sS'group_name'
p126230
Nsa(dp126231
S'description'
p126232
S'The variable this initial condition is supposed to provide values for.\n'
p126233
sS'cpp_type'
p126234
S'VariableName'
p126235
sS'default'
p126236
g3
sS'name'
p126237
S'variable'
p126238
sS'required'
p126239
I01
sS'group_name'
p126240
Nsa(dp126241
S'description'
p126242
S'The width\n'
p126243
sS'cpp_type'
p126244
S'double'
p126245
sS'default'
p126246
S'0.125'
p126247
sS'name'
p126248
S'width'
p126249
sS'required'
p126250
I00
sS'group_name'
p126251
Nsa(dp126252
S'description'
p126253
S'The x coordinate of the lower left-hand corner of the box\n'
p126254
sS'cpp_type'
p126255
S'double'
p126256
sS'default'
p126257
S'0'
p126258
sS'name'
p126259
S'x1'
p126260
sS'required'
p126261
I00
sS'group_name'
p126262
Nsa(dp126263
S'description'
p126264
S'The x coordinate of the upper right-hand corner of the box\n'
p126265
sS'cpp_type'
p126266
S'double'
p126267
sS'default'
p126268
S'1'
p126269
sS'name'
p126270
S'x2'
p126271
sS'required'
p126272
I00
sS'group_name'
p126273
Nsa(dp126274
S'description'
p126275
S'The y coordinate of the lower left-hand corner of the box\n'
p126276
sS'cpp_type'
p126277
S'double'
p126278
sS'default'
p126279
S'0'
p126280
sS'name'
p126281
S'y1'
p126282
sS'required'
p126283
I00
sS'group_name'
p126284
Nsa(dp126285
S'description'
p126286
S'The y coordinate of the upper right-hand corner of the box\n'
p126287
sS'cpp_type'
p126288
S'double'
p126289
sS'default'
p126290
S'1'
p126291
sS'name'
p126292
S'y2'
p126293
sS'required'
p126294
I00
sS'group_name'
p126295
NsasS'name'
p126296
S'/Variables/*/InitialCondition/<type>/CrossIC'
p126297
sa(dp126298
S'description'
p126299
g3
sS'subblocks'
p126300
NsS'parameters'
p126301
(lp126302
(dp126303
S'description'
p126304
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126305
sS'cpp_type'
p126306
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126307
sS'default'
p126308
g3
sS'name'
p126309
S'block'
p126310
sS'required'
p126311
I00
sS'group_name'
p126312
Nsa(dp126313
S'description'
p126314
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126315
sS'cpp_type'
p126316
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126317
sS'default'
p126318
g3
sS'name'
p126319
S'boundary'
p126320
sS'required'
p126321
I00
sS'group_name'
p126322
Nsa(dp126323
S'description'
p126324
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126325
sS'cpp_type'
p126326
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126327
sS'default'
p126328
g3
sS'name'
p126329
S'control_tags'
p126330
sS'required'
p126331
I00
sS'group_name'
p126332
Nsa(dp126333
S'description'
p126334
S'The initial condition function.\n'
p126335
sS'cpp_type'
p126336
S'FunctionName'
p126337
sS'default'
p126338
g3
sS'name'
p126339
S'function'
p126340
sS'required'
p126341
I01
sS'group_name'
p126342
Nsa(dp126343
S'description'
p126344
g3
sS'cpp_type'
p126345
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126346
sS'default'
p126347
S'FunctionIC'
p126348
sS'name'
p126349
S'type'
p126350
sS'required'
p126351
I00
sS'group_name'
p126352
Nsa(dp126353
S'description'
p126354
S'The variable this initial condition is supposed to provide values for.\n'
p126355
sS'cpp_type'
p126356
S'VariableName'
p126357
sS'default'
p126358
g3
sS'name'
p126359
S'variable'
p126360
sS'required'
p126361
I01
sS'group_name'
p126362
NsasS'name'
p126363
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p126364
sa(dp126365
S'description'
p126366
S'Perturbed hexagonal polycrystal\n'
p126367
sS'subblocks'
p126368
NsS'parameters'
p126369
(lp126370
(dp126371
S'description'
p126372
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126373
sS'cpp_type'
p126374
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126375
sS'default'
p126376
g3
sS'name'
p126377
S'block'
p126378
sS'required'
p126379
I00
sS'group_name'
p126380
Nsa(dp126381
S'description'
p126382
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126383
sS'cpp_type'
p126384
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126385
sS'default'
p126386
g3
sS'name'
p126387
S'boundary'
p126388
sS'required'
p126389
I00
sS'group_name'
p126390
Nsa(dp126391
S'description'
p126392
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p126393
sS'cpp_type'
p126394
S'bool'
p126395
sS'default'
p126396
S'0'
p126397
sS'name'
p126398
S'cody_test'
p126399
sS'required'
p126400
I00
sS'group_name'
p126401
Nsa(dp126402
S'description'
p126403
S'3D microstructure will be columnar in the z-direction?\n'
p126404
sS'cpp_type'
p126405
S'bool'
p126406
sS'default'
p126407
S'0'
p126408
sS'name'
p126409
S'columnar_3D'
p126410
sS'required'
p126411
I00
sS'group_name'
p126412
Nsa(dp126413
S'description'
p126414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126415
sS'cpp_type'
p126416
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126417
sS'default'
p126418
g3
sS'name'
p126419
S'control_tags'
p126420
sS'required'
p126421
I00
sS'group_name'
p126422
Nsa(dp126423
S'description'
p126424
S'Number of grains being represented by the order parameters\n'
p126425
sS'cpp_type'
p126426
S'unsigned int'
p126427
sS'default'
p126428
g3
sS'name'
p126429
S'grain_num'
p126430
sS'required'
p126431
I01
sS'group_name'
p126432
Nsa(dp126433
S'description'
p126434
S'The index for the current order parameter\n'
p126435
sS'cpp_type'
p126436
S'unsigned int'
p126437
sS'default'
p126438
g3
sS'name'
p126439
S'op_index'
p126440
sS'required'
p126441
I01
sS'group_name'
p126442
Nsa(dp126443
S'description'
p126444
S'Number of order parameters\n'
p126445
sS'cpp_type'
p126446
S'unsigned int'
p126447
sS'default'
p126448
g3
sS'name'
p126449
S'op_num'
p126450
sS'required'
p126451
I01
sS'group_name'
p126452
Nsa(dp126453
S'description'
p126454
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p126455
sS'cpp_type'
p126456
S'double'
p126457
sS'default'
p126458
S'0'
p126459
sS'name'
p126460
S'perturbation_percent'
p126461
sS'required'
p126462
I00
sS'group_name'
p126463
Nsa(dp126464
S'description'
p126465
S'The random seed\n'
p126466
sS'cpp_type'
p126467
S'unsigned int'
p126468
sS'default'
p126469
S'12444'
p126470
sS'name'
p126471
S'rand_seed'
p126472
sS'required'
p126473
I00
sS'group_name'
p126474
Nsa(dp126475
S'description'
p126476
g3
sS'cpp_type'
p126477
S'int'
p126478
sS'default'
p126479
S'1'
p126480
sS'name'
p126481
S'typ'
p126482
sS'required'
p126483
I00
sS'group_name'
p126484
Nsa(dp126485
S'description'
p126486
g3
sS'cpp_type'
p126487
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126488
sS'default'
p126489
S'HexPolycrystalIC'
p126490
sS'name'
p126491
S'type'
p126492
sS'required'
p126493
I00
sS'group_name'
p126494
Nsa(dp126495
S'description'
p126496
S'The variable this initial condition is supposed to provide values for.\n'
p126497
sS'cpp_type'
p126498
S'VariableName'
p126499
sS'default'
p126500
g3
sS'name'
p126501
S'variable'
p126502
sS'required'
p126503
I01
sS'group_name'
p126504
Nsa(dp126505
S'description'
p126506
S'Specifies offset of hexagon grid in x-direction\n'
p126507
sS'cpp_type'
p126508
S'double'
p126509
sS'default'
p126510
S'0.5'
p126511
sS'name'
p126512
S'x_offset'
p126513
sS'required'
p126514
I00
sS'group_name'
p126515
NsasS'name'
p126516
S'/Variables/*/InitialCondition/<type>/HexPolycrystalIC'
p126517
sa(dp126518
S'description'
p126519
S'Perturbed square lattice of smooth circles\n'
p126520
sS'subblocks'
p126521
NsS'parameters'
p126522
(lp126523
(dp126524
S'description'
p126525
S'in 3D, whether the objects are spheres or columns\n'
p126526
sS'cpp_type'
p126527
S'bool'
p126528
sS'default'
p126529
S'1'
p126530
sS'name'
p126531
S'3D_spheres'
p126532
sS'required'
p126533
I00
sS'group_name'
p126534
Nsa(dp126535
S'description'
p126536
S'Variation from central lattice position\n'
p126537
sS'cpp_type'
p126538
S'double'
p126539
sS'default'
p126540
g3
sS'name'
p126541
S'Rnd_variation'
p126542
sS'required'
p126543
I00
sS'group_name'
p126544
Nsa(dp126545
S'description'
p126546
S"Don't place any bubbles on the simulation cell boundaries\n"
p126547
sS'cpp_type'
p126548
S'bool'
p126549
sS'default'
p126550
S'1'
p126551
sS'name'
p126552
S'avoid_bounds'
p126553
sS'required'
p126554
I00
sS'group_name'
p126555
Nsa(dp126556
S'description'
p126557
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126558
sS'cpp_type'
p126559
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126560
sS'default'
p126561
g3
sS'name'
p126562
S'block'
p126563
sS'required'
p126564
I00
sS'group_name'
p126565
Nsa(dp126566
S'description'
p126567
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126568
sS'cpp_type'
p126569
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126570
sS'default'
p126571
g3
sS'name'
p126572
S'boundary'
p126573
sS'required'
p126574
I00
sS'group_name'
p126575
Nsa(dp126576
S'description'
p126577
S'Vector containing the number of bubbles along each side\n'
p126578
sS'cpp_type'
p126579
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p126580
sS'default'
p126581
g3
sS'name'
p126582
S'circles_per_side'
p126583
sS'required'
p126584
I01
sS'group_name'
p126585
Nsa(dp126586
S'description'
p126587
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126588
sS'cpp_type'
p126589
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126590
sS'default'
p126591
g3
sS'name'
p126592
S'control_tags'
p126593
sS'required'
p126594
I00
sS'group_name'
p126595
Nsa(dp126596
S'description'
p126597
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p126598
sS'cpp_type'
p126599
S'double'
p126600
sS'default'
p126601
S'0'
p126602
sS'name'
p126603
S'int_width'
p126604
sS'required'
p126605
I00
sS'group_name'
p126606
Nsa(dp126607
S'description'
p126608
S'The variable value inside the circle\n'
p126609
sS'cpp_type'
p126610
S'double'
p126611
sS'default'
p126612
g3
sS'name'
p126613
S'invalue'
p126614
sS'required'
p126615
I01
sS'group_name'
p126616
Nsa(dp126617
S'description'
p126618
S'The variable value outside the circle\n'
p126619
sS'cpp_type'
p126620
S'double'
p126621
sS'default'
p126622
g3
sS'name'
p126623
S'outvalue'
p126624
sS'required'
p126625
I01
sS'group_name'
p126626
Nsa(dp126627
S'description'
p126628
S'Variation from central lattice position\n'
p126629
sS'cpp_type'
p126630
S'double'
p126631
sS'default'
p126632
S'0'
p126633
sS'name'
p126634
S'pos_variation'
p126635
sS'required'
p126636
I00
sS'group_name'
p126637
Nsa(dp126638
S'description'
p126639
S'Mean radius value for the circels\n'
p126640
sS'cpp_type'
p126641
S'double'
p126642
sS'default'
p126643
g3
sS'name'
p126644
S'radius'
p126645
sS'required'
p126646
I01
sS'group_name'
p126647
Nsa(dp126648
S'description'
p126649
S'Plus or minus fraction of random variation in the bubble radius\n'
p126650
sS'cpp_type'
p126651
S'double'
p126652
sS'default'
p126653
S'0'
p126654
sS'name'
p126655
S'radius_variation'
p126656
sS'required'
p126657
I00
sS'group_name'
p126658
Nsa(dp126659
S'name'
p126660
S'radius_variation_type'
p126661
sS'cpp_type'
p126662
S'MooseEnum'
p126663
sS'default'
p126664
S'none'
p126665
sS'description'
p126666
S'Type of distribution that random circle radii will follow\n'
p126667
sS'required'
p126668
I00
sS'options'
p126669
S'uniform normal none'
p126670
sS'group_name'
p126671
Nsa(dp126672
S'description'
p126673
S'random seed\n'
p126674
sS'cpp_type'
p126675
S'unsigned int'
p126676
sS'default'
p126677
S'2000'
p126678
sS'name'
p126679
S'rand_seed'
p126680
sS'required'
p126681
I00
sS'group_name'
p126682
Nsa(dp126683
S'description'
p126684
g3
sS'cpp_type'
p126685
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126686
sS'default'
p126687
S'LatticeSmoothCircleIC'
p126688
sS'name'
p126689
S'type'
p126690
sS'required'
p126691
I00
sS'group_name'
p126692
Nsa(dp126693
S'description'
p126694
S'The variable this initial condition is supposed to provide values for.\n'
p126695
sS'cpp_type'
p126696
S'VariableName'
p126697
sS'default'
p126698
g3
sS'name'
p126699
S'variable'
p126700
sS'required'
p126701
I01
sS'group_name'
p126702
Nsa(dp126703
S'description'
p126704
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p126705
sS'cpp_type'
p126706
S'bool'
p126707
sS'default'
p126708
S'0'
p126709
sS'name'
p126710
S'zero_gradient'
p126711
sS'required'
p126712
I00
sS'group_name'
p126713
NsasS'name'
p126714
S'/Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p126715
sa(dp126716
S'description'
p126717
S'Random distribution of smooth circles with given minimum spacing\n'
p126718
sS'subblocks'
p126719
NsS'parameters'
p126720
(lp126721
(dp126722
S'description'
p126723
S'in 3D, whether the objects are spheres or columns\n'
p126724
sS'cpp_type'
p126725
S'bool'
p126726
sS'default'
p126727
S'1'
p126728
sS'name'
p126729
S'3D_spheres'
p126730
sS'required'
p126731
I00
sS'group_name'
p126732
Nsa(dp126733
S'description'
p126734
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126735
sS'cpp_type'
p126736
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126737
sS'default'
p126738
g3
sS'name'
p126739
S'block'
p126740
sS'required'
p126741
I00
sS'group_name'
p126742
Nsa(dp126743
S'description'
p126744
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126745
sS'cpp_type'
p126746
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126747
sS'default'
p126748
g3
sS'name'
p126749
S'boundary'
p126750
sS'required'
p126751
I00
sS'group_name'
p126752
Nsa(dp126753
S'description'
p126754
S'minimum spacing of bubbles, measured from center to center\n'
p126755
sS'cpp_type'
p126756
S'double'
p126757
sS'default'
p126758
g3
sS'name'
p126759
S'bubspac'
p126760
sS'required'
p126761
I01
sS'group_name'
p126762
Nsa(dp126763
S'description'
p126764
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126765
sS'cpp_type'
p126766
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126767
sS'default'
p126768
g3
sS'name'
p126769
S'control_tags'
p126770
sS'required'
p126771
I00
sS'group_name'
p126772
Nsa(dp126773
S'description'
p126774
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p126775
sS'cpp_type'
p126776
S'double'
p126777
sS'default'
p126778
S'0'
p126779
sS'name'
p126780
S'int_width'
p126781
sS'required'
p126782
I00
sS'group_name'
p126783
Nsa(dp126784
S'description'
p126785
S'The variable value inside the circle\n'
p126786
sS'cpp_type'
p126787
S'double'
p126788
sS'default'
p126789
g3
sS'name'
p126790
S'invalue'
p126791
sS'required'
p126792
I01
sS'group_name'
p126793
Nsa(dp126794
S'description'
p126795
S'The number of bubbles to place\n'
p126796
sS'cpp_type'
p126797
S'unsigned int'
p126798
sS'default'
p126799
g3
sS'name'
p126800
S'numbub'
p126801
sS'required'
p126802
I01
sS'group_name'
p126803
Nsa(dp126804
S'description'
p126805
S'The number of tries\n'
p126806
sS'cpp_type'
p126807
S'unsigned int'
p126808
sS'default'
p126809
S'1000'
p126810
sS'name'
p126811
S'numtries'
p126812
sS'required'
p126813
I00
sS'group_name'
p126814
Nsa(dp126815
S'description'
p126816
S'The variable value outside the circle\n'
p126817
sS'cpp_type'
p126818
S'double'
p126819
sS'default'
p126820
g3
sS'name'
p126821
S'outvalue'
p126822
sS'required'
p126823
I01
sS'group_name'
p126824
Nsa(dp126825
S'description'
p126826
S'Mean radius value for the circels\n'
p126827
sS'cpp_type'
p126828
S'double'
p126829
sS'default'
p126830
g3
sS'name'
p126831
S'radius'
p126832
sS'required'
p126833
I01
sS'group_name'
p126834
Nsa(dp126835
S'description'
p126836
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p126837
sS'cpp_type'
p126838
S'double'
p126839
sS'default'
p126840
S'0'
p126841
sS'name'
p126842
S'radius_variation'
p126843
sS'required'
p126844
I00
sS'group_name'
p126845
Nsa(dp126846
S'name'
p126847
S'radius_variation_type'
p126848
sS'cpp_type'
p126849
S'MooseEnum'
p126850
sS'default'
p126851
S'none'
p126852
sS'description'
p126853
S'Type of distribution that random circle radii will follow\n'
p126854
sS'required'
p126855
I00
sS'options'
p126856
S'uniform normal none'
p126857
sS'group_name'
p126858
Nsa(dp126859
S'description'
p126860
S'Seed value for the random number generator\n'
p126861
sS'cpp_type'
p126862
S'unsigned int'
p126863
sS'default'
p126864
S'12345'
p126865
sS'name'
p126866
S'rand_seed'
p126867
sS'required'
p126868
I00
sS'group_name'
p126869
Nsa(dp126870
S'description'
p126871
g3
sS'cpp_type'
p126872
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p126873
sS'default'
p126874
S'MultiSmoothCircleIC'
p126875
sS'name'
p126876
S'type'
p126877
sS'required'
p126878
I00
sS'group_name'
p126879
Nsa(dp126880
S'description'
p126881
S'The variable this initial condition is supposed to provide values for.\n'
p126882
sS'cpp_type'
p126883
S'VariableName'
p126884
sS'default'
p126885
g3
sS'name'
p126886
S'variable'
p126887
sS'required'
p126888
I01
sS'group_name'
p126889
Nsa(dp126890
S'description'
p126891
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p126892
sS'cpp_type'
p126893
S'bool'
p126894
sS'default'
p126895
S'0'
p126896
sS'name'
p126897
S'zero_gradient'
p126898
sS'required'
p126899
I00
sS'group_name'
p126900
NsasS'name'
p126901
S'/Variables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p126902
sa(dp126903
S'description'
p126904
g3
sS'subblocks'
p126905
NsS'parameters'
p126906
(lp126907
(dp126908
S'description'
p126909
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126910
sS'cpp_type'
p126911
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p126912
sS'default'
p126913
g3
sS'name'
p126914
S'block'
p126915
sS'required'
p126916
I00
sS'group_name'
p126917
Nsa(dp126918
S'description'
p126919
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p126920
sS'cpp_type'
p126921
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p126922
sS'default'
p126923
g3
sS'name'
p126924
S'boundary'
p126925
sS'required'
p126926
I00
sS'group_name'
p126927
Nsa(dp126928
S'description'
p126929
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p126930
sS'cpp_type'
p126931
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p126932
sS'default'
p126933
g3
sS'name'
p126934
S'control_tags'
p126935
sS'required'
p126936
I00
sS'group_name'
p126937
Nsa(dp126938
S'name'
p126939
S'crystal_structure'
p126940
sS'cpp_type'
p126941
S'MooseEnum'
p126942
sS'default'
p126943
g3
sS'description'
p126944
S'The type of crystal structure\n'
p126945
sS'required'
p126946
I00
sS'options'
p126947
S'FCC BCC'
p126948
sS'group_name'
p126949
Nsa(dp126950
S'description'
p126951
S'Value inside sinusoids\n'
p126952
sS'cpp_type'
p126953
S'double'
p126954
sS'default'
p126955
S'1'
p126956
sS'name'
p126957
S'inside'
p126958
sS'required'
p126959
I00
sS'group_name'
p126960
Nsa(dp126961
S'description'
p126962
S'The lattice constant off the crystal structure\n'
p126963
sS'cpp_type'
p126964
S'double'
p126965
sS'default'
p126966
g3
sS'name'
p126967
S'lc'
p126968
sS'required'
p126969
I01
sS'group_name'
p126970
Nsa(dp126971
S'description'
p126972
S'Upper bound of the randomly generated values\n'
p126973
sS'cpp_type'
p126974
S'double'
p126975
sS'default'
p126976
S'1'
p126977
sS'name'
p126978
S'max'
p126979
sS'required'
p126980
I00
sS'group_name'
p126981
Nsa(dp126982
S'description'
p126983
S'Lower bound of the randomly generated values\n'
p126984
sS'cpp_type'
p126985
S'double'
p126986
sS'default'
p126987
S'0'
p126988
sS'name'
p126989
S'min'
p126990
sS'required'
p126991
I00
sS'group_name'
p126992
Nsa(dp126993
S'description'
p126994
S'Value outside sinusoids\n'
p126995
sS'cpp_type'
p126996
S'double'
p126997
sS'default'
p126998
S'0'
p126999
sS'name'
p127000
S'outside'
p127001
sS'required'
p127002
I00
sS'group_name'
p127003
Nsa(dp127004
S'description'
p127005
S'Seed value for the random number generator\n'
p127006
sS'cpp_type'
p127007
S'unsigned int'
p127008
sS'default'
p127009
S'0'
p127010
sS'name'
p127011
S'seed'
p127012
sS'required'
p127013
I00
sS'group_name'
p127014
Nsa(dp127015
S'description'
p127016
g3
sS'cpp_type'
p127017
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127018
sS'default'
p127019
S'PFCFreezingIC'
p127020
sS'name'
p127021
S'type'
p127022
sS'required'
p127023
I00
sS'group_name'
p127024
Nsa(dp127025
S'description'
p127026
S'The variable this initial condition is supposed to provide values for.\n'
p127027
sS'cpp_type'
p127028
S'VariableName'
p127029
sS'default'
p127030
g3
sS'name'
p127031
S'variable'
p127032
sS'required'
p127033
I01
sS'group_name'
p127034
Nsa(dp127035
S'description'
p127036
S'The x coordinate of the lower left-hand corner of the frozen box\n'
p127037
sS'cpp_type'
p127038
S'double'
p127039
sS'default'
p127040
g3
sS'name'
p127041
S'x1'
p127042
sS'required'
p127043
I01
sS'group_name'
p127044
Nsa(dp127045
S'description'
p127046
S'The x coordinate of the upper right-hand corner of the box\n'
p127047
sS'cpp_type'
p127048
S'double'
p127049
sS'default'
p127050
g3
sS'name'
p127051
S'x2'
p127052
sS'required'
p127053
I01
sS'group_name'
p127054
Nsa(dp127055
S'description'
p127056
S'The y coordinate of the lower left-hand corner of the frozen box\n'
p127057
sS'cpp_type'
p127058
S'double'
p127059
sS'default'
p127060
g3
sS'name'
p127061
S'y1'
p127062
sS'required'
p127063
I01
sS'group_name'
p127064
Nsa(dp127065
S'description'
p127066
S'The y coordinate of the upper right-hand corner of the box\n'
p127067
sS'cpp_type'
p127068
S'double'
p127069
sS'default'
p127070
g3
sS'name'
p127071
S'y2'
p127072
sS'required'
p127073
I01
sS'group_name'
p127074
Nsa(dp127075
S'description'
p127076
S'The z coordinate of the lower left-hand corner of the box\n'
p127077
sS'cpp_type'
p127078
S'double'
p127079
sS'default'
p127080
S'0'
p127081
sS'name'
p127082
S'z1'
p127083
sS'required'
p127084
I00
sS'group_name'
p127085
Nsa(dp127086
S'description'
p127087
S'The z coordinate of the upper right-hand corner of the box\n'
p127088
sS'cpp_type'
p127089
S'double'
p127090
sS'default'
p127091
S'0'
p127092
sS'name'
p127093
S'z2'
p127094
sS'required'
p127095
I00
sS'group_name'
p127096
NsasS'name'
p127097
S'/Variables/*/InitialCondition/<type>/PFCFreezingIC'
p127098
sa(dp127099
S'description'
p127100
g3
sS'subblocks'
p127101
NsS'parameters'
p127102
(lp127103
(dp127104
S'description'
p127105
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127106
sS'cpp_type'
p127107
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127108
sS'default'
p127109
g3
sS'name'
p127110
S'block'
p127111
sS'required'
p127112
I00
sS'group_name'
p127113
Nsa(dp127114
S'description'
p127115
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127116
sS'cpp_type'
p127117
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127118
sS'default'
p127119
g3
sS'name'
p127120
S'boundary'
p127121
sS'required'
p127122
I00
sS'group_name'
p127123
Nsa(dp127124
S'description'
p127125
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127126
sS'cpp_type'
p127127
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127128
sS'default'
p127129
g3
sS'name'
p127130
S'control_tags'
p127131
sS'required'
p127132
I00
sS'group_name'
p127133
Nsa(dp127134
S'description'
p127135
S'The index for the current order parameter\n'
p127136
sS'cpp_type'
p127137
S'unsigned int'
p127138
sS'default'
p127139
g3
sS'name'
p127140
S'op_index'
p127141
sS'required'
p127142
I01
sS'group_name'
p127143
Nsa(dp127144
S'description'
p127145
S'Number of order parameters\n'
p127146
sS'cpp_type'
p127147
S'unsigned int'
p127148
sS'default'
p127149
g3
sS'name'
p127150
S'op_num'
p127151
sS'required'
p127152
I01
sS'group_name'
p127153
Nsa(dp127154
S'description'
p127155
S'Type of random grain structure\n'
p127156
sS'cpp_type'
p127157
S'unsigned int'
p127158
sS'default'
p127159
g3
sS'name'
p127160
S'typ'
p127161
sS'required'
p127162
I01
sS'group_name'
p127163
Nsa(dp127164
S'description'
p127165
g3
sS'cpp_type'
p127166
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127167
sS'default'
p127168
S'PolycrystalRandomIC'
p127169
sS'name'
p127170
S'type'
p127171
sS'required'
p127172
I00
sS'group_name'
p127173
Nsa(dp127174
S'description'
p127175
S'The variable this initial condition is supposed to provide values for.\n'
p127176
sS'cpp_type'
p127177
S'VariableName'
p127178
sS'default'
p127179
g3
sS'name'
p127180
S'variable'
p127181
sS'required'
p127182
I01
sS'group_name'
p127183
NsasS'name'
p127184
S'/Variables/*/InitialCondition/<type>/PolycrystalRandomIC'
p127185
sa(dp127186
S'description'
p127187
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p127188
sS'subblocks'
p127189
NsS'parameters'
p127190
(lp127191
(dp127192
S'description'
p127193
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127194
sS'cpp_type'
p127195
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127196
sS'default'
p127197
g3
sS'name'
p127198
S'block'
p127199
sS'required'
p127200
I00
sS'group_name'
p127201
Nsa(dp127202
S'description'
p127203
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127204
sS'cpp_type'
p127205
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127206
sS'default'
p127207
g3
sS'name'
p127208
S'boundary'
p127209
sS'required'
p127210
I00
sS'group_name'
p127211
Nsa(dp127212
S'description'
p127213
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p127214
sS'cpp_type'
p127215
S'bool'
p127216
sS'default'
p127217
S'0'
p127218
sS'name'
p127219
S'cody_test'
p127220
sS'required'
p127221
I00
sS'group_name'
p127222
Nsa(dp127223
S'description'
p127224
S'3D microstructure will be columnar in the z-direction?\n'
p127225
sS'cpp_type'
p127226
S'bool'
p127227
sS'default'
p127228
S'0'
p127229
sS'name'
p127230
S'columnar_3D'
p127231
sS'required'
p127232
I00
sS'group_name'
p127233
Nsa(dp127234
S'description'
p127235
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127236
sS'cpp_type'
p127237
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127238
sS'default'
p127239
g3
sS'name'
p127240
S'control_tags'
p127241
sS'required'
p127242
I00
sS'group_name'
p127243
Nsa(dp127244
S'description'
p127245
S'Number of grains being represented by the order parameters\n'
p127246
sS'cpp_type'
p127247
S'unsigned int'
p127248
sS'default'
p127249
g3
sS'name'
p127250
S'grain_num'
p127251
sS'required'
p127252
I01
sS'group_name'
p127253
Nsa(dp127254
S'description'
p127255
S'The index for the current order parameter\n'
p127256
sS'cpp_type'
p127257
S'unsigned int'
p127258
sS'default'
p127259
g3
sS'name'
p127260
S'op_index'
p127261
sS'required'
p127262
I01
sS'group_name'
p127263
Nsa(dp127264
S'description'
p127265
S'Number of order parameters\n'
p127266
sS'cpp_type'
p127267
S'unsigned int'
p127268
sS'default'
p127269
g3
sS'name'
p127270
S'op_num'
p127271
sS'required'
p127272
I01
sS'group_name'
p127273
Nsa(dp127274
S'description'
p127275
S'The random seed\n'
p127276
sS'cpp_type'
p127277
S'unsigned int'
p127278
sS'default'
p127279
S'12444'
p127280
sS'name'
p127281
S'rand_seed'
p127282
sS'required'
p127283
I00
sS'group_name'
p127284
Nsa(dp127285
S'description'
p127286
g3
sS'cpp_type'
p127287
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127288
sS'default'
p127289
S'PolycrystalReducedIC'
p127290
sS'name'
p127291
S'type'
p127292
sS'required'
p127293
I00
sS'group_name'
p127294
Nsa(dp127295
S'description'
p127296
S'The variable this initial condition is supposed to provide values for.\n'
p127297
sS'cpp_type'
p127298
S'VariableName'
p127299
sS'default'
p127300
g3
sS'name'
p127301
S'variable'
p127302
sS'required'
p127303
I01
sS'group_name'
p127304
NsasS'name'
p127305
S'/Variables/*/InitialCondition/<type>/PolycrystalReducedIC'
p127306
sa(dp127307
S'description'
p127308
S'Linear ramp along the x-axis with given values at the left and right extreme points.\n'
p127309
sS'subblocks'
p127310
NsS'parameters'
p127311
(lp127312
(dp127313
S'description'
p127314
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127315
sS'cpp_type'
p127316
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127317
sS'default'
p127318
g3
sS'name'
p127319
S'block'
p127320
sS'required'
p127321
I00
sS'group_name'
p127322
Nsa(dp127323
S'description'
p127324
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127325
sS'cpp_type'
p127326
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127327
sS'default'
p127328
g3
sS'name'
p127329
S'boundary'
p127330
sS'required'
p127331
I00
sS'group_name'
p127332
Nsa(dp127333
S'description'
p127334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127335
sS'cpp_type'
p127336
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127337
sS'default'
p127338
g3
sS'name'
p127339
S'control_tags'
p127340
sS'required'
p127341
I00
sS'group_name'
p127342
Nsa(dp127343
S'description'
p127344
g3
sS'cpp_type'
p127345
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127346
sS'default'
p127347
S'RampIC'
p127348
sS'name'
p127349
S'type'
p127350
sS'required'
p127351
I00
sS'group_name'
p127352
Nsa(dp127353
S'description'
p127354
S'The value on left (xmin) boundary.\n'
p127355
sS'cpp_type'
p127356
S'double'
p127357
sS'default'
p127358
g3
sS'name'
p127359
S'value_left'
p127360
sS'required'
p127361
I01
sS'group_name'
p127362
Nsa(dp127363
S'description'
p127364
S'The value on right (xmax) boundary.\n'
p127365
sS'cpp_type'
p127366
S'double'
p127367
sS'default'
p127368
g3
sS'name'
p127369
S'value_right'
p127370
sS'required'
p127371
I01
sS'group_name'
p127372
Nsa(dp127373
S'description'
p127374
S'The variable this initial condition is supposed to provide values for.\n'
p127375
sS'cpp_type'
p127376
S'VariableName'
p127377
sS'default'
p127378
g3
sS'name'
p127379
S'variable'
p127380
sS'required'
p127381
I01
sS'group_name'
p127382
NsasS'name'
p127383
S'/Variables/*/InitialCondition/<type>/RampIC'
p127384
sa(dp127385
S'description'
p127386
g3
sS'subblocks'
p127387
NsS'parameters'
p127388
(lp127389
(dp127390
S'description'
p127391
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127392
sS'cpp_type'
p127393
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127394
sS'default'
p127395
g3
sS'name'
p127396
S'block'
p127397
sS'required'
p127398
I00
sS'group_name'
p127399
Nsa(dp127400
S'description'
p127401
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127402
sS'cpp_type'
p127403
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127404
sS'default'
p127405
g3
sS'name'
p127406
S'boundary'
p127407
sS'required'
p127408
I00
sS'group_name'
p127409
Nsa(dp127410
S'description'
p127411
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127412
sS'cpp_type'
p127413
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127414
sS'default'
p127415
g3
sS'name'
p127416
S'control_tags'
p127417
sS'required'
p127418
I00
sS'group_name'
p127419
Nsa(dp127420
S'description'
p127421
S'Upper bound of the randomly generated values\n'
p127422
sS'cpp_type'
p127423
S'double'
p127424
sS'default'
p127425
S'1'
p127426
sS'name'
p127427
S'max'
p127428
sS'required'
p127429
I00
sS'group_name'
p127430
Nsa(dp127431
S'description'
p127432
S'Lower bound of the randomly generated values\n'
p127433
sS'cpp_type'
p127434
S'double'
p127435
sS'default'
p127436
S'0'
p127437
sS'name'
p127438
S'min'
p127439
sS'required'
p127440
I00
sS'group_name'
p127441
Nsa(dp127442
S'description'
p127443
S'Seed value for the random number generator\n'
p127444
sS'cpp_type'
p127445
S'unsigned int'
p127446
sS'default'
p127447
S'0'
p127448
sS'name'
p127449
S'seed'
p127450
sS'required'
p127451
I00
sS'group_name'
p127452
Nsa(dp127453
S'description'
p127454
g3
sS'cpp_type'
p127455
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127456
sS'default'
p127457
S'RandomIC'
p127458
sS'name'
p127459
S'type'
p127460
sS'required'
p127461
I00
sS'group_name'
p127462
Nsa(dp127463
S'description'
p127464
S'The variable this initial condition is supposed to provide values for.\n'
p127465
sS'cpp_type'
p127466
S'VariableName'
p127467
sS'default'
p127468
g3
sS'name'
p127469
S'variable'
p127470
sS'required'
p127471
I01
sS'group_name'
p127472
NsasS'name'
p127473
S'/Variables/*/InitialCondition/<type>/RandomIC'
p127474
sa(dp127475
S'description'
p127476
g3
sS'subblocks'
p127477
NsS'parameters'
p127478
(lp127479
(dp127480
S'description'
p127481
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127482
sS'cpp_type'
p127483
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127484
sS'default'
p127485
g3
sS'name'
p127486
S'block'
p127487
sS'required'
p127488
I00
sS'group_name'
p127489
Nsa(dp127490
S'description'
p127491
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127492
sS'cpp_type'
p127493
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127494
sS'default'
p127495
g3
sS'name'
p127496
S'boundary'
p127497
sS'required'
p127498
I00
sS'group_name'
p127499
Nsa(dp127500
S'description'
p127501
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127502
sS'cpp_type'
p127503
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127504
sS'default'
p127505
g3
sS'name'
p127506
S'control_tags'
p127507
sS'required'
p127508
I00
sS'group_name'
p127509
Nsa(dp127510
S'description'
p127511
S'The EBSDReader object holding the EBSD data\n'
p127512
sS'cpp_type'
p127513
S'UserObjectName'
p127514
sS'default'
p127515
g3
sS'name'
p127516
S'ebsd_reader'
p127517
sS'required'
p127518
I01
sS'group_name'
p127519
Nsa(dp127520
S'description'
p127521
S'EBSD phase number this variable is to represent\n'
p127522
sS'cpp_type'
p127523
S'unsigned int'
p127524
sS'default'
p127525
g3
sS'name'
p127526
S'phase'
p127527
sS'required'
p127528
I01
sS'group_name'
p127529
Nsa(dp127530
S'description'
p127531
g3
sS'cpp_type'
p127532
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127533
sS'default'
p127534
S'ReconPhaseVarIC'
p127535
sS'name'
p127536
S'type'
p127537
sS'required'
p127538
I00
sS'group_name'
p127539
Nsa(dp127540
S'description'
p127541
S'The variable this initial condition is supposed to provide values for.\n'
p127542
sS'cpp_type'
p127543
S'VariableName'
p127544
sS'default'
p127545
g3
sS'name'
p127546
S'variable'
p127547
sS'required'
p127548
I01
sS'group_name'
p127549
NsasS'name'
p127550
S'/Variables/*/InitialCondition/<type>/ReconPhaseVarIC'
p127551
sa(dp127552
S'description'
p127553
g3
sS'subblocks'
p127554
NsS'parameters'
p127555
(lp127556
(dp127557
S'description'
p127558
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127559
sS'cpp_type'
p127560
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127561
sS'default'
p127562
g3
sS'name'
p127563
S'block'
p127564
sS'required'
p127565
I00
sS'group_name'
p127566
Nsa(dp127567
S'description'
p127568
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127569
sS'cpp_type'
p127570
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127571
sS'default'
p127572
g3
sS'name'
p127573
S'boundary'
p127574
sS'required'
p127575
I00
sS'group_name'
p127576
Nsa(dp127577
S'description'
p127578
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127579
sS'cpp_type'
p127580
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127581
sS'default'
p127582
g3
sS'name'
p127583
S'control_tags'
p127584
sS'required'
p127585
I00
sS'group_name'
p127586
Nsa(dp127587
S'description'
p127588
S'The EBSDReader GeneralUserObject\n'
p127589
sS'cpp_type'
p127590
S'UserObjectName'
p127591
sS'default'
p127592
g3
sS'name'
p127593
S'ebsd_reader'
p127594
sS'required'
p127595
I01
sS'group_name'
p127596
Nsa(dp127597
S'description'
p127598
S'The index for the current order parameter\n'
p127599
sS'cpp_type'
p127600
S'unsigned int'
p127601
sS'default'
p127602
g3
sS'name'
p127603
S'op_index'
p127604
sS'required'
p127605
I01
sS'group_name'
p127606
Nsa(dp127607
S'description'
p127608
S'Specifies the number of order parameters to create\n'
p127609
sS'cpp_type'
p127610
S'unsigned int'
p127611
sS'default'
p127612
g3
sS'name'
p127613
S'op_num'
p127614
sS'required'
p127615
I01
sS'group_name'
p127616
Nsa(dp127617
S'description'
p127618
S'EBSD phase number to be assigned to this grain\n'
p127619
sS'cpp_type'
p127620
S'unsigned int'
p127621
sS'default'
p127622
g3
sS'name'
p127623
S'phase'
p127624
sS'required'
p127625
I00
sS'group_name'
p127626
Nsa(dp127627
S'description'
p127628
g3
sS'cpp_type'
p127629
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127630
sS'default'
p127631
S'ReconVarIC'
p127632
sS'name'
p127633
S'type'
p127634
sS'required'
p127635
I00
sS'group_name'
p127636
Nsa(dp127637
S'description'
p127638
S'The variable this initial condition is supposed to provide values for.\n'
p127639
sS'cpp_type'
p127640
S'VariableName'
p127641
sS'default'
p127642
g3
sS'name'
p127643
S'variable'
p127644
sS'required'
p127645
I01
sS'group_name'
p127646
NsasS'name'
p127647
S'/Variables/*/InitialCondition/<type>/ReconVarIC'
p127648
sa(dp127649
S'description'
p127650
S'Random noise with different min/max inside/outside of a bounding box\n'
p127651
sS'subblocks'
p127652
NsS'parameters'
p127653
(lp127654
(dp127655
S'description'
p127656
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127657
sS'cpp_type'
p127658
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127659
sS'default'
p127660
g3
sS'name'
p127661
S'block'
p127662
sS'required'
p127663
I00
sS'group_name'
p127664
Nsa(dp127665
S'description'
p127666
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127667
sS'cpp_type'
p127668
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127669
sS'default'
p127670
g3
sS'name'
p127671
S'boundary'
p127672
sS'required'
p127673
I00
sS'group_name'
p127674
Nsa(dp127675
S'description'
p127676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127677
sS'cpp_type'
p127678
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127679
sS'default'
p127680
g3
sS'name'
p127681
S'control_tags'
p127682
sS'required'
p127683
I00
sS'group_name'
p127684
Nsa(dp127685
S'description'
p127686
S'The min value of the variable invalue the box\n'
p127687
sS'cpp_type'
p127688
S'double'
p127689
sS'default'
p127690
S'0'
p127691
sS'name'
p127692
S'mn_invalue'
p127693
sS'required'
p127694
I00
sS'group_name'
p127695
Nsa(dp127696
S'description'
p127697
S'The min value of the variable outvalue the box\n'
p127698
sS'cpp_type'
p127699
S'double'
p127700
sS'default'
p127701
S'0'
p127702
sS'name'
p127703
S'mn_outvalue'
p127704
sS'required'
p127705
I00
sS'group_name'
p127706
Nsa(dp127707
S'description'
p127708
S'The max value of the variable invalue the box\n'
p127709
sS'cpp_type'
p127710
S'double'
p127711
sS'default'
p127712
g3
sS'name'
p127713
S'mx_invalue'
p127714
sS'required'
p127715
I01
sS'group_name'
p127716
Nsa(dp127717
S'description'
p127718
S'The max value of the variable outvalue the box\n'
p127719
sS'cpp_type'
p127720
S'double'
p127721
sS'default'
p127722
g3
sS'name'
p127723
S'mx_outvalue'
p127724
sS'required'
p127725
I01
sS'group_name'
p127726
Nsa(dp127727
S'description'
p127728
g3
sS'cpp_type'
p127729
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127730
sS'default'
p127731
S'RndBoundingBoxIC'
p127732
sS'name'
p127733
S'type'
p127734
sS'required'
p127735
I00
sS'group_name'
p127736
Nsa(dp127737
S'description'
p127738
S'The variable this initial condition is supposed to provide values for.\n'
p127739
sS'cpp_type'
p127740
S'VariableName'
p127741
sS'default'
p127742
g3
sS'name'
p127743
S'variable'
p127744
sS'required'
p127745
I01
sS'group_name'
p127746
Nsa(dp127747
S'description'
p127748
S'The x coordinate of the lower left-hand corner of the box\n'
p127749
sS'cpp_type'
p127750
S'double'
p127751
sS'default'
p127752
g3
sS'name'
p127753
S'x1'
p127754
sS'required'
p127755
I01
sS'group_name'
p127756
Nsa(dp127757
S'description'
p127758
S'The x coordinate of the upper right-hand corner of the box\n'
p127759
sS'cpp_type'
p127760
S'double'
p127761
sS'default'
p127762
g3
sS'name'
p127763
S'x2'
p127764
sS'required'
p127765
I01
sS'group_name'
p127766
Nsa(dp127767
S'description'
p127768
S'The y coordinate of the lower left-hand corner of the box\n'
p127769
sS'cpp_type'
p127770
S'double'
p127771
sS'default'
p127772
g3
sS'name'
p127773
S'y1'
p127774
sS'required'
p127775
I01
sS'group_name'
p127776
Nsa(dp127777
S'description'
p127778
S'The y coordinate of the upper right-hand corner of the box\n'
p127779
sS'cpp_type'
p127780
S'double'
p127781
sS'default'
p127782
g3
sS'name'
p127783
S'y2'
p127784
sS'required'
p127785
I01
sS'group_name'
p127786
Nsa(dp127787
S'description'
p127788
S'The z coordinate of the lower left-hand corner of the box\n'
p127789
sS'cpp_type'
p127790
S'double'
p127791
sS'default'
p127792
S'0'
p127793
sS'name'
p127794
S'z1'
p127795
sS'required'
p127796
I00
sS'group_name'
p127797
Nsa(dp127798
S'description'
p127799
S'The z coordinate of the upper right-hand corner of the box\n'
p127800
sS'cpp_type'
p127801
S'double'
p127802
sS'default'
p127803
S'0'
p127804
sS'name'
p127805
S'z2'
p127806
sS'required'
p127807
I00
sS'group_name'
p127808
NsasS'name'
p127809
S'/Variables/*/InitialCondition/<type>/RndBoundingBoxIC'
p127810
sa(dp127811
S'description'
p127812
S'Random noise with different min/max inside/outside of a smooth circle\n'
p127813
sS'subblocks'
p127814
NsS'parameters'
p127815
(lp127816
(dp127817
S'description'
p127818
S'in 3D, whether the objects are spheres or columns\n'
p127819
sS'cpp_type'
p127820
S'bool'
p127821
sS'default'
p127822
S'1'
p127823
sS'name'
p127824
S'3D_spheres'
p127825
sS'required'
p127826
I00
sS'group_name'
p127827
Nsa(dp127828
S'description'
p127829
S'The list of block ids (SubdomainID) that this object will be applied\n'
p127830
sS'cpp_type'
p127831
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p127832
sS'default'
p127833
g3
sS'name'
p127834
S'block'
p127835
sS'required'
p127836
I00
sS'group_name'
p127837
Nsa(dp127838
S'description'
p127839
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p127840
sS'cpp_type'
p127841
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p127842
sS'default'
p127843
g3
sS'name'
p127844
S'boundary'
p127845
sS'required'
p127846
I00
sS'group_name'
p127847
Nsa(dp127848
S'description'
p127849
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p127850
sS'cpp_type'
p127851
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p127852
sS'default'
p127853
g3
sS'name'
p127854
S'control_tags'
p127855
sS'required'
p127856
I00
sS'group_name'
p127857
Nsa(dp127858
S'description'
p127859
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p127860
sS'cpp_type'
p127861
S'double'
p127862
sS'default'
p127863
S'0'
p127864
sS'name'
p127865
S'int_width'
p127866
sS'required'
p127867
I00
sS'group_name'
p127868
Nsa(dp127869
S'description'
p127870
S'The variable value inside the circle\n'
p127871
sS'cpp_type'
p127872
S'double'
p127873
sS'default'
p127874
g3
sS'name'
p127875
S'invalue'
p127876
sS'required'
p127877
I01
sS'group_name'
p127878
Nsa(dp127879
S'description'
p127880
S'The variable value outside the circle\n'
p127881
sS'cpp_type'
p127882
S'double'
p127883
sS'default'
p127884
g3
sS'name'
p127885
S'outvalue'
p127886
sS'required'
p127887
I01
sS'group_name'
p127888
Nsa(dp127889
S'description'
p127890
S'The radius of a circle\n'
p127891
sS'cpp_type'
p127892
S'double'
p127893
sS'default'
p127894
g3
sS'name'
p127895
S'radius'
p127896
sS'required'
p127897
I01
sS'group_name'
p127898
Nsa(dp127899
S'description'
p127900
S'Seed value for the random number generator\n'
p127901
sS'cpp_type'
p127902
S'unsigned int'
p127903
sS'default'
p127904
S'12345'
p127905
sS'name'
p127906
S'rand_seed'
p127907
sS'required'
p127908
I00
sS'group_name'
p127909
Nsa(dp127910
S'description'
p127911
g3
sS'cpp_type'
p127912
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p127913
sS'default'
p127914
S'RndSmoothCircleIC'
p127915
sS'name'
p127916
S'type'
p127917
sS'required'
p127918
I00
sS'group_name'
p127919
Nsa(dp127920
S'description'
p127921
S'The variable this initial condition is supposed to provide values for.\n'
p127922
sS'cpp_type'
p127923
S'VariableName'
p127924
sS'default'
p127925
g3
sS'name'
p127926
S'variable'
p127927
sS'required'
p127928
I01
sS'group_name'
p127929
Nsa(dp127930
S'description'
p127931
S'Plus or minus this amount on the invalue\n'
p127932
sS'cpp_type'
p127933
S'double'
p127934
sS'default'
p127935
g3
sS'name'
p127936
S'variation_invalue'
p127937
sS'required'
p127938
I01
sS'group_name'
p127939
Nsa(dp127940
S'description'
p127941
S'Plus or minus this amount on the outvalue\n'
p127942
sS'cpp_type'
p127943
S'double'
p127944
sS'default'
p127945
g3
sS'name'
p127946
S'variation_outvalue'
p127947
sS'required'
p127948
I01
sS'group_name'
p127949
Nsa(dp127950
S'description'
p127951
S'The x coordinate of the circle center\n'
p127952
sS'cpp_type'
p127953
S'double'
p127954
sS'default'
p127955
g3
sS'name'
p127956
S'x1'
p127957
sS'required'
p127958
I01
sS'group_name'
p127959
Nsa(dp127960
S'description'
p127961
S'The y coordinate of the circle center\n'
p127962
sS'cpp_type'
p127963
S'double'
p127964
sS'default'
p127965
g3
sS'name'
p127966
S'y1'
p127967
sS'required'
p127968
I01
sS'group_name'
p127969
Nsa(dp127970
S'description'
p127971
S'The z coordinate of the circle center\n'
p127972
sS'cpp_type'
p127973
S'double'
p127974
sS'default'
p127975
S'0'
p127976
sS'name'
p127977
S'z1'
p127978
sS'required'
p127979
I00
sS'group_name'
p127980
Nsa(dp127981
S'description'
p127982
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p127983
sS'cpp_type'
p127984
S'bool'
p127985
sS'default'
p127986
S'0'
p127987
sS'name'
p127988
S'zero_gradient'
p127989
sS'required'
p127990
I00
sS'group_name'
p127991
NsasS'name'
p127992
S'/Variables/*/InitialCondition/<type>/RndSmoothCircleIC'
p127993
sa(dp127994
S'description'
p127995
g3
sS'subblocks'
p127996
NsS'parameters'
p127997
(lp127998
(dp127999
S'description'
p128000
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128001
sS'cpp_type'
p128002
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128003
sS'default'
p128004
g3
sS'name'
p128005
S'control_tags'
p128006
sS'required'
p128007
I00
sS'group_name'
p128008
Nsa(dp128009
S'description'
p128010
g3
sS'cpp_type'
p128011
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128012
sS'default'
p128013
S'ScalarComponentIC'
p128014
sS'name'
p128015
S'type'
p128016
sS'required'
p128017
I00
sS'group_name'
p128018
Nsa(dp128019
S'description'
p128020
S'Initial values to initialize the scalar variable.\n'
p128021
sS'cpp_type'
p128022
S'std::vector<double, std::allocator<double> >'
p128023
sS'default'
p128024
g3
sS'name'
p128025
S'values'
p128026
sS'required'
p128027
I01
sS'group_name'
p128028
Nsa(dp128029
S'description'
p128030
S'The variable this initial condition is supposed to provide values for.\n'
p128031
sS'cpp_type'
p128032
S'VariableName'
p128033
sS'default'
p128034
g3
sS'name'
p128035
S'variable'
p128036
sS'required'
p128037
I00
sS'group_name'
p128038
NsasS'name'
p128039
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p128040
sa(dp128041
S'description'
p128042
g3
sS'subblocks'
p128043
NsS'parameters'
p128044
(lp128045
(dp128046
S'description'
p128047
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128048
sS'cpp_type'
p128049
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128050
sS'default'
p128051
g3
sS'name'
p128052
S'control_tags'
p128053
sS'required'
p128054
I00
sS'group_name'
p128055
Nsa(dp128056
S'description'
p128057
g3
sS'cpp_type'
p128058
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128059
sS'default'
p128060
S'ScalarConstantIC'
p128061
sS'name'
p128062
S'type'
p128063
sS'required'
p128064
I00
sS'group_name'
p128065
Nsa(dp128066
S'description'
p128067
g3
sS'cpp_type'
p128068
S'double'
p128069
sS'default'
p128070
S'0'
p128071
sS'name'
p128072
S'value'
p128073
sS'required'
p128074
I00
sS'group_name'
p128075
Nsa(dp128076
S'description'
p128077
S'The variable this initial condition is supposed to provide values for.\n'
p128078
sS'cpp_type'
p128079
S'VariableName'
p128080
sS'default'
p128081
g3
sS'name'
p128082
S'variable'
p128083
sS'required'
p128084
I00
sS'group_name'
p128085
NsasS'name'
p128086
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p128087
sa(dp128088
S'description'
p128089
S'Circle with a smooth interface\n'
p128090
sS'subblocks'
p128091
NsS'parameters'
p128092
(lp128093
(dp128094
S'description'
p128095
S'in 3D, whether the objects are spheres or columns\n'
p128096
sS'cpp_type'
p128097
S'bool'
p128098
sS'default'
p128099
S'1'
p128100
sS'name'
p128101
S'3D_spheres'
p128102
sS'required'
p128103
I00
sS'group_name'
p128104
Nsa(dp128105
S'description'
p128106
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128107
sS'cpp_type'
p128108
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128109
sS'default'
p128110
g3
sS'name'
p128111
S'block'
p128112
sS'required'
p128113
I00
sS'group_name'
p128114
Nsa(dp128115
S'description'
p128116
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128117
sS'cpp_type'
p128118
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128119
sS'default'
p128120
g3
sS'name'
p128121
S'boundary'
p128122
sS'required'
p128123
I00
sS'group_name'
p128124
Nsa(dp128125
S'description'
p128126
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128127
sS'cpp_type'
p128128
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128129
sS'default'
p128130
g3
sS'name'
p128131
S'control_tags'
p128132
sS'required'
p128133
I00
sS'group_name'
p128134
Nsa(dp128135
S'description'
p128136
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p128137
sS'cpp_type'
p128138
S'double'
p128139
sS'default'
p128140
S'0'
p128141
sS'name'
p128142
S'int_width'
p128143
sS'required'
p128144
I00
sS'group_name'
p128145
Nsa(dp128146
S'description'
p128147
S'The variable value inside the circle\n'
p128148
sS'cpp_type'
p128149
S'double'
p128150
sS'default'
p128151
g3
sS'name'
p128152
S'invalue'
p128153
sS'required'
p128154
I01
sS'group_name'
p128155
Nsa(dp128156
S'description'
p128157
S'The variable value outside the circle\n'
p128158
sS'cpp_type'
p128159
S'double'
p128160
sS'default'
p128161
g3
sS'name'
p128162
S'outvalue'
p128163
sS'required'
p128164
I01
sS'group_name'
p128165
Nsa(dp128166
S'description'
p128167
S'The radius of a circle\n'
p128168
sS'cpp_type'
p128169
S'double'
p128170
sS'default'
p128171
g3
sS'name'
p128172
S'radius'
p128173
sS'required'
p128174
I01
sS'group_name'
p128175
Nsa(dp128176
S'description'
p128177
S'Seed value for the random number generator\n'
p128178
sS'cpp_type'
p128179
S'unsigned int'
p128180
sS'default'
p128181
S'12345'
p128182
sS'name'
p128183
S'rand_seed'
p128184
sS'required'
p128185
I00
sS'group_name'
p128186
Nsa(dp128187
S'description'
p128188
g3
sS'cpp_type'
p128189
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128190
sS'default'
p128191
S'SmoothCircleIC'
p128192
sS'name'
p128193
S'type'
p128194
sS'required'
p128195
I00
sS'group_name'
p128196
Nsa(dp128197
S'description'
p128198
S'The variable this initial condition is supposed to provide values for.\n'
p128199
sS'cpp_type'
p128200
S'VariableName'
p128201
sS'default'
p128202
g3
sS'name'
p128203
S'variable'
p128204
sS'required'
p128205
I01
sS'group_name'
p128206
Nsa(dp128207
S'description'
p128208
S'The x coordinate of the circle center\n'
p128209
sS'cpp_type'
p128210
S'double'
p128211
sS'default'
p128212
g3
sS'name'
p128213
S'x1'
p128214
sS'required'
p128215
I01
sS'group_name'
p128216
Nsa(dp128217
S'description'
p128218
S'The y coordinate of the circle center\n'
p128219
sS'cpp_type'
p128220
S'double'
p128221
sS'default'
p128222
g3
sS'name'
p128223
S'y1'
p128224
sS'required'
p128225
I01
sS'group_name'
p128226
Nsa(dp128227
S'description'
p128228
S'The z coordinate of the circle center\n'
p128229
sS'cpp_type'
p128230
S'double'
p128231
sS'default'
p128232
S'0'
p128233
sS'name'
p128234
S'z1'
p128235
sS'required'
p128236
I00
sS'group_name'
p128237
Nsa(dp128238
S'description'
p128239
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p128240
sS'cpp_type'
p128241
S'bool'
p128242
sS'default'
p128243
S'0'
p128244
sS'name'
p128245
S'zero_gradient'
p128246
sS'required'
p128247
I00
sS'group_name'
p128248
NsasS'name'
p128249
S'/Variables/*/InitialCondition/<type>/SmoothCircleIC'
p128250
sa(dp128251
S'description'
p128252
S'Multiple smooth circles with manually specified radii and center points\n'
p128253
sS'subblocks'
p128254
NsS'parameters'
p128255
(lp128256
(dp128257
S'description'
p128258
S'in 3D, whether the objects are spheres or columns\n'
p128259
sS'cpp_type'
p128260
S'bool'
p128261
sS'default'
p128262
S'1'
p128263
sS'name'
p128264
S'3D_spheres'
p128265
sS'required'
p128266
I00
sS'group_name'
p128267
Nsa(dp128268
S'description'
p128269
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128270
sS'cpp_type'
p128271
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128272
sS'default'
p128273
g3
sS'name'
p128274
S'block'
p128275
sS'required'
p128276
I00
sS'group_name'
p128277
Nsa(dp128278
S'description'
p128279
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128280
sS'cpp_type'
p128281
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128282
sS'default'
p128283
g3
sS'name'
p128284
S'boundary'
p128285
sS'required'
p128286
I00
sS'group_name'
p128287
Nsa(dp128288
S'description'
p128289
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128290
sS'cpp_type'
p128291
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128292
sS'default'
p128293
g3
sS'name'
p128294
S'control_tags'
p128295
sS'required'
p128296
I00
sS'group_name'
p128297
Nsa(dp128298
S'description'
p128299
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p128300
sS'cpp_type'
p128301
S'double'
p128302
sS'default'
p128303
S'0'
p128304
sS'name'
p128305
S'int_width'
p128306
sS'required'
p128307
I00
sS'group_name'
p128308
Nsa(dp128309
S'description'
p128310
S'The variable value inside the circle\n'
p128311
sS'cpp_type'
p128312
S'double'
p128313
sS'default'
p128314
g3
sS'name'
p128315
S'invalue'
p128316
sS'required'
p128317
I01
sS'group_name'
p128318
Nsa(dp128319
S'description'
p128320
S'The variable value outside the circle\n'
p128321
sS'cpp_type'
p128322
S'double'
p128323
sS'default'
p128324
g3
sS'name'
p128325
S'outvalue'
p128326
sS'required'
p128327
I01
sS'group_name'
p128328
Nsa(dp128329
S'description'
p128330
S'The radius for each circle\n'
p128331
sS'cpp_type'
p128332
S'std::vector<double, std::allocator<double> >'
p128333
sS'default'
p128334
g3
sS'name'
p128335
S'radii'
p128336
sS'required'
p128337
I01
sS'group_name'
p128338
Nsa(dp128339
S'description'
p128340
S'Seed value for the random number generator\n'
p128341
sS'cpp_type'
p128342
S'unsigned int'
p128343
sS'default'
p128344
S'12345'
p128345
sS'name'
p128346
S'rand_seed'
p128347
sS'required'
p128348
I00
sS'group_name'
p128349
Nsa(dp128350
S'description'
p128351
g3
sS'cpp_type'
p128352
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128353
sS'default'
p128354
S'SpecifiedSmoothCircleIC'
p128355
sS'name'
p128356
S'type'
p128357
sS'required'
p128358
I00
sS'group_name'
p128359
Nsa(dp128360
S'description'
p128361
S'The variable this initial condition is supposed to provide values for.\n'
p128362
sS'cpp_type'
p128363
S'VariableName'
p128364
sS'default'
p128365
g3
sS'name'
p128366
S'variable'
p128367
sS'required'
p128368
I01
sS'group_name'
p128369
Nsa(dp128370
S'description'
p128371
S'The x-coordinate for each circle center\n'
p128372
sS'cpp_type'
p128373
S'std::vector<double, std::allocator<double> >'
p128374
sS'default'
p128375
g3
sS'name'
p128376
S'x_positions'
p128377
sS'required'
p128378
I01
sS'group_name'
p128379
Nsa(dp128380
S'description'
p128381
S'The y-coordinate for each circle center\n'
p128382
sS'cpp_type'
p128383
S'std::vector<double, std::allocator<double> >'
p128384
sS'default'
p128385
g3
sS'name'
p128386
S'y_positions'
p128387
sS'required'
p128388
I01
sS'group_name'
p128389
Nsa(dp128390
S'description'
p128391
S'The z-coordinate for each circle center\n'
p128392
sS'cpp_type'
p128393
S'std::vector<double, std::allocator<double> >'
p128394
sS'default'
p128395
g3
sS'name'
p128396
S'z_positions'
p128397
sS'required'
p128398
I01
sS'group_name'
p128399
Nsa(dp128400
S'description'
p128401
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p128402
sS'cpp_type'
p128403
S'bool'
p128404
sS'default'
p128405
S'0'
p128406
sS'name'
p128407
S'zero_gradient'
p128408
sS'required'
p128409
I00
sS'group_name'
p128410
NsasS'name'
p128411
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p128412
sa(dp128413
S'description'
p128414
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p128415
sS'subblocks'
p128416
NsS'parameters'
p128417
(lp128418
(dp128419
S'description'
p128420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128421
sS'cpp_type'
p128422
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128423
sS'default'
p128424
g3
sS'name'
p128425
S'block'
p128426
sS'required'
p128427
I00
sS'group_name'
p128428
Nsa(dp128429
S'description'
p128430
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128431
sS'cpp_type'
p128432
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128433
sS'default'
p128434
g3
sS'name'
p128435
S'boundary'
p128436
sS'required'
p128437
I00
sS'group_name'
p128438
Nsa(dp128439
S'description'
p128440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128441
sS'cpp_type'
p128442
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128443
sS'default'
p128444
g3
sS'name'
p128445
S'control_tags'
p128446
sS'required'
p128447
I00
sS'group_name'
p128448
Nsa(dp128449
S'description'
p128450
S'The z coordinate of the circle center\n'
p128451
sS'cpp_type'
p128452
S'double'
p128453
sS'default'
p128454
g3
sS'name'
p128455
S'height'
p128456
sS'required'
p128457
I01
sS'group_name'
p128458
Nsa(dp128459
S'description'
p128460
S'The variable value inside the circle\n'
p128461
sS'cpp_type'
p128462
S'double'
p128463
sS'default'
p128464
g3
sS'name'
p128465
S'invalue'
p128466
sS'required'
p128467
I01
sS'group_name'
p128468
Nsa(dp128469
S'description'
p128470
S'The variable value outside the circle\n'
p128471
sS'cpp_type'
p128472
S'double'
p128473
sS'default'
p128474
g3
sS'name'
p128475
S'outvalue'
p128476
sS'required'
p128477
I01
sS'group_name'
p128478
Nsa(dp128479
S'description'
p128480
g3
sS'cpp_type'
p128481
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128482
sS'default'
p128483
S'ThumbIC'
p128484
sS'name'
p128485
S'type'
p128486
sS'required'
p128487
I00
sS'group_name'
p128488
Nsa(dp128489
S'description'
p128490
S'The variable this initial condition is supposed to provide values for.\n'
p128491
sS'cpp_type'
p128492
S'VariableName'
p128493
sS'default'
p128494
g3
sS'name'
p128495
S'variable'
p128496
sS'required'
p128497
I01
sS'group_name'
p128498
Nsa(dp128499
S'description'
p128500
S'The y coordinate of the circle center\n'
p128501
sS'cpp_type'
p128502
S'double'
p128503
sS'default'
p128504
g3
sS'name'
p128505
S'width'
p128506
sS'required'
p128507
I01
sS'group_name'
p128508
Nsa(dp128509
S'description'
p128510
S'The x coordinate of the circle center\n'
p128511
sS'cpp_type'
p128512
S'double'
p128513
sS'default'
p128514
g3
sS'name'
p128515
S'xcoord'
p128516
sS'required'
p128517
I01
sS'group_name'
p128518
NsasS'name'
p128519
S'/Variables/*/InitialCondition/<type>/ThumbIC'
p128520
sa(dp128521
S'description'
p128522
S'Tricrystal with two circles/bubbles\n'
p128523
sS'subblocks'
p128524
NsS'parameters'
p128525
(lp128526
(dp128527
S'description'
p128528
S'The list of block ids (SubdomainID) that this object will be applied\n'
p128529
sS'cpp_type'
p128530
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128531
sS'default'
p128532
g3
sS'name'
p128533
S'block'
p128534
sS'required'
p128535
I00
sS'group_name'
p128536
Nsa(dp128537
S'description'
p128538
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p128539
sS'cpp_type'
p128540
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p128541
sS'default'
p128542
g3
sS'name'
p128543
S'boundary'
p128544
sS'required'
p128545
I00
sS'group_name'
p128546
Nsa(dp128547
S'description'
p128548
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p128549
sS'cpp_type'
p128550
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p128551
sS'default'
p128552
g3
sS'name'
p128553
S'control_tags'
p128554
sS'required'
p128555
I00
sS'group_name'
p128556
Nsa(dp128557
S'description'
p128558
S'Index for the current grain order parameter\n'
p128559
sS'cpp_type'
p128560
S'unsigned int'
p128561
sS'default'
p128562
g3
sS'name'
p128563
S'op_index'
p128564
sS'required'
p128565
I01
sS'group_name'
p128566
Nsa(dp128567
S'description'
p128568
S'Number of grain order parameters\n'
p128569
sS'cpp_type'
p128570
S'unsigned int'
p128571
sS'default'
p128572
g3
sS'name'
p128573
S'op_num'
p128574
sS'required'
p128575
I01
sS'group_name'
p128576
Nsa(dp128577
S'description'
p128578
g3
sS'cpp_type'
p128579
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128580
sS'default'
p128581
S'Tricrystal2CircleGrainsIC'
p128582
sS'name'
p128583
S'type'
p128584
sS'required'
p128585
I00
sS'group_name'
p128586
Nsa(dp128587
S'description'
p128588
S'The variable this initial condition is supposed to provide values for.\n'
p128589
sS'cpp_type'
p128590
S'VariableName'
p128591
sS'default'
p128592
g3
sS'name'
p128593
S'variable'
p128594
sS'required'
p128595
I01
sS'group_name'
p128596
NsasS'name'
p128597
S'/Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p128598
sasS'parameters'
p128599
NsS'name'
p128600
S'/Variables/*/InitialCondition/<type>'
p128601
sasS'parameters'
p128602
(lp128603
(dp128604
S'description'
p128605
S'A string representing the Moose Object that will be built by this Action\n'
p128606
sS'cpp_type'
p128607
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128608
sS'default'
p128609
g3
sS'name'
p128610
S'type'
p128611
sS'required'
p128612
I01
sS'group_name'
p128613
NsasS'name'
p128614
S'/Variables/*/InitialCondition'
p128615
sasS'parameters'
p128616
(lp128617
(dp128618
S'description'
p128619
S'The block id where this variable lives\n'
p128620
sS'cpp_type'
p128621
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p128622
sS'default'
p128623
g3
sS'name'
p128624
S'block'
p128625
sS'required'
p128626
I00
sS'group_name'
p128627
Nsa(dp128628
S'description'
p128629
S'True to make this variable an eigen variable\n'
p128630
sS'cpp_type'
p128631
S'bool'
p128632
sS'default'
p128633
S'0'
p128634
sS'name'
p128635
S'eigen'
p128636
sS'required'
p128637
I00
sS'group_name'
p128638
S'Advanced'
p128639
sa(dp128640
S'name'
p128641
S'family'
p128642
sS'cpp_type'
p128643
S'MooseEnum'
p128644
sS'default'
p128645
S'LAGRANGE'
p128646
sS'description'
p128647
S'Specifies the family of FE shape functions to use for this variable\n'
p128648
sS'required'
p128649
I00
sS'options'
p128650
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p128651
sS'group_name'
p128652
Nsa(dp128653
S'description'
p128654
S'Specifies the initial condition for this variable\n'
p128655
sS'cpp_type'
p128656
S'double'
p128657
sS'default'
p128658
g3
sS'name'
p128659
S'initial_condition'
p128660
sS'required'
p128661
I00
sS'group_name'
p128662
Nsa(dp128663
S'name'
p128664
S'order'
p128665
sS'cpp_type'
p128666
S'MooseEnum'
p128667
sS'default'
p128668
S'FIRST'
p128669
sS'description'
p128670
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p128671
sS'required'
p128672
I00
sS'options'
p128673
S'CONSTANT FIRST SECOND THIRD FOURTH'
p128674
sS'group_name'
p128675
Nsa(dp128676
S'description'
p128677
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p128678
sS'cpp_type'
p128679
S'std::vector<OutputName, std::allocator<OutputName> >'
p128680
sS'default'
p128681
g3
sS'name'
p128682
S'outputs'
p128683
sS'required'
p128684
I00
sS'group_name'
p128685
Nsa(dp128686
S'description'
p128687
S'Specifies a scaling factor to apply to this variable\n'
p128688
sS'cpp_type'
p128689
S'double'
p128690
sS'default'
p128691
S'1'
p128692
sS'name'
p128693
S'scaling'
p128694
sS'required'
p128695
I00
sS'group_name'
p128696
S'Advanced'
p128697
sa(dp128698
S'description'
p128699
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p128700
sS'cpp_type'
p128701
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128702
sS'default'
p128703
S'LATEST'
p128704
sS'name'
p128705
S'initial_from_file_timestep'
p128706
sS'required'
p128707
I00
sS'group_name'
p128708
S'Initial From File'
p128709
sa(dp128710
S'description'
p128711
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p128712
sS'cpp_type'
p128713
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128714
sS'default'
p128715
g3
sS'name'
p128716
S'initial_from_file_var'
p128717
sS'required'
p128718
I00
sS'group_name'
p128719
S'Initial From File'
p128720
sasS'name'
p128721
S'/Variables/*'
p128722
sa(dp128723
S'description'
p128724
g3
sS'subblocks'
p128725
NsS'parameters'
p128726
(lp128727
(dp128728
S'description'
p128729
S'Base name for the complex L variables\n'
p128730
sS'cpp_type'
p128731
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128732
sS'default'
p128733
g3
sS'name'
p128734
S'L_name_base'
p128735
sS'required'
p128736
I01
sS'group_name'
p128737
Nsa(dp128738
S'name'
p128739
S'family'
p128740
sS'cpp_type'
p128741
S'MooseEnum'
p128742
sS'default'
p128743
S'LAGRANGE'
p128744
sS'description'
p128745
S'Specifies the family of FE shape functions to use for the L variables\n'
p128746
sS'required'
p128747
I00
sS'options'
p128748
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p128749
sS'group_name'
p128750
Nsa(dp128751
S'description'
p128752
S'Name of atomic density variable\n'
p128753
sS'cpp_type'
p128754
S'AuxVariableName'
p128755
sS'default'
p128756
g3
sS'name'
p128757
S'n_name'
p128758
sS'required'
p128759
I01
sS'group_name'
p128760
Nsa(dp128761
S'description'
p128762
S'specifies the number of complex L variables will be solved for\n'
p128763
sS'cpp_type'
p128764
S'unsigned int'
p128765
sS'default'
p128766
g3
sS'name'
p128767
S'num_L'
p128768
sS'required'
p128769
I01
sS'group_name'
p128770
Nsa(dp128771
S'name'
p128772
S'order'
p128773
sS'cpp_type'
p128774
S'MooseEnum'
p128775
sS'default'
p128776
S'FIRST'
p128777
sS'description'
p128778
S'Specifies the order of the FE shape function to use for the L variables\n'
p128779
sS'required'
p128780
I00
sS'options'
p128781
S'CONSTANT FIRST SECOND THIRD FOURTH'
p128782
sS'group_name'
p128783
Nsa(dp128784
S'description'
p128785
S'Specifies a scaling factor to apply to the L variables\n'
p128786
sS'cpp_type'
p128787
S'double'
p128788
sS'default'
p128789
S'1'
p128790
sS'name'
p128791
S'scaling'
p128792
sS'required'
p128793
I00
sS'group_name'
p128794
Nsa(dp128795
S'description'
p128796
S'This is the filename of the sub.i file\n'
p128797
sS'cpp_type'
p128798
S'std::vector<FileName, std::allocator<FileName> >'
p128799
sS'default'
p128800
g3
sS'name'
p128801
S'sub_filenames'
p128802
sS'required'
p128803
I01
sS'group_name'
p128804
NsasS'name'
p128805
S'/Variables/CHPFCRFFSplitVariables'
p128806
sa(dp128807
S'description'
p128808
g3
sS'subblocks'
p128809
NsS'parameters'
p128810
(lp128811
(dp128812
S'description'
p128813
S'Base name for the complex L variables\n'
p128814
sS'cpp_type'
p128815
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128816
sS'default'
p128817
g3
sS'name'
p128818
S'L_name_base'
p128819
sS'required'
p128820
I01
sS'group_name'
p128821
Nsa(dp128822
S'name'
p128823
S'family'
p128824
sS'cpp_type'
p128825
S'MooseEnum'
p128826
sS'default'
p128827
S'LAGRANGE'
p128828
sS'description'
p128829
S'Specifies the family of FE shape functions to use for the L variables\n'
p128830
sS'required'
p128831
I00
sS'options'
p128832
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p128833
sS'group_name'
p128834
Nsa(dp128835
S'description'
p128836
S'specifies the number of complex L variables will be solved for\n'
p128837
sS'cpp_type'
p128838
S'unsigned int'
p128839
sS'default'
p128840
g3
sS'name'
p128841
S'num_L'
p128842
sS'required'
p128843
I01
sS'group_name'
p128844
Nsa(dp128845
S'name'
p128846
S'order'
p128847
sS'cpp_type'
p128848
S'MooseEnum'
p128849
sS'default'
p128850
S'FIRST'
p128851
sS'description'
p128852
S'Specifies the order of the FE shape function to use for the L variables\n'
p128853
sS'required'
p128854
I00
sS'options'
p128855
S'CONSTANT FIRST SECOND THIRD FOURTH'
p128856
sS'group_name'
p128857
Nsa(dp128858
S'description'
p128859
S'Specifies a scaling factor to apply to the L variables\n'
p128860
sS'cpp_type'
p128861
S'double'
p128862
sS'default'
p128863
S'1'
p128864
sS'name'
p128865
S'scaling'
p128866
sS'required'
p128867
I00
sS'group_name'
p128868
NsasS'name'
p128869
S'/Variables/HHPFCRFFSplitVariables'
p128870
sa(dp128871
S'description'
p128872
g3
sS'subblocks'
p128873
NsS'parameters'
p128874
(lp128875
(dp128876
S'description'
p128877
S'Base name for the complex L variables\n'
p128878
sS'cpp_type'
p128879
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128880
sS'default'
p128881
g3
sS'name'
p128882
S'L_name_base'
p128883
sS'required'
p128884
I01
sS'group_name'
p128885
Nsa(dp128886
S'name'
p128887
S'family'
p128888
sS'cpp_type'
p128889
S'MooseEnum'
p128890
sS'default'
p128891
S'LAGRANGE'
p128892
sS'description'
p128893
S'Specifies the family of FE shape functions to use for the L variables\n'
p128894
sS'required'
p128895
I00
sS'options'
p128896
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p128897
sS'group_name'
p128898
Nsa(dp128899
S'description'
p128900
S'specifies the number of complex L variables will be solved for\n'
p128901
sS'cpp_type'
p128902
S'unsigned int'
p128903
sS'default'
p128904
g3
sS'name'
p128905
S'num_L'
p128906
sS'required'
p128907
I01
sS'group_name'
p128908
Nsa(dp128909
S'name'
p128910
S'order'
p128911
sS'cpp_type'
p128912
S'MooseEnum'
p128913
sS'default'
p128914
S'FIRST'
p128915
sS'description'
p128916
S'Specifies the order of the FE shape function to use for the L variables\n'
p128917
sS'required'
p128918
I00
sS'options'
p128919
S'CONSTANT FIRST SECOND THIRD FOURTH'
p128920
sS'group_name'
p128921
Nsa(dp128922
S'description'
p128923
S'Specifies a scaling factor to apply to the L variables\n'
p128924
sS'cpp_type'
p128925
S'double'
p128926
sS'default'
p128927
S'1'
p128928
sS'name'
p128929
S'scaling'
p128930
sS'required'
p128931
I00
sS'group_name'
p128932
NsasS'name'
p128933
S'/Variables/PFCRFFVariables'
p128934
sa(dp128935
S'description'
p128936
g3
sS'subblocks'
p128937
NsS'parameters'
p128938
(lp128939
(dp128940
S'description'
p128941
S'Specifies the family of FE shape functions to use for this variable\n'
p128942
sS'cpp_type'
p128943
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128944
sS'default'
p128945
S'LAGRANGE'
p128946
sS'name'
p128947
S'family'
p128948
sS'required'
p128949
I00
sS'group_name'
p128950
Nsa(dp128951
S'description'
p128952
S'specifies the number of order parameters to create\n'
p128953
sS'cpp_type'
p128954
S'unsigned int'
p128955
sS'default'
p128956
g3
sS'name'
p128957
S'op_num'
p128958
sS'required'
p128959
I01
sS'group_name'
p128960
Nsa(dp128961
S'description'
p128962
S'Specifies the order of the FE shape function to use for this variable\n'
p128963
sS'cpp_type'
p128964
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128965
sS'default'
p128966
S'FIRST'
p128967
sS'name'
p128968
S'order'
p128969
sS'required'
p128970
I00
sS'group_name'
p128971
Nsa(dp128972
S'description'
p128973
S'Specifies a scaling factor to apply to this variable\n'
p128974
sS'cpp_type'
p128975
S'double'
p128976
sS'default'
p128977
S'1'
p128978
sS'name'
p128979
S'scaling'
p128980
sS'required'
p128981
I00
sS'group_name'
p128982
Nsa(dp128983
S'description'
p128984
S'specifies the base name of the variables\n'
p128985
sS'cpp_type'
p128986
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p128987
sS'default'
p128988
g3
sS'name'
p128989
S'var_name_base'
p128990
sS'required'
p128991
I01
sS'group_name'
p128992
NsasS'name'
p128993
S'/Variables/PolycrystalVariables'
p128994
sasS'parameters'
p128995
NsS'name'
p128996
S'/Variables'
p128997
sa(dp128998
S'description'
p128999
g3
sS'subblocks'
p129000
(lp129001
(dp129002
S'description'
p129003
g3
sS'subblocks'
p129004
NsS'parameters'
p129005
(lp129006
(dp129007
S'description'
p129008
S'A string representing the Moose Object that will be built by this Action\n'
p129009
sS'cpp_type'
p129010
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129011
sS'default'
p129012
g3
sS'name'
p129013
S'type'
p129014
sS'required'
p129015
I01
sS'group_name'
p129016
NsasS'name'
p129017
S'/VectorPostprocessors/*'
p129018
sa(dp129019
S'description'
p129020
g3
sS'subblocks'
p129021
NsS'parameters'
p129022
(lp129023
(dp129024
S'description'
p129025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129026
sS'cpp_type'
p129027
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129028
sS'default'
p129029
g3
sS'name'
p129030
S'control_tags'
p129031
sS'required'
p129032
I00
sS'group_name'
p129033
Nsa(dp129034
S'name'
p129035
S'execute_on'
p129036
sS'cpp_type'
p129037
S'MultiMooseEnum'
p129038
sS'default'
p129039
S'TIMESTEP_END'
p129040
sS'description'
p129041
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129042
sS'required'
p129043
I00
sS'options'
p129044
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129045
sS'group_name'
p129046
Nsa(dp129047
S'description'
p129048
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129049
sS'cpp_type'
p129050
S'std::vector<OutputName, std::allocator<OutputName> >'
p129051
sS'default'
p129052
g3
sS'name'
p129053
S'outputs'
p129054
sS'required'
p129055
I00
sS'group_name'
p129056
S'Advanced'
p129057
sa(dp129058
S'description'
p129059
g3
sS'cpp_type'
p129060
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129061
sS'default'
p129062
S'ConstantVectorPostprocessor'
p129063
sS'name'
p129064
S'type'
p129065
sS'required'
p129066
I00
sS'group_name'
p129067
Nsa(dp129068
S'description'
p129069
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129070
sS'cpp_type'
p129071
S'bool'
p129072
sS'default'
p129073
S'0'
p129074
sS'name'
p129075
S'use_displaced_mesh'
p129076
sS'required'
p129077
I00
sS'group_name'
p129078
S'Advanced'
p129079
sa(dp129080
S'description'
p129081
S'The vector value this object will have.\n'
p129082
sS'cpp_type'
p129083
S'std::vector<double, std::allocator<double> >'
p129084
sS'default'
p129085
g3
sS'name'
p129086
S'value'
p129087
sS'required'
p129088
I01
sS'group_name'
p129089
NsasS'name'
p129090
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p129091
sa(dp129092
S'description'
p129093
S'Outputs the values of a set of domain integral postprocessors as a vector, along with their positions along the crack front.\n'
p129094
sS'subblocks'
p129095
NsS'parameters'
p129096
(lp129097
(dp129098
S'description'
p129099
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129100
sS'cpp_type'
p129101
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129102
sS'default'
p129103
g3
sS'name'
p129104
S'control_tags'
p129105
sS'required'
p129106
I00
sS'group_name'
p129107
Nsa(dp129108
S'description'
p129109
S'The CrackFrontDefinition user object name\n'
p129110
sS'cpp_type'
p129111
S'UserObjectName'
p129112
sS'default'
p129113
g3
sS'name'
p129114
S'crack_front_definition'
p129115
sS'required'
p129116
I01
sS'group_name'
p129117
Nsa(dp129118
S'name'
p129119
S'execute_on'
p129120
sS'cpp_type'
p129121
S'MultiMooseEnum'
p129122
sS'default'
p129123
S'TIMESTEP_END'
p129124
sS'description'
p129125
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129126
sS'required'
p129127
I00
sS'options'
p129128
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129129
sS'group_name'
p129130
Nsa(dp129131
S'description'
p129132
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129133
sS'cpp_type'
p129134
S'std::vector<OutputName, std::allocator<OutputName> >'
p129135
sS'default'
p129136
g3
sS'name'
p129137
S'outputs'
p129138
sS'required'
p129139
I00
sS'group_name'
p129140
S'Advanced'
p129141
sa(dp129142
S'name'
p129143
S'position_type'
p129144
sS'cpp_type'
p129145
S'MooseEnum'
p129146
sS'default'
p129147
S'Distance'
p129148
sS'description'
p129149
S'The method used to calculate position along crack front.  Options are: Angle Distance\n'
p129150
sS'required'
p129151
I00
sS'options'
p129152
S'Angle Distance'
p129153
sS'group_name'
p129154
Nsa(dp129155
S'description'
p129156
S'The postprocessors whose values are to be reported\n'
p129157
sS'cpp_type'
p129158
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p129159
sS'default'
p129160
g3
sS'name'
p129161
S'postprocessors'
p129162
sS'required'
p129163
I01
sS'group_name'
p129164
Nsa(dp129165
S'name'
p129166
S'sort_by'
p129167
sS'cpp_type'
p129168
S'MooseEnum'
p129169
sS'default'
p129170
g3
sS'description'
p129171
S'What to sort the samples by\n'
p129172
sS'required'
p129173
I01
sS'options'
p129174
S'x y z id'
p129175
sS'group_name'
p129176
Nsa(dp129177
S'description'
p129178
g3
sS'cpp_type'
p129179
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129180
sS'default'
p129181
S'CrackDataSampler'
p129182
sS'name'
p129183
S'type'
p129184
sS'required'
p129185
I00
sS'group_name'
p129186
Nsa(dp129187
S'description'
p129188
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129189
sS'cpp_type'
p129190
S'bool'
p129191
sS'default'
p129192
S'0'
p129193
sS'name'
p129194
S'use_displaced_mesh'
p129195
sS'required'
p129196
I00
sS'group_name'
p129197
S'Advanced'
p129198
sasS'name'
p129199
S'/VectorPostprocessors/CrackDataSampler'
p129200
sa(dp129201
S'description'
p129202
g3
sS'subblocks'
p129203
NsS'parameters'
p129204
(lp129205
(dp129206
S'description'
p129207
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129208
sS'cpp_type'
p129209
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129210
sS'default'
p129211
g3
sS'name'
p129212
S'control_tags'
p129213
sS'required'
p129214
I00
sS'group_name'
p129215
Nsa(dp129216
S'description'
p129217
S'The end of the line\n'
p129218
sS'cpp_type'
p129219
S'libMesh::Point'
p129220
sS'default'
p129221
g3
sS'name'
p129222
S'end'
p129223
sS'required'
p129224
I01
sS'group_name'
p129225
Nsa(dp129226
S'name'
p129227
S'execute_on'
p129228
sS'cpp_type'
p129229
S'MultiMooseEnum'
p129230
sS'default'
p129231
S'TIMESTEP_END'
p129232
sS'description'
p129233
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129234
sS'required'
p129235
I00
sS'options'
p129236
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129237
sS'group_name'
p129238
Nsa(dp129239
S'description'
p129240
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129241
sS'cpp_type'
p129242
S'std::vector<OutputName, std::allocator<OutputName> >'
p129243
sS'default'
p129244
g3
sS'name'
p129245
S'outputs'
p129246
sS'required'
p129247
I00
sS'group_name'
p129248
S'Advanced'
p129249
sa(dp129250
S'description'
p129251
S'The beginning of the line\n'
p129252
sS'cpp_type'
p129253
S'libMesh::Point'
p129254
sS'default'
p129255
g3
sS'name'
p129256
S'start'
p129257
sS'required'
p129258
I01
sS'group_name'
p129259
Nsa(dp129260
S'description'
p129261
g3
sS'cpp_type'
p129262
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129263
sS'default'
p129264
S'ElementsAlongLine'
p129265
sS'name'
p129266
S'type'
p129267
sS'required'
p129268
I00
sS'group_name'
p129269
Nsa(dp129270
S'description'
p129271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129272
sS'cpp_type'
p129273
S'bool'
p129274
sS'default'
p129275
S'0'
p129276
sS'name'
p129277
S'use_displaced_mesh'
p129278
sS'required'
p129279
I00
sS'group_name'
p129280
S'Advanced'
p129281
sasS'name'
p129282
S'/VectorPostprocessors/ElementsAlongLine'
p129283
sa(dp129284
S'description'
p129285
S'Outputs the values from GrainCentersPostprocessor\n'
p129286
sS'subblocks'
p129287
NsS'parameters'
p129288
(lp129289
(dp129290
S'description'
p129291
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129292
sS'cpp_type'
p129293
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129294
sS'default'
p129295
g3
sS'name'
p129296
S'control_tags'
p129297
sS'required'
p129298
I00
sS'group_name'
p129299
Nsa(dp129300
S'name'
p129301
S'execute_on'
p129302
sS'cpp_type'
p129303
S'MultiMooseEnum'
p129304
sS'default'
p129305
S'TIMESTEP_END'
p129306
sS'description'
p129307
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129308
sS'required'
p129309
I00
sS'options'
p129310
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129311
sS'group_name'
p129312
Nsa(dp129313
S'description'
p129314
S'Specify user object that gives center of mass and volume of grains\n'
p129315
sS'cpp_type'
p129316
S'UserObjectName'
p129317
sS'default'
p129318
g3
sS'name'
p129319
S'grain_data'
p129320
sS'required'
p129321
I00
sS'group_name'
p129322
Nsa(dp129323
S'description'
p129324
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129325
sS'cpp_type'
p129326
S'std::vector<OutputName, std::allocator<OutputName> >'
p129327
sS'default'
p129328
g3
sS'name'
p129329
S'outputs'
p129330
sS'required'
p129331
I00
sS'group_name'
p129332
S'Advanced'
p129333
sa(dp129334
S'description'
p129335
g3
sS'cpp_type'
p129336
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129337
sS'default'
p129338
S'GrainCentersPostprocessor'
p129339
sS'name'
p129340
S'type'
p129341
sS'required'
p129342
I00
sS'group_name'
p129343
Nsa(dp129344
S'description'
p129345
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129346
sS'cpp_type'
p129347
S'bool'
p129348
sS'default'
p129349
S'0'
p129350
sS'name'
p129351
S'use_displaced_mesh'
p129352
sS'required'
p129353
I00
sS'group_name'
p129354
S'Advanced'
p129355
sasS'name'
p129356
S'/VectorPostprocessors/GrainCentersPostprocessor'
p129357
sa(dp129358
S'description'
p129359
S'Outputs the values from GrainForcesPostprocessor\n'
p129360
sS'subblocks'
p129361
NsS'parameters'
p129362
(lp129363
(dp129364
S'description'
p129365
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129366
sS'cpp_type'
p129367
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129368
sS'default'
p129369
g3
sS'name'
p129370
S'control_tags'
p129371
sS'required'
p129372
I00
sS'group_name'
p129373
Nsa(dp129374
S'name'
p129375
S'execute_on'
p129376
sS'cpp_type'
p129377
S'MultiMooseEnum'
p129378
sS'default'
p129379
S'TIMESTEP_END'
p129380
sS'description'
p129381
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129382
sS'required'
p129383
I00
sS'options'
p129384
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129385
sS'group_name'
p129386
Nsa(dp129387
S'description'
p129388
S'Specify userobject that gives center of mass and volume of grains\n'
p129389
sS'cpp_type'
p129390
S'UserObjectName'
p129391
sS'default'
p129392
g3
sS'name'
p129393
S'grain_force'
p129394
sS'required'
p129395
I00
sS'group_name'
p129396
Nsa(dp129397
S'description'
p129398
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129399
sS'cpp_type'
p129400
S'std::vector<OutputName, std::allocator<OutputName> >'
p129401
sS'default'
p129402
g3
sS'name'
p129403
S'outputs'
p129404
sS'required'
p129405
I00
sS'group_name'
p129406
S'Advanced'
p129407
sa(dp129408
S'description'
p129409
g3
sS'cpp_type'
p129410
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129411
sS'default'
p129412
S'GrainForcesPostprocessor'
p129413
sS'name'
p129414
S'type'
p129415
sS'required'
p129416
I00
sS'group_name'
p129417
Nsa(dp129418
S'description'
p129419
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129420
sS'cpp_type'
p129421
S'bool'
p129422
sS'default'
p129423
S'0'
p129424
sS'name'
p129425
S'use_displaced_mesh'
p129426
sS'required'
p129427
I00
sS'group_name'
p129428
S'Advanced'
p129429
sasS'name'
p129430
S'/VectorPostprocessors/GrainForcesPostprocessor'
p129431
sa(dp129432
S'description'
p129433
g3
sS'subblocks'
p129434
NsS'parameters'
p129435
(lp129436
(dp129437
S'description'
p129438
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129439
sS'cpp_type'
p129440
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129441
sS'default'
p129442
g3
sS'name'
p129443
S'control_tags'
p129444
sS'required'
p129445
I00
sS'group_name'
p129446
Nsa(dp129447
S'description'
p129448
S'The end of the line\n'
p129449
sS'cpp_type'
p129450
S'libMesh::Point'
p129451
sS'default'
p129452
g3
sS'name'
p129453
S'end'
p129454
sS'required'
p129455
I01
sS'group_name'
p129456
Nsa(dp129457
S'name'
p129458
S'execute_on'
p129459
sS'cpp_type'
p129460
S'MultiMooseEnum'
p129461
sS'default'
p129462
S'TIMESTEP_END'
p129463
sS'description'
p129464
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129465
sS'required'
p129466
I00
sS'options'
p129467
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129468
sS'group_name'
p129469
Nsa(dp129470
S'description'
p129471
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129472
sS'cpp_type'
p129473
S'std::vector<OutputName, std::allocator<OutputName> >'
p129474
sS'default'
p129475
g3
sS'name'
p129476
S'outputs'
p129477
sS'required'
p129478
I00
sS'group_name'
p129479
S'Advanced'
p129480
sa(dp129481
S'description'
p129482
S'The beginning of the line\n'
p129483
sS'cpp_type'
p129484
S'libMesh::Point'
p129485
sS'default'
p129486
g3
sS'name'
p129487
S'start'
p129488
sS'required'
p129489
I01
sS'group_name'
p129490
Nsa(dp129491
S'description'
p129492
g3
sS'cpp_type'
p129493
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129494
sS'default'
p129495
S'IntersectionPointsAlongLine'
p129496
sS'name'
p129497
S'type'
p129498
sS'required'
p129499
I00
sS'group_name'
p129500
Nsa(dp129501
S'description'
p129502
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129503
sS'cpp_type'
p129504
S'bool'
p129505
sS'default'
p129506
S'0'
p129507
sS'name'
p129508
S'use_displaced_mesh'
p129509
sS'required'
p129510
I00
sS'group_name'
p129511
S'Advanced'
p129512
sasS'name'
p129513
S'/VectorPostprocessors/IntersectionPointsAlongLine'
p129514
sa(dp129515
S'description'
p129516
S'Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n'
p129517
sS'subblocks'
p129518
NsS'parameters'
p129519
(lp129520
(dp129521
S'description'
p129522
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129523
sS'cpp_type'
p129524
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129525
sS'default'
p129526
g3
sS'name'
p129527
S'control_tags'
p129528
sS'required'
p129529
I00
sS'group_name'
p129530
Nsa(dp129531
S'name'
p129532
S'execute_on'
p129533
sS'cpp_type'
p129534
S'MultiMooseEnum'
p129535
sS'default'
p129536
S'TIMESTEP_END'
p129537
sS'description'
p129538
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129539
sS'required'
p129540
I00
sS'options'
p129541
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129542
sS'group_name'
p129543
Nsa(dp129544
S'description'
p129545
S'The number of samples to be output\n'
p129546
sS'cpp_type'
p129547
S'unsigned int'
p129548
sS'default'
p129549
g3
sS'name'
p129550
S'num_samples'
p129551
sS'required'
p129552
I00
sS'group_name'
p129553
Nsa(dp129554
S'description'
p129555
S'The order of the polynomial fit\n'
p129556
sS'cpp_type'
p129557
S'unsigned int'
p129558
sS'default'
p129559
g3
sS'name'
p129560
S'order'
p129561
sS'required'
p129562
I01
sS'group_name'
p129563
Nsa(dp129564
S'name'
p129565
S'output'
p129566
sS'cpp_type'
p129567
S'MooseEnum'
p129568
sS'default'
p129569
S'Coefficients'
p129570
sS'description'
p129571
S'The quantity to output.  Options are: Coefficients Samples\n'
p129572
sS'required'
p129573
I00
sS'options'
p129574
S'Coefficients Samples'
p129575
sS'group_name'
p129576
Nsa(dp129577
S'description'
p129578
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129579
sS'cpp_type'
p129580
S'std::vector<OutputName, std::allocator<OutputName> >'
p129581
sS'default'
p129582
g3
sS'name'
p129583
S'outputs'
p129584
sS'required'
p129585
I00
sS'group_name'
p129586
S'Advanced'
p129587
sa(dp129588
S'description'
p129589
S'The maximum x value of the of samples to be output\n'
p129590
sS'cpp_type'
p129591
S'double'
p129592
sS'default'
p129593
g3
sS'name'
p129594
S'sample_x_max'
p129595
sS'required'
p129596
I00
sS'group_name'
p129597
Nsa(dp129598
S'description'
p129599
S'The minimum x value of the of samples to be output\n'
p129600
sS'cpp_type'
p129601
S'double'
p129602
sS'default'
p129603
g3
sS'name'
p129604
S'sample_x_min'
p129605
sS'required'
p129606
I00
sS'group_name'
p129607
Nsa(dp129608
S'description'
p129609
g3
sS'cpp_type'
p129610
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129611
sS'default'
p129612
S'LeastSquaresFit'
p129613
sS'name'
p129614
S'type'
p129615
sS'required'
p129616
I00
sS'group_name'
p129617
Nsa(dp129618
S'description'
p129619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129620
sS'cpp_type'
p129621
S'bool'
p129622
sS'default'
p129623
S'0'
p129624
sS'name'
p129625
S'use_displaced_mesh'
p129626
sS'required'
p129627
I00
sS'group_name'
p129628
S'Advanced'
p129629
sa(dp129630
S'description'
p129631
S'The vectorpostprocessor on whose values we perform a least squares fit\n'
p129632
sS'cpp_type'
p129633
S'VectorPostprocessorName'
p129634
sS'default'
p129635
g3
sS'name'
p129636
S'vectorpostprocessor'
p129637
sS'required'
p129638
I01
sS'group_name'
p129639
Nsa(dp129640
S'description'
p129641
S'The name of the independent variable\n'
p129642
sS'cpp_type'
p129643
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129644
sS'default'
p129645
g3
sS'name'
p129646
S'x_name'
p129647
sS'required'
p129648
I01
sS'group_name'
p129649
Nsa(dp129650
S'description'
p129651
S'The name of the dependent variable\n'
p129652
sS'cpp_type'
p129653
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129654
sS'default'
p129655
g3
sS'name'
p129656
S'y_name'
p129657
sS'required'
p129658
I01
sS'group_name'
p129659
NsasS'name'
p129660
S'/VectorPostprocessors/LeastSquaresFit'
p129661
sa(dp129662
S'description'
p129663
g3
sS'subblocks'
p129664
NsS'parameters'
p129665
(lp129666
(dp129667
S'description'
p129668
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129669
sS'cpp_type'
p129670
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129671
sS'default'
p129672
g3
sS'name'
p129673
S'block'
p129674
sS'required'
p129675
I00
sS'group_name'
p129676
Nsa(dp129677
S'description'
p129678
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129679
sS'cpp_type'
p129680
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129681
sS'default'
p129682
g3
sS'name'
p129683
S'control_tags'
p129684
sS'required'
p129685
I00
sS'group_name'
p129686
Nsa(dp129687
S'description'
p129688
S'The end of the line\n'
p129689
sS'cpp_type'
p129690
S'libMesh::Point'
p129691
sS'default'
p129692
g3
sS'name'
p129693
S'end'
p129694
sS'required'
p129695
I01
sS'group_name'
p129696
Nsa(dp129697
S'name'
p129698
S'execute_on'
p129699
sS'cpp_type'
p129700
S'MultiMooseEnum'
p129701
sS'default'
p129702
S'TIMESTEP_END'
p129703
sS'description'
p129704
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129705
sS'required'
p129706
I00
sS'options'
p129707
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129708
sS'group_name'
p129709
Nsa(dp129710
S'description'
p129711
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129712
sS'cpp_type'
p129713
S'std::vector<OutputName, std::allocator<OutputName> >'
p129714
sS'default'
p129715
g3
sS'name'
p129716
S'outputs'
p129717
sS'required'
p129718
I00
sS'group_name'
p129719
S'Advanced'
p129720
sa(dp129721
S'description'
p129722
S'Name of the material property to be output along a line\n'
p129723
sS'cpp_type'
p129724
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129725
sS'default'
p129726
g3
sS'name'
p129727
S'property'
p129728
sS'required'
p129729
I01
sS'group_name'
p129730
Nsa(dp129731
S'name'
p129732
S'sort_by'
p129733
sS'cpp_type'
p129734
S'MooseEnum'
p129735
sS'default'
p129736
g3
sS'description'
p129737
S'What to sort the samples by\n'
p129738
sS'required'
p129739
I01
sS'options'
p129740
S'x y z id'
p129741
sS'group_name'
p129742
Nsa(dp129743
S'description'
p129744
S'The beginning of the line\n'
p129745
sS'cpp_type'
p129746
S'libMesh::Point'
p129747
sS'default'
p129748
g3
sS'name'
p129749
S'start'
p129750
sS'required'
p129751
I01
sS'group_name'
p129752
Nsa(dp129753
S'description'
p129754
g3
sS'cpp_type'
p129755
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129756
sS'default'
p129757
S'LineMaterialRealSampler'
p129758
sS'name'
p129759
S'type'
p129760
sS'required'
p129761
I00
sS'group_name'
p129762
Nsa(dp129763
S'description'
p129764
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129765
sS'cpp_type'
p129766
S'bool'
p129767
sS'default'
p129768
S'0'
p129769
sS'name'
p129770
S'use_displaced_mesh'
p129771
sS'required'
p129772
I00
sS'group_name'
p129773
S'Advanced'
p129774
sasS'name'
p129775
S'/VectorPostprocessors/LineMaterialRealSampler'
p129776
sa(dp129777
S'description'
p129778
g3
sS'subblocks'
p129779
NsS'parameters'
p129780
(lp129781
(dp129782
S'description'
p129783
S'The list of block ids (SubdomainID) that this object will be applied\n'
p129784
sS'cpp_type'
p129785
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p129786
sS'default'
p129787
g3
sS'name'
p129788
S'block'
p129789
sS'required'
p129790
I00
sS'group_name'
p129791
Nsa(dp129792
S'description'
p129793
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129794
sS'cpp_type'
p129795
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129796
sS'default'
p129797
g3
sS'name'
p129798
S'control_tags'
p129799
sS'required'
p129800
I00
sS'group_name'
p129801
Nsa(dp129802
S'description'
p129803
S'Direction vector\n'
p129804
sS'cpp_type'
p129805
S'libMesh::VectorValue<double>'
p129806
sS'default'
p129807
S'1 0 0'
p129808
sS'name'
p129809
S'direction'
p129810
sS'required'
p129811
I00
sS'group_name'
p129812
Nsa(dp129813
S'description'
p129814
S'The end of the line\n'
p129815
sS'cpp_type'
p129816
S'libMesh::Point'
p129817
sS'default'
p129818
g3
sS'name'
p129819
S'end'
p129820
sS'required'
p129821
I01
sS'group_name'
p129822
Nsa(dp129823
S'name'
p129824
S'execute_on'
p129825
sS'cpp_type'
p129826
S'MultiMooseEnum'
p129827
sS'default'
p129828
S'TIMESTEP_END'
p129829
sS'description'
p129830
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129831
sS'required'
p129832
I00
sS'options'
p129833
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129834
sS'group_name'
p129835
Nsa(dp129836
S'description'
p129837
S'The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).\n'
p129838
sS'cpp_type'
p129839
S'int'
p129840
sS'default'
p129841
S'-1'
p129842
sS'name'
p129843
S'index'
p129844
sS'required'
p129845
I00
sS'group_name'
p129846
Nsa(dp129847
S'description'
p129848
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129849
sS'cpp_type'
p129850
S'std::vector<OutputName, std::allocator<OutputName> >'
p129851
sS'default'
p129852
g3
sS'name'
p129853
S'outputs'
p129854
sS'required'
p129855
I00
sS'group_name'
p129856
S'Advanced'
p129857
sa(dp129858
S'description'
p129859
S'Start point for axis used to calculate some material tensor quantities\n'
p129860
sS'cpp_type'
p129861
S'libMesh::VectorValue<double>'
p129862
sS'default'
p129863
S'0 0 0'
p129864
sS'name'
p129865
S'point1'
p129866
sS'required'
p129867
I00
sS'group_name'
p129868
Nsa(dp129869
S'description'
p129870
S'End point for axis used to calculate some material tensor quantities\n'
p129871
sS'cpp_type'
p129872
S'libMesh::VectorValue<double>'
p129873
sS'default'
p129874
S'0 1 0'
p129875
sS'name'
p129876
S'point2'
p129877
sS'required'
p129878
I00
sS'group_name'
p129879
Nsa(dp129880
S'description'
p129881
S'Name of the material property to be output along a line\n'
p129882
sS'cpp_type'
p129883
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129884
sS'default'
p129885
g3
sS'name'
p129886
S'property'
p129887
sS'required'
p129888
I01
sS'group_name'
p129889
Nsa(dp129890
S'name'
p129891
S'quantity'
p129892
sS'cpp_type'
p129893
S'MooseEnum'
p129894
sS'default'
p129895
g3
sS'description'
p129896
S'A scalar quantity to compute: VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain\n'
p129897
sS'required'
p129898
I00
sS'options'
p129899
S'VonMises PlasticStrainMag Hydrostatic Direction Hoop Radial Axial MaxPrincipal MedPrincipal MinPrincipal FirstInvariant SecondInvariant ThirdInvariant TriAxiality VolumetricStrain'
p129900
sS'group_name'
p129901
Nsa(dp129902
S'name'
p129903
S'sort_by'
p129904
sS'cpp_type'
p129905
S'MooseEnum'
p129906
sS'default'
p129907
g3
sS'description'
p129908
S'What to sort the samples by\n'
p129909
sS'required'
p129910
I01
sS'options'
p129911
S'x y z id'
p129912
sS'group_name'
p129913
Nsa(dp129914
S'description'
p129915
S'The beginning of the line\n'
p129916
sS'cpp_type'
p129917
S'libMesh::Point'
p129918
sS'default'
p129919
g3
sS'name'
p129920
S'start'
p129921
sS'required'
p129922
I01
sS'group_name'
p129923
Nsa(dp129924
S'description'
p129925
g3
sS'cpp_type'
p129926
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p129927
sS'default'
p129928
S'LineMaterialSymmTensorSampler'
p129929
sS'name'
p129930
S'type'
p129931
sS'required'
p129932
I00
sS'group_name'
p129933
Nsa(dp129934
S'description'
p129935
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p129936
sS'cpp_type'
p129937
S'bool'
p129938
sS'default'
p129939
S'0'
p129940
sS'name'
p129941
S'use_displaced_mesh'
p129942
sS'required'
p129943
I00
sS'group_name'
p129944
S'Advanced'
p129945
sasS'name'
p129946
S'/VectorPostprocessors/LineMaterialSymmTensorSampler'
p129947
sa(dp129948
S'description'
p129949
g3
sS'subblocks'
p129950
NsS'parameters'
p129951
(lp129952
(dp129953
S'description'
p129954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p129955
sS'cpp_type'
p129956
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p129957
sS'default'
p129958
g3
sS'name'
p129959
S'control_tags'
p129960
sS'required'
p129961
I00
sS'group_name'
p129962
Nsa(dp129963
S'description'
p129964
S'The ending of the line\n'
p129965
sS'cpp_type'
p129966
S'libMesh::Point'
p129967
sS'default'
p129968
g3
sS'name'
p129969
S'end_point'
p129970
sS'required'
p129971
I01
sS'group_name'
p129972
Nsa(dp129973
S'name'
p129974
S'execute_on'
p129975
sS'cpp_type'
p129976
S'MultiMooseEnum'
p129977
sS'default'
p129978
S'TIMESTEP_END'
p129979
sS'description'
p129980
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p129981
sS'required'
p129982
I00
sS'options'
p129983
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p129984
sS'group_name'
p129985
Nsa(dp129986
S'description'
p129987
S'The number of points to sample along the line\n'
p129988
sS'cpp_type'
p129989
S'unsigned int'
p129990
sS'default'
p129991
g3
sS'name'
p129992
S'num_points'
p129993
sS'required'
p129994
I01
sS'group_name'
p129995
Nsa(dp129996
S'description'
p129997
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p129998
sS'cpp_type'
p129999
S'std::vector<OutputName, std::allocator<OutputName> >'
p130000
sS'default'
p130001
g3
sS'name'
p130002
S'outputs'
p130003
sS'required'
p130004
I00
sS'group_name'
p130005
S'Advanced'
p130006
sa(dp130007
S'name'
p130008
S'sort_by'
p130009
sS'cpp_type'
p130010
S'MooseEnum'
p130011
sS'default'
p130012
g3
sS'description'
p130013
S'What to sort the samples by\n'
p130014
sS'required'
p130015
I01
sS'options'
p130016
S'x y z id'
p130017
sS'group_name'
p130018
Nsa(dp130019
S'description'
p130020
S'The beginning of the line\n'
p130021
sS'cpp_type'
p130022
S'libMesh::Point'
p130023
sS'default'
p130024
g3
sS'name'
p130025
S'start_point'
p130026
sS'required'
p130027
I01
sS'group_name'
p130028
Nsa(dp130029
S'description'
p130030
g3
sS'cpp_type'
p130031
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130032
sS'default'
p130033
S'LineValueSampler'
p130034
sS'name'
p130035
S'type'
p130036
sS'required'
p130037
I00
sS'group_name'
p130038
Nsa(dp130039
S'description'
p130040
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130041
sS'cpp_type'
p130042
S'bool'
p130043
sS'default'
p130044
S'0'
p130045
sS'name'
p130046
S'use_displaced_mesh'
p130047
sS'required'
p130048
I00
sS'group_name'
p130049
S'Advanced'
p130050
sa(dp130051
S'description'
p130052
S'The names of the variables that this VectorPostprocessor operates on\n'
p130053
sS'cpp_type'
p130054
S'std::vector<VariableName>'
p130055
sS'default'
p130056
g3
sS'name'
p130057
S'variable'
p130058
sS'required'
p130059
I01
sS'group_name'
p130060
NsasS'name'
p130061
S'/VectorPostprocessors/LineValueSampler'
p130062
sa(dp130063
S'description'
p130064
g3
sS'subblocks'
p130065
NsS'parameters'
p130066
(lp130067
(dp130068
S'description'
p130069
S'The list of block ids (SubdomainID) that this object will be applied\n'
p130070
sS'cpp_type'
p130071
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p130072
sS'default'
p130073
g3
sS'name'
p130074
S'block'
p130075
sS'required'
p130076
I00
sS'group_name'
p130077
Nsa(dp130078
S'description'
p130079
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130080
sS'cpp_type'
p130081
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130082
sS'default'
p130083
g3
sS'name'
p130084
S'boundary'
p130085
sS'required'
p130086
I00
sS'group_name'
p130087
Nsa(dp130088
S'description'
p130089
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130090
sS'cpp_type'
p130091
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130092
sS'default'
p130093
g3
sS'name'
p130094
S'control_tags'
p130095
sS'required'
p130096
I00
sS'group_name'
p130097
Nsa(dp130098
S'name'
p130099
S'execute_on'
p130100
sS'cpp_type'
p130101
S'MultiMooseEnum'
p130102
sS'default'
p130103
S'TIMESTEP_END'
p130104
sS'description'
p130105
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130106
sS'required'
p130107
I00
sS'options'
p130108
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p130109
sS'group_name'
p130110
Nsa(dp130111
S'description'
p130112
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p130113
sS'cpp_type'
p130114
S'std::vector<OutputName, std::allocator<OutputName> >'
p130115
sS'default'
p130116
g3
sS'name'
p130117
S'outputs'
p130118
sS'required'
p130119
I00
sS'group_name'
p130120
S'Advanced'
p130121
sa(dp130122
S'description'
p130123
S'The seed for the master random number generator\n'
p130124
sS'cpp_type'
p130125
S'unsigned int'
p130126
sS'default'
p130127
S'0'
p130128
sS'name'
p130129
S'seed'
p130130
sS'required'
p130131
I00
sS'group_name'
p130132
S'Advanced'
p130133
sa(dp130134
S'name'
p130135
S'sort_by'
p130136
sS'cpp_type'
p130137
S'MooseEnum'
p130138
sS'default'
p130139
g3
sS'description'
p130140
S'What to sort the samples by\n'
p130141
sS'required'
p130142
I01
sS'options'
p130143
S'x y z id'
p130144
sS'group_name'
p130145
Nsa(dp130146
S'description'
p130147
g3
sS'cpp_type'
p130148
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130149
sS'default'
p130150
S'NodalValueSampler'
p130151
sS'name'
p130152
S'type'
p130153
sS'required'
p130154
I00
sS'group_name'
p130155
Nsa(dp130156
S'description'
p130157
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130158
sS'cpp_type'
p130159
S'bool'
p130160
sS'default'
p130161
S'0'
p130162
sS'name'
p130163
S'use_displaced_mesh'
p130164
sS'required'
p130165
I00
sS'group_name'
p130166
S'Advanced'
p130167
sa(dp130168
S'description'
p130169
S'The names of the variables that this VectorPostprocessor operates on\n'
p130170
sS'cpp_type'
p130171
S'std::vector<VariableName>'
p130172
sS'default'
p130173
g3
sS'name'
p130174
S'variable'
p130175
sS'required'
p130176
I01
sS'group_name'
p130177
NsasS'name'
p130178
S'/VectorPostprocessors/NodalValueSampler'
p130179
sa(dp130180
S'description'
p130181
g3
sS'subblocks'
p130182
NsS'parameters'
p130183
(lp130184
(dp130185
S'description'
p130186
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130187
sS'cpp_type'
p130188
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130189
sS'default'
p130190
g3
sS'name'
p130191
S'control_tags'
p130192
sS'required'
p130193
I00
sS'group_name'
p130194
Nsa(dp130195
S'name'
p130196
S'execute_on'
p130197
sS'cpp_type'
p130198
S'MultiMooseEnum'
p130199
sS'default'
p130200
S'TIMESTEP_END'
p130201
sS'description'
p130202
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130203
sS'required'
p130204
I00
sS'options'
p130205
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p130206
sS'group_name'
p130207
Nsa(dp130208
S'description'
p130209
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p130210
sS'cpp_type'
p130211
S'std::vector<OutputName, std::allocator<OutputName> >'
p130212
sS'default'
p130213
g3
sS'name'
p130214
S'outputs'
p130215
sS'required'
p130216
I00
sS'group_name'
p130217
S'Advanced'
p130218
sa(dp130219
S'description'
p130220
S'The points where you want to evaluate the variables\n'
p130221
sS'cpp_type'
p130222
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p130223
sS'default'
p130224
g3
sS'name'
p130225
S'points'
p130226
sS'required'
p130227
I01
sS'group_name'
p130228
Nsa(dp130229
S'name'
p130230
S'sort_by'
p130231
sS'cpp_type'
p130232
S'MooseEnum'
p130233
sS'default'
p130234
g3
sS'description'
p130235
S'What to sort the samples by\n'
p130236
sS'required'
p130237
I01
sS'options'
p130238
S'x y z id'
p130239
sS'group_name'
p130240
Nsa(dp130241
S'description'
p130242
g3
sS'cpp_type'
p130243
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130244
sS'default'
p130245
S'PointValueSampler'
p130246
sS'name'
p130247
S'type'
p130248
sS'required'
p130249
I00
sS'group_name'
p130250
Nsa(dp130251
S'description'
p130252
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130253
sS'cpp_type'
p130254
S'bool'
p130255
sS'default'
p130256
S'0'
p130257
sS'name'
p130258
S'use_displaced_mesh'
p130259
sS'required'
p130260
I00
sS'group_name'
p130261
S'Advanced'
p130262
sa(dp130263
S'description'
p130264
S'The names of the variables that this VectorPostprocessor operates on\n'
p130265
sS'cpp_type'
p130266
S'std::vector<VariableName>'
p130267
sS'default'
p130268
g3
sS'name'
p130269
S'variable'
p130270
sS'required'
p130271
I01
sS'group_name'
p130272
NsasS'name'
p130273
S'/VectorPostprocessors/PointValueSampler'
p130274
sa(dp130275
S'description'
p130276
g3
sS'subblocks'
p130277
NsS'parameters'
p130278
(lp130279
(dp130280
S'description'
p130281
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p130282
sS'cpp_type'
p130283
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p130284
sS'default'
p130285
g3
sS'name'
p130286
S'boundary'
p130287
sS'required'
p130288
I00
sS'group_name'
p130289
Nsa(dp130290
S'description'
p130291
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130292
sS'cpp_type'
p130293
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130294
sS'default'
p130295
g3
sS'name'
p130296
S'control_tags'
p130297
sS'required'
p130298
I00
sS'group_name'
p130299
Nsa(dp130300
S'name'
p130301
S'execute_on'
p130302
sS'cpp_type'
p130303
S'MultiMooseEnum'
p130304
sS'default'
p130305
S'TIMESTEP_END'
p130306
sS'description'
p130307
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130308
sS'required'
p130309
I00
sS'options'
p130310
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p130311
sS'group_name'
p130312
Nsa(dp130313
S'description'
p130314
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p130315
sS'cpp_type'
p130316
S'std::vector<OutputName, std::allocator<OutputName> >'
p130317
sS'default'
p130318
g3
sS'name'
p130319
S'outputs'
p130320
sS'required'
p130321
I00
sS'group_name'
p130322
S'Advanced'
p130323
sa(dp130324
S'name'
p130325
S'sort_by'
p130326
sS'cpp_type'
p130327
S'MooseEnum'
p130328
sS'default'
p130329
g3
sS'description'
p130330
S'What to sort the samples by\n'
p130331
sS'required'
p130332
I01
sS'options'
p130333
S'x y z id'
p130334
sS'group_name'
p130335
Nsa(dp130336
S'description'
p130337
g3
sS'cpp_type'
p130338
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130339
sS'default'
p130340
S'SideValueSampler'
p130341
sS'name'
p130342
S'type'
p130343
sS'required'
p130344
I00
sS'group_name'
p130345
Nsa(dp130346
S'description'
p130347
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130348
sS'cpp_type'
p130349
S'bool'
p130350
sS'default'
p130351
S'0'
p130352
sS'name'
p130353
S'use_displaced_mesh'
p130354
sS'required'
p130355
I00
sS'group_name'
p130356
S'Advanced'
p130357
sa(dp130358
S'description'
p130359
S'The names of the variables that this VectorPostprocessor operates on\n'
p130360
sS'cpp_type'
p130361
S'std::vector<VariableName>'
p130362
sS'default'
p130363
g3
sS'name'
p130364
S'variable'
p130365
sS'required'
p130366
I01
sS'group_name'
p130367
NsasS'name'
p130368
S'/VectorPostprocessors/SideValueSampler'
p130369
sa(dp130370
S'description'
p130371
S'Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n'
p130372
sS'subblocks'
p130373
NsS'parameters'
p130374
(lp130375
(dp130376
S'description'
p130377
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p130378
sS'cpp_type'
p130379
S'std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
p130380
sS'default'
p130381
g3
sS'name'
p130382
S'control_tags'
p130383
sS'required'
p130384
I00
sS'group_name'
p130385
Nsa(dp130386
S'name'
p130387
S'execute_on'
p130388
sS'cpp_type'
p130389
S'MultiMooseEnum'
p130390
sS'default'
p130391
S'TIMESTEP_END'
p130392
sS'description'
p130393
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p130394
sS'required'
p130395
I00
sS'options'
p130396
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p130397
sS'group_name'
p130398
Nsa(dp130399
S'description'
p130400
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p130401
sS'cpp_type'
p130402
S'std::vector<OutputName, std::allocator<OutputName> >'
p130403
sS'default'
p130404
g3
sS'name'
p130405
S'outputs'
p130406
sS'required'
p130407
I00
sS'group_name'
p130408
S'Advanced'
p130409
sa(dp130410
S'description'
p130411
S'The postprocessors whose values are to be reported\n'
p130412
sS'cpp_type'
p130413
S'std::vector<PostprocessorName, std::allocator<PostprocessorName> >'
p130414
sS'default'
p130415
g3
sS'name'
p130416
S'postprocessors'
p130417
sS'required'
p130418
I01
sS'group_name'
p130419
Nsa(dp130420
S'description'
p130421
g3
sS'cpp_type'
p130422
S'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >'
p130423
sS'default'
p130424
S'VectorOfPostprocessors'
p130425
sS'name'
p130426
S'type'
p130427
sS'required'
p130428
I00
sS'group_name'
p130429
Nsa(dp130430
S'description'
p130431
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p130432
sS'cpp_type'
p130433
S'bool'
p130434
sS'default'
p130435
S'0'
p130436
sS'name'
p130437
S'use_displaced_mesh'
p130438
sS'required'
p130439
I00
sS'group_name'
p130440
S'Advanced'
p130441
sasS'name'
p130442
S'/VectorPostprocessors/VectorOfPostprocessors'
p130443
sasS'parameters'
p130444
NsS'name'
p130445
S'/VectorPostprocessors'
p130446
sa.